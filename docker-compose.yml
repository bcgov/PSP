version: "3.5"

include:
  - tools/mayan-edms/docker-compose.yml

services:
  ####################### Database #######################
  database:
    profiles:
      - all
      - psp
    environment:
      - TARGET_SPRINT
      - SEED
    restart: on-failure:1
    container_name: psp-db
    build:
      context: source/database/mssql/scripts/dbscripts
    env_file:
      - source/database/mssql/.env
    ports:
      - ${DATABASE_PORT:-5433}:1433
    volumes:
      - api-db-data:/var/opt/data
    networks:
      - psp

  ## Emulates the Openshift database job image for testing purposes
  rhel8-database:
    profiles:
      - debug
    environment:
      - TARGET_SPRINT
      - SEED
    restart: on-failure:1
    container_name: psp-rhel-db
    build:
      context: source/database/mssql
      dockerfile: ./scripts/dbscripts/rhel8.dockerfile
    env_file:
      - source/database/mssql/.env
    ports:
      - 6433:1433
    volumes:
      - api-db-rhel-data:/var/opt/data
    networks:
      - psp

  ####################### Backend #######################
  backend:
    profiles:
      - all
      - psp
    restart: on-failure:1
    container_name: psp-api
    build:
      context: source/backend
      args:
        BUILD_CONFIGURATION: Debug
    env_file: source/backend/api/.env
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    ports:
      - ${API_HTTPS_PORT:-5001}:443
      - ${API_HTTP_PORT:-5000}:8080
    depends_on:
      - database
      - geoserver
    networks:
      - psp

  ####################### Proxy #######################
  proxy:
    profiles:
      - all
      - psp
    restart: on-failure:1
    container_name: psp-proxy
    build:
      context: source/backend
      dockerfile: Dockerfile.proxy
      args:
        BUILD_CONFIGURATION: Debug
    env_file: source/backend/proxy/.env
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    ports:
      - ${PROXY_HTTPS_PORT:-5003}:443
      - ${PROXY_HTTP_PORT:-5002}:8080
    depends_on:
      - geoserver
    networks:
      - psp

  ####################### Scheduler #######################
  scheduler:
    profiles:
      - all
      - psp
    restart: on-failure:1
    container_name: psp-scheduler
    build:
      context: source/backend
      dockerfile: Dockerfile.scheduler
      args:
        BUILD_CONFIGURATION: Debug
    env_file: source/backend/scheduler/.env
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    ports:
      - ${SCHEDULER_HTTPS_PORT:-8058}:443
      - ${SCHEDULER_HTTP_PORT:-8057}:8080
    depends_on:
      - scheduler-redis
    networks:
      - psp

  ####################### Redis #######################
  scheduler-redis:
    image: redis:6.2-alpine
    profiles:
      - all
      - psp
    restart: on-failure:1
    ports:
      - 6379:6379
    networks:
      - psp
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis:/data

  ####################### Frontend #######################
  frontend:
    profiles:
      - all
      - psp
    stdin_open: true
    tty: true
    restart: on-failure:1
    container_name: psp-app
    build:
      context: source/frontend
    volumes:
      - ./source/frontend/src:/usr/app/src
      - ./source/frontend/public:/usr/app/public
      - frontend-node-cache:/usr/app/node_modules
    ports:
      - ${APP_HTTP_PORT:-3000}:3000
    depends_on:
      - backend
    env_file: ./source/frontend/.env
    networks:
      - psp

  ####################### GeoServer #######################
  geoserver:
    profiles:
      - all
      - psp
    image: kartoza/geoserver:2.19.2
    volumes:
      - ./tools/geoserver/geoserver_data:/opt/geoserver/data_dir/workspaces
    ports:
      - 8600:8080
    restart: on-failure
    env_file: tools/geoserver/.env
    healthcheck:
      test: curl --fail -s http://localhost:8080/ || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3
    networks:
      - psp

  ####################### Clam AV #######################
  # example av test file here: https://serverfault.com/questions/484082/how-should-i-test-clam-anti-virus
  clamav:
    profiles:
      - all
    image: mkodockx/docker-clamav:alpine-idb-amd64
    environment:
      - CLAMD_CONF_MaxFileSize=500M
      - CLAMD_CONF_StreamMaxLength=500M
    ports:
      - 3310:3310
    restart: on-failure
    container_name: psp-clamav
    healthcheck:
      test: [ "CMD", "./check.sh" ]
      interval: 60s
      retries: 3
      start_period: 120s
    networks:
      - psp

  prometheus:
    profiles:
      - all
      - monitoring
    image: ubuntu/prometheus
    container_name: psp-prometheus
    ports:
      - 9000:9090
    environment:
      - TZ=UTC
    volumes:
      - ./tools/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./tools/prometheus/alert-rules.yml:/etc/prometheus/alert-rules.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.enable-lifecycle"

  grafana:
    profiles:
      - all
      - monitoring
    image: grafana/grafana-oss
    container_name: psp-grafana
    restart: on-failure
    ports:
      - 4000:3000
    depends_on:
      - prometheus

####################### Networks Definition #######################
networks:
  psp:
    name: psp
    driver: bridge

####################### Volumes Definition #######################
volumes:
  api-db-data:
    name: psp-api-db-data
  api-db-rhel-data:
    name: psp-api-db-rhel-data
  frontend-node-cache:
    name: psp-frontend-node-cache
  redis-scheduler:
    driver: local
