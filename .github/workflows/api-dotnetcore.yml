name: API (.NET 5)

on:
  push:
    branches: [master, dev, test]
  pull_request:
    branches: [master, dev, test]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      working-directory: ./backend
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - name: Extract Branch Name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Setup .NET 5
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.300

      - name: Install dependencies
        run: dotnet restore
        working-directory: ${{env.working-directory}}

      - name: Install coverlet for code coverage
        run: dotnet tool install -g coverlet.console --version 1.7.2
        working-directory: ${{env.working-directory}}

      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: ${{env.working-directory}}

      - name: Test
        run: dotnet test --no-restore --verbosity normal
        working-directory: ${{env.working-directory}}

        # For future reference, if we have N test projects the flow of events would be:
        #
        # **Pre-conditions:**
        # - All projects export their individual coverage percents in JSON and OpenCover format
        # - There's no way to merge OpenCover xmls together (that I could find)
        # - Common folder "../TestResults" is  git ignored so nothing gets in source control
        #
        # **Steps:**
        #
        # - Test-project 1
        #   - generate coverage files (without merging)
        #   - copy results to common folder "../TestResults"
        # - Test-project 2
        #   - generate coverage files merging with previous `coverage.json`
        #   - the previous `coverage.opencoverage.xml` is ignored
        #   - copy results to common folder "../TestResults"
        # ...
        # - Test-project N
        #   - generate coverage files merging with previous `coverage.json`
        #   - the previous `coverage.opencoverage.xml` is ignored
        #   - copy results to common folder "../TestResults"
        #
        # The final `coverage.opencover.xml` is the one we want
      - name: Generate code coverage
        working-directory: ${{env.working-directory}}/tests/unit
        run: |
          mkdir -p TestResults
          rm -rf api/TestResults
          rm -rf dal/TestResults
          cd api
          dotnet test --collect:"XPlat Code Coverage" --settings coverlet.runsettings --no-restore
          mv TestResults/*/* ../TestResults/
          cd ..
          cd dal
          dotnet test --collect:"XPlat Code Coverage" --settings coverlet.runsettings --no-restore
          mv TestResults/*/* ../TestResults/
          cd ..
          head TestResults/coverage.opencover.xml

      - name: Codecov
        uses: codecov/codecov-action@v1.5.0
        with:
          # User defined upload name. Visible in Codecov UI
          name: PIMS
          # Repository upload token - get it from codecov.io. Required only for private repositories
          token: ${{ secrets.CodeCov }}
          # Path to coverage file to upload
          file: ${{env.working-directory}}/tests/unit/TestResults/coverage.opencover.xml
          # Flag upload to group coverage metrics (e.g. unittests | integration | ui,chrome)
          flags: unittests
          # Environment variables to tag the upload with (e.g. PYTHON | OS,PYTHON)
          env_vars: C#
          # Specify whether or not CI build should fail if Codecov runs into an error during upload
          fail_ci_if_error: true

      - name: SonarScanner for .NET 5 with pull request decoration support
        uses: highbyte/sonarscan-dotnet@2.0
        if: ${{ github.event_name == 'push' }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          dotnetBuildArguments: ${{env.working-directory}}
          dotnetTestArguments: ${{env.working-directory}} --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          # Optional extra command arguments the the SonarScanner 'begin' command
          sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
          # The key of the SonarQube project
          sonarProjectKey: 483bc59d-f9ef-428c-866e-581d9ea69eab
          # The name of the SonarQube project
          sonarProjectName: PIMS-API
          # The SonarQube server URL. For SonarCloud, skip this setting.
          sonarHostname: ${{secrets.SONAR_URL}}
