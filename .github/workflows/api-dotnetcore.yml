name: API (.NET 8)

on:
  push:
    branches: [master, dev, test]
  pull_request:
    branches: [master, dev, test]

jobs:
  # JOB to run change detection
  check-changes:
    runs-on: ubuntu-22.04
    # Set job outputs to values from filter step
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'source/backend/**'

  build-backend:
    needs: check-changes
    runs-on: ubuntu-22.04
    if: ${{ needs.check-changes.outputs.backend == 'true' }}
    strategy:
      matrix:
        services:
          [
            { directory: ./source/backend/api, solution: "Pims.Api.csproj" },
            {
              directory: ./source/backend/proxy,
              solution: "Pims.Proxy.csproj",
            },
            {
              directory: ./source/backend/scheduler,
              solution: "Pims.Scheduler.csproj",
            },
            { directory: ./source/backend/tests, solution: "PimsUnitTest.sln" },
          ]
    env:
      working-directory: ${{ matrix.services.directory }}
      solution-name: ${{ matrix.services.solution }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GIT_BRANCH: "${{ github.ref }}"

    steps:
      - uses: actions/checkout@v4

      - name: Extract Branch Name
        shell: bash
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "8.0.x"

      - name: Install dependencies
        run: dotnet restore ${{env.solution-name}}
        working-directory: ${{env.working-directory}}

      - name: Build
        run: dotnet build ${{env.solution-name}} --configuration Release --no-restore
        working-directory: ${{env.working-directory}}

      - name: Install coverlet for code coverage
        if: ${{ env.solution-name == 'PimsUnitTest.sln' }}
        run: dotnet tool install -g coverlet.console --version 1.7.2
        working-directory: ${{env.working-directory}}

      - name: Test
        if: ${{ env.solution-name == 'PimsUnitTest.sln' }}
        run: dotnet test PimsUnitTest.sln --no-restore --verbosity normal
        working-directory: ${{env.working-directory}}

        # For future reference, if we have N test projects the flow of events would be:
        #
        # **Pre-conditions:**
        # - All projects export their individual coverage percents in JSON and OpenCover format
        # - There's no way to merge OpenCover xmls together (that I could find)
        # - Common folder "../TestResults" is  git ignored so nothing gets in source control
        #
        # **Steps:**
        #
        # - Test-project 1
        #   - generate coverage files (without merging)
        #   - copy results to common folder "../TestResults"
        # - Test-project 2
        #   - generate coverage files merging with previous `coverage.json`
        #   - the previous `coverage.opencoverage.xml` is ignored
        #   - copy results to common folder "../TestResults"
        # ...
        # - Test-project N
        #   - generate coverage files merging with previous `coverage.json`
        #   - the previous `coverage.opencoverage.xml` is ignored
        #   - copy results to common folder "../TestResults"
        #
        # The final `coverage.opencover.xml` is the one we want
      - name: Generate code coverage
        if: ${{ env.solution-name == 'PimsUnitTest.sln' }}
        working-directory: ${{env.working-directory}}
        run: |
          pwd
          mkdir -p TestResults
          rm -rf api/TestResults
          rm -rf dal/TestResults
          rm -rf mockdal/TestResults
          rm -rf scheduler/TestResults
          cd api
          dotnet test --collect:"XPlat Code Coverage" --settings coverlet.runsettings --no-restore
          mv TestResults/*/* ../TestResults/
          cd ..
          cd dal
          dotnet test --collect:"XPlat Code Coverage" --settings coverlet.runsettings --no-restore
          mv TestResults/*/* ../TestResults/
          cd ..
          cd mockdal
          dotnet test --collect:"XPlat Code Coverage" --settings coverlet.runsettings --no-restore
          mv TestResults/*/* ../TestResults/
          cd ..
          cd scheduler
          dotnet test --collect:"XPlat Code Coverage" --settings coverlet.runsettings --no-restore
          mv TestResults/*/* ../TestResults/
          cd ..
          echo "TestResults folder"
          ls TestResults
          head TestResults/coverage.opencover.xml

      - name: Save PR number and scan results
        if: ${{ env.solution-name == 'PimsUnitTest.sln' }}
        run: |
          mkdir -p ./pr
          echo ${{ github.event.pull_request.number }} > ./pr/NR
          cp ${{env.working-directory}}/TestResults/coverage.opencover.xml ./pr

      - uses: actions/upload-artifact@v4
        if: ${{ env.solution-name == 'PimsUnitTest.sln' }}
        with:
          name: pr-codecov
          path: pr/

  post-build:
    needs: build-backend
    runs-on: ubuntu-22.04
    env:
      working-directory: ./source/backend
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GIT_BRANCH: "${{github.ref}}"
    steps:
      # Send notifications only if MS_TEAMS_NOTIFY_URL secret has been set
      - name: Failure notification to Teams Channel
        env:
          MS_TEAMS_NOTIFY_URL: ${{ secrets.MS_TEAMS_NOTIFY_URL }}
        if: env.MS_TEAMS_NOTIFY_URL != '' && failure()
        uses: dragos-cojocari/ms-teams-notification@v1.0.2
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ env.MS_TEAMS_NOTIFY_URL }}
          notification-summary: PIMS API FAILED in ${{env.GIT_BRANCH}} environment
          notification-color: ff0000
          timezone: America/Los_Angeles
