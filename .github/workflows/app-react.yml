name: APP (React)

on:
  push:
    branches: [master, dev, test]
  pull_request:
    branches: [master, dev, test]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CI: true
      working-directory: ./frontend

    strategy:
      matrix:
        node-version: [10.x]

    steps:
      - uses: actions/checkout@v2

      - name: Extract Branch Name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - run: npm ci
        working-directory: ${{env.working-directory}}

      - run: npm run lint
        working-directory: ${{env.working-directory}}

      - run: npm run build --if-present
        working-directory: ${{env.working-directory}}

      - run: npm run coverage
        working-directory: ${{env.working-directory}}

      - name: Codecov
        uses: codecov/codecov-action@v1.5.0
        with:
          # User defined upload name. Visible in Codecov UI
          name: PIMS
          # Repository upload token - get it from codecov.io. Required only for private repositories
          token: ${{ secrets.CodeCov }}
          # Path to coverage file to upload
          file: ${{env.working-directory}}/coverage/coverage-final.json
          # Flag upload to group coverage metrics (e.g. unittests | integration | ui,chrome)
          flags: unittests
          # Environment variables to tag the upload with (e.g. PYTHON | OS,PYTHON)
          env_vars: javascript
          # Specify whether or not CI build should fail if Codecov runs into an error during upload
          fail_ci_if_error: true

      - name: SonarQube Scan
        uses: kitabisa/sonarqube-action@v1.1.0
        with:
          host: ${{secrets.SONAR_URL}}
          login: ${{secrets.SONAR_TOKEN}}
          projectBaseDir: ${{env.working-directory}}
          projectKey: format('pims-frontend-{0}', ${{steps.extract_branch.outputs.branch}})
          projectName: format('PIMS Frontend [{0}]', ${{steps.extract_branch.outputs.branch}})
