PRINT N'Replace Update Triggers'
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_ACCRQT_I_S_U_TR ON PIMS_ACCESS_REQUEST INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.ACCESS_REQUEST_ID = deleted.ACCESS_REQUEST_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_ACCESS_REQUEST
    SET [ACCESS_REQUEST_ID] = inserted.[ACCESS_REQUEST_ID]
      , [USER_ID] = inserted.[USER_ID]
      , [NOTE] = inserted.[NOTE]
      , [STATUS] = inserted.[STATUS]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_ACCESS_REQUEST
    INNER JOIN inserted
    ON (PIMS_ACCESS_REQUEST.ACCESS_REQUEST_ID = inserted.ACCESS_REQUEST_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_ACRQAG_I_S_U_TR ON PIMS_ACCESS_REQUEST_AGENCY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.ACCESS_REQUEST_AGENCY_ID = deleted.ACCESS_REQUEST_AGENCY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_ACCESS_REQUEST_AGENCY
    SET [ACCESS_REQUEST_AGENCY_ID] = inserted.[ACCESS_REQUEST_AGENCY_ID]
      , [ACCESS_REQUEST_ID] = inserted.[ACCESS_REQUEST_ID]
      , [AGENCY_ID] = inserted.[AGENCY_ID]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_ACCESS_REQUEST_AGENCY
    INNER JOIN inserted
    ON (PIMS_ACCESS_REQUEST_AGENCY.ACCESS_REQUEST_AGENCY_ID = inserted.ACCESS_REQUEST_AGENCY_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_ACCRQR_I_S_U_TR ON PIMS_ACCESS_REQUEST_ROLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.ACCESS_REQUEST_ROLE_ID = deleted.ACCESS_REQUEST_ROLE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_ACCESS_REQUEST_ROLE
    SET [ACCESS_REQUEST_ROLE_ID] = inserted.[ACCESS_REQUEST_ROLE_ID]
      , [ROLE_ID] = inserted.[ROLE_ID]
      , [ACCESS_REQUEST_ID] = inserted.[ACCESS_REQUEST_ID]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_ACCESS_REQUEST_ROLE
    INNER JOIN inserted
    ON (PIMS_ACCESS_REQUEST_ROLE.ACCESS_REQUEST_ROLE_ID = inserted.ACCESS_REQUEST_ROLE_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_ADDR_I_S_U_TR ON PIMS_ADDRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.ADDRESS_ID = deleted.ADDRESS_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_ADDRESS
    SET [ADDRESS_ID] = inserted.[ADDRESS_ID]
      , [PROVINCE_ID] = inserted.[PROVINCE_ID]
      , [ADDRESS1] = inserted.[ADDRESS1]
      , [ADDRESS2] = inserted.[ADDRESS2]
      , [POSTAL] = inserted.[POSTAL]
      , [ADMINISTRATIVE_AREA] = inserted.[ADMINISTRATIVE_AREA]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_ADDRESS
    INNER JOIN inserted
    ON (PIMS_ADDRESS.ADDRESS_ID = inserted.ADDRESS_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_ADMINA_I_S_U_TR ON PIMS_ADMINISTRATIVE_AREA INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.ADMINISTRATIVE_AREA_ID = deleted.ADMINISTRATIVE_AREA_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_ADMINISTRATIVE_AREA
    SET [ADMINISTRATIVE_AREA_ID] = inserted.[ADMINISTRATIVE_AREA_ID]
      , [NAME] = inserted.[NAME]
      , [GROUP_NAME] = inserted.[GROUP_NAME]
      , [ABBREVIATION] = inserted.[ABBREVIATION]
      , [BOUNDARY_TYPE] = inserted.[BOUNDARY_TYPE]
      , [IS_DISABLED] = inserted.[IS_DISABLED]
      , [SORT_ORDER] = inserted.[SORT_ORDER]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_ADMINISTRATIVE_AREA
    INNER JOIN inserted
    ON (PIMS_ADMINISTRATIVE_AREA.ADMINISTRATIVE_AREA_ID = inserted.ADMINISTRATIVE_AREA_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_AGNCY_I_S_U_TR ON PIMS_AGENCY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.AGENCY_ID = deleted.AGENCY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_AGENCY
    SET [AGENCY_ID] = inserted.[AGENCY_ID]
      , [PARENT_AGENCY_ID] = inserted.[PARENT_AGENCY_ID]
      , [NAME] = inserted.[NAME]
      , [DESCRIPTION] = inserted.[DESCRIPTION]
      , [CODE] = inserted.[CODE]
      , [EMAIL] = inserted.[EMAIL]
      , [SEND_EMAIL] = inserted.[SEND_EMAIL]
      , [ADDRESS_TO] = inserted.[ADDRESS_TO]
      , [IS_DISABLED] = inserted.[IS_DISABLED]
      , [SORT_ORDER] = inserted.[SORT_ORDER]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_AGENCY
    INNER JOIN inserted
    ON (PIMS_AGENCY.AGENCY_ID = inserted.AGENCY_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_BUILDG_I_S_U_TR ON PIMS_BUILDING INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.BUILDING_ID = deleted.BUILDING_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_BUILDING
    SET [BUILDING_ID] = inserted.[BUILDING_ID]
      , [AGENCY_ID] = inserted.[AGENCY_ID]
      , [PROPERTY_TYPE_ID] = inserted.[PROPERTY_TYPE_ID]
      , [PROPERTY_CLASSIFICATION_ID] = inserted.[PROPERTY_CLASSIFICATION_ID]
      , [BUILDING_CONSTRUCTION_TYPE_ID] = inserted.[BUILDING_CONSTRUCTION_TYPE_ID]
      , [BUILDING_PREDOMINATE_USE_ID] = inserted.[BUILDING_PREDOMINATE_USE_ID]
      , [BUILDING_OCCUPANT_TYPE_ID] = inserted.[BUILDING_OCCUPANT_TYPE_ID]
      , [ADDRESS_ID] = inserted.[ADDRESS_ID]
      , [NAME] = inserted.[NAME]
      , [DESCRIPTION] = inserted.[DESCRIPTION]
      , [OCCUPANT_NAME] = inserted.[OCCUPANT_NAME]
      , [BUILDING_FLOOR_COUNT] = inserted.[BUILDING_FLOOR_COUNT]
      , [BUILDING_TENANCY] = inserted.[BUILDING_TENANCY]
      , [BUILDING_TENANCY_UPDATED_ON] = inserted.[BUILDING_TENANCY_UPDATED_ON]
      , [TOTAL_AREA] = inserted.[TOTAL_AREA]
      , [RENTABLE_AREA] = inserted.[RENTABLE_AREA]
      , [PROJECT_NUMBERS] = inserted.[PROJECT_NUMBERS]
      , [LEASE_EXPIRY] = inserted.[LEASE_EXPIRY]
      , [TRANSFER_LEASE_ON_SALE] = inserted.[TRANSFER_LEASE_ON_SALE]
      , [BOUNDARY] = inserted.[BOUNDARY]
      , [LOCATION] = inserted.[LOCATION]
      , [ENCUMBRANCE_REASON] = inserted.[ENCUMBRANCE_REASON]
      , [LEASED_LAND_METADATA] = inserted.[LEASED_LAND_METADATA]
      , [IS_VISIBLE_TO_OTHER_AGENCIES] = inserted.[IS_VISIBLE_TO_OTHER_AGENCIES]
      , [IS_SENSITIVE] = inserted.[IS_SENSITIVE]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_BUILDING
    INNER JOIN inserted
    ON (PIMS_BUILDING.BUILDING_ID = inserted.BUILDING_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_BLCNTY_I_S_U_TR ON PIMS_BUILDING_CONSTRUCTION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.BUILDING_CONSTRUCTION_TYPE_ID = deleted.BUILDING_CONSTRUCTION_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_BUILDING_CONSTRUCTION_TYPE
    SET [BUILDING_CONSTRUCTION_TYPE_ID] = inserted.[BUILDING_CONSTRUCTION_TYPE_ID]
      , [NAME] = inserted.[NAME]
      , [IS_DISABLED] = inserted.[IS_DISABLED]
      , [SORT_ORDER] = inserted.[SORT_ORDER]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_BUILDING_CONSTRUCTION_TYPE
    INNER JOIN inserted
    ON (PIMS_BUILDING_CONSTRUCTION_TYPE.BUILDING_CONSTRUCTION_TYPE_ID = inserted.BUILDING_CONSTRUCTION_TYPE_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_BLDEVL_I_S_U_TR ON PIMS_BUILDING_EVALUATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.BUILDING_EVALUATION_ID = deleted.BUILDING_EVALUATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_BUILDING_EVALUATION
    SET [BUILDING_EVALUATION_ID] = inserted.[BUILDING_EVALUATION_ID]
      , [BUILDING_ID] = inserted.[BUILDING_ID]
      , [DATE] = inserted.[DATE]
      , [KEY] = inserted.[KEY]
      , [VALUE] = inserted.[VALUE]
      , [NOTE] = inserted.[NOTE]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_BUILDING_EVALUATION
    INNER JOIN inserted
    ON (PIMS_BUILDING_EVALUATION.BUILDING_EVALUATION_ID = inserted.BUILDING_EVALUATION_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_BLDFSC_I_S_U_TR ON PIMS_BUILDING_FISCAL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.BUILDING_FISCAL_ID = deleted.BUILDING_FISCAL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_BUILDING_FISCAL
    SET [BUILDING_FISCAL_ID] = inserted.[BUILDING_FISCAL_ID]
      , [BUILDING_ID] = inserted.[BUILDING_ID]
      , [FISCAL_YEAR] = inserted.[FISCAL_YEAR]
      , [KEY] = inserted.[KEY]
      , [VALUE] = inserted.[VALUE]
      , [NOTE] = inserted.[NOTE]
      , [EFFECTIVE_DATE] = inserted.[EFFECTIVE_DATE]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_BUILDING_FISCAL
    INNER JOIN inserted
    ON (PIMS_BUILDING_FISCAL.BUILDING_FISCAL_ID = inserted.BUILDING_FISCAL_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_BLOCCT_I_S_U_TR ON PIMS_BUILDING_OCCUPANT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.BUILDING_OCCUPANT_TYPE_ID = deleted.BUILDING_OCCUPANT_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_BUILDING_OCCUPANT_TYPE
    SET [BUILDING_OCCUPANT_TYPE_ID] = inserted.[BUILDING_OCCUPANT_TYPE_ID]
      , [NAME] = inserted.[NAME]
      , [IS_DISABLED] = inserted.[IS_DISABLED]
      , [SORT_ORDER] = inserted.[SORT_ORDER]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_BUILDING_OCCUPANT_TYPE
    INNER JOIN inserted
    ON (PIMS_BUILDING_OCCUPANT_TYPE.BUILDING_OCCUPANT_TYPE_ID = inserted.BUILDING_OCCUPANT_TYPE_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_BLPRDU_I_S_U_TR ON PIMS_BUILDING_PREDOMINATE_USE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.BUILDING_PREDOMINATE_USE_ID = deleted.BUILDING_PREDOMINATE_USE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_BUILDING_PREDOMINATE_USE
    SET [BUILDING_PREDOMINATE_USE_ID] = inserted.[BUILDING_PREDOMINATE_USE_ID]
      , [NAME] = inserted.[NAME]
      , [IS_DISABLED] = inserted.[IS_DISABLED]
      , [SORT_ORDER] = inserted.[SORT_ORDER]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_BUILDING_PREDOMINATE_USE
    INNER JOIN inserted
    ON (PIMS_BUILDING_PREDOMINATE_USE.BUILDING_PREDOMINATE_USE_ID = inserted.BUILDING_PREDOMINATE_USE_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_CLAIM_I_S_U_TR ON PIMS_CLAIM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.CLAIM_ID = deleted.CLAIM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_CLAIM
    SET [CLAIM_ID] = inserted.[CLAIM_ID]
      , [CLAIM_UID] = inserted.[CLAIM_UID]
      , [NAME] = inserted.[NAME]
      , [KEYCLOAK_ROLE_ID] = inserted.[KEYCLOAK_ROLE_ID]
      , [DESCRIPTION] = inserted.[DESCRIPTION]
      , [IS_DISABLED] = inserted.[IS_DISABLED]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_CLAIM
    INNER JOIN inserted
    ON (PIMS_CLAIM.CLAIM_ID = inserted.CLAIM_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_NOTIFQ_I_S_U_TR ON PIMS_NOTIFICATION_QUEUE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.NOTIFICATION_QUEUE_ID = deleted.NOTIFICATION_QUEUE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_NOTIFICATION_QUEUE
    SET [NOTIFICATION_QUEUE_ID] = inserted.[NOTIFICATION_QUEUE_ID]
      , [PROJECT_ID] = inserted.[PROJECT_ID]
      , [TO_AGENCY_ID] = inserted.[TO_AGENCY_ID]
      , [NOTIFICATION_TEMPLATE_ID] = inserted.[NOTIFICATION_TEMPLATE_ID]
      , [KEY] = inserted.[KEY]
      , [STATUS] = inserted.[STATUS]
      , [PRIORITY] = inserted.[PRIORITY]
      , [ENCODING] = inserted.[ENCODING]
      , [SEND_ON] = inserted.[SEND_ON]
      , [TO] = inserted.[TO]
      , [SUBJECT] = inserted.[SUBJECT]
      , [BODY_TYPE] = inserted.[BODY_TYPE]
      , [BODY] = inserted.[BODY]
      , [BCC] = inserted.[BCC]
      , [CC] = inserted.[CC]
      , [TAG] = inserted.[TAG]
      , [CHES_MESSAGE_ID] = inserted.[CHES_MESSAGE_ID]
      , [CHES_TRANSACTION_ID] = inserted.[CHES_TRANSACTION_ID]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_NOTIFICATION_QUEUE
    INNER JOIN inserted
    ON (PIMS_NOTIFICATION_QUEUE.NOTIFICATION_QUEUE_ID = inserted.NOTIFICATION_QUEUE_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_NTTMPL_I_S_U_TR ON PIMS_NOTIFICATION_TEMPLATE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.NOTIFICATION_TEMPLATE_ID = deleted.NOTIFICATION_TEMPLATE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_NOTIFICATION_TEMPLATE
    SET [NOTIFICATION_TEMPLATE_ID] = inserted.[NOTIFICATION_TEMPLATE_ID]
      , [NAME] = inserted.[NAME]
      , [DESCRIPTION] = inserted.[DESCRIPTION]
      , [TO] = inserted.[TO]
      , [CC] = inserted.[CC]
      , [BCC] = inserted.[BCC]
      , [AUDIENCE] = inserted.[AUDIENCE]
      , [ENCODING] = inserted.[ENCODING]
      , [BODY_TYPE] = inserted.[BODY_TYPE]
      , [PRIORITY] = inserted.[PRIORITY]
      , [SUBJECT] = inserted.[SUBJECT]
      , [BODY] = inserted.[BODY]
      , [TAG] = inserted.[TAG]
      , [IS_DISABLED] = inserted.[IS_DISABLED]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_NOTIFICATION_TEMPLATE
    INNER JOIN inserted
    ON (PIMS_NOTIFICATION_TEMPLATE.NOTIFICATION_TEMPLATE_ID = inserted.NOTIFICATION_TEMPLATE_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PARCEL_I_S_U_TR ON PIMS_PARCEL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PARCEL_ID = deleted.PARCEL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PARCEL
    SET [PARCEL_ID] = inserted.[PARCEL_ID]
      , [AGENCY_ID] = inserted.[AGENCY_ID]
      , [PROPERTY_CLASSIFICATION_ID] = inserted.[PROPERTY_CLASSIFICATION_ID]
      , [PROPERTY_TYPE_ID] = inserted.[PROPERTY_TYPE_ID]
      , [ADDRESS_ID] = inserted.[ADDRESS_ID]
      , [NAME] = inserted.[NAME]
      , [DESCRIPTION] = inserted.[DESCRIPTION]
      , [PID] = inserted.[PID]
      , [PIN] = inserted.[PIN]
      , [LAND_AREA] = inserted.[LAND_AREA]
      , [LAND_LEGAL_DESCRIPTION] = inserted.[LAND_LEGAL_DESCRIPTION]
      , [ZONING] = inserted.[ZONING]
      , [ZONING_POTENTIAL] = inserted.[ZONING_POTENTIAL]
      , [NOT_OWNED] = inserted.[NOT_OWNED]
      , [BOUNDARY] = inserted.[BOUNDARY]
      , [LOCATION] = inserted.[LOCATION]
      , [ENCUMBRANCE_REASON] = inserted.[ENCUMBRANCE_REASON]
      , [PROJECT_NUMBERS] = inserted.[PROJECT_NUMBERS]
      , [IS_VISIBLE_TO_OTHER_AGENCIES] = inserted.[IS_VISIBLE_TO_OTHER_AGENCIES]
      , [IS_SENSITIVE] = inserted.[IS_SENSITIVE]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PARCEL
    INNER JOIN inserted
    ON (PIMS_PARCEL.PARCEL_ID = inserted.PARCEL_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PRCLBL_I_S_U_TR ON PIMS_PARCEL_BUILDING INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PARCEL_BUILDING_ID = deleted.PARCEL_BUILDING_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PARCEL_BUILDING
    SET [PARCEL_BUILDING_ID] = inserted.[PARCEL_BUILDING_ID]
      , [PARCEL_ID] = inserted.[PARCEL_ID]
      , [BUILDING_ID] = inserted.[BUILDING_ID]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PARCEL_BUILDING
    INNER JOIN inserted
    ON (PIMS_PARCEL_BUILDING.PARCEL_BUILDING_ID = inserted.PARCEL_BUILDING_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PREVAL_I_S_U_TR ON PIMS_PARCEL_EVALUATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PARCEL_EVALUATION_ID = deleted.PARCEL_EVALUATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PARCEL_EVALUATION
    SET [PARCEL_EVALUATION_ID] = inserted.[PARCEL_EVALUATION_ID]
      , [PARCEL_ID] = inserted.[PARCEL_ID]
      , [DATE] = inserted.[DATE]
      , [KEY] = inserted.[KEY]
      , [FIRM] = inserted.[FIRM]
      , [VALUE] = inserted.[VALUE]
      , [NOTE] = inserted.[NOTE]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PARCEL_EVALUATION
    INNER JOIN inserted
    ON (PIMS_PARCEL_EVALUATION.PARCEL_EVALUATION_ID = inserted.PARCEL_EVALUATION_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PRFSCL_I_S_U_TR ON PIMS_PARCEL_FISCAL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PARCEL_FISCAL_ID = deleted.PARCEL_FISCAL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PARCEL_FISCAL
    SET [PARCEL_FISCAL_ID] = inserted.[PARCEL_FISCAL_ID]
      , [PARCEL_ID] = inserted.[PARCEL_ID]
      , [FISCAL_YEAR] = inserted.[FISCAL_YEAR]
      , [KEY] = inserted.[KEY]
      , [VALUE] = inserted.[VALUE]
      , [NOTE] = inserted.[NOTE]
      , [EFFECTIVE_DATE] = inserted.[EFFECTIVE_DATE]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PARCEL_FISCAL
    INNER JOIN inserted
    ON (PIMS_PARCEL_FISCAL.PARCEL_FISCAL_ID = inserted.PARCEL_FISCAL_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PRCPRC_I_S_U_TR ON PIMS_PARCEL_PARCEL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PARCEL_PARCEL_ID = deleted.PARCEL_PARCEL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PARCEL_PARCEL
    SET [PARCEL_PARCEL_ID] = inserted.[PARCEL_PARCEL_ID]
      , [PARCEL_ID] = inserted.[PARCEL_ID]
      , [SUBDIVISION_PARCEL_ID] = inserted.[SUBDIVISION_PARCEL_ID]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PARCEL_PARCEL
    INNER JOIN inserted
    ON (PIMS_PARCEL_PARCEL.PARCEL_PARCEL_ID = inserted.PARCEL_PARCEL_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PRSTNT_I_S_U_TR ON PIMS_PROJ_STATUS_NOTIFICATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PROJECT_STATUS_NOTIFICATION_ID = deleted.PROJECT_STATUS_NOTIFICATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PROJ_STATUS_NOTIFICATION
    SET [PROJECT_STATUS_NOTIFICATION_ID] = inserted.[PROJECT_STATUS_NOTIFICATION_ID]
      , [NOTIFICATION_TEMPLATE_ID] = inserted.[NOTIFICATION_TEMPLATE_ID]
      , [FROM_PROJECT_STATUS_ID] = inserted.[FROM_PROJECT_STATUS_ID]
      , [TO_PROJECT_STATUS_ID] = inserted.[TO_PROJECT_STATUS_ID]
      , [PRIORITY] = inserted.[PRIORITY]
      , [DELAY] = inserted.[DELAY]
      , [DELAY_DAYS] = inserted.[DELAY_DAYS]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PROJ_STATUS_NOTIFICATION
    INNER JOIN inserted
    ON (PIMS_PROJ_STATUS_NOTIFICATION.PROJECT_STATUS_NOTIFICATION_ID = inserted.PROJECT_STATUS_NOTIFICATION_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PRSTTX_I_S_U_TR ON PIMS_PROJ_STATUS_TRANSITION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PROJECT_STATUS_TRANSITION_ID = deleted.PROJECT_STATUS_TRANSITION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PROJ_STATUS_TRANSITION
    SET [PROJECT_STATUS_TRANSITION_ID] = inserted.[PROJECT_STATUS_TRANSITION_ID]
      , [FROM_WORKFLOW_PROJECT_STATUS_ID] = inserted.[FROM_WORKFLOW_PROJECT_STATUS_ID]
      , [TO_WORKFLOW_PROJECT_STATUS_ID] = inserted.[TO_WORKFLOW_PROJECT_STATUS_ID]
      , [ACTION] = inserted.[ACTION]
      , [VALIDATE_TASKS] = inserted.[VALIDATE_TASKS]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PROJ_STATUS_TRANSITION
    INNER JOIN inserted
    ON (PIMS_PROJ_STATUS_TRANSITION.PROJECT_STATUS_TRANSITION_ID = inserted.PROJECT_STATUS_TRANSITION_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PROJCT_I_S_U_TR ON PIMS_PROJECT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PROJECT_ID = deleted.PROJECT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PROJECT
    SET [PROJECT_ID] = inserted.[PROJECT_ID]
      , [WORKFLOW_ID] = inserted.[WORKFLOW_ID]
      , [AGENCY_ID] = inserted.[AGENCY_ID]
      , [PROJECT_STATUS_ID] = inserted.[PROJECT_STATUS_ID]
      , [TIER_LEVEL_ID] = inserted.[TIER_LEVEL_ID]
      , [PROJECT_RISK_ID] = inserted.[PROJECT_RISK_ID]
      , [PROJECT_NUMBER] = inserted.[PROJECT_NUMBER]
      , [PROJECT_TYPE] = inserted.[PROJECT_TYPE]
      , [NAME] = inserted.[NAME]
      , [MANAGER] = inserted.[MANAGER]
      , [REPORTED_FISCAL_YEAR] = inserted.[REPORTED_FISCAL_YEAR]
      , [ACTUAL_FISCAL_YEAR] = inserted.[ACTUAL_FISCAL_YEAR]
      , [DESCRIPTION] = inserted.[DESCRIPTION]
      , [METADATA] = inserted.[METADATA]
      , [SUBMITTED_ON] = inserted.[SUBMITTED_ON]
      , [APPROVED_ON] = inserted.[APPROVED_ON]
      , [DENIED_ON] = inserted.[DENIED_ON]
      , [CANCELLED_ON] = inserted.[CANCELLED_ON]
      , [COMPLETED_ON] = inserted.[COMPLETED_ON]
      , [NET_BOOK] = inserted.[NET_BOOK]
      , [MARKET] = inserted.[MARKET]
      , [ASSESSED] = inserted.[ASSESSED]
      , [APPRAISED] = inserted.[APPRAISED]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PROJECT
    INNER JOIN inserted
    ON (PIMS_PROJECT.PROJECT_ID = inserted.PROJECT_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PRAGRP_I_S_U_TR ON PIMS_PROJECT_AGENCY_RESPONSE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PROJECT_AGENCY_RESPONSE_ID = deleted.PROJECT_AGENCY_RESPONSE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PROJECT_AGENCY_RESPONSE
    SET [PROJECT_AGENCY_RESPONSE_ID] = inserted.[PROJECT_AGENCY_RESPONSE_ID]
      , [PROJECT_ID] = inserted.[PROJECT_ID]
      , [AGENCY_ID] = inserted.[AGENCY_ID]
      , [NOTIFICATION_QUEUE_ID] = inserted.[NOTIFICATION_QUEUE_ID]
      , [OFFER_AMOUNT] = inserted.[OFFER_AMOUNT]
      , [RESPONSE] = inserted.[RESPONSE]
      , [RECEIVED_ON] = inserted.[RECEIVED_ON]
      , [NOTE] = inserted.[NOTE]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PROJECT_AGENCY_RESPONSE
    INNER JOIN inserted
    ON (PIMS_PROJECT_AGENCY_RESPONSE.PROJECT_AGENCY_RESPONSE_ID = inserted.PROJECT_AGENCY_RESPONSE_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PROJNT_I_S_U_TR ON PIMS_PROJECT_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PROJECT_NOTE_ID = deleted.PROJECT_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PROJECT_NOTE
    SET [PROJECT_NOTE_ID] = inserted.[PROJECT_NOTE_ID]
      , [PROJECT_ID] = inserted.[PROJECT_ID]
      , [NOTE_TYPE] = inserted.[NOTE_TYPE]
      , [NOTE] = inserted.[NOTE]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PROJECT_NOTE
    INNER JOIN inserted
    ON (PIMS_PROJECT_NOTE.PROJECT_NOTE_ID = inserted.PROJECT_NOTE_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PP28_I_S_U_TR ON PIMS_PROJECT_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PROJECT_PROPERTY_ID = deleted.PROJECT_PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PROJECT_PROPERTY
    SET [PROJECT_PROPERTY_ID] = inserted.[PROJECT_PROPERTY_ID]
      , [PROJECT_ID] = inserted.[PROJECT_ID]
      , [PARCEL_ID] = inserted.[PARCEL_ID]
      , [BUILDING_ID] = inserted.[BUILDING_ID]
      , [PROPERTY_TYPE] = inserted.[PROPERTY_TYPE]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PROJECT_PROPERTY
    INNER JOIN inserted
    ON (PIMS_PROJECT_PROPERTY.PROJECT_PROPERTY_ID = inserted.PROJECT_PROPERTY_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PRJRPT_I_S_U_TR ON PIMS_PROJECT_REPORT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PROJECT_REPORT_ID = deleted.PROJECT_REPORT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PROJECT_REPORT
    SET [PROJECT_REPORT_ID] = inserted.[PROJECT_REPORT_ID]
      , [IS_FINAL] = inserted.[IS_FINAL]
      , [NAME] = inserted.[NAME]
      , [FROM] = inserted.[FROM]
      , [TO] = inserted.[TO]
      , [REPORT_TYPE] = inserted.[REPORT_TYPE]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PROJECT_REPORT
    INNER JOIN inserted
    ON (PIMS_PROJECT_REPORT.PROJECT_REPORT_ID = inserted.PROJECT_REPORT_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PRJRSK_I_S_U_TR ON PIMS_PROJECT_RISK INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PROJECT_RISK_ID = deleted.PROJECT_RISK_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PROJECT_RISK
    SET [PROJECT_RISK_ID] = inserted.[PROJECT_RISK_ID]
      , [NAME] = inserted.[NAME]
      , [CODE] = inserted.[CODE]
      , [DESCRIPTION] = inserted.[DESCRIPTION]
      , [IS_DISABLED] = inserted.[IS_DISABLED]
      , [SORT_ORDER] = inserted.[SORT_ORDER]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PROJECT_RISK
    INNER JOIN inserted
    ON (PIMS_PROJECT_RISK.PROJECT_RISK_ID = inserted.PROJECT_RISK_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PRJSNP_I_S_U_TR ON PIMS_PROJECT_SNAPSHOT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PROJECT_SNAPSHOT_ID = deleted.PROJECT_SNAPSHOT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PROJECT_SNAPSHOT
    SET [PROJECT_SNAPSHOT_ID] = inserted.[PROJECT_SNAPSHOT_ID]
      , [PROJECT_ID] = inserted.[PROJECT_ID]
      , [NET_BOOK] = inserted.[NET_BOOK]
      , [MARKET] = inserted.[MARKET]
      , [ASSESSED] = inserted.[ASSESSED]
      , [APPRAISED] = inserted.[APPRAISED]
      , [SNAPSHOT_ON] = inserted.[SNAPSHOT_ON]
      , [METADATA] = inserted.[METADATA]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PROJECT_SNAPSHOT
    INNER JOIN inserted
    ON (PIMS_PROJECT_SNAPSHOT.PROJECT_SNAPSHOT_ID = inserted.PROJECT_SNAPSHOT_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PRJSTS_I_S_U_TR ON PIMS_PROJECT_STATUS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PROJECT_STATUS_ID = deleted.PROJECT_STATUS_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PROJECT_STATUS
    SET [PROJECT_STATUS_ID] = inserted.[PROJECT_STATUS_ID]
      , [NAME] = inserted.[NAME]
      , [CODE] = inserted.[CODE]
      , [GROUP_NAME] = inserted.[GROUP_NAME]
      , [DESCRIPTION] = inserted.[DESCRIPTION]
      , [ROUTE] = inserted.[ROUTE]
      , [SORT_ORDER] = inserted.[SORT_ORDER]
      , [IS_MILESTONE] = inserted.[IS_MILESTONE]
      , [IS_TERMINAL] = inserted.[IS_TERMINAL]
      , [IS_DISABLED] = inserted.[IS_DISABLED]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PROJECT_STATUS
    INNER JOIN inserted
    ON (PIMS_PROJECT_STATUS.PROJECT_STATUS_ID = inserted.PROJECT_STATUS_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PRJTSK_I_S_U_TR ON PIMS_PROJECT_TASK INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PROJECT_TASK_ID = deleted.PROJECT_TASK_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PROJECT_TASK
    SET [PROJECT_TASK_ID] = inserted.[PROJECT_TASK_ID]
      , [PROJECT_ID] = inserted.[PROJECT_ID]
      , [TASK_ID] = inserted.[TASK_ID]
      , [COMPLETED_ON] = inserted.[COMPLETED_ON]
      , [IS_COMPLETED] = inserted.[IS_COMPLETED]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PROJECT_TASK
    INNER JOIN inserted
    ON (PIMS_PROJECT_TASK.PROJECT_TASK_ID = inserted.PROJECT_TASK_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PRPCLS_I_S_U_TR ON PIMS_PROPERTY_CLASSIFICATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PROPERTY_CLASSIFICATION_ID = deleted.PROPERTY_CLASSIFICATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PROPERTY_CLASSIFICATION
    SET [PROPERTY_CLASSIFICATION_ID] = inserted.[PROPERTY_CLASSIFICATION_ID]
      , [NAME] = inserted.[NAME]
      , [IS_VISIBLE] = inserted.[IS_VISIBLE]
      , [IS_DISABLED] = inserted.[IS_DISABLED]
      , [SORT_ORDER] = inserted.[SORT_ORDER]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PROPERTY_CLASSIFICATION
    INNER JOIN inserted
    ON (PIMS_PROPERTY_CLASSIFICATION.PROPERTY_CLASSIFICATION_ID = inserted.PROPERTY_CLASSIFICATION_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PRPTYP_I_S_U_TR ON PIMS_PROPERTY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PROPERTY_TYPE_ID = deleted.PROPERTY_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PROPERTY_TYPE
    SET [PROPERTY_TYPE_ID] = inserted.[PROPERTY_TYPE_ID]
      , [NAME] = inserted.[NAME]
      , [IS_DISABLED] = inserted.[IS_DISABLED]
      , [SORT_ORDER] = inserted.[SORT_ORDER]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PROPERTY_TYPE
    INNER JOIN inserted
    ON (PIMS_PROPERTY_TYPE.PROPERTY_TYPE_ID = inserted.PROPERTY_TYPE_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_PROV_I_S_U_TR ON PIMS_PROVINCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.PROVINCE_ID = deleted.PROVINCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_PROVINCE
    SET [PROVINCE_ID] = inserted.[PROVINCE_ID]
      , [CODE] = inserted.[CODE]
      , [NAME] = inserted.[NAME]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_PROVINCE
    INNER JOIN inserted
    ON (PIMS_PROVINCE.PROVINCE_ID = inserted.PROVINCE_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_ROLE_I_S_U_TR ON PIMS_ROLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.ROLE_ID = deleted.ROLE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_ROLE
    SET [ROLE_ID] = inserted.[ROLE_ID]
      , [ROLE_UID] = inserted.[ROLE_UID]
      , [NAME] = inserted.[NAME]
      , [KEYCLOAK_GROUP_ID] = inserted.[KEYCLOAK_GROUP_ID]
      , [DESCRIPTION] = inserted.[DESCRIPTION]
      , [IS_PUBLIC] = inserted.[IS_PUBLIC]
      , [IS_DISABLED] = inserted.[IS_DISABLED]
      , [SORT_ORDER] = inserted.[SORT_ORDER]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_ROLE
    INNER JOIN inserted
    ON (PIMS_ROLE.ROLE_ID = inserted.ROLE_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_ROLCLM_I_S_U_TR ON PIMS_ROLE_CLAIM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.ROLE_CLAIM_ID = deleted.ROLE_CLAIM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_ROLE_CLAIM
    SET [ROLE_CLAIM_ID] = inserted.[ROLE_CLAIM_ID]
      , [ROLE_ID] = inserted.[ROLE_ID]
      , [CLAIM_ID] = inserted.[CLAIM_ID]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_ROLE_CLAIM
    INNER JOIN inserted
    ON (PIMS_ROLE_CLAIM.ROLE_CLAIM_ID = inserted.ROLE_CLAIM_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_TASK_I_S_U_TR ON PIMS_TASK INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.TASK_ID = deleted.TASK_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_TASK
    SET [TASK_ID] = inserted.[TASK_ID]
      , [PROJECT_STATUS_ID] = inserted.[PROJECT_STATUS_ID]
      , [NAME] = inserted.[NAME]
      , [DESCRIPTION] = inserted.[DESCRIPTION]
      , [IS_OPTIONAL] = inserted.[IS_OPTIONAL]
      , [IS_DISABLED] = inserted.[IS_DISABLED]
      , [SORT_ORDER] = inserted.[SORT_ORDER]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_TASK
    INNER JOIN inserted
    ON (PIMS_TASK.TASK_ID = inserted.TASK_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_TENANT_I_S_U_TR ON PIMS_TENANT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.TENANT_ID = deleted.TENANT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_TENANT
    SET [TENANT_ID] = inserted.[TENANT_ID]
      , [CODE] = inserted.[CODE]
      , [NAME] = inserted.[NAME]
      , [DESCRIPTION] = inserted.[DESCRIPTION]
      , [SETTINGS] = inserted.[SETTINGS]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_TENANT
    INNER JOIN inserted
    ON (PIMS_TENANT.TENANT_ID = inserted.TENANT_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_TRLEVL_I_S_U_TR ON PIMS_TIER_LEVEL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.TIER_LEVEL_ID = deleted.TIER_LEVEL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_TIER_LEVEL
    SET [TIER_LEVEL_ID] = inserted.[TIER_LEVEL_ID]
      , [NAME] = inserted.[NAME]
      , [DESCRIPTION] = inserted.[DESCRIPTION]
      , [IS_DISABLED] = inserted.[IS_DISABLED]
      , [SORT_ORDER] = inserted.[SORT_ORDER]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_TIER_LEVEL
    INNER JOIN inserted
    ON (PIMS_TIER_LEVEL.TIER_LEVEL_ID = inserted.TIER_LEVEL_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_USER_I_S_U_TR ON PIMS_USER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.USER_ID = deleted.USER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_USER
    SET [USER_ID] = inserted.[USER_ID]
      , [USER_UID] = inserted.[USER_UID]
      , [USERNAME] = inserted.[USERNAME]
      , [DISPLAY_NAME] = inserted.[DISPLAY_NAME]
      , [FIRST_NAME] = inserted.[FIRST_NAME]
      , [MIDDLE_NAME] = inserted.[MIDDLE_NAME]
      , [LAST_NAME] = inserted.[LAST_NAME]
      , [EMAIL] = inserted.[EMAIL]
      , [POSITION] = inserted.[POSITION]
      , [EMAIL_VERIFIED] = inserted.[EMAIL_VERIFIED]
      , [NOTE] = inserted.[NOTE]
      , [IS_SYSTEM] = inserted.[IS_SYSTEM]
      , [LAST_LOGIN] = inserted.[LAST_LOGIN]
      , [APPROVED_ON] = inserted.[APPROVED_ON]
      , [IS_DISABLED] = inserted.[IS_DISABLED]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_USER
    INNER JOIN inserted
    ON (PIMS_USER.USER_ID = inserted.USER_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_USRAGC_I_S_U_TR ON PIMS_USER_AGENCY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.USER_AGENCY_ID = deleted.USER_AGENCY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_USER_AGENCY
    SET [USER_AGENCY_ID] = inserted.[USER_AGENCY_ID]
      , [USER_ID] = inserted.[USER_ID]
      , [AGENCY_ID] = inserted.[AGENCY_ID]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_USER_AGENCY
    INNER JOIN inserted
    ON (PIMS_USER_AGENCY.USER_AGENCY_ID = inserted.USER_AGENCY_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_USRROL_I_S_U_TR ON PIMS_USER_ROLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.USER_ROLE_ID = deleted.USER_ROLE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_USER_ROLE
    SET [USER_ROLE_ID] = inserted.[USER_ROLE_ID]
      , [USER_ID] = inserted.[USER_ID]
      , [ROLE_ID] = inserted.[ROLE_ID]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_USER_ROLE
    INNER JOIN inserted
    ON (PIMS_USER_ROLE.USER_ROLE_ID = inserted.USER_ROLE_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_WRKFLW_I_S_U_TR ON PIMS_WORKFLOW INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.WORKFLOW_ID = deleted.WORKFLOW_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_WORKFLOW
    SET [WORKFLOW_ID] = inserted.[WORKFLOW_ID]
      , [NAME] = inserted.[NAME]
      , [CODE] = inserted.[CODE]
      , [DESCRIPTION] = inserted.[DESCRIPTION]
      , [IS_DISABLED] = inserted.[IS_DISABLED]
      , [SORT_ORDER] = inserted.[SORT_ORDER]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_WORKFLOW
    INNER JOIN inserted
    ON (PIMS_WORKFLOW.WORKFLOW_ID = inserted.WORKFLOW_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

-- PIMS_ACCESS_REQUEST
CREATE TRIGGER PIMS_WRPRST_I_S_U_TR ON PIMS_WORKFLOW_PROJECT_STATUS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;
  -- validate concurrency control
  IF EXISTS (SELECT 1 FROM inserted, deleted WHERE inserted.[CONCURRENCY_CONTROL_NUMBER] != deleted.[CONCURRENCY_CONTROL_NUMBER] + 1 AND inserted.WORKFLOW_PROJECT_STATUS_ID = deleted.WORKFLOW_PROJECT_STATUS_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)

  UPDATE PIMS_WORKFLOW_PROJECT_STATUS
    SET [WORKFLOW_PROJECT_STATUS_ID] = inserted.[WORKFLOW_PROJECT_STATUS_ID]
      , [WORKFLOW_ID] = inserted.[WORKFLOW_ID]
      , [PROJECT_STATUS_ID] = inserted.[PROJECT_STATUS_ID]
      , [IS_OPTIONAL] = inserted.[IS_OPTIONAL]
      , [SORT_ORDER] = inserted.[SORT_ORDER]
      , [CONCURRENCY_CONTROL_NUMBER] = inserted.[CONCURRENCY_CONTROL_NUMBER]
      , [APP_LAST_UPDATE_TIMESTAMP] = inserted.[APP_LAST_UPDATE_TIMESTAMP]
      , [APP_LAST_UPDATE_USERID] = inserted.[APP_LAST_UPDATE_USERID]
      , [APP_LAST_UPDATE_USER_GUID] = inserted.[APP_LAST_UPDATE_USER_GUID]
      , [APP_LAST_UPDATE_USER_DIRECTORY] = inserted.[APP_LAST_UPDATE_USER_DIRECTORY]
      , [DB_LAST_UPDATE_TIMESTAMP] = getutcdate()
      , [DB_LAST_UPDATE_USERID] = user_name()
    FROM PIMS_WORKFLOW_PROJECT_STATUS
    INNER JOIN inserted
    ON (PIMS_WORKFLOW_PROJECT_STATUS.WORKFLOW_PROJECT_STATUS_ID = inserted.WORKFLOW_PROJECT_STATUS_ID);
END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
