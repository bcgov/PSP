// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Pims.Dal;

namespace Pims.Dal.Migrations
{
    [DbContext(typeof(PimsContext))]
    [Migration("20211101193949_v1.0.14.0")]
    partial class v10140
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pims.Dal.Entities.AccessRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("ACCESS_REQUEST_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_ACCESS_REQUEST_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("NOTE")
                        .HasComment("A note to describe the access request reason");

                    b.Property<long>("RoleId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ROLE_ID")
                        .HasComment("Foreign key to the role");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("StatusId")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ACCESS_REQUEST_STATUS_TYPE_CODE")
                        .HasComment("foreign key to the access request status type");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("USER_ID")
                        .HasComment("Foreign key to the user who submitted the request");

                    b.HasKey("Id")
                        .HasName("ACRQST_PK");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ACCRQT_ROLE_ID_IDX");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ACCRQT_ACCESS_REQUEST_STATUS_TYPE_CODE_IDX");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ACCRQT_USER_ID_IDX");

                    b.ToTable("PIMS_ACCESS_REQUEST");
                });

            modelBuilder.Entity("Pims.Dal.Entities.AccessRequestOrganization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("ACCESS_REQUEST_ORGANIZATION_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_ACCESS_REQUEST_ORGANIZATION_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<long>("AccessRequestId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ACCESS_REQUEST_ID")
                        .HasComment("Foreign key to the access request");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this access request organization relationship is disabled");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ORGANIZATION_ID")
                        .HasComment("Foreign key to the organization");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("ACRQOR_PK");

                    b.HasIndex("AccessRequestId")
                        .HasDatabaseName("ACRQAG_ACCESS_REQUEST_ID_IDX");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ACRQAG_ORGANIZATION_ID_IDX");

                    b.HasIndex(new[] { "AccessRequestId", "OrganizationId" }, "ACRQAG_ACCESS_REQUEST_ORGANIZATION_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_ACCESS_REQUEST_ORGANIZATION");
                });

            modelBuilder.Entity("Pims.Dal.Entities.AccessRequestStatusType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ACCESS_REQUEST_STATUS_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("ARQSTT_PK");

                    b.ToTable("PIMS_ACCESS_REQUEST_STATUS_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Activity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("ACTIVITY_MODEL_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_ACTIVITY_MODEL_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("Description of activity model");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this activity model is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("ACTMDL_PK");

                    b.ToTable("PIMS_ACTIVITY_MODEL");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ActivityTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("TASK_TEMPLATE_ACTIVITY_MODEL_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<long>("ActivityId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ACTIVITY_MODEL_ID")
                        .HasComment("Foreign key to activity model");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("IMPLEMENTATION_ORDER")
                        .HasComment("The order this activity task should be implemented");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this task template is disabled");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_MANDATORY")
                        .HasComment("Whether this activity task is mandatory");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<long>("TaskId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("TASK_TEMPLATE_ID")
                        .HasComment("Foreign key to task template");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("TSKTAM_PK");

                    b.HasIndex("ActivityId")
                        .HasDatabaseName("TSKTAM_ACTIVITY_MODEL_ID_IDX");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("TSKTAM_TASK_TEMPLATE_ID_IDX");

                    b.ToTable("PIMS_TASK_TEMPLATE_ACTIVITY_MODEL");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("ADDRESS_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_ADDRESS_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("AddressTypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ADDRESS_USAGE_TYPE_CODE")
                        .HasComment("Foreign key to address usage type");

                    b.Property<short?>("CountryId")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("COUNTRY_ID")
                        .HasComment("Foreign key to the country");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<short?>("DistrictId")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("DISTRICT_CODE")
                        .HasComment("Foreign key to the district");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("NUMERIC(8,6)")
                        .HasColumnName("LATITUDE")
                        .HasComment("GIS latitude location");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("NUMERIC(9,6)")
                        .HasColumnName("LONGITUDE")
                        .HasComment("GIS longitude location");

                    b.Property<string>("Municipality")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("MUNICIPALITY_NAME")
                        .HasComment("The municipality location");

                    b.Property<string>("Postal")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("POSTAL_CODE")
                        .HasComment("The postal code of the address");

                    b.Property<short>("ProvinceId")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("PROVINCE_STATE_ID")
                        .HasComment("Foreign key to the province");

                    b.Property<short?>("RegionId")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("REGION_CODE")
                        .HasComment("Foreign key to the region");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("StreetAddress1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("STREET_ADDRESS_1")
                        .HasComment("The street address part 1");

                    b.Property<string>("StreetAddress2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("STREET_ADDRESS_2")
                        .HasComment("The street address part 2");

                    b.Property<string>("StreetAddress3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("STREET_ADDRESS_3")
                        .HasComment("The street address part 3");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("ADDRSS_PK");

                    b.HasIndex("AddressTypeId")
                        .HasDatabaseName("ADDRSS_ADDRESS_USAGE_TYPE_CODE_IDX");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ADDRSS_COUNTRY_ID_IDX");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ADDRSS_DISTRICT_CODE_IDX");

                    b.HasIndex("ProvinceId")
                        .HasDatabaseName("ADDRSS_PROVINCE_STATE_ID_IDX");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ADDRSS_REGION_CODE_IDX");

                    b.ToTable("PIMS_ADDRESS");
                });

            modelBuilder.Entity("Pims.Dal.Entities.AddressType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ADDRESS_USAGE_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("ADUSGT_PK");

                    b.ToTable("PIMS_ADDRESS_USAGE_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Claim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("CLAIM_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_CLAIM_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("A description of the claim");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this claim is disabled");

                    b.Property<Guid>("Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CLAIM_UID")
                        .HasComment("A unique key to identify the record");

                    b.Property<Guid?>("KeycloakRoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("KEYCLOAK_ROLE_ID")
                        .HasComment("A unique key to identify the associated role in keycloak");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NAME")
                        .HasComment("A unique name to identify this record");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("CLMTYP_PK");

                    b.HasIndex(new[] { "Name" }, "CLAIM_NAME_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "Key" }, "CLMTYP_CLAIM_UID_IDX")
                        .IsUnique();

                    b.ToTable("PIMS_CLAIM");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ContactMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("CONTACT_METHOD_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_CONTACT_METHOD_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("ContactMethodTypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CONTACT_METHOD_TYPE_CODE")
                        .HasComment("Foreign key to contact method type");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<bool>("IsPreferredMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_PREFERRED_METHOD")
                        .HasComment("Whether this contact method is the preferred type");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ORGANIZATION_ID")
                        .HasComment("Foreign key to organization");

                    b.Property<long?>("PersonId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PERSON_ID")
                        .HasComment("Foreign key to person");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CONTACT_METHOD_VALUE")
                        .HasComment("Contact method value information (phone, email, fax, etc.)");

                    b.HasKey("Id")
                        .HasName("CNTMTH_PK");

                    b.HasIndex("ContactMethodTypeId")
                        .HasDatabaseName("CNTMTH_CONTACT_METHOD_TYPE_CODE_IDX");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("CNTMTH_ORGANIZATION_ID_IDX");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("CNTMTH_PERSON_ID_IDX");

                    b.ToTable("PIMS_CONTACT_METHOD");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ContactMethodType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CONTACT_METHOD_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("CNTMTT_PK");

                    b.ToTable("PIMS_CONTACT_METHOD_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Country", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SMALLINT")
                        .HasColumnName("COUNTRY_ID")
                        .HasComment("Unique primary key value")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("COUNTRY_CODE")
                        .HasDefaultValueSql("''")
                        .HasComment("A unique human friendly code to identify the record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("A description of the country");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Displaying order of record");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("CNTRY_PK");

                    b.HasIndex(new[] { "Code" }, "COUNTR_CODE_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_COUNTRY");
                });

            modelBuilder.Entity("Pims.Dal.Entities.District", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SMALLINT")
                        .HasColumnName("DISTRICT_CODE")
                        .HasComment("Unique primary key value")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Displaying order of record");

                    b.Property<int>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DISTRICT_NAME")
                        .HasComment("The name of the region");

                    b.Property<short>("RegionId")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("REGION_CODE")
                        .HasComment("Foreign key to the region");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("DSTRCT_PK");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("DSTRCT_REGION_CODE_IDX");

                    b.ToTable("PIMS_DISTRICT");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Insurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("INSURANCE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_INSURANCE_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<long>("BctfaRiskManagementContactId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("BCTFA_RISK_MGMT_CONTACT_ID")
                        .HasComment("Foreign key to person");

                    b.Property<string>("CoverageDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("COVERAGE_DESCRIPTION")
                        .HasComment("The description of the insurance coverage");

                    b.Property<decimal>("CoverageLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("MONEY")
                        .HasDefaultValue(0m)
                        .HasColumnName("COVERAGE_LIMIT")
                        .HasComment("The coverage limit of this insurance");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("Date")
                        .HasColumnName("EXPIRY_DATE")
                        .HasComment("The effective end date of the insurance coverage");

                    b.Property<string>("InsurancePayeeTypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("INSURANCE_PAYEE_TYPE_CODE")
                        .HasComment("Foreign key to insurance payee type");

                    b.Property<string>("InsuranceTypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("INSURANCE_TYPE_CODE")
                        .HasComment("Foreign key to insurance type");

                    b.Property<decimal>("InsuredValue")
                        .HasColumnType("MONEY")
                        .HasColumnName("INSURED_VALUE")
                        .HasComment("The insured value");

                    b.Property<long>("InsurerContactId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("INSURER_CONTACT_ID")
                        .HasComment("Foreign key to person");

                    b.Property<long>("InsurerOrganizationId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("INSURER_ORG_ID")
                        .HasComment("Foreign key to organization");

                    b.Property<long>("LeaseId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("LEASE_ID")
                        .HasComment("Foreign key to lease");

                    b.Property<long>("MotiRiskManagementContactId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("MOTI_RISK_MGMT_CONTACT_ID")
                        .HasComment("Foreign key to person");

                    b.Property<string>("OtherInsuranceType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("OTHER_INSURANCE_TYPE")
                        .HasComment("The description of the insurance type if the type is other");

                    b.Property<DateTime?>("RiskAssessmentCompletedDate")
                        .HasColumnType("DateTime")
                        .HasColumnName("RISK_ASSESSMENT_COMPLETED_DATE")
                        .HasComment("The optional date the risk assessment was completed");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date")
                        .HasColumnName("START_DATE")
                        .HasComment("The effective start date of the insurance coverage");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("INSRNC_PK");

                    b.HasIndex("BctfaRiskManagementContactId")
                        .HasDatabaseName("INSRNC_BCTFA_RISK_MGMT_CONTACT_ID_IDX");

                    b.HasIndex("InsurancePayeeTypeId")
                        .HasDatabaseName("INSRNC_INSURANCE_PAYEE_TYPE_CODE_IDX");

                    b.HasIndex("InsuranceTypeId")
                        .HasDatabaseName("INSRNC_INSURANCE_TYPE_CODE_IDX");

                    b.HasIndex("InsurerContactId")
                        .HasDatabaseName("INSRNC_INSURER_CONTACT_ID_IDX");

                    b.HasIndex("InsurerOrganizationId")
                        .HasDatabaseName("INSRNC_INSURER_ORG_ID_IDX");

                    b.HasIndex("LeaseId")
                        .HasDatabaseName("INSRNC_LEASE_ID_IDX");

                    b.HasIndex("MotiRiskManagementContactId")
                        .HasDatabaseName("INSRNC_MOTI_RISK_MGMT_CONTACT_ID_IDX");

                    b.ToTable("PIMS_INSURANCE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.InsurancePayeeType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("INSURANCE_PAYEE_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("INSPAY_PK");

                    b.ToTable("PIMS_INSURANCE_PAYEE_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.InsuranceType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("INSURANCE_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("INSPYT_PK");

                    b.ToTable("PIMS_INSURANCE_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Lease", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("LEASE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_LEASE_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("MONEY")
                        .HasColumnName("LEASE_AMOUNT")
                        .HasComment("The amount of the lease");

                    b.Property<string>("CategoryTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LEASE_CATEGORY_TYPE_CODE")
                        .HasComment("Foreign key to lease category type");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("LEASE_DESCRIPTION")
                        .HasComment("A description of the lease");

                    b.Property<bool>("HasDigitalFile")
                        .HasColumnType("bit")
                        .HasColumnName("HAS_DIGITAL_FILE")
                        .HasComment("Whether this lease has a digital file");

                    b.Property<bool>("HasDigitalLicense")
                        .HasColumnType("bit")
                        .HasColumnName("HAS_DIGITAL_LICENSE")
                        .HasComment("Whether this lease has a digital license");

                    b.Property<bool>("HasPhysicalFile")
                        .HasColumnType("bit")
                        .HasColumnName("HAS_PHYSICAL_FILE")
                        .HasComment("Whether this lease has a physical file");

                    b.Property<bool>("HasPhysicalLicense")
                        .HasColumnType("bit")
                        .HasColumnName("HAS_PHYSICAL_LICENSE")
                        .HasComment("Whether this lease has a physical license");

                    b.Property<short?>("IncludedRenewals")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SMALLINT")
                        .HasDefaultValue((short)0)
                        .HasColumnName("INCLUDED_RENEWALS")
                        .HasComment("The number of times this lease has been renewed");

                    b.Property<DateTime?>("InspectionDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("INSPECTION_DATE")
                        .HasComment("The date the property will be inspected");

                    b.Property<string>("InspectionNote")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("INSPECTION_NOTES")
                        .HasComment("A note on the inspection");

                    b.Property<DateTime?>("InsuranceEndDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("INSURANCE_END_DATE")
                        .HasComment("The date this lease insurance ends");

                    b.Property<DateTime?>("InsuranceStartDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("INSURANCE_START_DATE")
                        .HasComment("The date this lease insurance starts");

                    b.Property<bool>("IsCommBldg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_COMM_BLDG")
                        .HasComment("Whether this improvement contains a commercial building");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit")
                        .HasColumnName("IS_EXPIRED")
                        .HasComment("Whether this lease has expired");

                    b.Property<bool>("IsOrigExpiryRequired")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ORIG_EXPIRY_REQUIRED")
                        .HasComment("Whether thie original expiry on the lease is required");

                    b.Property<bool>("IsOtherImprovement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_OTHER_IMPROVEMENT")
                        .HasComment("Whether this improvement is of type other");

                    b.Property<bool>("IsSubjectToRta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_SUBJECT_TO_RTA")
                        .HasComment("Whether this improvement contains a building that is subject to RTA");

                    b.Property<string>("LFileNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("L_FILE_NO")
                        .HasComment("The LIS File #");

                    b.Property<string>("LeaseInitiatorTypeId")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LEASE_INITIATOR_TYPE_CODE");

                    b.Property<string>("LeasePurposeOtherDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("LEASE_PURPOSE_OTHER_DESC")
                        .HasComment("A description of the lease");

                    b.Property<string>("LeaseResponsibilityTypeId")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LEASE_RESPONSIBILITY_TYPE_CODE");

                    b.Property<string>("LeaseTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LEASE_LICENSE_TYPE_CODE")
                        .HasComment("Foreign key to lease type");

                    b.Property<long>("MotiNameId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("MOTI_NAME_ID")
                        .HasComment("Foreign key to lease MOTI person");

                    b.Property<string>("Note")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("LEASE_NOTES")
                        .HasComment("A note on the lease");

                    b.Property<DateTime?>("OrigExpiryDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("ORIG_EXPIRY_DATE")
                        .HasComment("The original date this lease expires");

                    b.Property<DateTime>("OrigStartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("ORIG_START_DATE")
                        .HasDefaultValueSql("getdate()")
                        .HasComment("The original date this lease starts");

                    b.Property<string>("PaymentFrequencyTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LEASE_PMT_FREQ_TYPE_CODE")
                        .HasComment("Foreign key to lease payment frequency type");

                    b.Property<string>("PaymentReceivableTypeId")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LEASE_PAY_RVBL_TYPE_CODE");

                    b.Property<string>("ProgramTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("LEASE_PROGRAM_TYPE_CODE")
                        .HasComment("Foreign key to lease program type");

                    b.Property<string>("PsFileNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PS_FILE_NO")
                        .HasComment("The PS File #");

                    b.Property<string>("PurposeTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LEASE_PURPOSE_TYPE_CODE")
                        .HasComment("Foreign key to lease purpose type");

                    b.Property<short>("RenewalCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SMALLINT")
                        .HasDefaultValue((short)0)
                        .HasColumnName("RENEWAL_COUNT")
                        .HasComment("The number of times this lease has been renewed");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("TERM_RENEWAL_DATE");

                    b.Property<short>("RenewalTermMonths")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SMALLINT")
                        .HasDefaultValue((short)0)
                        .HasColumnName("RENEWAL_TERM_MONTHS")
                        .HasComment("The term in months of each renewal for this lease");

                    b.Property<DateTime?>("ResponsibilityEffectiveDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("RESPONSIBILITY_EFFECTIVE_DATE")
                        .HasComment("The effective date of the responsibility type");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<DateTime?>("SecurityEndDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("SECURITY_END_DATE")
                        .HasComment("The date this lease security ends");

                    b.Property<DateTime?>("SecurityStartDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("SECURITY_START_DATE")
                        .HasComment("The date this lease security starts");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("TERM_START_DATE");

                    b.Property<string>("StatusTypeId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("LEASE_STATUS_TYPE_CODE")
                        .HasComment("Foreign key to lease status type");

                    b.Property<DateTime?>("TermExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("TERM_EXPIRY_DATE");

                    b.Property<int?>("TfaFileNo")
                        .HasColumnType("int")
                        .HasColumnName("TFA_FILE_NO")
                        .HasComment("The TFA File #");

                    b.Property<string>("Unit")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("UNIT")
                        .HasComment("A description of the unit");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("LEASE_PK");

                    b.HasIndex("CategoryTypeId")
                        .HasDatabaseName("LEASE_LEASE_CATEGORY_TYPE_CODE_IDX");

                    b.HasIndex("LFileNo")
                        .HasDatabaseName("LEASE_L_FILE_NO_IDX");

                    b.HasIndex("LeaseInitiatorTypeId")
                        .HasDatabaseName("LEASE_INITIATOR_TYPE_CODE_IDX");

                    b.HasIndex("LeaseResponsibilityTypeId")
                        .HasDatabaseName("LEASE_RESPONSIBILITY_TYPE_CODE_IDX");

                    b.HasIndex("LeaseTypeId")
                        .HasDatabaseName("LEASE_LEASE_LICENSE_TYPE_CODE_IDX");

                    b.HasIndex("MotiNameId")
                        .HasDatabaseName("LEASE_MOTI_NAME_ID_IDX");

                    b.HasIndex("PaymentFrequencyTypeId")
                        .HasDatabaseName("LEASE_LEASE_PMT_FREQ_TYPE_CODE_IDX");

                    b.HasIndex("PaymentReceivableTypeId")
                        .HasDatabaseName("LEASE_LEASE_PAY_RVBL_TYPE_CODE_IDX");

                    b.HasIndex("ProgramTypeId")
                        .HasDatabaseName("LEASE_LEASE_PROGRAM_TYPE_CODE_IDX");

                    b.HasIndex("PsFileNo")
                        .HasDatabaseName("LEASE_PS_FILE_NO_IDX");

                    b.HasIndex("PurposeTypeId")
                        .HasDatabaseName("LEASE_LEASE_PURPOSE_TYPE_CODE_IDX");

                    b.HasIndex("StatusTypeId");

                    b.HasIndex("TfaFileNo")
                        .HasDatabaseName("LEASE_TFA_FILE_NO_IDX");

                    b.ToTable("PIMS_LEASE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeaseCategoryType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LEASE_CATEGORY_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("LSCATYPE_PK");

                    b.ToTable("PIMS_LEASE_CATEGORY_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeaseIntiatorType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LEASE_INITIATOR_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("LINNIT_PK");

                    b.ToTable("PIMS_LEASE_INITIATOR_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeaseLicenseType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LEASE_LICENSE_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("LSLITYPE_PK");

                    b.ToTable("PIMS_LEASE_LICENSE_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeasePaymentFrequencyType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LEASE_PMT_FREQ_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("LSPMTF_PK");

                    b.ToTable("PIMS_LEASE_PMT_FREQ_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeasePaymentReceivableType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LEASE_PAY_RVBL_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("LSPRTY_PK");

                    b.ToTable("PIMS_LEASE_PAY_RVBL_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeaseProgramType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("LEASE_PROGRAM_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("LSPRGT_PK");

                    b.ToTable("PIMS_LEASE_PROGRAM_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeasePurposeType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LEASE_PURPOSE_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("LSPRPTY_PK");

                    b.ToTable("PIMS_LEASE_PURPOSE_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeaseResponsibilityType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LEASE_RESPONSIBILITY_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("LRESPT_PK");

                    b.ToTable("PIMS_LEASE_RESPONSIBILITY_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeaseStatusType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("LEASE_STATUS_TYPE_CODE");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DISABLED");

                    b.Property<long>("RowVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER");

                    b.HasKey("Id");

                    b.ToTable("PIMS_LEASE_STATUS_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeaseTenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("LEASE_TENANT_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_LEASE_TENANT_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<long>("LeaseId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("LEASE_ID")
                        .HasComment("Foreign key to the lease");

                    b.Property<string>("LessorTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LESSOR_TYPE_CODE")
                        .HasComment("Foreign key to the lessor");

                    b.Property<string>("Note")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("NOTE")
                        .HasComment("A note on the lease tenant");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ORGANIZATION_ID")
                        .HasComment("Foreign key to the organization");

                    b.Property<long?>("PersonId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PERSON_ID")
                        .HasComment("Foreign key to the person");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("LEATEN_PK");

                    b.HasIndex("LeaseId")
                        .HasDatabaseName("TENANT_LEASE_ID_IDX");

                    b.HasIndex("LessorTypeId")
                        .HasDatabaseName("TENANT_LESSOR_TYPE_CODE_IDX");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("TENANT_ORGANIZATION_ID_IDX");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("TENANT_PERSON_ID_IDX");

                    b.ToTable("PIMS_LEASE_TENANT");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LessorType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LESSOR_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("LSSRTYPE_PK");

                    b.ToTable("PIMS_LESSOR_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("ORGANIZATION_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_ORGANIZATION_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<long>("AddressId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ADDRESS_ID")
                        .HasComment("Foreign key to the address");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<short?>("DistrictId")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("DISTRICT_CODE")
                        .HasComment("Foreign key to the district");

                    b.Property<string>("Identifier")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ORGANIZATION_IDENTIFIER")
                        .HasComment("An identifier for the organization");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether the organization is disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ORGANIZATION_NAME")
                        .HasComment("A name to identify the organization");

                    b.Property<string>("OrganizationIdentifierTypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ORG_IDENTIFIER_TYPE_CODE")
                        .HasComment("Foreign key to the organization identifier type");

                    b.Property<string>("OrganizationTypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ORGANIZATION_TYPE_CODE")
                        .HasComment("Foreign key to the organization type");

                    b.Property<long?>("ParentId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PRNT_ORGANIZATION_ID")
                        .HasComment("Foreign key to the parent organization");

                    b.Property<short?>("RegionId")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("REGION_CODE")
                        .HasComment("Foreign key to the region");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("WEBSITE")
                        .HasComment("Organization website URI");

                    b.HasKey("Id")
                        .HasName("ORG_PK");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ORG_ADDRESS_ID_IDX");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ORG_DISTRICT_CODE_IDX");

                    b.HasIndex("OrganizationIdentifierTypeId")
                        .HasDatabaseName("ORG_ORG_IDENTIFIER_TYPE_CODE_IDX");

                    b.HasIndex("OrganizationTypeId")
                        .HasDatabaseName("ORG_ORGANIZATION_TYPE_CODE_IDX");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ORG_PRNT_ORGANIZATION_ID_IDX");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ORG_REGION_CODE_IDX");

                    b.ToTable("PIMS_ORGANIZATION");
                });

            modelBuilder.Entity("Pims.Dal.Entities.OrganizationIdentifierType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ORG_IDENTIFIER_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("ORGIDT_PK");

                    b.ToTable("PIMS_ORG_IDENTIFIER_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.OrganizationType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ORGANIZATION_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("ORGTYP_PK");

                    b.ToTable("PIMS_ORGANIZATION_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PERSON_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PERSON_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<long?>("AddressId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ADDRESS_ID")
                        .HasComment("Foreign key to address");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("DATE")
                        .HasColumnName("BIRTH_DATE")
                        .HasComment("Person's birdate.");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FIRST_NAME")
                        .HasComment("Person's first name.");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this person is disabled");

                    b.Property<string>("MiddleNames")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("MIDDLE_NAMES")
                        .HasComment("Person's middle names.");

                    b.Property<string>("NameSuffix")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME_SUFFIX")
                        .HasComment("Person's name suffix (Mr, Mrs, Miss).");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SURNAME")
                        .HasComment("Person's last name.");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("PERSON_PK");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("PERSON_ADDRESS_ID_IDX");

                    b.ToTable("PIMS_PERSON");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PersonOrganization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PERSON_ORGANIZATION_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PERSON_ORGANIZATION_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this person organization relationship is disabled");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ORGANIZATION_ID")
                        .HasComment("Foreign key to the organization");

                    b.Property<long?>("PersonId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PERSON_ID")
                        .HasComment("Foreign key to the person");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("PERORG_PK");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("PERORG_ORGANIZATION_ID_IDX");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("PERORG_PERSON_ID_IDX");

                    b.ToTable("PIMS_PERSON_ORGANIZATION");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROJECT_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PROJECT_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("ProjectTypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROJECT_TYPE_CODE")
                        .HasComment("Foreign key to project type");

                    b.Property<string>("RiskId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROJECT_RISK_TYPE_CODE")
                        .HasComment("Foreign key to project risk type");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROJECT_STATUS_TYPE_CODE")
                        .HasComment("Foreign key to project status type");

                    b.Property<string>("TierId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROJECT_TIER_TYPE_CODE")
                        .HasComment("Foreign key to project tier type");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("PROJCT_PK");

                    b.HasIndex("ProjectTypeId")
                        .HasDatabaseName("PROJCT_PROJECT_TYPE_CODE_IDX");

                    b.HasIndex("RiskId")
                        .HasDatabaseName("PROJCT_PROJECT_RISK_TYPE_CODE_IDX");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("PROJCT_PROJECT_STATUS_TYPE_CODE_IDX");

                    b.HasIndex("TierId")
                        .HasDatabaseName("PROJCT_PROJECT_TIER_TYPE_CODE_IDX");

                    b.ToTable("PIMS_PROJECT");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("ACTIVITY_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_ACTIVITY_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<long>("ActivityId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ACTIVITY_MODEL_ID")
                        .HasComment("Foreign key to the activity model");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<long?>("ProjectId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROJECT_ID")
                        .HasComment("Foreign key to the project");

                    b.Property<long?>("ProjectWorkflowId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("WORKFLOW_ID")
                        .HasComment("Foreign key to the project workflow");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("ACTVTY_PK");

                    b.HasIndex("ActivityId")
                        .HasDatabaseName("ACTVTY_ACTIVITY_MODEL_ID_IDX");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ACTVTY_PROJECT_ID_IDX");

                    b.HasIndex("ProjectWorkflowId")
                        .HasDatabaseName("ACTVTY_WORKFLOW_ID_IDX");

                    b.ToTable("PIMS_ACTIVITY");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectActivityTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("TASK_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_TASK_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<long?>("ProjectActivityId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ACTIVITY_ID")
                        .HasComment("Foreign key to the project activity");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<long>("TaskId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("TASK_TEMPLATE_ID")
                        .HasComment("Foreign key to the task template");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("USER_ID")
                        .HasComment("Foreign key to the user");

                    b.HasKey("Id")
                        .HasName("TASK_PK");

                    b.HasIndex("ProjectActivityId")
                        .HasDatabaseName("TASK_ACTIVITY_ID_IDX");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("TASK_TASK_TEMPLATE_ID_IDX");

                    b.HasIndex("UserId")
                        .HasDatabaseName("TASK_USER_ID_IDX");

                    b.ToTable("PIMS_TASK");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROJECT_NOTE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PROJECT_NOTE_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<long>("ProjectId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROJECT_ID")
                        .HasComment("Foreign key to project");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("PROJNT_PK");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("PROJNT_PROJECT_ID_IDX");

                    b.ToTable("PIMS_PROJECT_NOTE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectNumber", b =>
                {
                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b
                        .HasAnnotation("Relational:SqlQuery", "SELECT NEXT VALUE FOR dbo.[PIMS_PROJECT_NUMBER_SEQ]");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROJECT_PROPERTY_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PROJECT_PROPERTY_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("ProjectId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROJECT_ID")
                        .HasComment("Foreign key to project");

                    b.Property<long>("PropertyId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_ID")
                        .HasComment("Foreign key to property");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("PRJPRP_PK");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("PRJPRP_PROJECT_ID_IDX");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("PRJPRP_PROPERTY_ID_IDX");

                    b.ToTable("PIMS_PROJECT_PROPERTY");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectRiskType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROJECT_RISK_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("PRJRSK_PK");

                    b.ToTable("PIMS_PROJECT_RISK_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectStatusType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROJECT_STATUS_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("CodeGroup")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CODE_GROUP")
                        .HasComment("A code to identify a group of related status");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<bool>("IsMilestone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_MILESTONE")
                        .HasComment("Whether this status is a milestone");

                    b.Property<bool>("IsTerminal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_TERMINAL")
                        .HasComment("Whether this status is terminal");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("TEXT")
                        .HasComment("Text to display the status");

                    b.HasKey("Id")
                        .HasName("PRJSTY_PK");

                    b.ToTable("PIMS_PROJECT_STATUS_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectTierType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROJECT_TIER_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("PROJTR_PK");

                    b.ToTable("PIMS_PROJECT_TIER_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROJECT_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("PRJTYP_PK");

                    b.ToTable("PIMS_PROJECT_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectWorkflow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROJECT_WORKFLOW_MODEL_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PROJECT_WORKFLOW_MODEL_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this project workflow is disabled");

                    b.Property<long>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROJECT_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PROJECT_ID_SEQ")
                        .HasComment("Foreign key to the project");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<long>("WorkflowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("WORKFLOW_MODEL_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_WORKFLOW_MODEL_ID_SEQ")
                        .HasComment("Foreign key to the workflow model");

                    b.HasKey("Id")
                        .HasName("PRWKMD_PK");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("PRWKMD_PROJECT_ID_IDX");

                    b.HasIndex("WorkflowId")
                        .HasDatabaseName("PRWKMD_WORKFLOW_MODEL_ID_IDX");

                    b.ToTable("PIMS_PROJECT_WORKFLOW_MODEL");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Property", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PROPERTY_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<long>("AddressId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ADDRESS_ID")
                        .HasComment("Foreign key to address");

                    b.Property<string>("AreaUnitId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROPERTY_AREA_UNIT_TYPE_CODE")
                        .HasComment("Foreign key to property area unit type");

                    b.Property<Geometry>("Boundary")
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("BOUNDARY")
                        .HasComment("A geo-spatial description of the property boundary");

                    b.Property<string>("ClassificationId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROPERTY_CLASSIFICATION_TYPE_CODE")
                        .HasComment("Foreign key to property classification type");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<DateTime>("DataSourceEffectiveDate")
                        .HasColumnType("DATE")
                        .HasColumnName("PROPERTY_DATA_SOURCE_EFFECTIVE_DATE")
                        .HasComment("The date the data source is effective on");

                    b.Property<string>("DataSourceId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROPERTY_DATA_SOURCE_TYPE_CODE")
                        .HasComment("Foreign key to property data source type");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("Description of the property");

                    b.Property<short>("DistrictId")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("DISTRICT_CODE")
                        .HasComment("Foreign key to district");

                    b.Property<string>("EncumbranceReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("ENCUMBRANCE_REASON")
                        .HasComment("A description of the reason for encumbrance");

                    b.Property<bool>("IsOwned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_OWNED")
                        .HasComment("Whether this property is owned by the ministry");

                    b.Property<bool>("IsPropertyOfInterest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_PROPERTY_OF_INTEREST")
                        .HasComment("Whether this property is a property of interest");

                    b.Property<bool>("IsSensitive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_SENSITIVE")
                        .HasComment("Whether this property is associated with sensitive information");

                    b.Property<bool>("IsVisibleToOtherAgencies")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_VISIBLE_TO_OTHER_AGENCIES")
                        .HasComment("Whether this property is visible to other agencies");

                    b.Property<float>("LandArea")
                        .HasColumnType("REAL")
                        .HasColumnName("LAND_AREA")
                        .HasComment("The total land area in the specified area unit type");

                    b.Property<string>("LandLegalDescription")
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("LAND_LEGAL_DESCRIPTION")
                        .HasComment("Titled legal land description");

                    b.Property<Point>("Location")
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("LOCATION")
                        .HasComment("A geo-spatial point where the property is located");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NAME")
                        .HasComment("A friendly name to identify the property");

                    b.Property<int>("PID")
                        .HasColumnType("int")
                        .HasColumnName("PID")
                        .HasComment("A unique identifier for titled property");

                    b.Property<int?>("PIN")
                        .HasColumnType("int")
                        .HasColumnName("PIN")
                        .HasComment("A unique identifier for untitled property");

                    b.Property<long?>("PropertyManagementOrganizationId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROP_MGMT_ORG_ID")
                        .HasComment("Foreign key to property management organization");

                    b.Property<long?>("PropertyManagerId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_MANAGER_ID");

                    b.Property<string>("PropertyTypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROPERTY_TYPE_CODE")
                        .HasComment("Foreign key to property type");

                    b.Property<short>("RegionId")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("REGION_CODE")
                        .HasComment("Foreign key to region");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROPERTY_STATUS_TYPE_CODE")
                        .HasComment("Foreign key to property status type");

                    b.Property<string>("SurplusDeclarationComment")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("SURPLUS_DECLARATION_COMMENT")
                        .HasComment("Comment related to the surplus declaration of this property");

                    b.Property<DateTime?>("SurplusDeclarationDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("SURPLUS_DECLARATION_DATE")
                        .HasComment("Date of the surplus declaration");

                    b.Property<string>("SurplusDeclarationTypeId")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SURPLUS_DECLARATION_TYPE_CODE");

                    b.Property<string>("TenureId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROPERTY_TENURE_TYPE_CODE")
                        .HasComment("Foreign key to property tenure type");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<string>("Zoning")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ZONING")
                        .HasComment("The current zoning");

                    b.Property<string>("ZoningPotential")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ZONING_POTENTIAL")
                        .HasComment("The potential zoning");

                    b.HasKey("Id")
                        .HasName("PRPRTY_PK");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("PRPRTY_ADDRESS_ID_IDX");

                    b.HasIndex("AreaUnitId")
                        .HasDatabaseName("PRPRTY_PROPERTY_AREA_UNIT_TYPE_CODE_IDX");

                    b.HasIndex("ClassificationId")
                        .HasDatabaseName("PRPRTY_PROPERTY_CLASSIFICATION_TYPE_CODE_IDX");

                    b.HasIndex("DataSourceId")
                        .HasDatabaseName("PRPRTY_PROPERTY_DATA_SOURCE_TYPE_CODE_IDX");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("PRPRTY_DISTRICT_CODE_IDX");

                    b.HasIndex("PropertyManagementOrganizationId")
                        .HasDatabaseName("PRPRTY_PROP_MGMT_ORG_ID_IDX");

                    b.HasIndex("PropertyManagerId")
                        .HasDatabaseName("PRPRTY_PROPERTY_MANAGER_ID_IDX");

                    b.HasIndex("PropertyTypeId")
                        .HasDatabaseName("PRPRTY_PROPERTY_TYPE_CODE_IDX");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("PRPRTY_REGION_CODE_IDX");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("PRPRTY_PROPERTY_STATUS_TYPE_CODE_IDX");

                    b.HasIndex("SurplusDeclarationTypeId");

                    b.HasIndex("TenureId")
                        .HasDatabaseName("PRPRTY_PROPERTY_TENURE_TYPE_CODE_IDX");

                    b.ToTable("PIMS_PROPERTY");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyAreaUnitType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AREA_UNIT_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("ARUNIT_PK");

                    b.ToTable("PIMS_AREA_UNIT_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyClassificationType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROPERTY_CLASSIFICATION_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("PRPCLT_PK");

                    b.ToTable("PIMS_PROPERTY_CLASSIFICATION_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyDataSourceType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROPERTY_DATA_SOURCE_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("PRPDST_PK");

                    b.ToTable("PIMS_PROPERTY_DATA_SOURCE_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyEvaluation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_EVALUATION_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PROPERTY_EVALUATION_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<DateTime>("EvaluatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("EVALUATION_DATE")
                        .HasComment("The date the evaluation was taken on");

                    b.Property<int>("Key")
                        .HasColumnType("int")
                        .HasColumnName("KEY")
                        .HasComment("A key to identify the type of evaluation");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("NOTE")
                        .HasComment("Evaluation description note");

                    b.Property<long>("PropertyId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_ID")
                        .HasComment("Foreign key to property");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<decimal>("Value")
                        .HasColumnType("MONEY")
                        .HasColumnName("VALUE")
                        .HasComment("The value of the evaluation");

                    b.HasKey("Id")
                        .HasName("PRPEVL_PK");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("PRPEVL_PROPERTY_ID_IDX");

                    b.ToTable("PIMS_PROPERTY_EVALUATION");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyImprovement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_IMPROVEMENT_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PROPERTY_IMPROVEMENT_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("IMPROVEMENT_DESCRIPTION")
                        .HasComment("A description of the improvement");

                    b.Property<long>("LeaseId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_LEASE_ID")
                        .HasComment("Foreign key to lease");

                    b.Property<string>("PropertyImprovementTypeId")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROPERTY_IMPROVEMENT_TYPE_CODE");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("StructureSize")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("STRUCTURE_SIZE")
                        .HasComment("The size of the structure of the improvement");

                    b.Property<string>("Unit")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("UNIT")
                        .HasComment("Notes related to any units within the improvement");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("PIMPRV_PK");

                    b.HasIndex("LeaseId")
                        .HasDatabaseName("PIMPRV_PROPERTY_LEASE_ID_IDX");

                    b.HasIndex("PropertyImprovementTypeId")
                        .HasDatabaseName("PIMPRV_PROPERTY_IMPROVEMENT_TYPE_CODE_IDX");

                    b.ToTable("PIMS_PROPERTY_IMPROVEMENT");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyImprovementType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROPERTY_IMPROVEMENT_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("PIMPRT_PK");

                    b.ToTable("PIMS_PROPERTY_IMPROVEMENT_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyLease", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_LEASE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PROPERTY_LEASE_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<long>("LeaseId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("LEASE_ID")
                        .HasComment("Foreign key to lease");

                    b.Property<long>("PropertyId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_ID")
                        .HasComment("Foreign key to property");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("PROPLS_PK");

                    b.HasIndex("LeaseId")
                        .HasDatabaseName("PROPLS_LEASE_ID_IDX");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("PROPLS_PROPERTY_ID_IDX");

                    b.ToTable("PIMS_PROPERTY_LEASE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyOrganization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_ORGANIZATION_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PROPERTY_ORGANIZATION_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<bool?>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ORGANIZATION_ID")
                        .HasComment("Foreign key to the organization");

                    b.Property<long>("PropertyId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_ID")
                        .HasComment("Foreign key to the property");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("PRPORG_PK");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("PRPORG_ORGANIZATION_ID_IDX");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("PRPORG_PROPERTY_ID_IDX");

                    b.HasIndex(new[] { "PropertyId", "OrganizationId" }, "PRPORG_PROPERTY_ORGANIZATION_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_PROPERTY_ORGANIZATION");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyProjectActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_ACTIVITY_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PROPERTY_ACTIVITY_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long?>("ProjectActivityId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ACTIVITY_ID")
                        .HasComment("Foreign key to project activity");

                    b.Property<long?>("PropertyId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_ID")
                        .HasComment("Foreign key to parcel");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("PRPACT_PK");

                    b.HasIndex("ProjectActivityId")
                        .HasDatabaseName("PRPACT_ACTIVITY_ID_IDX");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("PRPACT_PROPERTY_ID_IDX");

                    b.HasIndex(new[] { "PropertyId", "ProjectActivityId" }, "PRPACT_PROPERTY_ACTIVITY_TUC")
                        .IsUnique()
                        .HasFilter("[PROPERTY_ID] IS NOT NULL AND [ACTIVITY_ID] IS NOT NULL");

                    b.ToTable("PIMS_PROPERTY_ACTIVITY");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyPropertyServiceFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_PROPERTY_SERVICE_FILE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PROPERTY_PROPERTY_SERVICE_FILE_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DISABLED");

                    b.Property<long>("PropertyId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_ID")
                        .HasComment("Foreign key to the property");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<long>("ServiceFileId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_SERVICE_FILE_ID")
                        .HasComment("Foreign key to property service file");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("PRPPSF_PK");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("PRPPSF_PROPERTY_ID_IDX");

                    b.HasIndex("ServiceFileId")
                        .HasDatabaseName("PRPPSF_PROPERTY_SERVICE_FILE_ID_IDX");

                    b.HasIndex(new[] { "PropertyId", "ServiceFileId" }, "PRPPSF_PROPERTY_PROPERTY_SERVICE_FILE_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_PROPERTY_PROPERTY_SERVICE_FILE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyServiceFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_SERVICE_FILE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PROPERTY_SERVICE_FILE_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("FileTypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROPERTY_SERVICE_FILE_TYPE_CODE")
                        .HasComment("Foreign key to the property service file type");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("PRPSVC_PK");

                    b.HasIndex("FileTypeId")
                        .HasDatabaseName("PRPSVC_PROPERTY_SERVICE_FILE_TYPE_CODE_IDX");

                    b.ToTable("PIMS_PROPERTY_SERVICE_FILE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyServiceFileType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROPERTY_SERVICE_FILE_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("PRSVFT_PK");

                    b.ToTable("PIMS_PROPERTY_SERVICE_FILE_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyStatusType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROPERTY_STATUS_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("PRPSTS_PK");

                    b.ToTable("PIMS_PROPERTY_STATUS_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertySurplusDeclarationType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SURPLUS_DECLARATION_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("SPDCLT_PK");

                    b.ToTable("PIMS_SURPLUS_DECLARATION_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyTenureType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROPERTY_TENURE_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("PRPTNR_PK");

                    b.ToTable("PIMS_PROPERTY_TENURE_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROPERTY_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("PRPTYP_PK");

                    b.ToTable("PIMS_PROPERTY_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Province", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SMALLINT")
                        .HasColumnName("PROVINCE_STATE_ID")
                        .HasComment("Unique primary key value")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PROVINCE_STATE_CODE")
                        .HasDefaultValueSql("''")
                        .HasComment("A unique human friendly code to identify the record");

                    b.Property<short>("CountryId")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("COUNTRY_ID")
                        .HasComment("Foreign key to country");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("A description of the province");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Displaying order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("PROVNC_PK");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("PROVNC_COUNTRY_ID_IDX");

                    b.HasIndex(new[] { "Code" }, "PROVNC_CODE_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_PROVINCE_STATE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Region", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SMALLINT")
                        .HasColumnName("REGION_CODE")
                        .HasComment("Unique primary key value")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Displaying order of record");

                    b.Property<int>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("REGION_NAME")
                        .HasComment("The name of the region");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("REGION_PK");

                    b.ToTable("PIMS_REGION");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("ROLE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_ROLE_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("Friendly description of record");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("SORT_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("IS_PUBLIC")
                        .HasComment("Whether this role is publicly available to users");

                    b.Property<Guid>("Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ROLE_UID")
                        .HasComment("A unique key to identify the record");

                    b.Property<Guid?>("KeycloakGroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("KEYCLOAK_GROUP_ID")
                        .HasComment("A key to the associated keycloak group");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NAME")
                        .HasComment("A unique name to identify the record");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("ROLE_PK");

                    b.HasIndex(new[] { "KeycloakGroupId" }, "ROLE_KEYCLOAK_GROUP_ID_IDX")
                        .IsUnique()
                        .HasFilter("[KEYCLOAK_GROUP_ID] IS NOT NULL");

                    b.HasIndex(new[] { "Name" }, "ROLE_NAME_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "Key" }, "ROLE_ROLE_UID_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_ROLE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("ROLE_CLAIM_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_ROLE_CLAIM_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<long>("ClaimId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("CLAIM_ID")
                        .HasComment("Foreign key to the claim");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RoleId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ROLE_ID")
                        .HasComment("Foreign key to the role");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("ROLCLM_PK");

                    b.HasIndex("ClaimId")
                        .HasDatabaseName("ROLCLM_CLAIM_ID_IDX");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ROLCLM_ROLE_ID_IDX");

                    b.HasIndex(new[] { "RoleId", "ClaimId" }, "ROLCLM_ROLE_CLAIM_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_ROLE_CLAIM");
                });

            modelBuilder.Entity("Pims.Dal.Entities.SecurityDeposit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("SECURITY_DEPOSIT_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_SECURITY_DEPOSIT_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("MONEY")
                        .HasColumnName("AMOUNT_PAID")
                        .HasComment("The actual amount paid");

                    b.Property<decimal>("AnnualInterestRate")
                        .HasColumnType("NUMERIC(5,2)")
                        .HasColumnName("ANNUAL_INTEREST_RATE")
                        .HasComment("The annual interest rate of this deposit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<DateTime>("DepositDate")
                        .HasColumnType("Date")
                        .HasColumnName("DEPOSIT_DATE")
                        .HasComment("The date of the deposit");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("The description of the security deposit");

                    b.Property<long>("LeaseId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("LEASE_ID")
                        .HasComment("Foreign key to lease");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("SecurityDepositHolderTypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SEC_DEP_HOLDER_TYPE_CODE")
                        .HasComment("Foreign key to security deposit holder type");

                    b.Property<string>("SecurityDepositTypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SECURITY_DEPOSIT_TYPE_CODE")
                        .HasComment("Foreign key to security deposit type");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("MONEY")
                        .HasColumnName("TOTAL_AMOUNT")
                        .HasComment("The total amount of the security deposit");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("SECDEP_PK");

                    b.HasIndex("LeaseId")
                        .HasDatabaseName("SECDEP_LEASE_ID_IDX");

                    b.HasIndex("SecurityDepositHolderTypeId")
                        .HasDatabaseName("SECDEP_SEC_DEP_HOLDER_TYPE_CODE_IDX");

                    b.HasIndex("SecurityDepositTypeId")
                        .HasDatabaseName("SECDEP_SECURITY_DEPOSIT_TYPE_CODE_IDX");

                    b.ToTable("PIMS_SECURITY_DEPOSIT");
                });

            modelBuilder.Entity("Pims.Dal.Entities.SecurityDepositHolderType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SEC_DEP_HOLDER_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("SCHLDT_PK");

                    b.ToTable("PIMS_SEC_DEP_HOLDER_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.SecurityDepositReturn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("SECURITY_DEPOSIT_RETURN_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_SECURITY_DEPOSIT_RETURN_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("ChequeNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CHEQUE_NUMBER")
                        .HasComment("The cheque number of the original deposit");

                    b.Property<decimal?>("ClaimsAgainst")
                        .HasColumnType("MONEY")
                        .HasColumnName("CLAIMS_AGAINST")
                        .HasComment("The total amount of claims made against the deposit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<decimal>("DepositTotal")
                        .HasColumnType("MONEY")
                        .HasColumnName("DEPOSIT_TOTAL")
                        .HasComment("The total deposit amount before claims");

                    b.Property<long>("LeaseId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("LEASE_ID")
                        .HasComment("Foreign key to lease");

                    b.Property<string>("PayeeAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("PAYEE_ADDRESS")
                        .HasComment("The deposit payee address");

                    b.Property<string>("PayeeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PAYEE_NAME")
                        .HasComment("The deposit payee name");

                    b.Property<decimal>("ReturnAmount")
                        .HasColumnType("MONEY")
                        .HasColumnName("RETURN_AMOUNT")
                        .HasComment("The total deposit amount less any claims");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("DateTime")
                        .HasColumnName("RETURN_DATE")
                        .HasComment("The date the deposit was returned");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("SecurityDepositTypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SECURITY_DEPOSIT_TYPE_CODE")
                        .HasComment("Foreign key to security deposit type");

                    b.Property<DateTime>("TerminationDate")
                        .HasColumnType("DateTime")
                        .HasColumnName("TERMINATION_DATE")
                        .HasComment("The date the deposit was returned");

                    b.Property<string>("TerminationNote")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("TERMINATION_NOTE")
                        .HasComment("Any notes corresponding to the termination of this security deposit");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("SDRTRN_PK");

                    b.HasIndex("LeaseId")
                        .HasDatabaseName("SDRTRN_LEASE_ID_IDX");

                    b.HasIndex("SecurityDepositTypeId")
                        .HasDatabaseName("SDRTRN_SECURITY_DEPOSIT_TYPE_CODE_IDX");

                    b.ToTable("PIMS_SECURITY_DEPOSIT_RETURN");
                });

            modelBuilder.Entity("Pims.Dal.Entities.SecurityDepositType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SECURITY_DEPOSIT_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("SECDPT_PK");

                    b.ToTable("PIMS_SECURITY_DEPOSIT_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("TASK_TEMPLATE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_TASK_TEMPLATE_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this task template is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("TaskTypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("TASK_TEMPLATE_TYPE_CODE")
                        .HasComment("Foreign key to task template type");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("TSKTMP_PK");

                    b.HasIndex("TaskTypeId")
                        .HasDatabaseName("TSKTMP_TASK_TEMPLATE_TYPE_CODE_IDX");

                    b.ToTable("PIMS_TASK_TEMPLATE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.TaskType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("TASK_TEMPLATE_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("TSKTMT_PK");

                    b.ToTable("PIMS_TASK_TEMPLATE_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("TENANT_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_TENANT_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("CODE")
                        .HasComment("Code value for entry");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("Description of the entry for display purposes");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("NAME")
                        .HasComment("Name of the entry for display purposes");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("SETTINGS")
                        .HasComment("Serialized JSON value for the configuration");

                    b.HasKey("Id")
                        .HasName("TENANT_PK");

                    b.HasIndex(new[] { "Code" }, "TENANT_CODE_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_TENANT");
                });

            modelBuilder.Entity("Pims.Dal.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("USER_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_USER_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APPROVED_BY_ID")
                        .HasComment("User name who approved this account");

                    b.Property<string>("BusinessIdentifier")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("BUSINESS_IDENTIFIER_VALUE")
                        .HasComment("User account business identifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<DateTime?>("ExpiryOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("EXPIRY_DATE")
                        .HasComment("When the user account will expire");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether the user account is disabled");

                    b.Property<DateTime>("IssueOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("ISSUE_DATE")
                        .HasComment("When the user account was issued");

                    b.Property<Guid?>("KeycloakUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GUID_IDENTIFIER_VALUE")
                        .HasComment("Unique key to link to keycloak user account");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("DATETIME")
                        .HasColumnName("LAST_LOGIN")
                        .HasComment("The date the user last logged in");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("NOTE")
                        .HasComment("A note about the user");

                    b.Property<long>("PersonId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PERSON_ID")
                        .HasComment("Foreign key to person");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("POSITION")
                        .HasComment("The user's position or job title");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("USER_PK");

                    b.HasIndex("BusinessIdentifier")
                        .HasDatabaseName("USER_BUSINESS_IDENTIFIER_VALUE_IDX");

                    b.HasIndex("KeycloakUserId")
                        .HasDatabaseName("USER_GUID_IDENTIFIER_VALUE_IDX");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("USER_PERSON_ID_IDX");

                    b.ToTable("PIMS_USER");
                });

            modelBuilder.Entity("Pims.Dal.Entities.UserOrganization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("USER_ORGANIZATION_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_USER_ORGANIZATION_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this user organization relationship is disabled");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ORGANIZATION_ID")
                        .HasComment("Foreign key to the organization");

                    b.Property<long>("RoleId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ROLE_ID")
                        .HasComment("Foreign key to the role");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("USER_ID")
                        .HasComment("Foreign key to the user");

                    b.HasKey("Id")
                        .HasName("USRORG_PK");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("PERORG_ORGANIZATION_ID_IDX");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("PERORG_ROLE_ID_IDX");

                    b.HasIndex("UserId")
                        .HasDatabaseName("PERORG_USER_ID_IDX");

                    b.ToTable("PIMS_USER_ORGANIZATION");
                });

            modelBuilder.Entity("Pims.Dal.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("USER_ROLE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_USER_ROLE_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this relationship between user and role is disabled");

                    b.Property<long>("RoleId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ROLE_ID")
                        .HasComment("Foreign key to the role");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("USER_ID")
                        .HasComment("Foreign key to the user");

                    b.HasKey("Id")
                        .HasName("USERRL_PK");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("USRROL_ROLE_ID_IDX");

                    b.HasIndex("UserId")
                        .HasDatabaseName("USRROL_USER_ID_IDX");

                    b.HasIndex(new[] { "UserId", "RoleId" }, "USRROL_USER_ROLE_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_USER_ROLE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Workflow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("WORKFLOW_MODEL_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_WORKFLOW_MODEL_ID_SEQ")
                        .HasComment("Auto-sequenced unique key value");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this workflow is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasDefaultValueSql("user_name()")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<string>("WorkflowTypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("WORKFLOW_MODEL_TYPE_CODE")
                        .HasComment("Foreign key to workflow model type");

                    b.HasKey("Id")
                        .HasName("WFLMDL_PK");

                    b.HasIndex("WorkflowTypeId")
                        .HasDatabaseName("WFLMDL_WORKFLOW_MODEL_TYPE_CODE_IDX");

                    b.ToTable("PIMS_WORKFLOW_MODEL");
                });

            modelBuilder.Entity("Pims.Dal.Entities.WorkflowType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("WORKFLOW_MODEL_TYPE_CODE")
                        .HasComment("Primary key code to identify record");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION")
                        .HasDefaultValueSql("''")
                        .HasComment("Friendly description of record");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("WFLMDT_PK");

                    b.ToTable("PIMS_WORKFLOW_MODEL_TYPE");
                });

            modelBuilder.Entity("Pims.Dal.Entities.AccessRequest", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Role", "Role")
                        .WithMany("AccessRequests")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("PIM_ROLE_PIM_ACRQST_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.AccessRequestStatusType", "Status")
                        .WithMany("AccessRequests")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("PIM_ARQSTT_PIM_ACRQST_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pims.Dal.Entities.User", "User")
                        .WithMany("AccessRequests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("PIM_USER_PIM_ACRQST_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pims.Dal.Entities.AccessRequestOrganization", b =>
                {
                    b.HasOne("Pims.Dal.Entities.AccessRequest", "AccessRequest")
                        .WithMany("OrganizationsManyToMany")
                        .HasForeignKey("AccessRequestId")
                        .HasConstraintName("PIM_ACRQST_PIM_ACRQOR_FK")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Organization", "Organization")
                        .WithMany("AccessRequestsManyToMany")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("PIM_ORG_PIM_ACRQOR_FK")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccessRequest");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ActivityTask", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Activity", "Activity")
                        .WithMany("TasksManyToMany")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("PIM_ACTMDL_PIM_TSKTAM_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Task", "Task")
                        .WithMany("ActivitiesManyToMany")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("PIM_TSKTMP_PIM_TSKTAM_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Address", b =>
                {
                    b.HasOne("Pims.Dal.Entities.AddressType", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("PIM_ADUSGT_PIM_ADDRSS_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("PIM_CNTRY_PIM_ADDRSS_FK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pims.Dal.Entities.District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("PIM_DSTRCT_PIM_ADDRSS_FK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pims.Dal.Entities.Province", "Province")
                        .WithMany("Addresses")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("PIM_PROVNC_PIM_ADDRSS_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Region", "Region")
                        .WithMany("Addresses")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("PIM_REGION_PIM_ADDRSS_FK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AddressType");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("Province");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ContactMethod", b =>
                {
                    b.HasOne("Pims.Dal.Entities.ContactMethodType", "ContactMethodType")
                        .WithMany("ContactMethods")
                        .HasForeignKey("ContactMethodTypeId")
                        .HasConstraintName("PIM_CNTMTT_PIM_CNTMTH_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Organization", "Organization")
                        .WithMany("ContactMethods")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("PIM_ORG_PIM_CNTMTH_FK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pims.Dal.Entities.Person", "Person")
                        .WithMany("ContactMethods")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("PIM_PERSON_PIM_CNTMTH_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ContactMethodType");

                    b.Navigation("Organization");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Pims.Dal.Entities.District", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Region", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("PIM_REGION_PIM_DSTRCT_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Insurance", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Person", "BctfaRiskManagementContact")
                        .WithMany()
                        .HasForeignKey("BctfaRiskManagementContactId")
                        .HasConstraintName("PIM_PERSON_PIM_INSRNC_BCTFA_CONTACT_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.InsurancePayeeType", "InsurancePayeeType")
                        .WithMany("Insurances")
                        .HasForeignKey("InsurancePayeeTypeId")
                        .HasConstraintName("PIM_INSPAY_PIM_INSRNC_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.InsuranceType", "InsuranceType")
                        .WithMany("Insurances")
                        .HasForeignKey("InsuranceTypeId")
                        .HasConstraintName("PIM_INSPYT_PIM_INSRNC_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Person", "InsurerContact")
                        .WithMany()
                        .HasForeignKey("InsurerContactId")
                        .HasConstraintName("PIM_PERSON_PIM_INSRNC_INSURER_CONTACT_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Organization", "InsurerOrganization")
                        .WithMany()
                        .HasForeignKey("InsurerOrganizationId")
                        .HasConstraintName("PIM_ORG_PIM_INSRNC_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Lease", "Lease")
                        .WithMany("Insurances")
                        .HasForeignKey("LeaseId")
                        .HasConstraintName("PIM_LEASE_PIM_INSRNC_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Person", "MotiRiskManagementContact")
                        .WithMany()
                        .HasForeignKey("MotiRiskManagementContactId")
                        .HasConstraintName("PIM_PERSON_PIM_INSRNCMOTI_CONTACT_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BctfaRiskManagementContact");

                    b.Navigation("InsurancePayeeType");

                    b.Navigation("InsuranceType");

                    b.Navigation("InsurerContact");

                    b.Navigation("InsurerOrganization");

                    b.Navigation("Lease");

                    b.Navigation("MotiRiskManagementContact");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Lease", b =>
                {
                    b.HasOne("Pims.Dal.Entities.LeaseCategoryType", "CategoryType")
                        .WithMany("Leases")
                        .HasForeignKey("CategoryTypeId")
                        .HasConstraintName("PIM_LSCATT_PIM_LEASE_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.LeaseIntiatorType", "LeaseInitiatorType")
                        .WithMany("Leases")
                        .HasForeignKey("LeaseInitiatorTypeId")
                        .HasConstraintName("PIM_LINITT_PIM_LEASE_FK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pims.Dal.Entities.LeaseResponsibilityType", "LeaseResponsibilityType")
                        .WithMany("Leases")
                        .HasForeignKey("LeaseResponsibilityTypeId")
                        .HasConstraintName("PIM_LRESPT_PIM_LEASE_FK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pims.Dal.Entities.LeaseLicenseType", "LeaseLicenseType")
                        .WithMany("Leases")
                        .HasForeignKey("LeaseTypeId")
                        .HasConstraintName("PIM_LELIST_PIM_LEASE_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Person", "MotiName")
                        .WithMany()
                        .HasForeignKey("MotiNameId")
                        .HasConstraintName("PIM_PERSON_PIM_LEASE_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.LeasePaymentFrequencyType", "PaymentFrequencyType")
                        .WithMany("Leases")
                        .HasForeignKey("PaymentFrequencyTypeId")
                        .HasConstraintName("PIM_LSPMTF_PIM_LEASE_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.LeasePaymentReceivableType", "PaymentRvblType")
                        .WithMany("Leases")
                        .HasForeignKey("PaymentReceivableTypeId")
                        .HasConstraintName("PIM_LSPRTY_PIM_LEASE_FK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pims.Dal.Entities.LeaseProgramType", "ProgramType")
                        .WithMany("Leases")
                        .HasForeignKey("ProgramTypeId")
                        .HasConstraintName("PIM_LSPRGT_PIM_LEASE_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.LeasePurposeType", "PurposeType")
                        .WithMany("Leases")
                        .HasForeignKey("PurposeTypeId")
                        .HasConstraintName("PIM_LSPRPTY_PIM_LEASE_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.LeaseStatusType", "StatusType")
                        .WithMany("Leases")
                        .HasForeignKey("StatusTypeId");

                    b.Navigation("CategoryType");

                    b.Navigation("LeaseInitiatorType");

                    b.Navigation("LeaseLicenseType");

                    b.Navigation("LeaseResponsibilityType");

                    b.Navigation("MotiName");

                    b.Navigation("PaymentFrequencyType");

                    b.Navigation("PaymentRvblType");

                    b.Navigation("ProgramType");

                    b.Navigation("PurposeType");

                    b.Navigation("StatusType");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeaseTenant", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Lease", "Lease")
                        .WithMany("TenantsManyToMany")
                        .HasForeignKey("LeaseId")
                        .HasConstraintName("PIM_LEASE_PIM_TENANT_FK")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.LessorType", "LessorType")
                        .WithMany("Leases")
                        .HasForeignKey("LessorTypeId")
                        .HasConstraintName("PIM_LSSRTY_PIM_TENANT_FK")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Organization", "Organization")
                        .WithMany("LeasesManyToMany")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("PIM_ORG_PIM_TENANT_FK")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("Pims.Dal.Entities.Person", "Person")
                        .WithMany("LeasesManyToMany")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("PIM_PERSON_PIM_TENANT_FK")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Lease");

                    b.Navigation("LessorType");

                    b.Navigation("Organization");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Organization", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Address", "Address")
                        .WithMany("Organizations")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("PIM_ADDRSS_PIM_ORG_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.District", "District")
                        .WithMany("Organizations")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("PIM_DSTRCT_PIM_ORG_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pims.Dal.Entities.OrganizationIdentifierType", "OrganizationIdentifierType")
                        .WithMany("Organizations")
                        .HasForeignKey("OrganizationIdentifierTypeId")
                        .HasConstraintName("PIM_ORGIDT_PIM_ORG_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.OrganizationType", "OrganizationType")
                        .WithMany("Organizations")
                        .HasForeignKey("OrganizationTypeId")
                        .HasConstraintName("PIM_ORGTYP_PIM_ORG_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Organization", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("PIM_ORG_PIM_PRNT_ORG_FK");

                    b.HasOne("Pims.Dal.Entities.Region", "Region")
                        .WithMany("Organizations")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("PIM_REGION_PIM_ORG_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Address");

                    b.Navigation("District");

                    b.Navigation("OrganizationIdentifierType");

                    b.Navigation("OrganizationType");

                    b.Navigation("Parent");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Person", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Address", "Address")
                        .WithMany("Persons")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("PIM_ADDRSS_PIM_PERSON_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PersonOrganization", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Organization", "Organization")
                        .WithMany("PersonsManyToMany")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("PIM_ORG_PIM_PERORG_FK")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("Pims.Dal.Entities.Person", "Person")
                        .WithMany("OrganizationsManyToMany")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("PIM_PERSON_PIM_PERORG_FK")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Organization");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Project", b =>
                {
                    b.HasOne("Pims.Dal.Entities.ProjectType", "ProjectType")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectTypeId")
                        .HasConstraintName("PIM_PRJTYP_PIM_PROJCT_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.ProjectRiskType", "Risk")
                        .WithMany("Projects")
                        .HasForeignKey("RiskId")
                        .HasConstraintName("PIM_PRJRSK_PIM_PROJCT_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.ProjectStatusType", "Status")
                        .WithMany("Projects")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("PIM_PRJSTY_PIM_PROJCT_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.ProjectTierType", "Tier")
                        .WithMany("Projects")
                        .HasForeignKey("TierId")
                        .HasConstraintName("PIM_PROJTR_PIM_PROJCT_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectType");

                    b.Navigation("Risk");

                    b.Navigation("Status");

                    b.Navigation("Tier");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectActivity", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Activity", "Activity")
                        .WithMany("ProjectActivities")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("PIM_ACTMDL_PIM_ACTVTY_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Project", "Project")
                        .WithMany("ProjectActivities")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("PIM_PROJCT_PIM_ACTVTY_FK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pims.Dal.Entities.ProjectWorkflow", "ProjectWorkflow")
                        .WithMany("ProjectActivities")
                        .HasForeignKey("ProjectWorkflowId")
                        .HasConstraintName("PIM_PRWKMD_PIM_ACTVTY_FK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Activity");

                    b.Navigation("Project");

                    b.Navigation("ProjectWorkflow");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectActivityTask", b =>
                {
                    b.HasOne("Pims.Dal.Entities.ProjectActivity", "ProjectActivity")
                        .WithMany("ProjectActivityTasks")
                        .HasForeignKey("ProjectActivityId")
                        .HasConstraintName("PIM_ACTVTY_PIM_TASK_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pims.Dal.Entities.Task", "Task")
                        .WithMany("ProjectActivityTasks")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("PIM_TSKTMP_PIM_TASK_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.User", "User")
                        .WithMany("ProjectActivityTasks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("PIM_USER_PIM_TASK_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectActivity");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectNote", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Project", "Project")
                        .WithMany("Notes")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("PIM_PROJCT_PIM_PROJNT_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectProperty", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Project", "Project")
                        .WithMany("PropertiesManyToMany")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("PIM_PROJCT_PIM_PRJPRP_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Property", "Property")
                        .WithMany("ProjectsManyToMany")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("PIM_PRPRTY_PIM_PRJPRP_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectWorkflow", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Project", "Project")
                        .WithMany("WorkflowsManyToMany")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("PIM_PROJCT_PIM_PRWKMD_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Workflow", "Workflow")
                        .WithMany("ProjectsManyToMany")
                        .HasForeignKey("WorkflowId")
                        .HasConstraintName("PIM_WFLMDL_PIM_PRWKMD_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Property", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Address", "Address")
                        .WithMany("Properties")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("PIM_ADDRSS_PIM_PRPRTY_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.PropertyAreaUnitType", "AreaUnit")
                        .WithMany("Properties")
                        .HasForeignKey("AreaUnitId")
                        .HasConstraintName("PIM_ARUNIT_PIM_PRPRTY_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.PropertyClassificationType", "Classification")
                        .WithMany("Properties")
                        .HasForeignKey("ClassificationId")
                        .HasConstraintName("PIM_PRPCLT_PIM_PRPRTY_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.PropertyDataSourceType", "DataSource")
                        .WithMany("Properties")
                        .HasForeignKey("DataSourceId")
                        .HasConstraintName("PIM_PIDSRT_PIM_PRPRTY_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.District", "District")
                        .WithMany("Properties")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("PIM_DSTRCT_PIM_PRPRTY_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Organization", "PropertyManagementOrganization")
                        .WithMany()
                        .HasForeignKey("PropertyManagementOrganizationId")
                        .HasConstraintName("PIM_ORG_PIM_PRPRTY_FK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pims.Dal.Entities.Person", "PropertyManager")
                        .WithMany()
                        .HasForeignKey("PropertyManagerId")
                        .HasConstraintName("PIM_PERSON_PIM_PRPRTY_FK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pims.Dal.Entities.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyTypeId")
                        .HasConstraintName("PIM_PRPTYP_PIM_PRPRTY_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Region", "Region")
                        .WithMany("Properties")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("PIM_REGION_PIM_PRPRTY_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.PropertyStatusType", "Status")
                        .WithMany("Properties")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("PIM_PRPSTS_PIM_PRPRTY_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.PropertySurplusDeclarationType", "SurplusDeclarationType")
                        .WithMany("Properties")
                        .HasForeignKey("SurplusDeclarationTypeId")
                        .HasConstraintName("PIM_SPDCLT_PIM_PRPRTY_FK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pims.Dal.Entities.PropertyTenureType", "Tenure")
                        .WithMany("Properties")
                        .HasForeignKey("TenureId")
                        .HasConstraintName("PIM_PRPTNR_PIM_PRPRTY_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("AreaUnit");

                    b.Navigation("Classification");

                    b.Navigation("DataSource");

                    b.Navigation("District");

                    b.Navigation("PropertyManagementOrganization");

                    b.Navigation("PropertyManager");

                    b.Navigation("PropertyType");

                    b.Navigation("Region");

                    b.Navigation("Status");

                    b.Navigation("SurplusDeclarationType");

                    b.Navigation("Tenure");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyEvaluation", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Property", "Property")
                        .WithMany("Evaluations")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("PIM_PRPRTY_PIM_PRPEVL_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyImprovement", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Lease", "Lease")
                        .WithMany("Improvements")
                        .HasForeignKey("LeaseId")
                        .HasConstraintName("PIM_PROPLS_PIM_PIMPRV_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.PropertyImprovementType", "PropertyImprovementType")
                        .WithMany("Improvements")
                        .HasForeignKey("PropertyImprovementTypeId")
                        .HasConstraintName("PIM_PIMPRT_PIM_PIMPRV_FK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Lease");

                    b.Navigation("PropertyImprovementType");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyLease", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Lease", "Lease")
                        .WithMany("PropertiesManyToMany")
                        .HasForeignKey("LeaseId")
                        .HasConstraintName("PIM_LEASE_PIM_PROPLS_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Property", "Property")
                        .WithMany("LeasesManyToMany")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("PIM_PRPRTY_PIM_PROPLS_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lease");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyOrganization", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Organization", "Organization")
                        .WithMany("PropertiesManyToMany")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("PIM_ORG_PIM_PRPORG_FK")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Property", "Property")
                        .WithMany("OrganizationsManyToMany")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("PIM_PRPRTY_PIM_PRPORG_FK")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyProjectActivity", b =>
                {
                    b.HasOne("Pims.Dal.Entities.ProjectActivity", "ProjectActivity")
                        .WithMany("PropertiesManyToMany")
                        .HasForeignKey("ProjectActivityId")
                        .HasConstraintName("PIM_ACTVTY_PIM_PRPACT_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pims.Dal.Entities.Property", "Property")
                        .WithMany("ProjectActivitiesManyToMany")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("PIM_PRPRTY_PIM_PRPACT_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProjectActivity");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyPropertyServiceFile", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Property", "Property")
                        .WithMany("ServiceFilesManyToMany")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("PIM_PRPRTY_PIM_PRPRSF_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.PropertyServiceFile", "ServiceFile")
                        .WithMany("PropertiesManyToMany")
                        .HasForeignKey("ServiceFileId")
                        .HasConstraintName("PIM_PRPSVC_PIM_PRPRSF_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("ServiceFile");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyServiceFile", b =>
                {
                    b.HasOne("Pims.Dal.Entities.PropertyServiceFileType", "FileType")
                        .WithMany("ServiceFiles")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("PIM_PRSVFT_PIM_PRPSVC_FK")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Province", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("PIM_CNTRY_PIM_PROVNC_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Pims.Dal.Entities.RoleClaim", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Claim", "Claim")
                        .WithMany("RolesManyToMany")
                        .HasForeignKey("ClaimId")
                        .HasConstraintName("PIM_CLMTYP_PIM_ROLCLM_FK")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Role", "Role")
                        .WithMany("ClaimsManyToMany")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("PIM_ROLE_PIM_ROLCLM_FK")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Pims.Dal.Entities.SecurityDeposit", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Lease", "Lease")
                        .WithMany("SecurityDeposits")
                        .HasForeignKey("LeaseId")
                        .HasConstraintName("PIM_LEASE_PIM_SECDEP_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.SecurityDepositHolderType", "SecurityDepositHolderType")
                        .WithMany("SecurityDeposits")
                        .HasForeignKey("SecurityDepositHolderTypeId")
                        .HasConstraintName("PIM_SCHLDT_PIM_SECDEP_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.SecurityDepositType", "SecurityDepositType")
                        .WithMany("SecurityDeposits")
                        .HasForeignKey("SecurityDepositTypeId")
                        .HasConstraintName("PIM_SECDPT_PIM_SECDEP_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lease");

                    b.Navigation("SecurityDepositHolderType");

                    b.Navigation("SecurityDepositType");
                });

            modelBuilder.Entity("Pims.Dal.Entities.SecurityDepositReturn", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Lease", "Lease")
                        .WithMany("SecurityDepositReturns")
                        .HasForeignKey("LeaseId")
                        .HasConstraintName("PIM_LEASE_PIM_SDRTRN_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.SecurityDepositType", "SecurityDepositType")
                        .WithMany("SecurityDepositReturns")
                        .HasForeignKey("SecurityDepositTypeId")
                        .HasConstraintName("PIM_SECDPT_PIM_SDRTRN_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lease");

                    b.Navigation("SecurityDepositType");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Task", b =>
                {
                    b.HasOne("Pims.Dal.Entities.TaskType", "TaskType")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskTypeId")
                        .HasConstraintName("PIM_TSKTMT_PIM_TSKTMP_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("Pims.Dal.Entities.User", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Person", "Person")
                        .WithMany("Users")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("PIM_PERSON_PIM_USER_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Pims.Dal.Entities.UserOrganization", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Organization", "Organization")
                        .WithMany("UsersManyToMany")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("PIM_ORG_PIM_USRORG_FK")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Role", "Role")
                        .WithMany("OrganizationsManyToMany")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("PIM_ROLE_PIM_USRORG_FK")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.User", "User")
                        .WithMany("OrganizationsManyToMany")
                        .HasForeignKey("UserId")
                        .HasConstraintName("PIM_USER_PIM_USRORG_FK")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pims.Dal.Entities.UserRole", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Role", "Role")
                        .WithMany("UsersManyToMany")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("PIM_ROLE_PIM_USERRL_FK")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.User", "User")
                        .WithMany("RolesManyToMany")
                        .HasForeignKey("UserId")
                        .HasConstraintName("PIM_USER_PIM_USERRL_FK")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Workflow", b =>
                {
                    b.HasOne("Pims.Dal.Entities.WorkflowType", "WorkflowType")
                        .WithMany("Workflows")
                        .HasForeignKey("WorkflowTypeId")
                        .HasConstraintName("PIM_WFLMDT_PIM_WFLMDL_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkflowType");
                });

            modelBuilder.Entity("Pims.Dal.Entities.AccessRequest", b =>
                {
                    b.Navigation("OrganizationsManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.AccessRequestStatusType", b =>
                {
                    b.Navigation("AccessRequests");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Activity", b =>
                {
                    b.Navigation("ProjectActivities");

                    b.Navigation("TasksManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Address", b =>
                {
                    b.Navigation("Organizations");

                    b.Navigation("Persons");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Pims.Dal.Entities.AddressType", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Claim", b =>
                {
                    b.Navigation("RolesManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ContactMethodType", b =>
                {
                    b.Navigation("ContactMethods");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("Pims.Dal.Entities.District", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Organizations");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Pims.Dal.Entities.InsurancePayeeType", b =>
                {
                    b.Navigation("Insurances");
                });

            modelBuilder.Entity("Pims.Dal.Entities.InsuranceType", b =>
                {
                    b.Navigation("Insurances");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Lease", b =>
                {
                    b.Navigation("Improvements");

                    b.Navigation("Insurances");

                    b.Navigation("PropertiesManyToMany");

                    b.Navigation("SecurityDepositReturns");

                    b.Navigation("SecurityDeposits");

                    b.Navigation("TenantsManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeaseCategoryType", b =>
                {
                    b.Navigation("Leases");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeaseIntiatorType", b =>
                {
                    b.Navigation("Leases");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeaseLicenseType", b =>
                {
                    b.Navigation("Leases");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeasePaymentFrequencyType", b =>
                {
                    b.Navigation("Leases");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeasePaymentReceivableType", b =>
                {
                    b.Navigation("Leases");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeaseProgramType", b =>
                {
                    b.Navigation("Leases");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeasePurposeType", b =>
                {
                    b.Navigation("Leases");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeaseResponsibilityType", b =>
                {
                    b.Navigation("Leases");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LeaseStatusType", b =>
                {
                    b.Navigation("Leases");
                });

            modelBuilder.Entity("Pims.Dal.Entities.LessorType", b =>
                {
                    b.Navigation("Leases");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Organization", b =>
                {
                    b.Navigation("AccessRequestsManyToMany");

                    b.Navigation("Children");

                    b.Navigation("ContactMethods");

                    b.Navigation("LeasesManyToMany");

                    b.Navigation("PersonsManyToMany");

                    b.Navigation("PropertiesManyToMany");

                    b.Navigation("UsersManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.OrganizationIdentifierType", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Pims.Dal.Entities.OrganizationType", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Person", b =>
                {
                    b.Navigation("ContactMethods");

                    b.Navigation("LeasesManyToMany");

                    b.Navigation("OrganizationsManyToMany");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Project", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("ProjectActivities");

                    b.Navigation("PropertiesManyToMany");

                    b.Navigation("WorkflowsManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectActivity", b =>
                {
                    b.Navigation("ProjectActivityTasks");

                    b.Navigation("PropertiesManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectRiskType", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectStatusType", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectTierType", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectType", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectWorkflow", b =>
                {
                    b.Navigation("ProjectActivities");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Property", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("LeasesManyToMany");

                    b.Navigation("OrganizationsManyToMany");

                    b.Navigation("ProjectActivitiesManyToMany");

                    b.Navigation("ProjectsManyToMany");

                    b.Navigation("ServiceFilesManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyAreaUnitType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyClassificationType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyDataSourceType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyImprovementType", b =>
                {
                    b.Navigation("Improvements");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyServiceFile", b =>
                {
                    b.Navigation("PropertiesManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyServiceFileType", b =>
                {
                    b.Navigation("ServiceFiles");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyStatusType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertySurplusDeclarationType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyTenureType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Province", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Region", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Districts");

                    b.Navigation("Organizations");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Role", b =>
                {
                    b.Navigation("AccessRequests");

                    b.Navigation("ClaimsManyToMany");

                    b.Navigation("OrganizationsManyToMany");

                    b.Navigation("UsersManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.SecurityDepositHolderType", b =>
                {
                    b.Navigation("SecurityDeposits");
                });

            modelBuilder.Entity("Pims.Dal.Entities.SecurityDepositType", b =>
                {
                    b.Navigation("SecurityDepositReturns");

                    b.Navigation("SecurityDeposits");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Task", b =>
                {
                    b.Navigation("ActivitiesManyToMany");

                    b.Navigation("ProjectActivityTasks");
                });

            modelBuilder.Entity("Pims.Dal.Entities.TaskType", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Pims.Dal.Entities.User", b =>
                {
                    b.Navigation("AccessRequests");

                    b.Navigation("OrganizationsManyToMany");

                    b.Navigation("ProjectActivityTasks");

                    b.Navigation("RolesManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Workflow", b =>
                {
                    b.Navigation("ProjectsManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.WorkflowType", b =>
                {
                    b.Navigation("Workflows");
                });
#pragma warning restore 612, 618
        }
    }
}
