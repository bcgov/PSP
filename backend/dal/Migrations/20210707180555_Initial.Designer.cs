// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Pims.Dal;

namespace Pims.Dal.Migrations
{
    [DbContext(typeof(PimsContext))]
    [Migration("20210707180555_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pims.Dal.Entities.AccessRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("ACCESS_REQUEST_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_ACCESS_REQUEST_ID_SEQ");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("Note")
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("NOTE")
                        .HasComment("A note about the request");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("STATUS")
                        .HasComment("The status of the request");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("USER_ID")
                        .HasComment("Foreign key to the user who submitted the request");

                    b.HasKey("Id")
                        .HasName("ACCRQT_PK");

                    b.HasIndex(new[] { "Status" }, "ACCRQT_STATUS_IDX");

                    b.HasIndex(new[] { "UserId" }, "ACCRQT_USER_ID_IDX");

                    b.ToTable("PIMS_ACCESS_REQUEST");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.AccessRequestAgency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("ACCESS_REQUEST_AGENCY_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_ACCESS_REQUEST_AGENCY_ID_SEQ");

                    b.Property<long>("AccessRequestId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ACCESS_REQUEST_ID")
                        .HasComment("Foreign key to the access request");

                    b.Property<long>("AgencyId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("AGENCY_ID")
                        .HasComment("Foreign key to the agency");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("ACRQAG_PK");

                    b.HasIndex(new[] { "AccessRequestId", "AgencyId" }, "ACRQAG_ACCESS_REQUEST_AGENCY_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "AccessRequestId" }, "ACRQAG_ACCESS_REQUEST_ID_IDX");

                    b.HasIndex(new[] { "AgencyId" }, "ACRQAG_AGENCY_ID_IDX");

                    b.ToTable("PIMS_ACCESS_REQUEST_AGENCY");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.AccessRequestRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("ACCESS_REQUEST_ROLE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_ACCESS_REQUEST_ROLE_ID_SEQ");

                    b.Property<long>("AccessRequestId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ACCESS_REQUEST_ID")
                        .HasComment("Foreign key to the access request");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<long>("RoleId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ROLE_ID")
                        .HasComment("Foreign key to the role");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("ACCRQR_PK");

                    b.HasIndex(new[] { "AccessRequestId" }, "ACCRQR_ACCESS_REQUEST_ID_IDX");

                    b.HasIndex(new[] { "AccessRequestId", "RoleId" }, "ACCRQR_ROLE_ACCESS_REQUEST_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "RoleId" }, "ACCRQR_ROLE_ID_IDX");

                    b.ToTable("PIMS_ACCESS_REQUEST_ROLE");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("ADDRESS_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_ADDRESS_ID_SEQ");

                    b.Property<string>("Address1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("ADDRESS1")
                        .HasComment("The first line of the address");

                    b.Property<string>("Address2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("ADDRESS2")
                        .HasComment("The second line of the address");

                    b.Property<string>("AdministrativeArea")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("ADMINISTRATIVE_AREA")
                        .HasComment("Administrative area name (city, district, region, etc.)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("Postal")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("POSTAL")
                        .HasComment("The postal code of the address");

                    b.Property<long>("ProvinceId")
                        .HasMaxLength(2)
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROVINCE_ID")
                        .HasComment("Foreign key to the province");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("ADDR_PK");

                    b.HasIndex(new[] { "Address1", "AdministrativeArea", "Postal" }, "ADDR_ADDRESS1_ADMINISTRATIVE_AREA_POSTAL_IDX")
                        .HasAnnotation("SqlServer:Include", new[] { "Address2" });

                    b.HasIndex(new[] { "ProvinceId" }, "ADDR_PROVINCE_ID_IDX");

                    b.ToTable("PIMS_ADDRESS");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.AdministrativeArea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("ADMINISTRATIVE_AREA_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_ADMINISTRATIVE_AREA_ID_SEQ");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ABBREVIATION")
                        .HasComment("An abbreviation of the name");

                    b.Property<string>("BoundaryType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BOUNDARY_TYPE")
                        .HasComment("A boundary type representing this record");

                    b.Property<string>("GroupName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("GROUP_NAME")
                        .HasComment("A group name to associate multiple records");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("NAME")
                        .HasComment("A name to identify this record");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.HasKey("Id")
                        .HasName("ADMINA_PK");

                    b.HasIndex(new[] { "IsDisabled", "Name", "SortOrder" }, "ADMINA_IS_DISABLED_NAME_DISPLAY_ORDER_IDX");

                    b.ToTable("PIMS_ADMINISTRATIVE_AREA");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Agency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("AGENCY_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_AGENCY_ID_SEQ");

                    b.Property<string>("AddressTo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ADDRESS_TO")
                        .HasComment("The addressed to statement that will be used in emails");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("CODE")
                        .HasComment("Unique human friendly code name to identity this record");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("A description of the agency");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("EMAIL")
                        .HasComment("An email address to contact the agency");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("NAME")
                        .HasComment("A name to identify the agency");

                    b.Property<long?>("ParentId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PARENT_AGENCY_ID")
                        .HasComment("Foreign key to the parent agency");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<bool>("SendEmail")
                        .HasColumnType("bit")
                        .HasColumnName("SEND_EMAIL")
                        .HasComment("Whether to send email to the agency");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("AGNCY_PK");

                    b.HasIndex(new[] { "Code", "ParentId" }, "AGNCY_AGENCY_PARENT_AGENCY_TUC")
                        .IsUnique()
                        .HasFilter("[PARENT_AGENCY_ID] IS NOT NULL");

                    b.HasIndex(new[] { "IsDisabled", "Code", "Name", "ParentId", "SortOrder" }, "AGNCY_IS_DISABLED_CODE_NAME_PARENT_ID_DISPLAY_ORDER_IDX");

                    b.HasIndex(new[] { "ParentId" }, "AGNCY_PARENT_AGENCY_ID_IDX");

                    b.ToTable("PIMS_AGENCY");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Building", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("BUILDING_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_BUILDING_ID_SEQ");

                    b.Property<long>("AddressId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ADDRESS_ID")
                        .HasComment("Foreign key to the property address");

                    b.Property<long?>("AgencyId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("AGENCY_ID")
                        .HasComment("Foreign key to the owning agency");

                    b.Property<Geometry>("Boundary")
                        .HasColumnType("geography")
                        .HasColumnName("BOUNDARY")
                        .HasComment("A geo-spatial description of the building boundary");

                    b.Property<long>("BuildingConstructionTypeId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("BUILDING_CONSTRUCTION_TYPE_ID")
                        .HasComment("Foreign key to the building construction type");

                    b.Property<int>("BuildingFloorCount")
                        .HasColumnType("int")
                        .HasColumnName("BUILDING_FLOOR_COUNT")
                        .HasComment("Number of floors the building has");

                    b.Property<long>("BuildingOccupantTypeId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("BUILDING_OCCUPANT_TYPE_ID")
                        .HasComment("Foreign key to the building occupant type");

                    b.Property<long>("BuildingPredominateUseId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("BUILDING_PREDOMINATE_USE_ID")
                        .HasComment("Foreign key to the building predominate use");

                    b.Property<string>("BuildingTenancy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BUILDING_TENANCY")
                        .HasDefaultValueSql("''")
                        .HasComment("Type of tenancy in the building");

                    b.Property<DateTime?>("BuildingTenancyUpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("BUILDING_TENANCY_UPDATED_ON")
                        .HasComment("The date the building tenancy was updated on");

                    b.Property<long>("ClassificationId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_CLASSIFICATION_ID")
                        .HasComment("Foreign key to the property classification");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("The property description");

                    b.Property<string>("EncumbranceReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("ENCUMBRANCE_REASON")
                        .HasComment("The reason the property has an encumbrance");

                    b.Property<bool>("IsSensitive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_SENSITIVE")
                        .HasComment("Whether this building is sensitive to privacy impact statement");

                    b.Property<bool>("IsVisibleToOtherAgencies")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_VISIBLE_TO_OTHER_AGENCIES")
                        .HasComment("Whether this building is visible to other agencies");

                    b.Property<DateTime?>("LeaseExpiry")
                        .HasColumnType("DATETIME")
                        .HasColumnName("LEASE_EXPIRY")
                        .HasComment("The date the lease expires");

                    b.Property<string>("LeasedLandMetadata")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LEASED_LAND_METADATA")
                        .HasComment("Contains JSON serialized data related to leased land");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography")
                        .HasColumnName("LOCATION")
                        .HasComment("A geo-spatial point where the building is located");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NAME")
                        .HasComment("A name to identify this property");

                    b.Property<string>("OccupantName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("OCCUPANT_NAME")
                        .HasComment("The name of the occupant");

                    b.Property<string>("ProjectNumbers")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("PROJECT_NUMBERS")
                        .HasComment("A comma-separated list of project numbers associated with this property");

                    b.Property<long>("PropertyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(2L)
                        .HasColumnName("PROPERTY_TYPE_ID")
                        .HasComment("Foreign key to the property type");

                    b.Property<float>("RentableArea")
                        .HasColumnType("real")
                        .HasColumnName("RENTABLE_AREA")
                        .HasComment("The total rentable area of the building");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<float>("TotalArea")
                        .HasColumnType("real")
                        .HasColumnName("TOTAL_AREA")
                        .HasComment("The total area of the building");

                    b.Property<bool>("TransferLeaseOnSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("TRANSFER_LEASE_ON_SALE")
                        .HasComment("Whether the lease would transfer on sale");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("BUILDG_PK");

                    b.HasIndex(new[] { "AddressId" }, "BUILDG_ADDRESS_ID_IDX");

                    b.HasIndex(new[] { "AgencyId" }, "BUILDG_AGENCY_ID_IDX");

                    b.HasIndex(new[] { "BuildingConstructionTypeId" }, "BUILDG_BUILDING_CONSTRUCTION_TYPE_ID_IDX");

                    b.HasIndex(new[] { "BuildingOccupantTypeId" }, "BUILDG_BUILDING_OCCUPANT_TYPE_ID_IDX");

                    b.HasIndex(new[] { "BuildingPredominateUseId" }, "BUILDG_BUILDING_PREDOMINATE_USE_ID_IDX");

                    b.HasIndex(new[] { "IsSensitive" }, "BUILDG_IS_SENSITIVE_IDX");

                    b.HasIndex(new[] { "ClassificationId" }, "BUILDG_PROPERTY_CLASSIFICATION_ID_IDX");

                    b.HasIndex(new[] { "PropertyTypeId" }, "BUILDG_PROPERTY_TYPE_ID_IDX");

                    b.ToTable("PIMS_BUILDING");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.BuildingConstructionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("BUILDING_CONSTRUCTION_TYPE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_BUILDING_CONSTRUCTION_TYPE_ID_SEQ");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("NAME")
                        .HasComment("A unique name of the record");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.HasKey("Id")
                        .HasName("BLCNTY_PK");

                    b.HasIndex(new[] { "IsDisabled", "SortOrder" }, "BLCNTY_IS_DISABLED_DISPLAY_ORDER_IDX");

                    b.HasIndex(new[] { "Name" }, "BLCNTY_NAME_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_BUILDING_CONSTRUCTION_TYPE");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.BuildingEvaluation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("BUILDING_EVALUATION_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_BUILDING_EVALUATION_ID_SEQ");

                    b.Property<long>("BuildingId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("BUILDING_ID")
                        .HasComment("Foreign key to the building");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("DATE")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("The date this evaluation is for");

                    b.Property<int>("Key")
                        .HasColumnType("int")
                        .HasColumnName("KEY")
                        .HasComment("The type of evaluation taken");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("NOTE")
                        .HasComment("A note about the evaluation");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<decimal>("Value")
                        .HasColumnType("MONEY")
                        .HasColumnName("VALUE")
                        .HasComment("The value of the evaluation");

                    b.HasKey("Id")
                        .HasName("BLDEVL_PK");

                    b.HasIndex(new[] { "BuildingId", "Date", "Key" }, "BLDEVL_BUILDING_ID_DATE_KEY_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "BuildingId" }, "BLDEVL_BUILDING_ID_IDX");

                    b.HasIndex(new[] { "Date" }, "BLDEVL_DATE_IDX");

                    b.ToTable("PIMS_BUILDING_EVALUATION");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.BuildingFiscal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("BUILDING_FISCAL_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_BUILDING_FISCAL_ID_SEQ");

                    b.Property<long>("BuildingId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("BUILDING_ID")
                        .HasComment("Foreign key to the building");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("DATE")
                        .HasColumnName("EFFECTIVE_DATE")
                        .HasComment("The effective date this value is for");

                    b.Property<int>("FiscalYear")
                        .HasColumnType("int")
                        .HasColumnName("FISCAL_YEAR")
                        .HasComment("The fiscal year this value is for");

                    b.Property<int>("Key")
                        .HasColumnType("int")
                        .HasColumnName("KEY")
                        .HasComment("The fiscal value type");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("NOTE")
                        .HasComment("A note about this fiscal value");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<decimal>("Value")
                        .HasColumnType("MONEY")
                        .HasColumnName("VALUE")
                        .HasComment("The value of the building");

                    b.HasKey("Id")
                        .HasName("BLDFSC_PK");

                    b.HasIndex(new[] { "BuildingId", "FiscalYear", "Key" }, "BLDFSC_BUILDING_ID_FISCAL_YEAR_KEY_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "BuildingId" }, "BLDFSC_BUILDING_ID_IDX");

                    b.HasIndex(new[] { "Value" }, "BLDFSC_VALUE_IDX");

                    b.ToTable("PIMS_BUILDING_FISCAL");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.BuildingOccupantType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("BUILDING_OCCUPANT_TYPE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_BUILDING_OCCUPANT_TYPE_ID_SEQ");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("NAME")
                        .HasComment("A unique name to identify the record");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.HasKey("Id")
                        .HasName("BLOCCT_PK");

                    b.HasIndex(new[] { "IsDisabled", "SortOrder" }, "BLOCCT_IS_DISABLED_DISPLAY_ORDER_IDX");

                    b.HasIndex(new[] { "Name" }, "BLOCCT_NAME_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_BUILDING_OCCUPANT_TYPE");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.BuildingPredominateUse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("BUILDING_PREDOMINATE_USE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_BUILDING_PREDOMINATE_USE_ID_SEQ");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("NAME")
                        .HasComment("A unique name to identify this record");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.HasKey("Id")
                        .HasName("BLPRDU_PK");

                    b.HasIndex(new[] { "IsDisabled", "SortOrder" }, "BLPRDU_IS_DISABLED_DISPLAY_ORDER_IDX");

                    b.HasIndex(new[] { "Name" }, "BLPRDU_NAME_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_BUILDING_PREDOMINATE_USE");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Claim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("CLAIM_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_CLAIM_ID_SEQ");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("A description of the claim");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this claim is disabled");

                    b.Property<Guid>("Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CLAIM_UID")
                        .HasComment("A unique key to identify the record");

                    b.Property<Guid?>("KeycloakRoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("KEYCLOAK_ROLE_ID")
                        .HasComment("A unique key to identify the associated role in keycloak");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NAME")
                        .HasComment("A unique name to identify this record");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.HasKey("Id")
                        .HasName("CLAIM_PK");

                    b.HasIndex(new[] { "Key" }, "CLAIM_CLAIM_UID_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "IsDisabled" }, "CLAIM_IS_DISABLED_IDX");

                    b.HasIndex(new[] { "Name" }, "CLAIM_NAME_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_CLAIM");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.NotificationQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("NOTIFICATION_QUEUE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_NOTIFICATION_QUEUE_ID_SEQ");

                    b.Property<string>("Bcc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("BCC")
                        .HasComment("One more more email addresses the notification was blind carbon copied to");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BODY")
                        .HasComment("The message body of the notification");

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BODY_TYPE")
                        .HasComment("The email body type");

                    b.Property<string>("Cc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("CC")
                        .HasComment("One more more email addresses the notification was carbon copied to");

                    b.Property<Guid?>("ChesMessageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CHES_MESSAGE_ID")
                        .HasComment("Common Hosted Email Service message key");

                    b.Property<Guid?>("ChesTransactionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CHES_TRANSACTION_ID")
                        .HasComment("Common hosted Email Service transaction key");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("Encoding")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ENCODING")
                        .HasComment("The email encoding");

                    b.Property<Guid>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("KEY")
                        .HasComment("A unique key to identify the notification");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PRIORITY")
                        .HasComment("The email priority");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<DateTime>("SendOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("SEND_ON")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("The date the message will be sent on");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("STATUS");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SUBJECT")
                        .HasComment("The subject of the notification");

                    b.Property<string>("Tag")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TAG")
                        .HasComment("A way to identify related notifications");

                    b.Property<long?>("TemplateId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("NOTIFICATION_TEMPLATE_ID")
                        .HasComment("Foreign key to the notification template");

                    b.Property<string>("To")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("TO")
                        .HasComment("One more more email addresses the notification was sent to");

                    b.Property<long?>("ToAgencyId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("TO_AGENCY_ID")
                        .HasComment("Foreign key to the agency the notification was sent to");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("NOTIFQ_PK");

                    b.HasIndex(new[] { "TemplateId" }, "NOTIFQ_NOTIFICATION_TEMPLATE_ID_IDX");

                    b.HasIndex(new[] { "Key" }, "NOTIFQ_NOTIFICATION_UID_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "Status", "SendOn", "Subject" }, "NOTIFQ_STATUS_SEND_ON_SUBJECT_IDX");

                    b.HasIndex(new[] { "ToAgencyId" }, "NOTIFQ_TO_AGENCY_ID_IDX");

                    b.ToTable("PIMS_NOTIFICATION_QUEUE");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.NotificationTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("NOTIFICATION_TEMPLATE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_NOTIFICATION_TEMPLATE_ID_SEQ");

                    b.Property<string>("Audience")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AUDIENCE")
                        .HasComment("The audience who will receive the notification");

                    b.Property<string>("Bcc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("BCC")
                        .HasComment("One or more email address to blind carbon copy the notification to");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BODY");

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BODY_TYPE")
                        .HasComment("The notification body type");

                    b.Property<string>("Cc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("CC")
                        .HasComment("One or more email address to carbon copy the notification to");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("A description to describe the record");

                    b.Property<string>("Encoding")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ENCODING")
                        .HasComment("The encoding of the notification body");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether the notification template is disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NAME")
                        .HasComment("A unique name to identify the record");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PRIORITY")
                        .HasComment("The notification priority");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SUBJECT")
                        .HasComment("The subject of the notification");

                    b.Property<string>("Tag")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TAG")
                        .HasComment("A way to identify related notifications");

                    b.Property<string>("To")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("TO")
                        .HasComment("One or more email address to send the notification to");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("NTTMPL_PK");

                    b.HasIndex(new[] { "IsDisabled", "Tag" }, "NTTMPL_IS_DISABLED_TAG_IDX");

                    b.HasIndex(new[] { "Name" }, "NTTMPL_NAME_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_NOTIFICATION_TEMPLATE");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Parcel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PARCEL_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PARCEL_ID_SEQ");

                    b.Property<long>("AddressId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ADDRESS_ID")
                        .HasComment("Foreign key to the property address");

                    b.Property<long?>("AgencyId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("AGENCY_ID")
                        .HasComment("Foreign key to the owning agency");

                    b.Property<Geometry>("Boundary")
                        .HasColumnType("geography")
                        .HasColumnName("BOUNDARY")
                        .HasComment("A geo-spatial description of the building boundary");

                    b.Property<long>("ClassificationId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_CLASSIFICATION_ID")
                        .HasComment("Foreign key to the property classification");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("The property description");

                    b.Property<string>("EncumbranceReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("ENCUMBRANCE_REASON")
                        .HasComment("The reason the property has an encumbrance");

                    b.Property<bool>("IsSensitive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_SENSITIVE")
                        .HasComment("Whether this building is sensitive to privacy impact statement");

                    b.Property<bool>("IsVisibleToOtherAgencies")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_VISIBLE_TO_OTHER_AGENCIES")
                        .HasComment("Whether this building is visible to other agencies");

                    b.Property<float>("LandArea")
                        .HasColumnType("real")
                        .HasColumnName("LAND_AREA")
                        .HasComment("The area of the property");

                    b.Property<string>("LandLegalDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LAND_LEGAL_DESCRIPTION")
                        .HasComment("The land legal description");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography")
                        .HasColumnName("LOCATION")
                        .HasComment("A geo-spatial point where the building is located");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NAME")
                        .HasComment("A name to identify this property");

                    b.Property<bool>("NotOwned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("NOT_OWNED")
                        .HasComment("Whether this property is owned by an agency");

                    b.Property<int>("PID")
                        .HasColumnType("int")
                        .HasColumnName("PID")
                        .HasComment("A unique identifier for a titled property");

                    b.Property<int?>("PIN")
                        .HasColumnType("int")
                        .HasColumnName("PIN")
                        .HasComment("A unique identifier for an non-titled property");

                    b.Property<string>("ProjectNumbers")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("PROJECT_NUMBERS")
                        .HasComment("A comma-separated list of project numbers associated with this property");

                    b.Property<long>("PropertyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("PROPERTY_TYPE_ID")
                        .HasComment("Foreign key to the property type");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<string>("Zoning")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ZONING")
                        .HasComment("The current zoning of the property");

                    b.Property<string>("ZoningPotential")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ZONING_POTENTIAL")
                        .HasComment("The potential zoning of the property");

                    b.HasKey("Id")
                        .HasName("PARCEL_PK");

                    b.HasIndex(new[] { "AddressId" }, "PARCEL_ADDRESS_ID_IDX");

                    b.HasIndex(new[] { "AgencyId" }, "PARCEL_AGENCY_ID_IDX");

                    b.HasIndex(new[] { "IsSensitive" }, "PARCEL_IS_SENSITIVE_IDX");

                    b.HasIndex(new[] { "PID", "PIN" }, "PARCEL_PID_PIN_TUC")
                        .IsUnique()
                        .HasFilter("[PIN] IS NOT NULL");

                    b.HasIndex(new[] { "ClassificationId" }, "PARCEL_PROPERTY_CLASSIFICATION_ID_IDX");

                    b.HasIndex(new[] { "PropertyTypeId" }, "PARCEL_PROPERTY_TYPE_ID_IDX");

                    b.ToTable("PIMS_PARCEL");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ParcelBuilding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PARCEL_BUILDING_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PARCEL_BUILDING_ID_SEQ");

                    b.Property<long>("BuildingId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("BUILDING_ID")
                        .HasComment("Foreign key to the building");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<long>("ParcelId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PARCEL_ID")
                        .HasComment("Foreign key to the parcel");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("PRCLBL_PK");

                    b.HasIndex(new[] { "BuildingId" }, "PRCLBL_BUILDING_ID_IDX");

                    b.HasIndex(new[] { "ParcelId", "BuildingId" }, "PRCLBL_PARCEL_BUILDING_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "ParcelId" }, "PRCLBL_PARCEL_ID_IDX");

                    b.ToTable("PIMS_PARCEL_BUILDING");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ParcelEvaluation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PARCEL_EVALUATION_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PARCEL_EVALUATION_ID_SEQ");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("DATE")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("The date this evaluation was taken");

                    b.Property<string>("Firm")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("FIRM")
                        .HasComment("The firm or company name that provided the evaluation");

                    b.Property<int>("Key")
                        .HasColumnType("int")
                        .HasColumnName("KEY")
                        .HasComment("The evaluation type");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("NOTE")
                        .HasComment("A note about the evaluation");

                    b.Property<long>("ParcelId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PARCEL_ID")
                        .HasComment("Foreign key to parcel");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<decimal>("Value")
                        .HasColumnType("MONEY")
                        .HasColumnName("VALUE")
                        .HasComment("The value of the evaluation");

                    b.HasKey("Id")
                        .HasName("PREVAL_PK");

                    b.HasIndex(new[] { "ParcelId", "Date", "Key" }, "PREVAL_PARCEL_ID_DATE_KEY_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "ParcelId" }, "PREVAL_PARCEL_ID_IDX");

                    b.HasIndex(new[] { "Value" }, "PREVAL_VALUE_IDX");

                    b.ToTable("PIMS_PARCEL_EVALUATION");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ParcelFiscal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PARCEL_FISCAL_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PARCEL_FISCAL_ID_SEQ");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("DATE")
                        .HasColumnName("EFFECTIVE_DATE")
                        .HasComment("The effective date of the value");

                    b.Property<int>("FiscalYear")
                        .HasColumnType("int")
                        .HasColumnName("FISCAL_YEAR")
                        .HasComment("The fiscal year this value is relevant to");

                    b.Property<int>("Key")
                        .HasColumnType("int")
                        .HasColumnName("KEY")
                        .HasComment("The fiscal value type");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("NOTE")
                        .HasComment("A note about the fiscal value");

                    b.Property<long>("ParcelId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PARCEL_ID")
                        .HasComment("Foreign key to the parcel");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<decimal>("Value")
                        .HasColumnType("MONEY")
                        .HasColumnName("VALUE")
                        .HasComment("The value of the property");

                    b.HasKey("Id")
                        .HasName("PRFSCL_PK");

                    b.HasIndex(new[] { "ParcelId", "FiscalYear", "Key" }, "PRFSCL_PARCEL_ID_FISCAL_YEAR_KEY_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "ParcelId" }, "PRFSCL_PARCEL_ID_IDX");

                    b.HasIndex(new[] { "Value" }, "PRFSCL_VALUE_IDX");

                    b.ToTable("PIMS_PARCEL_FISCAL");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ParcelParcel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PARCEL_PARCEL_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PARCEL_PARCEL_ID_SEQ");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<long>("ParcelId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("PARCEL_ID")
                        .HasComment("Foreign key to the parent parcel");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<long>("SubdivisionId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("SUBDIVISION_PARCEL_ID")
                        .HasComment("Foreign key to the parcel that is a subdivision");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("PRCPRC_PK");

                    b.HasIndex(new[] { "ParcelId" }, "PRCPRC_PARCEL_ID_IDX");

                    b.HasIndex(new[] { "ParcelId", "SubdivisionId" }, "PRCPRC_PARCEL_SUBDIVISION_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "SubdivisionId" }, "PRCPRC_SUBDIVISON_ID_IDX");

                    b.ToTable("PIMS_PARCEL_PARCEL");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ProjectNumber", b =>
                {
                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b
                        .HasAnnotation("Relational:SqlQuery", "SELECT NEXT VALUE FOR dbo.[PIMS_PROJECT_NUMBER_SEQ]");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyClassification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_CLASSIFICATION_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PROPERTY_CLASSIFICATION_ID_SEQ");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit")
                        .HasColumnName("IS_VISIBLE")
                        .HasComment("Whether this record is visible to users");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("NAME")
                        .HasComment("A unique name to identify the record");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.HasKey("Id")
                        .HasName("PRPCLS_PK");

                    b.HasIndex(new[] { "IsDisabled" }, "PRPCLS_IS_DIABLED_IDX");

                    b.HasIndex(new[] { "Name" }, "PRPCLS_NAME_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_PROPERTY_CLASSIFICATION");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.PropertyType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROPERTY_TYPE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PROPERTY_TYPE_ID_SEQ");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("NAME")
                        .HasComment("A unique name to identify the record");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.HasKey("Id")
                        .HasName("PRPTYP_PK");

                    b.HasIndex(new[] { "IsDisabled", "SortOrder" }, "PRPTYP_IS_DISABLED_DISPLAY_ORDER_IDX");

                    b.HasIndex(new[] { "Name" }, "PRPTYP_NAME_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_PROPERTY_TYPE");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Province", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("PROVINCE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_PROVINCE_ID_SEQ");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("PROVINCE_CODE")
                        .HasDefaultValueSql("''")
                        .HasComment("A unique human friendly code to identify the record");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("NAME")
                        .HasComment("A unique name to identify the record");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.HasKey("Id")
                        .HasName("PROV_PK");

                    b.HasIndex(new[] { "Code" }, "PROV_CODE_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "PROV_NAME_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_PROVINCE");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("ROLE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_ROLE_ID_SEQ");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("A description of the role");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether this record is disabled");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("IS_PUBLIC")
                        .HasComment("Whether this role is publicly available to users");

                    b.Property<Guid>("Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ROLE_UID")
                        .HasComment("A unique key to identify the record");

                    b.Property<Guid?>("KeycloakGroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("KEYCLOAK_GROUP_ID")
                        .HasComment("A key to the associated keycloak group");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NAME")
                        .HasComment("A unique name to identify the record");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("DISPLAY_ORDER")
                        .HasComment("Sorting order of record");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("ROLE_PK");

                    b.HasIndex(new[] { "IsDisabled" }, "ROLE_IS_DISABLED_IDX");

                    b.HasIndex(new[] { "Name" }, "ROLE_NAME_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "Key" }, "ROLE_ROLE_UID_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_ROLE");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("ROLE_CLAIM_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_ROLE_CLAIM_ID_SEQ");

                    b.Property<long>("ClaimId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("CLAIM_ID")
                        .HasComment("Foreign key to the claim");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<long>("RoleId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ROLE_ID")
                        .HasComment("Foreign key to the role");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.HasKey("Id")
                        .HasName("ROLCLM_PK");

                    b.HasIndex(new[] { "ClaimId" }, "ROLCLM_CLAIM_ID_IDX");

                    b.HasIndex(new[] { "RoleId", "ClaimId" }, "ROLCLM_ROLE_CLAIM_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "RoleId" }, "ROLCLM_ROLE_ID_IDX");

                    b.ToTable("PIMS_ROLE_CLAIM");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("TENANT_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_TENANT_ID_SEQ");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("CODE")
                        .HasComment("Code value for entry");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("Description of the entry for display purposes");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("NAME")
                        .HasComment("Name of the entry for display purposes");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("SETTINGS")
                        .HasComment("Serialized JSON value for the configuration");

                    b.HasKey("Id")
                        .HasName("TENANT_PK");

                    b.HasIndex(new[] { "Code" }, "TENANT_CODE_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_TENANT");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("USER_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_USER_ID_SEQ");

                    b.Property<long?>("ApprovedById")
                        .HasColumnType("BIGINT")
                        .HasColumnName("APPROVED_BY_ID")
                        .HasComment("Foreign key to the user who approved this user account");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("APPROVED_ON")
                        .HasComment("When the user account was approved");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("DISPLAY_NAME")
                        .HasComment("The user's display name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EMAIL")
                        .HasComment("The user's email address");

                    b.Property<bool>("EmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("EMAIL_VERIFIED")
                        .HasComment("Whether the user's email has been verified");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FIRST_NAME")
                        .HasComment("The user's first name");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_DISABLED")
                        .HasComment("Whether the user account is disabled");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("IS_SYSTEM")
                        .HasComment("Whether this is a system user account");

                    b.Property<Guid>("Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("USER_UID")
                        .HasComment("A unique key to identify the user");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("DATETIME")
                        .HasColumnName("LAST_LOGIN")
                        .HasComment("The user's last login date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LAST_NAME")
                        .HasComment("The user's last name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MIDDLE_NAME")
                        .HasComment("The user's middle name");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("NOTE")
                        .HasComment("A note about the user");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("POSITION")
                        .HasComment("The user's position title");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("USERNAME")
                        .HasComment("A unique username to identify the user");

                    b.HasKey("Id")
                        .HasName("USER_PK");

                    b.HasIndex(new[] { "Email" }, "USER_EMAIL_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "IsDisabled", "LastName", "FirstName" }, "USER_IS_DISABLED_LAST_NAME_FIRST_NAME_IDX");

                    b.HasIndex(new[] { "Username" }, "USER_USERNAME_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "ApprovedById" }, "USER_USER_APPROVED_BY_ID_IDX");

                    b.HasIndex(new[] { "Key" }, "USER_USER_UID_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_USER");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.UserAgency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("USER_AGENCY_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_USER_AGENCY_ID_SEQ");

                    b.Property<long>("AgencyId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("AGENCY_ID")
                        .HasComment("Foreign key to the agency");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("USER_ID")
                        .HasComment("Foreign key to the user");

                    b.HasKey("Id")
                        .HasName("USRAGC_PK");

                    b.HasIndex(new[] { "AgencyId" }, "USRAGC_AGENCY_ID_IDX");

                    b.HasIndex(new[] { "UserId", "AgencyId" }, "USRAGC_USER_AGENCY_TUC")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "USRAGC_USER_ID_IDX");

                    b.ToTable("PIMS_USER_AGENCY");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnName("USER_ROLE_ID")
                        .HasDefaultValueSql("NEXT VALUE FOR PIMS_USER_ROLE_ID_SEQ");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USERID")
                        .HasComment("Reference to the username who created this record")
                        .HasAnnotation("ColumnOrder", 89);

                    b.Property<string>("CreatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_CREATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who created this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 91);

                    b.Property<Guid?>("CreatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_CREATE_USER_GUID")
                        .HasComment("Reference to the user uid who created this record")
                        .HasAnnotation("ColumnOrder", 90);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_CREATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was created")
                        .HasAnnotation("ColumnOrder", 88);

                    b.Property<long>("RoleId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ROLE_ID")
                        .HasComment("Foreign key to the role");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(1L)
                        .HasColumnName("CONCURRENCY_CONTROL_NUMBER")
                        .HasComment("Concurrency control number")
                        .HasAnnotation("ColumnOrder", 100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USERID")
                        .HasComment("Reference to the user who last updated this record")
                        .HasAnnotation("ColumnOrder", 93);

                    b.Property<string>("UpdatedByDirectory")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("APP_LAST_UPDATE_USER_DIRECTORY")
                        .HasComment("Reference to the user directory who updated this record [IDIR, BCeID]")
                        .HasAnnotation("ColumnOrder", 95);

                    b.Property<Guid?>("UpdatedByKey")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APP_LAST_UPDATE_USER_GUID")
                        .HasComment("Reference to the user uid who updated this record")
                        .HasAnnotation("ColumnOrder", 94);

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("APP_LAST_UPDATE_TIMESTAMP")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When this record was last updated")
                        .HasAnnotation("ColumnOrder", 92);

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("USER_ID")
                        .HasComment("Foreign key to the user");

                    b.HasKey("Id")
                        .HasName("USRROL_PK");

                    b.HasIndex(new[] { "RoleId" }, "USRROL_ROLE_ID_IDX");

                    b.HasIndex(new[] { "UserId" }, "USRROL_USER_ID_IDX");

                    b.HasIndex(new[] { "UserId", "RoleId" }, "USRROL_USER_ROLE_TUC")
                        .IsUnique();

                    b.ToTable("PIMS_USER_ROLE");

                    b
                        .HasComment("Auto-sequenced unique key value");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Views.Property", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("AdministrativeArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Agency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("AssessedBuilding")
                        .HasColumnType("MONEY");

                    b.Property<DateTime?>("AssessedBuildingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("AssessedLand")
                        .HasColumnType("MONEY");

                    b.Property<DateTime?>("AssessedLandDate")
                        .HasColumnType("datetime2");

                    b.Property<Geometry>("Boundary")
                        .HasColumnType("geography");

                    b.Property<string>("BuildingConstructionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BuildingConstructionTypeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("BuildingFloorCount")
                        .HasColumnType("int");

                    b.Property<string>("BuildingOccupantType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BuildingOccupantTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("BuildingPredominateUse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BuildingPredominateUseId")
                        .HasColumnType("bigint");

                    b.Property<string>("BuildingTenancy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Classification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ClassificationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSensitive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisibleToOtherAgencies")
                        .HasColumnType("bit");

                    b.Property<float?>("LandArea")
                        .HasColumnType("real");

                    b.Property<string>("LandLegalDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LeaseExpiry")
                        .HasColumnType("datetime2");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<decimal?>("Market")
                        .HasColumnType("MONEY");

                    b.Property<int?>("MarketFiscalYear")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NetBook")
                        .HasColumnType("MONEY");

                    b.Property<int?>("NetBookFiscalYear")
                        .HasColumnType("int");

                    b.Property<string>("OccupantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PID")
                        .HasColumnType("int");

                    b.Property<int?>("PIN")
                        .HasColumnType("int");

                    b.Property<long?>("ParcelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Postal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PropertyTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("RentableArea")
                        .HasColumnType("real");

                    b.Property<long>("RowVersion")
                        .HasColumnType("bigint");

                    b.Property<string>("SubAgency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubAgencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("TransferLeaseOnSale")
                        .HasColumnType("bit");

                    b.Property<string>("Zoning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZoningPotential")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("PROPERTY_VW");
                });

            modelBuilder.Entity("Pims.Dal.Entities.AccessRequest", b =>
                {
                    b.HasOne("Pims.Dal.Entities.User", "User")
                        .WithMany("AccessRequests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("ACCRQT_USER_ID_IDX")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pims.Dal.Entities.AccessRequestAgency", b =>
                {
                    b.HasOne("Pims.Dal.Entities.AccessRequest", "AccessRequest")
                        .WithMany("AgenciesManyToMany")
                        .HasForeignKey("AccessRequestId")
                        .HasConstraintName("ACRQAG_ACCESS_REQUEST_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Agency", "Agency")
                        .WithMany("AccessRequestsManyToMany")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("ACRQAG_AGENCY_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccessRequest");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Pims.Dal.Entities.AccessRequestRole", b =>
                {
                    b.HasOne("Pims.Dal.Entities.AccessRequest", "AccessRequest")
                        .WithMany("RolesManyToMany")
                        .HasForeignKey("AccessRequestId")
                        .HasConstraintName("ACCRQR_ACCESS_REQUEST_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Role", "Role")
                        .WithMany("AccessRequestsManyToMany")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("ACCRQR_ROLE_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AccessRequest");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Address", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("ADDR_PROVINCE_ID_IDX")
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Agency", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Agency", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("AGNCY_PARENT_AGENCY_ID_IDX");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Building", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("BUILDG_ADDRESS_ID_IDX")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Agency", "Agency")
                        .WithMany("Buildings")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("BUILDG_AGENCY_ID_IDX");

                    b.HasOne("Pims.Dal.Entities.BuildingConstructionType", "BuildingConstructionType")
                        .WithMany()
                        .HasForeignKey("BuildingConstructionTypeId")
                        .HasConstraintName("BUILDG_BUILDING_CONSTRUCTION_TYPE_ID_IDX")
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.BuildingOccupantType", "BuildingOccupantType")
                        .WithMany()
                        .HasForeignKey("BuildingOccupantTypeId")
                        .HasConstraintName("BUILDG_BUILDING_OCCUPANT_TYPE_ID_IDX")
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.BuildingPredominateUse", "BuildingPredominateUse")
                        .WithMany()
                        .HasForeignKey("BuildingPredominateUseId")
                        .HasConstraintName("BUILDG_BUILDING_PREDOMINATE_USE_ID_IDX")
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.PropertyClassification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .HasConstraintName("BUILDG_PROPERTY_CLASSIFICATION_ID_IDX")
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .HasConstraintName("BUILDG_PROPERTY_TYPE_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Agency");

                    b.Navigation("BuildingConstructionType");

                    b.Navigation("BuildingOccupantType");

                    b.Navigation("BuildingPredominateUse");

                    b.Navigation("Classification");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("Pims.Dal.Entities.BuildingEvaluation", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Building", "Building")
                        .WithMany("Evaluations")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("BLDEVL_BUILDING_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Pims.Dal.Entities.BuildingFiscal", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Building", "Building")
                        .WithMany("Fiscals")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("BLDFSC_BUILDING_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Pims.Dal.Entities.NotificationQueue", b =>
                {
                    b.HasOne("Pims.Dal.Entities.NotificationTemplate", "Template")
                        .WithMany("Notifications")
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("NOTIFQ_NOTIFICATION_TEMPLATE_ID_IDX");

                    b.HasOne("Pims.Dal.Entities.Agency", "ToAgency")
                        .WithMany("Notifications")
                        .HasForeignKey("ToAgencyId")
                        .HasConstraintName("NOTIFQ_TO_AGENCY_ID_IDX");

                    b.Navigation("Template");

                    b.Navigation("ToAgency");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Parcel", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("PARCEL_ADDRESS_ID_IDX")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Agency", "Agency")
                        .WithMany("Parcels")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("PARCEL_AGENCY_ID_IDX");

                    b.HasOne("Pims.Dal.Entities.PropertyClassification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .HasConstraintName("PARCEL_PROPERTY_CLASSIFICATION_ID_IDX")
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .HasConstraintName("PARCEL_PROPERTY_TYPE_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Agency");

                    b.Navigation("Classification");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ParcelBuilding", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Building", "Building")
                        .WithMany("ParcelsManyToMany")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("PRCLBL_BUILDING_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Parcel", "Parcel")
                        .WithMany("BuildingsManyToMany")
                        .HasForeignKey("ParcelId")
                        .HasConstraintName("PRCLBL_PARCEL_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ParcelEvaluation", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Parcel", "Parcel")
                        .WithMany("Evaluations")
                        .HasForeignKey("ParcelId")
                        .HasConstraintName("PREVAL_PARCEL_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ParcelFiscal", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Parcel", "Parcel")
                        .WithMany("Fiscals")
                        .HasForeignKey("ParcelId")
                        .HasConstraintName("PRFSCL_PARCEL_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("Pims.Dal.Entities.ParcelParcel", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Parcel", "Parcel")
                        .WithMany("SubdivisionsManyToMany")
                        .HasForeignKey("ParcelId")
                        .HasConstraintName("PRCPRC_PARCEL_ID_IDX")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Parcel", "Subdivision")
                        .WithMany("ParcelsManyToMany")
                        .HasForeignKey("SubdivisionId")
                        .HasConstraintName("PRCPRC_SUBDIVISON_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Parcel");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("Pims.Dal.Entities.RoleClaim", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Claim", "Claim")
                        .WithMany("RolesManyToMany")
                        .HasForeignKey("ClaimId")
                        .HasConstraintName("ROLCLM_CLAIM_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.Role", "Role")
                        .WithMany("ClaimsManyToMany")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("ROLCLM_ROLE_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Pims.Dal.Entities.User", b =>
                {
                    b.HasOne("Pims.Dal.Entities.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .HasConstraintName("USER_USER_APPROVED_BY_ID_IDX");

                    b.Navigation("ApprovedBy");
                });

            modelBuilder.Entity("Pims.Dal.Entities.UserAgency", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Agency", "Agency")
                        .WithMany("UsersManyToMany")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("USRAGC_AGENCY_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.User", "User")
                        .WithMany("AgenciesManyToMany")
                        .HasForeignKey("UserId")
                        .HasConstraintName("USRAGC_USER_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pims.Dal.Entities.UserRole", b =>
                {
                    b.HasOne("Pims.Dal.Entities.Role", "Role")
                        .WithMany("UsersManyToMany")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("USRROL_ROLE_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Pims.Dal.Entities.User", "User")
                        .WithMany("RolesManyToMany")
                        .HasForeignKey("UserId")
                        .HasConstraintName("USRROL_USER_ID_IDX")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pims.Dal.Entities.AccessRequest", b =>
                {
                    b.Navigation("AgenciesManyToMany");

                    b.Navigation("RolesManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Agency", b =>
                {
                    b.Navigation("AccessRequestsManyToMany");

                    b.Navigation("Buildings");

                    b.Navigation("Children");

                    b.Navigation("Notifications");

                    b.Navigation("Parcels");

                    b.Navigation("UsersManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Building", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("Fiscals");

                    b.Navigation("ParcelsManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Claim", b =>
                {
                    b.Navigation("RolesManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.NotificationTemplate", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Parcel", b =>
                {
                    b.Navigation("BuildingsManyToMany");

                    b.Navigation("Evaluations");

                    b.Navigation("Fiscals");

                    b.Navigation("ParcelsManyToMany");

                    b.Navigation("SubdivisionsManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.Role", b =>
                {
                    b.Navigation("AccessRequestsManyToMany");

                    b.Navigation("ClaimsManyToMany");

                    b.Navigation("UsersManyToMany");
                });

            modelBuilder.Entity("Pims.Dal.Entities.User", b =>
                {
                    b.Navigation("AccessRequests");

                    b.Navigation("AgenciesManyToMany");

                    b.Navigation("RolesManyToMany");
                });
#pragma warning restore 612, 618
        }
    }
}
