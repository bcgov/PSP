/* 
 * Title Direct Search Services
 *
 * Title Direct Search Services
 *
 * OpenAPI spec version: 4.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Runtime.Serialization;


namespace Pims.Ltsa.Models
{
    /// <summary>
    /// Altos1LegalNotationCorrection
    /// </summary>
    [DataContract]
    public partial class Altos1LegalNotationCorrection
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Altos1LegalNotationCorrection" /> class.
        /// </summary>
        /// <param name="number">Correction number (required).</param>
        /// <param name="referenceDescription">Free text (required).</param>
        /// <param name="enteredDate">Entered date and time (required).</param>
        /// <param name="correctionDate">Correction date and time (required).</param>
        /// <param name="previousCorrectionNumber">Previous correction number.</param>
        /// <param name="correctionText">Charge correction text (required).</param>
        public Altos1LegalNotationCorrection(string number = default, string referenceDescription = default, DateTime? enteredDate = default, DateTime? correctionDate = default, string previousCorrectionNumber = default, string correctionText = default)
        {
            // to ensure "number" is required (not null)
            if (number == null)
            {
                throw new InvalidDataException("number is a required property for Altos1LegalNotationCorrection and cannot be null");
            }
            else
            {
                this.Number = number;
            }
            // to ensure "referenceDescription" is required (not null)
            if (referenceDescription == null)
            {
                throw new InvalidDataException("referenceDescription is a required property for Altos1LegalNotationCorrection and cannot be null");
            }
            else
            {
                this.ReferenceDescription = referenceDescription;
            }
            // to ensure "enteredDate" is required (not null)
            if (enteredDate == null)
            {
                throw new InvalidDataException("enteredDate is a required property for Altos1LegalNotationCorrection and cannot be null");
            }
            else
            {
                this.EnteredDate = enteredDate;
            }
            // to ensure "correctionDate" is required (not null)
            if (correctionDate == null)
            {
                throw new InvalidDataException("correctionDate is a required property for Altos1LegalNotationCorrection and cannot be null");
            }
            else
            {
                this.CorrectionDate = correctionDate;
            }
            // to ensure "correctionText" is required (not null)
            if (correctionText == null)
            {
                throw new InvalidDataException("correctionText is a required property for Altos1LegalNotationCorrection and cannot be null");
            }
            else
            {
                this.CorrectionText = correctionText;
            }
            this.PreviousCorrectionNumber = previousCorrectionNumber;
        }

        /// <summary>
        /// Correction number
        /// </summary>
        /// <value>Correction number</value>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Free text
        /// </summary>
        /// <value>Free text</value>
        [DataMember(Name = "referenceDescription", EmitDefaultValue = false)]
        public string ReferenceDescription { get; set; }

        /// <summary>
        /// Entered date and time
        /// </summary>
        /// <value>Entered date and time</value>
        [DataMember(Name = "enteredDate", EmitDefaultValue = false)]
        public DateTime? EnteredDate { get; set; }

        /// <summary>
        /// Correction date and time
        /// </summary>
        /// <value>Correction date and time</value>
        [DataMember(Name = "correctionDate", EmitDefaultValue = false)]
        public DateTime? CorrectionDate { get; set; }

        /// <summary>
        /// Previous correction number
        /// </summary>
        /// <value>Previous correction number</value>
        [DataMember(Name = "previousCorrectionNumber", EmitDefaultValue = false)]
        public string PreviousCorrectionNumber { get; set; }

        /// <summary>
        /// Charge correction text
        /// </summary>
        /// <value>Charge correction text</value>
        [DataMember(Name = "correctionText", EmitDefaultValue = false)]
        public string CorrectionText { get; set; }
    }
}
