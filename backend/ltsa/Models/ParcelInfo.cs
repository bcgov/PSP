/* 
 * Title Direct Search Services
 *
 * Title Direct Search Services
 *
 * OpenAPI spec version: 4.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;


namespace Pims.Ltsa.Models
{
    /// <summary>
    /// ParcelInfo
    /// </summary>
    [DataContract]
    public partial class ParcelInfo : IFieldedData
    {
        /// <summary>
        /// Indicates the state with respect to Parcel lifecycle.
        /// </summary>
        /// <value>Indicates the state with respect to Parcel lifecycle.</value>
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,
            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2
        }
        /// <summary>
        /// Indicates the state with respect to Parcel lifecycle.
        /// </summary>
        /// <value>Indicates the state with respect to Parcel lifecycle.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelInfo" /> class.
        /// </summary>
        /// <param name="parcelIdentifier">The unique 9 character identifier for a parcel of land in the province of British Columbia. Each character is a digit in the range 0-9. (required).</param>
        /// <param name="status">Indicates the state with respect to Parcel lifecycle. (required).</param>
        /// <param name="registeredTitlesCount">Count of registered titles on parcel (required).</param>
        /// <param name="pendingApplicationCount">Count of pending applications (required).</param>
        /// <param name="miscellaneousNotes">Miscellaneous Note (required).</param>
        /// <param name="tombstone">tombstone.</param>
        /// <param name="legalDescription">legalDescription (required).</param>
        /// <param name="associatedPlans">associatedPlans.</param>
        public ParcelInfo(string parcelIdentifier = default, StatusEnum status = default, int? registeredTitlesCount = default, int? pendingApplicationCount = default, string miscellaneousNotes = default, ParcelTombstone tombstone = default, LegalDescription legalDescription = default, List<AssociatedPlan> associatedPlans = default)
        {
            // to ensure "parcelIdentifier" is required (not null)
            if (parcelIdentifier == null)
            {
                throw new InvalidDataException("parcelIdentifier is a required property for ParcelInfo and cannot be null");
            }
            else
            {
                this.ParcelIdentifier = parcelIdentifier;
            }
            // to ensure "registeredTitlesCount" is required (not null)
            if (registeredTitlesCount == null)
            {
                throw new InvalidDataException("registeredTitlesCount is a required property for ParcelInfo and cannot be null");
            }
            else
            {
                this.RegisteredTitlesCount = registeredTitlesCount;
            }
            // to ensure "pendingApplicationCount" is required (not null)
            if (pendingApplicationCount == null)
            {
                throw new InvalidDataException("pendingApplicationCount is a required property for ParcelInfo and cannot be null");
            }
            else
            {
                this.PendingApplicationCount = pendingApplicationCount;
            }
            // to ensure "legalDescription" is required (not null)
            if (legalDescription == null)
            {
                throw new InvalidDataException("legalDescription is a required property for ParcelInfo and cannot be null");
            }
            else
            {
                this.LegalDescription = legalDescription;
            }
            this.Status = status;
            this.Tombstone = tombstone;
            this.AssociatedPlans = associatedPlans;
            this.MiscellaneousNotes = miscellaneousNotes;
        }

        /// <summary>
        /// The unique 9 character identifier for a parcel of land in the province of British Columbia. Each character is a digit in the range 0-9.
        /// </summary>
        /// <value>The unique 9 character identifier for a parcel of land in the province of British Columbia. Each character is a digit in the range 0-9.</value>
        [DataMember(Name = "parcelIdentifier", EmitDefaultValue = false)]
        public string ParcelIdentifier { get; set; }


        /// <summary>
        /// Count of registered titles on parcel
        /// </summary>
        /// <value>Count of registered titles on parcel</value>
        [DataMember(Name = "registeredTitlesCount", EmitDefaultValue = false)]
        public int? RegisteredTitlesCount { get; set; }

        /// <summary>
        /// Count of pending applications
        /// </summary>
        /// <value>Count of pending applications</value>
        [DataMember(Name = "pendingApplicationCount", EmitDefaultValue = false)]
        public int? PendingApplicationCount { get; set; }

        /// <summary>
        /// Miscellaneous Note
        /// </summary>
        /// <value>Miscellaneous Note</value>
        [DataMember(Name = "miscellaneousNotes", EmitDefaultValue = false)]
        public string MiscellaneousNotes { get; set; }

        /// <summary>
        /// Gets or Sets Tombstone
        /// </summary>
        [DataMember(Name = "tombstone", EmitDefaultValue = false)]
        public ParcelTombstone Tombstone { get; set; }

        /// <summary>
        /// Gets or Sets LegalDescription
        /// </summary>
        [DataMember(Name = "legalDescription", EmitDefaultValue = false)]
        public LegalDescription LegalDescription { get; set; }

        /// <summary>
        /// Gets or Sets AssociatedPlans
        /// </summary>
        [DataMember(Name = "associatedPlans", EmitDefaultValue = false)]
        public List<AssociatedPlan> AssociatedPlans { get; set; }
    }
}
