/* 
 * Title Direct Search Services
 *
 * Title Direct Search Services
 *
 * OpenAPI spec version: 4.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization;


namespace Pims.Ltsa.Models
{
    /// <summary>
    /// LegalNotation
    /// </summary>
    [DataContract]
    public partial class LegalNotation
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LegalNotation" /> class.
        /// </summary>
        /// <param name="applicationReceivedDate">The Received Date of the Application that raised the Legal Notation. It is synonymous with the Registration Date/Time and comes from the Originating Document where is recorded as Document Acceptance Date/Time..</param>
        /// <param name="originalLegalNotationNumber">When present, this is the legal notation being modified or cancelled by the current legal notation. Modifications appear on current and historical titles. Both Modification and Cancellation add Legal Notation text to Title. Cancellation text (and the text of the original Legal Notation) are only seen on the historical title, not the current title..</param>
        /// <param name="planIdentifier">Legal Notation Plan Identifier, where one exists..</param>
        /// <param name="legalNotationText">Legal Notation Text (required).</param>
        /// <param name="correctionsAltos1">correctionsAltos1.</param>
        /// <param name="corrections">corrections.</param>
        public LegalNotation(DateTime? applicationReceivedDate = default, string originalLegalNotationNumber = default, string planIdentifier = default, string legalNotationText = default, List<Altos1LegalNotationCorrection> correctionsAltos1 = default, List<LegalNotationCorrection> corrections = default)
        {
            // to ensure "legalNotationText" is required (not null)
            if (legalNotationText == null)
            {
                throw new InvalidDataException("legalNotationText is a required property for LegalNotation and cannot be null");
            }
            else
            {
                this.LegalNotationText = legalNotationText;
            }
            this.ApplicationReceivedDate = applicationReceivedDate;
            this.OriginalLegalNotationNumber = originalLegalNotationNumber;
            this.PlanIdentifier = planIdentifier;
            this.CorrectionsAltos1 = correctionsAltos1;
            this.Corrections = corrections;
        }

        /// <summary>
        /// The Received Date of the Application that raised the Legal Notation. It is synonymous with the Registration Date/Time and comes from the Originating Document where is recorded as Document Acceptance Date/Time.
        /// </summary>
        /// <value>The Received Date of the Application that raised the Legal Notation. It is synonymous with the Registration Date/Time and comes from the Originating Document where is recorded as Document Acceptance Date/Time.</value>
        [DataMember(Name = "applicationReceivedDate", EmitDefaultValue = false)]
        public DateTime? ApplicationReceivedDate { get; set; }

        /// <summary>
        /// When present, this is the legal notation being modified or cancelled by the current legal notation. Modifications appear on current and historical titles. Both Modification and Cancellation add Legal Notation text to Title. Cancellation text (and the text of the original Legal Notation) are only seen on the historical title, not the current title.
        /// </summary>
        /// <value>When present, this is the legal notation being modified or cancelled by the current legal notation. Modifications appear on current and historical titles. Both Modification and Cancellation add Legal Notation text to Title. Cancellation text (and the text of the original Legal Notation) are only seen on the historical title, not the current title.</value>
        [DataMember(Name = "originalLegalNotationNumber", EmitDefaultValue = false)]
        public string OriginalLegalNotationNumber { get; set; }

        /// <summary>
        /// Legal Notation Plan Identifier, where one exists.
        /// </summary>
        /// <value>Legal Notation Plan Identifier, where one exists.</value>
        [DataMember(Name = "planIdentifier", EmitDefaultValue = false)]
        public string PlanIdentifier { get; set; }

        /// <summary>
        /// Legal Notation Text
        /// </summary>
        /// <value>Legal Notation Text</value>
        [DataMember(Name = "legalNotationText", EmitDefaultValue = false)]
        public string LegalNotationText { get; set; }

        /// <summary>
        /// Gets or Sets CorrectionsAltos1
        /// </summary>
        [DataMember(Name = "correctionsAltos1", EmitDefaultValue = false)]
        public List<Altos1LegalNotationCorrection> CorrectionsAltos1 { get; set; }

        /// <summary>
        /// Gets or Sets Corrections
        /// </summary>
        [DataMember(Name = "corrections", EmitDefaultValue = false)]
        public List<LegalNotationCorrection> Corrections { get; set; }
    }
}
