kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: nginx-runtime
parameters:
  - name: NAME
    displayName: Name
    description:
      The name assigned to all of the frontend objects defined in this template. You
      should keep this as default unless your know what your doing.
    required: true
    value: nginx-runtime
  - name: GIT_REPO_URL
    displayName: Git Repo URL
    description:
      The URL to your GIT repo, don't use the this default unless your just
      experimenting.
    required: true
    value: https://github.com/bcgov/PSP.git
  - name: GIT_REF
    displayName: Git Reference
    description: The git reference or branch.
    required: true
    value: dev
  - name: SOURCE_CONTEXT_DIR
    displayName: Source Context Directory
    description: The source context directory.
    required: true
    value: openshift/s2i/nginx-runtime/
  - name: OUTPUT_IMAGE_TAG
    displayName: Output Image Tag
    description: The tag given to the built image.
    required: true
    value: dev
  - name: NGINXBASE_IMAGE
    displayName: NGINX Base Image Name
    description: The nginx base image [e.g nginx-base].
    required: true
    value: nginx-base
  - name: NGINXBASE_TAG
    displayName: NGINX Base Tag
    description: The tag of the nginx base image [e.g "mainline" or "latest"].
    required: true
    value: mainline
  - name: PROJECT_NAMESPACE
    displayName: "OpenShift Project Namespace"
    description: "The namespace of the OpenShift project containing the application."
    required: true
    value: "3cd915"
  - name: ENV_NAME
    displayName: "Environment name"
    description: "The name for this environment [dev, test, prod, tools]"
    required: true
    value: "tools"
objects:
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${NAME}.${GIT_REF}
      labels:
        app: ${NAME}
        ci_cd: "true"
    spec:
      runPolicy: Parallel
      source:
        type: Git
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO_URL}
        contextDir: ${SOURCE_CONTEXT_DIR}
      strategy:
        type: Docker
        dockerStrategy:
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${NGINXBASE_IMAGE}:${NGINXBASE_TAG}
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}:${OUTPUT_IMAGE_TAG}
      resources: {}
      postCommit: {}
