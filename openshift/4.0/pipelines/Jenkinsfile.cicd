#!groovy

// ------------------
// Pipeline Variables
// ------------------
def commonPipeline
def notify

def FE_COV_STASH = 'fe-test-coverage'
def API_COV_STASH = 'api-test-coverage'
def RELEASE_VERSION = ''

// --------------------
// Declarative Pipeline
// --------------------

pipeline {
  agent any
    environment {
    CI = 'true'

    // The name of the project namespace(s).
    NAME_SPACE = '3cd915'

    // This should match your monorepo folder structure
    API_DIRECTORY = 'backend'
    FRONTEND_DIRECTORY = 'frontend'
    MAINTENANCE_DIRECTORY = 'maintenance'
    DEVOPS_DIRECTORY = 'openshift/4.0'

    // Rocket.Chat Configuration
    ROCKET_CHAT_SECRET = 'rocket-chat-secrets'
    ROCKET_CHAT_WEBHOOK_KEY = 'rocket-deploy-webhook'

    // MS Teams Configuration
    MS_TEAMS_SECRET = 'ms-teams-secrets'
    MS_TEAMS_WEBHOOK_KEY = 'notification-webhook'

    // Environment Variables that should be set in OpenShift
    // -----------------------------------------------------
    // The job identifier (i.e 'pr-5' OR 'dev' OR 'master')
    // OC_JOB_NAME = "dev"

    // Which environment to deploy to ('dev' OR 'test' OR 'prod').
    // DESTINATION = "dev"

    // The URI to the application being deployed.
    // VANITY_URL="https://pims-app-3cd915-dev.apps.silver.devops.gov.bc.ca/"

    // To force asking for a release version before running the pipeline, set to "true"
    // ENABLE_VERSION_PROMPT = "false"

    ENABLE_VERSION_PROMPT = sh(script: 'echo "${ENABLE_VERSION_PROMPT:-false}"', returnStdout: true).trim()
    OC_JOB_NAME = sh(script: 'echo "${OC_JOB_NAME:-dev}"', returnStdout: true).trim()
    APP_NAME = sh(script: 'echo "${APP_NAME:-pims}"', returnStdout: true).trim()
    DESTINATION = sh(script: 'echo "${DESTINATION:-dev}"', returnStdout: true).trim()
    VANITY_URL = sh(script: 'echo "${VANITY_URL:-https://pims-app-3cd915-dev.apps.silver.devops.gov.bc.ca/}"', returnStdout: true).trim()

    // To force manual approval before each CI/CD run set this to "true". By default CI/CD runs without approval.
    // This is useful for UAT deployments where manual approval is required.
    APPROVAL_REQUIRED = sh(script: 'echo "${APPROVAL_REQUIRED:-false}"', returnStdout: true).trim()

    // These two parameters allow the deployment of multiple "instances" to a single namespace
    // E.g. to deploy a "test" instance to the DEV namespace in OpenShift:
    //      INSTANCE = "-test" (or "-01", etc)
    //      NAMESPACE_OVERRIDE = "3cd915-dev"
    INSTANCE = sh(script: 'echo "${INSTANCE:-}"', returnStdout: true).trim()
    NAMESPACE_OVERRIDE = sh(script: 'echo "${NAMESPACE_OVERRIDE:-}"', returnStdout: true).trim()

    // To enable pipeline verbose debug output set to "true"
    DEBUG_OUTPUT = sh(script: 'echo "${DEBUG_OUTPUT:-false}"', returnStdout: true).trim()
  }

  options {
    disableResume()
	disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '5')) // keep 5 builds only
        office365ConnectorWebhooks([
      [
        startNotification: true //send notification on job start
      ]
    ])
  }


  stages {
    stage('Initialize') {
      steps {
        script {
          // load supporting functions from external script files
          commonPipeline = load "${DEVOPS_DIRECTORY}/pipelines/scripts/common.groovy"
          notify = load "${DEVOPS_DIRECTORY}/pipelines/scripts/notify-teams.groovy"

          // Cancel any running builds in progress
          timeout(time: 10, unit: 'MINUTES') {
            echo 'Cancelling previous builds in progress...'
            commonPipeline.abortAllPreviousBuildsInProgress(currentBuild)
          }

          // ensure required secrets and credentials are available in the CI environment
          // [add more secrets here if needed...]
          // env.ROCKET_DEPLOY_WEBHOOK = sh(script: "oc extract --to=- --keys=${ROCKET_CHAT_WEBHOOK_KEY} secret/${ROCKET_CHAT_SECRET} 2>&1 | sed -n 2p", returnStdout: true).trim()
          env.NOTIFICATION_WEBHOOK_URL = sh(script: "oc extract --to=- --keys=${MS_TEAMS_WEBHOOK_KEY} secret/${MS_TEAMS_SECRET} 2>&1 | sed -n 2p", returnStdout: true).trim()

          // initialize CI environment values
          env.CHANGELOG = commonPipeline.getChangeLog()

          //get branch and triggered by name
          BUILD_TRIGGER_BY = "${currentBuild.getBuildCauses()[0].shortDescription}"
          env.BRANCH_NAME = "${env.GIT_BRANCH.replaceFirst(/^.*\//, '')}"

          // whether Build and Deploy stage should be skipped
          def api_changes = commonPipeline.hasDirectoryChanged('backend').toString()
          def fe_changes = commonPipeline.hasDirectoryChanged('frontend').toString()

          if (api_changes.equalsIgnoreCase('false') && fe_changes.equalsIgnoreCase('false')) {
            env.SKIP_BUILD = 'false'
          } else {
            env.SKIP_BUILD = 'false'
          }

          if (new Boolean(DEBUG_OUTPUT)) {
            // Force OpenShift Plugin directives to be verbose
            openshift.logLevel(1)

            // Print all environment variables
            echo 'DEBUG - All pipeline environment variables:'
            echo sh(returnStdout: true, script: 'env')
          }
        }
      }
    }
  stage('Release Version') {
      steps {
        script {
          if (env.BRANCH_NAME  != 'dev') {
            version = sh(
              returnStdout: true,
              script: 'git describe --tags `git rev-list --tags --max-count=1`'
            ).trim()
            if (version != ''){
              RELEASE_VERSION = version  + "-" + OC_JOB_NAME //release version convention e.g Release-OC_JOB_NAME pims-api:v0.2.0.7.3-test or pims-api:v0.2.0.7.3-master
            }
            else{
              error('***  No release version found. Aborting pipeline.  ***') //abort build if no release version is found for test, uat and prod
            }

          } else {
            RELEASE_VERSION = 'latest-dev' //dev will use latest as there's no release version for developement
          }
          
        }
      }
    }

    //Test stage is perform using github action
    stage('Build') {
      when {
        expression { new Boolean(env.SKIP_BUILD) == false }
      }
      options { timeout(time: 25, unit: 'MINUTES') }
      failFast true
      parallel {
        stage('Build Frontend') {
          steps {
            script {
              dir(DEVOPS_DIRECTORY) {
                sh "OC_JOB_NAME=${OC_JOB_NAME} ./player.sh build app-base -apply"
                sh "OC_JOB_NAME=${OC_JOB_NAME} ./player.sh build app -apply"
              }
            }
          }
        }
        stage('Build Backend') {
          steps {
            dir(DEVOPS_DIRECTORY) {
              sh "OC_JOB_NAME=${OC_JOB_NAME} ./player.sh build api -apply"
            }
          }
        }
      }
    }

    stage('Quality Gate') {
      when {
        expression { false } // skip this stage (for now)
      }
      options {
        timeout(time: 5, unit: 'MINUTES')
      }
      steps {
        //  TODO: Break the build if Quality Gate failed
        echo '...'
      }
    }
    stage('Approve Deployment') {
      when {
        beforeInput true
         expression { 
             DESTINATION == 'uat' //only ask for approval for UAT and PROD DESTINATION
             }
      }
      steps {
        script {
          timeout(time: 20, unit: 'MINUTES') {
            def val = input(message: "Deploy Release version $RELEASE_VERSION to $DESTINATION?" , ok: 'Yes, go ahead')
            echo "${RELEASE_VERSION} has been approved for deployment. Proceeding..."
          }

        }
      }
    }
    stage('Deploy') {
      when {
        expression { new Boolean(env.SKIP_BUILD) == false }
      }
      options { timeout(time: 30, unit: 'MINUTES') }
      steps {
        script {
          def img_backend = "${APP_NAME}-api"
          def img_frontend = "${APP_NAME}-app"
          def img_tag = "latest-${DESTINATION}" // image tag on build config is based on environment, e.g. latest-dev, latest-test, latest-uat

          // tag release version (if found)
          if (RELEASE_VERSION != '') {
            echo "Tagging images - ${img_backend}:latest-env, ${img_frontend}:latest-env"
            sh "oc tag ${img_backend}:${img_tag} ${img_backend}:${RELEASE_VERSION}"
            sh "oc tag ${img_frontend}:${img_tag} ${img_frontend}:${RELEASE_VERSION}"
          } else {
            RELEASE_VERSION="${img_tag}"
          }

          dir(DEVOPS_DIRECTORY) {
            sh """
              RELEASE_TAG=${RELEASE_VERSION}
              INSTANCE=\${INSTANCE:-}
              NAMESPACE_OVERRIDE=\${NAMESPACE_OVERRIDE:-}

              ./player.sh deploy api ${DESTINATION} -apply
              ./player.sh deploy app ${DESTINATION} -apply
            """
          }
        }
      }
    }
  } // stages
  post {
    success {
      script {
        if (new Boolean(env.SKIP_BUILD) == false) {
		  def upperDestination = "${DESTINATION}".toString().toUpperCase()
          office365ConnectorSend webhookUrl: "${env.NOTIFICATION_WEBHOOK_URL}",
          message: "Application has been [deployed to ${upperDestination}](${VANITY_URL})",
          status: 'Success',
          color: '#00FF00', //green
          factDefinitions: [
            [name: "Release version", template: "${RELEASE_VERSION}"],
            [name: "Remarks", template: "${BUILD_TRIGGER_BY}"]
          ]
        }
      }
    }
    failure {
      script {
          office365ConnectorSend webhookUrl: "${env.NOTIFICATION_WEBHOOK_URL}",
          factDefinitions: [
            [name: "Release version", template: "${RELEASE_VERSION}"]
          ]
      }
    }
  } // post-stages
} // pipeline
