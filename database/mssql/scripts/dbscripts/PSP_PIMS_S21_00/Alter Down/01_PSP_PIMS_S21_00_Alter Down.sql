-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Fri Feb 11 14:05:27 PST 2022
-- Execute this script on:
-- 		PIMS_21_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PIMS_20_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ORG_ORGANIZATION_TYPE_CODE_IDX
PRINT N'Drop index dbo.ORG_ORGANIZATION_TYPE_CODE_IDX'
GO
DROP INDEX [dbo].[PIMS_ORGANIZATION].[ORG_ORGANIZATION_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ORG_ORG_IDENTIFIER_TYPE_CODE_IDX
PRINT N'Drop index dbo.ORG_ORG_IDENTIFIER_TYPE_CODE_IDX'
GO
DROP INDEX [dbo].[PIMS_ORGANIZATION].[ORG_ORG_IDENTIFIER_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SDRTRN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_SDRTRN_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_SDRTRN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SDRTRN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_SDRTRN_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_SDRTRN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SDRTRN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_SDRTRN_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_SDRTRN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.SCDPRH_ONE_HOLDER_ONLY_TCC
PRINT N'Drop check constraint dbo.SCDPRH_ONE_HOLDER_ONLY_TCC'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	DROP CONSTRAINT [SCDPRH_ONE_HOLDER_ONLY_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_CONTACT_MGR_VW
PRINT N'Drop view dbo.PIMS_CONTACT_MGR_VW'
GO
DROP VIEW [dbo].[PIMS_CONTACT_MGR_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PERSON_CONTACT_VW
PRINT N'Drop view dbo.PIMS_PERSON_CONTACT_VW'
GO
DROP VIEW [dbo].[PIMS_PERSON_CONTACT_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.SCDPHL_ONE_HOLDER_ONLY_TCC
PRINT N'Drop check constraint dbo.SCDPHL_ONE_HOLDER_ONLY_TCC'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	DROP CONSTRAINT [SCDPHL_ONE_HOLDER_ONLY_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
DROP VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_SECURITY_DEPOSIT_RETURN
PRINT N'Alter table dbo.PIMS_SECURITY_DEPOSIT_RETURN'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN] ALTER COLUMN [SECURITY_DEPOSIT_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
	ADD [LEASE_ID] bigint NOT NULL, 
	[SECURITY_DEPOSIT_TYPE_CODE] nvarchar(20) NOT NULL, 
	[PAYEE_NAME] nvarchar(100) NOT NULL, 
	[PAYEE_ADDRESS] nvarchar(500) NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of cheque recipient' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'PAYEE_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Address of cheque recipient' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'PAYEE_ADDRESS'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_SECURITY_DEPOSIT_RETURN_HIST
PRINT N'Alter table dbo.PIMS_SECURITY_DEPOSIT_RETURN_HIST'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HIST] ALTER COLUMN [SECURITY_DEPOSIT_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HIST]
	ADD [LEASE_ID] bigint NOT NULL, 
	[SECURITY_DEPOSIT_TYPE_CODE] nvarchar(20) NOT NULL, 
	[PAYEE_NAME] nvarchar(100) NOT NULL, 
	[PAYEE_ADDRESS] nvarchar(500) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ORGANIZATION
PRINT N'Alter table dbo.PIMS_ORGANIZATION'
GO
ALTER TABLE [dbo].[PIMS_ORGANIZATION] ALTER COLUMN [ORGANIZATION_TYPE_CODE] nvarchar(20) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ORGANIZATION] ALTER COLUMN [ORG_IDENTIFIER_TYPE_CODE] nvarchar(20) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Create view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , PROP.PROPERTY_CLASSIFICATION_TYPE_CODE
     , PROP.PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.NAME
     , PROP.DESCRIPTION
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.ENCUMBRANCE_REASON
     , PROP.IS_SENSITIVE
     , PROP.IS_OWNED
     , PROP.IS_PROPERTY_OF_INTEREST
     , PROP.IS_VISIBLE_TO_OTHER_AGENCIES
     , PROP.ZONING,ZONING_POTENTIAL
FROM   PIMS_PROPERTY       PROP                                                    INNER JOIN
       PIMS_ADDRESS        ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        INNER JOIN
       PIMS_PROVINCE_STATE PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID INNER JOIN
       PIMS_COUNTRY        CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
WHERE  PROP.BOUNDARY IS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PERSON_CONTACT_VW
PRINT N'Create view dbo.PIMS_PERSON_CONTACT_VW'
GO
CREATE VIEW [dbo].[PIMS_PERSON_CONTACT_VW] AS
SELECT DISTINCT PERSON_ID
     , (SELECT CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'FAX'
           AND PERSON_ID = TMP.PERSON_ID) AS FAX
     , (SELECT CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'PERSMOBIL'
           AND PERSON_ID = TMP.PERSON_ID) AS PERSONAL_MOBILE
     , (SELECT CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'PERSPHONE'
           AND PERSON_ID = TMP.PERSON_ID) AS PERSONAL_PHONE
     , (SELECT CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'WORKMOBIL'
           AND PERSON_ID = TMP.PERSON_ID) AS WORK_MOBILE
     , (SELECT CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'WORKPHONE'
           AND PERSON_ID = TMP.PERSON_ID) AS WORK_PHONE
     , (SELECT CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'WORKEMAIL'
           AND PERSON_ID = TMP.PERSON_ID) AS WORK_EMAIL
     , (SELECT CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'PERSEMAIL'
           AND PERSON_ID = TMP.PERSON_ID) AS PERSONAL_EMAIL
FROM   PIMS_CONTACT_METHOD TMP
WHERE  ORGANIZATION_ID IS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_CONTACT_MGR_VW
PRINT N'Create view dbo.PIMS_CONTACT_MGR_VW'
GO
CREATE VIEW [dbo].[PIMS_CONTACT_MGR_VW] AS
  SELECT CONCAT('P', PER.PERSON_ID)                                          AS ID
       , PER.PERSON_ID
       , NULL                                                                AS ORGANIZATION_ID
       , PER.IS_DISABLED
       , TRIM(CONCAT_WS(' ', PER.FIRST_NAME, PER.MIDDLE_NAMES, PER.SURNAME)) AS SUMMARY
       , PER.SURNAME
       , PER.FIRST_NAME
       , PER.MIDDLE_NAMES
       , NULL                                                                AS ORGANIZATION_NAME
       , PAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1                                                AS MAILING_ADDRESS
       , ADR.MUNICIPALITY_NAME
       , PRV.PROVINCE_STATE_CODE                                             AS PROVINCE_STATE
       , COALESCE(PVW.WORK_EMAIL, PVW.PERSONAL_EMAIL)                        AS EMAIL_ADDRESS
  FROM   PIMS_PERSON            PER                                                         LEFT JOIN
         PIMS_PERSON_ADDRESS    PAD ON PAD.PERSON_ID                = PER.PERSON_ID   
                                   AND PAD.ADDRESS_USAGE_TYPE_CODE  = 'MAILING'             LEFT JOIN
         PIMS_ADDRESS           ADR ON ADR.ADDRESS_ID               = PAD.ADDRESS_ID        LEFT JOIN 
         PIMS_PROVINCE_STATE    PRV ON PRV.PROVINCE_STATE_ID        = ADR.PROVINCE_STATE_ID LEFT JOIN
         PIMS_PERSON_CONTACT_VW PVW ON PVW.PERSON_ID                = PER.PERSON_ID
  UNION
  SELECT CONCAT('O', ORG.ORGANIZATION_ID)
       , NULL
       , ORG.ORGANIZATION_ID
       , ORG.IS_DISABLED
       , ORG.ORGANIZATION_NAME
       , NULL
       , NULL
       , NULL                                                        
       , ORG.ORGANIZATION_NAME
       , OAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1
       , ADR.MUNICIPALITY_NAME                     
       , PRV.PROVINCE_STATE_CODE
       , CON.CONTACT_METHOD_VALUE 
  FROM   PIMS_ORGANIZATION         ORG                                                         LEFT JOIN 
         PIMS_ORGANIZATION_ADDRESS OAD ON OAD.ORGANIZATION_ID          = ORG.ORGANIZATION_ID
                                      AND OAD.ADDRESS_USAGE_TYPE_CODE  = 'MAILING'             LEFT JOIN
         PIMS_ADDRESS              ADR ON ADR.ADDRESS_ID               = OAD.ADDRESS_ID        LEFT JOIN 
         PIMS_PROVINCE_STATE       PRV ON PRV.PROVINCE_STATE_ID        = ADR.PROVINCE_STATE_ID LEFT JOIN
         PIMS_CONTACT_METHOD       CON ON CON.ORGANIZATION_ID          = ORG.ORGANIZATION_ID
                                      AND CON.CONTACT_METHOD_TYPE_CODE = 'WORKEMAIL'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ORGANIZATION_HIST
PRINT N'Alter table dbo.PIMS_ORGANIZATION_HIST'
GO
ALTER TABLE [dbo].[PIMS_ORGANIZATION_HIST] ALTER COLUMN [ORGANIZATION_TYPE_CODE] nvarchar(20) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ORGANIZATION_HIST] ALTER COLUMN [ORG_IDENTIFIER_TYPE_CODE] nvarchar(20) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.SDRTRN_LEASE_ID_IDX
PRINT N'Create index dbo.SDRTRN_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [SDRTRN_LEASE_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.SDRTRN_SECURITY_DEPOSIT_TYPE_CODE_IDX
PRINT N'Create index dbo.SDRTRN_SECURITY_DEPOSIT_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [SDRTRN_SECURITY_DEPOSIT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]([SECURITY_DEPOSIT_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SDRTRN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_SDRTRN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SDRTRN_A_S_IUD_TR] ON PIMS_SECURITY_DEPOSIT_RETURN FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_RETURN_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_RETURN_ID in (select SECURITY_DEPOSIT_RETURN_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_RETURN_HIST ([SECURITY_DEPOSIT_RETURN_ID], [LEASE_ID], [SECURITY_DEPOSIT_TYPE_CODE], [SECURITY_DEPOSIT_ID], [TERMINATION_DATE], [CLAIMS_AGAINST], [RETURN_AMOUNT], [RETURN_DATE], [PAYEE_NAME], [PAYEE_ADDRESS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_RETURN_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_RETURN_ID], [LEASE_ID], [SECURITY_DEPOSIT_TYPE_CODE], [SECURITY_DEPOSIT_ID], [TERMINATION_DATE], [CLAIMS_AGAINST], [RETURN_AMOUNT], [RETURN_DATE], [PAYEE_NAME], [PAYEE_ADDRESS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_H_ID_SEQ]) as [_SECURITY_DEPOSIT_RETURN_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SDRTRN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_SDRTRN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SDRTRN_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT_RETURN INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_RETURN_ID = deleted.SECURITY_DEPOSIT_RETURN_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT_RETURN
    set "SECURITY_DEPOSIT_RETURN_ID" = inserted."SECURITY_DEPOSIT_RETURN_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE" = inserted."SECURITY_DEPOSIT_TYPE_CODE",
      "SECURITY_DEPOSIT_ID" = inserted."SECURITY_DEPOSIT_ID",
      "TERMINATION_DATE" = inserted."TERMINATION_DATE",
      "CLAIMS_AGAINST" = inserted."CLAIMS_AGAINST",
      "RETURN_AMOUNT" = inserted."RETURN_AMOUNT",
      "RETURN_DATE" = inserted."RETURN_DATE",
      "PAYEE_NAME" = inserted."PAYEE_NAME",
      "PAYEE_ADDRESS" = inserted."PAYEE_ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_RETURN
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_RETURN.SECURITY_DEPOSIT_RETURN_ID = inserted.SECURITY_DEPOSIT_RETURN_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SDRTRN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_SDRTRN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SDRTRN_I_S_I_TR] ON PIMS_SECURITY_DEPOSIT_RETURN INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT_RETURN ("SECURITY_DEPOSIT_RETURN_ID",
      "LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE",
      "SECURITY_DEPOSIT_ID",
      "TERMINATION_DATE",
      "CLAIMS_AGAINST",
      "RETURN_AMOUNT",
      "RETURN_DATE",
      "PAYEE_NAME",
      "PAYEE_ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_RETURN_ID",
      "LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE",
      "SECURITY_DEPOSIT_ID",
      "TERMINATION_DATE",
      "CLAIMS_AGAINST",
      "RETURN_AMOUNT",
      "RETURN_DATE",
      "PAYEE_NAME",
      "PAYEE_ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ORG_ORG_IDENTIFIER_TYPE_CODE_IDX
PRINT N'Create index dbo.ORG_ORG_IDENTIFIER_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ORG_ORG_IDENTIFIER_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ORGANIZATION]([ORG_IDENTIFIER_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ORG_ORGANIZATION_TYPE_CODE_IDX
PRINT N'Create index dbo.ORG_ORGANIZATION_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ORG_ORGANIZATION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_SECDPT_PIM_SDRTRN_FK
PRINT N'Create foreign key constraint dbo.PIM_SECDPT_PIM_SDRTRN_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
	ADD CONSTRAINT [PIM_SECDPT_PIM_SDRTRN_FK]
	FOREIGN KEY([SECURITY_DEPOSIT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_SECURITY_DEPOSIT_TYPE]([SECURITY_DEPOSIT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_SDRTRN_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_SDRTRN_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
	ADD CONSTRAINT [PIM_LEASE_PIM_SDRTRN_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
