/* ---------------------------------------------------------------------- */
/* Script generated with: DeZign for Databases 12.4.2                     */
/* Target DBMS:           MS SQL Server 2017                              */
/* Project file:          PIMS S09.02.dez                                 */
/* Project name:          MoTI Property Services Project                  */
/* Author:                Doug Filteau                                    */
/* Script type:           Database creation script                        */
/* Created on:            2021-10-05 16:35                                */
/* ---------------------------------------------------------------------- */

/* ---------------------------------------------------------------------- */
/* Add sequences                                                          */
/* ---------------------------------------------------------------------- */

CREATE SEQUENCE [dbo].[PIMS_TASK_TEMPLATE_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_USER_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_MODEL_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_USER_ORGANIZATION_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ADDRESS_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_USER_ROLE_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_CLAIM_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_WORKFLOW_MODEL_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_CONTACT_METHOD_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ORGANIZATION_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PERSON_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PERSON_ORGANIZATION_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROJECT_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROJECT_NOTE_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROJECT_PROPERTY_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROPERTY_EVALUATION_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROPERTY_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROPERTY_SERVICE_FILE_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ROLE_CLAIM_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ROLE_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_TASK_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ACCESS_REQUEST_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROJECT_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_TASK_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_MODEL_TASK_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_TASK_TEMPLATE_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_SERVICE_FILE_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_TASK_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_USER_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROJECT_PROPERTY_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_WORKFLOW_MODEL_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_USER_TASK_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ORGANIZATION_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PERSON_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PERSON_ORGANIZATION_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ACCESS_REQUEST_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROJECT_NOTE_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_MODEL_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ADDRESS_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_USER_ORGANIZATION_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ROLE_CLAIM_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ROLE_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_USER_ROLE_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_CLAIM_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROJECT_NUMBER_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_CONTACT_METHOD_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROJECT_ORGANIZATION_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ORGANIZATION_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_STRUCTURE_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_ASSET_EVALUATION_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROPERTY_EVALUATION_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROPERTY_STRUCTURE_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_BUILDING_CONSTRUCTION_TYPE_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_BUILDING_OCCUPANT_TYPE_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_BUILDING_PREDOMINATE_USE_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_BUILDING_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_BUILDING_EVALUATION_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_BUILDING_FISCAL_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


CREATE SEQUENCE [dbo].[PIMS_PROPERTY_SERVICE_FILE_ID_SEQ]
  AS bigint 
  START WITH 0
  INCREMENT BY 1 
  MINVALUE  0
  MAXVALUE  2147483647 
  NO CYCLE
  CACHE 50
GO


/* ---------------------------------------------------------------------- */
/* Add tables                                                             */
/* ---------------------------------------------------------------------- */

/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ACTIVITY_MODEL"                                    */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ACTIVITY_MODEL] (
    [ACTIVITY_MODEL_ID] BIGINT CONSTRAINT [ACTMDL_ACTIVITY_MODEL_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_ACTIVITY_MODEL_ID_SEQ] NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [ACTMDL_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [ACTMDL_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ACTMDL_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ACTMDL_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ACTMDL_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [ACTMDL_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ACTMDL_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [ACTMDL_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [ACTMDL_PK] PRIMARY KEY CLUSTERED ([ACTIVITY_MODEL_ID])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_WORKFLOW_MODEL_TYPE"                               */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_WORKFLOW_MODEL_TYPE] (
    [WORKFLOW_MODEL_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [WFLMDT_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [WFLMDT_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [WFLMDT_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [WFLMDT_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [WFLMDT_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [WFLMDT_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [WFLMDT_PK] PRIMARY KEY CLUSTERED ([WORKFLOW_MODEL_TYPE_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_TYPE"                                     */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_TYPE] (
    [PROPERTY_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [PRPTYP_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PRPTYP_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRPTYP_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PRPTYP_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRPTYP_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PRPTYP_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PRPTYP_PK] PRIMARY KEY CLUSTERED ([PROPERTY_TYPE_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_REGION"                                            */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_REGION] (
    [REGION_CODE] SMALLINT NOT NULL,
    [REGION_NAME] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [REGION_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [REGION_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [REGION_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [REGION_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [REGION_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [REGION_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [REGION_PK] PRIMARY KEY CLUSTERED ([REGION_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_COUNTRY"                                           */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_COUNTRY] (
    [COUNTRY_ID] SMALLINT NOT NULL,
    [COUNTRY_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [CNTRY_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [CNTRY_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [CNTRY_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [CNTRY_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [CNTRY_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [CNTRY_PK] PRIMARY KEY CLUSTERED ([COUNTRY_ID])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ADDRESS_USAGE_TYPE"                                */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ADDRESS_USAGE_TYPE] (
    [ADDRESS_USAGE_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [ADUSGT_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [ADUSGT_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ADUSGT_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [ADUSGT_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ADUSGT_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [ADUSGT_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [ADUSGT_PK] PRIMARY KEY CLUSTERED ([ADDRESS_USAGE_TYPE_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_CLAIM"                                             */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_CLAIM] (
    [CLAIM_ID] BIGINT CONSTRAINT [CLMTYP_CLAIM_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_CLAIM_ID_SEQ] NOT NULL,
    [CLAIM_UID] UNIQUEIDENTIFIER NOT NULL,
    [KEYCLOAK_ROLE_ID] UNIQUEIDENTIFIER,
    [NAME] NVARCHAR(100) NOT NULL,
    [DESCRIPTION] NVARCHAR(500) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [CLMTYP_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [CLMTYP_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [CLMTYP_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [CLMTYP_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [CLMTYP_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [CLMTYP_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [CLMTYP_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [CLMTYP_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [CLMTYP_PK] PRIMARY KEY CLUSTERED ([CLAIM_ID])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROJECT_TYPE"                                      */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROJECT_TYPE] (
    [PROJECT_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [PRJTYP_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PRJTYP_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRJTYP_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PRJTYP_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRJTYP_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PRJTYP_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PRJTYP_PK] PRIMARY KEY CLUSTERED ([PROJECT_TYPE_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_TASK_TEMPLATE_TYPE"                                */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_TASK_TEMPLATE_TYPE] (
    [TASK_TEMPLATE_TYPE_CODE] NVARCHAR(40) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [TSKTMT_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [TSKTMT_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [TSKTMT_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [TSKTMT_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [TSKTMT_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [TSKTMT_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [TSKTMT_PK] PRIMARY KEY CLUSTERED ([TASK_TEMPLATE_TYPE_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ORGANIZATION_TYPE"                                 */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ORGANIZATION_TYPE] (
    [ORGANIZATION_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [ORGTYP_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [ORGTYP_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ORGTYP_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [ORGTYP_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ORGTYP_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [ORGTYP_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [ORGTYP_PK] PRIMARY KEY CLUSTERED ([ORGANIZATION_TYPE_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ACCESS_REQUEST_STATUS_TYPE"                        */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ACCESS_REQUEST_STATUS_TYPE] (
    [ACCESS_REQUEST_STATUS_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [ARQSTT_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [ARQSTT_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ARQSTT_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [ARQSTT_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ARQSTT_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [ARQSTT_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [ARQSTT_PK] PRIMARY KEY CLUSTERED ([ACCESS_REQUEST_STATUS_TYPE_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROJECT_STATUS_TYPE"                               */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROJECT_STATUS_TYPE] (
    [PROJECT_STATUS_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [CODE_GROUP] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [TEXT] NVARCHAR(1000) NOT NULL,
    [IS_MILESTONE] BIT CONSTRAINT [PRJSTY_IS_MILESTONE_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [IS_TERMINAL] BIT CONSTRAINT [PRJSTY_IS_TERMINAL_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [PRJSTY_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PRJSTY_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRJSTY_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PRJSTY_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRJSTY_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PRJSTY_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PRJSTY_PK] PRIMARY KEY CLUSTERED ([PROJECT_STATUS_TYPE_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_SERVICE_FILE_TYPE"                        */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_SERVICE_FILE_TYPE] (
    [PROPERTY_SERVICE_FILE_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [PRSVFT_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PRSVFT_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRSVFT_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PRSVFT_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRSVFT_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PRSVFT_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PRSVFT_PK] PRIMARY KEY CLUSTERED ([PROPERTY_SERVICE_FILE_TYPE_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROJECT_RISK_TYPE"                                 */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROJECT_RISK_TYPE] (
    [PROJECT_RISK_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [PRJRSK_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PRJRSK_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRJRSK_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PRJRSK_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRJRSK_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PRJRSK_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PRJRSK_PK] PRIMARY KEY CLUSTERED ([PROJECT_RISK_TYPE_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROJECT_TIER_TYPE"                                 */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROJECT_TIER_TYPE] (
    [PROJECT_TIER_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [PROJTR_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PROJTR_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PROJTR_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PROJTR_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PROJTR_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PROJTR_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PROJTR_PK] PRIMARY KEY CLUSTERED ([PROJECT_TIER_TYPE_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ROLE"                                              */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ROLE] (
    [ROLE_ID] BIGINT CONSTRAINT [ROLE_ROLE_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_ROLE_ID_SEQ] NOT NULL,
    [ROLE_UID] UNIQUEIDENTIFIER NOT NULL,
    [KEYCLOAK_GROUP_ID] UNIQUEIDENTIFIER,
    [NAME] NVARCHAR(100) NOT NULL,
    [DESCRIPTION] NVARCHAR(500),
    [IS_PUBLIC] BIT CONSTRAINT [ROLE_IS_PUBLIC_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [ROLE_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [SORT_ORDER] INTEGER NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [ROLE_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ROLE_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ROLE_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ROLE_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [ROLE_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ROLE_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [ROLE_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [ROLE_PK] PRIMARY KEY CLUSTERED ([ROLE_ID])
)
GO


CREATE NONCLUSTERED INDEX [ROLE_ROLE_UID_IDX] ON [dbo].[PIMS_ROLE] ([ROLE_UID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_CLASSIFICATION_TYPE"                      */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_CLASSIFICATION_TYPE] (
    [PROPERTY_CLASSIFICATION_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [PRPCLT_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PRPCLT_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRPCLT_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PRPCLT_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRPCLT_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PRPCLT_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PRPCLT_PK] PRIMARY KEY CLUSTERED ([PROPERTY_CLASSIFICATION_TYPE_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_CONTACT_METHOD_TYPE"                               */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_CONTACT_METHOD_TYPE] (
    [CONTACT_METHOD_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [CNTMTT_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [CNTMTT_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [CNTMTT_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [CNTMTT_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [CNTMTT_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [CNTMTT_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [CNTMTT_PK] PRIMARY KEY CLUSTERED ([CONTACT_METHOD_TYPE_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_TENURE_TYPE"                              */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_TENURE_TYPE] (
    [PROPERTY_TENURE_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [PRPTNR_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PRPTNR_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRPTNR_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PRPTNR_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRPTNR_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PRPTNR_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PRPTNR_PK] PRIMARY KEY CLUSTERED ([PROPERTY_TENURE_TYPE_CODE])
)
GO


EXECUTE sp_addextendedproperty N'MS_Description', N'A code table to store property tenure codes. Tenure is defined as : "The act, right, manner or term of holding something(as a landed property)" In this case, tenure is required on Properties to indicate MoTI''s legal tenure on the property. The land parcel still accurately describes the legal title of the land parcel but the individual properties each can have different tenures by MoTI.', 'SCHEMA', N'dbo', 'TABLE', N'PIMS_PROPERTY_TENURE_TYPE', NULL, NULL
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_AREA_UNIT_TYPE"                                    */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_AREA_UNIT_TYPE] (
    [AREA_UNIT_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [ARUNIT_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [ARUNIT_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ARUNIT_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [ARUNIT_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ARUNIT_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [ARUNIT_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [ARUNIT_PK] PRIMARY KEY CLUSTERED ([AREA_UNIT_TYPE_CODE])
)
GO


EXECUTE sp_addextendedproperty N'MS_Description', N'The area unit used for measuring Properties.  The units must be in metric: square metres or hectares.', 'SCHEMA', N'dbo', 'TABLE', N'PIMS_AREA_UNIT_TYPE', NULL, NULL
GO


EXECUTE sp_addextendedproperty N'MS_Description', N'The area unit used for measuring Properties.  The units must be in metric: square metres or hectares.', 'SCHEMA', N'dbo', 'TABLE', N'PIMS_AREA_UNIT_TYPE', 'COLUMN', N'AREA_UNIT_TYPE_CODE'
GO


EXECUTE sp_addextendedproperty N'MS_Description', N'Translation of the code value into a description that can be displayed to the user.', 'SCHEMA', N'dbo', 'TABLE', N'PIMS_AREA_UNIT_TYPE', 'COLUMN', N'DESCRIPTION'
GO


EXECUTE sp_addextendedproperty N'MS_Description', N'Indicates if the code value is still active or is now disabled.', 'SCHEMA', N'dbo', 'TABLE', N'PIMS_AREA_UNIT_TYPE', 'COLUMN', N'IS_DISABLED'
GO


EXECUTE sp_addextendedproperty N'MS_Description', N'Order in which to display the code values, if required.', 'SCHEMA', N'dbo', 'TABLE', N'PIMS_AREA_UNIT_TYPE', 'COLUMN', N'DISPLAY_ORDER'
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.__EFMigrationsHistory"                                  */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[__EFMigrationsHistory] (
    [MigrationId] NVARCHAR(150) NOT NULL,
    [ProductVersion] NVARCHAR(32),
    CONSTRAINT [MIGHIS_PK] PRIMARY KEY CLUSTERED ([MigrationId])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_DATA_SOURCE_TYPE"                         */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_DATA_SOURCE_TYPE] (
    [PROPERTY_DATA_SOURCE_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [PIDSRT_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PIDSRT_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PIDSRT_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PIDSRT_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PIDSRT_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PIDSRT_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PIDSRT_PK] PRIMARY KEY CLUSTERED ([PROPERTY_DATA_SOURCE_TYPE_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_STATUS_TYPE"                              */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_STATUS_TYPE] (
    [PROPERTY_STATUS_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [PRPSTS_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PRPSTS_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRPSTS_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PRPSTS_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRPSTS_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PRPSTS_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PRPSTS_PK] PRIMARY KEY CLUSTERED ([PROPERTY_STATUS_TYPE_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ORG_IDENTIFIER_TYPE"                               */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ORG_IDENTIFIER_TYPE] (
    [ORG_IDENTIFIER_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [ORGIDT_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [ORGIDT_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ORGIDT_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [ORGIDT_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ORGIDT_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [ORGIDT_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [ORGIDT_PK] PRIMARY KEY CLUSTERED ([ORG_IDENTIFIER_TYPE_CODE])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMSX_TableDefinitions"                                 */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMSX_TableDefinitions] (
    [TABLE_NAME] NVARCHAR(255),
    [TABLE_ALIAS] NVARCHAR(255),
    [HIST_REQUIRED] NVARCHAR(1),
    [DESCRIPTION] NVARCHAR(max)
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ACCESS_REQUEST_HIST"                               */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ACCESS_REQUEST_HIST] (
    [_ACCESS_REQUEST_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_ACCE___ACCE__153B1FDF] DEFAULT NEXT VALUE FOR [PIMS_ACCESS_REQUEST_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_ACCE__EFFEC__162F4418] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [ACCESS_REQUEST_ID] BIGINT NOT NULL,
    [USER_ID] BIGINT NOT NULL,
    [ROLE_ID] BIGINT,
    [ACCESS_REQUEST_STATUS_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_AR1_H_PK] PRIMARY KEY CLUSTERED ([_ACCESS_REQUEST_HIST_ID]),
    CONSTRAINT [PIMS_AR1_H_UK] UNIQUE ([_ACCESS_REQUEST_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ACCESS_REQUEST_ORGANIZATION_HIST"                  */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_HIST] (
    [_ACCESS_REQUEST_ORGANIZATION_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_ACCE___ACCE__1AF3F935] DEFAULT NEXT VALUE FOR [PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_ACCE__EFFEC__1BE81D6E] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [ACCESS_REQUEST_ORGANIZATION_ID] BIGINT NOT NULL,
    [ORGANIZATION_ID] BIGINT,
    [ACCESS_REQUEST_ID] BIGINT NOT NULL,
    [IS_DISABLED] BIT,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_ARO2_H_PK] PRIMARY KEY CLUSTERED ([_ACCESS_REQUEST_ORGANIZATION_HIST_ID]),
    CONSTRAINT [PIMS_ARO2_H_UK] UNIQUE ([_ACCESS_REQUEST_ORGANIZATION_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ACTIVITY_HIST"                                     */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ACTIVITY_HIST] (
    [_ACTIVITY_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_ACTI___ACTI__20ACD28B] DEFAULT NEXT VALUE FOR [PIMS_ACTIVITY_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_ACTI__EFFEC__21A0F6C4] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [ACTIVITY_ID] BIGINT NOT NULL,
    [PROJECT_ID] BIGINT,
    [WORKFLOW_ID] BIGINT,
    [ACTIVITY_MODEL_ID] BIGINT NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_A3_H_PK] PRIMARY KEY CLUSTERED ([_ACTIVITY_HIST_ID]),
    CONSTRAINT [PIMS_A3_H_UK] UNIQUE ([_ACTIVITY_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ACTIVITY_MODEL_HIST"                               */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ACTIVITY_MODEL_HIST] (
    [_ACTIVITY_MODEL_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_ACTI___ACTI__2665ABE1] DEFAULT NEXT VALUE FOR [PIMS_ACTIVITY_MODEL_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_ACTI__EFFEC__2759D01A] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [ACTIVITY_MODEL_ID] BIGINT NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_AM4_H_PK] PRIMARY KEY CLUSTERED ([_ACTIVITY_MODEL_HIST_ID]),
    CONSTRAINT [PIMS_AM4_H_UK] UNIQUE ([_ACTIVITY_MODEL_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ADDRESS_HIST"                                      */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ADDRESS_HIST] (
    [_ADDRESS_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_ADDR___ADDR__2C1E8537] DEFAULT NEXT VALUE FOR [PIMS_ADDRESS_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_ADDR__EFFEC__2D12A970] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [ADDRESS_ID] BIGINT NOT NULL,
    [ADDRESS_USAGE_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [REGION_CODE] SMALLINT,
    [DISTRICT_CODE] SMALLINT,
    [PROVINCE_STATE_ID] SMALLINT NOT NULL,
    [COUNTRY_ID] SMALLINT,
    [STREET_ADDRESS_1] NVARCHAR(200),
    [STREET_ADDRESS_2] NVARCHAR(200),
    [STREET_ADDRESS_3] NVARCHAR(200),
    [MUNICIPALITY_NAME] NVARCHAR(200),
    [POSTAL_CODE] NVARCHAR(20),
    [LATITUDE] NUMERIC(18),
    [LONGITUDE] NUMERIC(18),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_A5_H_PK] PRIMARY KEY CLUSTERED ([_ADDRESS_HIST_ID]),
    CONSTRAINT [PIMS_A5_H_UK] UNIQUE ([_ADDRESS_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_CLAIM_HIST"                                        */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_CLAIM_HIST] (
    [_CLAIM_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_CLAI___CLAI__31D75E8D] DEFAULT NEXT VALUE FOR [PIMS_CLAIM_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_CLAI__EFFEC__32CB82C6] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [CLAIM_ID] BIGINT NOT NULL,
    [CLAIM_UID] UNIQUEIDENTIFIER NOT NULL,
    [KEYCLOAK_ROLE_ID] UNIQUEIDENTIFIER,
    [NAME] NVARCHAR(100) NOT NULL,
    [DESCRIPTION] NVARCHAR(500) NOT NULL,
    [IS_DISABLED] BIT NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_C6_H_PK] PRIMARY KEY CLUSTERED ([_CLAIM_HIST_ID]),
    CONSTRAINT [PIMS_C6_H_UK] UNIQUE ([_CLAIM_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_CONTACT_METHOD_HIST"                               */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_CONTACT_METHOD_HIST] (
    [_CONTACT_METHOD_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_CONT___CONT__379037E3] DEFAULT NEXT VALUE FOR [PIMS_CONTACT_METHOD_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_CONT__EFFEC__38845C1C] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [CONTACT_METHOD_ID] BIGINT NOT NULL,
    [CONTACT_METHOD_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PERSON_ID] BIGINT,
    [ORGANIZATION_ID] BIGINT,
    [CONTACT_METHOD_VALUE] NVARCHAR(200) NOT NULL,
    [IS_PREFERRED_METHOD] BIT,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_CM7_H_PK] PRIMARY KEY CLUSTERED ([_CONTACT_METHOD_HIST_ID]),
    CONSTRAINT [PIMS_CM7_H_UK] UNIQUE ([_CONTACT_METHOD_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ORGANIZATION_HIST"                                 */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ORGANIZATION_HIST] (
    [_ORGANIZATION_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_ORGA___ORGA__3D491139] DEFAULT NEXT VALUE FOR [PIMS_ORGANIZATION_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_ORGA__EFFEC__3E3D3572] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [ORGANIZATION_ID] BIGINT NOT NULL,
    [PRNT_ORGANIZATION_ID] BIGINT,
    [ADDRESS_ID] BIGINT NOT NULL,
    [REGION_CODE] SMALLINT,
    [DISTRICT_CODE] SMALLINT,
    [ORGANIZATION_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [ORG_IDENTIFIER_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [ORGANIZATION_IDENTIFIER] NVARCHAR(100),
    [ORGANIZATION_NAME] NVARCHAR(200) NOT NULL,
    [WEBSITE] NVARCHAR(200),
    [IS_DISABLED] BIT NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_O8_H_PK] PRIMARY KEY CLUSTERED ([_ORGANIZATION_HIST_ID]),
    CONSTRAINT [PIMS_O8_H_UK] UNIQUE ([_ORGANIZATION_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PERSON_HIST"                                       */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PERSON_HIST] (
    [_PERSON_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_PERS___PERS__4301EA8F] DEFAULT NEXT VALUE FOR [PIMS_PERSON_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_PERS__EFFEC__43F60EC8] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [PERSON_ID] BIGINT NOT NULL,
    [ADDRESS_ID] BIGINT,
    [SURNAME] NVARCHAR(50) NOT NULL,
    [FIRST_NAME] NVARCHAR(50) NOT NULL,
    [MIDDLE_NAMES] NVARCHAR(200),
    [NAME_SUFFIX] NVARCHAR(50),
    [BIRTH_DATE] DATE,
    [IS_DISABLED] BIT NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_P9_H_PK] PRIMARY KEY CLUSTERED ([_PERSON_HIST_ID]),
    CONSTRAINT [PIMS_P9_H_UK] UNIQUE ([_PERSON_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PERSON_ORGANIZATION_HIST"                          */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PERSON_ORGANIZATION_HIST] (
    [_PERSON_ORGANIZATION_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_PERS___PERS__48BAC3E5] DEFAULT NEXT VALUE FOR [PIMS_PERSON_ORGANIZATION_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_PERS__EFFEC__49AEE81E] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [PERSON_ORGANIZATION_ID] BIGINT NOT NULL,
    [PERSON_ID] BIGINT,
    [ORGANIZATION_ID] BIGINT,
    [IS_DISABLED] BIT,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_PO10_H_PK] PRIMARY KEY CLUSTERED ([_PERSON_ORGANIZATION_HIST_ID]),
    CONSTRAINT [PIMS_PO10_H_UK] UNIQUE ([_PERSON_ORGANIZATION_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROJECT_HIST"                                      */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROJECT_HIST] (
    [_PROJECT_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_PROJ___PROJ__4E739D3B] DEFAULT NEXT VALUE FOR [PIMS_PROJECT_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_PROJ__EFFEC__4F67C174] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [PROJECT_ID] BIGINT NOT NULL,
    [PROJECT_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PROJECT_STATUS_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PROJECT_RISK_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PROJECT_TIER_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_P11_H_PK] PRIMARY KEY CLUSTERED ([_PROJECT_HIST_ID]),
    CONSTRAINT [PIMS_P11_H_UK] UNIQUE ([_PROJECT_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROJECT_NOTE_HIST"                                 */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROJECT_NOTE_HIST] (
    [_PROJECT_NOTE_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_PROJ___PROJ__542C7691] DEFAULT NEXT VALUE FOR [PIMS_PROJECT_NOTE_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_PROJ__EFFEC__55209ACA] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [PROJECT_NOTE_ID] BIGINT NOT NULL,
    [PROJECT_ID] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_PN12_H_PK] PRIMARY KEY CLUSTERED ([_PROJECT_NOTE_HIST_ID]),
    CONSTRAINT [PIMS_PN12_H_UK] UNIQUE ([_PROJECT_NOTE_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROJECT_PROPERTY_HIST"                             */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROJECT_PROPERTY_HIST] (
    [_PROJECT_PROPERTY_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_PROJ___PROJ__59E54FE7] DEFAULT NEXT VALUE FOR [PIMS_PROJECT_PROPERTY_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_PROJ__EFFEC__5AD97420] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [PROJECT_PROPERTY_ID] BIGINT NOT NULL,
    [PROJECT_ID] BIGINT NOT NULL,
    [PROPERTY_ID] BIGINT NOT NULL,
    [IS_DISABLED] BIT,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_PP13_H_PK] PRIMARY KEY CLUSTERED ([_PROJECT_PROPERTY_HIST_ID]),
    CONSTRAINT [PIMS_PP13_H_UK] UNIQUE ([_PROJECT_PROPERTY_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROJECT_WORKFLOW_MODEL_HIST"                       */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_HIST] (
    [_PROJECT_WORKFLOW_MODEL_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_PROJ___PROJ__5F9E293D] DEFAULT NEXT VALUE FOR [PIMS_PROJECT_WORKFLOW_MODEL_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_PROJ__EFFEC__60924D76] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [PROJECT_WORKFLOW_MODEL_ID] BIGINT NOT NULL,
    [PROJECT_ID] BIGINT NOT NULL,
    [WORKFLOW_MODEL_ID] BIGINT NOT NULL,
    [IS_DISABLED] BIT,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_PWM14_H_PK] PRIMARY KEY CLUSTERED ([_PROJECT_WORKFLOW_MODEL_HIST_ID]),
    CONSTRAINT [PIMS_PWM14_H_UK] UNIQUE ([_PROJECT_WORKFLOW_MODEL_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_ACTIVITY_HIST"                            */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST] (
    [_PROPERTY_ACTIVITY_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_PROP___PROP__65570293] DEFAULT NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_PROP__EFFEC__664B26CC] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [PROPERTY_ACTIVITY_ID] BIGINT NOT NULL,
    [ACTIVITY_ID] BIGINT,
    [PROPERTY_ID] BIGINT,
    [IS_DISABLED] BIT,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_PA16_H_PK] PRIMARY KEY CLUSTERED ([_PROPERTY_ACTIVITY_HIST_ID]),
    CONSTRAINT [PIMS_PA16_H_UK] UNIQUE ([_PROPERTY_ACTIVITY_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_EVALUATION_HIST"                          */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_EVALUATION_HIST] (
    [_PROPERTY_EVALUATION_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_PROP___PROP__6B0FDBE9] DEFAULT NEXT VALUE FOR [PIMS_PROPERTY_EVALUATION_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_PROP__EFFEC__6C040022] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [PROPERTY_EVALUATION_ID] BIGINT NOT NULL,
    [PROPERTY_ID] BIGINT NOT NULL,
    [EVALUATION_DATE] DATE NOT NULL,
    [KEY] INTEGER NOT NULL,
    [VALUE] MONEY NOT NULL,
    [NOTE] NVARCHAR(1000),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_PE17_H_PK] PRIMARY KEY CLUSTERED ([_PROPERTY_EVALUATION_HIST_ID]),
    CONSTRAINT [PIMS_PE17_H_UK] UNIQUE ([_PROPERTY_EVALUATION_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_HIST"                                     */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_HIST] (
    [_PROPERTY_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_PROP___PROP__70C8B53F] DEFAULT NEXT VALUE FOR [PIMS_PROPERTY_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_PROP__EFFEC__71BCD978] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [PROPERTY_ID] BIGINT NOT NULL,
    [PROPERTY_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PROPERTY_CLASSIFICATION_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [ADDRESS_ID] BIGINT NOT NULL,
    [REGION_CODE] SMALLINT NOT NULL,
    [DISTRICT_CODE] SMALLINT NOT NULL,
    [PROPERTY_TENURE_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PROPERTY_AREA_UNIT_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PROPERTY_STATUS_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PROPERTY_DATA_SOURCE_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE] DATE NOT NULL,
    [NAME] NVARCHAR(250),
    [DESCRIPTION] NVARCHAR(2000),
    [PID] INTEGER NOT NULL,
    [PIN] INTEGER,
    [LAND_AREA] REAL NOT NULL,
    [ENCUMBRANCE_REASON] NVARCHAR(500),
    [IS_OWNED] BIT NOT NULL,
    [IS_PROPERTY_OF_INTEREST] BIT NOT NULL,
    [IS_VISIBLE_TO_OTHER_AGENCIES] BIT NOT NULL,
    [IS_SENSITIVE] BIT NOT NULL,
    [ZONING] NVARCHAR(50),
    [ZONING_POTENTIAL] NVARCHAR(50),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_P15_H_PK] PRIMARY KEY CLUSTERED ([_PROPERTY_HIST_ID]),
    CONSTRAINT [PIMS_P15_H_UK] UNIQUE ([_PROPERTY_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_ORGANIZATION_HIST"                        */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION_HIST] (
    [_PROPERTY_ORGANIZATION_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_PROP___PROP__76818E95] DEFAULT NEXT VALUE FOR [PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_PROP__EFFEC__7775B2CE] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [PROPERTY_ORGANIZATION_ID] BIGINT NOT NULL,
    [PROPERTY_ID] BIGINT NOT NULL,
    [ORGANIZATION_ID] BIGINT NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [IS_DISABLED] BIT,
    CONSTRAINT [PIMS_PO18_H_PK] PRIMARY KEY CLUSTERED ([_PROPERTY_ORGANIZATION_HIST_ID]),
    CONSTRAINT [PIMS_PO18_H_UK] UNIQUE ([_PROPERTY_ORGANIZATION_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST"               */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST] (
    [_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_PROP___PROP__7C3A67EB] DEFAULT NEXT VALUE FOR [PIMS_PROPERTY_PROPERTY_SERVICE_FILE_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_PROP__EFFEC__7D2E8C24] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [PROPERTY_PROPERTY_SERVICE_FILE_ID] BIGINT NOT NULL,
    [PROPERTY_ID] BIGINT NOT NULL,
    [PROPERTY_SERVICE_FILE_ID] BIGINT NOT NULL,
    [IS_DISABLED] BIT,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_PPSF19_H_PK] PRIMARY KEY CLUSTERED ([_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID]),
    CONSTRAINT [PIMS_PPSF19_H_UK] UNIQUE ([_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_SERVICE_FILE_HIST"                        */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_SERVICE_FILE_HIST] (
    [_PROPERTY_SERVICE_FILE_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_PROP___PROP__01F34141] DEFAULT NEXT VALUE FOR [PIMS_PROPERTY_SERVICE_FILE_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_PROP__EFFEC__02E7657A] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [PROPERTY_SERVICE_FILE_ID] BIGINT NOT NULL,
    [PROPERTY_SERVICE_FILE_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_PSF20_H_PK] PRIMARY KEY CLUSTERED ([_PROPERTY_SERVICE_FILE_HIST_ID]),
    CONSTRAINT [PIMS_PSF20_H_UK] UNIQUE ([_PROPERTY_SERVICE_FILE_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ROLE_CLAIM_HIST"                                   */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ROLE_CLAIM_HIST] (
    [_ROLE_CLAIM_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_ROLE___ROLE__07AC1A97] DEFAULT NEXT VALUE FOR [PIMS_ROLE_CLAIM_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_ROLE__EFFEC__08A03ED0] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [ROLE_CLAIM_ID] BIGINT NOT NULL,
    [ROLE_ID] BIGINT NOT NULL,
    [CLAIM_ID] BIGINT NOT NULL,
    [IS_DISABLED] BIT,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_RC22_H_PK] PRIMARY KEY CLUSTERED ([_ROLE_CLAIM_HIST_ID]),
    CONSTRAINT [PIMS_RC22_H_UK] UNIQUE ([_ROLE_CLAIM_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ROLE_HIST"                                         */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ROLE_HIST] (
    [_ROLE_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_ROLE___ROLE__0D64F3ED] DEFAULT NEXT VALUE FOR [PIMS_ROLE_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_ROLE__EFFEC__0E591826] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [ROLE_ID] BIGINT NOT NULL,
    [ROLE_UID] UNIQUEIDENTIFIER NOT NULL,
    [KEYCLOAK_GROUP_ID] UNIQUEIDENTIFIER,
    [NAME] NVARCHAR(100) NOT NULL,
    [DESCRIPTION] NVARCHAR(500),
    [IS_PUBLIC] BIT NOT NULL,
    [IS_DISABLED] BIT NOT NULL,
    [SORT_ORDER] INTEGER NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_R21_H_PK] PRIMARY KEY CLUSTERED ([_ROLE_HIST_ID]),
    CONSTRAINT [PIMS_R21_H_UK] UNIQUE ([_ROLE_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_TASK_HIST"                                         */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_TASK_HIST] (
    [_TASK_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_TASK___TASK__131DCD43] DEFAULT NEXT VALUE FOR [PIMS_TASK_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_TASK__EFFEC__1411F17C] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [TASK_ID] BIGINT NOT NULL,
    [TASK_TEMPLATE_ID] BIGINT NOT NULL,
    [ACTIVITY_ID] BIGINT,
    [USER_ID] BIGINT NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_T23_H_PK] PRIMARY KEY CLUSTERED ([_TASK_HIST_ID]),
    CONSTRAINT [PIMS_T23_H_UK] UNIQUE ([_TASK_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST"                 */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST] (
    [_TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_TASK___TASK__18D6A699] DEFAULT NEXT VALUE FOR [PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_TASK__EFFEC__19CACAD2] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [TASK_TEMPLATE_ACTIVITY_MODEL_ID] BIGINT NOT NULL,
    [TASK_TEMPLATE_ID] BIGINT NOT NULL,
    [ACTIVITY_MODEL_ID] BIGINT NOT NULL,
    [IS_MANDATORY] BIT NOT NULL,
    [IMPLEMENTATION_ORDER] SMALLINT NOT NULL,
    [IS_DISABLED] BIT,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_TTAM25_H_PK] PRIMARY KEY CLUSTERED ([_TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID]),
    CONSTRAINT [PIMS_TTAM25_H_UK] UNIQUE ([_TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_TASK_TEMPLATE_HIST"                                */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_TASK_TEMPLATE_HIST] (
    [_TASK_TEMPLATE_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_TASK___TASK__1E8F7FEF] DEFAULT NEXT VALUE FOR [PIMS_TASK_TEMPLATE_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_TASK__EFFEC__1F83A428] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [TASK_TEMPLATE_ID] BIGINT NOT NULL,
    [TASK_TEMPLATE_TYPE_CODE] NVARCHAR(40) NOT NULL,
    [IS_DISABLED] BIT NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_TT24_H_PK] PRIMARY KEY CLUSTERED ([_TASK_TEMPLATE_HIST_ID]),
    CONSTRAINT [PIMS_TT24_H_UK] UNIQUE ([_TASK_TEMPLATE_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_USER_HIST"                                         */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_USER_HIST] (
    [_USER_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_USER___USER__24485945] DEFAULT NEXT VALUE FOR [PIMS_USER_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_USER__EFFEC__253C7D7E] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [USER_ID] BIGINT NOT NULL,
    [PERSON_ID] BIGINT NOT NULL,
    [BUSINESS_IDENTIFIER_VALUE] NVARCHAR(30) NOT NULL,
    [GUID_IDENTIFIER_VALUE] UNIQUEIDENTIFIER,
    [POSITION] NVARCHAR(100),
    [NOTE] NVARCHAR(1000),
    [LAST_LOGIN] DATETIME,
    [APPROVED_BY_ID] NVARCHAR(30),
    [ISSUE_DATE] DATETIME NOT NULL,
    [EXPIRY_DATE] DATETIME,
    [IS_DISABLED] BIT,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_U26_H_PK] PRIMARY KEY CLUSTERED ([_USER_HIST_ID]),
    CONSTRAINT [PIMS_U26_H_UK] UNIQUE ([_USER_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_USER_ORGANIZATION_HIST"                            */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_USER_ORGANIZATION_HIST] (
    [_USER_ORGANIZATION_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_USER___USER__2A01329B] DEFAULT NEXT VALUE FOR [PIMS_USER_ORGANIZATION_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_USER__EFFEC__2AF556D4] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [USER_ORGANIZATION_ID] BIGINT NOT NULL,
    [ORGANIZATION_ID] BIGINT NOT NULL,
    [USER_ID] BIGINT NOT NULL,
    [ROLE_ID] BIGINT NOT NULL,
    [IS_DISABLED] BIT,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_UO27_H_PK] PRIMARY KEY CLUSTERED ([_USER_ORGANIZATION_HIST_ID]),
    CONSTRAINT [PIMS_UO27_H_UK] UNIQUE ([_USER_ORGANIZATION_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_USER_ROLE_HIST"                                    */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_USER_ROLE_HIST] (
    [_USER_ROLE_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_USER___USER__2FBA0BF1] DEFAULT NEXT VALUE FOR [PIMS_USER_ROLE_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_USER__EFFEC__30AE302A] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [USER_ROLE_ID] BIGINT NOT NULL,
    [USER_ID] BIGINT NOT NULL,
    [ROLE_ID] BIGINT NOT NULL,
    [IS_DISABLED] BIT,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_UR28_H_PK] PRIMARY KEY CLUSTERED ([_USER_ROLE_HIST_ID]),
    CONSTRAINT [PIMS_UR28_H_UK] UNIQUE ([_USER_ROLE_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_WORKFLOW_MODEL_HIST"                               */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_WORKFLOW_MODEL_HIST] (
    [_WORKFLOW_MODEL_HIST_ID] BIGINT CONSTRAINT [DF__PIMS_WORK___WORK__3572E547] DEFAULT NEXT VALUE FOR [PIMS_WORKFLOW_MODEL_H_ID_SEQ] NOT NULL,
    [EFFECTIVE_DATE_HIST] DATETIME CONSTRAINT [DF__PIMS_WORK__EFFEC__36670980] DEFAULT getutcdate() NOT NULL,
    [END_DATE_HIST] DATETIME,
    [WORKFLOW_MODEL_ID] BIGINT NOT NULL,
    [WORKFLOW_MODEL_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [IS_DISABLED] BIT NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    CONSTRAINT [PIMS_WM29_H_PK] PRIMARY KEY CLUSTERED ([_WORKFLOW_MODEL_HIST_ID]),
    CONSTRAINT [PIMS_WM29_H_UK] UNIQUE ([_WORKFLOW_MODEL_HIST_ID], [END_DATE_HIST])
)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROJECT"                                           */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROJECT] (
    [PROJECT_ID] BIGINT CONSTRAINT [PROJCT_PROJECT_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_PROJECT_ID_SEQ] NOT NULL,
    [PROJECT_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PROJECT_STATUS_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PROJECT_RISK_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PROJECT_TIER_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PROJCT_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PROJCT_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PROJCT_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PROJCT_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PROJCT_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PROJCT_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PROJCT_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PROJCT_PK] PRIMARY KEY CLUSTERED ([PROJECT_ID])
)
GO


CREATE NONCLUSTERED INDEX [PROJCT_PROJECT_RISK_TYPE_CODE_IDX] ON [dbo].[PIMS_PROJECT] ([PROJECT_RISK_TYPE_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [PROJCT_PROJECT_STATUS_TYPE_CODE_IDX] ON [dbo].[PIMS_PROJECT] ([PROJECT_STATUS_TYPE_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [PROJCT_PROJECT_TIER_TYPE_CODE_IDX] ON [dbo].[PIMS_PROJECT] ([PROJECT_TIER_TYPE_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [PROJCT_PROJECT_TYPE_CODE_IDX] ON [dbo].[PIMS_PROJECT] ([PROJECT_TYPE_CODE] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_SERVICE_FILE"                             */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_SERVICE_FILE] (
    [PROPERTY_SERVICE_FILE_ID] BIGINT CONSTRAINT [PRPSVC_PROPERTY_SERVICE_FILE_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_PROPERTY_SERVICE_FILE_ID_SEQ] NOT NULL,
    [PROPERTY_SERVICE_FILE_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PRPSVC_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRPSVC_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRPSVC_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRPSVC_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PRPSVC_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRPSVC_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PRPSVC_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PRPSVC_PK] PRIMARY KEY CLUSTERED ([PROPERTY_SERVICE_FILE_ID])
)
GO


CREATE NONCLUSTERED INDEX [PRPSVC_PROPERTY_SERVICE_FILE_TYPE_CODE_IDX] ON [dbo].[PIMS_PROPERTY_SERVICE_FILE] ([PROPERTY_SERVICE_FILE_TYPE_CODE] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_TASK_TEMPLATE"                                     */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_TASK_TEMPLATE] (
    [TASK_TEMPLATE_ID] BIGINT CONSTRAINT [TSKTMP_TASK_TEMPLATE_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_TASK_TEMPLATE_ID_SEQ] NOT NULL,
    [TASK_TEMPLATE_TYPE_CODE] NVARCHAR(40) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [TSKTMP_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [TSKTMP_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [TSKTMP_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [TSKTMP_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [TSKTMP_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [TSKTMP_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [TSKTMP_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [TSKTMP_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [TSKTMP_PK] PRIMARY KEY CLUSTERED ([TASK_TEMPLATE_ID])
)
GO


CREATE NONCLUSTERED INDEX [TSKTMP_TASK_TEMPLATE_TYPE_CODE_IDX] ON [dbo].[PIMS_TASK_TEMPLATE] ([TASK_TEMPLATE_TYPE_CODE] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_WORKFLOW_MODEL"                                    */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_WORKFLOW_MODEL] (
    [WORKFLOW_MODEL_ID] BIGINT CONSTRAINT [WFLMDL_WORKFLOW_MODEL_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_WORKFLOW_MODEL_ID_SEQ] NOT NULL,
    [WORKFLOW_MODEL_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [WFLMDL_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [WFLMDL_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [WFLMDL_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [WFLMDL_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [WFLMDL_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [WFLMDL_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [WFLMDL_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [WFLMDL_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [WFLMDL_PK] PRIMARY KEY CLUSTERED ([WORKFLOW_MODEL_ID])
)
GO


CREATE NONCLUSTERED INDEX [WFLMDL_WORKFLOW_MODEL_TYPE_CODE_IDX] ON [dbo].[PIMS_WORKFLOW_MODEL] ([WORKFLOW_MODEL_TYPE_CODE] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_DISTRICT"                                          */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_DISTRICT] (
    [DISTRICT_CODE] SMALLINT NOT NULL,
    [REGION_CODE] SMALLINT NOT NULL,
    [DISTRICT_NAME] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [DSTRCT_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [DSTRCT_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [DSTRCT_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [DSTRCT_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [DSTRCT_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [DSTRCT_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [DSTRCT_PK] PRIMARY KEY CLUSTERED ([DISTRICT_CODE])
)
GO


CREATE NONCLUSTERED INDEX [DSTRCT_REGION_CODE_IDX] ON [dbo].[PIMS_DISTRICT] ([REGION_CODE] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROVINCE_STATE"                                    */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROVINCE_STATE] (
    [PROVINCE_STATE_ID] SMALLINT NOT NULL,
    [COUNTRY_ID] SMALLINT NOT NULL,
    [PROVINCE_STATE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [PROVNC_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PROVNC_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PROVNC_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PROVNC_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PROVNC_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PROVNC_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PROVNC_PK] PRIMARY KEY CLUSTERED ([PROVINCE_STATE_ID])
)
GO


CREATE NONCLUSTERED INDEX [PROVNC_COUNTRY_ID_IDX] ON [dbo].[PIMS_PROVINCE_STATE] ([COUNTRY_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ROLE_CLAIM"                                        */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ROLE_CLAIM] (
    [ROLE_CLAIM_ID] BIGINT CONSTRAINT [ROLCLM_ROLE_CLAIM_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_ROLE_CLAIM_ID_SEQ] NOT NULL,
    [ROLE_ID] BIGINT NOT NULL,
    [CLAIM_ID] BIGINT NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [ROLCLM_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [ROLCLM_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ROLCLM_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ROLCLM_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ROLCLM_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [ROLCLM_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ROLCLM_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [ROLCLM_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [ROLCLM_PK] PRIMARY KEY CLUSTERED ([ROLE_CLAIM_ID]),
    CONSTRAINT [ROLCLM_ROLE_CLAIM_TUC] UNIQUE ([ROLE_ID], [CLAIM_ID])
)
GO


CREATE NONCLUSTERED INDEX [ROLCLM_CLAIM_ID_IDX] ON [dbo].[PIMS_ROLE_CLAIM] ([CLAIM_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [ROLCLM_ROLE_ID_IDX] ON [dbo].[PIMS_ROLE_CLAIM] ([ROLE_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROJECT_NOTE"                                      */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROJECT_NOTE] (
    [PROJECT_NOTE_ID] BIGINT CONSTRAINT [PROJNT_PROJECT_NOTE_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_PROJECT_NOTE_ID_SEQ] NOT NULL,
    [PROJECT_ID] BIGINT NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PROJNT_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PROJNT_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PROJNT_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PROJNT_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PROJNT_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PROJNT_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PROJNT_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PROJNT_PK] PRIMARY KEY CLUSTERED ([PROJECT_NOTE_ID])
)
GO


CREATE NONCLUSTERED INDEX [PROJNT_PROJECT_ID_IDX] ON [dbo].[PIMS_PROJECT_NOTE] ([PROJECT_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_TASK_TEMPLATE_ACTIVITY_MODEL"                      */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL] (
    [TASK_TEMPLATE_ACTIVITY_MODEL_ID] BIGINT CONSTRAINT [TSKTAM_TASK_TEMPLATE_ACTIVITY_MODEL_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_ID_SEQ] NOT NULL,
    [TASK_TEMPLATE_ID] BIGINT NOT NULL,
    [ACTIVITY_MODEL_ID] BIGINT NOT NULL,
    [IS_MANDATORY] BIT CONSTRAINT [TSKTAM_IS_MANDATORY_DEF] DEFAULT CONVERT([bit],(1)) NOT NULL,
    [IMPLEMENTATION_ORDER] SMALLINT CONSTRAINT [TSKTAM_IMPLEMENTATION_ORDER_DEF] DEFAULT 0 NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [TSKTAM_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [TSKTAM_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [TSKTAM_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [TSKTAM_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [TSKTAM_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [TSKTAM_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [TSKTAM_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [TSKTAM_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [TSKTAM_PK] PRIMARY KEY CLUSTERED ([TASK_TEMPLATE_ACTIVITY_MODEL_ID]),
    CONSTRAINT [TSKTAM_TASK_TEMPLATE_ACTIVITY_MODEL_TUC] UNIQUE ([TASK_TEMPLATE_ID], [ACTIVITY_MODEL_ID])
)
GO


CREATE NONCLUSTERED INDEX [TSKTAM_ACTIVITY_MODEL_ID_IDX] ON [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL] ([ACTIVITY_MODEL_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [TSKTAM_TASK_TEMPLATE_ID_IDX] ON [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL] ([TASK_TEMPLATE_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROJECT_WORKFLOW_MODEL"                            */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL] (
    [PROJECT_WORKFLOW_MODEL_ID] BIGINT CONSTRAINT [PRWKMD_PROJECT_WORKFLOW_MODEL_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_PROJECT_WORKFLOW_MODEL_ID_SEQ] NOT NULL,
    [PROJECT_ID] BIGINT NOT NULL,
    [WORKFLOW_MODEL_ID] BIGINT NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [PRWKMD_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PRWKMD_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRWKMD_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRWKMD_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRWKMD_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PRWKMD_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRWKMD_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PRWKMD_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PRWKMD_PK] PRIMARY KEY CLUSTERED ([PROJECT_WORKFLOW_MODEL_ID]),
    CONSTRAINT [PRWKMD_PROJECT_WORKFLOW_MODEL_TUC] UNIQUE ([PROJECT_ID], [WORKFLOW_MODEL_ID])
)
GO


CREATE NONCLUSTERED INDEX [PRWKMD_PROJECT_ID_IDX] ON [dbo].[PIMS_PROJECT_WORKFLOW_MODEL] ([PROJECT_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [PRWKMD_WORKFLOW_MODEL_ID_IDX] ON [dbo].[PIMS_PROJECT_WORKFLOW_MODEL] ([WORKFLOW_MODEL_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ADDRESS"                                           */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ADDRESS] (
    [ADDRESS_ID] BIGINT CONSTRAINT [ADDRSS_ADDRESS_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_ADDRESS_ID_SEQ] NOT NULL,
    [ADDRESS_USAGE_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [REGION_CODE] SMALLINT,
    [DISTRICT_CODE] SMALLINT,
    [PROVINCE_STATE_ID] SMALLINT NOT NULL,
    [COUNTRY_ID] SMALLINT,
    [STREET_ADDRESS_1] NVARCHAR(200),
    [STREET_ADDRESS_2] NVARCHAR(200),
    [STREET_ADDRESS_3] NVARCHAR(200),
    [MUNICIPALITY_NAME] NVARCHAR(200),
    [POSTAL_CODE] NVARCHAR(20),
    [LATITUDE] NUMERIC(8,6),
    [LONGITUDE] NUMERIC(9,6),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [ADDRSS_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ADDRSS_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ADDRSS_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ADDRSS_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [ADDRSS_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ADDRSS_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [ADDRSS_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [ADDRSS_PK] PRIMARY KEY CLUSTERED ([ADDRESS_ID])
)
GO


CREATE NONCLUSTERED INDEX [ADDRSS_ADDRESS_USAGE_TYPE_CODE_IDX] ON [dbo].[PIMS_ADDRESS] ([ADDRESS_USAGE_TYPE_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [ADDRSS_COUNTRY_ID_IDX] ON [dbo].[PIMS_ADDRESS] ([COUNTRY_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [ADDRSS_DISTRICT_CODE_IDX] ON [dbo].[PIMS_ADDRESS] ([DISTRICT_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [ADDRSS_PROVINCE_STATE_ID_IDX] ON [dbo].[PIMS_ADDRESS] ([PROVINCE_STATE_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [ADDRSS_REGION_CODE_IDX] ON [dbo].[PIMS_ADDRESS] ([REGION_CODE] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ORGANIZATION"                                      */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ORGANIZATION] (
    [ORGANIZATION_ID] BIGINT CONSTRAINT [ORG_ORGANIZATION_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_ORGANIZATION_ID_SEQ] NOT NULL,
    [PRNT_ORGANIZATION_ID] BIGINT,
    [ADDRESS_ID] BIGINT NOT NULL,
    [REGION_CODE] SMALLINT,
    [DISTRICT_CODE] SMALLINT,
    [ORGANIZATION_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [ORG_IDENTIFIER_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [ORGANIZATION_IDENTIFIER] NVARCHAR(100),
    [ORGANIZATION_NAME] NVARCHAR(200) NOT NULL,
    [WEBSITE] NVARCHAR(200),
    [IS_DISABLED] BIT CONSTRAINT [ORG_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [ORG_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ORG_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ORG_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ORG_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [ORG_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ORG_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [ORG_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [ORG_PK] PRIMARY KEY CLUSTERED ([ORGANIZATION_ID])
)
GO


CREATE NONCLUSTERED INDEX [ORG_ADDRESS_ID_IDX] ON [dbo].[PIMS_ORGANIZATION] ([ADDRESS_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [ORG_DISTRICT_CODE_IDX] ON [dbo].[PIMS_ORGANIZATION] ([DISTRICT_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [ORG_ORG_IDENTIFIER_TYPE_CODE_IDX] ON [dbo].[PIMS_ORGANIZATION] ([ORG_IDENTIFIER_TYPE_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [ORG_ORGANIZATION_TYPE_CODE_IDX] ON [dbo].[PIMS_ORGANIZATION] ([ORGANIZATION_TYPE_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [ORG_PRNT_ORGANIZATION_ID_IDX] ON [dbo].[PIMS_ORGANIZATION] ([PRNT_ORGANIZATION_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [ORG_REGION_CODE_IDX] ON [dbo].[PIMS_ORGANIZATION] ([REGION_CODE] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PERSON"                                            */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PERSON] (
    [PERSON_ID] BIGINT CONSTRAINT [PERSON_PERSON_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_PERSON_ID_SEQ] NOT NULL,
    [ADDRESS_ID] BIGINT,
    [SURNAME] NVARCHAR(50) NOT NULL,
    [FIRST_NAME] NVARCHAR(50) NOT NULL,
    [MIDDLE_NAMES] NVARCHAR(200),
    [NAME_SUFFIX] NVARCHAR(50),
    [BIRTH_DATE] DATE,
    [IS_DISABLED] BIT CONSTRAINT [PERSON_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PERSON_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PERSON_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PERSON_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PERSON_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PERSON_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PERSON_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PERSON_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PERSON_PK] PRIMARY KEY CLUSTERED ([PERSON_ID])
)
GO


CREATE NONCLUSTERED INDEX [PERSON_ADDRESS_ID_IDX] ON [dbo].[PIMS_PERSON] ([ADDRESS_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PERSON_ORGANIZATION"                               */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PERSON_ORGANIZATION] (
    [PERSON_ORGANIZATION_ID] BIGINT CONSTRAINT [PERORG_PERSON_ORGANIZATION_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_PERSON_ORGANIZATION_ID_SEQ] NOT NULL,
    [PERSON_ID] BIGINT,
    [ORGANIZATION_ID] BIGINT,
    [IS_DISABLED] BIT CONSTRAINT [PERORG_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PERORG_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PERORG_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PERORG_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PERORG_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PERORG_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PERORG_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PERORG_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PERORG_PK] PRIMARY KEY CLUSTERED ([PERSON_ORGANIZATION_ID]),
    CONSTRAINT [PERORG_PERSON_ORGANIZATION_TUC] UNIQUE ([ORGANIZATION_ID], [PERSON_ID])
)
GO


CREATE NONCLUSTERED INDEX [PERORG_ORGANIZATION_ID_IDX] ON [dbo].[PIMS_PERSON_ORGANIZATION] ([ORGANIZATION_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [PERORG_PERSON_ID_IDX] ON [dbo].[PIMS_PERSON_ORGANIZATION] ([PERSON_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_CONTACT_METHOD"                                    */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_CONTACT_METHOD] (
    [CONTACT_METHOD_ID] BIGINT CONSTRAINT [CNTMTH_CONTACT_METHOD_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_CONTACT_METHOD_ID_SEQ] NOT NULL,
    [CONTACT_METHOD_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PERSON_ID] BIGINT,
    [ORGANIZATION_ID] BIGINT,
    [CONTACT_METHOD_VALUE] NVARCHAR(200) NOT NULL,
    [IS_PREFERRED_METHOD] BIT CONSTRAINT [CNTMTH_IS_PREFERRED_METHOD_DEF] DEFAULT CONVERT([bit],(0)),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [CNTMTH_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [CNTMTH_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [CNTMTH_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [CNTMTH_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [CNTMTH_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [CNTMTH_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [CNTMTH_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [CNTMTH_PK] PRIMARY KEY CLUSTERED ([CONTACT_METHOD_ID])
)
GO


CREATE NONCLUSTERED INDEX [CNTMTH_CONTACT_METHOD_TYPE_CODE_IDX] ON [dbo].[PIMS_CONTACT_METHOD] ([CONTACT_METHOD_TYPE_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [CNTMTH_ORGANIZATION_ID_IDX] ON [dbo].[PIMS_CONTACT_METHOD] ([ORGANIZATION_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [CNTMTH_PERSON_ID_IDX] ON [dbo].[PIMS_CONTACT_METHOD] ([PERSON_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY"                                          */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY] (
    [PROPERTY_ID] BIGINT CONSTRAINT [PRPRTY_PROPERTY_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_PROPERTY_ID_SEQ] NOT NULL,
    [PROPERTY_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PROPERTY_CLASSIFICATION_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [ADDRESS_ID] BIGINT NOT NULL,
    [REGION_CODE] SMALLINT NOT NULL,
    [DISTRICT_CODE] SMALLINT NOT NULL,
    [PROPERTY_TENURE_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PROPERTY_AREA_UNIT_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PROPERTY_STATUS_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PROPERTY_DATA_SOURCE_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE] DATE NOT NULL,
    [NAME] NVARCHAR(250),
    [DESCRIPTION] NVARCHAR(2000),
    [PID] INTEGER NOT NULL,
    [PIN] INTEGER,
    [LAND_AREA] REAL NOT NULL,
    [LAND_LEGAL_DESCRIPTION] NVARCHAR(max),
    [BOUNDARY] GEOMETRY,
    [LOCATION] GEOMETRY,
    [ENCUMBRANCE_REASON] NVARCHAR(500),
    [IS_OWNED] BIT CONSTRAINT [PRPRTY_IS_OWNED_DEF] DEFAULT CONVERT([bit],(1)) NOT NULL,
    [IS_PROPERTY_OF_INTEREST] BIT CONSTRAINT [PRPRTY_IS_PROPERTY_OF_INTEREST_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [IS_VISIBLE_TO_OTHER_AGENCIES] BIT CONSTRAINT [PRPRTY_IS_VISIBLE_TO_OTHER_AGENCIES_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [IS_SENSITIVE] BIT CONSTRAINT [PRPRTY_IS_SENSITIVE_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [ZONING] NVARCHAR(50),
    [ZONING_POTENTIAL] NVARCHAR(50),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PRPRTY_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRPRTY_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRPRTY_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRPRTY_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PRPRTY_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRPRTY_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PRPRTY_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PRPRTY_PK] PRIMARY KEY CLUSTERED ([PROPERTY_ID])
)
GO


CREATE NONCLUSTERED INDEX [PRPRTY_ADDRESS_ID_IDX] ON [dbo].[PIMS_PROPERTY] ([ADDRESS_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [PRPRTY_DISTRICT_CODE_IDX] ON [dbo].[PIMS_PROPERTY] ([DISTRICT_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [PRPRTY_PROPERTY_AREA_UNIT_TYPE_CODE_IDX] ON [dbo].[PIMS_PROPERTY] ([PROPERTY_AREA_UNIT_TYPE_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [PRPRTY_PROPERTY_CLASSIFICATION_TYPE_CODE_IDX] ON [dbo].[PIMS_PROPERTY] ([PROPERTY_CLASSIFICATION_TYPE_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [PRPRTY_PROPERTY_DATA_SOURCE_TYPE_CODE_IDX] ON [dbo].[PIMS_PROPERTY] ([PROPERTY_DATA_SOURCE_TYPE_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [PRPRTY_PROPERTY_STATUS_TYPE_CODE_IDX] ON [dbo].[PIMS_PROPERTY] ([PROPERTY_STATUS_TYPE_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [PRPRTY_PROPERTY_TENURE_TYPE_CODE_IDX] ON [dbo].[PIMS_PROPERTY] ([PROPERTY_TENURE_TYPE_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [PRPRTY_PROPERTY_TYPE_CODE_IDX] ON [dbo].[PIMS_PROPERTY] ([PROPERTY_TYPE_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [PRPRTY_REGION_CODE_IDX] ON [dbo].[PIMS_PROPERTY] ([REGION_CODE] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ACTIVITY"                                          */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ACTIVITY] (
    [ACTIVITY_ID] BIGINT CONSTRAINT [ACTVTY_ACTIVITY_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_ACTIVITY_ID_SEQ] NOT NULL,
    [PROJECT_ID] BIGINT,
    [WORKFLOW_ID] BIGINT,
    [ACTIVITY_MODEL_ID] BIGINT NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [ACTVTY_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ACTVTY_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ACTVTY_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ACTVTY_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [ACTVTY_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ACTVTY_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [ACTVTY_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [ACTVTY_PK] PRIMARY KEY CLUSTERED ([ACTIVITY_ID])
)
GO


CREATE NONCLUSTERED INDEX [ACTVTY_ACTIVITY_MODEL_ID_IDX] ON [dbo].[PIMS_ACTIVITY] ([ACTIVITY_MODEL_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [ACTVTY_PROJECT_ID_IDX] ON [dbo].[PIMS_ACTIVITY] ([PROJECT_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [ACTVTY_WORKFLOW_ID_IDX] ON [dbo].[PIMS_ACTIVITY] ([WORKFLOW_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_USER"                                              */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_USER] (
    [USER_ID] BIGINT CONSTRAINT [USER_USER_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_USER_ID_SEQ] NOT NULL,
    [PERSON_ID] BIGINT NOT NULL,
    [BUSINESS_IDENTIFIER_VALUE] NVARCHAR(30) NOT NULL,
    [GUID_IDENTIFIER_VALUE] UNIQUEIDENTIFIER,
    [POSITION] NVARCHAR(100),
    [NOTE] NVARCHAR(1000),
    [LAST_LOGIN] DATETIME,
    [APPROVED_BY_ID] NVARCHAR(30),
    [ISSUE_DATE] DATETIME NOT NULL,
    [EXPIRY_DATE] DATETIME,
    [IS_DISABLED] BIT CONSTRAINT [USER_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [USER_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [USER_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [USER_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [USER_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [USER_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [USER_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [USER_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [USER_PK] PRIMARY KEY CLUSTERED ([USER_ID])
)
GO


CREATE NONCLUSTERED INDEX [USER_PERSON_ID_IDX] ON [dbo].[PIMS_USER] ([PERSON_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROJECT_PROPERTY"                                  */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROJECT_PROPERTY] (
    [PROJECT_PROPERTY_ID] BIGINT CONSTRAINT [PRJPRP_PROJECT_PROPERTY_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_PROJECT_PROPERTY_ID_SEQ] NOT NULL,
    [PROJECT_ID] BIGINT NOT NULL,
    [PROPERTY_ID] BIGINT NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [PRJPRP_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)),
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRJPRP_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRJPRP_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PRJPRP_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRJPRP_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PRJPRP_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRJPRP_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PRJPRP_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PRJPRP_PK] PRIMARY KEY CLUSTERED ([PROJECT_PROPERTY_ID]),
    CONSTRAINT [PRJPRP_PROJECT_PROPERTY_TUC] UNIQUE ([PROPERTY_ID], [PROJECT_ID])
)
GO


CREATE NONCLUSTERED INDEX [PRJPRP_PROJECT_ID_IDX] ON [dbo].[PIMS_PROJECT_PROPERTY] ([PROJECT_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [PRJPRP_PROPERTY_ID_IDX] ON [dbo].[PIMS_PROJECT_PROPERTY] ([PROPERTY_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_ACTIVITY"                                 */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY] (
    [PROPERTY_ACTIVITY_ID] BIGINT CONSTRAINT [PRPACT_PROPERTY_ACTIVITY_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_ID_SEQ] NOT NULL,
    [ACTIVITY_ID] BIGINT,
    [PROPERTY_ID] BIGINT,
    [IS_DISABLED] BIT CONSTRAINT [PRPACT_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PRPACT_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRPACT_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRPACT_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRPACT_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PRPACT_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRPACT_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PRPACT_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PRPACT_PK] PRIMARY KEY CLUSTERED ([PROPERTY_ACTIVITY_ID]),
    CONSTRAINT [PRPACT_PROPERTY_ACTIVITY_TUC] UNIQUE ([PROPERTY_ID], [ACTIVITY_ID])
)
GO


CREATE NONCLUSTERED INDEX [PRPACT_ACTIVITY_ID_IDX] ON [dbo].[PIMS_PROPERTY_ACTIVITY] ([ACTIVITY_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [PRPACT_PROPERTY_ID_IDX] ON [dbo].[PIMS_PROPERTY_ACTIVITY] ([PROPERTY_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_USER_ORGANIZATION"                                 */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_USER_ORGANIZATION] (
    [USER_ORGANIZATION_ID] BIGINT CONSTRAINT [USRORG_USER_ORGANIZATION_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_USER_ORGANIZATION_ID_SEQ] NOT NULL,
    [ORGANIZATION_ID] BIGINT NOT NULL,
    [USER_ID] BIGINT NOT NULL,
    [ROLE_ID] BIGINT NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [USRORG_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [USRORG_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [USRORG_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [USRORG_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [USRORG_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [USRORG_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [USRORG_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [USRORG_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [USRORG_PK] PRIMARY KEY CLUSTERED ([USER_ORGANIZATION_ID]),
    CONSTRAINT [USRORG_USER_ROLE_ORGANIZATION_TUC] UNIQUE ([ORGANIZATION_ID], [USER_ID], [ROLE_ID])
)
GO


CREATE NONCLUSTERED INDEX [USRORG_ORGANIZATION_ID_IDX] ON [dbo].[PIMS_USER_ORGANIZATION] ([ORGANIZATION_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [USRORG_ROLE_ID_IDX] ON [dbo].[PIMS_USER_ORGANIZATION] ([ROLE_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [USRORG_USER_ID_IDX] ON [dbo].[PIMS_USER_ORGANIZATION] ([USER_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ACCESS_REQUEST"                                    */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ACCESS_REQUEST] (
    [ACCESS_REQUEST_ID] BIGINT CONSTRAINT [ACRQST_ACCESS_REQUEST_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_ACCESS_REQUEST_ID_SEQ] NOT NULL,
    [USER_ID] BIGINT NOT NULL,
    [ROLE_ID] BIGINT,
    [ACCESS_REQUEST_STATUS_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [NOTE] NVARCHAR(max),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [ACRQST_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ACRQST_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ACRQST_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ACRQST_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [ACRQST_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ACRQST_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [ACRQST_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [ACRQST_PK] PRIMARY KEY CLUSTERED ([ACCESS_REQUEST_ID])
)
GO


CREATE NONCLUSTERED INDEX [ACRQST_ACCESS_REQUEST_STATUS_TYPE_CODE_IDX] ON [dbo].[PIMS_ACCESS_REQUEST] ([ACCESS_REQUEST_STATUS_TYPE_CODE] ASC)
GO


CREATE NONCLUSTERED INDEX [ACRQST_ROLE_ID_IDX] ON [dbo].[PIMS_ACCESS_REQUEST] ([ROLE_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [ACRQST_USER_ID_IDX] ON [dbo].[PIMS_ACCESS_REQUEST] ([USER_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_ACCESS_REQUEST_ORGANIZATION"                       */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION] (
    [ACCESS_REQUEST_ORGANIZATION_ID] BIGINT CONSTRAINT [ACRQOR_ACCESS_REQUEST_ORGANIZATION_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_ACCESS_REQUEST_ORGANIZATION_ID_SEQ] NOT NULL,
    [ORGANIZATION_ID] BIGINT,
    [ACCESS_REQUEST_ID] BIGINT NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [ACRQOR_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [ACRQOR_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ACRQOR_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ACRQOR_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [ACRQOR_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [ACRQOR_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [ACRQOR_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [ACRQOR_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [ACRQOR_PK] PRIMARY KEY CLUSTERED ([ACCESS_REQUEST_ORGANIZATION_ID]),
    CONSTRAINT [ACRQOR_ORGANIZATION_ACCESS_REQUEST_TUC] UNIQUE ([ORGANIZATION_ID], [ACCESS_REQUEST_ID])
)
GO


CREATE NONCLUSTERED INDEX [ACRQOR_ACCESS_REQUEST_ID_IDX] ON [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION] ([ACCESS_REQUEST_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [ACRQOR_ORGANIZATION_ID_IDX] ON [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION] ([ORGANIZATION_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_USER_ROLE"                                         */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_USER_ROLE] (
    [USER_ROLE_ID] BIGINT CONSTRAINT [USERRL_USER_ROLE_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_USER_ROLE_ID_SEQ] NOT NULL,
    [USER_ID] BIGINT NOT NULL,
    [ROLE_ID] BIGINT NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [USERRL_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [USERRL_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [USERRL_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [USERRL_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [USERRL_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [USERRL_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [USERRL_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [USERRL_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [USERRL_PK] PRIMARY KEY CLUSTERED ([USER_ROLE_ID]),
    CONSTRAINT [USERRL_USER_ROLE_TUC] UNIQUE ([USER_ID], [ROLE_ID])
)
GO


CREATE NONCLUSTERED INDEX [USERRL_ROLE_ID_IDX] ON [dbo].[PIMS_USER_ROLE] ([ROLE_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [USERRL_USER_ID_IDX] ON [dbo].[PIMS_USER_ROLE] ([USER_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_PROPERTY_SERVICE_FILE"                    */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE] (
    [PROPERTY_PROPERTY_SERVICE_FILE_ID] BIGINT CONSTRAINT [PRPRSF_PROPERTY_PROPERTY_SERVICE_FILE_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_PROPERTY_PROPERTY_SERVICE_FILE_ID_SEQ] NOT NULL,
    [PROPERTY_ID] BIGINT NOT NULL,
    [PROPERTY_SERVICE_FILE_ID] BIGINT NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [PRPRSF_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PRPRSF_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRPRSF_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRPRSF_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRPRSF_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PRPRSF_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRPRSF_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PRPRSF_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PRPRSF_PK] PRIMARY KEY CLUSTERED ([PROPERTY_PROPERTY_SERVICE_FILE_ID]),
    CONSTRAINT [PRPRSF_PROPERTY_SERVICE_FILE_TUC] UNIQUE ([PROPERTY_ID], [PROPERTY_SERVICE_FILE_ID])
)
GO


CREATE NONCLUSTERED INDEX [PRPRSF_PROPERTY_ID_IDX] ON [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE] ([PROPERTY_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [PRPRSF_PROPERTY_SERVICE_FILE_ID_IDX] ON [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE] ([PROPERTY_SERVICE_FILE_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_ORGANIZATION"                             */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION] (
    [PROPERTY_ORGANIZATION_ID] BIGINT CONSTRAINT [PRPORG_PROPERTY_ORGANIZATION_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_PROPERTY_ORGANIZATION_ID_SEQ] NOT NULL,
    [PROPERTY_ID] BIGINT NOT NULL,
    [ORGANIZATION_ID] BIGINT NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PRPORG_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRPORG_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRPORG_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRPORG_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PRPORG_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRPORG_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PRPORG_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [PRPORG_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)),
    CONSTRAINT [PRPORG_PK] PRIMARY KEY CLUSTERED ([PROPERTY_ORGANIZATION_ID]),
    CONSTRAINT [PRPORG_PROPERTY_ORGANIZATION_TUC] UNIQUE ([PROPERTY_ID], [ORGANIZATION_ID])
)
GO


CREATE NONCLUSTERED INDEX [PRPORG_ORGANIZATION_ID_IDX] ON [dbo].[PIMS_PROPERTY_ORGANIZATION] ([ORGANIZATION_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [PRPORG_PROPERTY_ID_IDX] ON [dbo].[PIMS_PROPERTY_ORGANIZATION] ([PROPERTY_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_PROPERTY_EVALUATION"                               */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_PROPERTY_EVALUATION] (
    [PROPERTY_EVALUATION_ID] BIGINT CONSTRAINT [PRPEVL_PROPERTY_EVALUATION_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_PROPERTY_EVALUATION_ID_SEQ] NOT NULL,
    [PROPERTY_ID] BIGINT NOT NULL,
    [EVALUATION_DATE] DATE NOT NULL,
    [KEY] INTEGER NOT NULL,
    [VALUE] MONEY NOT NULL,
    [NOTE] NVARCHAR(1000),
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PRPEVL_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRPEVL_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRPEVL_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PRPEVL_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PRPEVL_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PRPEVL_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PRPEVL_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PRPEVL_PK] PRIMARY KEY CLUSTERED ([PROPERTY_EVALUATION_ID])
)
GO


CREATE NONCLUSTERED INDEX [PRPEVL_PROPERTY_ID_IDX] ON [dbo].[PIMS_PROPERTY_EVALUATION] ([PROPERTY_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add table "dbo.PIMS_TASK"                                              */
/* ---------------------------------------------------------------------- */

CREATE TABLE [dbo].[PIMS_TASK] (
    [TASK_ID] BIGINT CONSTRAINT [TASK_TASK_ID_DEF] DEFAULT NEXT VALUE FOR [PIMS_TASK_ID_SEQ] NOT NULL,
    [TASK_TEMPLATE_ID] BIGINT NOT NULL,
    [ACTIVITY_ID] BIGINT,
    [USER_ID] BIGINT NOT NULL,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [TASK_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [TASK_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [TASK_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [TASK_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [TASK_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [TASK_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [TASK_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [TASK_PK] PRIMARY KEY CLUSTERED ([TASK_ID]),
    CONSTRAINT [TASK_TEMPLATE_ACTIVITY_USER_TUC] UNIQUE ([USER_ID], [ACTIVITY_ID], [TASK_TEMPLATE_ID])
)
GO


CREATE NONCLUSTERED INDEX [TASK_ACTIVITY_ID_IDX] ON [dbo].[PIMS_TASK] ([ACTIVITY_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [TASK_TASK_TEMPLATE_ID_IDX] ON [dbo].[PIMS_TASK] ([TASK_TEMPLATE_ID] ASC)
GO


CREATE NONCLUSTERED INDEX [TASK_USER_ID_IDX] ON [dbo].[PIMS_TASK] ([USER_ID] ASC)
GO


/* ---------------------------------------------------------------------- */
/* Add foreign key constraints                                            */
/* ---------------------------------------------------------------------- */

ALTER TABLE [dbo].[PIMS_PROJECT] ADD CONSTRAINT [PIM_PRJTYP_PIM_PROJCT_FK] 
    FOREIGN KEY ([PROJECT_TYPE_CODE]) REFERENCES [dbo].[PIMS_PROJECT_TYPE] ([PROJECT_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_PROJECT] ADD CONSTRAINT [PIM_PRJSTY_PIM_PROJCT_FK] 
    FOREIGN KEY ([PROJECT_STATUS_TYPE_CODE]) REFERENCES [dbo].[PIMS_PROJECT_STATUS_TYPE] ([PROJECT_STATUS_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_PROJECT] ADD CONSTRAINT [PIM_PRJRSK_PIM_PROJCT_FK] 
    FOREIGN KEY ([PROJECT_RISK_TYPE_CODE]) REFERENCES [dbo].[PIMS_PROJECT_RISK_TYPE] ([PROJECT_RISK_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_PROJECT] ADD CONSTRAINT [PIM_PROJTR_PIM_PROJCT_FK] 
    FOREIGN KEY ([PROJECT_TIER_TYPE_CODE]) REFERENCES [dbo].[PIMS_PROJECT_TIER_TYPE] ([PROJECT_TIER_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY] ADD CONSTRAINT [PIM_PRPTYP_PIM_PRPRTY_FK] 
    FOREIGN KEY ([PROPERTY_TYPE_CODE]) REFERENCES [dbo].[PIMS_PROPERTY_TYPE] ([PROPERTY_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY] ADD CONSTRAINT [PIM_ADDRSS_PIM_PRPRTY_FK] 
    FOREIGN KEY ([ADDRESS_ID]) REFERENCES [dbo].[PIMS_ADDRESS] ([ADDRESS_ID])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY] ADD CONSTRAINT [PIM_REGION_PIM_PRPRTY_FK] 
    FOREIGN KEY ([REGION_CODE]) REFERENCES [dbo].[PIMS_REGION] ([REGION_CODE])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY] ADD CONSTRAINT [PIM_DSTRCT_PIM_PRPRTY_FK] 
    FOREIGN KEY ([DISTRICT_CODE]) REFERENCES [dbo].[PIMS_DISTRICT] ([DISTRICT_CODE])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY] ADD CONSTRAINT [PIM_PRPCLT_PIM_PRPRTY_FK] 
    FOREIGN KEY ([PROPERTY_CLASSIFICATION_TYPE_CODE]) REFERENCES [dbo].[PIMS_PROPERTY_CLASSIFICATION_TYPE] ([PROPERTY_CLASSIFICATION_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY] ADD CONSTRAINT [PIM_PRPTNR_PIM_PRPRTY_FK] 
    FOREIGN KEY ([PROPERTY_TENURE_TYPE_CODE]) REFERENCES [dbo].[PIMS_PROPERTY_TENURE_TYPE] ([PROPERTY_TENURE_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY] ADD CONSTRAINT [PIM_ARUNIT_PIM_PRPRTY_FK] 
    FOREIGN KEY ([PROPERTY_AREA_UNIT_TYPE_CODE]) REFERENCES [dbo].[PIMS_AREA_UNIT_TYPE] ([AREA_UNIT_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY] ADD CONSTRAINT [PIM_PRPSTS_PIM_PRPRTY_FK] 
    FOREIGN KEY ([PROPERTY_STATUS_TYPE_CODE]) REFERENCES [dbo].[PIMS_PROPERTY_STATUS_TYPE] ([PROPERTY_STATUS_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY] ADD CONSTRAINT [PIM_PIDSRT_PIM_PRPRTY_FK] 
    FOREIGN KEY ([PROPERTY_DATA_SOURCE_TYPE_CODE]) REFERENCES [dbo].[PIMS_PROPERTY_DATA_SOURCE_TYPE] ([PROPERTY_DATA_SOURCE_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_ACTIVITY] ADD CONSTRAINT [PIM_PROJCT_PIM_ACTVTY_FK] 
    FOREIGN KEY ([PROJECT_ID]) REFERENCES [dbo].[PIMS_PROJECT] ([PROJECT_ID])
GO


ALTER TABLE [dbo].[PIMS_ACTIVITY] ADD CONSTRAINT [PIM_PRWKMD_PIM_ACTVTY_FK] 
    FOREIGN KEY ([WORKFLOW_ID]) REFERENCES [dbo].[PIMS_PROJECT_WORKFLOW_MODEL] ([PROJECT_WORKFLOW_MODEL_ID])
GO


ALTER TABLE [dbo].[PIMS_ACTIVITY] ADD CONSTRAINT [PIM_ACTMDL_PIM_ACTVTY_FK] 
    FOREIGN KEY ([ACTIVITY_MODEL_ID]) REFERENCES [dbo].[PIMS_ACTIVITY_MODEL] ([ACTIVITY_MODEL_ID])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY_SERVICE_FILE] ADD CONSTRAINT [PIM_PRSVFT_PIM_PRPSVC_FK] 
    FOREIGN KEY ([PROPERTY_SERVICE_FILE_TYPE_CODE]) REFERENCES [dbo].[PIMS_PROPERTY_SERVICE_FILE_TYPE] ([PROPERTY_SERVICE_FILE_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_TASK] ADD CONSTRAINT [PIM_TSKTMP_PIM_TASK_FK] 
    FOREIGN KEY ([TASK_TEMPLATE_ID]) REFERENCES [dbo].[PIMS_TASK_TEMPLATE] ([TASK_TEMPLATE_ID])
GO


ALTER TABLE [dbo].[PIMS_TASK] ADD CONSTRAINT [PIM_ACTVTY_PIM_TASK_FK] 
    FOREIGN KEY ([ACTIVITY_ID]) REFERENCES [dbo].[PIMS_ACTIVITY] ([ACTIVITY_ID])
GO


ALTER TABLE [dbo].[PIMS_TASK] ADD CONSTRAINT [PIM_USER_PIM_TASK_FK] 
    FOREIGN KEY ([USER_ID]) REFERENCES [dbo].[PIMS_USER] ([USER_ID])
GO


ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE] ADD CONSTRAINT [PIM_TSKTMT_PIM_TSKTMP_FK] 
    FOREIGN KEY ([TASK_TEMPLATE_TYPE_CODE]) REFERENCES [dbo].[PIMS_TASK_TEMPLATE_TYPE] ([TASK_TEMPLATE_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_USER] ADD CONSTRAINT [PIM_PERSON_PIM_USER_FK] 
    FOREIGN KEY ([PERSON_ID]) REFERENCES [dbo].[PIMS_PERSON] ([PERSON_ID])
GO


ALTER TABLE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL] ADD CONSTRAINT [PIM_WFLMDL_PIM_PRWKMD_FK] 
    FOREIGN KEY ([WORKFLOW_MODEL_ID]) REFERENCES [dbo].[PIMS_WORKFLOW_MODEL] ([WORKFLOW_MODEL_ID])
GO


ALTER TABLE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL] ADD CONSTRAINT [PIM_PROJCT_PIM_PRWKMD_FK] 
    FOREIGN KEY ([PROJECT_ID]) REFERENCES [dbo].[PIMS_PROJECT] ([PROJECT_ID])
GO


ALTER TABLE [dbo].[PIMS_PROJECT_PROPERTY] ADD CONSTRAINT [PIM_PRPRTY_PIM_PRJPRP_FK] 
    FOREIGN KEY ([PROPERTY_ID]) REFERENCES [dbo].[PIMS_PROPERTY] ([PROPERTY_ID])
GO


ALTER TABLE [dbo].[PIMS_PROJECT_PROPERTY] ADD CONSTRAINT [PIM_PROJCT_PIM_PRJPRP_FK] 
    FOREIGN KEY ([PROJECT_ID]) REFERENCES [dbo].[PIMS_PROJECT] ([PROJECT_ID])
GO


ALTER TABLE [dbo].[PIMS_WORKFLOW_MODEL] ADD CONSTRAINT [PIM_WFLMDT_PIM_WFLMDL_FK] 
    FOREIGN KEY ([WORKFLOW_MODEL_TYPE_CODE]) REFERENCES [dbo].[PIMS_WORKFLOW_MODEL_TYPE] ([WORKFLOW_MODEL_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY] ADD CONSTRAINT [PIM_ACTVTY_PIM_PRPACT_FK] 
    FOREIGN KEY ([ACTIVITY_ID]) REFERENCES [dbo].[PIMS_ACTIVITY] ([ACTIVITY_ID])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY] ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPACT_FK] 
    FOREIGN KEY ([PROPERTY_ID]) REFERENCES [dbo].[PIMS_PROPERTY] ([PROPERTY_ID])
GO


ALTER TABLE [dbo].[PIMS_ADDRESS] ADD CONSTRAINT [PIM_DSTRCT_PIM_ADDRSS_FK] 
    FOREIGN KEY ([DISTRICT_CODE]) REFERENCES [dbo].[PIMS_DISTRICT] ([DISTRICT_CODE])
GO


ALTER TABLE [dbo].[PIMS_ADDRESS] ADD CONSTRAINT [PIM_REGION_PIM_ADDRSS_FK] 
    FOREIGN KEY ([REGION_CODE]) REFERENCES [dbo].[PIMS_REGION] ([REGION_CODE])
GO


ALTER TABLE [dbo].[PIMS_ADDRESS] ADD CONSTRAINT [PIM_ADUSGT_PIM_ADDRSS_FK] 
    FOREIGN KEY ([ADDRESS_USAGE_TYPE_CODE]) REFERENCES [dbo].[PIMS_ADDRESS_USAGE_TYPE] ([ADDRESS_USAGE_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_ADDRESS] ADD CONSTRAINT [PIM_PROVNC_PIM_ADDRSS_FK] 
    FOREIGN KEY ([PROVINCE_STATE_ID]) REFERENCES [dbo].[PIMS_PROVINCE_STATE] ([PROVINCE_STATE_ID])
GO


ALTER TABLE [dbo].[PIMS_ADDRESS] ADD CONSTRAINT [PIM_CNTRY_PIM_ADDRSS_FK] 
    FOREIGN KEY ([COUNTRY_ID]) REFERENCES [dbo].[PIMS_COUNTRY] ([COUNTRY_ID])
GO


ALTER TABLE [dbo].[PIMS_DISTRICT] ADD CONSTRAINT [PIM_REGION_PIM_DSTRCT_FK] 
    FOREIGN KEY ([REGION_CODE]) REFERENCES [dbo].[PIMS_REGION] ([REGION_CODE])
GO


ALTER TABLE [dbo].[PIMS_PROVINCE_STATE] ADD CONSTRAINT [PIM_CNTRY_PIM_PROVNC_FK] 
    FOREIGN KEY ([COUNTRY_ID]) REFERENCES [dbo].[PIMS_COUNTRY] ([COUNTRY_ID])
GO


ALTER TABLE [dbo].[PIMS_ORGANIZATION] ADD CONSTRAINT [PIM_ADDRSS_PIM_ORG_FK] 
    FOREIGN KEY ([ADDRESS_ID]) REFERENCES [dbo].[PIMS_ADDRESS] ([ADDRESS_ID])
GO


ALTER TABLE [dbo].[PIMS_ORGANIZATION] ADD CONSTRAINT [PIM_ORGTYP_PIM_ORG_FK] 
    FOREIGN KEY ([ORGANIZATION_TYPE_CODE]) REFERENCES [dbo].[PIMS_ORGANIZATION_TYPE] ([ORGANIZATION_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_ORGANIZATION] ADD CONSTRAINT [PIM_ORG_PIM_PRNT_ORG_FK] 
    FOREIGN KEY ([PRNT_ORGANIZATION_ID]) REFERENCES [dbo].[PIMS_ORGANIZATION] ([ORGANIZATION_ID])
GO


ALTER TABLE [dbo].[PIMS_ORGANIZATION] ADD CONSTRAINT [PIM_DSTRCT_PIM_ORG_FK] 
    FOREIGN KEY ([DISTRICT_CODE]) REFERENCES [dbo].[PIMS_DISTRICT] ([DISTRICT_CODE])
GO


ALTER TABLE [dbo].[PIMS_ORGANIZATION] ADD CONSTRAINT [PIM_REGION_PIM_ORG_FK] 
    FOREIGN KEY ([REGION_CODE]) REFERENCES [dbo].[PIMS_REGION] ([REGION_CODE])
GO


ALTER TABLE [dbo].[PIMS_ORGANIZATION] ADD CONSTRAINT [PIM_ORGIDT_PIM_ORG_FK] 
    FOREIGN KEY ([ORG_IDENTIFIER_TYPE_CODE]) REFERENCES [dbo].[PIMS_ORG_IDENTIFIER_TYPE] ([ORG_IDENTIFIER_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION] ADD CONSTRAINT [PIM_USER_PIM_USRORG_FK] 
    FOREIGN KEY ([USER_ID]) REFERENCES [dbo].[PIMS_USER] ([USER_ID])
GO


ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION] ADD CONSTRAINT [PIM_ORG_PIM_USRORG_FK] 
    FOREIGN KEY ([ORGANIZATION_ID]) REFERENCES [dbo].[PIMS_ORGANIZATION] ([ORGANIZATION_ID])
GO


ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION] ADD CONSTRAINT [PIM_ROLE_PIM_USRORG_FK] 
    FOREIGN KEY ([ROLE_ID]) REFERENCES [dbo].[PIMS_ROLE] ([ROLE_ID])
GO


ALTER TABLE [dbo].[PIMS_ROLE_CLAIM] ADD CONSTRAINT [PIM_CLMTYP_PIM_ROLCLM_FK] 
    FOREIGN KEY ([CLAIM_ID]) REFERENCES [dbo].[PIMS_CLAIM] ([CLAIM_ID])
GO


ALTER TABLE [dbo].[PIMS_ROLE_CLAIM] ADD CONSTRAINT [PIM_ROLE_PIM_ROLCLM_FK] 
    FOREIGN KEY ([ROLE_ID]) REFERENCES [dbo].[PIMS_ROLE] ([ROLE_ID])
GO


ALTER TABLE [dbo].[PIMS_PERSON] ADD CONSTRAINT [PIM_ADDRSS_PIM_PERSON_FK] 
    FOREIGN KEY ([ADDRESS_ID]) REFERENCES [dbo].[PIMS_ADDRESS] ([ADDRESS_ID])
GO


ALTER TABLE [dbo].[PIMS_PERSON_ORGANIZATION] ADD CONSTRAINT [PIM_PERSON_PIM_PERORG_FK] 
    FOREIGN KEY ([PERSON_ID]) REFERENCES [dbo].[PIMS_PERSON] ([PERSON_ID])
GO


ALTER TABLE [dbo].[PIMS_PERSON_ORGANIZATION] ADD CONSTRAINT [PIM_ORG_PIM_PERORG_FK] 
    FOREIGN KEY ([ORGANIZATION_ID]) REFERENCES [dbo].[PIMS_ORGANIZATION] ([ORGANIZATION_ID])
GO


ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST] ADD CONSTRAINT [PIM_USER_PIM_ACRQST_FK] 
    FOREIGN KEY ([USER_ID]) REFERENCES [dbo].[PIMS_USER] ([USER_ID])
GO


ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST] ADD CONSTRAINT [PIM_ARQSTT_PIM_ACRQST_FK] 
    FOREIGN KEY ([ACCESS_REQUEST_STATUS_TYPE_CODE]) REFERENCES [dbo].[PIMS_ACCESS_REQUEST_STATUS_TYPE] ([ACCESS_REQUEST_STATUS_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST] ADD CONSTRAINT [PIM_ROLE_PIM_ACRQST_FK] 
    FOREIGN KEY ([ROLE_ID]) REFERENCES [dbo].[PIMS_ROLE] ([ROLE_ID])
GO


ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION] ADD CONSTRAINT [PIM_ORG_PIM_ACRQOR_FK] 
    FOREIGN KEY ([ORGANIZATION_ID]) REFERENCES [dbo].[PIMS_ORGANIZATION] ([ORGANIZATION_ID])
GO


ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION] ADD CONSTRAINT [PIM_ACRQST_PIM_ACRQOR_FK] 
    FOREIGN KEY ([ACCESS_REQUEST_ID]) REFERENCES [dbo].[PIMS_ACCESS_REQUEST] ([ACCESS_REQUEST_ID])
GO


ALTER TABLE [dbo].[PIMS_PROJECT_NOTE] ADD CONSTRAINT [PIM_PROJCT_PIM_PROJNT_FK] 
    FOREIGN KEY ([PROJECT_ID]) REFERENCES [dbo].[PIMS_PROJECT] ([PROJECT_ID])
GO


ALTER TABLE [dbo].[PIMS_USER_ROLE] ADD CONSTRAINT [PIM_USER_PIM_USERRL_FK] 
    FOREIGN KEY ([USER_ID]) REFERENCES [dbo].[PIMS_USER] ([USER_ID])
GO


ALTER TABLE [dbo].[PIMS_USER_ROLE] ADD CONSTRAINT [PIM_ROLE_PIM_USERRL_FK] 
    FOREIGN KEY ([ROLE_ID]) REFERENCES [dbo].[PIMS_ROLE] ([ROLE_ID])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE] ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRSF_FK] 
    FOREIGN KEY ([PROPERTY_ID]) REFERENCES [dbo].[PIMS_PROPERTY] ([PROPERTY_ID])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE] ADD CONSTRAINT [PIM_PRPSVC_PIM_PRPRSF_FK] 
    FOREIGN KEY ([PROPERTY_SERVICE_FILE_ID]) REFERENCES [dbo].[PIMS_PROPERTY_SERVICE_FILE] ([PROPERTY_SERVICE_FILE_ID])
GO


ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL] ADD CONSTRAINT [PIM_TSKTMP_PIM_TSKTAM_FK] 
    FOREIGN KEY ([TASK_TEMPLATE_ID]) REFERENCES [dbo].[PIMS_TASK_TEMPLATE] ([TASK_TEMPLATE_ID])
GO


ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL] ADD CONSTRAINT [PIM_ACTMDL_PIM_TSKTAM_FK] 
    FOREIGN KEY ([ACTIVITY_MODEL_ID]) REFERENCES [dbo].[PIMS_ACTIVITY_MODEL] ([ACTIVITY_MODEL_ID])
GO


ALTER TABLE [dbo].[PIMS_CONTACT_METHOD] ADD CONSTRAINT [PIM_CNTMTT_PIM_CNTMTH_FK] 
    FOREIGN KEY ([CONTACT_METHOD_TYPE_CODE]) REFERENCES [dbo].[PIMS_CONTACT_METHOD_TYPE] ([CONTACT_METHOD_TYPE_CODE])
GO


ALTER TABLE [dbo].[PIMS_CONTACT_METHOD] ADD CONSTRAINT [PIM_PERSON_PIM_CNTMTH_FK] 
    FOREIGN KEY ([PERSON_ID]) REFERENCES [dbo].[PIMS_PERSON] ([PERSON_ID])
GO


ALTER TABLE [dbo].[PIMS_CONTACT_METHOD] ADD CONSTRAINT [PIM_ORG_PIM_CNTMTH_FK] 
    FOREIGN KEY ([ORGANIZATION_ID]) REFERENCES [dbo].[PIMS_ORGANIZATION] ([ORGANIZATION_ID])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION] ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPORG_FK] 
    FOREIGN KEY ([PROPERTY_ID]) REFERENCES [dbo].[PIMS_PROPERTY] ([PROPERTY_ID])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION] ADD CONSTRAINT [PIM_ORG_PIM_PRPORG_FK] 
    FOREIGN KEY ([ORGANIZATION_ID]) REFERENCES [dbo].[PIMS_ORGANIZATION] ([ORGANIZATION_ID])
GO


ALTER TABLE [dbo].[PIMS_PROPERTY_EVALUATION] ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPEVL_FK] 
    FOREIGN KEY ([PROPERTY_ID]) REFERENCES [dbo].[PIMS_PROPERTY] ([PROPERTY_ID])
GO


/* ---------------------------------------------------------------------- */
/* Add views                                                              */
/* ---------------------------------------------------------------------- */

CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_VW] AS
SELECT PROP.PROPERTY_ID              
     , PROP.PID                
     , PROP.PIN                   
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , PROP.PROPERTY_CLASSIFICATION_TYPE_CODE
     , PROP.PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE             
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.NAME
     , PROP.DESCRIPTION
     , PROP.ADDRESS_ID                 
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.ENCUMBRANCE_REASON
     , PROP.IS_SENSITIVE
     , PROP.IS_OWNED
     , PROP.IS_PROPERTY_OF_INTEREST
     , PROP.IS_VISIBLE_TO_OTHER_AGENCIES
     , PROP.ZONING,ZONING_POTENTIAL
FROM   PIMS_PROPERTY       PROP                                                    INNER JOIN
       PIMS_ADDRESS        ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        INNER JOIN
       PIMS_PROVINCE_STATE PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID INNER JOIN
       PIMS_COUNTRY        CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
GO


CREATE VIEW [dbo].[PIMS_PROPERTY_LOCATION_VW] AS
SELECT PROP.PROPERTY_ID              
     , PROP.PID                
     , PROP.PIN                   
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , PROP.PROPERTY_CLASSIFICATION_TYPE_CODE
     , PROP.PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE      
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.NAME
     , PROP.DESCRIPTION
     , PROP.ADDRESS_ID                 
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.LOCATION AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.ENCUMBRANCE_REASON
     , PROP.IS_SENSITIVE
     , PROP.IS_OWNED
     , PROP.IS_PROPERTY_OF_INTEREST
     , PROP.IS_VISIBLE_TO_OTHER_AGENCIES
     , PROP.ZONING,ZONING_POTENTIAL
FROM   PIMS_PROPERTY       PROP                                                    INNER JOIN
       PIMS_ADDRESS        ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        INNER JOIN
       PIMS_PROVINCE_STATE PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID INNER JOIN
       PIMS_COUNTRY        CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID                       
GO


/* ---------------------------------------------------------------------- */
/* Add procedures                                                         */
/* ---------------------------------------------------------------------- */

/* ---------------------------------------------------------------------- */
/* Add procedures                                                         */
/* ---------------------------------------------------------------------- */

-- ............................................................................................


-- --------------------------------------------------------------------------------------------
-- Create procedure [dbo].[pims_error_handling]
-- --------------------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pims_error_handling] AS
  begin
    DECLARE @errmsg   nvarchar(2048),
      @severity tinyint,
      @state    tinyint,
      @errno    int,
      @proc     sysname,
      @lineno   int

    SELECT @errmsg = error_message(), @severity = error_severity(),
      @state  = error_state(), @errno = error_number(),
      @proc   = error_procedure(), @lineno = error_line()

    IF @errmsg NOT LIKE '***%'
      BEGIN
        SELECT @errmsg = '*** ' + coalesce(quotename(@proc), '<dynamic SQL>') +
          ', Line ' + ltrim(str(@lineno)) + '. Errno ' +
          ltrim(str(@errno)) + ': ' + @errmsg
      END

    RAISERROR('%s', @severity, @state, @errmsg)
  end
GO


/* ---------------------------------------------------------------------- */
/* Add triggers                                                           */
/* ---------------------------------------------------------------------- */

CREATE TRIGGER [dbo].[P19_I_S_I_TR] ON PIMS_PROJECT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROJECT ("PROJECT_ID",
      "PROJECT_TYPE_CODE",
      "PROJECT_STATUS_TYPE_CODE",
      "PROJECT_RISK_TYPE_CODE",
      "PROJECT_TIER_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROJECT_ID",
      "PROJECT_TYPE_CODE",
      "PROJECT_STATUS_TYPE_CODE",
      "PROJECT_RISK_TYPE_CODE",
      "PROJECT_TIER_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[P19_I_S_U_TR] ON PIMS_PROJECT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_ID = deleted.PROJECT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT
    set "PROJECT_ID" = inserted."PROJECT_ID",
      "PROJECT_TYPE_CODE" = inserted."PROJECT_TYPE_CODE",
      "PROJECT_STATUS_TYPE_CODE" = inserted."PROJECT_STATUS_TYPE_CODE",
      "PROJECT_RISK_TYPE_CODE" = inserted."PROJECT_RISK_TYPE_CODE",
      "PROJECT_TIER_TYPE_CODE" = inserted."PROJECT_TIER_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT
    inner join inserted
    on (PIMS_PROJECT.PROJECT_ID = inserted.PROJECT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[P11_A_S_IUD_TR] ON PIMS_PROJECT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_HIST set END_DATE_HIST = @curr_date where PROJECT_ID in (select PROJECT_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_HIST ([PROJECT_ID], [PROJECT_TYPE_CODE], [PROJECT_STATUS_TYPE_CODE], [PROJECT_RISK_TYPE_CODE], [PROJECT_TIER_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_ID], [PROJECT_TYPE_CODE], [PROJECT_STATUS_TYPE_CODE], [PROJECT_RISK_TYPE_CODE], [PROJECT_TIER_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_H_ID_SEQ]) as [_PROJECT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[P15_A_S_IUD_TR] ON PIMS_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_HIST set END_DATE_HIST = @curr_date where PROPERTY_ID in (select PROPERTY_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_HIST ([PROPERTY_ID], [PROPERTY_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_TENURE_TYPE_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [NAME], [DESCRIPTION], [PID], [PIN], [LAND_AREA], [ENCUMBRANCE_REASON], [IS_OWNED], [IS_PROPERTY_OF_INTEREST], [IS_VISIBLE_TO_OTHER_AGENCIES], [IS_SENSITIVE], [ZONING], [ZONING_POTENTIAL], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ID], [PROPERTY_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_TENURE_TYPE_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [NAME], [DESCRIPTION], [PID], [PIN], [LAND_AREA], [ENCUMBRANCE_REASON], [IS_OWNED], [IS_PROPERTY_OF_INTEREST], [IS_VISIBLE_TO_OTHER_AGENCIES], [IS_SENSITIVE], [ZONING], [ZONING_POTENTIAL], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_H_ID_SEQ]) as [_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[P27_I_S_I_TR] ON PIMS_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY ("PROPERTY_ID",
      "PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_TENURE_TYPE_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME",
      "DESCRIPTION",
      "PID",
      "PIN",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "ENCUMBRANCE_REASON",
      "IS_OWNED",
      "IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE",
      "ZONING",
      "ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ID",
      "PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_TENURE_TYPE_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME",
      "DESCRIPTION",
      "PID",
      "PIN",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "ENCUMBRANCE_REASON",
      "IS_OWNED",
      "IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE",
      "ZONING",
      "ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[P27_I_S_U_TR] ON PIMS_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ID = deleted.PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY
    set "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE" = inserted."PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROPERTY_TENURE_TYPE_CODE" = inserted."PROPERTY_TENURE_TYPE_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE" = inserted."PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE" = inserted."PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE" = inserted."PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "PID" = inserted."PID",
      "PIN" = inserted."PIN",
      "LAND_AREA" = inserted."LAND_AREA",
      "LAND_LEGAL_DESCRIPTION" = inserted."LAND_LEGAL_DESCRIPTION",
      "BOUNDARY" = inserted."BOUNDARY",
      "LOCATION" = inserted."LOCATION",
      "ENCUMBRANCE_REASON" = inserted."ENCUMBRANCE_REASON",
      "IS_OWNED" = inserted."IS_OWNED",
      "IS_PROPERTY_OF_INTEREST" = inserted."IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES" = inserted."IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE" = inserted."IS_SENSITIVE",
      "ZONING" = inserted."ZONING",
      "ZONING_POTENTIAL" = inserted."ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY
    inner join inserted
    on (PIMS_PROPERTY.PROPERTY_ID = inserted.PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[A4_I_S_U_TR] ON PIMS_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_ID = deleted.ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY
    set "ACTIVITY_ID" = inserted."ACTIVITY_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "WORKFLOW_ID" = inserted."WORKFLOW_ID",
      "ACTIVITY_MODEL_ID" = inserted."ACTIVITY_MODEL_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY
    inner join inserted
    on (PIMS_ACTIVITY.ACTIVITY_ID = inserted.ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[A4_I_S_I_TR] ON PIMS_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ACTIVITY ("ACTIVITY_ID",
      "PROJECT_ID",
      "WORKFLOW_ID",
      "ACTIVITY_MODEL_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_ID",
      "PROJECT_ID",
      "WORKFLOW_ID",
      "ACTIVITY_MODEL_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[A3_A_S_IUD_TR] ON PIMS_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_HIST set END_DATE_HIST = @curr_date where ACTIVITY_ID in (select ACTIVITY_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_HIST ([ACTIVITY_ID], [PROJECT_ID], [WORKFLOW_ID], [ACTIVITY_MODEL_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_ID], [PROJECT_ID], [WORKFLOW_ID], [ACTIVITY_MODEL_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_H_ID_SEQ]) as [_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PSF20_A_S_IUD_TR] ON PIMS_PROPERTY_SERVICE_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_SERVICE_FILE_HIST set END_DATE_HIST = @curr_date where PROPERTY_SERVICE_FILE_ID in (select PROPERTY_SERVICE_FILE_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_SERVICE_FILE_HIST ([PROPERTY_SERVICE_FILE_ID], [PROPERTY_SERVICE_FILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_SERVICE_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_SERVICE_FILE_ID], [PROPERTY_SERVICE_FILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_SERVICE_FILE_H_ID_SEQ]) as [_PROPERTY_SERVICE_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PSF34_I_S_U_TR] ON PIMS_PROPERTY_SERVICE_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_SERVICE_FILE_ID = deleted.PROPERTY_SERVICE_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_SERVICE_FILE
    set "PROPERTY_SERVICE_FILE_ID" = inserted."PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_SERVICE_FILE_TYPE_CODE" = inserted."PROPERTY_SERVICE_FILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_SERVICE_FILE
    inner join inserted
    on (PIMS_PROPERTY_SERVICE_FILE.PROPERTY_SERVICE_FILE_ID = inserted.PROPERTY_SERVICE_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PSF34_I_S_I_TR] ON PIMS_PROPERTY_SERVICE_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_SERVICE_FILE ("PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_SERVICE_FILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_SERVICE_FILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[T43_I_S_I_TR] ON PIMS_TASK INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_TASK ("TASK_ID",
      "TASK_TEMPLATE_ID",
      "ACTIVITY_ID",
      "USER_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "TASK_ID",
      "TASK_TEMPLATE_ID",
      "ACTIVITY_ID",
      "USER_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[T43_I_S_U_TR] ON PIMS_TASK INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TASK_ID = deleted.TASK_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TASK
    set "TASK_ID" = inserted."TASK_ID",
      "TASK_TEMPLATE_ID" = inserted."TASK_TEMPLATE_ID",
      "ACTIVITY_ID" = inserted."ACTIVITY_ID",
      "USER_ID" = inserted."USER_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TASK
    inner join inserted
    on (PIMS_TASK.TASK_ID = inserted.TASK_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[T23_A_S_IUD_TR] ON PIMS_TASK FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_TASK_HIST set END_DATE_HIST = @curr_date where TASK_ID in (select TASK_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_TASK_HIST ([TASK_ID], [TASK_TEMPLATE_ID], [ACTIVITY_ID], [USER_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _TASK_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [TASK_ID], [TASK_TEMPLATE_ID], [ACTIVITY_ID], [USER_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_TASK_H_ID_SEQ]) as [_TASK_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[AM4_A_S_IUD_TR] ON PIMS_ACTIVITY_MODEL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_MODEL_HIST set END_DATE_HIST = @curr_date where ACTIVITY_MODEL_ID in (select ACTIVITY_MODEL_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_MODEL_HIST ([ACTIVITY_MODEL_ID], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_MODEL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_MODEL_ID], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_MODEL_H_ID_SEQ]) as [_ACTIVITY_MODEL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[AM5_I_S_I_TR] ON PIMS_ACTIVITY_MODEL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ACTIVITY_MODEL ("ACTIVITY_MODEL_ID",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_MODEL_ID",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[AM5_I_S_U_TR] ON PIMS_ACTIVITY_MODEL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_MODEL_ID = deleted.ACTIVITY_MODEL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_MODEL
    set "ACTIVITY_MODEL_ID" = inserted."ACTIVITY_MODEL_ID",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_MODEL
    inner join inserted
    on (PIMS_ACTIVITY_MODEL.ACTIVITY_MODEL_ID = inserted.ACTIVITY_MODEL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[TT24_A_S_IUD_TR] ON PIMS_TASK_TEMPLATE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_TASK_TEMPLATE_HIST set END_DATE_HIST = @curr_date where TASK_TEMPLATE_ID in (select TASK_TEMPLATE_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_TASK_TEMPLATE_HIST ([TASK_TEMPLATE_ID], [TASK_TEMPLATE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _TASK_TEMPLATE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [TASK_TEMPLATE_ID], [TASK_TEMPLATE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_TASK_TEMPLATE_H_ID_SEQ]) as [_TASK_TEMPLATE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[TT44_I_S_U_TR] ON PIMS_TASK_TEMPLATE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TASK_TEMPLATE_ID = deleted.TASK_TEMPLATE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TASK_TEMPLATE
    set "TASK_TEMPLATE_ID" = inserted."TASK_TEMPLATE_ID",
      "TASK_TEMPLATE_TYPE_CODE" = inserted."TASK_TEMPLATE_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TASK_TEMPLATE
    inner join inserted
    on (PIMS_TASK_TEMPLATE.TASK_TEMPLATE_ID = inserted.TASK_TEMPLATE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[TT44_I_S_I_TR] ON PIMS_TASK_TEMPLATE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_TASK_TEMPLATE ("TASK_TEMPLATE_ID",
      "TASK_TEMPLATE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "TASK_TEMPLATE_ID",
      "TASK_TEMPLATE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[U47_I_S_I_TR] ON PIMS_USER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_USER ("USER_ID",
      "PERSON_ID",
      "BUSINESS_IDENTIFIER_VALUE",
      "GUID_IDENTIFIER_VALUE",
      "POSITION",
      "NOTE",
      "LAST_LOGIN",
      "APPROVED_BY_ID",
      "ISSUE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "USER_ID",
      "PERSON_ID",
      "BUSINESS_IDENTIFIER_VALUE",
      "GUID_IDENTIFIER_VALUE",
      "POSITION",
      "NOTE",
      "LAST_LOGIN",
      "APPROVED_BY_ID",
      "ISSUE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[U47_I_S_U_TR] ON PIMS_USER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.USER_ID = deleted.USER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_USER
    set "USER_ID" = inserted."USER_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "BUSINESS_IDENTIFIER_VALUE" = inserted."BUSINESS_IDENTIFIER_VALUE",
      "GUID_IDENTIFIER_VALUE" = inserted."GUID_IDENTIFIER_VALUE",
      "POSITION" = inserted."POSITION",
      "NOTE" = inserted."NOTE",
      "LAST_LOGIN" = inserted."LAST_LOGIN",
      "APPROVED_BY_ID" = inserted."APPROVED_BY_ID",
      "ISSUE_DATE" = inserted."ISSUE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER
    inner join inserted
    on (PIMS_USER.USER_ID = inserted.USER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[U26_A_S_IUD_TR] ON PIMS_USER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_USER_HIST set END_DATE_HIST = @curr_date where USER_ID in (select USER_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_USER_HIST ([USER_ID], [PERSON_ID], [BUSINESS_IDENTIFIER_VALUE], [GUID_IDENTIFIER_VALUE], [POSITION], [NOTE], [LAST_LOGIN], [APPROVED_BY_ID], [ISSUE_DATE], [EXPIRY_DATE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _USER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ID], [PERSON_ID], [BUSINESS_IDENTIFIER_VALUE], [GUID_IDENTIFIER_VALUE], [POSITION], [NOTE], [LAST_LOGIN], [APPROVED_BY_ID], [ISSUE_DATE], [EXPIRY_DATE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_USER_H_ID_SEQ]) as [_USER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PWM26_I_S_U_TR] ON PIMS_PROJECT_WORKFLOW_MODEL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_WORKFLOW_MODEL_ID = deleted.PROJECT_WORKFLOW_MODEL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_WORKFLOW_MODEL
    set "PROJECT_WORKFLOW_MODEL_ID" = inserted."PROJECT_WORKFLOW_MODEL_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "WORKFLOW_MODEL_ID" = inserted."WORKFLOW_MODEL_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_WORKFLOW_MODEL
    inner join inserted
    on (PIMS_PROJECT_WORKFLOW_MODEL.PROJECT_WORKFLOW_MODEL_ID = inserted.PROJECT_WORKFLOW_MODEL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PWM26_I_S_I_TR] ON PIMS_PROJECT_WORKFLOW_MODEL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROJECT_WORKFLOW_MODEL ("PROJECT_WORKFLOW_MODEL_ID",
      "PROJECT_ID",
      "WORKFLOW_MODEL_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROJECT_WORKFLOW_MODEL_ID",
      "PROJECT_ID",
      "WORKFLOW_MODEL_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PWM14_A_S_IUD_TR] ON PIMS_PROJECT_WORKFLOW_MODEL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_WORKFLOW_MODEL_HIST set END_DATE_HIST = @curr_date where PROJECT_WORKFLOW_MODEL_ID in (select PROJECT_WORKFLOW_MODEL_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_WORKFLOW_MODEL_HIST ([PROJECT_WORKFLOW_MODEL_ID], [PROJECT_ID], [WORKFLOW_MODEL_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_WORKFLOW_MODEL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_WORKFLOW_MODEL_ID], [PROJECT_ID], [WORKFLOW_MODEL_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_H_ID_SEQ]) as [_PROJECT_WORKFLOW_MODEL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PP21_I_S_I_TR] ON PIMS_PROJECT_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROJECT_PROPERTY ("PROJECT_PROPERTY_ID",
      "PROJECT_ID",
      "PROPERTY_ID",
      "IS_DISABLED",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_PROPERTY_ID",
      "PROJECT_ID",
      "PROPERTY_ID",
      "IS_DISABLED",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PP21_I_S_U_TR] ON PIMS_PROJECT_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_PROPERTY_ID = deleted.PROJECT_PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_PROPERTY
    set "PROJECT_PROPERTY_ID" = inserted."PROJECT_PROPERTY_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_PROPERTY
    inner join inserted
    on (PIMS_PROJECT_PROPERTY.PROJECT_PROPERTY_ID = inserted.PROJECT_PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PP13_A_S_IUD_TR] ON PIMS_PROJECT_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_PROPERTY_HIST set END_DATE_HIST = @curr_date where PROJECT_PROPERTY_ID in (select PROJECT_PROPERTY_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_PROPERTY_HIST ([PROJECT_PROPERTY_ID], [PROJECT_ID], [PROPERTY_ID], [IS_DISABLED], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_PROPERTY_ID], [PROJECT_ID], [PROPERTY_ID], [IS_DISABLED], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_PROPERTY_H_ID_SEQ]) as [_PROJECT_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[WM29_A_S_IUD_TR] ON PIMS_WORKFLOW_MODEL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_WORKFLOW_MODEL_HIST set END_DATE_HIST = @curr_date where WORKFLOW_MODEL_ID in (select WORKFLOW_MODEL_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_WORKFLOW_MODEL_HIST ([WORKFLOW_MODEL_ID], [WORKFLOW_MODEL_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _WORKFLOW_MODEL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [WORKFLOW_MODEL_ID], [WORKFLOW_MODEL_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_WORKFLOW_MODEL_H_ID_SEQ]) as [_WORKFLOW_MODEL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[WM50_I_S_U_TR] ON PIMS_WORKFLOW_MODEL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.WORKFLOW_MODEL_ID = deleted.WORKFLOW_MODEL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_WORKFLOW_MODEL
    set "WORKFLOW_MODEL_ID" = inserted."WORKFLOW_MODEL_ID",
      "WORKFLOW_MODEL_TYPE_CODE" = inserted."WORKFLOW_MODEL_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_WORKFLOW_MODEL
    inner join inserted
    on (PIMS_WORKFLOW_MODEL.WORKFLOW_MODEL_ID = inserted.WORKFLOW_MODEL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[WM50_I_S_I_TR] ON PIMS_WORKFLOW_MODEL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_WORKFLOW_MODEL ("WORKFLOW_MODEL_ID",
      "WORKFLOW_MODEL_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "WORKFLOW_MODEL_ID",
      "WORKFLOW_MODEL_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PA28_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACTIVITY_ID = deleted.PROPERTY_ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY
    set "PROPERTY_ACTIVITY_ID" = inserted."PROPERTY_ACTIVITY_ID",
      "ACTIVITY_ID" = inserted."ACTIVITY_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY.PROPERTY_ACTIVITY_ID = inserted.PROPERTY_ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PA28_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_ACTIVITY ("PROPERTY_ACTIVITY_ID",
      "ACTIVITY_ID",
      "PROPERTY_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACTIVITY_ID",
      "ACTIVITY_ID",
      "PROPERTY_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PA16_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACTIVITY_ID in (select PROPERTY_ACTIVITY_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_HIST ([PROPERTY_ACTIVITY_ID], [ACTIVITY_ID], [PROPERTY_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACTIVITY_ID], [ACTIVITY_ID], [PROPERTY_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[WMT51_I_S_I_TR] ON PIMS_WORKFLOW_MODEL_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_WORKFLOW_MODEL_TYPE ("WORKFLOW_MODEL_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "WORKFLOW_MODEL_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[WMT51_I_S_U_TR] ON PIMS_WORKFLOW_MODEL_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.WORKFLOW_MODEL_TYPE_CODE = deleted.WORKFLOW_MODEL_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_WORKFLOW_MODEL_TYPE
    set "WORKFLOW_MODEL_TYPE_CODE" = inserted."WORKFLOW_MODEL_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_WORKFLOW_MODEL_TYPE
    inner join inserted
    on (PIMS_WORKFLOW_MODEL_TYPE.WORKFLOW_MODEL_TYPE_CODE = inserted.WORKFLOW_MODEL_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PT38_I_S_U_TR] ON PIMS_PROPERTY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_TYPE_CODE = deleted.PROPERTY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_TYPE
    set "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_TYPE
    inner join inserted
    on (PIMS_PROPERTY_TYPE.PROPERTY_TYPE_CODE = inserted.PROPERTY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PT38_I_S_I_TR] ON PIMS_PROPERTY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_TYPE ("PROPERTY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[A6_I_S_U_TR] ON PIMS_ADDRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ADDRESS_ID = deleted.ADDRESS_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ADDRESS
    set "ADDRESS_ID" = inserted."ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE" = inserted."ADDRESS_USAGE_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROVINCE_STATE_ID" = inserted."PROVINCE_STATE_ID",
      "COUNTRY_ID" = inserted."COUNTRY_ID",
      "STREET_ADDRESS_1" = inserted."STREET_ADDRESS_1",
      "STREET_ADDRESS_2" = inserted."STREET_ADDRESS_2",
      "STREET_ADDRESS_3" = inserted."STREET_ADDRESS_3",
      "MUNICIPALITY_NAME" = inserted."MUNICIPALITY_NAME",
      "POSTAL_CODE" = inserted."POSTAL_CODE",
      "LATITUDE" = inserted."LATITUDE",
      "LONGITUDE" = inserted."LONGITUDE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ADDRESS
    inner join inserted
    on (PIMS_ADDRESS.ADDRESS_ID = inserted.ADDRESS_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[A6_I_S_I_TR] ON PIMS_ADDRESS INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ADDRESS ("ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "STREET_ADDRESS_1",
      "STREET_ADDRESS_2",
      "STREET_ADDRESS_3",
      "MUNICIPALITY_NAME",
      "POSTAL_CODE",
      "LATITUDE",
      "LONGITUDE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "STREET_ADDRESS_1",
      "STREET_ADDRESS_2",
      "STREET_ADDRESS_3",
      "MUNICIPALITY_NAME",
      "POSTAL_CODE",
      "LATITUDE",
      "LONGITUDE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[A5_A_S_IUD_TR] ON PIMS_ADDRESS FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ADDRESS_HIST set END_DATE_HIST = @curr_date where ADDRESS_ID in (select ADDRESS_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ADDRESS_HIST ([ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [REGION_CODE], [DISTRICT_CODE], [PROVINCE_STATE_ID], [COUNTRY_ID], [STREET_ADDRESS_1], [STREET_ADDRESS_2], [STREET_ADDRESS_3], [MUNICIPALITY_NAME], [POSTAL_CODE], [LATITUDE], [LONGITUDE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ADDRESS_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [REGION_CODE], [DISTRICT_CODE], [PROVINCE_STATE_ID], [COUNTRY_ID], [STREET_ADDRESS_1], [STREET_ADDRESS_2], [STREET_ADDRESS_3], [MUNICIPALITY_NAME], [POSTAL_CODE], [LATITUDE], [LONGITUDE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ADDRESS_H_ID_SEQ]) as [_ADDRESS_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[D13_I_S_I_TR] ON PIMS_DISTRICT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_DISTRICT ("DISTRICT_CODE",
      "REGION_CODE",
      "DISTRICT_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISTRICT_CODE",
      "REGION_CODE",
      "DISTRICT_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[D13_I_S_U_TR] ON PIMS_DISTRICT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISTRICT_CODE = deleted.DISTRICT_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISTRICT
    set "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_NAME" = inserted."DISTRICT_NAME",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISTRICT
    inner join inserted
    on (PIMS_DISTRICT.DISTRICT_CODE = inserted.DISTRICT_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[R40_I_S_U_TR] ON PIMS_REGION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.REGION_CODE = deleted.REGION_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_REGION
    set "REGION_CODE" = inserted."REGION_CODE",
      "REGION_NAME" = inserted."REGION_NAME",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_REGION
    inner join inserted
    on (PIMS_REGION.REGION_CODE = inserted.REGION_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[R40_I_S_I_TR] ON PIMS_REGION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_REGION ("REGION_CODE",
      "REGION_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "REGION_CODE",
      "REGION_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PS39_I_S_I_TR] ON PIMS_PROVINCE_STATE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROVINCE_STATE ("PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "PROVINCE_STATE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "PROVINCE_STATE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PS39_I_S_U_TR] ON PIMS_PROVINCE_STATE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROVINCE_STATE_ID = deleted.PROVINCE_STATE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROVINCE_STATE
    set "PROVINCE_STATE_ID" = inserted."PROVINCE_STATE_ID",
      "COUNTRY_ID" = inserted."COUNTRY_ID",
      "PROVINCE_STATE_CODE" = inserted."PROVINCE_STATE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROVINCE_STATE
    inner join inserted
    on (PIMS_PROVINCE_STATE.PROVINCE_STATE_ID = inserted.PROVINCE_STATE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[C12_I_S_U_TR] ON PIMS_COUNTRY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.COUNTRY_ID = deleted.COUNTRY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COUNTRY
    set "COUNTRY_ID" = inserted."COUNTRY_ID",
      "COUNTRY_CODE" = inserted."COUNTRY_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COUNTRY
    inner join inserted
    on (PIMS_COUNTRY.COUNTRY_ID = inserted.COUNTRY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[C12_I_S_I_TR] ON PIMS_COUNTRY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_COUNTRY ("COUNTRY_ID",
      "COUNTRY_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "COUNTRY_ID",
      "COUNTRY_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[AUT7_I_S_I_TR] ON PIMS_ADDRESS_USAGE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ADDRESS_USAGE_TYPE ("ADDRESS_USAGE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ADDRESS_USAGE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[AUT7_I_S_U_TR] ON PIMS_ADDRESS_USAGE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ADDRESS_USAGE_TYPE_CODE = deleted.ADDRESS_USAGE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ADDRESS_USAGE_TYPE
    set "ADDRESS_USAGE_TYPE_CODE" = inserted."ADDRESS_USAGE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ADDRESS_USAGE_TYPE
    inner join inserted
    on (PIMS_ADDRESS_USAGE_TYPE.ADDRESS_USAGE_TYPE_CODE = inserted.ADDRESS_USAGE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[O15_I_S_I_TR] ON PIMS_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ORGANIZATION ("ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME",
      "WEBSITE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME",
      "WEBSITE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[O15_I_S_U_TR] ON PIMS_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORGANIZATION_ID = deleted.ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORGANIZATION
    set "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID" = inserted."PRNT_ORGANIZATION_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE" = inserted."ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE" = inserted."ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER" = inserted."ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME" = inserted."ORGANIZATION_NAME",
      "WEBSITE" = inserted."WEBSITE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION
    inner join inserted
    on (PIMS_ORGANIZATION.ORGANIZATION_ID = inserted.ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[O8_A_S_IUD_TR] ON PIMS_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where ORGANIZATION_ID in (select ORGANIZATION_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ORGANIZATION_HIST ([ORGANIZATION_ID], [PRNT_ORGANIZATION_ID], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [ORGANIZATION_TYPE_CODE], [ORG_IDENTIFIER_TYPE_CODE], [ORGANIZATION_IDENTIFIER], [ORGANIZATION_NAME], [WEBSITE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ORGANIZATION_ID], [PRNT_ORGANIZATION_ID], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [ORGANIZATION_TYPE_CODE], [ORG_IDENTIFIER_TYPE_CODE], [ORGANIZATION_IDENTIFIER], [ORGANIZATION_NAME], [WEBSITE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ORGANIZATION_H_ID_SEQ]) as [_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[UO27_A_S_IUD_TR] ON PIMS_USER_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_USER_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where USER_ORGANIZATION_ID in (select USER_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_USER_ORGANIZATION_HIST ([USER_ORGANIZATION_ID], [ORGANIZATION_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _USER_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ORGANIZATION_ID], [ORGANIZATION_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_USER_ORGANIZATION_H_ID_SEQ]) as [_USER_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[UO48_I_S_U_TR] ON PIMS_USER_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.USER_ORGANIZATION_ID = deleted.USER_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_USER_ORGANIZATION
    set "USER_ORGANIZATION_ID" = inserted."USER_ORGANIZATION_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER_ORGANIZATION
    inner join inserted
    on (PIMS_USER_ORGANIZATION.USER_ORGANIZATION_ID = inserted.USER_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[UO48_I_S_I_TR] ON PIMS_USER_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_USER_ORGANIZATION ("USER_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "USER_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[C9_I_S_I_TR] ON PIMS_CLAIM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_CLAIM ("CLAIM_ID",
      "CLAIM_UID",
      "KEYCLOAK_ROLE_ID",
      "NAME",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "CLAIM_ID",
      "CLAIM_UID",
      "KEYCLOAK_ROLE_ID",
      "NAME",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[C9_I_S_U_TR] ON PIMS_CLAIM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CLAIM_ID = deleted.CLAIM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CLAIM
    set "CLAIM_ID" = inserted."CLAIM_ID",
      "CLAIM_UID" = inserted."CLAIM_UID",
      "KEYCLOAK_ROLE_ID" = inserted."KEYCLOAK_ROLE_ID",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CLAIM
    inner join inserted
    on (PIMS_CLAIM.CLAIM_ID = inserted.CLAIM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[C6_A_S_IUD_TR] ON PIMS_CLAIM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_CLAIM_HIST set END_DATE_HIST = @curr_date where CLAIM_ID in (select CLAIM_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_CLAIM_HIST ([CLAIM_ID], [CLAIM_UID], [KEYCLOAK_ROLE_ID], [NAME], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _CLAIM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [CLAIM_ID], [CLAIM_UID], [KEYCLOAK_ROLE_ID], [NAME], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_CLAIM_H_ID_SEQ]) as [_CLAIM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PT25_I_S_I_TR] ON PIMS_PROJECT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROJECT_TYPE ("PROJECT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PT25_I_S_U_TR] ON PIMS_PROJECT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_TYPE_CODE = deleted.PROJECT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_TYPE
    set "PROJECT_TYPE_CODE" = inserted."PROJECT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_TYPE
    inner join inserted
    on (PIMS_PROJECT_TYPE.PROJECT_TYPE_CODE = inserted.PROJECT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[RC22_A_S_IUD_TR] ON PIMS_ROLE_CLAIM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ROLE_CLAIM_HIST set END_DATE_HIST = @curr_date where ROLE_CLAIM_ID in (select ROLE_CLAIM_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ROLE_CLAIM_HIST ([ROLE_CLAIM_ID], [ROLE_ID], [CLAIM_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ROLE_CLAIM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ROLE_CLAIM_ID], [ROLE_ID], [CLAIM_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ROLE_CLAIM_H_ID_SEQ]) as [_ROLE_CLAIM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[RC42_I_S_U_TR] ON PIMS_ROLE_CLAIM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ROLE_CLAIM_ID = deleted.ROLE_CLAIM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ROLE_CLAIM
    set "ROLE_CLAIM_ID" = inserted."ROLE_CLAIM_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "CLAIM_ID" = inserted."CLAIM_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ROLE_CLAIM
    inner join inserted
    on (PIMS_ROLE_CLAIM.ROLE_CLAIM_ID = inserted.ROLE_CLAIM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[RC42_I_S_I_TR] ON PIMS_ROLE_CLAIM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ROLE_CLAIM ("ROLE_CLAIM_ID",
      "ROLE_ID",
      "CLAIM_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ROLE_CLAIM_ID",
      "ROLE_ID",
      "CLAIM_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[P17_I_S_I_TR] ON PIMS_PERSON INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PERSON ("PERSON_ID",
      "ADDRESS_ID",
      "SURNAME",
      "FIRST_NAME",
      "MIDDLE_NAMES",
      "NAME_SUFFIX",
      "BIRTH_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PERSON_ID",
      "ADDRESS_ID",
      "SURNAME",
      "FIRST_NAME",
      "MIDDLE_NAMES",
      "NAME_SUFFIX",
      "BIRTH_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[P17_I_S_U_TR] ON PIMS_PERSON INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PERSON_ID = deleted.PERSON_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PERSON
    set "PERSON_ID" = inserted."PERSON_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "SURNAME" = inserted."SURNAME",
      "FIRST_NAME" = inserted."FIRST_NAME",
      "MIDDLE_NAMES" = inserted."MIDDLE_NAMES",
      "NAME_SUFFIX" = inserted."NAME_SUFFIX",
      "BIRTH_DATE" = inserted."BIRTH_DATE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PERSON
    inner join inserted
    on (PIMS_PERSON.PERSON_ID = inserted.PERSON_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[P9_A_S_IUD_TR] ON PIMS_PERSON FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PERSON_HIST set END_DATE_HIST = @curr_date where PERSON_ID in (select PERSON_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PERSON_HIST ([PERSON_ID], [ADDRESS_ID], [SURNAME], [FIRST_NAME], [MIDDLE_NAMES], [NAME_SUFFIX], [BIRTH_DATE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PERSON_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PERSON_ID], [ADDRESS_ID], [SURNAME], [FIRST_NAME], [MIDDLE_NAMES], [NAME_SUFFIX], [BIRTH_DATE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PERSON_H_ID_SEQ]) as [_PERSON_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[TTT46_I_S_U_TR] ON PIMS_TASK_TEMPLATE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TASK_TEMPLATE_TYPE_CODE = deleted.TASK_TEMPLATE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TASK_TEMPLATE_TYPE
    set "TASK_TEMPLATE_TYPE_CODE" = inserted."TASK_TEMPLATE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TASK_TEMPLATE_TYPE
    inner join inserted
    on (PIMS_TASK_TEMPLATE_TYPE.TASK_TEMPLATE_TYPE_CODE = inserted.TASK_TEMPLATE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[TTT46_I_S_I_TR] ON PIMS_TASK_TEMPLATE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_TASK_TEMPLATE_TYPE ("TASK_TEMPLATE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TASK_TEMPLATE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PO10_A_S_IUD_TR] ON PIMS_PERSON_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PERSON_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where PERSON_ORGANIZATION_ID in (select PERSON_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PERSON_ORGANIZATION_HIST ([PERSON_ORGANIZATION_ID], [PERSON_ID], [ORGANIZATION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PERSON_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PERSON_ORGANIZATION_ID], [PERSON_ID], [ORGANIZATION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PERSON_ORGANIZATION_H_ID_SEQ]) as [_PERSON_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PO18_I_S_U_TR] ON PIMS_PERSON_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PERSON_ORGANIZATION_ID = deleted.PERSON_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PERSON_ORGANIZATION
    set "PERSON_ORGANIZATION_ID" = inserted."PERSON_ORGANIZATION_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PERSON_ORGANIZATION
    inner join inserted
    on (PIMS_PERSON_ORGANIZATION.PERSON_ORGANIZATION_ID = inserted.PERSON_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PO18_I_S_I_TR] ON PIMS_PERSON_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PERSON_ORGANIZATION ("PERSON_ORGANIZATION_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PERSON_ORGANIZATION_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[OT16_I_S_U_TR] ON PIMS_ORGANIZATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORGANIZATION_TYPE_CODE = deleted.ORGANIZATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORGANIZATION_TYPE
    set "ORGANIZATION_TYPE_CODE" = inserted."ORGANIZATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION_TYPE
    inner join inserted
    on (PIMS_ORGANIZATION_TYPE.ORGANIZATION_TYPE_CODE = inserted.ORGANIZATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[OT16_I_S_I_TR] ON PIMS_ORGANIZATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ORGANIZATION_TYPE ("ORGANIZATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ORGANIZATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[AR1_I_S_I_TR] ON PIMS_ACCESS_REQUEST INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ACCESS_REQUEST ("ACCESS_REQUEST_ID",
      "USER_ID",
      "ROLE_ID",
      "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACCESS_REQUEST_ID",
      "USER_ID",
      "ROLE_ID",
      "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[AR1_I_S_U_TR] ON PIMS_ACCESS_REQUEST INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACCESS_REQUEST_ID = deleted.ACCESS_REQUEST_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACCESS_REQUEST
    set "ACCESS_REQUEST_ID" = inserted."ACCESS_REQUEST_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "ACCESS_REQUEST_STATUS_TYPE_CODE" = inserted."ACCESS_REQUEST_STATUS_TYPE_CODE",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST
    inner join inserted
    on (PIMS_ACCESS_REQUEST.ACCESS_REQUEST_ID = inserted.ACCESS_REQUEST_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[AR1_A_S_IUD_TR] ON PIMS_ACCESS_REQUEST FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACCESS_REQUEST_HIST set END_DATE_HIST = @curr_date where ACCESS_REQUEST_ID in (select ACCESS_REQUEST_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACCESS_REQUEST_HIST ([ACCESS_REQUEST_ID], [USER_ID], [ROLE_ID], [ACCESS_REQUEST_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACCESS_REQUEST_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACCESS_REQUEST_ID], [USER_ID], [ROLE_ID], [ACCESS_REQUEST_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACCESS_REQUEST_H_ID_SEQ]) as [_ACCESS_REQUEST_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[ARO2_A_S_IUD_TR] ON PIMS_ACCESS_REQUEST_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACCESS_REQUEST_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where ACCESS_REQUEST_ORGANIZATION_ID in (select ACCESS_REQUEST_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACCESS_REQUEST_ORGANIZATION_HIST ([ACCESS_REQUEST_ORGANIZATION_ID], [ORGANIZATION_ID], [ACCESS_REQUEST_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACCESS_REQUEST_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACCESS_REQUEST_ORGANIZATION_ID], [ORGANIZATION_ID], [ACCESS_REQUEST_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ]) as [_ACCESS_REQUEST_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[ARO2_I_S_U_TR] ON PIMS_ACCESS_REQUEST_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACCESS_REQUEST_ORGANIZATION_ID = deleted.ACCESS_REQUEST_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACCESS_REQUEST_ORGANIZATION
    set "ACCESS_REQUEST_ORGANIZATION_ID" = inserted."ACCESS_REQUEST_ORGANIZATION_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "ACCESS_REQUEST_ID" = inserted."ACCESS_REQUEST_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST_ORGANIZATION
    inner join inserted
    on (PIMS_ACCESS_REQUEST_ORGANIZATION.ACCESS_REQUEST_ORGANIZATION_ID = inserted.ACCESS_REQUEST_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[ARO2_I_S_I_TR] ON PIMS_ACCESS_REQUEST_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ACCESS_REQUEST_ORGANIZATION ("ACCESS_REQUEST_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "ACCESS_REQUEST_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACCESS_REQUEST_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "ACCESS_REQUEST_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[ARST3_I_S_I_TR] ON PIMS_ACCESS_REQUEST_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ACCESS_REQUEST_STATUS_TYPE ("ACCESS_REQUEST_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[ARST3_I_S_U_TR] ON PIMS_ACCESS_REQUEST_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACCESS_REQUEST_STATUS_TYPE_CODE = deleted.ACCESS_REQUEST_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACCESS_REQUEST_STATUS_TYPE
    set "ACCESS_REQUEST_STATUS_TYPE_CODE" = inserted."ACCESS_REQUEST_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST_STATUS_TYPE
    inner join inserted
    on (PIMS_ACCESS_REQUEST_STATUS_TYPE.ACCESS_REQUEST_STATUS_TYPE_CODE = inserted.ACCESS_REQUEST_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PST23_I_S_I_TR] ON PIMS_PROJECT_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROJECT_STATUS_TYPE ("PROJECT_STATUS_TYPE_CODE",
      "CODE_GROUP",
      "DESCRIPTION",
      "TEXT",
      "IS_MILESTONE",
      "IS_TERMINAL",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_STATUS_TYPE_CODE",
      "CODE_GROUP",
      "DESCRIPTION",
      "TEXT",
      "IS_MILESTONE",
      "IS_TERMINAL",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PST23_I_S_U_TR] ON PIMS_PROJECT_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_STATUS_TYPE_CODE = deleted.PROJECT_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_STATUS_TYPE
    set "PROJECT_STATUS_TYPE_CODE" = inserted."PROJECT_STATUS_TYPE_CODE",
      "CODE_GROUP" = inserted."CODE_GROUP",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "TEXT" = inserted."TEXT",
      "IS_MILESTONE" = inserted."IS_MILESTONE",
      "IS_TERMINAL" = inserted."IS_TERMINAL",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_STATUS_TYPE
    inner join inserted
    on (PIMS_PROJECT_STATUS_TYPE.PROJECT_STATUS_TYPE_CODE = inserted.PROJECT_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PSFT35_I_S_I_TR] ON PIMS_PROPERTY_SERVICE_FILE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_SERVICE_FILE_TYPE ("PROPERTY_SERVICE_FILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_SERVICE_FILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PSFT35_I_S_U_TR] ON PIMS_PROPERTY_SERVICE_FILE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_SERVICE_FILE_TYPE_CODE = deleted.PROPERTY_SERVICE_FILE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_SERVICE_FILE_TYPE
    set "PROPERTY_SERVICE_FILE_TYPE_CODE" = inserted."PROPERTY_SERVICE_FILE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_SERVICE_FILE_TYPE
    inner join inserted
    on (PIMS_PROPERTY_SERVICE_FILE_TYPE.PROPERTY_SERVICE_FILE_TYPE_CODE = inserted.PROPERTY_SERVICE_FILE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PN12_A_S_IUD_TR] ON PIMS_PROJECT_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_NOTE_HIST set END_DATE_HIST = @curr_date where PROJECT_NOTE_ID in (select PROJECT_NOTE_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_NOTE_HIST ([PROJECT_NOTE_ID], [PROJECT_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_NOTE_ID], [PROJECT_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_NOTE_H_ID_SEQ]) as [_PROJECT_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PN20_I_S_U_TR] ON PIMS_PROJECT_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_NOTE_ID = deleted.PROJECT_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_NOTE
    set "PROJECT_NOTE_ID" = inserted."PROJECT_NOTE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_NOTE
    inner join inserted
    on (PIMS_PROJECT_NOTE.PROJECT_NOTE_ID = inserted.PROJECT_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PN20_I_S_I_TR] ON PIMS_PROJECT_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROJECT_NOTE ("PROJECT_NOTE_ID",
      "PROJECT_ID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_NOTE_ID",
      "PROJECT_ID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PRT22_I_S_U_TR] ON PIMS_PROJECT_RISK_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_RISK_TYPE_CODE = deleted.PROJECT_RISK_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_RISK_TYPE
    set "PROJECT_RISK_TYPE_CODE" = inserted."PROJECT_RISK_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_RISK_TYPE
    inner join inserted
    on (PIMS_PROJECT_RISK_TYPE.PROJECT_RISK_TYPE_CODE = inserted.PROJECT_RISK_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PRT22_I_S_I_TR] ON PIMS_PROJECT_RISK_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROJECT_RISK_TYPE ("PROJECT_RISK_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_RISK_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PTT24_I_S_U_TR] ON PIMS_PROJECT_TIER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_TIER_TYPE_CODE = deleted.PROJECT_TIER_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_TIER_TYPE
    set "PROJECT_TIER_TYPE_CODE" = inserted."PROJECT_TIER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_TIER_TYPE
    inner join inserted
    on (PIMS_PROJECT_TIER_TYPE.PROJECT_TIER_TYPE_CODE = inserted.PROJECT_TIER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PTT24_I_S_I_TR] ON PIMS_PROJECT_TIER_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROJECT_TIER_TYPE ("PROJECT_TIER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_TIER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[R41_I_S_I_TR] ON PIMS_ROLE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ROLE ("ROLE_ID",
      "ROLE_UID",
      "KEYCLOAK_GROUP_ID",
      "NAME",
      "DESCRIPTION",
      "IS_PUBLIC",
      "IS_DISABLED",
      "SORT_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ROLE_ID",
      "ROLE_UID",
      "KEYCLOAK_GROUP_ID",
      "NAME",
      "DESCRIPTION",
      "IS_PUBLIC",
      "IS_DISABLED",
      "SORT_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[R41_I_S_U_TR] ON PIMS_ROLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ROLE_ID = deleted.ROLE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ROLE
    set "ROLE_ID" = inserted."ROLE_ID",
      "ROLE_UID" = inserted."ROLE_UID",
      "KEYCLOAK_GROUP_ID" = inserted."KEYCLOAK_GROUP_ID",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_PUBLIC" = inserted."IS_PUBLIC",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "SORT_ORDER" = inserted."SORT_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ROLE
    inner join inserted
    on (PIMS_ROLE.ROLE_ID = inserted.ROLE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[R21_A_S_IUD_TR] ON PIMS_ROLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ROLE_HIST set END_DATE_HIST = @curr_date where ROLE_ID in (select ROLE_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ROLE_HIST ([ROLE_ID], [ROLE_UID], [KEYCLOAK_GROUP_ID], [NAME], [DESCRIPTION], [IS_PUBLIC], [IS_DISABLED], [SORT_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ROLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ROLE_ID], [ROLE_UID], [KEYCLOAK_GROUP_ID], [NAME], [DESCRIPTION], [IS_PUBLIC], [IS_DISABLED], [SORT_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ROLE_H_ID_SEQ]) as [_ROLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[UR49_I_S_I_TR] ON PIMS_USER_ROLE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_USER_ROLE ("USER_ROLE_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "USER_ROLE_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[UR49_I_S_U_TR] ON PIMS_USER_ROLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.USER_ROLE_ID = deleted.USER_ROLE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_USER_ROLE
    set "USER_ROLE_ID" = inserted."USER_ROLE_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER_ROLE
    inner join inserted
    on (PIMS_USER_ROLE.USER_ROLE_ID = inserted.USER_ROLE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[UR28_A_S_IUD_TR] ON PIMS_USER_ROLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_USER_ROLE_HIST set END_DATE_HIST = @curr_date where USER_ROLE_ID in (select USER_ROLE_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_USER_ROLE_HIST ([USER_ROLE_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _USER_ROLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ROLE_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_USER_ROLE_H_ID_SEQ]) as [_USER_ROLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PPSF33_I_S_I_TR] ON PIMS_PROPERTY_PROPERTY_SERVICE_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_PROPERTY_SERVICE_FILE ("PROPERTY_PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_SERVICE_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_SERVICE_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PPSF33_I_S_U_TR] ON PIMS_PROPERTY_PROPERTY_SERVICE_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_PROPERTY_SERVICE_FILE_ID = deleted.PROPERTY_PROPERTY_SERVICE_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_PROPERTY_SERVICE_FILE
    set "PROPERTY_PROPERTY_SERVICE_FILE_ID" = inserted."PROPERTY_PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_SERVICE_FILE_ID" = inserted."PROPERTY_SERVICE_FILE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_PROPERTY_SERVICE_FILE
    inner join inserted
    on (PIMS_PROPERTY_PROPERTY_SERVICE_FILE.PROPERTY_PROPERTY_SERVICE_FILE_ID = inserted.PROPERTY_PROPERTY_SERVICE_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PPSF19_A_S_IUD_TR] ON PIMS_PROPERTY_PROPERTY_SERVICE_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST set END_DATE_HIST = @curr_date where PROPERTY_PROPERTY_SERVICE_FILE_ID in (select PROPERTY_PROPERTY_SERVICE_FILE_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST ([PROPERTY_PROPERTY_SERVICE_FILE_ID], [PROPERTY_ID], [PROPERTY_SERVICE_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_PROPERTY_SERVICE_FILE_ID], [PROPERTY_ID], [PROPERTY_SERVICE_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_H_ID_SEQ]) as [_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PCT29_I_S_I_TR] ON PIMS_PROPERTY_CLASSIFICATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_CLASSIFICATION_TYPE ("PROPERTY_CLASSIFICATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PCT29_I_S_U_TR] ON PIMS_PROPERTY_CLASSIFICATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_CLASSIFICATION_TYPE_CODE = deleted.PROPERTY_CLASSIFICATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_CLASSIFICATION_TYPE
    set "PROPERTY_CLASSIFICATION_TYPE_CODE" = inserted."PROPERTY_CLASSIFICATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_CLASSIFICATION_TYPE
    inner join inserted
    on (PIMS_PROPERTY_CLASSIFICATION_TYPE.PROPERTY_CLASSIFICATION_TYPE_CODE = inserted.PROPERTY_CLASSIFICATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[TTAM45_I_S_I_TR] ON PIMS_TASK_TEMPLATE_ACTIVITY_MODEL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_TASK_TEMPLATE_ACTIVITY_MODEL ("TASK_TEMPLATE_ACTIVITY_MODEL_ID",
      "TASK_TEMPLATE_ID",
      "ACTIVITY_MODEL_ID",
      "IS_MANDATORY",
      "IMPLEMENTATION_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "TASK_TEMPLATE_ACTIVITY_MODEL_ID",
      "TASK_TEMPLATE_ID",
      "ACTIVITY_MODEL_ID",
      "IS_MANDATORY",
      "IMPLEMENTATION_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[TTAM45_I_S_U_TR] ON PIMS_TASK_TEMPLATE_ACTIVITY_MODEL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TASK_TEMPLATE_ACTIVITY_MODEL_ID = deleted.TASK_TEMPLATE_ACTIVITY_MODEL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TASK_TEMPLATE_ACTIVITY_MODEL
    set "TASK_TEMPLATE_ACTIVITY_MODEL_ID" = inserted."TASK_TEMPLATE_ACTIVITY_MODEL_ID",
      "TASK_TEMPLATE_ID" = inserted."TASK_TEMPLATE_ID",
      "ACTIVITY_MODEL_ID" = inserted."ACTIVITY_MODEL_ID",
      "IS_MANDATORY" = inserted."IS_MANDATORY",
      "IMPLEMENTATION_ORDER" = inserted."IMPLEMENTATION_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TASK_TEMPLATE_ACTIVITY_MODEL
    inner join inserted
    on (PIMS_TASK_TEMPLATE_ACTIVITY_MODEL.TASK_TEMPLATE_ACTIVITY_MODEL_ID = inserted.TASK_TEMPLATE_ACTIVITY_MODEL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[TTAM25_A_S_IUD_TR] ON PIMS_TASK_TEMPLATE_ACTIVITY_MODEL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST set END_DATE_HIST = @curr_date where TASK_TEMPLATE_ACTIVITY_MODEL_ID in (select TASK_TEMPLATE_ACTIVITY_MODEL_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST ([TASK_TEMPLATE_ACTIVITY_MODEL_ID], [TASK_TEMPLATE_ID], [ACTIVITY_MODEL_ID], [IS_MANDATORY], [IMPLEMENTATION_ORDER], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [TASK_TEMPLATE_ACTIVITY_MODEL_ID], [TASK_TEMPLATE_ID], [ACTIVITY_MODEL_ID], [IS_MANDATORY], [IMPLEMENTATION_ORDER], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_H_ID_SEQ]) as [_TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[CM7_A_S_IUD_TR] ON PIMS_CONTACT_METHOD FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_CONTACT_METHOD_HIST set END_DATE_HIST = @curr_date where CONTACT_METHOD_ID in (select CONTACT_METHOD_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_CONTACT_METHOD_HIST ([CONTACT_METHOD_ID], [CONTACT_METHOD_TYPE_CODE], [PERSON_ID], [ORGANIZATION_ID], [CONTACT_METHOD_VALUE], [IS_PREFERRED_METHOD], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _CONTACT_METHOD_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [CONTACT_METHOD_ID], [CONTACT_METHOD_TYPE_CODE], [PERSON_ID], [ORGANIZATION_ID], [CONTACT_METHOD_VALUE], [IS_PREFERRED_METHOD], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_CONTACT_METHOD_H_ID_SEQ]) as [_CONTACT_METHOD_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[CM10_I_S_U_TR] ON PIMS_CONTACT_METHOD INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONTACT_METHOD_ID = deleted.CONTACT_METHOD_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONTACT_METHOD
    set "CONTACT_METHOD_ID" = inserted."CONTACT_METHOD_ID",
      "CONTACT_METHOD_TYPE_CODE" = inserted."CONTACT_METHOD_TYPE_CODE",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONTACT_METHOD_VALUE" = inserted."CONTACT_METHOD_VALUE",
      "IS_PREFERRED_METHOD" = inserted."IS_PREFERRED_METHOD",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONTACT_METHOD
    inner join inserted
    on (PIMS_CONTACT_METHOD.CONTACT_METHOD_ID = inserted.CONTACT_METHOD_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[CM10_I_S_I_TR] ON PIMS_CONTACT_METHOD INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_CONTACT_METHOD ("CONTACT_METHOD_ID",
      "CONTACT_METHOD_TYPE_CODE",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONTACT_METHOD_VALUE",
      "IS_PREFERRED_METHOD",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "CONTACT_METHOD_ID",
      "CONTACT_METHOD_TYPE_CODE",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONTACT_METHOD_VALUE",
      "IS_PREFERRED_METHOD",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[CMT11_I_S_I_TR] ON PIMS_CONTACT_METHOD_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_CONTACT_METHOD_TYPE ("CONTACT_METHOD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "CONTACT_METHOD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[CMT11_I_S_U_TR] ON PIMS_CONTACT_METHOD_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONTACT_METHOD_TYPE_CODE = deleted.CONTACT_METHOD_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONTACT_METHOD_TYPE
    set "CONTACT_METHOD_TYPE_CODE" = inserted."CONTACT_METHOD_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONTACT_METHOD_TYPE
    inner join inserted
    on (PIMS_CONTACT_METHOD_TYPE.CONTACT_METHOD_TYPE_CODE = inserted.CONTACT_METHOD_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PO18_A_S_IUD_TR] ON PIMS_PROPERTY_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where PROPERTY_ORGANIZATION_ID in (select PROPERTY_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ORGANIZATION_HIST ([PROPERTY_ORGANIZATION_ID], [PROPERTY_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED], _PROPERTY_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ORGANIZATION_ID], [PROPERTY_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED], (next value for [dbo].[PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ]) as [_PROPERTY_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PO32_I_S_U_TR] ON PIMS_PROPERTY_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ORGANIZATION_ID = deleted.PROPERTY_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ORGANIZATION
    set "PROPERTY_ORGANIZATION_ID" = inserted."PROPERTY_ORGANIZATION_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "IS_DISABLED" = inserted."IS_DISABLED"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ORGANIZATION
    inner join inserted
    on (PIMS_PROPERTY_ORGANIZATION.PROPERTY_ORGANIZATION_ID = inserted.PROPERTY_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PO32_I_S_I_TR] ON PIMS_PROPERTY_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_ORGANIZATION ("PROPERTY_ORGANIZATION_ID",
      "PROPERTY_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "IS_DISABLED")
    select "PROPERTY_ORGANIZATION_ID",
      "PROPERTY_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "IS_DISABLED"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PTT37_I_S_I_TR] ON PIMS_PROPERTY_TENURE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_TENURE_TYPE ("PROPERTY_TENURE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_TENURE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PTT37_I_S_U_TR] ON PIMS_PROPERTY_TENURE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_TENURE_TYPE_CODE = deleted.PROPERTY_TENURE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_TENURE_TYPE
    set "PROPERTY_TENURE_TYPE_CODE" = inserted."PROPERTY_TENURE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_TENURE_TYPE
    inner join inserted
    on (PIMS_PROPERTY_TENURE_TYPE.PROPERTY_TENURE_TYPE_CODE = inserted.PROPERTY_TENURE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[AUT8_I_S_U_TR] ON PIMS_AREA_UNIT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.AREA_UNIT_TYPE_CODE = deleted.AREA_UNIT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_AREA_UNIT_TYPE
    set "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_AREA_UNIT_TYPE
    inner join inserted
    on (PIMS_AREA_UNIT_TYPE.AREA_UNIT_TYPE_CODE = inserted.AREA_UNIT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[AUT8_I_S_I_TR] ON PIMS_AREA_UNIT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_AREA_UNIT_TYPE ("AREA_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "AREA_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PE31_I_S_I_TR] ON PIMS_PROPERTY_EVALUATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_EVALUATION ("PROPERTY_EVALUATION_ID",
      "PROPERTY_ID",
      "EVALUATION_DATE",
      "KEY",
      "VALUE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_EVALUATION_ID",
      "PROPERTY_ID",
      "EVALUATION_DATE",
      "KEY",
      "VALUE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PE31_I_S_U_TR] ON PIMS_PROPERTY_EVALUATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_EVALUATION_ID = deleted.PROPERTY_EVALUATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_EVALUATION
    set "PROPERTY_EVALUATION_ID" = inserted."PROPERTY_EVALUATION_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "EVALUATION_DATE" = inserted."EVALUATION_DATE",
      "KEY" = inserted."KEY",
      "VALUE" = inserted."VALUE",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_EVALUATION
    inner join inserted
    on (PIMS_PROPERTY_EVALUATION.PROPERTY_EVALUATION_ID = inserted.PROPERTY_EVALUATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PE17_A_S_IUD_TR] ON PIMS_PROPERTY_EVALUATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_EVALUATION_HIST set END_DATE_HIST = @curr_date where PROPERTY_EVALUATION_ID in (select PROPERTY_EVALUATION_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_EVALUATION_HIST ([PROPERTY_EVALUATION_ID], [PROPERTY_ID], [EVALUATION_DATE], [KEY], [VALUE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_EVALUATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_EVALUATION_ID], [PROPERTY_ID], [EVALUATION_DATE], [KEY], [VALUE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_EVALUATION_H_ID_SEQ]) as [_PROPERTY_EVALUATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PDST30_I_S_U_TR] ON PIMS_PROPERTY_DATA_SOURCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_DATA_SOURCE_TYPE_CODE = deleted.PROPERTY_DATA_SOURCE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_DATA_SOURCE_TYPE
    set "PROPERTY_DATA_SOURCE_TYPE_CODE" = inserted."PROPERTY_DATA_SOURCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_DATA_SOURCE_TYPE
    inner join inserted
    on (PIMS_PROPERTY_DATA_SOURCE_TYPE.PROPERTY_DATA_SOURCE_TYPE_CODE = inserted.PROPERTY_DATA_SOURCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PDST30_I_S_I_TR] ON PIMS_PROPERTY_DATA_SOURCE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_DATA_SOURCE_TYPE ("PROPERTY_DATA_SOURCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PST36_I_S_U_TR] ON PIMS_PROPERTY_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_STATUS_TYPE_CODE = deleted.PROPERTY_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_STATUS_TYPE
    set "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_STATUS_TYPE
    inner join inserted
    on (PIMS_PROPERTY_STATUS_TYPE.PROPERTY_STATUS_TYPE_CODE = inserted.PROPERTY_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[PST36_I_S_I_TR] ON PIMS_PROPERTY_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_STATUS_TYPE ("PROPERTY_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[OIT14_I_S_U_TR] ON PIMS_ORG_IDENTIFIER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORG_IDENTIFIER_TYPE_CODE = deleted.ORG_IDENTIFIER_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORG_IDENTIFIER_TYPE
    set "ORG_IDENTIFIER_TYPE_CODE" = inserted."ORG_IDENTIFIER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORG_IDENTIFIER_TYPE
    inner join inserted
    on (PIMS_ORG_IDENTIFIER_TYPE.ORG_IDENTIFIER_TYPE_CODE = inserted.ORG_IDENTIFIER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER [dbo].[OIT14_I_S_I_TR] ON PIMS_ORG_IDENTIFIER_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ORG_IDENTIFIER_TYPE ("ORG_IDENTIFIER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ORG_IDENTIFIER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

