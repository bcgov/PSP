-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Wed May 25 14:43:47 PDT 2022
-- Execute this script on:
-- 		PSP_PIMS_S28_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S29_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACRQST_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACRQST_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_ACRQST_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACRQST_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACRQST_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_ACRQST_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACRQST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACRQST_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_ACRQST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_CONTACT_MGR_VW
PRINT N'Drop view dbo.PIMS_CONTACT_MGR_VW'
GO
DROP VIEW [dbo].[PIMS_CONTACT_MGR_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PERSON_CONTACT_VW
PRINT N'Drop view dbo.PIMS_PERSON_CONTACT_VW'
GO
DROP VIEW [dbo].[PIMS_PERSON_CONTACT_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_USER
PRINT N'Alter table dbo.PIMS_USER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Information associated with an identified PIMS system user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Accepted identifier of a user (e.g. IDIR)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'BUSINESS_IDENTIFIER_VALUE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique GUID associated with the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'GUID_IDENTIFIER_VALUE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Role/position assigned to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'POSITION'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes associated with this user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'NOTE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Last date/time the user was logged into PIMS.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'LAST_LOGIN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Identifier of the person that approved the creation of this PIMS user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'APPROVED_BY_ID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date/time that this user was identified as a PIMS user,' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'ISSUE_DATE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Expiry date/time of this user account.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if this user account is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACCESS_REQUEST
PRINT N'Alter table dbo.PIMS_ACCESS_REQUEST'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Note associated with this access request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACCESS_REQUEST', 
	@level2type = N'Column', @level2name = N'NOTE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST]
	ADD [REGION_CODE] smallint NOT NULL CONSTRAINT [ACRQST_REGION_CODE_DEF] DEFAULT ((4))
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_REGION_USER_ID_SEQ
PRINT N'Create sequence dbo.PIMS_REGION_USER_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_REGION_USER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_REGION_USER
PRINT N'Create table dbo.PIMS_REGION_USER'
GO
CREATE TABLE [dbo].[PIMS_REGION_USER]  ( 
	[REGION_USER_ID]                	bigint NOT NULL CONSTRAINT [RGNUSR_REGION_USER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_REGION_USER_ID_SEQ]),
	[REGION_CODE]                   	smallint NOT NULL CONSTRAINT [RGNUSR_REGION_CODE_DEF]  DEFAULT ((4)),
	[USER_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [RGNUSR_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [RGNUSR_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RGNUSR_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RGNUSR_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RGNUSR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RGNUSR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RGNUSR_PK] PRIMARY KEY CLUSTERED([REGION_USER_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.RGNUSR_REGION_USER_TUC
PRINT N'Create unique constraint dbo.RGNUSR_REGION_USER_TUC'
GO
ALTER TABLE [dbo].[PIMS_REGION_USER]
	ADD CONSTRAINT [RGNUSR_REGION_USER_TUC]
	UNIQUE ([USER_ID], [REGION_CODE])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_REGION_USER_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_REGION_USER_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_REGION_USER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_REGION_USER_HIST
PRINT N'Create table dbo.PIMS_REGION_USER_HIST'
GO
CREATE TABLE [dbo].[PIMS_REGION_USER_HIST]  ( 
	[_REGION_USER_HIST_ID]          	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_REGION_USER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[REGION_USER_ID]                	bigint NOT NULL,
	[REGION_CODE]                   	smallint NOT NULL,
	[USER_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RGNUSR_H_PK] PRIMARY KEY CLUSTERED([_REGION_USER_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_RGNUSR_H_UK
PRINT N'Create unique constraint dbo.PIMS_RGNUSR_H_UK'
GO
ALTER TABLE [dbo].[PIMS_REGION_USER_HIST]
	ADD CONSTRAINT [PIMS_RGNUSR_H_UK]
	UNIQUE ([_REGION_USER_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACCESS_REQUEST_HIST
PRINT N'Alter table dbo.PIMS_ACCESS_REQUEST_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_HIST]
	ADD [REGION_CODE] smallint NOT NULL CONSTRAINT [ACRQSTH_REGION_CODE_DEF] DEFAULT (4)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PAYMENT_METHOD_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_PAYMENT_METHOD_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the type of payment method for a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_METHOD_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PROGRAM_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_PROGRAM_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the program type associated with a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PROGRAM_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PURPOSE_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_PURPOSE_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the purpose type associated with a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PURPOSE_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE
PRINT N'Alter table dbo.PIMS_LEASE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Details of a lease that is inventoried in PIMS system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PMT_FREQ_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_PMT_FREQ_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the frequency of payments for a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PMT_FREQ_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment frequency type code' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PMT_FREQ_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_PMT_FREQ_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment frequency type code description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PMT_FREQ_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_TERM
PRINT N'Alter table dbo.PIMS_LEASE_TERM'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes a term for the associated lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PAYMENT
PRINT N'Alter table dbo.PIMS_LEASE_PAYMENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes a payment associated with a lease term.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_USER_ORGANIZATION
PRINT N'Alter table dbo.PIMS_USER_ORGANIZATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a user with an organization.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER_ORGANIZATION'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if this association is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER_ORGANIZATION', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_USER_ROLE
PRINT N'Alter table dbo.PIMS_USER_ROLE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a user with an role.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER_ROLE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if this association is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER_ROLE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_TENANT
PRINT N'Alter table dbo.PIMS_LEASE_TENANT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a tenant with a lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TENANT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_SECURITY_DEPOSIT
PRINT N'Alter table dbo.PIMS_SECURITY_DEPOSIT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of a security deposit associated with a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the deposit type If the SECURITY_DEPOSIT_TYPE_CODE has been chosen for this scurity deposit.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT', 
	@level2type = N'Column', @level2name = N'OTHER_DEPOSIT_TYPE_DESC'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descirption of this security deposit' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Amount paid of this security deposit' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT', 
	@level2type = N'Column', @level2name = N'AMOUNT_PAID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of this security deposit' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT', 
	@level2type = N'Column', @level2name = N'DEPOSIT_DATE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_SECURITY_DEPOSIT_RETURN
PRINT N'Alter table dbo.PIMS_SECURITY_DEPOSIT_RETURN'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the details of the return of a security deposit.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PERSON_CONTACT_VW
PRINT N'Create view dbo.PIMS_PERSON_CONTACT_VW'
GO
/* ---------------------------------------------------------------------- */
/* Add views                                                              */
/* ---------------------------------------------------------------------- */


CREATE VIEW [dbo].[PIMS_PERSON_CONTACT_VW] AS                            
SELECT DISTINCT PERSON_ID                                  
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'FAX'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS FAX
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD                
        WHERE    CONTACT_METHOD_TYPE_CODE = 'PERSMOBIL'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS PERSONAL_MOBILE
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'PERSPHONE'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS PERSONAL_PHONE
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'WORKMOBIL'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS WORK_MOBILE
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'WORKPHONE'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS WORK_PHONE
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'WORKEMAIL'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS WORK_EMAIL
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'PERSEMAIL'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS PERSONAL_EMAIL
FROM   PIMS_CONTACT_METHOD TMP
WHERE  ORGANIZATION_ID IS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_CONTACT_MGR_VW
PRINT N'Create view dbo.PIMS_CONTACT_MGR_VW'
GO
CREATE VIEW [dbo].[PIMS_CONTACT_MGR_VW] AS
  SELECT CONCAT('P', PER.PERSON_ID)                                                                              AS ID
       , PER.PERSON_ID
       , ORG.ORGANIZATION_ID                                                                                     AS ORGANIZATION_ID                
       , PER.IS_DISABLED
       , TRIM(CONCAT_WS(' ', NULLIF(PER.FIRST_NAME, ''), NULLIF(PER.MIDDLE_NAMES, ''), NULLIF(PER.SURNAME, ''))) AS SUMMARY
       , PER.SURNAME
       , PER.FIRST_NAME
       , PER.MIDDLE_NAMES
       , ORG.ORGANIZATION_NAME                                                                                   AS ORGANIZATION_NAME
       , PAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1                                                                                    AS MAILING_ADDRESS
       , ADR.MUNICIPALITY_NAME
       , PRV.PROVINCE_STATE_CODE                                                                                 AS PROVINCE_STATE
       , COALESCE(PVW.WORK_EMAIL, PVW.PERSONAL_EMAIL)                                                            AS EMAIL_ADDRESS
  FROM   PIMS_PERSON              PER                                                         LEFT JOIN
         PIMS_PERSON_ADDRESS      PAD ON PAD.PERSON_ID                = PER.PERSON_ID   
                                     AND PAD.ADDRESS_USAGE_TYPE_CODE  = 'MAILING'             LEFT JOIN
         PIMS_ADDRESS             ADR ON ADR.ADDRESS_ID               = PAD.ADDRESS_ID        LEFT JOIN 
         PIMS_PROVINCE_STATE      PRV ON PRV.PROVINCE_STATE_ID        = ADR.PROVINCE_STATE_ID LEFT JOIN
         PIMS_PERSON_CONTACT_VW   PVW ON PVW.PERSON_ID                = PER.PERSON_ID         LEFT JOIN
         (SELECT   PERSON_ID
                 , MAX(ORGANIZATION_ID) AS ORGANIZATION_ID 
          FROM     PIMS_PERSON_ORGANIZATION
          GROUP BY PERSON_ID)     POR ON POR.PERSON_ID                = PER.PERSON_ID         LEFT JOIN
         PIMS_ORGANIZATION        ORG ON ORG.ORGANIZATION_ID          = POR.ORGANIZATION_ID 
  UNION
  SELECT CONCAT('O', ORG.ORGANIZATION_ID)
       , NULL
       , ORG.ORGANIZATION_ID
       , ORG.IS_DISABLED
       , ORG.ORGANIZATION_NAME
       , NULL
       , NULL                            
       , NULL                                                        
       , ORG.ORGANIZATION_NAME
       , OAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1
       , ADR.MUNICIPALITY_NAME                     
       , PRV.PROVINCE_STATE_CODE
       , CON.CONTACT_METHOD_VALUE 
  FROM   PIMS_ORGANIZATION         ORG                                                         LEFT JOIN 
         PIMS_ORGANIZATION_ADDRESS OAD ON OAD.ORGANIZATION_ID          = ORG.ORGANIZATION_ID
                                      AND OAD.ADDRESS_USAGE_TYPE_CODE  = 'MAILING'             LEFT JOIN
         PIMS_ADDRESS              ADR ON ADR.ADDRESS_ID               = OAD.ADDRESS_ID        LEFT JOIN 
         PIMS_PROVINCE_STATE       PRV ON PRV.PROVINCE_STATE_ID        = ADR.PROVINCE_STATE_ID LEFT JOIN
         PIMS_CONTACT_METHOD       CON ON CON.ORGANIZATION_ID          = ORG.ORGANIZATION_ID
                                      AND CON.CONTACT_METHOD_TYPE_CODE = 'WORKEMAIL'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACRQST_REGION_CODE_IDX
PRINT N'Create index dbo.ACRQST_REGION_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACRQST_REGION_CODE_IDX]
	ON [dbo].[PIMS_ACCESS_REQUEST]([REGION_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RGNUSR_REGION_CODE_IDX
PRINT N'Create index dbo.RGNUSR_REGION_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [RGNUSR_REGION_CODE_IDX]
	ON [dbo].[PIMS_REGION_USER]([REGION_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RGNUSR_USER_ID_IDX
PRINT N'Create index dbo.RGNUSR_USER_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [RGNUSR_USER_ID_IDX]
	ON [dbo].[PIMS_REGION_USER]([USER_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_REGION_PIM_ACRQST_FK
PRINT N'Create foreign key constraint dbo.PIM_REGION_PIM_ACRQST_FK'
GO
ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST]
	ADD CONSTRAINT [PIM_REGION_PIM_ACRQST_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_USER_PIM_RGNUSR_FK
PRINT N'Create foreign key constraint dbo.PIM_USER_PIM_RGNUSR_FK'
GO
ALTER TABLE [dbo].[PIMS_REGION_USER]
	ADD CONSTRAINT [PIM_USER_PIM_RGNUSR_FK]
	FOREIGN KEY([USER_ID])
	REFERENCES [dbo].[PIMS_USER]([USER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_REGION_PIM_RGNUSR_FK
PRINT N'Create foreign key constraint dbo.PIM_REGION_PIM_RGNUSR_FK'
GO
ALTER TABLE [dbo].[PIMS_REGION_USER]
	ADD CONSTRAINT [PIM_REGION_PIM_RGNUSR_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACRQST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACRQST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACRQST_I_S_U_TR] ON PIMS_ACCESS_REQUEST INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACCESS_REQUEST_ID = deleted.ACCESS_REQUEST_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACCESS_REQUEST
    set "ACCESS_REQUEST_ID" = inserted."ACCESS_REQUEST_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "ACCESS_REQUEST_STATUS_TYPE_CODE" = inserted."ACCESS_REQUEST_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST
    inner join inserted
    on (PIMS_ACCESS_REQUEST.ACCESS_REQUEST_ID = inserted.ACCESS_REQUEST_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RGNUSR_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_RGNUSR_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RGNUSR_A_S_IUD_TR] ON PIMS_REGION_USER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_REGION_USER_HIST set END_DATE_HIST = @curr_date where REGION_USER_ID in (select REGION_USER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_REGION_USER_HIST ([REGION_USER_ID], [REGION_CODE], [USER_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _REGION_USER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [REGION_USER_ID], [REGION_CODE], [USER_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_REGION_USER_H_ID_SEQ]) as [_REGION_USER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RGNUSR_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_RGNUSR_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RGNUSR_I_S_I_TR] ON PIMS_REGION_USER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_REGION_USER ("REGION_USER_ID",
      "REGION_CODE",
      "USER_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "REGION_USER_ID",
      "REGION_CODE",
      "USER_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACRQST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACRQST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACRQST_I_S_I_TR] ON PIMS_ACCESS_REQUEST INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACCESS_REQUEST ("ACCESS_REQUEST_ID",
      "USER_ID",
      "ROLE_ID",
      "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "REGION_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACCESS_REQUEST_ID",
      "USER_ID",
      "ROLE_ID",
      "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "REGION_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACRQST_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACRQST_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACRQST_A_S_IUD_TR] ON PIMS_ACCESS_REQUEST FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACCESS_REQUEST_HIST set END_DATE_HIST = @curr_date where ACCESS_REQUEST_ID in (select ACCESS_REQUEST_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACCESS_REQUEST_HIST ([ACCESS_REQUEST_ID], [USER_ID], [ROLE_ID], [ACCESS_REQUEST_STATUS_TYPE_CODE], [REGION_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACCESS_REQUEST_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACCESS_REQUEST_ID], [USER_ID], [ROLE_ID], [ACCESS_REQUEST_STATUS_TYPE_CODE], [REGION_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACCESS_REQUEST_H_ID_SEQ]) as [_ACCESS_REQUEST_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RGNUSR_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RGNUSR_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RGNUSR_I_S_U_TR] ON PIMS_REGION_USER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.REGION_USER_ID = deleted.REGION_USER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_REGION_USER
    set "REGION_USER_ID" = inserted."REGION_USER_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "USER_ID" = inserted."USER_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_REGION_USER
    inner join inserted
    on (PIMS_REGION_USER.REGION_USER_ID = inserted.REGION_USER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
