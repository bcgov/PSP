-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Wed Jul 06 15:53:08 PDT 2022
-- Execute this script on:
-- 		PSP_PIMS_S31_01/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S32_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINS_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTINS_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINS_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINS_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACTINS_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINS_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTINS_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_FILE_NUMBER_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_FILE_NUMBER_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_NUMBER_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_ACTIVITY_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_ACTIVITY_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_ACTIVITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_FILE_PERSON_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_FILE_PERSON_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_PERSON_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQ_FL_PERSON_PROFILE_TYPE
PRINT N'Create table dbo.PIMS_ACQ_FL_PERSON_PROFILE_TYPE'
GO
CREATE TABLE [dbo].[PIMS_ACQ_FL_PERSON_PROFILE_TYPE]  ( 
	[ACQ_FL_PERSON_PROFILE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[IS_DISABLED]                    	bit NOT NULL CONSTRAINT [AQFPPT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                  	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [AQFPPT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [AQFPPT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [AQFPPT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [AQFPPT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [AQFPPT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AQFPPT_PK] PRIMARY KEY CLUSTERED([ACQ_FL_PERSON_PROFILE_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the acquistion file staff profile (role).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_PERSON_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'ACQ_FL_PERSON_PROFILE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquistion file staff profile (role).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_PERSON_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_PERSON_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_PERSON_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquistion file staff profile (role).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_PERSON_PROFILE_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_FILE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_FILE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQ_PHYS_FILE_STATUS_TYPE
PRINT N'Create table dbo.PIMS_ACQ_PHYS_FILE_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_ACQ_PHYS_FILE_STATUS_TYPE]  ( 
	[ACQ_PHYS_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [ACQPFS_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACQPFS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACQPFS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACQPFS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACQPFS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACQPFS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQPFS_PK] PRIMARY KEY CLUSTERED([ACQ_PHYS_FILE_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the acquistion physical file status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'ACQ_PHYS_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquistion physical file status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquistion physical file status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PHYS_FILE_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_FILE_STATUS_TYPE
PRINT N'Create table dbo.PIMS_ACQUISITION_FILE_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_STATUS_TYPE]  ( 
	[ACQUISITION_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                      	nvarchar(200) NOT NULL,
	[IS_DISABLED]                      	bit NOT NULL CONSTRAINT [ACQFST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                    	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL CONSTRAINT [ACQFST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [ACQFST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [ACQFST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [ACQFST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [ACQFST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQFST_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FILE_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the acquistion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquistion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquistion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_FUNDING_TYPE
PRINT N'Create table dbo.PIMS_ACQUISITION_FUNDING_TYPE'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_FUNDING_TYPE]  ( 
	[ACQUISITION_FUNDING_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                  	nvarchar(200) NOT NULL,
	[IS_DISABLED]                  	bit NOT NULL CONSTRAINT [ACQFTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]   	bigint NOT NULL CONSTRAINT [ACQFTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACQFTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACQFTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACQFTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACQFTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQFTY_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FUNDING_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the acquistion funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FUNDING_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquistion funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquistion funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FUNDING_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_TYPE
PRINT N'Create table dbo.PIMS_ACQUISITION_TYPE'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_TYPE]  ( 
	[ACQUISITION_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [ACQTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [ACQTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ACQTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ACQTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [ACQTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [ACQTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQTYP_PK] PRIMARY KEY CLUSTERED([ACQUISITION_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the acquistion type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_TYPE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquistion type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquistion type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_FILE
PRINT N'Create table dbo.PIMS_ACQUISITION_FILE'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE]  ( 
	[ACQUISITION_FILE_ID]              	bigint NOT NULL CONSTRAINT [ACQNFL_ACQUISITION_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_ID_SEQ]),
	[ACQUISITION_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[ACQUISITION_TYPE_CODE]            	nvarchar(20) NOT NULL,
	[ACQUISITION_FUNDING_TYPE_CODE]    	nvarchar(20) NULL,
	[ACQ_PHYS_FILE_STATUS_TYPE_CODE]   	nvarchar(20) NULL,
	[MINISTRY_PROJECT_NUMBER]          	nvarchar(20) NULL,
	[MINISTRY_PROJECT_NAME]            	nvarchar(100) NULL,
	[CPS_PRODUCT_CODE]                 	nvarchar(12) NULL,
	[FILE_NAME]                        	nvarchar(500) NOT NULL,
	[FILE_NUMBER]                      	nvarchar(18) NULL,
	[REGION_CODE]                      	smallint NOT NULL CONSTRAINT [ACQNFL_REGION_CODE_DEF]  DEFAULT ((-1)),
	[FUNDING_OTHER]                    	nvarchar(200) NULL,
	[ASSIGNED_DATE]                    	datetime NULL CONSTRAINT [ACQNFL_ASSIGNED_DATE_DEF]  DEFAULT (getutcdate()),
	[DELIVERY_DATE]                    	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL CONSTRAINT [ACQNFL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [ACQNFL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [ACQNFL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [ACQNFL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [ACQNFL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQNFL_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FILE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Ministry project number.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'MINISTRY_PROJECT_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Ministry project name.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'MINISTRY_PROJECT_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'CPS product code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'CPS_PRODUCT_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive name given to the acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'FILE_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'File number assigned to the acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'FILE_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Region responsible for oversight of the acquisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'REGION_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of other funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'FUNDING_OTHER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of file assignment.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ASSIGNED_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of file delivery.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DELIVERY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity containing information regarding an acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_FILE_PERSON
PRINT N'Create table dbo.PIMS_ACQUISITION_FILE_PERSON'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]  ( 
	[ACQUISITION_FILE_PERSON_ID]     	bigint NOT NULL CONSTRAINT [ACQPER_ACQUISITION_FILE_PERSON_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_PERSON_ID_SEQ]),
	[ACQUISITION_FILE_ID]            	bigint NOT NULL,
	[PERSON_ID]                      	bigint NOT NULL,
	[ACQ_FL_PERSON_PROFILE_TYPE_CODE]	nvarchar(20) NULL,
	[IS_DISABLED]                    	bit NULL CONSTRAINT [ACQPER_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [ACQPER_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACQPER_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACQPER_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [ACQPER_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ACQPER_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQPER_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FILE_PERSON_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_PERSON', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table to associate an acquisition file to a person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_PERSON'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.ACQPER_PERSON_PROFILE_TUC
PRINT N'Create unique constraint dbo.ACQPER_PERSON_PROFILE_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	ADD CONSTRAINT [ACQPER_PERSON_PROFILE_TUC]
	UNIQUE ([ACQ_FL_PERSON_PROFILE_TYPE_CODE], [PERSON_ID], [ACQUISITION_FILE_ID])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_OWNER_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_OWNER_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_OWNER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_OWNER
PRINT N'Create table dbo.PIMS_ACQUISITION_OWNER'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_OWNER]  ( 
	[ACQUISITION_OWNER_ID]          	bigint NOT NULL CONSTRAINT [ACQOWN_ACQUISITION_OWNER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_OWNER_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NULL,
	[OWNER_NAME]                    	nvarchar(300) NOT NULL CONSTRAINT [ACQOWN_OWNER_NAME_DEF]  DEFAULT ('<Empty>'),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACQOWN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACQOWN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACQOWN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACQOWN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACQOWN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQOWN_PK] PRIMARY KEY CLUSTERED([ACQUISITION_OWNER_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the owner.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'OWNER_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity containing information regarding an acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROPERTY_ACQUISITION_FILE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROPERTY_ACQUISITION_FILE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_ACQUISITION_FILE
PRINT N'Create table dbo.PIMS_PROPERTY_ACQUISITION_FILE'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]  ( 
	[PROPERTY_ACQUISITION_FILE_ID]  	bigint NOT NULL CONSTRAINT [PRACQF_PROPERTY_ACQUISITION_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACQUISITION_FILE_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [PRACQF_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRACQF_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACQF_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACQF_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACQF_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACQF_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACQF_PK] PRIMARY KEY CLUSTERED([PROPERTY_ACQUISITION_FILE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property with an acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACTIVITY_TEMPLATE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACTIVITY_TEMPLATE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_TEMPLATE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_TEMPLATE_TYPE
PRINT N'Create table dbo.PIMS_ACTIVITY_TEMPLATE_TYPE'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_TYPE]  ( 
	[ACTIVITY_TEMPLATE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                	nvarchar(200) NOT NULL,
	[IS_DISABLED]                	bit NOT NULL CONSTRAINT [ACTTTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]              	int NULL,
	[CONCURRENCY_CONTROL_NUMBER] 	bigint NOT NULL CONSTRAINT [ACTTTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [ACTTTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [ACTTTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]   	datetime NOT NULL CONSTRAINT [ACTTTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]      	nvarchar(30) NOT NULL CONSTRAINT [ACTTTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTTTY_PK] PRIMARY KEY CLUSTERED([ACTIVITY_TEMPLATE_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the activity type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_TYPE', 
	@level2type = N'Column', @level2name = N'ACTIVITY_TEMPLATE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the activity type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the activity type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_TEMPLATE
PRINT N'Create table dbo.PIMS_ACTIVITY_TEMPLATE'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE]  ( 
	[ACTIVITY_TEMPLATE_ID]          	bigint NOT NULL CONSTRAINT [ACTTMP_ACTIVITY_TEMPLATE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_TEMPLATE_ID_SEQ]),
	[ACTIVITY_TEMPLATE_TYPE_CODE]   	nvarchar(20) NULL,
	[ACTIVITY_TEMPLATE_JSON]        	nvarchar(max) NOT NULL CONSTRAINT [ACTTMP_ACTIVITY_TEMPLATE_JSON_DEF]  DEFAULT ('<Empty>'),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACTTMP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTTMP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACTTMP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACTTMP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACTTMP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTTMP_PK] PRIMARY KEY CLUSTERED([ACTIVITY_TEMPLATE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'JSON structure desribing how to construct the activity UI.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE', 
	@level2type = N'Column', @level2name = N'ACTIVITY_TEMPLATE_JSON'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACTIVITY_INSTANCE
PRINT N'Alter table dbo.PIMS_ACTIVITY_INSTANCE'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]
	ADD [ACTIVITY_TEMPLATE_ID] bigint NULL, 
	[ACTIVITY_DATA_JSON] nvarchar(max) NOT NULL CONSTRAINT [ACTINS_ACTIVITY_DATA_JSON_DEF] DEFAULT ('<Empty>')
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'JSON structure containing data specific to an activity instance.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE', 
	@level2type = N'Column', @level2name = N'ACTIVITY_DATA_JSON'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE
PRINT N'Create table dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]  ( 
	[ACQUISITION_ACTIVITY_INSTANCE_ID]	bigint NOT NULL CONSTRAINT [ACQAIN_ACQUISITION_ACTIVITY_INSTANCE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_ACTIVITY_INSTANCE_ID_SEQ]),
	[ACQUISITION_FILE_ID]             	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]            	bigint NOT NULL,
	[IS_DISABLED]                     	bit NULL CONSTRAINT [ACQAIN_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL CONSTRAINT [ACQAIN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [ACQAIN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ACQAIN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [ACQAIN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [ACQAIN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQAIN_PK] PRIMARY KEY CLUSTERED([ACQUISITION_ACTIVITY_INSTANCE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_ACTIVITY_INSTANCE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_FILE_PERSON_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_FILE_PERSON_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_PERSON_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_FILE_PERSON_HIST
PRINT N'Create table dbo.PIMS_ACQUISITION_FILE_PERSON_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON_HIST]  ( 
	[_ACQUISITION_FILE_PERSON_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_PERSON_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]             	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                   	datetime NULL,
	[ACQUISITION_FILE_PERSON_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]             	bigint NOT NULL,
	[PERSON_ID]                       	bigint NOT NULL,
	[ACQ_FL_PERSON_PROFILE_TYPE_CODE] 	nvarchar(20) NULL,
	[IS_DISABLED]                     	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQPER_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_FILE_PERSON_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACQPER_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACQPER_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON_HIST]
	ADD CONSTRAINT [PIMS_ACQPER_H_UK]
	UNIQUE ([_ACQUISITION_FILE_PERSON_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACTIVITY_INSTANCE_HIST
PRINT N'Alter table dbo.PIMS_ACTIVITY_INSTANCE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST]
	ADD [ACTIVITY_TEMPLATE_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_OWNER_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_OWNER_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_OWNER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_OWNER_HIST
PRINT N'Create table dbo.PIMS_ACQUISITION_OWNER_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST]  ( 
	[_ACQUISITION_OWNER_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_OWNER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ACQUISITION_OWNER_ID]          	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NULL,
	[OWNER_NAME]                    	nvarchar(300) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQOWN_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_OWNER_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACQOWN_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACQOWN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST]
	ADD CONSTRAINT [PIMS_ACQOWN_H_UK]
	UNIQUE ([_ACQUISITION_OWNER_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LAND_SURVEYOR_TYPE
PRINT N'Create table dbo.PIMS_LAND_SURVEYOR_TYPE'
GO
CREATE TABLE [dbo].[PIMS_LAND_SURVEYOR_TYPE]  ( 
	[LAND_SURVEYOR_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LNSRVT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [LNSRVT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LNSRVT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LNSRVT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LNSRVT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LNSRVT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LNSRVT_PK] PRIMARY KEY CLUSTERED([LAND_SURVEYOR_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the land surveyor type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_SURVEYOR_TYPE', 
	@level2type = N'Column', @level2name = N'LAND_SURVEYOR_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the land surveyor type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_SURVEYOR_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_SURVEYOR_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_SURVEYOR_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the land surveyor type.  This is an unassociated table that is used in the UI to populate JSON attributes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_SURVEYOR_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_FILE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_FILE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_FILE_HIST
PRINT N'Create table dbo.PIMS_ACQUISITION_FILE_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST]  ( 
	[_ACQUISITION_FILE_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]              	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                    	datetime NULL,
	[ACQUISITION_FILE_ID]              	bigint NOT NULL,
	[ACQUISITION_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[ACQUISITION_TYPE_CODE]            	nvarchar(20) NOT NULL,
	[ACQUISITION_FUNDING_TYPE_CODE]    	nvarchar(20) NULL,
	[ACQ_PHYS_FILE_STATUS_TYPE_CODE]   	nvarchar(20) NULL,
	[MINISTRY_PROJECT_NUMBER]          	nvarchar(20) NULL,
	[MINISTRY_PROJECT_NAME]            	nvarchar(100) NULL,
	[CPS_PRODUCT_CODE]                 	nvarchar(12) NULL,
	[FILE_NAME]                        	nvarchar(500) NOT NULL,
	[FILE_NUMBER]                      	nvarchar(18) NULL,
	[REGION_CODE]                      	smallint NOT NULL,
	[FUNDING_OTHER]                    	nvarchar(200) NULL,
	[ASSIGNED_DATE]                    	datetime NULL,
	[DELIVERY_DATE]                    	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQNFL_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_FILE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACQNFL_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACQNFL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST]
	ADD CONSTRAINT [PIMS_ACQNFL_H_UK]
	UNIQUE ([_ACQUISITION_FILE_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_TEMPLATE_HIST
PRINT N'Create table dbo.PIMS_ACTIVITY_TEMPLATE_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_HIST]  ( 
	[_ACTIVITY_TEMPLATE_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ACTIVITY_TEMPLATE_ID]          	bigint NOT NULL,
	[ACTIVITY_TEMPLATE_TYPE_CODE]   	nvarchar(20) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACTTMP_H_PK] PRIMARY KEY CLUSTERED([_ACTIVITY_TEMPLATE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACTTMP_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACTTMP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_HIST]
	ADD CONSTRAINT [PIMS_ACTTMP_H_UK]
	UNIQUE ([_ACTIVITY_TEMPLATE_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_SURVEY_PLAN_TYPE
PRINT N'Create table dbo.PIMS_SURVEY_PLAN_TYPE'
GO
CREATE TABLE [dbo].[PIMS_SURVEY_PLAN_TYPE]  ( 
	[SURVEY_PLAN_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [SRVPLT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [SRVPLT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [SRVPLT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [SRVPLT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [SRVPLT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [SRVPLT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SRVPLT_PK] PRIMARY KEY CLUSTERED([SURVEY_PLAN_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the survey plan type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURVEY_PLAN_TYPE', 
	@level2type = N'Column', @level2name = N'SURVEY_PLAN_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the survey plan type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURVEY_PLAN_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURVEY_PLAN_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURVEY_PLAN_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the survey plan type.  This is an unassociated table that is used in the UI to populate JSON attributes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURVEY_PLAN_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROPERTY_ACQUISITION_FILE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROPERTY_ACQUISITION_FILE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_ACQUISITION_FILE_HIST
PRINT N'Create table dbo.PIMS_PROPERTY_ACQUISITION_FILE_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_HIST]  ( 
	[_PROPERTY_ACQUISITION_FILE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACQUISITION_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[PROPERTY_ACQUISITION_FILE_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]               	bigint NOT NULL,
	[PROPERTY_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                       	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRACQF_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_ACQUISITION_FILE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRACQF_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRACQF_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_HIST]
	ADD CONSTRAINT [PIMS_PRACQF_H_UK]
	UNIQUE ([_PROPERTY_ACQUISITION_FILE_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST
PRINT N'Create table dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST]  ( 
	[_ACQUISITION_ACTIVITY_INSTANCE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                   	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                         	datetime NULL,
	[ACQUISITION_ACTIVITY_INSTANCE_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]                   	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]                  	bigint NOT NULL,
	[IS_DISABLED]                           	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]            	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]                  	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USERID]                     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                  	uniqueidentifier NULL,
	[APP_LAST_UPDATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                   	datetime NOT NULL,
	[DB_CREATE_USERID]                      	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]                 	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQAIN_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_ACTIVITY_INSTANCE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACQAIN_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACQAIN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST]
	ADD CONSTRAINT [PIMS_ACQAIN_H_UK]
	UNIQUE ([_ACQUISITION_ACTIVITY_INSTANCE_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_RESEARCH_FILE
PRINT N'Alter table dbo.PIMS_PROPERTY_RESEARCH_FILE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property with a research file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPER_PERSON_ID_IDX
PRINT N'Create index dbo.ACQPER_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPER_PERSON_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_PERSON]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQOWN_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.ACQOWN_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQOWN_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER]([ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPER_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.ACQPER_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPER_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_PERSON]([ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPER_ACQ_FL_PERSON_PROFILE_TYPE_CODE_IDX
PRINT N'Create index dbo.ACQPER_ACQ_FL_PERSON_PROFILE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPER_ACQ_FL_PERSON_PROFILE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_PERSON]([ACQ_FL_PERSON_PROFILE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQNFL_ACQUISITION_TYPE_CODE_IDX
PRINT N'Create index dbo.ACQNFL_ACQUISITION_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQNFL_ACQUISITION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQNFL_ACQ_PHYS_FILE_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.ACQNFL_ACQ_PHYS_FILE_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQNFL_ACQ_PHYS_FILE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([ACQ_PHYS_FILE_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACQF_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.PRACQF_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACQF_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACQF_PROPERTY_ID_IDX
PRINT N'Create index dbo.PRACQF_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACQF_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTINS_ACTIVITY_TEMPLATE_ID_IDX
PRINT N'Create index dbo.ACTINS_ACTIVITY_TEMPLATE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTINS_ACTIVITY_TEMPLATE_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_TEMPLATE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_IDX
PRINT N'Create index dbo.ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACTIVITY_TEMPLATE]([ACTIVITY_TEMPLATE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQAIN_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Create index dbo.ACQAIN_ACTIVITY_INSTANCE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQAIN_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQNFL_ACQUISITION_FILE_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.ACQNFL_ACQUISITION_FILE_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQNFL_ACQUISITION_FILE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQNFL_ACQUISITION_FUNDING_TYPE_CODE_IDX
PRINT N'Create index dbo.ACQNFL_ACQUISITION_FUNDING_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQNFL_ACQUISITION_FUNDING_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FUNDING_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQAIN_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.ACQAIN_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQAIN_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]([ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQPFS_PIM_ACQNFL_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQPFS_PIM_ACQNFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQPFS_PIM_ACQNFL_FK]
	FOREIGN KEY([ACQ_PHYS_FILE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQ_PHYS_FILE_STATUS_TYPE]([ACQ_PHYS_FILE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQFST_PIM_ACQNFL_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQFST_PIM_ACQNFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQFST_PIM_ACQNFL_FK]
	FOREIGN KEY([ACQUISITION_FILE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE_STATUS_TYPE]([ACQUISITION_FILE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQTYP_PIM_ACQNFL_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQTYP_PIM_ACQNFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQTYP_PIM_ACQNFL_FK]
	FOREIGN KEY([ACQUISITION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQUISITION_TYPE]([ACQUISITION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQFTY_PIM_ACQNFL_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQFTY_PIM_ACQNFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQFTY_PIM_ACQNFL_FK]
	FOREIGN KEY([ACQUISITION_FUNDING_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQUISITION_FUNDING_TYPE]([ACQUISITION_FUNDING_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_ACQPER_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_ACQPER_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	ADD CONSTRAINT [PIM_PERSON_PIM_ACQPER_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_AQFPPT_PIM_ACQPER_FK
PRINT N'Create foreign key constraint dbo.PIM_AQFPPT_PIM_ACQPER_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	ADD CONSTRAINT [PIM_AQFPPT_PIM_ACQPER_FK]
	FOREIGN KEY([ACQ_FL_PERSON_PROFILE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQ_FL_PERSON_PROFILE_TYPE]([ACQ_FL_PERSON_PROFILE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQPER_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQPER_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQPER_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQOWN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQOWN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQOWN_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRACQF_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRACQF_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRACQF_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_PRACQF_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_PRACQF_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_PRACQF_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTTTY_PIM_ACTTMP_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTTTY_PIM_ACTTMP_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE]
	ADD CONSTRAINT [PIM_ACTTTY_PIM_ACTTMP_FK]
	FOREIGN KEY([ACTIVITY_TEMPLATE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACTIVITY_TEMPLATE_TYPE]([ACTIVITY_TEMPLATE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTTMP_PIM_ACTINS_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTTMP_PIM_ACTINS_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTTMP_PIM_ACTINS_FK]
	FOREIGN KEY([ACTIVITY_TEMPLATE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_TEMPLATE]([ACTIVITY_TEMPLATE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_ACQAIN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_ACQAIN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_ACQAIN_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQAIN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQAIN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQAIN_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_I_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE ("ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "MINISTRY_PROJECT_NUMBER",
      "MINISTRY_PROJECT_NAME",
      "CPS_PRODUCT_CODE",
      "FILE_NAME",
      "FILE_NUMBER",
      "REGION_CODE",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "MINISTRY_PROJECT_NUMBER",
      "MINISTRY_PROJECT_NAME",
      "CPS_PRODUCT_CODE",
      "FILE_NAME",
      "FILE_NUMBER",
      "REGION_CODE",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQFTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQFTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQFTY_I_S_U_TR] ON PIMS_ACQUISITION_FUNDING_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FUNDING_TYPE_CODE = deleted.ACQUISITION_FUNDING_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FUNDING_TYPE
    set "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FUNDING_TYPE
    inner join inserted
    on (PIMS_ACQUISITION_FUNDING_TYPE.ACQUISITION_FUNDING_TYPE_CODE = inserted.ACQUISITION_FUNDING_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPER_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQPER_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPER_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE_PERSON FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_PERSON_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_PERSON_ID in (select ACQUISITION_FILE_PERSON_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_PERSON_HIST ([ACQUISITION_FILE_PERSON_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ACQ_FL_PERSON_PROFILE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_PERSON_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_PERSON_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ACQ_FL_PERSON_PROFILE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_PERSON_H_ID_SEQ]) as [_ACQUISITION_FILE_PERSON_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACQF_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACQF_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACQF_I_S_I_TR] ON PIMS_PROPERTY_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACQUISITION_FILE ("PROPERTY_ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_ID",
      "PROPERTY_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_ID",
      "PROPERTY_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTINS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINS_I_S_U_TR] ON PIMS_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_INSTANCE_ID = deleted.ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_INSTANCE
    set "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "ACTIVITY_TEMPLATE_ID" = inserted."ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_DATA_JSON" = inserted."ACTIVITY_DATA_JSON",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_ACTIVITY_INSTANCE.ACTIVITY_INSTANCE_ID = inserted.ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINS_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACTINS_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINS_A_S_IUD_TR] ON PIMS_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where ACTIVITY_INSTANCE_ID in (select ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_INSTANCE_HIST ([ACTIVITY_INSTANCE_ID], [ACTIVITY_TEMPLATE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_INSTANCE_ID], [ACTIVITY_TEMPLATE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPFS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQPFS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPFS_I_S_U_TR] ON PIMS_ACQ_PHYS_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_PHYS_FILE_STATUS_TYPE_CODE = deleted.ACQ_PHYS_FILE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_PHYS_FILE_STATUS_TYPE
    set "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_PHYS_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_ACQ_PHYS_FILE_STATUS_TYPE.ACQ_PHYS_FILE_STATUS_TYPE_CODE = inserted.ACQ_PHYS_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTTMP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTTMP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTTMP_I_S_I_TR] ON PIMS_ACTIVITY_TEMPLATE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_TEMPLATE ("ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_TEMPLATE_TYPE_CODE",
      "ACTIVITY_TEMPLATE_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_TEMPLATE_TYPE_CODE",
      "ACTIVITY_TEMPLATE_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_A_S_IUD_TR] ON PIMS_ACQUISITION_OWNER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_OWNER_HIST set END_DATE_HIST = @curr_date where ACQUISITION_OWNER_ID in (select ACQUISITION_OWNER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_OWNER_HIST ([ACQUISITION_OWNER_ID], [ACQUISITION_FILE_ID], [OWNER_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_OWNER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_OWNER_ID], [ACQUISITION_FILE_ID], [OWNER_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_OWNER_H_ID_SEQ]) as [_ACQUISITION_OWNER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQFST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQFST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQFST_I_S_U_TR] ON PIMS_ACQUISITION_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_STATUS_TYPE_CODE = deleted.ACQUISITION_FILE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE_STATUS_TYPE
    set "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_ACQUISITION_FILE_STATUS_TYPE.ACQUISITION_FILE_STATUS_TYPE_CODE = inserted.ACQUISITION_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQAIN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQAIN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQAIN_I_S_U_TR] ON PIMS_ACQUISITION_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_ACTIVITY_INSTANCE_ID = deleted.ACQUISITION_ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_ACTIVITY_INSTANCE
    set "ACQUISITION_ACTIVITY_INSTANCE_ID" = inserted."ACQUISITION_ACTIVITY_INSTANCE_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_ACQUISITION_ACTIVITY_INSTANCE.ACQUISITION_ACTIVITY_INSTANCE_ID = inserted.ACQUISITION_ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LNSRVT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LNSRVT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LNSRVT_I_S_U_TR] ON PIMS_LAND_SURVEYOR_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LAND_SURVEYOR_TYPE_CODE = deleted.LAND_SURVEYOR_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LAND_SURVEYOR_TYPE
    set "LAND_SURVEYOR_TYPE_CODE" = inserted."LAND_SURVEYOR_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LAND_SURVEYOR_TYPE
    inner join inserted
    on (PIMS_LAND_SURVEYOR_TYPE.LAND_SURVEYOR_TYPE_CODE = inserted.LAND_SURVEYOR_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_ID in (select ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_HIST ([ACQUISITION_FILE_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [MINISTRY_PROJECT_NUMBER], [MINISTRY_PROJECT_NAME], [CPS_PRODUCT_CODE], [FILE_NAME], [FILE_NUMBER], [REGION_CODE], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [MINISTRY_PROJECT_NUMBER], [MINISTRY_PROJECT_NAME], [CPS_PRODUCT_CODE], [FILE_NAME], [FILE_NUMBER], [REGION_CODE], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_H_ID_SEQ]) as [_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQTYP_I_S_U_TR] ON PIMS_ACQUISITION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_TYPE_CODE = deleted.ACQUISITION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_TYPE
    set "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_TYPE
    inner join inserted
    on (PIMS_ACQUISITION_TYPE.ACQUISITION_TYPE_CODE = inserted.ACQUISITION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_I_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_OWNER ("ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID",
      "OWNER_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID",
      "OWNER_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTTMP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACTTMP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTTMP_A_S_IUD_TR] ON PIMS_ACTIVITY_TEMPLATE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_TEMPLATE_HIST set END_DATE_HIST = @curr_date where ACTIVITY_TEMPLATE_ID in (select ACTIVITY_TEMPLATE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_TEMPLATE_HIST ([ACTIVITY_TEMPLATE_ID], [ACTIVITY_TEMPLATE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_TEMPLATE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_TEMPLATE_ID], [ACTIVITY_TEMPLATE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ]) as [_ACTIVITY_TEMPLATE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQFPPT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AQFPPT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQFPPT_I_S_I_TR] ON PIMS_ACQ_FL_PERSON_PROFILE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_FL_PERSON_PROFILE_TYPE ("ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTTTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTTTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTTTY_I_S_U_TR] ON PIMS_ACTIVITY_TEMPLATE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_TEMPLATE_TYPE_CODE = deleted.ACTIVITY_TEMPLATE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_TEMPLATE_TYPE
    set "ACTIVITY_TEMPLATE_TYPE_CODE" = inserted."ACTIVITY_TEMPLATE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_TEMPLATE_TYPE
    inner join inserted
    on (PIMS_ACTIVITY_TEMPLATE_TYPE.ACTIVITY_TEMPLATE_TYPE_CODE = inserted.ACTIVITY_TEMPLATE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPER_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQPER_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPER_I_S_I_TR] ON PIMS_ACQUISITION_FILE_PERSON INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE_PERSON ("ACQUISITION_FILE_PERSON_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_PERSON_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SRVPLT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_SRVPLT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SRVPLT_I_S_I_TR] ON PIMS_SURVEY_PLAN_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SURVEY_PLAN_TYPE ("SURVEY_PLAN_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "SURVEY_PLAN_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACQF_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACQF_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACQF_I_S_U_TR] ON PIMS_PROPERTY_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACQUISITION_FILE_ID = deleted.PROPERTY_ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACQUISITION_FILE
    set "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACQUISITION_FILE
    inner join inserted
    on (PIMS_PROPERTY_ACQUISITION_FILE.PROPERTY_ACQUISITION_FILE_ID = inserted.PROPERTY_ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPFS_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQPFS_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPFS_I_S_I_TR] ON PIMS_ACQ_PHYS_FILE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_PHYS_FILE_STATUS_TYPE ("ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTTMP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTTMP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTTMP_I_S_U_TR] ON PIMS_ACTIVITY_TEMPLATE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_TEMPLATE_ID = deleted.ACTIVITY_TEMPLATE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_TEMPLATE
    set "ACTIVITY_TEMPLATE_ID" = inserted."ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_TEMPLATE_TYPE_CODE" = inserted."ACTIVITY_TEMPLATE_TYPE_CODE",
      "ACTIVITY_TEMPLATE_JSON" = inserted."ACTIVITY_TEMPLATE_JSON",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_TEMPLATE
    inner join inserted
    on (PIMS_ACTIVITY_TEMPLATE.ACTIVITY_TEMPLATE_ID = inserted.ACTIVITY_TEMPLATE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQTYP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQTYP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQTYP_I_S_I_TR] ON PIMS_ACQUISITION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_TYPE ("ACQUISITION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQUISITION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_U_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_ID = deleted.ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE
    set "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "MINISTRY_PROJECT_NUMBER" = inserted."MINISTRY_PROJECT_NUMBER",
      "MINISTRY_PROJECT_NAME" = inserted."MINISTRY_PROJECT_NAME",
      "CPS_PRODUCT_CODE" = inserted."CPS_PRODUCT_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "REGION_CODE" = inserted."REGION_CODE",
      "FUNDING_OTHER" = inserted."FUNDING_OTHER",
      "ASSIGNED_DATE" = inserted."ASSIGNED_DATE",
      "DELIVERY_DATE" = inserted."DELIVERY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE
    inner join inserted
    on (PIMS_ACQUISITION_FILE.ACQUISITION_FILE_ID = inserted.ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINS_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTINS_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINS_I_S_I_TR] ON PIMS_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_INSTANCE ("ACTIVITY_INSTANCE_ID",
      "ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_DATA_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_INSTANCE_ID",
      "ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_DATA_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQFTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQFTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQFTY_I_S_I_TR] ON PIMS_ACQUISITION_FUNDING_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FUNDING_TYPE ("ACQUISITION_FUNDING_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQUISITION_FUNDING_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACQF_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRACQF_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACQF_A_S_IUD_TR] ON PIMS_PROPERTY_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACQUISITION_FILE_ID in (select PROPERTY_ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACQUISITION_FILE_HIST ([PROPERTY_ACQUISITION_FILE_ID], [ACQUISITION_FILE_ID], [PROPERTY_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACQUISITION_FILE_ID], [ACQUISITION_FILE_ID], [PROPERTY_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_H_ID_SEQ]) as [_PROPERTY_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQAIN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQAIN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQAIN_I_S_I_TR] ON PIMS_ACQUISITION_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_ACTIVITY_INSTANCE ("ACQUISITION_ACTIVITY_INSTANCE_ID",
      "ACQUISITION_FILE_ID",
      "ACTIVITY_INSTANCE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_ACTIVITY_INSTANCE_ID",
      "ACQUISITION_FILE_ID",
      "ACTIVITY_INSTANCE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQFST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQFST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQFST_I_S_I_TR] ON PIMS_ACQUISITION_FILE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE_STATUS_TYPE ("ACQUISITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQFPPT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AQFPPT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQFPPT_I_S_U_TR] ON PIMS_ACQ_FL_PERSON_PROFILE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_FL_PERSON_PROFILE_TYPE_CODE = deleted.ACQ_FL_PERSON_PROFILE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_FL_PERSON_PROFILE_TYPE
    set "ACQ_FL_PERSON_PROFILE_TYPE_CODE" = inserted."ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_FL_PERSON_PROFILE_TYPE
    inner join inserted
    on (PIMS_ACQ_FL_PERSON_PROFILE_TYPE.ACQ_FL_PERSON_PROFILE_TYPE_CODE = inserted.ACQ_FL_PERSON_PROFILE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQAIN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQAIN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQAIN_A_S_IUD_TR] ON PIMS_ACQUISITION_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_ACTIVITY_INSTANCE_ID in (select ACQUISITION_ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST ([ACQUISITION_ACTIVITY_INSTANCE_ID], [ACQUISITION_FILE_ID], [ACTIVITY_INSTANCE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_ACTIVITY_INSTANCE_ID], [ACQUISITION_FILE_ID], [ACTIVITY_INSTANCE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_ACQUISITION_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SRVPLT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_SRVPLT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SRVPLT_I_S_U_TR] ON PIMS_SURVEY_PLAN_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SURVEY_PLAN_TYPE_CODE = deleted.SURVEY_PLAN_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SURVEY_PLAN_TYPE
    set "SURVEY_PLAN_TYPE_CODE" = inserted."SURVEY_PLAN_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SURVEY_PLAN_TYPE
    inner join inserted
    on (PIMS_SURVEY_PLAN_TYPE.SURVEY_PLAN_TYPE_CODE = inserted.SURVEY_PLAN_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LNSRVT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LNSRVT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LNSRVT_I_S_I_TR] ON PIMS_LAND_SURVEYOR_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LAND_SURVEYOR_TYPE ("LAND_SURVEYOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LAND_SURVEYOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_U_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_OWNER_ID = deleted.ACQUISITION_OWNER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_OWNER
    set "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "OWNER_NAME" = inserted."OWNER_NAME",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_OWNER
    inner join inserted
    on (PIMS_ACQUISITION_OWNER.ACQUISITION_OWNER_ID = inserted.ACQUISITION_OWNER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPER_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQPER_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPER_I_S_U_TR] ON PIMS_ACQUISITION_FILE_PERSON INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_PERSON_ID = deleted.ACQUISITION_FILE_PERSON_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE_PERSON
    set "ACQUISITION_FILE_PERSON_ID" = inserted."ACQUISITION_FILE_PERSON_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ACQ_FL_PERSON_PROFILE_TYPE_CODE" = inserted."ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE_PERSON
    inner join inserted
    on (PIMS_ACQUISITION_FILE_PERSON.ACQUISITION_FILE_PERSON_ID = inserted.ACQUISITION_FILE_PERSON_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTTTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTTTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTTTY_I_S_I_TR] ON PIMS_ACTIVITY_TEMPLATE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_TEMPLATE_TYPE ("ACTIVITY_TEMPLATE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACTIVITY_TEMPLATE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
