-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Fri Nov 26 12:17:59 PST 2021
-- Execute this script on:
-- 		PIMS_S16_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PIMS_S15_01/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSTERM_PIM_LPFCST_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSTERM_PIM_LPFCST_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT_FORECAST]
	DROP CONSTRAINT [PIM_LSTERM_PIM_LPFCST_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSTERM_PIM_LSPYMT_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSTERM_PIM_LSPYMT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT]
	DROP CONSTRAINT [PIM_LSTERM_PIM_LSPYMT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_PIMPRV_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_PIMPRV_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	DROP CONSTRAINT [PIM_LEASE_PIM_PIMPRV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ARUNIT_PIM_PROPLS_FK
PRINT N'Drop foreign key constraint dbo.PIM_ARUNIT_PIM_PROPLS_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	DROP CONSTRAINT [PIM_ARUNIT_PIM_PROPLS_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSSTYP_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSSTYP_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT [PIM_LSSTYP_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LPFCST_LEASE_TERM_ID_IDX
PRINT N'Drop index dbo.LPFCST_LEASE_TERM_ID_IDX'
GO
DROP INDEX [dbo].[PIMS_LEASE_PAYMENT_FORECAST].[LPFCST_LEASE_TERM_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSPYMT_LEASE_TERM_ID_IDX
PRINT N'Drop index dbo.LSPYMT_LEASE_TERM_ID_IDX'
GO
DROP INDEX [dbo].[PIMS_LEASE_PAYMENT].[LSPYMT_LEASE_TERM_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ADDRSS_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ADDRSS_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_ADDRSS_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PIMPRV_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PIMPRV_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PIMPRV_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROPLS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROPLS_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PROPLS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PIMPRV_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PIMPRV_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PIMPRV_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROPLS_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PROPLS_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PROPLS_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ORG_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ORG_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_ORG_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROPLS_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PROPLS_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_PROPLS_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_LEASE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_LEASE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_LEASE_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_LEASE_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.LEASE_LEASE_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX [dbo].[PIMS_LEASE].[LEASE_LEASE_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ORG_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ORG_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_ORG_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ORG_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ORG_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_ORG_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ADDRSS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ADDRSS_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_ADDRSS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ADDRSS_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ADDRSS_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_ADDRSS_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PIMPRV_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PIMPRV_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_PIMPRV_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PIMPRV_PROPERTY_LEASE_ID_IDX
PRINT N'Drop index dbo.PIMPRV_PROPERTY_LEASE_ID_IDX'
GO
DROP INDEX [dbo].[PIMS_PROPERTY_IMPROVEMENT].[PIMPRV_PROPERTY_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSSTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSSTYP_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSSTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSSTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSSTYP_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSSTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
DROP VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_CONTACT_MGR_VW
PRINT N'Drop view dbo.PIMS_CONTACT_MGR_VW'
GO
DROP VIEW [dbo].[PIMS_CONTACT_MGR_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSTERM_PK
PRINT N'Drop primary key constraint dbo.LSTERM_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TERM]
	DROP CONSTRAINT [LSTERM_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMPRV_LEASE_IMPROVEMENT_TUC
PRINT N'Drop unique constraint dbo.PIMPRV_LEASE_IMPROVEMENT_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	DROP CONSTRAINT [PIMPRV_LEASE_IMPROVEMENT_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSSTYP_PK
PRINT N'Drop primary key constraint dbo.LSSTYP_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STATUS_TYPE]
	DROP CONSTRAINT [LSSTYP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.ETL_DATA_SOURCE_TRACE_ID_SEQ
PRINT N'Create sequence dbo.ETL_DATA_SOURCE_TRACE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[ETL_DATA_SOURCE_TRACE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE
PRINT N'Alter table dbo.PIMS_LEASE'
GO
ALTER TABLE [dbo].[PIMS_LEASE] ALTER COLUMN [LEASE_DESCRIPTION] nvarchar(4000) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE] ALTER COLUMN [LEASE_NOTES] nvarchar(4000) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE] ALTER COLUMN [RETURN_NOTES] nvarchar(4000) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE] ALTER COLUMN [INSPECTION_NOTES] nvarchar(4000) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	ADD [MOTI_NAME_ID] bigint NOT NULL, 
	[IS_ORIG_EXPIRY_REQUIRED] bit NOT NULL CONSTRAINT [LEASE_IS_ORIG_EXPIRY_REQUIRED_DEF] DEFAULT (CONVERT([bit],(0))), 
	[INCLUDED_RENEWALS] smallint NULL, 
	[RENEWAL_COUNT] smallint NULL, 
	[RENEWAL_TERM_MONTHS] smallint NOT NULL CONSTRAINT [LEASE_RENEWAL_TERM_MONTHS_DEF] DEFAULT ((0))
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is there a a requirement to record the original tenancy expiry date?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_ORIG_EXPIRY_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Maximum allowable number of lease renewals' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'INCLUDED_RENEWALS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Number of exercised renewals' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'RENEWAL_COUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Number of months included in lease renewal' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'RENEWAL_TERM_MONTHS'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP COLUMN [LEASE_STATUS_TYPE_CODE], [LEASE_CATEGORY_OTHER_DESC], [MOTI_CONTACT], [MOTI_REGION], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ADDRESS
PRINT N'Alter table dbo.PIMS_ADDRESS'
GO
ALTER TABLE [dbo].[PIMS_ADDRESS]
	DROP COLUMN [OTHER_COUNTRY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ORGANIZATION
PRINT N'Alter table dbo.PIMS_ORGANIZATION'
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ORGANIZATION'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ORGANIZATION]
	DROP COLUMN [INCORPORATION_NUMBER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_LEASE
PRINT N'Alter table dbo.PIMS_PROPERTY_LEASE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	DROP COLUMN [AREA_UNIT_TYPE_CODE], [LEASE_AREA]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_IMPROVEMENT
PRINT N'Alter table dbo.PIMS_PROPERTY_IMPROVEMENT'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	ADD [PROPERTY_LEASE_ID] bigint NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	DROP COLUMN [LEASE_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_IMPROVEMENT_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_IMPROVEMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT_HIST]
	ADD [PROPERTY_LEASE_ID] bigint NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT_HIST]
	DROP COLUMN [LEASE_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ORGANIZATION_HIST
PRINT N'Alter table dbo.PIMS_ORGANIZATION_HIST'
GO
ALTER TABLE [dbo].[PIMS_ORGANIZATION_HIST]
	DROP COLUMN [INCORPORATION_NUMBER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_HIST
PRINT N'Alter table dbo.PIMS_LEASE_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_HIST]
	ADD [MOTI_NAME_ID] bigint NOT NULL, 
	[LEASE_DESCRIPTION] nvarchar(4000) NULL, 
	[LEASE_NOTES] nvarchar(4000) NULL, 
	[RETURN_NOTES] nvarchar(4000) NULL, 
	[IS_ORIG_EXPIRY_REQUIRED] bit NOT NULL, 
	[INCLUDED_RENEWALS] smallint NULL, 
	[RENEWAL_COUNT] smallint NULL, 
	[RENEWAL_TERM_MONTHS] smallint NOT NULL, 
	[INSPECTION_NOTES] nvarchar(4000) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_HIST]
	DROP COLUMN [LEASE_STATUS_TYPE_CODE], [LEASE_CATEGORY_OTHER_DESC], [MOTI_CONTACT], [MOTI_REGION], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_LEASE_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_LEASE_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE_HIST]
	DROP COLUMN [AREA_UNIT_TYPE_CODE], [LEASE_AREA]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ADDRESS_HIST
PRINT N'Alter table dbo.PIMS_ADDRESS_HIST'
GO
ALTER TABLE [dbo].[PIMS_ADDRESS_HIST]
	DROP COLUMN [OTHER_COUNTRY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_TERM
PRINT N'Alter table dbo.PIMS_LEASE_TERM'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TERM] DROP CONSTRAINT [LSTERM_LEASE_TERM_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_TERM] ALTER COLUMN [LEASE_TERM_ID] varchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_TERM] ADD DEFAULT ('NEXT VALUE FOR [PIMS_LEASE_TERM_ID_SEQ]') FOR [LEASE_TERM_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create primary key constraint dbo.LSTERM_PK
PRINT N'Create primary key constraint dbo.LSTERM_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TERM]
	ADD PRIMARY KEY CLUSTERED ([LEASE_TERM_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PAYMENT
PRINT N'Alter table dbo.PIMS_LEASE_PAYMENT'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT] ALTER COLUMN [LEASE_TERM_ID] varchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PAYMENT_HIST
PRINT N'Alter table dbo.PIMS_LEASE_PAYMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT_HIST] ALTER COLUMN [LEASE_TERM_ID] varchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_CONTACT_MGR_VW
PRINT N'Create view dbo.PIMS_CONTACT_MGR_VW'
GO
CREATE VIEW [dbo].[PIMS_CONTACT_MGR_VW] AS
  SELECT CONCAT('P', PER.PERSON_ID) AS ID
       , PER.PERSON_ID
       , NULL                   AS ORGANIZATION_ID
       , PER.IS_DISABLED
       , TRIM(CONCAT_WS(' ', PER.FIRST_NAME, PER.MIDDLE_NAMES, PER.SURNAME)) AS SUMMARY
       , PER.SURNAME
       , PER.FIRST_NAME
       , PER.MIDDLE_NAMES
       , NULL                    AS ORGANIZATION_NAME
       , PAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1    AS MAILING_ADDRESS
       , ADR.MUNICIPALITY_NAME
       , PRV.PROVINCE_STATE_CODE AS PROVINCE_STATE
  FROM   PIMS_PERSON         PER                                           LEFT JOIN
         PIMS_PERSON_ADDRESS PAD ON PAD.PERSON_ID         = PER.PERSON_ID  LEFT JOIN
         PIMS_ADDRESS        ADR ON ADR.ADDRESS_ID        = PAD.ADDRESS_ID LEFT JOIN
         PIMS_PROVINCE_STATE PRV ON PRV.PROVINCE_STATE_ID = ADR.PROVINCE_STATE_ID
  UNION
  SELECT CONCAT('O', ORG.ORGANIZATION_ID) AS ID
       , NULL                        AS PERSON_ID
       , ORG.ORGANIZATION_ID
       , ORG.IS_DISABLED
       , ORG.ORGANIZATION_NAME       AS SUMMARY
       , NULL                        AS SURNAME
       , NULL                        AS FIRST_NAME
       , NULL                        AS MIDDLE_NAMES
       , ORG.ORGANIZATION_NAME
       , OAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1        AS MAILING_ADDRESS
       , ADR.MUNICIPALITY_NAME
       , PRV.PROVINCE_STATE_CODE     AS PROVINCE_STATE
  FROM   PIMS_ORGANIZATION         ORG                                              LEFT JOIN
         PIMS_ORGANIZATION_ADDRESS OAD ON OAD.ORGANIZATION_ID = ORG.ORGANIZATION_ID LEFT JOIN
         PIMS_ADDRESS              ADR ON ADR.ADDRESS_ID      = OAD.ADDRESS_ID      LEFT JOIN
         PIMS_PROVINCE_STATE       PRV ON PRV.PROVINCE_STATE_ID = ADR.PROVINCE_STATE_ID
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PAYMENT_FORECAST_HIST
PRINT N'Alter table dbo.PIMS_LEASE_PAYMENT_FORECAST_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT_FORECAST_HIST] ALTER COLUMN [LEASE_TERM_ID] varchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Create view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
/* ---------------------------------------------------------------------- */
/* Add views                                                              */
/* ---------------------------------------------------------------------- */

/* ---------------------------------------------------------------------- */
/* Add views                                                              */
/* ---------------------------------------------------------------------- */

/* ---------------------------------------------------------------------- */
/* Add views                                                              */
/* ---------------------------------------------------------------------- */

/* ---------------------------------------------------------------------- */
/* Add views                                                              */
/* ---------------------------------------------------------------------- */

CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , PROP.PROPERTY_CLASSIFICATION_TYPE_CODE
     , PROP.PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.NAME
     , PROP.DESCRIPTION
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.ENCUMBRANCE_REASON
     , PROP.IS_SENSITIVE
     , PROP.IS_OWNED
     , PROP.IS_PROPERTY_OF_INTEREST
     , PROP.IS_VISIBLE_TO_OTHER_AGENCIES
     , PROP.ZONING,ZONING_POTENTIAL
FROM   PIMS_PROPERTY       PROP                                                    INNER JOIN
       PIMS_ADDRESS        ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        INNER JOIN
       PIMS_PROVINCE_STATE PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID INNER JOIN
       PIMS_COUNTRY        CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
WHERE  PROP.BOUNDARY IS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PAYMENT_FORECAST
PRINT N'Alter table dbo.PIMS_LEASE_PAYMENT_FORECAST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT_FORECAST] ALTER COLUMN [LEASE_TERM_ID] varchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_TERM_HIST
PRINT N'Alter table dbo.PIMS_LEASE_TERM_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TERM_HIST] ALTER COLUMN [LEASE_TERM_ID] varchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LEASE_MOTI_NAME_ID_IDX
PRINT N'Create index dbo.LEASE_MOTI_NAME_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LEASE_MOTI_NAME_ID_IDX]
	ON [dbo].[PIMS_LEASE]([MOTI_NAME_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PIMPRV_PROPERTY_LEASE_ID_IDX
PRINT N'Create index dbo.PIMPRV_PROPERTY_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PIMPRV_PROPERTY_LEASE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_IMPROVEMENT]([PROPERTY_LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PIMPRV_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PIMPRV_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PIMPRV_A_S_IUD_TR] ON PIMS_PROPERTY_IMPROVEMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_IMPROVEMENT_HIST set END_DATE_HIST = @curr_date where PROPERTY_IMPROVEMENT_ID in (select PROPERTY_IMPROVEMENT_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_IMPROVEMENT_HIST ([PROPERTY_IMPROVEMENT_ID], [PROPERTY_LEASE_ID], [PROPERTY_IMPROVEMENT_TYPE_CODE], [IMPROVEMENT_DESCRIPTION], [STRUCTURE_SIZE], [UNIT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_IMPROVEMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_IMPROVEMENT_ID], [PROPERTY_LEASE_ID], [PROPERTY_IMPROVEMENT_TYPE_CODE], [IMPROVEMENT_DESCRIPTION], [STRUCTURE_SIZE], [UNIT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_IMPROVEMENT_H_ID_SEQ]) as [_PROPERTY_IMPROVEMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ADDRSS_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ADDRSS_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ADDRSS_I_S_I_TR] ON PIMS_ADDRESS INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ADDRESS ("ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "STREET_ADDRESS_1",
      "STREET_ADDRESS_2",
      "STREET_ADDRESS_3",
      "MUNICIPALITY_NAME",
      "POSTAL_CODE",
      "LATITUDE",
      "LONGITUDE",
      "COMMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "STREET_ADDRESS_1",
      "STREET_ADDRESS_2",
      "STREET_ADDRESS_3",
      "MUNICIPALITY_NAME",
      "POSTAL_CODE",
      "LATITUDE",
      "LONGITUDE",
      "COMMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ADDRSS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ADDRSS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ADDRSS_I_S_U_TR] ON PIMS_ADDRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ADDRESS_ID = deleted.ADDRESS_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ADDRESS
    set "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROVINCE_STATE_ID" = inserted."PROVINCE_STATE_ID",
      "COUNTRY_ID" = inserted."COUNTRY_ID",
      "STREET_ADDRESS_1" = inserted."STREET_ADDRESS_1",
      "STREET_ADDRESS_2" = inserted."STREET_ADDRESS_2",
      "STREET_ADDRESS_3" = inserted."STREET_ADDRESS_3",
      "MUNICIPALITY_NAME" = inserted."MUNICIPALITY_NAME",
      "POSTAL_CODE" = inserted."POSTAL_CODE",
      "LATITUDE" = inserted."LATITUDE",
      "LONGITUDE" = inserted."LONGITUDE",
      "COMMENT" = inserted."COMMENT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ADDRESS
    inner join inserted
    on (PIMS_ADDRESS.ADDRESS_ID = inserted.ADDRESS_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ORG_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ORG_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ORG_I_S_I_TR] ON PIMS_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ORGANIZATION ("ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME",
      "ORGANIZATION_ALIAS",
      "WEBSITE",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME",
      "ORGANIZATION_ALIAS",
      "WEBSITE",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ORG_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ORG_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ORG_A_S_IUD_TR] ON PIMS_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where ORGANIZATION_ID in (select ORGANIZATION_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ORGANIZATION_HIST ([ORGANIZATION_ID], [PRNT_ORGANIZATION_ID], [REGION_CODE], [DISTRICT_CODE], [ORGANIZATION_TYPE_CODE], [ORG_IDENTIFIER_TYPE_CODE], [ORGANIZATION_IDENTIFIER], [ORGANIZATION_NAME], [ORGANIZATION_ALIAS], [WEBSITE], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ORGANIZATION_ID], [PRNT_ORGANIZATION_ID], [REGION_CODE], [DISTRICT_CODE], [ORGANIZATION_TYPE_CODE], [ORG_IDENTIFIER_TYPE_CODE], [ORGANIZATION_IDENTIFIER], [ORGANIZATION_NAME], [ORGANIZATION_ALIAS], [WEBSITE], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ORGANIZATION_H_ID_SEQ]) as [_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LEASE_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_A_S_IUD_TR] ON PIMS_LEASE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_HIST set END_DATE_HIST = @curr_date where LEASE_ID in (select LEASE_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_HIST ([LEASE_ID], [MOTI_NAME_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [LEASE_PURPOSE_OTHER_DESC], [L_FILE_NO], [TFA_FILE_NO], [PS_FILE_NO], [LEASE_DESCRIPTION], [LEASE_NOTES], [RETURN_NOTES], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [IS_ORIG_EXPIRY_REQUIRED], [INCLUDED_RENEWALS], [RENEWAL_COUNT], [RENEWAL_TERM_MONTHS], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [INSPECTION_NOTES], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_ID], [MOTI_NAME_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [LEASE_PURPOSE_OTHER_DESC], [L_FILE_NO], [TFA_FILE_NO], [PS_FILE_NO], [LEASE_DESCRIPTION], [LEASE_NOTES], [RETURN_NOTES], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [IS_ORIG_EXPIRY_REQUIRED], [INCLUDED_RENEWALS], [RENEWAL_COUNT], [RENEWAL_TERM_MONTHS], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [INSPECTION_NOTES], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_H_ID_SEQ]) as [_LEASE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_U_TR] ON PIMS_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_ID = deleted.LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE
    set "LEASE_ID" = inserted."LEASE_ID",
      "MOTI_NAME_ID" = inserted."MOTI_NAME_ID",
      "LEASE_PAY_RVBL_TYPE_CODE" = inserted."LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE" = inserted."LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE" = inserted."LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE" = inserted."LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE" = inserted."LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE" = inserted."LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE" = inserted."LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE" = inserted."LEASE_PMT_FREQ_TYPE_CODE",
      "LEASE_PURPOSE_OTHER_DESC" = inserted."LEASE_PURPOSE_OTHER_DESC",
      "L_FILE_NO" = inserted."L_FILE_NO",
      "TFA_FILE_NO" = inserted."TFA_FILE_NO",
      "PS_FILE_NO" = inserted."PS_FILE_NO",
      "LEASE_DESCRIPTION" = inserted."LEASE_DESCRIPTION",
      "LEASE_NOTES" = inserted."LEASE_NOTES",
      "RETURN_NOTES" = inserted."RETURN_NOTES",
      "ORIG_START_DATE" = inserted."ORIG_START_DATE",
      "ORIG_EXPIRY_DATE" = inserted."ORIG_EXPIRY_DATE",
      "IS_ORIG_EXPIRY_REQUIRED" = inserted."IS_ORIG_EXPIRY_REQUIRED",
      "INCLUDED_RENEWALS" = inserted."INCLUDED_RENEWALS",
      "RENEWAL_COUNT" = inserted."RENEWAL_COUNT",
      "RENEWAL_TERM_MONTHS" = inserted."RENEWAL_TERM_MONTHS",
      "LEASE_AMOUNT" = inserted."LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE" = inserted."RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE" = inserted."INSPECTION_DATE",
      "INSPECTION_NOTES" = inserted."INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA" = inserted."IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG" = inserted."IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT" = inserted."IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED" = inserted."IS_EXPIRED",
      "HAS_PHYSICAL_FILE" = inserted."HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE" = inserted."HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE" = inserted."HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE" = inserted."HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE
    inner join inserted
    on (PIMS_LEASE.LEASE_ID = inserted.LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LEASE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_I_TR] ON PIMS_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_LEASE ("LEASE_ID",
      "MOTI_NAME_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "LEASE_PURPOSE_OTHER_DESC",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_NOTES",
      "RETURN_NOTES",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "IS_ORIG_EXPIRY_REQUIRED",
      "INCLUDED_RENEWALS",
      "RENEWAL_COUNT",
      "RENEWAL_TERM_MONTHS",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_ID",
      "MOTI_NAME_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "LEASE_PURPOSE_OTHER_DESC",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_NOTES",
      "RETURN_NOTES",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "IS_ORIG_EXPIRY_REQUIRED",
      "INCLUDED_RENEWALS",
      "RENEWAL_COUNT",
      "RENEWAL_TERM_MONTHS",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PROPLS_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PROPLS_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PROPLS_A_S_IUD_TR] ON PIMS_PROPERTY_LEASE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_LEASE_HIST set END_DATE_HIST = @curr_date where PROPERTY_LEASE_ID in (select PROPERTY_LEASE_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_LEASE_HIST ([PROPERTY_LEASE_ID], [PROPERTY_ID], [LEASE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_LEASE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_LEASE_ID], [PROPERTY_ID], [LEASE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_LEASE_H_ID_SEQ]) as [_PROPERTY_LEASE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ORG_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ORG_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ORG_I_S_U_TR] ON PIMS_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORGANIZATION_ID = deleted.ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORGANIZATION
    set "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID" = inserted."PRNT_ORGANIZATION_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE" = inserted."ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE" = inserted."ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER" = inserted."ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME" = inserted."ORGANIZATION_NAME",
      "ORGANIZATION_ALIAS" = inserted."ORGANIZATION_ALIAS",
      "WEBSITE" = inserted."WEBSITE",
      "COMMENT" = inserted."COMMENT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION
    inner join inserted
    on (PIMS_ORGANIZATION.ORGANIZATION_ID = inserted.ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PROPLS_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PROPLS_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PROPLS_I_S_I_TR] ON PIMS_PROPERTY_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_LEASE ("PROPERTY_LEASE_ID",
      "PROPERTY_ID",
      "LEASE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_LEASE_ID",
      "PROPERTY_ID",
      "LEASE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PIMPRV_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PIMPRV_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PIMPRV_I_S_U_TR] ON PIMS_PROPERTY_IMPROVEMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_IMPROVEMENT_ID = deleted.PROPERTY_IMPROVEMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_IMPROVEMENT
    set "PROPERTY_IMPROVEMENT_ID" = inserted."PROPERTY_IMPROVEMENT_ID",
      "PROPERTY_LEASE_ID" = inserted."PROPERTY_LEASE_ID",
      "PROPERTY_IMPROVEMENT_TYPE_CODE" = inserted."PROPERTY_IMPROVEMENT_TYPE_CODE",
      "IMPROVEMENT_DESCRIPTION" = inserted."IMPROVEMENT_DESCRIPTION",
      "STRUCTURE_SIZE" = inserted."STRUCTURE_SIZE",
      "UNIT" = inserted."UNIT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_IMPROVEMENT
    inner join inserted
    on (PIMS_PROPERTY_IMPROVEMENT.PROPERTY_IMPROVEMENT_ID = inserted.PROPERTY_IMPROVEMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PROPLS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PROPLS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PROPLS_I_S_U_TR] ON PIMS_PROPERTY_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_LEASE_ID = deleted.PROPERTY_LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_LEASE
    set "PROPERTY_LEASE_ID" = inserted."PROPERTY_LEASE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_LEASE
    inner join inserted
    on (PIMS_PROPERTY_LEASE.PROPERTY_LEASE_ID = inserted.PROPERTY_LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PIMPRV_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PIMPRV_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PIMPRV_I_S_I_TR] ON PIMS_PROPERTY_IMPROVEMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_IMPROVEMENT ("PROPERTY_IMPROVEMENT_ID",
      "PROPERTY_LEASE_ID",
      "PROPERTY_IMPROVEMENT_TYPE_CODE",
      "IMPROVEMENT_DESCRIPTION",
      "STRUCTURE_SIZE",
      "UNIT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_IMPROVEMENT_ID",
      "PROPERTY_LEASE_ID",
      "PROPERTY_IMPROVEMENT_TYPE_CODE",
      "IMPROVEMENT_DESCRIPTION",
      "STRUCTURE_SIZE",
      "UNIT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ADDRSS_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ADDRSS_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ADDRSS_A_S_IUD_TR] ON PIMS_ADDRESS FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ADDRESS_HIST set END_DATE_HIST = @curr_date where ADDRESS_ID in (select ADDRESS_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ADDRESS_HIST ([ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROVINCE_STATE_ID], [COUNTRY_ID], [STREET_ADDRESS_1], [STREET_ADDRESS_2], [STREET_ADDRESS_3], [MUNICIPALITY_NAME], [POSTAL_CODE], [LATITUDE], [LONGITUDE], [COMMENT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ADDRESS_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROVINCE_STATE_ID], [COUNTRY_ID], [STREET_ADDRESS_1], [STREET_ADDRESS_2], [STREET_ADDRESS_3], [MUNICIPALITY_NAME], [POSTAL_CODE], [LATITUDE], [LONGITUDE], [COMMENT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ADDRESS_H_ID_SEQ]) as [_ADDRESS_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSPYMT_LEASE_TERM_ID_IDX
PRINT N'Create index dbo.LSPYMT_LEASE_TERM_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSPYMT_LEASE_TERM_ID_IDX]
	ON [dbo].[PIMS_LEASE_PAYMENT]([LEASE_TERM_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LPFCST_LEASE_TERM_ID_IDX
PRINT N'Create index dbo.LPFCST_LEASE_TERM_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LPFCST_LEASE_TERM_ID_IDX]
	ON [dbo].[PIMS_LEASE_PAYMENT_FORECAST]([LEASE_TERM_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_LEASE_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	ADD FOREIGN KEY([MOTI_NAME_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PROPLS_PIM_PIMPRV_FK
PRINT N'Create foreign key constraint dbo.PIM_PROPLS_PIM_PIMPRV_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	ADD FOREIGN KEY([PROPERTY_LEASE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_LEASE]([PROPERTY_LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LSTERM_PIM_LSPYMT_FK
PRINT N'Create foreign key constraint dbo.PIM_LSTERM_PIM_LSPYMT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT]
	ADD FOREIGN KEY([LEASE_TERM_ID])
	REFERENCES [dbo].[PIMS_LEASE_TERM]([LEASE_TERM_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LSTERM_PIM_LPFCST_FK
PRINT N'Create foreign key constraint dbo.PIM_LSTERM_PIM_LPFCST_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT_FORECAST]
	ADD FOREIGN KEY([LEASE_TERM_ID])
	REFERENCES [dbo].[PIMS_LEASE_TERM]([LEASE_TERM_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_STATUS_TYPE
PRINT N'Drop table dbo.PIMS_LEASE_STATUS_TYPE'
GO
DROP TABLE [dbo].[PIMS_LEASE_STATUS_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
