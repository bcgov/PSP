-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Fri Apr 01 15:43:17 PDT 2022
-- Execute this script on:
-- 		PSP_PIMS_S24_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S25_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RESRCH_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RESRCH_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_RESRCH_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRSCRC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRSCRC_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRSCRC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RESRCH_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_RESRCH_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_RESRCH_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRSCRC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRSCRC_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRSCRC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRSCRC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRSCRC_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRSCRC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RESRCH_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_RESRCH_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_RESRCH_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_CONTACT_MGR_VW
PRINT N'Drop view dbo.PIMS_CONTACT_MGR_VW'
GO
DROP VIEW [dbo].[PIMS_CONTACT_MGR_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_RESEARCH_FILE_PURPOSE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_RESEARCH_FILE_PURPOSE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_PURPOSE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_REQUEST_SOURCE_TYPE
PRINT N'Create table dbo.PIMS_REQUEST_SOURCE_TYPE'
GO
CREATE TABLE [dbo].[PIMS_REQUEST_SOURCE_TYPE]  ( 
	[REQUEST_SOURCE_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NULL CONSTRAINT [RQSRCT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [RQSRCT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [RQSRCT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [RQSRCT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [RQSRCT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [RQSRCT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RQSRCT_PK] PRIMARY KEY CLUSTERED([REQUEST_SOURCE_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code indicating the source of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_REQUEST_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'REQUEST_SOURCE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the code indicating the source of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_REQUEST_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_REQUEST_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_REQUEST_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe source ot the research request' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_REQUEST_SOURCE_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE]
	ADD [REQUEST_SOURCE_TYPE_CODE] nvarchar(20) NULL, 
	[REQUESTOR_NAME] bigint NULL, 
	[REQUESTOR_ORGANIZATION] bigint NULL, 
	[REQUEST_DATE] date NULL, 
	[ROAD_NAME] nvarchar(max) NULL, 
	[ROAD_ALIAS] nvarchar(max) NULL, 
	[REQUEST_DESCRIPTION] nvarchar(max) NULL, 
	[REQUEST_SOURCE_DESCRIPTION] nvarchar(2000) NULL, 
	[RESEARCH_RESULT] nvarchar(max) NULL, 
	[IS_EXPROPRIATION] bit NULL, 
	[EXPROPRIATION_NOTES] nvarchar(max) NULL, 
	[RESEARCH_COMPLETION_DATE] date NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the research requestor.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'REQUESTOR_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Organization associated with the research requestor.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'REQUESTOR_ORGANIZATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'REQUEST_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name(s) of roads associated with this research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'ROAD_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Alias(es) of roads associated with this research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'ROAD_ALIAS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'REQUEST_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Result of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'RESEARCH_RESULT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this an expropriation?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'IS_EXPROPRIATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes associated with an expropriation.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'EXPROPRIATION_NOTES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the research request was completed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'RESEARCH_COMPLETION_DATE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_RESEARCH_PURPOSE_TYPE
PRINT N'Create table dbo.PIMS_RESEARCH_PURPOSE_TYPE'
GO
CREATE TABLE [dbo].[PIMS_RESEARCH_PURPOSE_TYPE]  ( 
	[RESEARCH_PURPOSE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NULL CONSTRAINT [RSHPRT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [RSHPRT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [RSHPRT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [RSHPRT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [RSHPRT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [RSHPRT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RSHPRT_PK] PRIMARY KEY CLUSTERED([RESEARCH_PURPOSE_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code indicating the purpose of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'RESEARCH_PURPOSE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the code indicating the purpose of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the purpose ot the research request' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_PURPOSE_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_RESEARCH_FILE_PURPOSE
PRINT N'Create table dbo.PIMS_RESEARCH_FILE_PURPOSE'
GO
CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE]  ( 
	[RESEARCH_FILE_PURPOSE_ID]      	varchar(40) NOT NULL CONSTRAINT [RSFLPR_RESEARCH_FILE_PURPOSE_ID_DEF]  DEFAULT ('NEXT VALUE FOR [PIMS_RESEARCH_FILE_PURPOSE_ID_SEQ]'),
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[RESEARCH_PURPOSE_TYPE_CODE]    	nvarchar(20) NOT NULL CONSTRAINT [RSFLPR_RESEARCH_PURPOSE_TYPE_CODE_DEF]  DEFAULT ('GENENQ'),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [RSFLPR_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RSFLPR_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RSFLPR_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RSFLPR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RSFLPR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RSFLPR_PK] PRIMARY KEY CLUSTERED([RESEARCH_FILE_PURPOSE_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_RESEARCH_FILE
PRINT N'Alter table dbo.PIMS_PROPERTY_RESEARCH_FILE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE]
	ADD [PROPERTY_NAME] nvarchar(500) NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptivee reference for the property being researched.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'PROPERTY_NAME'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_RESEARCH_FILE_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_RESEARCH_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE_HIST]
	ADD [PROPERTY_NAME] nvarchar(500) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_HIST
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_HIST]
	ADD [REQUEST_SOURCE_TYPE_CODE] nvarchar(20) NULL, 
	[REQUESTOR_NAME] bigint NULL, 
	[REQUESTOR_ORGANIZATION] bigint NULL, 
	[REQUEST_DATE] date NULL, 
	[REQUEST_SOURCE_DESCRIPTION] nvarchar(2000) NULL, 
	[IS_EXPROPRIATION] bit NULL, 
	[RESEARCH_COMPLETION_DATE] date NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_RESEARCH_FILE_PURPOSE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_RESEARCH_FILE_PURPOSE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_PURPOSE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_RESEARCH_FILE_PURPOSE_HIST
PRINT N'Create table dbo.PIMS_RESEARCH_FILE_PURPOSE_HIST'
GO
CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE_HIST]  ( 
	[_RESEARCH_FILE_PURPOSE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_PURPOSE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[RESEARCH_FILE_PURPOSE_ID]      	varchar(40) NOT NULL,
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[RESEARCH_PURPOSE_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RSFLPR_H_PK] PRIMARY KEY CLUSTERED([_RESEARCH_FILE_PURPOSE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_RSFLPR_H_UK
PRINT N'Create unique constraint dbo.PIMS_RSFLPR_H_UK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE_HIST]
	ADD CONSTRAINT [PIMS_RSFLPR_H_UK]
	UNIQUE ([_RESEARCH_FILE_PURPOSE_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_PROP_TENURE_TYPE
PRINT N'Alter table dbo.PIMS_PROP_PROP_TENURE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYPE] DROP CONSTRAINT IF EXISTS [PRPRTT_PROPERTY_TENURE_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYPE] ADD CONSTRAINT [PRPRTT_PROPERTY_TENURE_TYPE_CODE_DEF] DEFAULT ('UNKNOWN') FOR [PROPERTY_TENURE_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_CONTACT_MGR_VW
PRINT N'Create view dbo.PIMS_CONTACT_MGR_VW'
GO
CREATE VIEW [dbo].[PIMS_CONTACT_MGR_VW] AS
  SELECT CONCAT('P', PER.PERSON_ID)                                                                              AS ID
       , PER.PERSON_ID
       , ORG.ORGANIZATION_ID                                                                                     AS ORGANIZATION_ID                
       , PER.IS_DISABLED
       , TRIM(CONCAT_WS(' ', NULLIF(PER.FIRST_NAME, ''), NULLIF(PER.MIDDLE_NAMES, ''), NULLIF(PER.SURNAME, ''))) AS SUMMARY
       , PER.SURNAME
       , PER.FIRST_NAME
       , PER.MIDDLE_NAMES
       , ORG.ORGANIZATION_NAME                                                                                   AS ORGANIZATION_NAME
       , PAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1                                                                                    AS MAILING_ADDRESS
       , ADR.MUNICIPALITY_NAME
       , PRV.PROVINCE_STATE_CODE                                                                                 AS PROVINCE_STATE
       , COALESCE(PVW.WORK_EMAIL, PVW.PERSONAL_EMAIL)                                                            AS EMAIL_ADDRESS
  FROM   PIMS_PERSON              PER                                                         LEFT JOIN
         PIMS_PERSON_ADDRESS      PAD ON PAD.PERSON_ID                = PER.PERSON_ID   
                                     AND PAD.ADDRESS_USAGE_TYPE_CODE  = 'MAILING'             LEFT JOIN
         PIMS_ADDRESS             ADR ON ADR.ADDRESS_ID               = PAD.ADDRESS_ID        LEFT JOIN 
         PIMS_PROVINCE_STATE      PRV ON PRV.PROVINCE_STATE_ID        = ADR.PROVINCE_STATE_ID LEFT JOIN
         PIMS_PERSON_CONTACT_VW   PVW ON PVW.PERSON_ID                = PER.PERSON_ID         LEFT JOIN
         (SELECT   PERSON_ID
                 , MAX(ORGANIZATION_ID) AS ORGANIZATION_ID 
          FROM     PIMS_PERSON_ORGANIZATION
          GROUP BY PERSON_ID)     POR ON POR.PERSON_ID                = PER.PERSON_ID         LEFT JOIN
         PIMS_ORGANIZATION        ORG ON ORG.ORGANIZATION_ID          = POR.ORGANIZATION_ID 
  UNION
  SELECT CONCAT('O', ORG.ORGANIZATION_ID)
       , NULL
       , ORG.ORGANIZATION_ID
       , ORG.IS_DISABLED
       , ORG.ORGANIZATION_NAME
       , NULL
       , NULL                            
       , NULL                                                        
       , ORG.ORGANIZATION_NAME
       , OAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1
       , ADR.MUNICIPALITY_NAME                     
       , PRV.PROVINCE_STATE_CODE
       , CON.CONTACT_METHOD_VALUE 
  FROM   PIMS_ORGANIZATION         ORG                                                         LEFT JOIN 
         PIMS_ORGANIZATION_ADDRESS OAD ON OAD.ORGANIZATION_ID          = ORG.ORGANIZATION_ID
                                      AND OAD.ADDRESS_USAGE_TYPE_CODE  = 'MAILING'             LEFT JOIN
         PIMS_ADDRESS              ADR ON ADR.ADDRESS_ID               = OAD.ADDRESS_ID        LEFT JOIN 
         PIMS_PROVINCE_STATE       PRV ON PRV.PROVINCE_STATE_ID        = ADR.PROVINCE_STATE_ID LEFT JOIN
         PIMS_CONTACT_METHOD       CON ON CON.ORGANIZATION_ID          = ORG.ORGANIZATION_ID
                                      AND CON.CONTACT_METHOD_TYPE_CODE = 'WORKEMAIL'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RESRCH_REQUESTOR_NAME_IDX
PRINT N'Create index dbo.RESRCH_REQUESTOR_NAME_IDX'
GO
CREATE NONCLUSTERED INDEX [RESRCH_REQUESTOR_NAME_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE]([REQUESTOR_NAME])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RESRCH_REQUEST_SOURCE_TYPE_CODE_IDX
PRINT N'Create index dbo.RESRCH_REQUEST_SOURCE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [RESRCH_REQUEST_SOURCE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE]([REQUEST_SOURCE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RSFLPR_RESEARCH_FILE_ID_IDX
PRINT N'Create index dbo.RSFLPR_RESEARCH_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [RSFLPR_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_PURPOSE]([RESEARCH_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RESRCH_REQUESTOR_ORGANIZATION_IDX
PRINT N'Create index dbo.RESRCH_REQUESTOR_ORGANIZATION_IDX'
GO
CREATE NONCLUSTERED INDEX [RESRCH_REQUESTOR_ORGANIZATION_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE]([REQUESTOR_ORGANIZATION])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RSFLPR_RESEARCH_PURPOSE_TYPE_CODE_IDX
PRINT N'Create index dbo.RSFLPR_RESEARCH_PURPOSE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [RSFLPR_RESEARCH_PURPOSE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_PURPOSE]([RESEARCH_PURPOSE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_RESRCH_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_RESRCH_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_ORG_PIM_RESRCH_FK]
	FOREIGN KEY([REQUESTOR_ORGANIZATION])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_RESRCH_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_RESRCH_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_PERSON_PIM_RESRCH_FK]
	FOREIGN KEY([REQUESTOR_NAME])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_RQSRCT_PIM_RESRCH_FK
PRINT N'Create foreign key constraint dbo.PIM_RQSRCT_PIM_RESRCH_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_RQSRCT_PIM_RESRCH_FK]
	FOREIGN KEY([REQUEST_SOURCE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_REQUEST_SOURCE_TYPE]([REQUEST_SOURCE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_RESRCH_PIM_RSFLPR_FK
PRINT N'Create foreign key constraint dbo.PIM_RESRCH_PIM_RSFLPR_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE]
	ADD CONSTRAINT [PIM_RESRCH_PIM_RSFLPR_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_RSHPRT_PIM_RSFLPR_FK
PRINT N'Create foreign key constraint dbo.PIM_RSHPRT_PIM_RSFLPR_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE]
	ADD CONSTRAINT [PIM_RSHPRT_PIM_RSFLPR_FK]
	FOREIGN KEY([RESEARCH_PURPOSE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_RESEARCH_PURPOSE_TYPE]([RESEARCH_PURPOSE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RESRCH_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_RESRCH_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RESRCH_I_S_I_TR] ON PIMS_RESEARCH_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE ("RESEARCH_FILE_ID",
      "RESEARCH_FILE_STATUS_TYPE_CODE",
      "REQUEST_SOURCE_TYPE_CODE",
      "REQUESTOR_NAME",
      "REQUESTOR_ORGANIZATION",
      "NAME",
      "RFILE_NUMBER",
      "REQUEST_DATE",
      "ROAD_NAME",
      "ROAD_ALIAS",
      "REQUEST_DESCRIPTION",
      "REQUEST_SOURCE_DESCRIPTION",
      "RESEARCH_RESULT",
      "IS_EXPROPRIATION",
      "EXPROPRIATION_NOTES",
      "RESEARCH_COMPLETION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_FILE_ID",
      "RESEARCH_FILE_STATUS_TYPE_CODE",
      "REQUEST_SOURCE_TYPE_CODE",
      "REQUESTOR_NAME",
      "REQUESTOR_ORGANIZATION",
      "NAME",
      "RFILE_NUMBER",
      "REQUEST_DATE",
      "ROAD_NAME",
      "ROAD_ALIAS",
      "REQUEST_DESCRIPTION",
      "REQUEST_SOURCE_DESCRIPTION",
      "RESEARCH_RESULT",
      "IS_EXPROPRIATION",
      "EXPROPRIATION_NOTES",
      "RESEARCH_COMPLETION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSHPRT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RSHPRT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSHPRT_I_S_U_TR] ON PIMS_RESEARCH_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_PURPOSE_TYPE_CODE = deleted.RESEARCH_PURPOSE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_PURPOSE_TYPE
    set "RESEARCH_PURPOSE_TYPE_CODE" = inserted."RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_PURPOSE_TYPE
    inner join inserted
    on (PIMS_RESEARCH_PURPOSE_TYPE.RESEARCH_PURPOSE_TYPE_CODE = inserted.RESEARCH_PURPOSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RQSRCT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RQSRCT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RQSRCT_I_S_U_TR] ON PIMS_REQUEST_SOURCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.REQUEST_SOURCE_TYPE_CODE = deleted.REQUEST_SOURCE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_REQUEST_SOURCE_TYPE
    set "REQUEST_SOURCE_TYPE_CODE" = inserted."REQUEST_SOURCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_REQUEST_SOURCE_TYPE
    inner join inserted
    on (PIMS_REQUEST_SOURCE_TYPE.REQUEST_SOURCE_TYPE_CODE = inserted.REQUEST_SOURCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRSCRC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRSCRC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRSCRC_A_S_IUD_TR] ON PIMS_PROPERTY_RESEARCH_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_RESEARCH_FILE_HIST set END_DATE_HIST = @curr_date where PROPERTY_RESEARCH_FILE_ID in (select PROPERTY_RESEARCH_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_RESEARCH_FILE_HIST ([PROPERTY_RESEARCH_FILE_ID], [PROPERTY_ID], [RESEARCH_FILE_ID], [PROPERTY_NAME], [DISPLAY_ORDER], [IS_DISABLED], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_RESEARCH_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_RESEARCH_FILE_ID], [PROPERTY_ID], [RESEARCH_FILE_ID], [PROPERTY_NAME], [DISPLAY_ORDER], [IS_DISABLED], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_RESEARCH_FILE_H_ID_SEQ]) as [_PROPERTY_RESEARCH_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSHPRT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_RSHPRT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSHPRT_I_S_I_TR] ON PIMS_RESEARCH_PURPOSE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_PURPOSE_TYPE ("RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSFLPR_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RSFLPR_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSFLPR_I_S_U_TR] ON PIMS_RESEARCH_FILE_PURPOSE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_PURPOSE_ID = deleted.RESEARCH_FILE_PURPOSE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE_PURPOSE
    set "RESEARCH_FILE_PURPOSE_ID" = inserted."RESEARCH_FILE_PURPOSE_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "RESEARCH_PURPOSE_TYPE_CODE" = inserted."RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_PURPOSE
    inner join inserted
    on (PIMS_RESEARCH_FILE_PURPOSE.RESEARCH_FILE_PURPOSE_ID = inserted.RESEARCH_FILE_PURPOSE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRSCRC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRSCRC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRSCRC_I_S_U_TR] ON PIMS_PROPERTY_RESEARCH_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_RESEARCH_FILE_ID = deleted.PROPERTY_RESEARCH_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_RESEARCH_FILE
    set "PROPERTY_RESEARCH_FILE_ID" = inserted."PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "PROPERTY_NAME" = inserted."PROPERTY_NAME",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_RESEARCH_FILE
    inner join inserted
    on (PIMS_PROPERTY_RESEARCH_FILE.PROPERTY_RESEARCH_FILE_ID = inserted.PROPERTY_RESEARCH_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RESRCH_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_RESRCH_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RESRCH_A_S_IUD_TR] ON PIMS_RESEARCH_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_ID in (select RESEARCH_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_HIST ([RESEARCH_FILE_ID], [RESEARCH_FILE_STATUS_TYPE_CODE], [REQUEST_SOURCE_TYPE_CODE], [REQUESTOR_NAME], [REQUESTOR_ORGANIZATION], [NAME], [RFILE_NUMBER], [REQUEST_DATE], [REQUEST_SOURCE_DESCRIPTION], [IS_EXPROPRIATION], [RESEARCH_COMPLETION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_ID], [RESEARCH_FILE_STATUS_TYPE_CODE], [REQUEST_SOURCE_TYPE_CODE], [REQUESTOR_NAME], [REQUESTOR_ORGANIZATION], [NAME], [RFILE_NUMBER], [REQUEST_DATE], [REQUEST_SOURCE_DESCRIPTION], [IS_EXPROPRIATION], [RESEARCH_COMPLETION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_H_ID_SEQ]) as [_RESEARCH_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RQSRCT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_RQSRCT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RQSRCT_I_S_I_TR] ON PIMS_REQUEST_SOURCE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_REQUEST_SOURCE_TYPE ("REQUEST_SOURCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "REQUEST_SOURCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSFLPR_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_RSFLPR_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSFLPR_I_S_I_TR] ON PIMS_RESEARCH_FILE_PURPOSE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE_PURPOSE ("RESEARCH_FILE_PURPOSE_ID",
      "RESEARCH_FILE_ID",
      "RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_FILE_PURPOSE_ID",
      "RESEARCH_FILE_ID",
      "RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRSCRC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRSCRC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRSCRC_I_S_I_TR] ON PIMS_PROPERTY_RESEARCH_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_RESEARCH_FILE ("PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID",
      "RESEARCH_FILE_ID",
      "PROPERTY_NAME",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID",
      "RESEARCH_FILE_ID",
      "PROPERTY_NAME",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSFLPR_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_RSFLPR_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSFLPR_A_S_IUD_TR] ON PIMS_RESEARCH_FILE_PURPOSE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_PURPOSE_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_PURPOSE_ID in (select RESEARCH_FILE_PURPOSE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_PURPOSE_HIST ([RESEARCH_FILE_PURPOSE_ID], [RESEARCH_FILE_ID], [RESEARCH_PURPOSE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_PURPOSE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_PURPOSE_ID], [RESEARCH_FILE_ID], [RESEARCH_PURPOSE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_PURPOSE_H_ID_SEQ]) as [_RESEARCH_FILE_PURPOSE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RESRCH_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RESRCH_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RESRCH_I_S_U_TR] ON PIMS_RESEARCH_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_ID = deleted.RESEARCH_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE
    set "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "RESEARCH_FILE_STATUS_TYPE_CODE" = inserted."RESEARCH_FILE_STATUS_TYPE_CODE",
      "REQUEST_SOURCE_TYPE_CODE" = inserted."REQUEST_SOURCE_TYPE_CODE",
      "REQUESTOR_NAME" = inserted."REQUESTOR_NAME",
      "REQUESTOR_ORGANIZATION" = inserted."REQUESTOR_ORGANIZATION",
      "NAME" = inserted."NAME",
      "RFILE_NUMBER" = inserted."RFILE_NUMBER",
      "REQUEST_DATE" = inserted."REQUEST_DATE",
      "ROAD_NAME" = inserted."ROAD_NAME",
      "ROAD_ALIAS" = inserted."ROAD_ALIAS",
      "REQUEST_DESCRIPTION" = inserted."REQUEST_DESCRIPTION",
      "REQUEST_SOURCE_DESCRIPTION" = inserted."REQUEST_SOURCE_DESCRIPTION",
      "RESEARCH_RESULT" = inserted."RESEARCH_RESULT",
      "IS_EXPROPRIATION" = inserted."IS_EXPROPRIATION",
      "EXPROPRIATION_NOTES" = inserted."EXPROPRIATION_NOTES",
      "RESEARCH_COMPLETION_DATE" = inserted."RESEARCH_COMPLETION_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE
    inner join inserted
    on (PIMS_RESEARCH_FILE.RESEARCH_FILE_ID = inserted.RESEARCH_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
