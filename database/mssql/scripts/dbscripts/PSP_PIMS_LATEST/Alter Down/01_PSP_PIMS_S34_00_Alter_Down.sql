-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Mon Aug 08 19:12:16 PDT 2022
-- Execute this script on:
-- 		PSP_PIMS_S34_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S33_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Delete all data from the File-related tables in advance of the changes.
PRINT N'Delete all data from the File-related tables in advance of the changes.'
GO

PRINT N'DELETE FROM [dbo].[PIMS_RESEARCH_FILE_PURPOSE]'
GO
DELETE FROM [dbo].[PIMS_RESEARCH_FILE_PURPOSE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

PRINT N'DELETE FROM [dbo].[PIMS_RESEARCH_FILE]'
GO
DELETE FROM [dbo].[PIMS_RESEARCH_FILE] 
GO 
IF @@ERROR <> 0 SET NOEXEC ON
GO

PRINT N'DELETE FROM [dbo].[PIMS_ACQUISITION_OWNER]'
GO
DELETE FROM [dbo].[PIMS_ACQUISITION_OWNER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

PRINT N'DELETE FROM [dbo].[PIMS_ACQUISITION_FILE]'
GO
DELETE FROM [dbo].[PIMS_ACQUISITION_FILE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

PRINT N'DELETE FROM [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]'
GO
DELETE FROM [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE] 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

PRINT N'DELETE FROM [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]'
GO
DELETE FROM [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT] 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

PRINT N'DELETE FROM [dbo].[PIMS_ACTIVITY_INSTANCE_PROPERTY]'
GO
DELETE FROM [dbo].[PIMS_ACTIVITY_INSTANCE_PROPERTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

PRINT N'DELETE FROM [dbo].[PIMS_ACTIVITY_INSTANCE]'
GO
DELETE FROM [dbo].[PIMS_ACTIVITY_INSTANCE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

PRINT N'DELETE FROM [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]'
GO
DELETE FROM [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE] 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

PRINT N'DELETE FROM [dbo].[PIMS_FILE_PROPERTY_RESEARCH]'
GO
DELETE FROM [dbo].[PIMS_FILE_PROPERTY_RESEARCH] 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

PRINT N'DELETE FROM [dbo].[PIMS_FILE_PROPERTY]'
GO
DELETE FROM [dbo].[PIMS_FILE_PROPERTY] 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

PRINT N'DELETE FROM [dbo].[PIMS_FILE]'
GO
DELETE FROM [dbo].[PIMS_FILE] 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Deletion complete.
PRINT N'Deletion complete.'
GO


-- Drop foreign key constraint dbo.PIM_PRSCRC_PIM_PRSPRP_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRSCRC_PIM_PRSPRP_FK'
GO
ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]
	DROP CONSTRAINT IF EXISTS [PIM_PRSCRC_PIM_PRSPRP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_FILPRP_PIM_PRSCRC_FK
PRINT N'Drop foreign key constraint dbo.PIM_FILPRP_PIM_PRSCRC_FK'
GO
ALTER TABLE [dbo].[PIMS_FILE_PROPERTY_RESEARCH]
	DROP CONSTRAINT IF EXISTS [PIM_FILPRP_PIM_PRSCRC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTINS_PIM_ACTINP_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTINS_PIM_ACTINP_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_PROPERTY]
	DROP CONSTRAINT IF EXISTS [PIM_ACTINS_PIM_ACTINP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_FILPRP_PIM_ACTINP_FK
PRINT N'Drop foreign key constraint dbo.PIM_FILPRP_PIM_ACTINP_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_PROPERTY]
	DROP CONSTRAINT IF EXISTS [PIM_FILPRP_PIM_ACTINP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_FILE_PIM_FILPRP_FK
PRINT N'Drop foreign key constraint dbo.PIM_FILE_PIM_FILPRP_FK'
GO
ALTER TABLE [dbo].[PIMS_FILE_PROPERTY]
	DROP CONSTRAINT IF EXISTS [PIM_FILE_PIM_FILPRP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRACQF_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRACQF_FK'
GO
ALTER TABLE [dbo].[PIMS_FILE_PROPERTY]
	DROP CONSTRAINT IF EXISTS [PIM_PRPRTY_PIM_PRACQF_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_ACQPER_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_ACQPER_FK'
GO
ALTER TABLE [dbo].[PIMS_FILE_PERSON]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_ACQPER_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_FILE_PIM_FILPER_FK
PRINT N'Drop foreign key constraint dbo.PIM_FILE_PIM_FILPER_FK'
GO
ALTER TABLE [dbo].[PIMS_FILE_PERSON]
	DROP CONSTRAINT IF EXISTS [PIM_FILE_PIM_FILPER_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_FPRPRF_PIM_FILPER_FK
PRINT N'Drop foreign key constraint dbo.PIM_FPRPRF_PIM_FILPER_FK'
GO
ALTER TABLE [dbo].[PIMS_FILE_PERSON]
	DROP CONSTRAINT IF EXISTS [PIM_FPRPRF_PIM_FILPER_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_FILE_PIM_ACTINS_FK
PRINT N'Drop foreign key constraint dbo.PIM_FILE_PIM_ACTINS_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [PIM_FILE_PIM_ACTINS_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTIST_PIM_ACTINS_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTIST_PIM_ACTINS_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTIST_PIM_ACTINS_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_FILE_PIM_RESRCH_FK
PRINT N'Drop foreign key constraint dbo.PIM_FILE_PIM_RESRCH_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE]
	DROP CONSTRAINT IF EXISTS [PIM_FILE_PIM_RESRCH_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_FILE_PIM_ACQNFL_FK
PRINT N'Drop foreign key constraint dbo.PIM_FILE_PIM_ACQNFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	DROP CONSTRAINT IF EXISTS [PIM_FILE_PIM_ACQNFL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_FILTYP_PIM_FILE_FK
PRINT N'Drop foreign key constraint dbo.PIM_FILTYP_PIM_FILE_FK'
GO
ALTER TABLE [dbo].[PIMS_FILE]
	DROP CONSTRAINT IF EXISTS [PIM_FILTYP_PIM_FILE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique index dbo.RSFLPR_RESEARCH_PURPOSE_TUC
PRINT N'Drop unique index dbo.RSFLPR_RESEARCH_PURPOSE_TUC'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_RESEARCH_FILE_PURPOSE].[RSFLPR_RESEARCH_PURPOSE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique index dbo.ACTDOC_ACTV_INSTNC_DOC_TUC
PRINT N'Drop unique index dbo.ACTDOC_ACTV_INSTNC_DOC_TUC'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT].[ACTDOC_ACTV_INSTNC_DOC_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique index dbo.ACTINN_ACTV_INSTNC_NOTE_TUC
PRINT N'Drop unique index dbo.ACTINN_ACTV_INSTNC_NOTE_TUC'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE].[ACTINN_ACTV_INSTNC_NOTE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique index dbo.PRSPRP_RSRCH_FILE_PURPOSE_TUC
PRINT N'Drop unique index dbo.PRSPRP_RSRCH_FILE_PURPOSE_TUC'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE].[PRSPRP_RSRCH_FILE_PURPOSE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRSCRC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRSCRC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRSCRC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINS_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTINS_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINS_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RESRCH_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_RESRCH_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RESRCH_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.RESRCH_FILE_ID_IDX
PRINT N'Drop index dbo.RESRCH_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_RESEARCH_FILE].[RESRCH_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRSCRC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRSCRC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRSCRC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RESRCH_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RESRCH_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RESRCH_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQNFL_FILE_ID_IDX
PRINT N'Drop index dbo.ACQNFL_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_FILE].[ACQNFL_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINS_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACTINS_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINS_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTINS_FILE_ID_IDX
PRINT N'Drop index dbo.ACTINS_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE].[ACTINS_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE].[ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTINS_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRSCRC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRSCRC_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRSCRC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique index dbo.PRSCRC_RSRCH_FILE_PROP_TUC
PRINT N'Drop unique index dbo.PRSCRC_RSRCH_FILE_PROP_TUC'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_FILE_PROPERTY_RESEARCH].[PRSCRC_RSRCH_FILE_PROP_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRSCRC_FILE_PROPERTY_ID_IDX
PRINT N'Drop index dbo.PRSCRC_FILE_PROPERTY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_FILE_PROPERTY_RESEARCH].[PRSCRC_FILE_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTINP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTINP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACTINP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTINP_FILE_PROPERTY_ID_IDX
PRINT N'Drop index dbo.ACTINP_FILE_PROPERTY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_PROPERTY].[ACTINP_FILE_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique index dbo.ACTINP_ACTVTY_INSTNC_PROP_TUC
PRINT N'Drop unique index dbo.ACTINP_ACTVTY_INSTNC_PROP_TUC'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_PROPERTY].[ACTINP_ACTVTY_INSTNC_PROP_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTINP_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Drop index dbo.ACTINP_ACTIVITY_INSTANCE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_PROPERTY].[ACTINP_ACTIVITY_INSTANCE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FILPRP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_FILPRP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FILPRP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FILPRP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_FILPRP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FILPRP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FILPRP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_FILPRP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FILPRP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.FILPRP_PROPERTY_ID_IDX
PRINT N'Drop index dbo.FILPRP_PROPERTY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_FILE_PROPERTY].[FILPRP_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique index dbo.FILPRP_FILE_PROPERTY_TUC
PRINT N'Drop unique index dbo.FILPRP_FILE_PROPERTY_TUC'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_FILE_PROPERTY].[FILPRP_FILE_PROPERTY_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.FILPRP_FILE_ID_IDX
PRINT N'Drop index dbo.FILPRP_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_FILE_PROPERTY].[FILPRP_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FILPER_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_FILPER_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FILPER_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FILPER_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_FILPER_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FILPER_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FILPER_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_FILPER_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FILPER_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.FILPER_PERSON_ID_IDX
PRINT N'Drop index dbo.FILPER_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_FILE_PERSON].[FILPER_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.FILPER_FILE_PERSON_PROFILE_TYPE_CODE_IDX
PRINT N'Drop index dbo.FILPER_FILE_PERSON_PROFILE_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_FILE_PERSON].[FILPER_FILE_PERSON_PROFILE_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.FILPER_FILE_ID_IDX
PRINT N'Drop index dbo.FILPER_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_FILE_PERSON].[FILPER_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FPRPRF_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_FPRPRF_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FPRPRF_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FPRPRF_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_FPRPRF_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FPRPRF_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RESRCH_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_RESRCH_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RESRCH_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTIST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTIST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTIST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTIST_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTIST_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTIST_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FILE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_FILE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FILE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FILE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_FILE_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FILE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FILE_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_FILE_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FILE_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.FILE_FILE_TYPE_CODE_IDX
PRINT N'Drop index dbo.FILE_FILE_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_FILE].[FILE_FILE_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FILTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_FILTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FILTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FILTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_FILTYP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FILTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PRSPRP_PROP_PURPOSE_TUC
PRINT N'Drop unique constraint dbo.PRSPRP_PROP_PURPOSE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]
	DROP CONSTRAINT IF EXISTS [PRSPRP_PROP_PURPOSE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRSCRC_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRSCRC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_FILE_PROPERTY_RESEARCH_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRSCRC_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRSCRC_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRSCRC_H_PK'
GO
ALTER TABLE [dbo].[PIMS_FILE_PROPERTY_RESEARCH_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRSCRC_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRSCRC_PK
PRINT N'Drop primary key constraint dbo.PRSCRC_PK'
GO
ALTER TABLE [dbo].[PIMS_FILE_PROPERTY_RESEARCH]
	DROP CONSTRAINT IF EXISTS [PRSCRC_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_FILE_PROPERTY_RESEARCH
PRINT N'Drop table dbo.PIMS_FILE_PROPERTY_RESEARCH'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_FILE_PROPERTY_RESEARCH]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ACTINP_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ACTINP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_PROPERTY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTINP_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ACTINP_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ACTINP_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_PROPERTY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTINP_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.ACTINP_PK
PRINT N'Drop primary key constraint dbo.ACTINP_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_PROPERTY]
	DROP CONSTRAINT IF EXISTS [ACTINP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_INSTANCE_PROPERTY
PRINT N'Drop table dbo.PIMS_ACTIVITY_INSTANCE_PROPERTY'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_PROPERTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_FILPRP_H_UK
PRINT N'Drop unique constraint dbo.PIMS_FILPRP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_FILE_PROPERTY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_FILPRP_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_FILPRP_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_FILPRP_H_PK'
GO
ALTER TABLE [dbo].[PIMS_FILE_PROPERTY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_FILPRP_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.FILPRP_PK
PRINT N'Drop primary key constraint dbo.FILPRP_PK'
GO
ALTER TABLE [dbo].[PIMS_FILE_PROPERTY]
	DROP CONSTRAINT IF EXISTS [FILPRP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_FILE_PROPERTY
PRINT N'Drop table dbo.PIMS_FILE_PROPERTY'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_FILE_PROPERTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_FILPER_H_UK
PRINT N'Drop unique constraint dbo.PIMS_FILPER_H_UK'
GO
ALTER TABLE [dbo].[PIMS_FILE_PERSON_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_FILPER_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_FILPER_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_FILPER_H_PK'
GO
ALTER TABLE [dbo].[PIMS_FILE_PERSON_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_FILPER_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.ACQPER_PERSON_PROFILE_TUC
PRINT N'Drop unique constraint dbo.ACQPER_PERSON_PROFILE_TUC'
GO
ALTER TABLE [dbo].[PIMS_FILE_PERSON]
	DROP CONSTRAINT IF EXISTS [ACQPER_PERSON_PROFILE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.FILPER_PK
PRINT N'Drop primary key constraint dbo.FILPER_PK'
GO
ALTER TABLE [dbo].[PIMS_FILE_PERSON]
	DROP CONSTRAINT IF EXISTS [FILPER_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_FILE_PERSON
PRINT N'Drop table dbo.PIMS_FILE_PERSON'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_FILE_PERSON]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.FPRPRF_PK
PRINT N'Drop primary key constraint dbo.FPRPRF_PK'
GO
ALTER TABLE [dbo].[PIMS_FILE_PERSON_PROFILE_TYPE]
	DROP CONSTRAINT IF EXISTS [FPRPRF_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.ACTIST_PK
PRINT N'Drop primary key constraint dbo.ACTIST_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_STATUS_TYPE]
	DROP CONSTRAINT IF EXISTS [ACTIST_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_FILE_H_UK
PRINT N'Drop unique constraint dbo.PIMS_FILE_H_UK'
GO
ALTER TABLE [dbo].[PIMS_FILE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_FILE_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_FILE_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_FILE_H_PK'
GO
ALTER TABLE [dbo].[PIMS_FILE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_FILE_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.FILE_PK
PRINT N'Drop primary key constraint dbo.FILE_PK'
GO
ALTER TABLE [dbo].[PIMS_FILE]
	DROP CONSTRAINT IF EXISTS [FILE_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.FILTYP_PK
PRINT N'Drop primary key constraint dbo.FILTYP_PK'
GO
ALTER TABLE [dbo].[PIMS_FILE_TYPE]
	DROP CONSTRAINT IF EXISTS [FILTYP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQ_FL_PERSON_PROFILE_TYPE
PRINT N'Create table dbo.PIMS_ACQ_FL_PERSON_PROFILE_TYPE'
GO
CREATE TABLE [dbo].[PIMS_ACQ_FL_PERSON_PROFILE_TYPE]  ( 
	[ACQ_FL_PERSON_PROFILE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[IS_DISABLED]                    	bit NOT NULL CONSTRAINT [AQFPPT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                  	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [AQFPPT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [AQFPPT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [AQFPPT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [AQFPPT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [AQFPPT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AQFPPT_PK] PRIMARY KEY CLUSTERED([ACQ_FL_PERSON_PROFILE_TYPE_CODE])
 ON [PRIMARY])
ON [PRIMARY]
	WITH (
		DATA_COMPRESSION = NONE
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the acquistion file staff profile (role).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_PERSON_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'ACQ_FL_PERSON_PROFILE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquistion file staff profile (role).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_PERSON_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_PERSON_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_PERSON_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquistion file staff profile (role).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_PERSON_PROFILE_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	DROP CONSTRAINT IF EXISTS [ACQNFL_FILE_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	DROP COLUMN IF EXISTS [FILE_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_FILE_PERSON
PRINT N'Create table dbo.PIMS_ACQUISITION_FILE_PERSON'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]  ( 
	[ACQUISITION_FILE_PERSON_ID]     	bigint NOT NULL CONSTRAINT [ACQPER_ACQUISITION_FILE_PERSON_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_PERSON_ID_SEQ]),
	[ACQUISITION_FILE_ID]            	bigint NOT NULL,
	[PERSON_ID]                      	bigint NOT NULL,
	[ACQ_FL_PERSON_PROFILE_TYPE_CODE]	nvarchar(20) NULL,
	[IS_DISABLED]                    	bit NULL CONSTRAINT [ACQPER_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [ACQPER_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACQPER_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACQPER_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [ACQPER_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ACQPER_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQPER_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FILE_PERSON_ID])
 ON [PRIMARY])
ON [PRIMARY]
	WITH (
		DATA_COMPRESSION = NONE
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_PERSON', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table to associate an acquisition file to a person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_PERSON'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.ACQPER_PERSON_PROFILE_TUC
PRINT N'Create unique constraint dbo.ACQPER_PERSON_PROFILE_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	ADD CONSTRAINT [ACQPER_PERSON_PROFILE_TUC]
	UNIQUE ([ACQ_FL_PERSON_PROFILE_TYPE_CODE], [PERSON_ID], [ACQUISITION_FILE_ID])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY
PRINT N'Alter table dbo.PIMS_PROPERTY'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY] ALTER COLUMN [FILE_NUMBER_SUFFIX] varchar(2) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE]
	DROP CONSTRAINT IF EXISTS [RESRCH_FILE_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE]
	DROP COLUMN IF EXISTS [FILE_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_RESEARCH_FILE
PRINT N'Create table dbo.PIMS_PROPERTY_RESEARCH_FILE'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE]  ( 
	[PROPERTY_RESEARCH_FILE_ID]     	bigint NOT NULL CONSTRAINT [PRSCRC_PROPERTY_RESEARCH_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_RESEARCH_FILE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[PROPERTY_NAME]                 	nvarchar(500) NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [PRSCRC_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_LEGAL_OPINION_REQUIRED]     	bit NULL,
	[IS_LEGAL_OPINION_OBTAINED]     	bit NULL,
	[DOCUMENT_REFERENCE]            	nvarchar(2000) NULL,
	[RESEARCH_SUMMARY]              	nvarchar(max) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRSCRC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRSCRC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRSCRC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRSCRC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRSCRC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRSCRC_PK] PRIMARY KEY CLUSTERED([PROPERTY_RESEARCH_FILE_ID])
 ON [PRIMARY])
ON [PRIMARY]
	TEXTIMAGE_ON [PRIMARY]
	WITH (
		DATA_COMPRESSION = NONE
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive reference for the property being researched.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'PROPERTY_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether a legal opinion is required (0 = No, 1 = Yes, null = Unknown)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'IS_LEGAL_OPINION_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether a legal opinion was obtained (0 = No, 1 = Yes, null = Unknown)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'IS_LEGAL_OPINION_OBTAINED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'URL / reference to a LAN Drive' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_REFERENCE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Summary of the property research.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'RESEARCH_SUMMARY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property with a research file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_ACQUISITION_FILE
PRINT N'Create table dbo.PIMS_PROPERTY_ACQUISITION_FILE'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]  ( 
	[PROPERTY_ACQUISITION_FILE_ID]  	bigint NOT NULL CONSTRAINT [PRACQF_PROPERTY_ACQUISITION_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACQUISITION_FILE_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [PRACQF_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRACQF_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACQF_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACQF_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACQF_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACQF_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACQF_PK] PRIMARY KEY CLUSTERED([PROPERTY_ACQUISITION_FILE_ID])
 ON [PRIMARY])
ON [PRIMARY]
	WITH (
		DATA_COMPRESSION = NONE
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property with an acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACTIVITY_INSTANCE
PRINT N'Alter table dbo.PIMS_ACTIVITY_INSTANCE'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE] ALTER COLUMN [ACTIVITY_TEMPLATE_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE] DROP CONSTRAINT IF EXISTS [ACTINS_ACTIVITY_TEMPLATE_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [ACTINS_FILE_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]
	DROP COLUMN IF EXISTS [FILE_ID], [ACTIVITY_INSTANCE_STATUS_TYPE_CODE], [DESCRIPTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE
PRINT N'Create table dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]  ( 
	[ACQUISITION_ACTIVITY_INSTANCE_ID]	bigint NOT NULL CONSTRAINT [ACQAIN_ACQUISITION_ACTIVITY_INSTANCE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_ACTIVITY_INSTANCE_ID_SEQ]),
	[ACQUISITION_FILE_ID]             	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]            	bigint NOT NULL,
	[IS_DISABLED]                     	bit NULL CONSTRAINT [ACQAIN_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL CONSTRAINT [ACQAIN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [ACQAIN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ACQAIN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [ACQAIN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [ACQAIN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQAIN_PK] PRIMARY KEY CLUSTERED([ACQUISITION_ACTIVITY_INSTANCE_ID])
 ON [PRIMARY])
ON [PRIMARY]
	WITH (
		DATA_COMPRESSION = NONE
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_ACTIVITY_INSTANCE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_FILE_PERSON_HIST
PRINT N'Create table dbo.PIMS_ACQUISITION_FILE_PERSON_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON_HIST]  ( 
	[_ACQUISITION_FILE_PERSON_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_PERSON_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]             	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                   	datetime NULL,
	[ACQUISITION_FILE_PERSON_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]             	bigint NOT NULL,
	[PERSON_ID]                       	bigint NOT NULL,
	[ACQ_FL_PERSON_PROFILE_TYPE_CODE] 	nvarchar(20) NULL,
	[IS_DISABLED]                     	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQPER_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_FILE_PERSON_HIST_ID])
 ON [PRIMARY])
ON [PRIMARY]
	WITH (
		DATA_COMPRESSION = NONE
	)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACQPER_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACQPER_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON_HIST]
	ADD CONSTRAINT [PIMS_ACQPER_H_UK]
	UNIQUE ([_ACQUISITION_FILE_PERSON_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_RESEARCH_FILE_HIST
PRINT N'Create table dbo.PIMS_PROPERTY_RESEARCH_FILE_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE_HIST]  ( 
	[_PROPERTY_RESEARCH_FILE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_RESEARCH_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[PROPERTY_RESEARCH_FILE_ID]      	bigint NOT NULL,
	[PROPERTY_ID]                    	bigint NOT NULL,
	[RESEARCH_FILE_ID]               	bigint NOT NULL,
	[PROPERTY_NAME]                  	nvarchar(500) NULL,
	[DISPLAY_ORDER]                  	int NULL,
	[IS_DISABLED]                    	bit NULL,
	[IS_LEGAL_OPINION_REQUIRED]      	bit NULL,
	[IS_LEGAL_OPINION_OBTAINED]      	bit NULL,
	[DOCUMENT_REFERENCE]             	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRSCRC_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_RESEARCH_FILE_HIST_ID])
 ON [PRIMARY])
ON [PRIMARY]
	WITH (
		DATA_COMPRESSION = NONE
	)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRSCRC_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRSCRC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE_HIST]
	ADD CONSTRAINT [PIMS_PRSCRC_H_UK]
	UNIQUE ([_PROPERTY_RESEARCH_FILE_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACTIVITY_INSTANCE_HIST
PRINT N'Alter table dbo.PIMS_ACTIVITY_INSTANCE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST] ALTER COLUMN [ACTIVITY_TEMPLATE_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST]
	DROP COLUMN IF EXISTS [FILE_ID], [ACTIVITY_INSTANCE_STATUS_TYPE_CODE], [DESCRIPTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST]
	DROP COLUMN IF EXISTS [FILE_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_HIST
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_HIST]
	DROP COLUMN IF EXISTS [FILE_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_ACQUISITION_FILE_HIST
PRINT N'Create table dbo.PIMS_PROPERTY_ACQUISITION_FILE_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_HIST]  ( 
	[_PROPERTY_ACQUISITION_FILE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACQUISITION_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[PROPERTY_ACQUISITION_FILE_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]               	bigint NOT NULL,
	[PROPERTY_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                       	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRACQF_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_ACQUISITION_FILE_HIST_ID])
 ON [PRIMARY])
ON [PRIMARY]
	WITH (
		DATA_COMPRESSION = NONE
	)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRACQF_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRACQF_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_HIST]
	ADD CONSTRAINT [PIMS_PRACQF_H_UK]
	UNIQUE ([_PROPERTY_ACQUISITION_FILE_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST
PRINT N'Create table dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST]  ( 
	[_ACQUISITION_ACTIVITY_INSTANCE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                   	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                         	datetime NULL,
	[ACQUISITION_ACTIVITY_INSTANCE_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]                   	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]                  	bigint NOT NULL,
	[IS_DISABLED]                           	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]            	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]                  	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USERID]                     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                  	uniqueidentifier NULL,
	[APP_LAST_UPDATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                   	datetime NOT NULL,
	[DB_CREATE_USERID]                      	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]                 	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQAIN_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_ACTIVITY_INSTANCE_HIST_ID])
 ON [PRIMARY])
ON [PRIMARY]
	WITH (
		DATA_COMPRESSION = NONE
	)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACQAIN_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACQAIN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST]
	ADD CONSTRAINT [PIMS_ACQAIN_H_UK]
	UNIQUE ([_ACQUISITION_ACTIVITY_INSTANCE_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_OWNER_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST] ALTER COLUMN [ACQUISITION_FILE_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PRSPRP_PROP_PURPOSE_TUC
PRINT N'Create unique constraint dbo.PRSPRP_PROP_PURPOSE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]
	ADD CONSTRAINT [PRSPRP_PROP_PURPOSE_TUC]
	UNIQUE ([PROP_RESEARCH_PURPOSE_TYPE_CODE], [PROPERTY_RESEARCH_FILE_ID])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_HIST] ALTER COLUMN [FILE_NUMBER_SUFFIX] varchar(2) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_OWNER
PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER] ALTER COLUMN [ACQUISITION_FILE_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPER_PERSON_ID_IDX
PRINT N'Create index dbo.ACQPER_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPER_PERSON_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_PERSON]([PERSON_ID])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPER_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.ACQPER_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPER_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_PERSON]([ACQUISITION_FILE_ID])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPER_ACQ_FL_PERSON_PROFILE_TYPE_CODE_IDX
PRINT N'Create index dbo.ACQPER_ACQ_FL_PERSON_PROFILE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPER_ACQ_FL_PERSON_PROFILE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_PERSON]([ACQ_FL_PERSON_PROFILE_TYPE_CODE])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRSCRC_RESEARCH_FILE_ID_IDX
PRINT N'Create index dbo.PRSCRC_RESEARCH_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRSCRC_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_RESEARCH_FILE]([RESEARCH_FILE_ID])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACQF_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.PRACQF_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACQF_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACQF_PROPERTY_ID_IDX
PRINT N'Create index dbo.PRACQF_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACQF_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]([PROPERTY_ID])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQAIN_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Create index dbo.ACQAIN_ACTIVITY_INSTANCE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQAIN_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRSCRC_PROPERTY_ID_IDX
PRINT N'Create index dbo.PRSCRC_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRSCRC_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_RESEARCH_FILE]([PROPERTY_ID])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQAIN_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.ACQAIN_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQAIN_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]([ACQUISITION_FILE_ID])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RESRCH_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_RESRCH_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RESRCH_I_S_I_TR] ON PIMS_RESEARCH_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE ("RESEARCH_FILE_ID",
      "RESEARCH_FILE_STATUS_TYPE_CODE",
      "REQUEST_SOURCE_TYPE_CODE",
      "REQUESTOR_NAME",
      "REQUESTOR_ORGANIZATION",
      "NAME",
      "RFILE_NUMBER",
      "REQUEST_DATE",
      "ROAD_NAME",
      "ROAD_ALIAS",
      "REQUEST_DESCRIPTION",
      "REQUEST_SOURCE_DESCRIPTION",
      "RESEARCH_RESULT",
      "IS_EXPROPRIATION",
      "EXPROPRIATION_NOTES",
      "RESEARCH_COMPLETION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_FILE_ID",
      "RESEARCH_FILE_STATUS_TYPE_CODE",
      "REQUEST_SOURCE_TYPE_CODE",
      "REQUESTOR_NAME",
      "REQUESTOR_ORGANIZATION",
      "NAME",
      "RFILE_NUMBER",
      "REQUEST_DATE",
      "ROAD_NAME",
      "ROAD_ALIAS",
      "REQUEST_DESCRIPTION",
      "REQUEST_SOURCE_DESCRIPTION",
      "RESEARCH_RESULT",
      "IS_EXPROPRIATION",
      "EXPROPRIATION_NOTES",
      "RESEARCH_COMPLETION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_I_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE ("ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "MINISTRY_PROJECT_NUMBER",
      "MINISTRY_PROJECT_NAME",
      "CPS_PRODUCT_CODE",
      "FILE_NAME",
      "FILE_NUMBER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "MINISTRY_PROJECT_NUMBER",
      "MINISTRY_PROJECT_NAME",
      "CPS_PRODUCT_CODE",
      "FILE_NAME",
      "FILE_NUMBER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPER_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQPER_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPER_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE_PERSON FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_PERSON_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_PERSON_ID in (select ACQUISITION_FILE_PERSON_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_PERSON_HIST ([ACQUISITION_FILE_PERSON_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ACQ_FL_PERSON_PROFILE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_PERSON_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_PERSON_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ACQ_FL_PERSON_PROFILE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_PERSON_H_ID_SEQ]) as [_ACQUISITION_FILE_PERSON_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACQF_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACQF_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACQF_I_S_I_TR] ON PIMS_PROPERTY_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACQUISITION_FILE ("PROPERTY_ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_ID",
      "PROPERTY_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_ID",
      "PROPERTY_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRSCRC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRSCRC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRSCRC_A_S_IUD_TR] ON PIMS_PROPERTY_RESEARCH_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_RESEARCH_FILE_HIST set END_DATE_HIST = @curr_date where PROPERTY_RESEARCH_FILE_ID in (select PROPERTY_RESEARCH_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_RESEARCH_FILE_HIST ([PROPERTY_RESEARCH_FILE_ID], [PROPERTY_ID], [RESEARCH_FILE_ID], [PROPERTY_NAME], [DISPLAY_ORDER], [IS_DISABLED], [IS_LEGAL_OPINION_REQUIRED], [IS_LEGAL_OPINION_OBTAINED], [DOCUMENT_REFERENCE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_RESEARCH_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_RESEARCH_FILE_ID], [PROPERTY_ID], [RESEARCH_FILE_ID], [PROPERTY_NAME], [DISPLAY_ORDER], [IS_DISABLED], [IS_LEGAL_OPINION_REQUIRED], [IS_LEGAL_OPINION_OBTAINED], [DOCUMENT_REFERENCE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_RESEARCH_FILE_H_ID_SEQ]) as [_PROPERTY_RESEARCH_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTINS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINS_I_S_U_TR] ON PIMS_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_INSTANCE_ID = deleted.ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_INSTANCE
    set "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "ACTIVITY_TEMPLATE_ID" = inserted."ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_DATA_JSON" = inserted."ACTIVITY_DATA_JSON",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_ACTIVITY_INSTANCE.ACTIVITY_INSTANCE_ID = inserted.ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINS_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACTINS_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINS_A_S_IUD_TR] ON PIMS_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where ACTIVITY_INSTANCE_ID in (select ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_INSTANCE_HIST ([ACTIVITY_INSTANCE_ID], [ACTIVITY_TEMPLATE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_INSTANCE_ID], [ACTIVITY_TEMPLATE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQAIN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQAIN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQAIN_I_S_U_TR] ON PIMS_ACQUISITION_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_ACTIVITY_INSTANCE_ID = deleted.ACQUISITION_ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_ACTIVITY_INSTANCE
    set "ACQUISITION_ACTIVITY_INSTANCE_ID" = inserted."ACQUISITION_ACTIVITY_INSTANCE_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_ACQUISITION_ACTIVITY_INSTANCE.ACQUISITION_ACTIVITY_INSTANCE_ID = inserted.ACQUISITION_ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_ID in (select ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_HIST ([ACQUISITION_FILE_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [MINISTRY_PROJECT_NUMBER], [MINISTRY_PROJECT_NAME], [CPS_PRODUCT_CODE], [FILE_NAME], [FILE_NUMBER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [MINISTRY_PROJECT_NUMBER], [MINISTRY_PROJECT_NAME], [CPS_PRODUCT_CODE], [FILE_NAME], [FILE_NUMBER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_H_ID_SEQ]) as [_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQFPPT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AQFPPT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQFPPT_I_S_I_TR] ON PIMS_ACQ_FL_PERSON_PROFILE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_FL_PERSON_PROFILE_TYPE ("ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPER_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQPER_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPER_I_S_I_TR] ON PIMS_ACQUISITION_FILE_PERSON INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE_PERSON ("ACQUISITION_FILE_PERSON_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_PERSON_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RESRCH_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RESRCH_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RESRCH_I_S_U_TR] ON PIMS_RESEARCH_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_ID = deleted.RESEARCH_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE
    set "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "RESEARCH_FILE_STATUS_TYPE_CODE" = inserted."RESEARCH_FILE_STATUS_TYPE_CODE",
      "REQUEST_SOURCE_TYPE_CODE" = inserted."REQUEST_SOURCE_TYPE_CODE",
      "REQUESTOR_NAME" = inserted."REQUESTOR_NAME",
      "REQUESTOR_ORGANIZATION" = inserted."REQUESTOR_ORGANIZATION",
      "NAME" = inserted."NAME",
      "RFILE_NUMBER" = inserted."RFILE_NUMBER",
      "REQUEST_DATE" = inserted."REQUEST_DATE",
      "ROAD_NAME" = inserted."ROAD_NAME",
      "ROAD_ALIAS" = inserted."ROAD_ALIAS",
      "REQUEST_DESCRIPTION" = inserted."REQUEST_DESCRIPTION",
      "REQUEST_SOURCE_DESCRIPTION" = inserted."REQUEST_SOURCE_DESCRIPTION",
      "RESEARCH_RESULT" = inserted."RESEARCH_RESULT",
      "IS_EXPROPRIATION" = inserted."IS_EXPROPRIATION",
      "EXPROPRIATION_NOTES" = inserted."EXPROPRIATION_NOTES",
      "RESEARCH_COMPLETION_DATE" = inserted."RESEARCH_COMPLETION_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE
    inner join inserted
    on (PIMS_RESEARCH_FILE.RESEARCH_FILE_ID = inserted.RESEARCH_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACQF_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACQF_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACQF_I_S_U_TR] ON PIMS_PROPERTY_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACQUISITION_FILE_ID = deleted.PROPERTY_ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACQUISITION_FILE
    set "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACQUISITION_FILE
    inner join inserted
    on (PIMS_PROPERTY_ACQUISITION_FILE.PROPERTY_ACQUISITION_FILE_ID = inserted.PROPERTY_ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRSCRC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRSCRC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRSCRC_I_S_U_TR] ON PIMS_PROPERTY_RESEARCH_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_RESEARCH_FILE_ID = deleted.PROPERTY_RESEARCH_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_RESEARCH_FILE
    set "PROPERTY_RESEARCH_FILE_ID" = inserted."PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "PROPERTY_NAME" = inserted."PROPERTY_NAME",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "IS_LEGAL_OPINION_REQUIRED" = inserted."IS_LEGAL_OPINION_REQUIRED",
      "IS_LEGAL_OPINION_OBTAINED" = inserted."IS_LEGAL_OPINION_OBTAINED",
      "DOCUMENT_REFERENCE" = inserted."DOCUMENT_REFERENCE",
      "RESEARCH_SUMMARY" = inserted."RESEARCH_SUMMARY",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_RESEARCH_FILE
    inner join inserted
    on (PIMS_PROPERTY_RESEARCH_FILE.PROPERTY_RESEARCH_FILE_ID = inserted.PROPERTY_RESEARCH_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RESRCH_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_RESRCH_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RESRCH_A_S_IUD_TR] ON PIMS_RESEARCH_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_ID in (select RESEARCH_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_HIST ([RESEARCH_FILE_ID], [RESEARCH_FILE_STATUS_TYPE_CODE], [REQUEST_SOURCE_TYPE_CODE], [REQUESTOR_NAME], [REQUESTOR_ORGANIZATION], [NAME], [RFILE_NUMBER], [REQUEST_DATE], [REQUEST_SOURCE_DESCRIPTION], [IS_EXPROPRIATION], [RESEARCH_COMPLETION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_ID], [RESEARCH_FILE_STATUS_TYPE_CODE], [REQUEST_SOURCE_TYPE_CODE], [REQUESTOR_NAME], [REQUESTOR_ORGANIZATION], [NAME], [RFILE_NUMBER], [REQUEST_DATE], [REQUEST_SOURCE_DESCRIPTION], [IS_EXPROPRIATION], [RESEARCH_COMPLETION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_H_ID_SEQ]) as [_RESEARCH_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_U_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_ID = deleted.ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE
    set "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "MINISTRY_PROJECT_NUMBER" = inserted."MINISTRY_PROJECT_NUMBER",
      "MINISTRY_PROJECT_NAME" = inserted."MINISTRY_PROJECT_NAME",
      "CPS_PRODUCT_CODE" = inserted."CPS_PRODUCT_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "FUNDING_OTHER" = inserted."FUNDING_OTHER",
      "ASSIGNED_DATE" = inserted."ASSIGNED_DATE",
      "DELIVERY_DATE" = inserted."DELIVERY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE
    inner join inserted
    on (PIMS_ACQUISITION_FILE.ACQUISITION_FILE_ID = inserted.ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINS_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTINS_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINS_I_S_I_TR] ON PIMS_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_INSTANCE ("ACTIVITY_INSTANCE_ID",
      "ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_DATA_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_INSTANCE_ID",
      "ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_DATA_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACQF_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRACQF_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACQF_A_S_IUD_TR] ON PIMS_PROPERTY_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACQUISITION_FILE_ID in (select PROPERTY_ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACQUISITION_FILE_HIST ([PROPERTY_ACQUISITION_FILE_ID], [ACQUISITION_FILE_ID], [PROPERTY_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACQUISITION_FILE_ID], [ACQUISITION_FILE_ID], [PROPERTY_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_H_ID_SEQ]) as [_PROPERTY_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQAIN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQAIN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQAIN_I_S_I_TR] ON PIMS_ACQUISITION_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_ACTIVITY_INSTANCE ("ACQUISITION_ACTIVITY_INSTANCE_ID",
      "ACQUISITION_FILE_ID",
      "ACTIVITY_INSTANCE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_ACTIVITY_INSTANCE_ID",
      "ACQUISITION_FILE_ID",
      "ACTIVITY_INSTANCE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQFPPT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AQFPPT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQFPPT_I_S_U_TR] ON PIMS_ACQ_FL_PERSON_PROFILE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_FL_PERSON_PROFILE_TYPE_CODE = deleted.ACQ_FL_PERSON_PROFILE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_FL_PERSON_PROFILE_TYPE
    set "ACQ_FL_PERSON_PROFILE_TYPE_CODE" = inserted."ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_FL_PERSON_PROFILE_TYPE
    inner join inserted
    on (PIMS_ACQ_FL_PERSON_PROFILE_TYPE.ACQ_FL_PERSON_PROFILE_TYPE_CODE = inserted.ACQ_FL_PERSON_PROFILE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQAIN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQAIN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQAIN_A_S_IUD_TR] ON PIMS_ACQUISITION_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_ACTIVITY_INSTANCE_ID in (select ACQUISITION_ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST ([ACQUISITION_ACTIVITY_INSTANCE_ID], [ACQUISITION_FILE_ID], [ACTIVITY_INSTANCE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_ACTIVITY_INSTANCE_ID], [ACQUISITION_FILE_ID], [ACTIVITY_INSTANCE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_ACQUISITION_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPER_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQPER_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPER_I_S_U_TR] ON PIMS_ACQUISITION_FILE_PERSON INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_PERSON_ID = deleted.ACQUISITION_FILE_PERSON_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE_PERSON
    set "ACQUISITION_FILE_PERSON_ID" = inserted."ACQUISITION_FILE_PERSON_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ACQ_FL_PERSON_PROFILE_TYPE_CODE" = inserted."ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE_PERSON
    inner join inserted
    on (PIMS_ACQUISITION_FILE_PERSON.ACQUISITION_FILE_PERSON_ID = inserted.ACQUISITION_FILE_PERSON_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRSCRC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRSCRC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRSCRC_I_S_I_TR] ON PIMS_PROPERTY_RESEARCH_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_RESEARCH_FILE ("PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID",
      "RESEARCH_FILE_ID",
      "PROPERTY_NAME",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "IS_LEGAL_OPINION_REQUIRED",
      "IS_LEGAL_OPINION_OBTAINED",
      "DOCUMENT_REFERENCE",
      "RESEARCH_SUMMARY",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID",
      "RESEARCH_FILE_ID",
      "PROPERTY_NAME",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "IS_LEGAL_OPINION_REQUIRED",
      "IS_LEGAL_OPINION_OBTAINED",
      "DOCUMENT_REFERENCE",
      "RESEARCH_SUMMARY",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_ACQPER_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_ACQPER_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	ADD CONSTRAINT [PIM_PERSON_PIM_ACQPER_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_AQFPPT_PIM_ACQPER_FK
PRINT N'Create foreign key constraint dbo.PIM_AQFPPT_PIM_ACQPER_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	ADD CONSTRAINT [PIM_AQFPPT_PIM_ACQPER_FK]
	FOREIGN KEY([ACQ_FL_PERSON_PROFILE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQ_FL_PERSON_PROFILE_TYPE]([ACQ_FL_PERSON_PROFILE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQPER_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQPER_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQPER_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRSCRC_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRSCRC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRSCRC_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_RESRCH_PIM_PRSCRC_FK
PRINT N'Create foreign key constraint dbo.PIM_RESRCH_PIM_PRSCRC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_RESRCH_PIM_PRSCRC_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRACQF_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRACQF_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRACQF_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_PRACQF_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_PRACQF_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_PRACQF_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_ACQAIN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_ACQAIN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_ACQAIN_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQAIN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQAIN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQAIN_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRSCRC_PIM_PRSPRP_FK
PRINT N'Create foreign key constraint dbo.PIM_PRSCRC_PIM_PRSPRP_FK'
GO
ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]
	ADD CONSTRAINT [PIM_PRSCRC_PIM_PRSPRP_FK]
	FOREIGN KEY([PROPERTY_RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_RESEARCH_FILE]([PROPERTY_RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_FILE_PROPERTY_RESEARCH_HIST
PRINT N'Drop table dbo.PIMS_FILE_PROPERTY_RESEARCH_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_FILE_PROPERTY_RESEARCH_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_FILE_PROPERTY_RESEARCH_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_FILE_PROPERTY_RESEARCH_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_FILE_PROPERTY_RESEARCH_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_INSTANCE_PROPERTY_HIST
PRINT N'Drop table dbo.PIMS_ACTIVITY_INSTANCE_PROPERTY_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_PROPERTY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACTIVITY_INSTANCE_PROPERTY_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACTIVITY_INSTANCE_PROPERTY_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_PROPERTY_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACTIVITY_INSTANCE_PROPERTY_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACTIVITY_INSTANCE_PROPERTY_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_PROPERTY_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_FILE_PROPERTY_HIST
PRINT N'Drop table dbo.PIMS_FILE_PROPERTY_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_FILE_PROPERTY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_FILE_PROPERTY_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_FILE_PROPERTY_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_FILE_PROPERTY_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_FILE_PROPERTY_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_FILE_PROPERTY_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_FILE_PROPERTY_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_FILE_PERSON_HIST
PRINT N'Drop table dbo.PIMS_FILE_PERSON_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_FILE_PERSON_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_FILE_PERSON_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_FILE_PERSON_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_FILE_PERSON_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_FILE_PERSON_PROFILE_TYPE
PRINT N'Drop table dbo.PIMS_FILE_PERSON_PROFILE_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_FILE_PERSON_PROFILE_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_FILE_PERSON_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_FILE_PERSON_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_FILE_PERSON_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_INSTANCE_STATUS_TYPE
PRINT N'Drop table dbo.PIMS_ACTIVITY_INSTANCE_STATUS_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_STATUS_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_FILE_HIST
PRINT N'Drop table dbo.PIMS_FILE_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_FILE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_FILE_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_FILE_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_FILE_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_FILE
PRINT N'Drop table dbo.PIMS_FILE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_FILE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_FILE_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_FILE_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_FILE_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_FILE_TYPE
PRINT N'Drop table dbo.PIMS_FILE_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_FILE_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
