-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Thu Sep 22 13:44:04 PDT 2022
-- Execute this script on:
-- 		PSP_PIMS_S38_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S37_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTMDO_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTMDO_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTMDO_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTMDO_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTMDO_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTMDO_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTMDO_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACTMDO_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTMDO_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTTMP_PIM_ACTMDO_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTTMP_PIM_ACTMDO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_ACTTMP_PIM_ACTMDO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCMNT_PIM_ACTMDO_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCMNT_PIM_ACTMDO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_DOCMNT_PIM_ACTMDO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTMDO_DOCUMENT_ID_IDX
PRINT N'Drop index dbo.ACTMDO_DOCUMENT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT].[ACTMDO_DOCUMENT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTMDO_ACTIVITY_TEMPLATE_ID_IDX
PRINT N'Drop index dbo.ACTMDO_ACTIVITY_TEMPLATE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT].[ACTMDO_ACTIVITY_TEMPLATE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQOWN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQOWN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQOWN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQOWN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQOWN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQOWN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQOWN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQOWN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQOWN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.ACTMDO_ACT_TMP_DOC_TUC
PRINT N'Drop unique constraint dbo.ACTMDO_ACT_TMP_DOC_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [ACTMDO_ACT_TMP_DOC_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.ACTMDO_PK
PRINT N'Drop primary key constraint dbo.ACTMDO_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [ACTMDO_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT
PRINT N'Drop table dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ACTMDO_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ACTMDO_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTMDO_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ACTMDO_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ACTMDO_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTMDO_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_OWNER
PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER]
	DROP COLUMN IF EXISTS [OWNER_COMMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_OWNER_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST]
	DROP COLUMN IF EXISTS [OWNER_COMMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_A_S_IUD_TR] ON PIMS_ACQUISITION_OWNER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_OWNER_HIST set END_DATE_HIST = @curr_date where ACQUISITION_OWNER_ID in (select ACQUISITION_OWNER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_OWNER_HIST ([ACQUISITION_OWNER_ID], [ACQUISITION_FILE_ID], [OWNER_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_OWNER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_OWNER_ID], [ACQUISITION_FILE_ID], [OWNER_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_OWNER_H_ID_SEQ]) as [_ACQUISITION_OWNER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_I_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_OWNER ("ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID",
      "OWNER_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID",
      "OWNER_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_U_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_OWNER_ID = deleted.ACQUISITION_OWNER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_OWNER
    set "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "OWNER_NAME" = inserted."OWNER_NAME",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_OWNER
    inner join inserted
    on (PIMS_ACQUISITION_OWNER.ACQUISITION_OWNER_ID = inserted.ACQUISITION_OWNER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST
PRINT N'Drop table dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
