-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Tue Aug 20 12:28:55 PDT 2024
-- Execute this script on:
-- 		PSP_PIMS_S88.00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S87.00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PCRDTL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PCRDTL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PCRDTL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PCRDTL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PCRDTL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PCRDTL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PCRDTL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PCRDTL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PCRDTL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PCRDTL_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PCRDTL_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CROWN_DETAIL]
	DROP CONSTRAINT IF EXISTS [PIM_PRPRTY_PIM_PCRDTL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PCRDTL_PROPERTY_ID_IDX
PRINT N'Drop index dbo.PCRDTL_PROPERTY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_CROWN_DETAIL].[PCRDTL_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_PROPERTY_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_PROPERTY_BOUNDARY_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PCRDTL_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PCRDTL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CROWN_DETAIL_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PCRDTL_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PCRDTL_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PCRDTL_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CROWN_DETAIL_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PCRDTL_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_LOCATION_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_LOCATION_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_PROPERTY_LOCATION_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PCRDTL_PK
PRINT N'Drop primary key constraint dbo.PCRDTL_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CROWN_DETAIL]
	DROP CONSTRAINT IF EXISTS [PCRDTL_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROPERTY_CROWN_DETAIL
PRINT N'Drop table dbo.PIMS_PROPERTY_CROWN_DETAIL'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_CROWN_DETAIL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_LOCATION_VW
PRINT N'Create view dbo.PIMS_PROPERTY_LOCATION_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_LOCATION_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN                   
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TNUR.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE  TNUR INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYPE TNTY ON TNTY.PROPERTY_TENURE_TYPE_CODE = TNUR.PROPERTY_TENURE_TYPE_CODE
                                                      AND TNTY.PROPERTY_ID               = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.LOCATION AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.SURVEY_PLAN_NUMBER
     , PROP.IS_OWNED              
     , PROP.IS_RETIRED                                                                                                                                                             
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_DISPOSITION_FILE_PROPERTY DFPR JOIN
                          PIMS_DISPOSITION_FILE          DISP   ON DISP.DISPOSITION_FILE_ID = DFPR.DISPOSITION_FILE_ID
                                                               AND DFPR.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  DISP.DISPOSITION_FILE_STATUS_TYPE_CODE = N'COMPLETE'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_DISPOSED 
     , CASE
         WHEN EXISTS (SELECT 1    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID            
                      WHERE  TAKE.IS_NEW_LAND_ACT       = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE = 'COMPLETE'                                                                                                                              
                         AND TAKE.LAND_ACT_TYPE_CODE   IN (N'Section 15', N'Section 16', N'Section 17', N'Section 66', N'NOI')) THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_INTEREST_IN_SRW = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE  = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID                                                     
                      WHERE  TAKE.IS_NEW_LICENSE_TO_CONSTRUCT = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE       = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1                                                                                                                                    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  IS_ACTIVE_LEASE       = 1
                         AND TAKE_STATUS_TYPE_CODE = N'COMPLETE') THEN CONVERT([bit],(1))
         ELSE CONVERT([bit],(0))
         END AS IS_OTHER_INTEREST                                                                 
     , IIF(EXISTS (SELECT 1                        
                   FROM   PIMS_PROPERTY_ACQUISITION_FILE PRAF JOIN
                          PIMS_ACQUISITION_FILE          ACQF   ON ACQF.ACQUISITION_FILE_ID = PRAF.ACQUISITION_FILE_ID
                                                               AND PRAF.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  ACQF.ACQUISITION_FILE_STATUS_TYPE_CODE IN (N'DRAFT', N'ACTIVE')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS HAS_ACTIVE_ACQUISITION_FILE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_RESEARCH_FILE PRSF JOIN
                          PIMS_RESEARCH_FILE          RSHF   ON RSHF.RESEARCH_FILE_ID = PRSF.RESEARCH_FILE_ID
                                                            AND PRSF.PROPERTY_ID      = PROP.PROPERTY_ID
                   WHERE  RSHF.RESEARCH_FILE_STATUS_TYPE_CODE = N'ACTIVE'), CONVERT([bit],(1)), CONVERT([bit],(0)))  AS HAS_ACTIVE_RESEARCH_FILE                                                              
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN ('PYBLMOTI', 'PYBLBCTFA')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN ('PYBLMOTI', 'PYBLBCTFA')
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE        ) OR   
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_RECEIVABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN      
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE        ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_RECEIVABLE_LEASE                     
     , FNVW.HISTORICAL_FILE_NUMBER_STR
FROM   PIMS_PROPERTY                  PROP                                                    LEFT OUTER JOIN                                                                                        
       PIMS_HISTORICAL_FILE_NUMBER_VW FNVW ON FNVW.PROPERTY_ID       = PROP.PROPERTY_ID       LEFT OUTER JOIN
       PIMS_ADDRESS                   ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE            PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY                   CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
WHERE  PROP.LOCATION IS NOT NULL

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Create view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID      
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN
     , PROP.PROPERTY_TYPE_CODE     
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TNUR.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE  TNUR INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYPE TNTY ON TNTY.PROPERTY_TENURE_TYPE_CODE = TNUR.PROPERTY_TENURE_TYPE_CODE
                                                      AND TNTY.PROPERTY_ID               = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE                                                                                                                             
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY  
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA                                            
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.SURVEY_PLAN_NUMBER
     , PROP.IS_OWNED        
     , PROP.IS_RETIRED              
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_DISPOSITION_FILE_PROPERTY DFPR JOIN
                          PIMS_DISPOSITION_FILE          DISP   ON DISP.DISPOSITION_FILE_ID = DFPR.DISPOSITION_FILE_ID
                                                               AND DFPR.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  DISP.DISPOSITION_FILE_STATUS_TYPE_CODE = N'COMPLETE'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_DISPOSED 
     , CASE
         WHEN EXISTS (SELECT 1    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID            
                      WHERE  TAKE.IS_NEW_LAND_ACT       = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE = 'COMPLETE'                                                                                                                              
                         AND TAKE.LAND_ACT_TYPE_CODE   IN (N'Section 15', N'Section 16', N'Section 17', N'Section 66', N'NOI')) THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_INTEREST_IN_SRW = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE  = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_LICENSE_TO_CONSTRUCT = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE       = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1                                                                                                                                    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  IS_ACTIVE_LEASE       = 1
                         AND TAKE_STATUS_TYPE_CODE = N'COMPLETE') THEN CONVERT([bit],(1))
         ELSE CONVERT([bit],(0))
         END AS IS_OTHER_INTEREST                                                                 
     , IIF(EXISTS (SELECT 1                        
                   FROM   PIMS_PROPERTY_ACQUISITION_FILE PRAF JOIN
                          PIMS_ACQUISITION_FILE          ACQF   ON ACQF.ACQUISITION_FILE_ID = PRAF.ACQUISITION_FILE_ID
                                                               AND PRAF.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  ACQF.ACQUISITION_FILE_STATUS_TYPE_CODE IN (N'DRAFT', N'ACTIVE')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS HAS_ACTIVE_ACQUISITION_FILE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_RESEARCH_FILE PRSF JOIN
                          PIMS_RESEARCH_FILE          RSHF   ON RSHF.RESEARCH_FILE_ID = PRSF.RESEARCH_FILE_ID
                                                            AND PRSF.PROPERTY_ID      = PROP.PROPERTY_ID
                   WHERE  RSHF.RESEARCH_FILE_STATUS_TYPE_CODE = N'ACTIVE'), CONVERT([bit],(1)), CONVERT([bit],(0)))  AS HAS_ACTIVE_RESEARCH_FILE                                                              
     , IIF(EXISTS (SELECT 1                                            
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN (N'PYBLMOTI', N'PYBLBCTFA')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_PAYABLE_LEASE   
     , IIF(EXISTS (SELECT 1                                                                                                            
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN (N'PYBLMOTI', N'PYBLBCTFA')
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE          ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL  ) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_RECEIVABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE          ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL  ) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_RECEIVABLE_LEASE          
     , FNVW.HISTORICAL_FILE_NUMBER_STR
FROM   PIMS_PROPERTY                  PROP                                                    LEFT OUTER JOIN   
       PIMS_HISTORICAL_FILE_NUMBER_VW FNVW ON FNVW.PROPERTY_ID       = PROP.PROPERTY_ID       LEFT OUTER JOIN         
       PIMS_ADDRESS                   ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE            PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY                   CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID   
WHERE  PROP.BOUNDARY IS NOT NULL

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_VW
PRINT N'Create view dbo.PIMS_PROPERTY_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID   
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TNUR.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE  TNUR INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYPE TNTY ON TNTY.PROPERTY_TENURE_TYPE_CODE = TNUR.PROPERTY_TENURE_TYPE_CODE
                                                      AND TNTY.PROPERTY_ID               = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY  
     , PROP.BOUNDARY AS LOCATION
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA                                            
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.SURVEY_PLAN_NUMBER 
     , PROP.IS_OWNED        
     , PROP.IS_RETIRED              
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_DISPOSITION_FILE_PROPERTY DFPR JOIN
                          PIMS_DISPOSITION_FILE          DISP   ON DISP.DISPOSITION_FILE_ID = DFPR.DISPOSITION_FILE_ID
                                                               AND DFPR.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  DISP.DISPOSITION_FILE_STATUS_TYPE_CODE = N'COMPLETE'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_DISPOSED 
     , CASE
         WHEN EXISTS (SELECT 1    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID            
                      WHERE  TAKE.IS_NEW_LAND_ACT       = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE = 'COMPLETE'                                                                                                                              
                         AND TAKE.LAND_ACT_TYPE_CODE   IN (N'Section 15', N'Section 16', N'Section 17', N'Section 66', N'NOI')) THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_INTEREST_IN_SRW = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE  = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_LICENSE_TO_CONSTRUCT = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE       = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1                                                                                                                                    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  IS_ACTIVE_LEASE       = 1                        
                         AND TAKE_STATUS_TYPE_CODE = N'COMPLETE') THEN CONVERT([bit],(1))
         ELSE CONVERT([bit],(0))
         END AS IS_OTHER_INTEREST                                                                 
     , IIF(EXISTS (SELECT 1                        
                   FROM   PIMS_PROPERTY_ACQUISITION_FILE PRAF JOIN
                          PIMS_ACQUISITION_FILE          ACQF   ON ACQF.ACQUISITION_FILE_ID = PRAF.ACQUISITION_FILE_ID
                                                               AND PRAF.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  ACQF.ACQUISITION_FILE_STATUS_TYPE_CODE IN (N'DRAFT', N'ACTIVE')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS HAS_ACTIVE_ACQUISITION_FILE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_RESEARCH_FILE PRSF JOIN
                          PIMS_RESEARCH_FILE          RSHF   ON RSHF.RESEARCH_FILE_ID = PRSF.RESEARCH_FILE_ID
                                                            AND PRSF.PROPERTY_ID      = PROP.PROPERTY_ID
                   WHERE  RSHF.RESEARCH_FILE_STATUS_TYPE_CODE = N'ACTIVE'), CONVERT([bit],(1)), CONVERT([bit],(0)))  AS HAS_ACTIVE_RESEARCH_FILE                                                              
     , IIF(EXISTS (SELECT 1                                            
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN (N'PYBLMOTI', N'PYBLBCTFA')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_PAYABLE_LEASE   
     , IIF(EXISTS (SELECT 1                                                                                                            
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN (N'PYBLMOTI', N'PYBLBCTFA')
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE          ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL  ) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_RECEIVABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE          ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL  ) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_RECEIVABLE_LEASE                 
     , FNVW.HISTORICAL_FILE_NUMBER_STR
FROM   PIMS_PROPERTY                  PROP                                                    LEFT OUTER JOIN                                                                                        
       PIMS_HISTORICAL_FILE_NUMBER_VW FNVW ON FNVW.PROPERTY_ID       = PROP.PROPERTY_ID       LEFT OUTER JOIN
       PIMS_ADDRESS                   ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE            PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY                   CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROPERTY_CROWN_DETAIL_HIST
PRINT N'Drop table dbo.PIMS_PROPERTY_CROWN_DETAIL_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_CROWN_DETAIL_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROPERTY_CROWN_DETAIL_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROPERTY_CROWN_DETAIL_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROPERTY_CROWN_DETAIL_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROPERTY_CROWN_DETAIL_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROPERTY_CROWN_DETAIL_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROPERTY_CROWN_DETAIL_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
