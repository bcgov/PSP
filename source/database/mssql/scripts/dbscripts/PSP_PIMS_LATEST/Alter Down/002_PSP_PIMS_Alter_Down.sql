-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Mon Nov 18 12:57:34 PST 2024
-- Execute this script on:
-- 		PSP_PIMS_S94_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S93_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJPRD_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRJPRD_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJPRD_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPDOC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DSPDOC_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPDOC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRAT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRAT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRAT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPDOC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPDOC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPDOC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCQUE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCQUE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCQUE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPDOC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DSPDOC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPDOC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJPRD_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRJPRD_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJPRD_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCQUE_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DOCQUE_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCQUE_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRAT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRAT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRAT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQNFL_FILE_NO_IDX
PRINT N'Drop index dbo.ACQNFL_FILE_NO_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_FILE].[ACQNFL_FILE_NO_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCQUE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DOCQUE_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCQUE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJPRD_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRJPRD_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJPRD_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.ACQNFL_SUBFILE_INTEREST_TYPE_CODE_TCC
PRINT N'Drop check constraint dbo.ACQNFL_SUBFILE_INTEREST_TYPE_CODE_TCC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	DROP CONSTRAINT IF EXISTS [ACQNFL_SUBFILE_INTEREST_TYPE_CODE_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD [FILE_NUMBER] nvarchar(18) NOT NULL CONSTRAINT [ACQNFL_FILE_NUMBER_DEF] DEFAULT ('<Empty>')
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Formatted file number assigned to the acquisition file.  Format follows YY-XXXXXX-ZZ where YY = MoTI region number, XXXXXX = generated integer sequence number,  and ZZ = file suffix number (defaulting to ''01'')' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'FILE_NUMBER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_QUEUE
PRINT N'Alter table dbo.PIMS_DOCUMENT_QUEUE'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	DROP COLUMN IF EXISTS [FILE_NAME]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraint
PRINT N'Drop dynamically-named default constraint'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_ACQUISITION_FILE_HIST' 
                   AND col.NAME = 'FILE_NUMBER')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST]
	DROP COLUMN IF EXISTS [FILE_NUM_SUFFIX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_QUEUE_HIST
PRINT N'Alter table dbo.PIMS_DOCUMENT_QUEUE_HIST'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE_HIST]
	DROP COLUMN IF EXISTS [FILE_NAME]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQNFL_FILE_NUMBER_IDX
PRINT N'Create index dbo.ACQNFL_FILE_NUMBER_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQNFL_FILE_NUMBER_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([FILE_NUMBER])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_I_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE ("ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "SUBFILE_INTEREST_TYPE_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUMBER",
      "LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "OTHER_SUBFILE_INTEREST_TYPE",
      "EST_COMPLETION_DT",
      "POSSESSION_DT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "SUBFILE_INTEREST_TYPE_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUMBER",
      "LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "OTHER_SUBFILE_INTEREST_TYPE",
      "EST_COMPLETION_DT",
      "POSSESSION_DT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJPRD_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRJPRD_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJPRD_A_S_IUD_TR] ON PIMS_PROJECT_PRODUCT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_PRODUCT_HIST set END_DATE_HIST = @curr_date where PROJECT_PRODUCT_ID in (select PROJECT_PRODUCT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_PRODUCT_HIST ([PROJECT_PRODUCT_ID], [PROJECT_ID], [PRODUCT_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_PRODUCT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_PRODUCT_ID], [PROJECT_ID], [PRODUCT_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_PRODUCT_H_ID_SEQ]) as [_PROJECT_PRODUCT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCQUE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DOCQUE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCQUE_I_S_I_TR] ON PIMS_DOCUMENT_QUEUE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_QUEUE ("DOCUMENT_QUEUE_ID",
      "DOCUMENT_ID",
      "DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DATA_SOURCE_TYPE_CODE",
      "PROPERTY_ACTIVITY_DOCUMENT_ID",
      "ACQUISITION_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_DOCUMENT_ID",
      "LEASE_DOCUMENT_ID",
      "DISPOSITION_FILE_DOCUMENT_ID",
      "DOCUMENT_EXTERNAL_ID",
      "DOCUMENT_METADATA",
      "DOC_PROCESS_START_DT",
      "DOC_PROCESS_END_DT",
      "DOC_PROCESS_RETRIES",
      "MAYAN_ERROR",
      "DOCUMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DOCUMENT_QUEUE_ID",
      "DOCUMENT_ID",
      "DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DATA_SOURCE_TYPE_CODE",
      "PROPERTY_ACTIVITY_DOCUMENT_ID",
      "ACQUISITION_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_DOCUMENT_ID",
      "LEASE_DOCUMENT_ID",
      "DISPOSITION_FILE_DOCUMENT_ID",
      "DOCUMENT_EXTERNAL_ID",
      "DOCUMENT_METADATA",
      "DOC_PROCESS_START_DT",
      "DOC_PROCESS_END_DT",
      "DOC_PROCESS_RETRIES",
      "MAYAN_ERROR",
      "DOCUMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_ID in (select ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_HIST ([ACQUISITION_FILE_ID], [PRNT_ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [SUBFILE_INTEREST_TYPE_CODE], [FILE_NAME], [FILE_NO], [FILE_NUMBER], [LEGACY_FILE_NUMBER], [LEGACY_STAKEHOLDER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [PAIMS_ACQUISITION_FILE_ID], [TOTAL_ALLOWABLE_COMPENSATION], [OTHER_SUBFILE_INTEREST_TYPE], [EST_COMPLETION_DT], [POSSESSION_DT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_ID], [PRNT_ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [SUBFILE_INTEREST_TYPE_CODE], [FILE_NAME], [FILE_NO], [FILE_NUMBER], [LEGACY_FILE_NUMBER], [LEGACY_STAKEHOLDER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [PAIMS_ACQUISITION_FILE_ID], [TOTAL_ALLOWABLE_COMPENSATION], [OTHER_SUBFILE_INTEREST_TYPE], [EST_COMPLETION_DT], [POSSESSION_DT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_H_ID_SEQ]) as [_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRAT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAT_I_S_U_TR] ON PIMS_PROP_PROP_ANOMALY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_ANOMALY_TYPE_ID = deleted.PROP_PROP_ANOMALY_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_ANOMALY_TYPE
    set "PROP_PROP_ANOMALY_TYPE_ID" = inserted."PROP_PROP_ANOMALY_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_ANOMALY_TYPE_CODE" = inserted."PROPERTY_ANOMALY_TYPE_CODE",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ANOMALY_TYPE
    inner join inserted
    on (PIMS_PROP_PROP_ANOMALY_TYPE.PROP_PROP_ANOMALY_TYPE_ID = inserted.PROP_PROP_ANOMALY_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCQUE_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DOCQUE_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCQUE_A_S_IUD_TR] ON PIMS_DOCUMENT_QUEUE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DOCUMENT_QUEUE_HIST set END_DATE_HIST = @curr_date where DOCUMENT_QUEUE_ID in (select DOCUMENT_QUEUE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DOCUMENT_QUEUE_HIST ([DOCUMENT_QUEUE_ID], [DOCUMENT_ID], [DOCUMENT_QUEUE_STATUS_TYPE_CODE], [DATA_SOURCE_TYPE_CODE], [PROPERTY_ACTIVITY_DOCUMENT_ID], [ACQUISITION_FILE_DOCUMENT_ID], [RESEARCH_FILE_DOCUMENT_ID], [LEASE_DOCUMENT_ID], [DISPOSITION_FILE_DOCUMENT_ID], [DOCUMENT_EXTERNAL_ID], [DOCUMENT_METADATA], [DOC_PROCESS_START_DT], [DOC_PROCESS_END_DT], [DOC_PROCESS_RETRIES], [MAYAN_ERROR], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DOCUMENT_QUEUE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DOCUMENT_QUEUE_ID], [DOCUMENT_ID], [DOCUMENT_QUEUE_STATUS_TYPE_CODE], [DATA_SOURCE_TYPE_CODE], [PROPERTY_ACTIVITY_DOCUMENT_ID], [ACQUISITION_FILE_DOCUMENT_ID], [RESEARCH_FILE_DOCUMENT_ID], [LEASE_DOCUMENT_ID], [DISPOSITION_FILE_DOCUMENT_ID], [DOCUMENT_EXTERNAL_ID], [DOCUMENT_METADATA], [DOC_PROCESS_START_DT], [DOC_PROCESS_END_DT], [DOC_PROCESS_RETRIES], [MAYAN_ERROR], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DOCUMENT_QUEUE_H_ID_SEQ]) as [_DOCUMENT_QUEUE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJPRD_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRJPRD_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJPRD_I_S_I_TR] ON PIMS_PROJECT_PRODUCT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_PRODUCT ("PROJECT_PRODUCT_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_PRODUCT_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_U_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_ID = deleted.ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE
    set "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID" = inserted."PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "SUBFILE_INTEREST_TYPE_CODE" = inserted."SUBFILE_INTEREST_TYPE_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_NO" = inserted."FILE_NO",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "LEGACY_FILE_NUMBER" = inserted."LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER" = inserted."LEGACY_STAKEHOLDER",
      "FUNDING_OTHER" = inserted."FUNDING_OTHER",
      "ASSIGNED_DATE" = inserted."ASSIGNED_DATE",
      "DELIVERY_DATE" = inserted."DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID" = inserted."PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION" = inserted."TOTAL_ALLOWABLE_COMPENSATION",
      "OTHER_SUBFILE_INTEREST_TYPE" = inserted."OTHER_SUBFILE_INTEREST_TYPE",
      "EST_COMPLETION_DT" = inserted."EST_COMPLETION_DT",
      "POSSESSION_DT" = inserted."POSSESSION_DT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE
    inner join inserted
    on (PIMS_ACQUISITION_FILE.ACQUISITION_FILE_ID = inserted.ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPDOC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPDOC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPDOC_I_S_I_TR] ON PIMS_DISPOSITION_FILE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE_DOCUMENT ("DISPOSITION_FILE_DOCUMENT_ID",
      "DISPOSITION_FILE_ID",
      "DOCUMENT_ID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISPOSITION_FILE_DOCUMENT_ID",
      "DISPOSITION_FILE_ID",
      "DOCUMENT_ID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCQUE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCQUE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCQUE_I_S_U_TR] ON PIMS_DOCUMENT_QUEUE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_QUEUE_ID = deleted.DOCUMENT_QUEUE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_QUEUE
    set "DOCUMENT_QUEUE_ID" = inserted."DOCUMENT_QUEUE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "DOCUMENT_QUEUE_STATUS_TYPE_CODE" = inserted."DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DATA_SOURCE_TYPE_CODE" = inserted."DATA_SOURCE_TYPE_CODE",
      "PROPERTY_ACTIVITY_DOCUMENT_ID" = inserted."PROPERTY_ACTIVITY_DOCUMENT_ID",
      "ACQUISITION_FILE_DOCUMENT_ID" = inserted."ACQUISITION_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_DOCUMENT_ID" = inserted."RESEARCH_FILE_DOCUMENT_ID",
      "LEASE_DOCUMENT_ID" = inserted."LEASE_DOCUMENT_ID",
      "DISPOSITION_FILE_DOCUMENT_ID" = inserted."DISPOSITION_FILE_DOCUMENT_ID",
      "DOCUMENT_EXTERNAL_ID" = inserted."DOCUMENT_EXTERNAL_ID",
      "DOCUMENT_METADATA" = inserted."DOCUMENT_METADATA",
      "DOC_PROCESS_START_DT" = inserted."DOC_PROCESS_START_DT",
      "DOC_PROCESS_END_DT" = inserted."DOC_PROCESS_END_DT",
      "DOC_PROCESS_RETRIES" = inserted."DOC_PROCESS_RETRIES",
      "MAYAN_ERROR" = inserted."MAYAN_ERROR",
      "DOCUMENT" = inserted."DOCUMENT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_QUEUE
    inner join inserted
    on (PIMS_DOCUMENT_QUEUE.DOCUMENT_QUEUE_ID = inserted.DOCUMENT_QUEUE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPDOC_I_S_U_TR] ON PIMS_DISPOSITION_FILE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_DOCUMENT_ID = deleted.DISPOSITION_FILE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE_DOCUMENT
    set "DISPOSITION_FILE_DOCUMENT_ID" = inserted."DISPOSITION_FILE_DOCUMENT_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_DOCUMENT
    inner join inserted
    on (PIMS_DISPOSITION_FILE_DOCUMENT.DISPOSITION_FILE_DOCUMENT_ID = inserted.DISPOSITION_FILE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPRAT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAT_I_S_I_TR] ON PIMS_PROP_PROP_ANOMALY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_ANOMALY_TYPE ("PROP_PROP_ANOMALY_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ANOMALY_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROP_PROP_ANOMALY_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ANOMALY_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPDOC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPDOC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPDOC_A_S_IUD_TR] ON PIMS_DISPOSITION_FILE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_FILE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where DISPOSITION_FILE_DOCUMENT_ID in (select DISPOSITION_FILE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_FILE_DOCUMENT_HIST ([DISPOSITION_FILE_DOCUMENT_ID], [DISPOSITION_FILE_ID], [DOCUMENT_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_FILE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_FILE_DOCUMENT_ID], [DISPOSITION_FILE_ID], [DOCUMENT_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT_H_ID_SEQ]) as [_DISPOSITION_FILE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJPRD_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRJPRD_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJPRD_I_S_U_TR] ON PIMS_PROJECT_PRODUCT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_PRODUCT_ID = deleted.PROJECT_PRODUCT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_PRODUCT
    set "PROJECT_PRODUCT_ID" = inserted."PROJECT_PRODUCT_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_PRODUCT
    inner join inserted
    on (PIMS_PROJECT_PRODUCT.PROJECT_PRODUCT_ID = inserted.PROJECT_PRODUCT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
