-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Tue Jul 02 14:40:09 PDT 2024
-- Execute this script on:
-- 		PSP_PIMS_S84.00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S83.00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPERD_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LSPERD_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSPERD_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_LSRNWL_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_LSRNWL_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_RENEWAL]
	DROP CONSTRAINT IF EXISTS [PIM_LEASE_PIM_LSRNWL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LCISTY_PIM_LCHKLI_FK
PRINT N'Drop foreign key constraint dbo.PIM_LCISTY_PIM_LCHKLI_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CHECKLIST_ITEM]
	DROP CONSTRAINT IF EXISTS [PIM_LCISTY_PIM_LCHKLI_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSTERM_PIM_LSPYMT_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSTERM_PIM_LSPYMT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT]
	DROP CONSTRAINT IF EXISTS [PIM_LSTERM_PIM_LSPYMT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_CHKLIS_PIM_ACQCKI_FK
PRINT N'Drop foreign key constraint dbo.PIM_CHKLIS_PIM_ACQCKI_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM]
	DROP CONSTRAINT IF EXISTS [PIM_CHKLIS_PIM_ACQCKI_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LTRMST_PIM_LSTERM_FK
PRINT N'Drop foreign key constraint dbo.PIM_LTRMST_PIM_LSTERM_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	DROP CONSTRAINT IF EXISTS [PIM_LTRMST_PIM_LSTERM_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_CHKLIS_PIM_DSPCKI_FK
PRINT N'Drop foreign key constraint dbo.PIM_CHKLIS_PIM_DSPCKI_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]
	DROP CONSTRAINT IF EXISTS [PIM_CHKLIS_PIM_DSPCKI_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSPERD_VBL_RENT_FREQ_IDX
PRINT N'Drop index dbo.LSPERD_VBL_RENT_FREQ_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_PERIOD].[LSPERD_VBL_RENT_FREQ_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSPERD_LEASE_PMT_FREQ_TYPE_CODE_IDX
PRINT N'Drop index dbo.LSPERD_LEASE_PMT_FREQ_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_PERIOD].[LSPERD_LEASE_PMT_FREQ_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSPERD_LEASE_PERIOD_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.LSPERD_LEASE_PERIOD_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_PERIOD].[LSPERD_LEASE_PERIOD_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSPERD_LEASE_ID_IDX
PRINT N'Drop index dbo.LSPERD_LEASE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_PERIOD].[LSPERD_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSPERD_ADDL_RENT_FREQ_IDX
PRINT N'Drop index dbo.LSPERD_ADDL_RENT_FREQ_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_PERIOD].[LSPERD_ADDL_RENT_FREQ_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSPYMT_LEASE_PERIOD_ID_IDX
PRINT N'Drop index dbo.LSPYMT_LEASE_PERIOD_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_PAYMENT].[LSPYMT_LEASE_PERIOD_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRSCRC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRSCRC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRSCRC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPRP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPPRP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPRP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROPLS_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PROPLS_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROPLS_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPCKI_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DSPCKI_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPCKI_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPCKI_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DSPCKI_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPCKI_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.DSPCKI_CHKLST_ITEM_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.DSPCKI_CHKLST_ITEM_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM].[DSPCKI_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRSCRC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRSCRC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRSCRC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPRP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DSPPRP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPRP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQCKI_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQCKI_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQCKI_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LCHKLI_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LCHKLI_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LCHKLI_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LCHKLI_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LCHKLI_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LCHKLI_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROPLS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROPLS_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROPLS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSRNWL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSRNWL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSRNWL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSRNWL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSRNWL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSRNWL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSRNWL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LSRNWL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSRNWL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSRNWL_LEASE_ID_IDX
PRINT N'Drop index dbo.LSRNWL_LEASE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_RENEWAL].[LSRNWL_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPCKI_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPCKI_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPCKI_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPACT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPACT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPACT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQCKI_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQCKI_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQCKI_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQCKI_CHKLST_ITEM_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.ACQCKI_CHKLST_ITEM_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM].[ACQCKI_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQCKI_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQCKI_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQCKI_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LCHKLI_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LCHKLI_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LCHKLI_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_CHECKLIST_ITEM].[LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPERD_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSPERD_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSPERD_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPERD_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSPERD_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSPERD_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CHKLIS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CHKLIS_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CHKLIS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CHKLIS_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_CHKLIS_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CHKLIS_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPRST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSPRST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSPRST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPRST_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSPRST_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSPRST_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_LSRNWL_H_UK
PRINT N'Drop unique constraint dbo.PIMS_LSRNWL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_RENEWAL_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_LSRNWL_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_LSRNWL_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_LSRNWL_H_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_RENEWAL_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_LSRNWL_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSRNWL_PK
PRINT N'Drop primary key constraint dbo.LSRNWL_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_RENEWAL]
	DROP CONSTRAINT IF EXISTS [LSRNWL_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_RENEWAL
PRINT N'Drop table dbo.PIMS_LEASE_RENEWAL'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_RENEWAL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_LSPERD_H_UK
PRINT N'Drop unique constraint dbo.PIMS_LSPERD_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_LSPERD_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_LSPERD_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_LSPERD_H_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_LSPERD_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSPERD_PK
PRINT N'Drop primary key constraint dbo.LSPERD_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	DROP CONSTRAINT IF EXISTS [LSPERD_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSPRST_PK
PRINT N'Drop primary key constraint dbo.LSPRST_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE]
	DROP CONSTRAINT IF EXISTS [LSPRST_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DSP_CHKLST_ITEM_STATUS_TYPE
PRINT N'Create table dbo.PIMS_DSP_CHKLST_ITEM_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_DSP_CHKLST_ITEM_STATUS_TYPE]  ( 
	[DSP_CHKLST_ITEM_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                     	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                   	int NULL,
	[IS_DISABLED]                     	bit NOT NULL CONSTRAINT [DSPCST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL CONSTRAINT [DSPCST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [DSPCST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [DSPCST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [DSPCST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [DSPCST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPCST_PK] PRIMARY KEY CLUSTERED([DSP_CHKLST_ITEM_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the disposition checklist item status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DSP_CHKLST_ITEM_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the disposition checklist item status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Tables that contains the codes and associated descriptions of the disposition checklist item status types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_CHECKLIST_ITEM
PRINT N'Alter table dbo.PIMS_DISPOSITION_CHECKLIST_ITEM'
GO
EXEC dbo.sp_rename N'dbo.PIMS_DISPOSITION_CHECKLIST_ITEM.CHKLST_ITEM_STATUS_TYPE_CODE' , N'DSP_CHKLST_ITEM_STATUS_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM] ADD CONSTRAINT [DSPCKI_DSP_CHKLST_ITEM_STATUS_TYPE_CODE_DEF] DEFAULT ('INCOMP') FOR [DSP_CHKLST_ITEM_STATUS_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the checklist item status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DSP_CHKLST_ITEM_STATUS_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE
PRINT N'Alter table dbo.PIMS_LEASE'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP COLUMN IF EXISTS [TERMINATION_DATE], [IS_PUBLIC_BENEFIT], [IS_FINANCIAL_GAIN], [FEE_DETERMINATION_NOTE], [PRIMARY_ARBITRATION_CITY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PERIOD_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_PERIOD_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] DROP CONSTRAINT IF EXISTS [LSPRST_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] ADD CONSTRAINT [LTRMST_IS_DISABLED_DEF] DEFAULT (CONVERT([bit],(0))) FOR [IS_DISABLED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] DROP CONSTRAINT IF EXISTS [LSPRST_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] ADD CONSTRAINT [LTRMST_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT ((1)) FOR [CONCURRENCY_CONTROL_NUMBER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] DROP CONSTRAINT IF EXISTS [LSPRST_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] ADD CONSTRAINT [LTRMST_DB_CREATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [DB_CREATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] DROP CONSTRAINT IF EXISTS [LSPRST_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] ADD CONSTRAINT [LTRMST_DB_CREATE_USERID_DEF] DEFAULT (user_name()) FOR [DB_CREATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] DROP CONSTRAINT IF EXISTS [LSPRST_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] ADD CONSTRAINT [LTRMST_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [DB_LAST_UPDATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] DROP CONSTRAINT IF EXISTS [LSPRST_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] ADD CONSTRAINT [LTRMST_DB_LAST_UPDATE_USERID_DEF] DEFAULT (user_name()) FOR [DB_LAST_UPDATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE]
	ADD CONSTRAINT [LTRMST_PK]
	PRIMARY KEY CLUSTERED ([LEASE_PERIOD_STATUS_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PERIOD
PRINT N'Alter table dbo.PIMS_LEASE_PERIOD'
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Describes a term period for the associated lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSPERD_LEASE_PERIOD_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSTERM_LEASE_PERIOD_ID_DEF] DEFAULT (NEXT VALUE FOR [PIMS_LEASE_TERM_ID_SEQ]) FOR [LEASE_PERIOD_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSPERD_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSTERM_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT ((1)) FOR [CONCURRENCY_CONTROL_NUMBER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSPERD_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSTERM_APP_CREATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [APP_CREATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSPERD_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSTERM_APP_CREATE_USERID_DEF] DEFAULT (user_name()) FOR [APP_CREATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSPERD_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSTERM_APP_CREATE_USER_DIRECTORY_DEF] DEFAULT (user_name()) FOR [APP_CREATE_USER_DIRECTORY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSPERD_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSTERM_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [APP_LAST_UPDATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSPERD_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSTERM_APP_LAST_UPDATE_USERID_DEF] DEFAULT (user_name()) FOR [APP_LAST_UPDATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSPERD_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSTERM_APP_LAST_UPDATE_USER_DIRECTORY_DEF] DEFAULT (user_name()) FOR [APP_LAST_UPDATE_USER_DIRECTORY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSPERD_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSTERM_DB_CREATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [DB_CREATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSPERD_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSTERM_DB_CREATE_USERID_DEF] DEFAULT (user_name()) FOR [DB_CREATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSPERD_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSTERM_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [DB_LAST_UPDATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSPERD_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSTERM_DB_LAST_UPDATE_USERID_DEF] DEFAULT (user_name()) FOR [DB_LAST_UPDATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_LEASE_PERIOD.IS_VARIABLE_PAYMENT' , N'PAYMENT_TYPE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSPERD_IS_VARIABLE_PAYMENT_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSTERM_PAYMENT_TYPE_DEF] DEFAULT (CONVERT([bit],(0))) FOR [PAYMENT_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_LEASE_PERIOD.IS_FLEXIBLE_DURATION' , N'PERIOD_DURATION', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSPERD_IS_FLEXIBLE_DURATION_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSTERM_PERIOD_DURATION_DEF] DEFAULT (CONVERT([bit],(0))) FOR [PERIOD_DURATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	ADD [BASE_RENT_FREQ] nvarchar(20) NULL, 
	[BASE_RENT_AGREED_PMT] money NULL, 
	[IS_BASE_RENT_SUBJECT_TO_GST] bit NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the PIMS_LEASE_PMT_FREQ_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'BASE_RENT_FREQ'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates the agreed-to variable base rent payment amount.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'BASE_RENT_AGREED_PMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is the variable base rent payment subject to GST?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'IS_BASE_RENT_SUBJECT_TO_GST'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	DROP COLUMN IF EXISTS [ADDL_RENT_GST_AMOUNT], [VBL_RENT_GST_AMOUNT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	ADD CONSTRAINT [LSTERM_PK]
	PRIMARY KEY CLUSTERED ([LEASE_PERIOD_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE
PRINT N'Create table dbo.PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE]  ( 
	[ACQ_CHKLST_ITEM_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                     	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                   	int NULL,
	[IS_DISABLED]                     	bit NOT NULL CONSTRAINT [ACQCST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL CONSTRAINT [ACQCST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [ACQCST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [ACQCST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [ACQCST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [ACQCST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQCST_PK] PRIMARY KEY CLUSTERED([ACQ_CHKLST_ITEM_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the acquisition checklist item status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'ACQ_CHKLST_ITEM_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquisition checklist item status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Tables that contains the codes and associated descriptions of the acquisition checklist item status types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_CHECKLIST_ITEM
PRINT N'Alter table dbo.PIMS_ACQUISITION_CHECKLIST_ITEM'
GO
EXEC dbo.sp_rename N'dbo.PIMS_ACQUISITION_CHECKLIST_ITEM.CHKLST_ITEM_STATUS_TYPE_CODE' , N'ACQ_CHKLST_ITEM_STATUS_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'ACQ_CHKLST_ITEM_STATUS_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE
PRINT N'Create table dbo.PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE]  ( 
	[LEASE_CHKLST_ITEM_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                       	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                     	int NULL,
	[IS_DISABLED]                       	bit NOT NULL CONSTRAINT [LCISTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL CONSTRAINT [LCISTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [LCISTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [LCISTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LCISTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LCISTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LCISTY_PK] PRIMARY KEY CLUSTERED([LEASE_CHKLST_ITEM_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the lease & license checklist item status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_CHKLST_ITEM_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the lease & license checklist item status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Tables that contains the codes and associated descriptions of the lease & license checklist item status types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CHECKLIST_ITEM
PRINT N'Alter table dbo.PIMS_LEASE_CHECKLIST_ITEM'
GO
EXEC dbo.sp_rename N'dbo.PIMS_LEASE_CHECKLIST_ITEM.CHKLST_ITEM_STATUS_TYPE_CODE' , N'LEASE_CHKLST_ITEM_STATUS_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'LEASE_CHKLST_ITEM_STATUS_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_CHECKLIST_ITEM_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_CHECKLIST_ITEM_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_ACQUISITION_CHECKLIST_ITEM_HIST.CHKLST_ITEM_STATUS_TYPE_CODE' , N'ACQ_CHKLST_ITEM_STATUS_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACTIVITY
PRINT N'Alter table dbo.PIMS_PROPERTY_ACTIVITY'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY] ALTER COLUMN [DESCRIPTION] nvarchar(2000) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACTIVITY_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_ACTIVITY_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
  ALTER COLUMN [DESCRIPTION] nvarchar(2000) NULL
	-- ADD [DESCRIPTION] nvarchar(2000) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PERIOD_HIST
PRINT N'Alter table dbo.PIMS_LEASE_PERIOD_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_LEASE_PERIOD_HIST.IS_VARIABLE_PAYMENT' , N'PAYMENT_TYPE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_LEASE_PERIOD_HIST.IS_FLEXIBLE_DURATION' , N'PERIOD_DURATION', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_HIST]
	ADD [BASE_RENT_FREQ] nvarchar(20) NULL, 
	[BASE_RENT_AGREED_PMT] money NULL, 
	[IS_BASE_RENT_SUBJECT_TO_GST] bit NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_HIST]
	DROP COLUMN IF EXISTS [ADDL_RENT_GST_AMOUNT], [VBL_RENT_GST_AMOUNT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_HIST]
	ADD CONSTRAINT [PIMS_LSTERM_H_PK]
	PRIMARY KEY CLUSTERED ([_LEASE_PERIOD_HIST_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_LSTERM_H_UK
PRINT N'Create unique constraint dbo.PIMS_LSTERM_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_HIST]
	ADD CONSTRAINT [PIMS_LSTERM_H_UK]
	UNIQUE ([_LEASE_PERIOD_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_LEASE
PRINT N'Alter table dbo.PIMS_PROPERTY_LEASE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	DROP COLUMN IF EXISTS [LOCATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CHECKLIST_ITEM_HIST
PRINT N'Alter table dbo.PIMS_LEASE_CHECKLIST_ITEM_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_LEASE_CHECKLIST_ITEM_HIST.CHKLST_ITEM_STATUS_TYPE_CODE' , N'LEASE_CHKLST_ITEM_STATUS_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE_PROPERTY
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE_PROPERTY'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY]
	DROP COLUMN IF EXISTS [LOCATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_RESEARCH_FILE
PRINT N'Alter table dbo.PIMS_PROPERTY_RESEARCH_FILE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE]
	DROP COLUMN IF EXISTS [LOCATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_CHECKLIST_ITEM_HIST
PRINT N'Alter table dbo.PIMS_DISPOSITION_CHECKLIST_ITEM_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_DISPOSITION_CHECKLIST_ITEM_HIST.CHKLST_ITEM_STATUS_TYPE_CODE' , N'DSP_CHKLST_ITEM_STATUS_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_HIST
PRINT N'Alter table dbo.PIMS_LEASE_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_HIST]
	DROP COLUMN IF EXISTS [TERMINATION_DATE], [IS_PUBLIC_BENEFIT], [IS_FINANCIAL_GAIN], [FEE_DETERMINATION_NOTE], [PRIMARY_ARBITRATION_CITY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPCKI_DSP_CHKLST_ITEM_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.DSPCKI_DSP_CHKLST_ITEM_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPCKI_DSP_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]([DSP_CHKLST_ITEM_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSTERM_VBL_RENT_FREQ_IDX
PRINT N'Create index dbo.LSTERM_VBL_RENT_FREQ_IDX'
GO
CREATE NONCLUSTERED INDEX [LSTERM_VBL_RENT_FREQ_IDX]
	ON [dbo].[PIMS_LEASE_PERIOD]([VBL_RENT_FREQ])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSTERM_LEASE_ID_IDX
PRINT N'Create index dbo.LSTERM_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSTERM_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_PERIOD]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQCKI_ACQ_CHKLST_ITEM_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.ACQCKI_ACQ_CHKLST_ITEM_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQCKI_ACQ_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM]([ACQ_CHKLST_ITEM_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSTERM_ADDL_RENT_FREQ_IDX
PRINT N'Create index dbo.LSTERM_ADDL_RENT_FREQ_IDX'
GO
CREATE NONCLUSTERED INDEX [LSTERM_ADDL_RENT_FREQ_IDX]
	ON [dbo].[PIMS_LEASE_PERIOD]([ADDL_RENT_FREQ])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSTERM_BASE_RENT_FREQ_IDX
PRINT N'Create index dbo.LSTERM_BASE_RENT_FREQ_IDX'
GO
CREATE NONCLUSTERED INDEX [LSTERM_BASE_RENT_FREQ_IDX]
	ON [dbo].[PIMS_LEASE_PERIOD]([BASE_RENT_FREQ])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSTERM_LEASE_PERIOD_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.LSTERM_LEASE_PERIOD_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LSTERM_LEASE_PERIOD_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_PERIOD]([LEASE_PERIOD_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSPYMT_LEASE_TERM_ID_IDX
PRINT N'Create index dbo.LSPYMT_LEASE_TERM_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSPYMT_LEASE_TERM_ID_IDX]
	ON [dbo].[PIMS_LEASE_PAYMENT]([LEASE_PERIOD_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CHECKLIST_ITEM]([LEASE_CHKLST_ITEM_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSTERM_LEASE_PMT_FREQ_TYPE_CODE_IDX
PRINT N'Create index dbo.LSTERM_LEASE_PMT_FREQ_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LSTERM_LEASE_PMT_FREQ_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_PERIOD]([LEASE_PMT_FREQ_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCHKLI_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LCHKLI_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCHKLI_I_S_I_TR] ON PIMS_LEASE_CHECKLIST_ITEM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CHECKLIST_ITEM ("LEASE_CHECKLIST_ITEM_ID",
      "LEASE_ID",
      "LEASE_CHKLST_ITEM_TYPE_CODE",
      "LEASE_CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_CHECKLIST_ITEM_ID",
      "LEASE_ID",
      "LEASE_CHKLST_ITEM_TYPE_CODE",
      "LEASE_CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQCKI_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQCKI_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQCKI_I_S_I_TR] ON PIMS_ACQUISITION_CHECKLIST_ITEM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_CHECKLIST_ITEM ("ACQUISITION_CHECKLIST_ITEM_ID",
      "ACQUISITION_FILE_ID",
      "ACQ_CHKLST_ITEM_TYPE_CODE",
      "ACQ_CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_CHECKLIST_ITEM_ID",
      "ACQUISITION_FILE_ID",
      "ACQ_CHKLST_ITEM_TYPE_CODE",
      "ACQ_CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSTERM_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LSTERM_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSTERM_I_S_I_TR] ON PIMS_LEASE_PERIOD INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PERIOD ("LEASE_PERIOD_ID",
      "LEASE_ID",
      "LEASE_PERIOD_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "BASE_RENT_FREQ",
      "ADDL_RENT_FREQ",
      "VBL_RENT_FREQ",
      "PERIOD_START_DATE",
      "PERIOD_EXPIRY_DATE",
      "PERIOD_RENEWAL_DATE",
      "PAYMENT_AMOUNT",
      "PAYMENT_DUE_DATE",
      "PAYMENT_NOTE",
      "IS_GST_ELIGIBLE",
      "GST_AMOUNT",
      "IS_PERIOD_EXERCISED",
      "PAYMENT_TYPE",
      "PERIOD_DURATION",
      "BASE_RENT_AGREED_PMT",
      "IS_BASE_RENT_SUBJECT_TO_GST",
      "ADDL_RENT_AGREED_PMT",
      "IS_ADDL_RENT_SUBJECT_TO_GST",
      "VBL_RENT_AGREED_PMT",
      "IS_VBL_RENT_SUBJECT_TO_GST",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_PERIOD_ID",
      "LEASE_ID",
      "LEASE_PERIOD_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "BASE_RENT_FREQ",
      "ADDL_RENT_FREQ",
      "VBL_RENT_FREQ",
      "PERIOD_START_DATE",
      "PERIOD_EXPIRY_DATE",
      "PERIOD_RENEWAL_DATE",
      "PAYMENT_AMOUNT",
      "PAYMENT_DUE_DATE",
      "PAYMENT_NOTE",
      "IS_GST_ELIGIBLE",
      "GST_AMOUNT",
      "IS_PERIOD_EXERCISED",
      "PAYMENT_TYPE",
      "PERIOD_DURATION",
      "BASE_RENT_AGREED_PMT",
      "IS_BASE_RENT_SUBJECT_TO_GST",
      "ADDL_RENT_AGREED_PMT",
      "IS_ADDL_RENT_SUBJECT_TO_GST",
      "VBL_RENT_AGREED_PMT",
      "IS_VBL_RENT_SUBJECT_TO_GST",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQCKI_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQCKI_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQCKI_A_S_IUD_TR] ON PIMS_ACQUISITION_CHECKLIST_ITEM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_CHECKLIST_ITEM_HIST set END_DATE_HIST = @curr_date where ACQUISITION_CHECKLIST_ITEM_ID in (select ACQUISITION_CHECKLIST_ITEM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_CHECKLIST_ITEM_HIST ([ACQUISITION_CHECKLIST_ITEM_ID], [ACQUISITION_FILE_ID], [ACQ_CHKLST_ITEM_TYPE_CODE], [ACQ_CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_CHECKLIST_ITEM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_CHECKLIST_ITEM_ID], [ACQUISITION_FILE_ID], [ACQ_CHKLST_ITEM_TYPE_CODE], [ACQ_CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM_H_ID_SEQ]) as [_ACQUISITION_CHECKLIST_ITEM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPACT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPACT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPACT_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_HIST set END_DATE_HIST = @curr_date where PIMS_PROPERTY_ACTIVITY_ID in (select PIMS_PROPERTY_ACTIVITY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_HIST ([PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_TYPE_CODE], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE], [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE], [SERVICE_PROVIDER_PERSON_ID], [SERVICE_PROVIDER_ORG_ID], [REQUEST_ADDED_DT], [COMPLETION_DT], [DESCRIPTION], [REQUEST_SOURCE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_TYPE_CODE], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE], [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE], [SERVICE_PROVIDER_PERSON_ID], [SERVICE_PROVIDER_ORG_ID], [REQUEST_ADDED_DT], [COMPLETION_DT], [DESCRIPTION], [REQUEST_SOURCE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSTERM_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LSTERM_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSTERM_A_S_IUD_TR] ON PIMS_LEASE_PERIOD FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_PERIOD_HIST set END_DATE_HIST = @curr_date where LEASE_PERIOD_ID in (select LEASE_PERIOD_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_PERIOD_HIST ([LEASE_PERIOD_ID], [LEASE_ID], [LEASE_PERIOD_STATUS_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [BASE_RENT_FREQ], [ADDL_RENT_FREQ], [VBL_RENT_FREQ], [PERIOD_START_DATE], [PERIOD_EXPIRY_DATE], [PERIOD_RENEWAL_DATE], [PAYMENT_AMOUNT], [PAYMENT_DUE_DATE], [PAYMENT_NOTE], [IS_GST_ELIGIBLE], [GST_AMOUNT], [IS_PERIOD_EXERCISED], [PAYMENT_TYPE], [PERIOD_DURATION], [BASE_RENT_AGREED_PMT], [IS_BASE_RENT_SUBJECT_TO_GST], [ADDL_RENT_AGREED_PMT], [IS_ADDL_RENT_SUBJECT_TO_GST], [VBL_RENT_AGREED_PMT], [IS_VBL_RENT_SUBJECT_TO_GST], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_PERIOD_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_PERIOD_ID], [LEASE_ID], [LEASE_PERIOD_STATUS_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [BASE_RENT_FREQ], [ADDL_RENT_FREQ], [VBL_RENT_FREQ], [PERIOD_START_DATE], [PERIOD_EXPIRY_DATE], [PERIOD_RENEWAL_DATE], [PAYMENT_AMOUNT], [PAYMENT_DUE_DATE], [PAYMENT_NOTE], [IS_GST_ELIGIBLE], [GST_AMOUNT], [IS_PERIOD_EXERCISED], [PAYMENT_TYPE], [PERIOD_DURATION], [BASE_RENT_AGREED_PMT], [IS_BASE_RENT_SUBJECT_TO_GST], [ADDL_RENT_AGREED_PMT], [IS_ADDL_RENT_SUBJECT_TO_GST], [VBL_RENT_AGREED_PMT], [IS_VBL_RENT_SUBJECT_TO_GST], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_PERIOD_H_ID_SEQ]) as [_LEASE_PERIOD_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCKI_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPCKI_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCKI_I_S_U_TR] ON PIMS_DISPOSITION_CHECKLIST_ITEM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_CHECKLIST_ITEM_ID = deleted.DISPOSITION_CHECKLIST_ITEM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_CHECKLIST_ITEM
    set "DISPOSITION_CHECKLIST_ITEM_ID" = inserted."DISPOSITION_CHECKLIST_ITEM_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DSP_CHKLST_ITEM_TYPE_CODE" = inserted."DSP_CHKLST_ITEM_TYPE_CODE",
      "DSP_CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."DSP_CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_CHECKLIST_ITEM
    inner join inserted
    on (PIMS_DISPOSITION_CHECKLIST_ITEM.DISPOSITION_CHECKLIST_ITEM_ID = inserted.DISPOSITION_CHECKLIST_ITEM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_U_TR] ON PIMS_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_ID = deleted.LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE
    set "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE" = inserted."LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE" = inserted."LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE" = inserted."LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE" = inserted."LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE" = inserted."LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE" = inserted."LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE" = inserted."LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE" = inserted."LEASE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "L_FILE_NO" = inserted."L_FILE_NO",
      "TFA_FILE_NO" = inserted."TFA_FILE_NO",
      "TFA_FILE_NUMBER" = inserted."TFA_FILE_NUMBER",
      "PS_FILE_NO" = inserted."PS_FILE_NO",
      "LEASE_DESCRIPTION" = inserted."LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC" = inserted."LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC" = inserted."LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES" = inserted."LEASE_NOTES",
      "MOTI_CONTACT" = inserted."MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE" = inserted."DOCUMENTATION_REFERENCE",
      "RETURN_NOTES" = inserted."RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE" = inserted."OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE" = inserted."OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE" = inserted."OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE" = inserted."ORIG_START_DATE",
      "ORIG_EXPIRY_DATE" = inserted."ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT" = inserted."LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE" = inserted."RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE" = inserted."INSPECTION_DATE",
      "INSPECTION_NOTES" = inserted."INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA" = inserted."IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG" = inserted."IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT" = inserted."IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED" = inserted."IS_EXPIRED",
      "HAS_PHYSICAL_FILE" = inserted."HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE" = inserted."HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE" = inserted."HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE" = inserted."HAS_DIGITAL_LICENSE",
      "CANCELLATION_REASON" = inserted."CANCELLATION_REASON",
      "TERMINATION_REASON" = inserted."TERMINATION_REASON",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE
    inner join inserted
    on (PIMS_LEASE.LEASE_ID = inserted.LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPCST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCST_I_S_U_TR] ON PIMS_DSP_CHKLST_ITEM_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_CHKLST_ITEM_STATUS_TYPE_CODE = deleted.DSP_CHKLST_ITEM_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_CHKLST_ITEM_STATUS_TYPE
    set "DSP_CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."DSP_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_CHKLST_ITEM_STATUS_TYPE
    inner join inserted
    on (PIMS_DSP_CHKLST_ITEM_STATUS_TYPE.DSP_CHKLST_ITEM_STATUS_TYPE_CODE = inserted.DSP_CHKLST_ITEM_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCISTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LCISTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCISTY_I_S_U_TR] ON PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CHKLST_ITEM_STATUS_TYPE_CODE = deleted.LEASE_CHKLST_ITEM_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE
    set "LEASE_CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."LEASE_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE.LEASE_CHKLST_ITEM_STATUS_TYPE_CODE = inserted.LEASE_CHKLST_ITEM_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LTRMST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LTRMST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LTRMST_I_S_U_TR] ON PIMS_LEASE_PERIOD_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PERIOD_STATUS_TYPE_CODE = deleted.LEASE_PERIOD_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PERIOD_STATUS_TYPE
    set "LEASE_PERIOD_STATUS_TYPE_CODE" = inserted."LEASE_PERIOD_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PERIOD_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_PERIOD_STATUS_TYPE.LEASE_PERIOD_STATUS_TYPE_CODE = inserted.LEASE_PERIOD_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQCST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQCST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQCST_I_S_U_TR] ON PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_CHKLST_ITEM_STATUS_TYPE_CODE = deleted.ACQ_CHKLST_ITEM_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE
    set "ACQ_CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."ACQ_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE
    inner join inserted
    on (PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE.ACQ_CHKLST_ITEM_STATUS_TYPE_CODE = inserted.ACQ_CHKLST_ITEM_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PROPLS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PROPLS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PROPLS_I_S_U_TR] ON PIMS_PROPERTY_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_LEASE_ID = deleted.PROPERTY_LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_LEASE
    set "PROPERTY_LEASE_ID" = inserted."PROPERTY_LEASE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "NAME" = inserted."NAME",
      "LEASE_AREA" = inserted."LEASE_AREA",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_LEASE
    inner join inserted
    on (PIMS_PROPERTY_LEASE.PROPERTY_LEASE_ID = inserted.PROPERTY_LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCHKLI_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LCHKLI_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCHKLI_I_S_U_TR] ON PIMS_LEASE_CHECKLIST_ITEM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CHECKLIST_ITEM_ID = deleted.LEASE_CHECKLIST_ITEM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CHECKLIST_ITEM
    set "LEASE_CHECKLIST_ITEM_ID" = inserted."LEASE_CHECKLIST_ITEM_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_CHKLST_ITEM_TYPE_CODE" = inserted."LEASE_CHKLST_ITEM_TYPE_CODE",
      "LEASE_CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."LEASE_CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CHECKLIST_ITEM
    inner join inserted
    on (PIMS_LEASE_CHECKLIST_ITEM.LEASE_CHECKLIST_ITEM_ID = inserted.LEASE_CHECKLIST_ITEM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCHKLI_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LCHKLI_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCHKLI_A_S_IUD_TR] ON PIMS_LEASE_CHECKLIST_ITEM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_CHECKLIST_ITEM_HIST set END_DATE_HIST = @curr_date where LEASE_CHECKLIST_ITEM_ID in (select LEASE_CHECKLIST_ITEM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_CHECKLIST_ITEM_HIST ([LEASE_CHECKLIST_ITEM_ID], [LEASE_ID], [LEASE_CHKLST_ITEM_TYPE_CODE], [LEASE_CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_CHECKLIST_ITEM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_CHECKLIST_ITEM_ID], [LEASE_ID], [LEASE_CHKLST_ITEM_TYPE_CODE], [LEASE_CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_CHECKLIST_ITEM_H_ID_SEQ]) as [_LEASE_CHECKLIST_ITEM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQCKI_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQCKI_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQCKI_I_S_U_TR] ON PIMS_ACQUISITION_CHECKLIST_ITEM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_CHECKLIST_ITEM_ID = deleted.ACQUISITION_CHECKLIST_ITEM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_CHECKLIST_ITEM
    set "ACQUISITION_CHECKLIST_ITEM_ID" = inserted."ACQUISITION_CHECKLIST_ITEM_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQ_CHKLST_ITEM_TYPE_CODE" = inserted."ACQ_CHKLST_ITEM_TYPE_CODE",
      "ACQ_CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."ACQ_CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_CHECKLIST_ITEM
    inner join inserted
    on (PIMS_ACQUISITION_CHECKLIST_ITEM.ACQUISITION_CHECKLIST_ITEM_ID = inserted.ACQUISITION_CHECKLIST_ITEM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPRP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPPRP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPRP_I_S_I_TR] ON PIMS_DISPOSITION_FILE_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE_PROPERTY ("DISPOSITION_FILE_PROPERTY_ID",
      "DISPOSITION_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_FILE_PROPERTY_ID",
      "DISPOSITION_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRSCRC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRSCRC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRSCRC_I_S_U_TR] ON PIMS_PROPERTY_RESEARCH_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_RESEARCH_FILE_ID = deleted.PROPERTY_RESEARCH_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_RESEARCH_FILE
    set "PROPERTY_RESEARCH_FILE_ID" = inserted."PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "PROPERTY_NAME" = inserted."PROPERTY_NAME",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_LEGAL_OPINION_REQUIRED" = inserted."IS_LEGAL_OPINION_REQUIRED",
      "IS_LEGAL_OPINION_OBTAINED" = inserted."IS_LEGAL_OPINION_OBTAINED",
      "DOCUMENT_REFERENCE" = inserted."DOCUMENT_REFERENCE",
      "RESEARCH_SUMMARY" = inserted."RESEARCH_SUMMARY",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_RESEARCH_FILE
    inner join inserted
    on (PIMS_PROPERTY_RESEARCH_FILE.PROPERTY_RESEARCH_FILE_ID = inserted.PROPERTY_RESEARCH_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSTERM_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSTERM_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSTERM_I_S_U_TR] ON PIMS_LEASE_PERIOD INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PERIOD_ID = deleted.LEASE_PERIOD_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PERIOD
    set "LEASE_PERIOD_ID" = inserted."LEASE_PERIOD_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_PERIOD_STATUS_TYPE_CODE" = inserted."LEASE_PERIOD_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE" = inserted."LEASE_PMT_FREQ_TYPE_CODE",
      "BASE_RENT_FREQ" = inserted."BASE_RENT_FREQ",
      "ADDL_RENT_FREQ" = inserted."ADDL_RENT_FREQ",
      "VBL_RENT_FREQ" = inserted."VBL_RENT_FREQ",
      "PERIOD_START_DATE" = inserted."PERIOD_START_DATE",
      "PERIOD_EXPIRY_DATE" = inserted."PERIOD_EXPIRY_DATE",
      "PERIOD_RENEWAL_DATE" = inserted."PERIOD_RENEWAL_DATE",
      "PAYMENT_AMOUNT" = inserted."PAYMENT_AMOUNT",
      "PAYMENT_DUE_DATE" = inserted."PAYMENT_DUE_DATE",
      "PAYMENT_NOTE" = inserted."PAYMENT_NOTE",
      "IS_GST_ELIGIBLE" = inserted."IS_GST_ELIGIBLE",
      "GST_AMOUNT" = inserted."GST_AMOUNT",
      "IS_PERIOD_EXERCISED" = inserted."IS_PERIOD_EXERCISED",
      "PAYMENT_TYPE" = inserted."PAYMENT_TYPE",
      "PERIOD_DURATION" = inserted."PERIOD_DURATION",
      "BASE_RENT_AGREED_PMT" = inserted."BASE_RENT_AGREED_PMT",
      "IS_BASE_RENT_SUBJECT_TO_GST" = inserted."IS_BASE_RENT_SUBJECT_TO_GST",
      "ADDL_RENT_AGREED_PMT" = inserted."ADDL_RENT_AGREED_PMT",
      "IS_ADDL_RENT_SUBJECT_TO_GST" = inserted."IS_ADDL_RENT_SUBJECT_TO_GST",
      "VBL_RENT_AGREED_PMT" = inserted."VBL_RENT_AGREED_PMT",
      "IS_VBL_RENT_SUBJECT_TO_GST" = inserted."IS_VBL_RENT_SUBJECT_TO_GST",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PERIOD
    inner join inserted
    on (PIMS_LEASE_PERIOD.LEASE_PERIOD_ID = inserted.LEASE_PERIOD_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCKI_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPCKI_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCKI_A_S_IUD_TR] ON PIMS_DISPOSITION_CHECKLIST_ITEM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_CHECKLIST_ITEM_HIST set END_DATE_HIST = @curr_date where DISPOSITION_CHECKLIST_ITEM_ID in (select DISPOSITION_CHECKLIST_ITEM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_CHECKLIST_ITEM_HIST ([DISPOSITION_CHECKLIST_ITEM_ID], [DISPOSITION_FILE_ID], [DSP_CHKLST_ITEM_TYPE_CODE], [DSP_CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_CHECKLIST_ITEM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_CHECKLIST_ITEM_ID], [DISPOSITION_FILE_ID], [DSP_CHKLST_ITEM_TYPE_CODE], [DSP_CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM_H_ID_SEQ]) as [_DISPOSITION_CHECKLIST_ITEM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LEASE_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_A_S_IUD_TR] ON PIMS_LEASE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_HIST set END_DATE_HIST = @curr_date where LEASE_ID in (select LEASE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_HIST ([LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CANCELLATION_REASON], [TERMINATION_REASON], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CANCELLATION_REASON], [TERMINATION_REASON], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_H_ID_SEQ]) as [_LEASE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCKI_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPCKI_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCKI_I_S_I_TR] ON PIMS_DISPOSITION_CHECKLIST_ITEM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_CHECKLIST_ITEM ("DISPOSITION_CHECKLIST_ITEM_ID",
      "DISPOSITION_FILE_ID",
      "DSP_CHKLST_ITEM_TYPE_CODE",
      "DSP_CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_CHECKLIST_ITEM_ID",
      "DISPOSITION_FILE_ID",
      "DSP_CHKLST_ITEM_TYPE_CODE",
      "DSP_CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LEASE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_I_TR] ON PIMS_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE ("LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "PROJECT_ID",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "TFA_FILE_NUMBER",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CANCELLATION_REASON",
      "TERMINATION_REASON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "PROJECT_ID",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "TFA_FILE_NUMBER",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CANCELLATION_REASON",
      "TERMINATION_REASON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPCST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCST_I_S_I_TR] ON PIMS_DSP_CHKLST_ITEM_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_CHKLST_ITEM_STATUS_TYPE ("DSP_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DSP_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCISTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LCISTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCISTY_I_S_I_TR] ON PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE ("LEASE_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PROPLS_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PROPLS_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PROPLS_I_S_I_TR] ON PIMS_PROPERTY_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_LEASE ("PROPERTY_LEASE_ID",
      "PROPERTY_ID",
      "LEASE_ID",
      "AREA_UNIT_TYPE_CODE",
      "NAME",
      "LEASE_AREA",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_LEASE_ID",
      "PROPERTY_ID",
      "LEASE_ID",
      "AREA_UNIT_TYPE_CODE",
      "NAME",
      "LEASE_AREA",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPRP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPPRP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPRP_I_S_U_TR] ON PIMS_DISPOSITION_FILE_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_PROPERTY_ID = deleted.DISPOSITION_FILE_PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE_PROPERTY
    set "DISPOSITION_FILE_PROPERTY_ID" = inserted."DISPOSITION_FILE_PROPERTY_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_NAME" = inserted."PROPERTY_NAME",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_PROPERTY
    inner join inserted
    on (PIMS_DISPOSITION_FILE_PROPERTY.DISPOSITION_FILE_PROPERTY_ID = inserted.DISPOSITION_FILE_PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRSCRC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRSCRC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRSCRC_I_S_I_TR] ON PIMS_PROPERTY_RESEARCH_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_RESEARCH_FILE ("PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID",
      "RESEARCH_FILE_ID",
      "PROPERTY_NAME",
      "DISPLAY_ORDER",
      "IS_LEGAL_OPINION_REQUIRED",
      "IS_LEGAL_OPINION_OBTAINED",
      "DOCUMENT_REFERENCE",
      "RESEARCH_SUMMARY",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID",
      "RESEARCH_FILE_ID",
      "PROPERTY_NAME",
      "DISPLAY_ORDER",
      "IS_LEGAL_OPINION_REQUIRED",
      "IS_LEGAL_OPINION_OBTAINED",
      "DOCUMENT_REFERENCE",
      "RESEARCH_SUMMARY",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQCST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQCST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQCST_I_S_I_TR] ON PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE ("ACQ_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LTRMST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LTRMST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LTRMST_I_S_I_TR] ON PIMS_LEASE_PERIOD_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PERIOD_STATUS_TYPE ("LEASE_PERIOD_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PERIOD_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LSPMTF_BASE_RENT_FREQ_FK
PRINT N'Create foreign key constraint dbo.PIM_LSPMTF_BASE_RENT_FREQ_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	ADD CONSTRAINT [PIM_LSPMTF_BASE_RENT_FREQ_FK]
	FOREIGN KEY([BASE_RENT_FREQ])
	REFERENCES [dbo].[PIMS_LEASE_PMT_FREQ_TYPE]([LEASE_PMT_FREQ_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LTRMST_PIM_LSTERM_FK
PRINT N'Create foreign key constraint dbo.PIM_LTRMST_PIM_LSTERM_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	ADD CONSTRAINT [PIM_LTRMST_PIM_LSTERM_FK]
	FOREIGN KEY([LEASE_PERIOD_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE]([LEASE_PERIOD_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LSTERM_PIM_LSPYMT_FK
PRINT N'Create foreign key constraint dbo.PIM_LSTERM_PIM_LSPYMT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT]
	ADD CONSTRAINT [PIM_LSTERM_PIM_LSPYMT_FK]
	FOREIGN KEY([LEASE_PERIOD_ID])
	REFERENCES [dbo].[PIMS_LEASE_PERIOD]([LEASE_PERIOD_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_RENEWAL_HIST
PRINT N'Drop table dbo.PIMS_LEASE_RENEWAL_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_RENEWAL_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_LEASE_RENEWAL_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_LEASE_RENEWAL_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_LEASE_RENEWAL_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_LEASE_RENEWAL_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_LEASE_RENEWAL_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_LEASE_RENEWAL_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_LEASE_PERIOD_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_LEASE_PERIOD_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_LEASE_PERIOD_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.CHKLIS_PK
PRINT N'Drop primary key constraint dbo.CHKLIS_PK'
GO
ALTER TABLE [dbo].[PIMS_CHKLST_ITEM_STATUS_TYPE]
	DROP CONSTRAINT IF EXISTS [CHKLIS_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_CHKLST_ITEM_STATUS_TYPE
PRINT N'Drop table dbo.PIMS_CHKLST_ITEM_STATUS_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_CHKLST_ITEM_STATUS_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
