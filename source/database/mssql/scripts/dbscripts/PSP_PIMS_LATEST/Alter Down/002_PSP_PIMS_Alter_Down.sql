-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Thu Jun 08 14:21:17 PDT 2023
-- Execute this script on:
-- 		PIMS_PSP_S56_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PIMS_PSP_S55_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQPAY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQPAY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQPAY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQPAY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQPAY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQPAY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQPAY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQPAY_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQPAY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_PAYEE
PRINT N'Alter table dbo.PIMS_ACQUISITION_PAYEE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	DROP CONSTRAINT IF EXISTS [ACQPAY_IS_PAYMENT_IN_TRUST_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	DROP COLUMN IF EXISTS [GST_NUMBER], [IS_PAYMENT_IN_TRUST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACQ_PAYEE_CHEQUE_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACQ_PAYEE_CHEQUE_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACQ_PAYEE_CHEQUE_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQ_PAYEE_CHEQUE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQ_PAYEE_CHEQUE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQ_PAYEE_CHEQUE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQ_PAYEE_CHEQUE
PRINT N'Create table dbo.PIMS_ACQ_PAYEE_CHEQUE'
GO
CREATE TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE]  ( 
	[ACQ_PAYEE_CHEQUE_ID]           	bigint NOT NULL CONSTRAINT [AQPCHQ_ACQ_PAYEE_CHEQUE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQ_PAYEE_CHEQUE_ID_SEQ]),
	[ACQUISITION_PAYEE_ID]          	bigint NOT NULL,
	[PRETAX_AMT]                    	money NULL,
	[TAX_AMT]                       	money NULL,
	[TOTAL_AMT]                     	money NULL,
	[GST_NUMBER]                    	nvarchar(50) NULL,
	[IS_PAYMENT_IN_TRUST]           	bit NULL CONSTRAINT [AQPCHQ_IS_PAYMENT_IN_TRUST_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [AQPCHQ_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [AQPCHQ_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [AQPCHQ_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [AQPCHQ_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [AQPCHQ_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [AQPCHQ_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [AQPCHQ_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [AQPCHQ_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [AQPCHQ_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [AQPCHQ_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [AQPCHQ_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AQPCHQ_PK] PRIMARY KEY CLUSTERED([ACQ_PAYEE_CHEQUE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Subtotal of the owner''s cheque related to the requisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PAYEE_CHEQUE', 
	@level2type = N'Column', @level2name = N'PRETAX_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Taxes related to the owner''s cheque related to the requisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PAYEE_CHEQUE', 
	@level2type = N'Column', @level2name = N'TAX_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Total value of the owner''s cheque related to the requisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PAYEE_CHEQUE', 
	@level2type = N'Column', @level2name = N'TOTAL_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST number of the Payee' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PAYEE_CHEQUE', 
	@level2type = N'Column', @level2name = N'GST_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table associating cheques for an acquisition file owner with a compenstion requisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PAYEE_CHEQUE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_PAYEE_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_PAYEE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE_HIST]
	DROP COLUMN IF EXISTS [GST_NUMBER], [IS_PAYMENT_IN_TRUST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACQ_PAYEE_CHEQUE_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACQ_PAYEE_CHEQUE_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACQ_PAYEE_CHEQUE_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQ_PAYEE_CHEQUE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQ_PAYEE_CHEQUE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQ_PAYEE_CHEQUE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQ_PAYEE_CHEQUE_HIST
PRINT N'Create table dbo.PIMS_ACQ_PAYEE_CHEQUE_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE_HIST]  ( 
	[_ACQ_PAYEE_CHEQUE_HIST_ID]     	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQ_PAYEE_CHEQUE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ACQ_PAYEE_CHEQUE_ID]           	bigint NOT NULL,
	[ACQUISITION_PAYEE_ID]          	bigint NOT NULL,
	[PRETAX_AMT]                    	money NULL,
	[TAX_AMT]                       	money NULL,
	[TOTAL_AMT]                     	money NULL,
	[GST_NUMBER]                    	nvarchar(50) NULL,
	[IS_PAYMENT_IN_TRUST]           	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_AQPCHQ_H_PK] PRIMARY KEY CLUSTERED([_ACQ_PAYEE_CHEQUE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_AQPCHQ_H_UK
PRINT N'Create unique constraint dbo.PIMS_AQPCHQ_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE_HIST]
	ADD CONSTRAINT [PIMS_AQPCHQ_H_UK]
	UNIQUE ([_ACQ_PAYEE_CHEQUE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AQPCHQ_ACQUISITION_PAYEE_ID_IDX
PRINT N'Create index dbo.AQPCHQ_ACQUISITION_PAYEE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AQPCHQ_ACQUISITION_PAYEE_ID_IDX]
	ON [dbo].[PIMS_ACQ_PAYEE_CHEQUE]([ACQUISITION_PAYEE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQPAY_PIM_AQPCHQ_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQPAY_PIM_AQPCHQ_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE]
	ADD CONSTRAINT [PIM_ACQPAY_PIM_AQPCHQ_FK]
	FOREIGN KEY([ACQUISITION_PAYEE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_PAYEE]([ACQUISITION_PAYEE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_A_S_IUD_TR] ON PIMS_ACQUISITION_PAYEE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_PAYEE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_PAYEE_ID in (select ACQUISITION_PAYEE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_PAYEE_HIST ([ACQUISITION_PAYEE_ID], [COMPENSATION_REQUISITION_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [OWNER_REPRESENTATIVE_ID], [OWNER_SOLICITOR_ID], [ACQUISITION_FILE_PERSON_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_PAYEE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_PAYEE_ID], [COMPENSATION_REQUISITION_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [OWNER_REPRESENTATIVE_ID], [OWNER_SOLICITOR_ID], [ACQUISITION_FILE_PERSON_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_PAYEE_H_ID_SEQ]) as [_ACQUISITION_PAYEE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_I_S_I_TR] ON PIMS_ACQUISITION_PAYEE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_PAYEE ("ACQUISITION_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "OWNER_REPRESENTATIVE_ID",
      "OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_PERSON_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "OWNER_REPRESENTATIVE_ID",
      "OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_PERSON_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQPCHQ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AQPCHQ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQPCHQ_I_S_U_TR] ON PIMS_ACQ_PAYEE_CHEQUE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_PAYEE_CHEQUE_ID = deleted.ACQ_PAYEE_CHEQUE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_PAYEE_CHEQUE
    set "ACQ_PAYEE_CHEQUE_ID" = inserted."ACQ_PAYEE_CHEQUE_ID",
      "ACQUISITION_PAYEE_ID" = inserted."ACQUISITION_PAYEE_ID",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "TAX_AMT" = inserted."TAX_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "GST_NUMBER" = inserted."GST_NUMBER",
      "IS_PAYMENT_IN_TRUST" = inserted."IS_PAYMENT_IN_TRUST",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_PAYEE_CHEQUE
    inner join inserted
    on (PIMS_ACQ_PAYEE_CHEQUE.ACQ_PAYEE_CHEQUE_ID = inserted.ACQ_PAYEE_CHEQUE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQPCHQ_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_AQPCHQ_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQPCHQ_A_S_IUD_TR] ON PIMS_ACQ_PAYEE_CHEQUE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQ_PAYEE_CHEQUE_HIST set END_DATE_HIST = @curr_date where ACQ_PAYEE_CHEQUE_ID in (select ACQ_PAYEE_CHEQUE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQ_PAYEE_CHEQUE_HIST ([ACQ_PAYEE_CHEQUE_ID], [ACQUISITION_PAYEE_ID], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [GST_NUMBER], [IS_PAYMENT_IN_TRUST], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQ_PAYEE_CHEQUE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQ_PAYEE_CHEQUE_ID], [ACQUISITION_PAYEE_ID], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [GST_NUMBER], [IS_PAYMENT_IN_TRUST], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQ_PAYEE_CHEQUE_H_ID_SEQ]) as [_ACQ_PAYEE_CHEQUE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQPCHQ_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AQPCHQ_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQPCHQ_I_S_I_TR] ON PIMS_ACQ_PAYEE_CHEQUE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_PAYEE_CHEQUE ("ACQ_PAYEE_CHEQUE_ID",
      "ACQUISITION_PAYEE_ID",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "GST_NUMBER",
      "IS_PAYMENT_IN_TRUST",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQ_PAYEE_CHEQUE_ID",
      "ACQUISITION_PAYEE_ID",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "GST_NUMBER",
      "IS_PAYMENT_IN_TRUST",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_I_S_U_TR] ON PIMS_ACQUISITION_PAYEE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_PAYEE_ID = deleted.ACQUISITION_PAYEE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_PAYEE
    set "ACQUISITION_PAYEE_ID" = inserted."ACQUISITION_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "OWNER_REPRESENTATIVE_ID" = inserted."OWNER_REPRESENTATIVE_ID",
      "OWNER_SOLICITOR_ID" = inserted."OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_PERSON_ID" = inserted."ACQUISITION_FILE_PERSON_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_PAYEE
    inner join inserted
    on (PIMS_ACQUISITION_PAYEE.ACQUISITION_PAYEE_ID = inserted.ACQUISITION_PAYEE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
