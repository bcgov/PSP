/* -----------------------------------------------------------------------------
Rename the PERIOD table and columns to TERM
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
Author        Date         Comment
------------  -----------  -----------------------------------------------------
Doug Filteau  2024-Jun-20  Initial version.
----------------------------------------------------------------------------- */

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter PIMS_LEASE_PERIOD
PRINT N'Alter PIMS_LEASE_PERIOD'
GO
exec sp_rename 'dbo.PIMS_LEASE_PERIOD.LEASE_PERIOD_ID', 'LEASE_TERM_ID', 'COLUMN';
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
exec sp_rename 'dbo.PIMS_LEASE_PERIOD.LEASE_PERIOD_STATUS_TYPE_CODE', 'LEASE_TERM_STATUS_TYPE_CODE', 'COLUMN';
GO
IF @@ERROR <> 0 SET NOEXEC ON
exec sp_rename 'dbo.PIMS_LEASE_PERIOD.PERIOD_START_DATE', 'TERM_START_DATE', 'COLUMN';
GO
IF @@ERROR <> 0 SET NOEXEC ON
exec sp_rename 'dbo.PIMS_LEASE_PERIOD.PERIOD_EXPIRY_DATE', 'TERM_EXPIRY_DATE', 'COLUMN';
GO
IF @@ERROR <> 0 SET NOEXEC ON
exec sp_rename 'dbo.PIMS_LEASE_PERIOD.PERIOD_RENEWAL_DATE', 'TERM_RENEWAL_DATE', 'COLUMN';
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
exec sp_rename 'dbo.PIMS_LEASE_PERIOD', 'PIMS_LEASE_TERM'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter PIMS_LEASE_PERIOD_HIST
PRINT N'Alter PIMS_LEASE_PERIOD_HIST'
GO
exec sp_rename 'dbo.PIMS_LEASE_PERIOD_HIST._LEASE_PERIOD_HIST_ID', '_LEASE_TERM_HIST_ID', 'COLUMN';
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
exec sp_rename 'dbo.PIMS_LEASE_PERIOD_HIST.LEASE_PERIOD_ID', 'LEASE_TERM_ID', 'COLUMN';
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
exec sp_rename 'dbo.PIMS_LEASE_PERIOD_HIST.LEASE_PERIOD_STATUS_TYPE_CODE', 'LEASE_TERM_STATUS_TYPE_CODE', 'COLUMN';
GO
IF @@ERROR <> 0 SET NOEXEC ON
exec sp_rename 'dbo.PIMS_LEASE_PERIOD_HIST.PERIOD_START_DATE', 'TERM_START_DATE', 'COLUMN';
GO
IF @@ERROR <> 0 SET NOEXEC ON
exec sp_rename 'dbo.PIMS_LEASE_PERIOD_HIST.PERIOD_EXPIRY_DATE', 'TERM_EXPIRY_DATE', 'COLUMN';
GO
IF @@ERROR <> 0 SET NOEXEC ON
exec sp_rename 'dbo.PIMS_LEASE_PERIOD_HIST.PERIOD_RENEWAL_DATE', 'TERM_RENEWAL_DATE', 'COLUMN';
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
exec sp_rename 'dbo.PIMS_LEASE_PERIOD_HIST', 'PIMS_LEASE_TERM_HIST'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter PIMS_LEASE_PAYMENT
PRINT N'Alter PIMS_LEASE_PAYMENT'
GO
exec sp_rename 'dbo.PIMS_LEASE_PAYMENT.LEASE_PERIOD_ID', 'LEASE_TERM_ID', 'COLUMN';
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter PIMS_LEASE_PAYMENT_HIST
PRINT N'Alter PIMS_LEASE_PAYMENT_HIST'
GO
exec sp_rename 'dbo.PIMS_LEASE_PAYMENT_HIST.LEASE_PERIOD_ID', 'LEASE_TERM_ID', 'COLUMN';
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter dbo.PIMS_LEASE_PERIOD_STATUS_TYPE
PRINT N'Alter dbo.PIMS_LEASE_PERIOD_STATUS_TYPE'
GO
exec sp_rename 'dbo.PIMS_LEASE_PERIOD_STATUS_TYPE.LEASE_PERIOD_STATUS_TYPE_CODE', 'LEASE_TERM_STATUS_TYPE_CODE', 'COLUMN';
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
exec sp_rename 'dbo.PIMS_LEASE_PERIOD_STATUS_TYPE', 'PIMS_LEASE_TERM_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LTRMST_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LTRMST_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LTRMST_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create triger PIMS_LTRMST_I_S_I_TR
PRINT N'Create triger PIMS_LTRMST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LTRMST_I_S_I_TR] ON PIMS_LEASE_TERM_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_TERM_STATUS_TYPE ("LEASE_TERM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_TERM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LTRMST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LTRMST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LTRMST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create triger PIMS_LTRMST_I_S_U_TR
PRINT N'Create triger PIMS_LTRMST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LTRMST_I_S_U_TR] ON PIMS_LEASE_TERM_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_TERM_STATUS_TYPE_CODE = deleted.LEASE_TERM_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_TERM_STATUS_TYPE
    set "LEASE_TERM_STATUS_TYPE_CODE" = inserted."LEASE_TERM_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_TERM_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_TERM_STATUS_TYPE.LEASE_TERM_STATUS_TYPE_CODE = inserted.LEASE_TERM_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
