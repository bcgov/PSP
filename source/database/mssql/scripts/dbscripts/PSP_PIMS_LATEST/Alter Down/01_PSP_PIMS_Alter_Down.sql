-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Mon Jan 09 14:50:02 PST 2023
-- Execute this script on:
-- 		PSP_PIMS_S45_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S44_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNOT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQNOT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNOT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNOT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQNOT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNOT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNOT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQNOT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNOT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_ACQNOT_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_ACQNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_NOTE]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_ACQNOT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_NOTE_PIM_ACQNOT_FK
PRINT N'Drop foreign key constraint dbo.PIM_NOTE_PIM_ACQNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_NOTE]
	DROP CONSTRAINT IF EXISTS [PIM_NOTE_PIM_ACQNOT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRODCT_PIM_ACQNFL_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRODCT_PIM_ACQNFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	DROP CONSTRAINT IF EXISTS [PIM_PRODCT_PIM_ACQNFL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PROJCT_PIM_ACQNFL_FK
PRINT N'Drop foreign key constraint dbo.PIM_PROJCT_PIM_ACQNFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	DROP CONSTRAINT IF EXISTS [PIM_PROJCT_PIM_ACQNFL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PROJCT_PIM_PRODCT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PROJCT_PIM_PRODCT_FK'
GO
ALTER TABLE [dbo].[PIMS_PRODUCT]
	DROP CONSTRAINT IF EXISTS [PIM_PROJCT_PIM_PRODCT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BIZFCN_PIM_PROJCT_FK
PRINT N'Drop foreign key constraint dbo.PIM_BIZFCN_PIM_PROJCT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT]
	DROP CONSTRAINT IF EXISTS [PIM_BIZFCN_PIM_PROJCT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_WRKACT_PIM_PROJCT_FK
PRINT N'Drop foreign key constraint dbo.PIM_WRKACT_PIM_PROJCT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT]
	DROP CONSTRAINT IF EXISTS [PIM_WRKACT_PIM_PROJCT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRJSTS_PIM_PROJCT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRJSTS_PIM_PROJCT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT]
	DROP CONSTRAINT IF EXISTS [PIM_PRJSTS_PIM_PROJCT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_COSTYP_PIM_PROJCT_FK
PRINT N'Drop foreign key constraint dbo.PIM_COSTYP_PIM_PROJCT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT]
	DROP CONSTRAINT IF EXISTS [PIM_COSTYP_PIM_PROJCT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQNOT_NOTE_ID_IDX
PRINT N'Drop index dbo.ACQNOT_NOTE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_FILE_NOTE].[ACQNOT_NOTE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQNOT_ACQUISITION_FILE_ID_IDX
PRINT N'Drop index dbo.ACQNOT_ACQUISITION_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_FILE_NOTE].[ACQNOT_ACQUISITION_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTTMP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTTMP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTTMP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTTMP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACTTMP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTTMP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQNFL_PROJECT_ID_IDX
PRINT N'Drop index dbo.ACQNFL_PROJECT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_FILE].[ACQNFL_PROJECT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQNFL_PRODUCT_ID_IDX
PRINT N'Drop index dbo.ACQNFL_PRODUCT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_FILE].[ACQNFL_PRODUCT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTTMP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTTMP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTTMP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJCT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROJCT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROJCT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJCT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PROJCT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROJCT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJCT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PROJCT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROJCT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROJCT_WORK_ACTIVITY_CODE_ID_IDX
PRINT N'Drop index dbo.PROJCT_WORK_ACTIVITY_CODE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT].[PROJCT_WORK_ACTIVITY_CODE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROJCT_REGION_CODE_IDX
PRINT N'Drop index dbo.PROJCT_REGION_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT].[PROJCT_REGION_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROJCT_PROJECT_STATUS_CODE_IDX
PRINT N'Drop index dbo.PROJCT_PROJECT_STATUS_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT].[PROJCT_PROJECT_STATUS_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROJCT_COST_TYPE_CODE_ID_IDX
PRINT N'Drop index dbo.PROJCT_COST_TYPE_CODE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT].[PROJCT_COST_TYPE_CODE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROJCT_CODE_IDX
PRINT N'Drop index dbo.PROJCT_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT].[PROJCT_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROJCT_BUSINESS_FUNCTION_CODE_ID_IDX
PRINT N'Drop index dbo.PROJCT_BUSINESS_FUNCTION_CODE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT].[PROJCT_BUSINESS_FUNCTION_CODE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRODCT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRODCT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRODCT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRODCT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRODCT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRODCT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRODCT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRODCT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRODCT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRODCT_PARENT_PROJECT_ID_IDX
PRINT N'Drop index dbo.PRODCT_PARENT_PROJECT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PRODUCT].[PRODCT_PARENT_PROJECT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRODCT_CODE_IDX
PRINT N'Drop index dbo.PRODCT_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PRODUCT].[PRODCT_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJSTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRJSTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJSTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJSTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRJSTY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJSTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ACQNOT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ACQNOT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_NOTE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACQNOT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ACQNOT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ACQNOT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_NOTE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACQNOT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.ACQNOT_ACQUISITION_FILE_ID_TUC
PRINT N'Drop unique constraint dbo.ACQNOT_ACQUISITION_FILE_ID_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_NOTE]
	DROP CONSTRAINT IF EXISTS [ACQNOT_ACQUISITION_FILE_ID_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.ACQNOT_NOTE_ID_TUC
PRINT N'Drop unique constraint dbo.ACQNOT_NOTE_ID_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_NOTE]
	DROP CONSTRAINT IF EXISTS [ACQNOT_NOTE_ID_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.ACQNOT_PK
PRINT N'Drop primary key constraint dbo.ACQNOT_PK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_NOTE]
	DROP CONSTRAINT IF EXISTS [ACQNOT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACQUISITION_FILE_NOTE
PRINT N'Drop table dbo.PIMS_ACQUISITION_FILE_NOTE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACQUISITION_FILE_NOTE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PROJCT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PROJCT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PROJCT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PROJCT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PROJCT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PROJCT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT_HIST
PRINT N'Drop table dbo.PIMS_PROJECT_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRODCT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRODCT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PRODUCT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRODCT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRODCT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRODCT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PRODUCT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRODCT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRODCT_PK
PRINT N'Drop primary key constraint dbo.PRODCT_PK'
GO
ALTER TABLE [dbo].[PIMS_PRODUCT]
	DROP CONSTRAINT IF EXISTS [PRODCT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PRODUCT
PRINT N'Drop table dbo.PIMS_PRODUCT'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PRODUCT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PROJCT_PK
PRINT N'Drop primary key constraint dbo.PROJCT_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT]
	DROP CONSTRAINT IF EXISTS [PROJCT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT
PRINT N'Drop table dbo.PIMS_PROJECT'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRJSTY_PK
PRINT N'Drop primary key constraint dbo.PRJSTY_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_STATUS_TYPE]
	DROP CONSTRAINT IF EXISTS [PRJSTY_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROJECT_STATUS_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROJECT_STATUS_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROJECT_STATUS_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	DROP COLUMN IF EXISTS [PROJECT_ID], [PRODUCT_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACTIVITY_TEMPLATE
PRINT N'Alter table dbo.PIMS_ACTIVITY_TEMPLATE'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE]
	DROP CONSTRAINT IF EXISTS [ACTTMP_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE]
	DROP COLUMN IF EXISTS [IS_DISABLED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST]
	DROP COLUMN IF EXISTS [PROJECT_ID], [PRODUCT_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACTIVITY_TEMPLATE_HIST
PRINT N'Alter table dbo.PIMS_ACTIVITY_TEMPLATE_HIST'
GO
-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_ACTIVITY_TEMPLATE_HIST' 
                   AND col.NAME = 'IS_DISABLED')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_HIST]
	DROP COLUMN IF EXISTS [IS_DISABLED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_I_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE ("ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "MINISTRY_PROJECT_NUMBER",
      "MINISTRY_PROJECT_NAME",
      "CPS_PRODUCT_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUMBER",
      "LEGACY_FILE_NUMBER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "MINISTRY_PROJECT_NUMBER",
      "MINISTRY_PROJECT_NAME",
      "CPS_PRODUCT_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUMBER",
      "LEGACY_FILE_NUMBER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTTMP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTTMP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTTMP_I_S_I_TR] ON PIMS_ACTIVITY_TEMPLATE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_TEMPLATE ("ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_TEMPLATE_TYPE_CODE",
      "ACTIVITY_TEMPLATE_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_TEMPLATE_TYPE_CODE",
      "ACTIVITY_TEMPLATE_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_ID in (select ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_HIST ([ACQUISITION_FILE_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [MINISTRY_PROJECT_NUMBER], [MINISTRY_PROJECT_NAME], [CPS_PRODUCT_CODE], [FILE_NAME], [FILE_NO], [FILE_NUMBER], [LEGACY_FILE_NUMBER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [PAIMS_ACQUISITION_FILE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [MINISTRY_PROJECT_NUMBER], [MINISTRY_PROJECT_NAME], [CPS_PRODUCT_CODE], [FILE_NAME], [FILE_NO], [FILE_NUMBER], [LEGACY_FILE_NUMBER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [PAIMS_ACQUISITION_FILE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_H_ID_SEQ]) as [_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTTMP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACTTMP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTTMP_A_S_IUD_TR] ON PIMS_ACTIVITY_TEMPLATE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_TEMPLATE_HIST set END_DATE_HIST = @curr_date where ACTIVITY_TEMPLATE_ID in (select ACTIVITY_TEMPLATE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_TEMPLATE_HIST ([ACTIVITY_TEMPLATE_ID], [ACTIVITY_TEMPLATE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_TEMPLATE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_TEMPLATE_ID], [ACTIVITY_TEMPLATE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ]) as [_ACTIVITY_TEMPLATE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTTMP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTTMP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTTMP_I_S_U_TR] ON PIMS_ACTIVITY_TEMPLATE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_TEMPLATE_ID = deleted.ACTIVITY_TEMPLATE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_TEMPLATE
    set "ACTIVITY_TEMPLATE_ID" = inserted."ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_TEMPLATE_TYPE_CODE" = inserted."ACTIVITY_TEMPLATE_TYPE_CODE",
      "ACTIVITY_TEMPLATE_JSON" = inserted."ACTIVITY_TEMPLATE_JSON",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_TEMPLATE
    inner join inserted
    on (PIMS_ACTIVITY_TEMPLATE.ACTIVITY_TEMPLATE_ID = inserted.ACTIVITY_TEMPLATE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_U_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_ID = deleted.ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE
    set "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "MINISTRY_PROJECT_NUMBER" = inserted."MINISTRY_PROJECT_NUMBER",
      "MINISTRY_PROJECT_NAME" = inserted."MINISTRY_PROJECT_NAME",
      "CPS_PRODUCT_CODE" = inserted."CPS_PRODUCT_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_NO" = inserted."FILE_NO",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "LEGACY_FILE_NUMBER" = inserted."LEGACY_FILE_NUMBER",
      "FUNDING_OTHER" = inserted."FUNDING_OTHER",
      "ASSIGNED_DATE" = inserted."ASSIGNED_DATE",
      "DELIVERY_DATE" = inserted."DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID" = inserted."PAIMS_ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE
    inner join inserted
    on (PIMS_ACQUISITION_FILE.ACQUISITION_FILE_ID = inserted.ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACQUISITION_FILE_NOTE_HIST
PRINT N'Drop table dbo.PIMS_ACQUISITION_FILE_NOTE_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACQUISITION_FILE_NOTE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACQUISITION_FILE_NOTE_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACQUISITION_FILE_NOTE_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACQUISITION_FILE_NOTE_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACQUISITION_FILE_NOTE_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACQUISITION_FILE_NOTE_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACQUISITION_FILE_NOTE_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PRODUCT_HIST
PRINT N'Drop table dbo.PIMS_PRODUCT_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PRODUCT_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PRODUCT_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PRODUCT_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PRODUCT_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT_STATUS_TYPE
PRINT N'Drop table dbo.PIMS_PROJECT_STATUS_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT_STATUS_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
