-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Thu Mar 09 16:36:27 PST 2023
-- Execute this script on:
-- 		PSP_PIMS_S49_01/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S49_02/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCTYP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DOCTYP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCTYP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DOCTYP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_TYP
PRINT N'Alter table dbo.PIMS_DOCUMENT_TYP'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
	ADD [DISPLAY_ORDER] int NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Determines the default display order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_TYP', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_TYP_HIST
PRINT N'Alter table dbo.PIMS_DOCUMENT_TYP_HIST'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP_HIST]
	ADD [DISPLAY_ORDER] int NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE
PRINT N'Alter table dbo.PIMS_LEASE'
GO
ALTER TABLE [dbo].[PIMS_LEASE] ALTER COLUMN [LEASE_INITIATOR_TYPE_CODE] nvarchar(20) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_HIST
PRINT N'Alter table dbo.PIMS_LEASE_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_HIST] ALTER COLUMN [LEASE_INITIATOR_TYPE_CODE] nvarchar(20) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCTYP_I_S_U_TR] ON PIMS_DOCUMENT_TYP INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_TYPE_ID = deleted.DOCUMENT_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_TYP
    set "DOCUMENT_TYPE_ID" = inserted."DOCUMENT_TYPE_ID",
      "MAYAN_ID" = inserted."MAYAN_ID",
      "DOCUMENT_TYPE" = inserted."DOCUMENT_TYPE",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_TYP
    inner join inserted
    on (PIMS_DOCUMENT_TYP.DOCUMENT_TYPE_ID = inserted.DOCUMENT_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCTYP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DOCTYP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCTYP_I_S_I_TR] ON PIMS_DOCUMENT_TYP INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_TYP ("DOCUMENT_TYPE_ID",
      "MAYAN_ID",
      "DOCUMENT_TYPE",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DOCUMENT_TYPE_ID",
      "MAYAN_ID",
      "DOCUMENT_TYPE",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCTYP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DOCTYP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCTYP_A_S_IUD_TR] ON PIMS_DOCUMENT_TYP FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DOCUMENT_TYP_HIST set END_DATE_HIST = @curr_date where DOCUMENT_TYPE_ID in (select DOCUMENT_TYPE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DOCUMENT_TYP_HIST ([DOCUMENT_TYPE_ID], [MAYAN_ID], [DOCUMENT_TYPE], [DISPLAY_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DOCUMENT_TYP_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DOCUMENT_TYPE_ID], [MAYAN_ID], [DOCUMENT_TYPE], [DISPLAY_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DOCUMENT_TYP_H_ID_SEQ]) as [_DOCUMENT_TYP_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
