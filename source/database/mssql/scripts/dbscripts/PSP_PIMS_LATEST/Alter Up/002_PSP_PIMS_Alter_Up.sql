-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Mon Dec 16 11:55:56 PST 2024
-- Execute this script on:
-- 		PSP_PIMS_S95_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S96_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQDOC_PIM_DOCQUE_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQDOC_PIM_DOCQUE_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	DROP CONSTRAINT IF EXISTS [PIM_ACQDOC_PIM_DOCQUE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_RFLDOC_PIM_DOCQUE_FK
PRINT N'Drop foreign key constraint dbo.PIM_RFLDOC_PIM_DOCQUE_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	DROP CONSTRAINT IF EXISTS [PIM_RFLDOC_PIM_DOCQUE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRACDO_PIM_DOCQUE_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRACDO_PIM_DOCQUE_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	DROP CONSTRAINT IF EXISTS [PIM_PRACDO_PIM_DOCQUE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DSPDOC_PIM_DOCQUE_FK
PRINT N'Drop foreign key constraint dbo.PIM_DSPDOC_PIM_DOCQUE_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	DROP CONSTRAINT IF EXISTS [PIM_DSPDOC_PIM_DOCQUE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LESDOC_PIM_DOCQUE_FK
PRINT N'Drop foreign key constraint dbo.PIM_LESDOC_PIM_DOCQUE_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	DROP CONSTRAINT IF EXISTS [PIM_LESDOC_PIM_DOCQUE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCQUE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCQUE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCQUE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCQUE_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DOCQUE_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCQUE_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.DOCQUE_RESEARCH_FILE_DOCUMENT_ID_IDX
PRINT N'Drop index dbo.DOCQUE_RESEARCH_FILE_DOCUMENT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_DOCUMENT_QUEUE].[DOCQUE_RESEARCH_FILE_DOCUMENT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.DOCQUE_PROPERTY_ACTIVITY_DOCUMENT_ID_IDX
PRINT N'Drop index dbo.DOCQUE_PROPERTY_ACTIVITY_DOCUMENT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_DOCUMENT_QUEUE].[DOCQUE_PROPERTY_ACTIVITY_DOCUMENT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.DOCQUE_LEASE_DOCUMENT_ID_IDX
PRINT N'Drop index dbo.DOCQUE_LEASE_DOCUMENT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_DOCUMENT_QUEUE].[DOCQUE_LEASE_DOCUMENT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.DOCQUE_DISPOSITION_FILE_DOCUMENT_ID_IDX
PRINT N'Drop index dbo.DOCQUE_DISPOSITION_FILE_DOCUMENT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_DOCUMENT_QUEUE].[DOCQUE_DISPOSITION_FILE_DOCUMENT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.DOCQUE_ACQUISITION_FILE_DOCUMENT_ID_IDX
PRINT N'Drop index dbo.DOCQUE_ACQUISITION_FILE_DOCUMENT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_DOCUMENT_QUEUE].[DOCQUE_ACQUISITION_FILE_DOCUMENT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCQUE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DOCQUE_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCQUE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQ_FILE_APPRAISAL_TYPE
PRINT N'Create table dbo.PIMS_ACQ_FILE_APPRAISAL_TYPE'
GO
CREATE TABLE [dbo].[PIMS_ACQ_FILE_APPRAISAL_TYPE]  ( 
	[ACQ_FILE_APPRAISAL_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                 	nvarchar(200) NOT NULL,
	[IS_DISABLED]                 	bit NOT NULL CONSTRAINT [AFAPPRT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]               	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NOT NULL CONSTRAINT [AFAPPRT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [AFAPPRT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [AFAPPRT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [AFAPPRT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [AFAPPRT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AFAPPRT_PK] PRIMARY KEY CLUSTERED([ACQ_FILE_APPRAISAL_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the acquisition file appraisal type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_APPRAISAL_TYPE', 
	@level2type = N'Column', @level2name = N'ACQ_FILE_APPRAISAL_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquisition file appraisal type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_APPRAISAL_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_APPRAISAL_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_APPRAISAL_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_APPRAISAL_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_APPRAISAL_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_APPRAISAL_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_APPRAISAL_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_APPRAISAL_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquisition file appraisal type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_APPRAISAL_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQ_FILE_EXPROP_RISK_TYPE
PRINT N'Create table dbo.PIMS_ACQ_FILE_EXPROP_RISK_TYPE'
GO
CREATE TABLE [dbo].[PIMS_ACQ_FILE_EXPROP_RISK_TYPE]  ( 
	[ACQ_FILE_EXPROP_RISK_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [AFEXRT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [AFEXRT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [AFEXRT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [AFEXRT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [AFEXRT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [AFEXRT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AFEXRT_PK] PRIMARY KEY CLUSTERED([ACQ_FILE_EXPROP_RISK_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the acquisition file expropriation risk type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_EXPROP_RISK_TYPE', 
	@level2type = N'Column', @level2name = N'ACQ_FILE_EXPROP_RISK_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquisition file expropriation risk type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_EXPROP_RISK_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_EXPROP_RISK_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_EXPROP_RISK_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_EXPROP_RISK_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_EXPROP_RISK_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_EXPROP_RISK_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_EXPROP_RISK_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_EXPROP_RISK_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquisition file expropriation risk type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_EXPROP_RISK_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQ_FILE_LGL_SRVY_TYPE
PRINT N'Create table dbo.PIMS_ACQ_FILE_LGL_SRVY_TYPE'
GO
CREATE TABLE [dbo].[PIMS_ACQ_FILE_LGL_SRVY_TYPE]  ( 
	[ACQ_FILE_LGL_SRVY_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                	nvarchar(200) NOT NULL,
	[IS_DISABLED]                	bit NOT NULL CONSTRAINT [AFLSVT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]              	int NULL,
	[CONCURRENCY_CONTROL_NUMBER] 	bigint NOT NULL CONSTRAINT [AFLSVT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [AFLSVT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [AFLSVT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]   	datetime NOT NULL CONSTRAINT [AFLSVT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]      	nvarchar(30) NOT NULL CONSTRAINT [AFLSVT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AFLSVT_PK] PRIMARY KEY CLUSTERED([ACQ_FILE_LGL_SRVY_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the acquisition file legal survey type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_LGL_SRVY_TYPE', 
	@level2type = N'Column', @level2name = N'ACQ_FILE_LGL_SRVY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquisition file legal survey type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_LGL_SRVY_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_LGL_SRVY_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_LGL_SRVY_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_LGL_SRVY_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_LGL_SRVY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_LGL_SRVY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_LGL_SRVY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_LGL_SRVY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquisition file legal survey type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_LGL_SRVY_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD [ACQ_FILE_APPRAISAL_TYPE_CODE] nvarchar(20) NULL, 
	[ACQ_FILE_LGL_SRVY_TYPE_CODE] nvarchar(20) NULL, 
	[ACQ_FILE_EXPROP_RISK_TYPE_CODE] nvarchar(20) NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQ_FILE_APPRAISAL_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ACQ_FILE_APPRAISAL_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQ_FILE_LGL_SRVY_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ACQ_FILE_LGL_SRVY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQ_FILE_EXPROP_RISK_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ACQ_FILE_EXPROP_RISK_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQ_FILE_ACQ_PROGRESS_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQ_FILE_ACQ_PROGRESS_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQ_FILE_ACQ_PROGRESS_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQ_FILE_PROGESS_TYPE
PRINT N'Create table dbo.PIMS_ACQ_FILE_PROGESS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_ACQ_FILE_PROGESS_TYPE]  ( 
	[ACQ_FILE_PROGESS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [AFRPGT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [AFRPGT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [AFRPGT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [AFRPGT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [AFRPGT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [AFRPGT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AFRPGT_PK] PRIMARY KEY CLUSTERED([ACQ_FILE_PROGESS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the acquisition file progress type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_PROGESS_TYPE', 
	@level2type = N'Column', @level2name = N'ACQ_FILE_PROGESS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquisition file progress type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_PROGESS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_PROGESS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_PROGESS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_PROGESS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_PROGESS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_PROGESS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_PROGESS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_PROGESS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquisition file progress type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_PROGESS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQ_FILE_ACQ_PROGRESS
PRINT N'Create table dbo.PIMS_ACQ_FILE_ACQ_PROGRESS'
GO
CREATE TABLE [dbo].[PIMS_ACQ_FILE_ACQ_PROGRESS]  ( 
	[ACQ_FILE_ACQ_PROGRESS_ID]      	bigint NOT NULL CONSTRAINT [AQFFLP_ACQ_FILE_ACQ_PROGRESS_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQ_FILE_ACQ_PROGRESS_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NULL,
	[ACQ_FILE_PROGESS_TYPE_CODE]    	nvarchar(20) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [AQFFLP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [AQFFLP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [AQFFLP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [AQFFLP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [AQFFLP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [AQFFLP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [AQFFLP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [AQFFLP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [AQFFLP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [AQFFLP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [AQFFLP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AQFFLP_PK] PRIMARY KEY CLUSTERED([ACQ_FILE_ACQ_PROGRESS_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_PROGRESS', 
	@level2type = N'Column', @level2name = N'ACQ_FILE_ACQ_PROGRESS_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQUISITION_FILE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_PROGRESS', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQUISITION_FILE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_PROGRESS', 
	@level2type = N'Column', @level2name = N'ACQ_FILE_PROGESS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_PROGRESS', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_PROGRESS', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_PROGRESS', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_PROGRESS', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_PROGRESS', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_PROGRESS', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_PROGRESS', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_PROGRESS', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_PROGRESS', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_PROGRESS', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_PROGRESS', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_PROGRESS', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_PROGRESS', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQ_FILE_ACQ_FL_TAKE_TYPE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQ_FILE_ACQ_FL_TAKE_TYPE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQ_FILE_ACQ_FL_TAKE_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQ_FILE_TAKE_TYPE
PRINT N'Create table dbo.PIMS_ACQ_FILE_TAKE_TYPE'
GO
CREATE TABLE [dbo].[PIMS_ACQ_FILE_TAKE_TYPE]  ( 
	[ACQ_FILE_TAKE_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [AFTKTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [AFTKTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [AFTKTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [AFTKTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [AFTKTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [AFTKTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AFTKTY_PK] PRIMARY KEY CLUSTERED([ACQ_FILE_TAKE_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the acquisition file take type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'ACQ_FILE_TAKE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquisition file take type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquisition file take type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_TAKE_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP
PRINT N'Create table dbo.PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP'
GO
CREATE TABLE [dbo].[PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP]  ( 
	[ACQ_FILE_ACQ_FL_TAKE_TYPE_ID]  	bigint NOT NULL CONSTRAINT [AQFATT_ACQ_FILE_ACQ_FL_TAKE_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQ_FILE_ACQ_FL_TAKE_TYPE_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NULL,
	[ACQ_FILE_TAKE_TYPE_CODE]       	nvarchar(20) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [AQFATT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [AQFATT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [AQFATT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [AQFATT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [AQFATT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [AQFATT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [AQFATT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [AQFATT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [AQFATT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [AQFATT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [AQFATT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AQFATT_PK] PRIMARY KEY CLUSTERED([ACQ_FILE_ACQ_FL_TAKE_TYPE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP', 
	@level2type = N'Column', @level2name = N'ACQ_FILE_ACQ_FL_TAKE_TYPE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQUISITION_FILE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQ_FILE_TAKE_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP', 
	@level2type = N'Column', @level2name = N'ACQ_FILE_TAKE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT
PRINT N'Alter table dbo.PIMS_DOCUMENT'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT] DROP CONSTRAINT IF EXISTS [DOCMNT_MAYAN_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_QUEUE
PRINT N'Alter table dbo.PIMS_DOCUMENT_QUEUE'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	DROP COLUMN IF EXISTS [PROPERTY_ACTIVITY_DOCUMENT_ID], [ACQUISITION_FILE_DOCUMENT_ID], [RESEARCH_FILE_DOCUMENT_ID], [LEASE_DOCUMENT_ID], [DISPOSITION_FILE_DOCUMENT_ID], [FILE_NAME]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST]
	ADD [ACQ_FILE_APPRAISAL_TYPE_CODE] nvarchar(20) NULL, 
	[ACQ_FILE_LGL_SRVY_TYPE_CODE] nvarchar(20) NULL, 
	[ACQ_FILE_EXPROP_RISK_TYPE_CODE] nvarchar(20) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQ_FILE_ACQ_PROGRESS_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQ_FILE_ACQ_PROGRESS_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQ_FILE_ACQ_PROGRESS_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQ_FILE_ACQ_PROGRESS_HIST
PRINT N'Create table dbo.PIMS_ACQ_FILE_ACQ_PROGRESS_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACQ_FILE_ACQ_PROGRESS_HIST]  ( 
	[_ACQ_FILE_ACQ_PROGRESS_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQ_FILE_ACQ_PROGRESS_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ACQ_FILE_ACQ_PROGRESS_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NULL,
	[ACQ_FILE_PROGESS_TYPE_CODE]    	nvarchar(20) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_AQFFLP_H_PK] PRIMARY KEY CLUSTERED([_ACQ_FILE_ACQ_PROGRESS_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_AQFFLP_H_UK
PRINT N'Create unique constraint dbo.PIMS_AQFFLP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQ_FILE_ACQ_PROGRESS_HIST]
	ADD CONSTRAINT [PIMS_AQFFLP_H_UK]
	UNIQUE ([_ACQ_FILE_ACQ_PROGRESS_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_QUEUE_HIST
PRINT N'Alter table dbo.PIMS_DOCUMENT_QUEUE_HIST'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE_HIST]
	DROP COLUMN IF EXISTS [PROPERTY_ACTIVITY_DOCUMENT_ID], [ACQUISITION_FILE_DOCUMENT_ID], [RESEARCH_FILE_DOCUMENT_ID], [LEASE_DOCUMENT_ID], [DISPOSITION_FILE_DOCUMENT_ID], [FILE_NAME]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP_HIST
PRINT N'Create table dbo.PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP_HIST]  ( 
	[_ACQ_FILE_ACQ_FL_TAKE_TYP_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]              	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                    	datetime NULL,
	[ACQ_FILE_ACQ_FL_TAKE_TYPE_ID]     	bigint NOT NULL,
	[ACQUISITION_FILE_ID]              	bigint NULL,
	[ACQ_FILE_TAKE_TYPE_CODE]          	nvarchar(20) NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_AQFATT_H_PK] PRIMARY KEY CLUSTERED([_ACQ_FILE_ACQ_FL_TAKE_TYP_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_AQFATT_H_UK
PRINT N'Create unique constraint dbo.PIMS_AQFATT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP_HIST]
	ADD CONSTRAINT [PIMS_AQFATT_H_UK]
	UNIQUE ([_ACQ_FILE_ACQ_FL_TAKE_TYP_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY
PRINT N'Alter table dbo.PIMS_PROPERTY'
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the property type table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PROPERTY_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT_PERSON
PRINT N'Alter table dbo.PIMS_PROJECT_PERSON'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PERSON] ALTER COLUMN [PROJECT_PERSON_ROLE_TYPE_CODE] nvarchar(20) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT_PERSON_HIST
PRINT N'Alter table dbo.PIMS_PROJECT_PERSON_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PERSON_HIST] ALTER COLUMN [PROJECT_PERSON_ROLE_TYPE_CODE] nvarchar(20) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_CHKLST_SECTION_TYPE
PRINT N'Alter table dbo.PIMS_ACQ_CHKLST_SECTION_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQNFL_ACQ_FILE_LGL_SRVY_TYPE_CODE_IDX
PRINT N'Create index dbo.ACQNFL_ACQ_FILE_LGL_SRVY_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQNFL_ACQ_FILE_LGL_SRVY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([ACQ_FILE_LGL_SRVY_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AQFFLP_ACQ_FILE_PROGESS_TYPE_CODE_IDX
PRINT N'Create index dbo.AQFFLP_ACQ_FILE_PROGESS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [AQFFLP_ACQ_FILE_PROGESS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQ_FILE_ACQ_PROGRESS]([ACQ_FILE_PROGESS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQNFL_ACQ_FILE_APPRAISAL_TYPE_CODE_IDX
PRINT N'Create index dbo.ACQNFL_ACQ_FILE_APPRAISAL_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQNFL_ACQ_FILE_APPRAISAL_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([ACQ_FILE_APPRAISAL_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AQFATT_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.AQFATT_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AQFATT_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP]([ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AQFFLP_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.AQFFLP_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AQFFLP_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQ_FILE_ACQ_PROGRESS]([ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AQFATT_ACQ_FILE_TAKE_TYPE_CODE_IDX
PRINT N'Create index dbo.AQFATT_ACQ_FILE_TAKE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [AQFATT_ACQ_FILE_TAKE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP]([ACQ_FILE_TAKE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQNFL_ACQ_FILE_EXPROP_RISK_TYPE_CODE_IDX
PRINT N'Create index dbo.ACQNFL_ACQ_FILE_EXPROP_RISK_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQNFL_ACQ_FILE_EXPROP_RISK_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([ACQ_FILE_EXPROP_RISK_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQFATT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AQFATT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQFATT_I_S_U_TR] ON PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_FILE_ACQ_FL_TAKE_TYPE_ID = deleted.ACQ_FILE_ACQ_FL_TAKE_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP
    set "ACQ_FILE_ACQ_FL_TAKE_TYPE_ID" = inserted."ACQ_FILE_ACQ_FL_TAKE_TYPE_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQ_FILE_TAKE_TYPE_CODE" = inserted."ACQ_FILE_TAKE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP
    inner join inserted
    on (PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP.ACQ_FILE_ACQ_FL_TAKE_TYPE_ID = inserted.ACQ_FILE_ACQ_FL_TAKE_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_I_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE ("ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "SUBFILE_INTEREST_TYPE_CODE",
      "ACQ_FILE_APPRAISAL_TYPE_CODE",
      "ACQ_FILE_LGL_SRVY_TYPE_CODE",
      "ACQ_FILE_EXPROP_RISK_TYPE_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NO_SUFFIX",
      "LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "OTHER_SUBFILE_INTEREST_TYPE",
      "EST_COMPLETION_DT",
      "POSSESSION_DT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "SUBFILE_INTEREST_TYPE_CODE",
      "ACQ_FILE_APPRAISAL_TYPE_CODE",
      "ACQ_FILE_LGL_SRVY_TYPE_CODE",
      "ACQ_FILE_EXPROP_RISK_TYPE_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NO_SUFFIX",
      "LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "OTHER_SUBFILE_INTEREST_TYPE",
      "EST_COMPLETION_DT",
      "POSSESSION_DT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AFAPPRT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AFAPPRT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AFAPPRT_I_S_I_TR] ON PIMS_ACQ_FILE_APPRAISAL_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_FILE_APPRAISAL_TYPE ("ACQ_FILE_APPRAISAL_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_FILE_APPRAISAL_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AFLSVT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AFLSVT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AFLSVT_I_S_I_TR] ON PIMS_ACQ_FILE_LGL_SRVY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_FILE_LGL_SRVY_TYPE ("ACQ_FILE_LGL_SRVY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_FILE_LGL_SRVY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AFRPGT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AFRPGT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AFRPGT_I_S_I_TR] ON PIMS_ACQ_FILE_PROGESS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_FILE_PROGESS_TYPE ("ACQ_FILE_PROGESS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_FILE_PROGESS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AFEXRT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AFEXRT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AFEXRT_I_S_U_TR] ON PIMS_ACQ_FILE_EXPROP_RISK_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_FILE_EXPROP_RISK_TYPE_CODE = deleted.ACQ_FILE_EXPROP_RISK_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_FILE_EXPROP_RISK_TYPE
    set "ACQ_FILE_EXPROP_RISK_TYPE_CODE" = inserted."ACQ_FILE_EXPROP_RISK_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_FILE_EXPROP_RISK_TYPE
    inner join inserted
    on (PIMS_ACQ_FILE_EXPROP_RISK_TYPE.ACQ_FILE_EXPROP_RISK_TYPE_CODE = inserted.ACQ_FILE_EXPROP_RISK_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQFFLP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AQFFLP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQFFLP_I_S_U_TR] ON PIMS_ACQ_FILE_ACQ_PROGRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_FILE_ACQ_PROGRESS_ID = deleted.ACQ_FILE_ACQ_PROGRESS_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_FILE_ACQ_PROGRESS
    set "ACQ_FILE_ACQ_PROGRESS_ID" = inserted."ACQ_FILE_ACQ_PROGRESS_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQ_FILE_PROGESS_TYPE_CODE" = inserted."ACQ_FILE_PROGESS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_FILE_ACQ_PROGRESS
    inner join inserted
    on (PIMS_ACQ_FILE_ACQ_PROGRESS.ACQ_FILE_ACQ_PROGRESS_ID = inserted.ACQ_FILE_ACQ_PROGRESS_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCQUE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DOCQUE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCQUE_I_S_I_TR] ON PIMS_DOCUMENT_QUEUE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_QUEUE ("DOCUMENT_QUEUE_ID",
      "DOCUMENT_ID",
      "DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DATA_SOURCE_TYPE_CODE",
      "DOCUMENT_EXTERNAL_ID",
      "DOCUMENT_METADATA",
      "DOC_PROCESS_START_DT",
      "DOC_PROCESS_END_DT",
      "DOC_PROCESS_RETRIES",
      "MAYAN_ERROR",
      "DOCUMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DOCUMENT_QUEUE_ID",
      "DOCUMENT_ID",
      "DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DATA_SOURCE_TYPE_CODE",
      "DOCUMENT_EXTERNAL_ID",
      "DOCUMENT_METADATA",
      "DOC_PROCESS_START_DT",
      "DOC_PROCESS_END_DT",
      "DOC_PROCESS_RETRIES",
      "MAYAN_ERROR",
      "DOCUMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_ID in (select ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_HIST ([ACQUISITION_FILE_ID], [PRNT_ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [SUBFILE_INTEREST_TYPE_CODE], [ACQ_FILE_APPRAISAL_TYPE_CODE], [ACQ_FILE_LGL_SRVY_TYPE_CODE], [ACQ_FILE_EXPROP_RISK_TYPE_CODE], [FILE_NAME], [FILE_NO], [FILE_NO_SUFFIX], [LEGACY_FILE_NUMBER], [LEGACY_STAKEHOLDER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [PAIMS_ACQUISITION_FILE_ID], [TOTAL_ALLOWABLE_COMPENSATION], [OTHER_SUBFILE_INTEREST_TYPE], [EST_COMPLETION_DT], [POSSESSION_DT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_ID], [PRNT_ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [SUBFILE_INTEREST_TYPE_CODE], [ACQ_FILE_APPRAISAL_TYPE_CODE], [ACQ_FILE_LGL_SRVY_TYPE_CODE], [ACQ_FILE_EXPROP_RISK_TYPE_CODE], [FILE_NAME], [FILE_NO], [FILE_NO_SUFFIX], [LEGACY_FILE_NUMBER], [LEGACY_STAKEHOLDER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [PAIMS_ACQUISITION_FILE_ID], [TOTAL_ALLOWABLE_COMPENSATION], [OTHER_SUBFILE_INTEREST_TYPE], [EST_COMPLETION_DT], [POSSESSION_DT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_H_ID_SEQ]) as [_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AFTKTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AFTKTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AFTKTY_I_S_I_TR] ON PIMS_ACQ_FILE_TAKE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_FILE_TAKE_TYPE ("ACQ_FILE_TAKE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_FILE_TAKE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQFFLP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_AQFFLP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQFFLP_A_S_IUD_TR] ON PIMS_ACQ_FILE_ACQ_PROGRESS FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQ_FILE_ACQ_PROGRESS_HIST set END_DATE_HIST = @curr_date where ACQ_FILE_ACQ_PROGRESS_ID in (select ACQ_FILE_ACQ_PROGRESS_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQ_FILE_ACQ_PROGRESS_HIST ([ACQ_FILE_ACQ_PROGRESS_ID], [ACQUISITION_FILE_ID], [ACQ_FILE_PROGESS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQ_FILE_ACQ_PROGRESS_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQ_FILE_ACQ_PROGRESS_ID], [ACQUISITION_FILE_ID], [ACQ_FILE_PROGESS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQ_FILE_ACQ_PROGRESS_H_ID_SEQ]) as [_ACQ_FILE_ACQ_PROGRESS_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AFTKTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AFTKTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AFTKTY_I_S_U_TR] ON PIMS_ACQ_FILE_TAKE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_FILE_TAKE_TYPE_CODE = deleted.ACQ_FILE_TAKE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_FILE_TAKE_TYPE
    set "ACQ_FILE_TAKE_TYPE_CODE" = inserted."ACQ_FILE_TAKE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_FILE_TAKE_TYPE
    inner join inserted
    on (PIMS_ACQ_FILE_TAKE_TYPE.ACQ_FILE_TAKE_TYPE_CODE = inserted.ACQ_FILE_TAKE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQFATT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AQFATT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQFATT_I_S_I_TR] ON PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP ("ACQ_FILE_ACQ_FL_TAKE_TYPE_ID",
      "ACQUISITION_FILE_ID",
      "ACQ_FILE_TAKE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQ_FILE_ACQ_FL_TAKE_TYPE_ID",
      "ACQUISITION_FILE_ID",
      "ACQ_FILE_TAKE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCQUE_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DOCQUE_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCQUE_A_S_IUD_TR] ON PIMS_DOCUMENT_QUEUE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DOCUMENT_QUEUE_HIST set END_DATE_HIST = @curr_date where DOCUMENT_QUEUE_ID in (select DOCUMENT_QUEUE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DOCUMENT_QUEUE_HIST ([DOCUMENT_QUEUE_ID], [DOCUMENT_ID], [DOCUMENT_QUEUE_STATUS_TYPE_CODE], [DATA_SOURCE_TYPE_CODE], [DOCUMENT_EXTERNAL_ID], [DOCUMENT_METADATA], [DOC_PROCESS_START_DT], [DOC_PROCESS_END_DT], [DOC_PROCESS_RETRIES], [MAYAN_ERROR], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DOCUMENT_QUEUE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DOCUMENT_QUEUE_ID], [DOCUMENT_ID], [DOCUMENT_QUEUE_STATUS_TYPE_CODE], [DATA_SOURCE_TYPE_CODE], [DOCUMENT_EXTERNAL_ID], [DOCUMENT_METADATA], [DOC_PROCESS_START_DT], [DOC_PROCESS_END_DT], [DOC_PROCESS_RETRIES], [MAYAN_ERROR], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DOCUMENT_QUEUE_H_ID_SEQ]) as [_DOCUMENT_QUEUE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AFEXRT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AFEXRT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AFEXRT_I_S_I_TR] ON PIMS_ACQ_FILE_EXPROP_RISK_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_FILE_EXPROP_RISK_TYPE ("ACQ_FILE_EXPROP_RISK_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_FILE_EXPROP_RISK_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AFRPGT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AFRPGT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AFRPGT_I_S_U_TR] ON PIMS_ACQ_FILE_PROGESS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_FILE_PROGESS_TYPE_CODE = deleted.ACQ_FILE_PROGESS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_FILE_PROGESS_TYPE
    set "ACQ_FILE_PROGESS_TYPE_CODE" = inserted."ACQ_FILE_PROGESS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_FILE_PROGESS_TYPE
    inner join inserted
    on (PIMS_ACQ_FILE_PROGESS_TYPE.ACQ_FILE_PROGESS_TYPE_CODE = inserted.ACQ_FILE_PROGESS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_U_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_ID = deleted.ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE
    set "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID" = inserted."PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "SUBFILE_INTEREST_TYPE_CODE" = inserted."SUBFILE_INTEREST_TYPE_CODE",
      "ACQ_FILE_APPRAISAL_TYPE_CODE" = inserted."ACQ_FILE_APPRAISAL_TYPE_CODE",
      "ACQ_FILE_LGL_SRVY_TYPE_CODE" = inserted."ACQ_FILE_LGL_SRVY_TYPE_CODE",
      "ACQ_FILE_EXPROP_RISK_TYPE_CODE" = inserted."ACQ_FILE_EXPROP_RISK_TYPE_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_NO" = inserted."FILE_NO",
      "FILE_NO_SUFFIX" = inserted."FILE_NO_SUFFIX",
      "LEGACY_FILE_NUMBER" = inserted."LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER" = inserted."LEGACY_STAKEHOLDER",
      "FUNDING_OTHER" = inserted."FUNDING_OTHER",
      "ASSIGNED_DATE" = inserted."ASSIGNED_DATE",
      "DELIVERY_DATE" = inserted."DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID" = inserted."PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION" = inserted."TOTAL_ALLOWABLE_COMPENSATION",
      "OTHER_SUBFILE_INTEREST_TYPE" = inserted."OTHER_SUBFILE_INTEREST_TYPE",
      "EST_COMPLETION_DT" = inserted."EST_COMPLETION_DT",
      "POSSESSION_DT" = inserted."POSSESSION_DT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE
    inner join inserted
    on (PIMS_ACQUISITION_FILE.ACQUISITION_FILE_ID = inserted.ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AFAPPRT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AFAPPRT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AFAPPRT_I_S_U_TR] ON PIMS_ACQ_FILE_APPRAISAL_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_FILE_APPRAISAL_TYPE_CODE = deleted.ACQ_FILE_APPRAISAL_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_FILE_APPRAISAL_TYPE
    set "ACQ_FILE_APPRAISAL_TYPE_CODE" = inserted."ACQ_FILE_APPRAISAL_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_FILE_APPRAISAL_TYPE
    inner join inserted
    on (PIMS_ACQ_FILE_APPRAISAL_TYPE.ACQ_FILE_APPRAISAL_TYPE_CODE = inserted.ACQ_FILE_APPRAISAL_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQFFLP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AQFFLP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQFFLP_I_S_I_TR] ON PIMS_ACQ_FILE_ACQ_PROGRESS INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_FILE_ACQ_PROGRESS ("ACQ_FILE_ACQ_PROGRESS_ID",
      "ACQUISITION_FILE_ID",
      "ACQ_FILE_PROGESS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQ_FILE_ACQ_PROGRESS_ID",
      "ACQUISITION_FILE_ID",
      "ACQ_FILE_PROGESS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AFLSVT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AFLSVT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AFLSVT_I_S_U_TR] ON PIMS_ACQ_FILE_LGL_SRVY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_FILE_LGL_SRVY_TYPE_CODE = deleted.ACQ_FILE_LGL_SRVY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_FILE_LGL_SRVY_TYPE
    set "ACQ_FILE_LGL_SRVY_TYPE_CODE" = inserted."ACQ_FILE_LGL_SRVY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_FILE_LGL_SRVY_TYPE
    inner join inserted
    on (PIMS_ACQ_FILE_LGL_SRVY_TYPE.ACQ_FILE_LGL_SRVY_TYPE_CODE = inserted.ACQ_FILE_LGL_SRVY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCQUE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCQUE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCQUE_I_S_U_TR] ON PIMS_DOCUMENT_QUEUE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_QUEUE_ID = deleted.DOCUMENT_QUEUE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_QUEUE
    set "DOCUMENT_QUEUE_ID" = inserted."DOCUMENT_QUEUE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "DOCUMENT_QUEUE_STATUS_TYPE_CODE" = inserted."DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DATA_SOURCE_TYPE_CODE" = inserted."DATA_SOURCE_TYPE_CODE",
      "DOCUMENT_EXTERNAL_ID" = inserted."DOCUMENT_EXTERNAL_ID",
      "DOCUMENT_METADATA" = inserted."DOCUMENT_METADATA",
      "DOC_PROCESS_START_DT" = inserted."DOC_PROCESS_START_DT",
      "DOC_PROCESS_END_DT" = inserted."DOC_PROCESS_END_DT",
      "DOC_PROCESS_RETRIES" = inserted."DOC_PROCESS_RETRIES",
      "MAYAN_ERROR" = inserted."MAYAN_ERROR",
      "DOCUMENT" = inserted."DOCUMENT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_QUEUE
    inner join inserted
    on (PIMS_DOCUMENT_QUEUE.DOCUMENT_QUEUE_ID = inserted.DOCUMENT_QUEUE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQFATT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_AQFATT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQFATT_A_S_IUD_TR] ON PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP_HIST set END_DATE_HIST = @curr_date where ACQ_FILE_ACQ_FL_TAKE_TYPE_ID in (select ACQ_FILE_ACQ_FL_TAKE_TYPE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP_HIST ([ACQ_FILE_ACQ_FL_TAKE_TYPE_ID], [ACQUISITION_FILE_ID], [ACQ_FILE_TAKE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQ_FILE_ACQ_FL_TAKE_TYP_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQ_FILE_ACQ_FL_TAKE_TYPE_ID], [ACQUISITION_FILE_ID], [ACQ_FILE_TAKE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP_H_ID_SEQ]) as [_ACQ_FILE_ACQ_FL_TAKE_TYP_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_AFAPPRT_PIM_ACQNFL_FK
PRINT N'Create foreign key constraint dbo.PIM_AFAPPRT_PIM_ACQNFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_AFAPPRT_PIM_ACQNFL_FK]
	FOREIGN KEY([ACQ_FILE_APPRAISAL_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQ_FILE_APPRAISAL_TYPE]([ACQ_FILE_APPRAISAL_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_AFLSVT_PIM_ACQNFL_FK
PRINT N'Create foreign key constraint dbo.PIM_AFLSVT_PIM_ACQNFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_AFLSVT_PIM_ACQNFL_FK]
	FOREIGN KEY([ACQ_FILE_LGL_SRVY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQ_FILE_LGL_SRVY_TYPE]([ACQ_FILE_LGL_SRVY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_AFEXRT_PIM_ACQNFL_FK
PRINT N'Create foreign key constraint dbo.PIM_AFEXRT_PIM_ACQNFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_AFEXRT_PIM_ACQNFL_FK]
	FOREIGN KEY([ACQ_FILE_EXPROP_RISK_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQ_FILE_EXPROP_RISK_TYPE]([ACQ_FILE_EXPROP_RISK_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_AFRPGT_PIM_AQFFLP_FK
PRINT N'Create foreign key constraint dbo.PIM_AFRPGT_PIM_AQFFLP_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQ_FILE_ACQ_PROGRESS]
	ADD CONSTRAINT [PIM_AFRPGT_PIM_AQFFLP_FK]
	FOREIGN KEY([ACQ_FILE_PROGESS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQ_FILE_PROGESS_TYPE]([ACQ_FILE_PROGESS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_AQFFLP_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_AQFFLP_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQ_FILE_ACQ_PROGRESS]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_AQFFLP_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_AFTKTY_PIM_AQFATT_FK
PRINT N'Create foreign key constraint dbo.PIM_AFTKTY_PIM_AQFATT_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP]
	ADD CONSTRAINT [PIM_AFTKTY_PIM_AQFATT_FK]
	FOREIGN KEY([ACQ_FILE_TAKE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQ_FILE_TAKE_TYPE]([ACQ_FILE_TAKE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_AQFATT_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_AQFATT_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQ_FILE_ACQ_FL_TAKE_TYP]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_AQFATT_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
