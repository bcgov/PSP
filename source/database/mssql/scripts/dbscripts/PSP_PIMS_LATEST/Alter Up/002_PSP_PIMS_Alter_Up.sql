-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Tue May 30 16:14:09 PDT 2023
-- Execute this script on:
-- 		PIMS_PSP_S54_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PIMS_PSP_S55_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQPAY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQPAY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQPAY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQPCHQ_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_AQPCHQ_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQPCHQ_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQPCHQ_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_AQPCHQ_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQPCHQ_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQPCHQ_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AQPCHQ_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQPCHQ_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQPAY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQPAY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQPAY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQPAY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQPAY_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQPAY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_INTHLDR_PROP_INTEREST_ID_SEQ
PRINT N'Create sequence dbo.PIMS_INTHLDR_PROP_INTEREST_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_INTHLDR_PROP_INTEREST_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_INTEREST_HOLDER_PROPERTY_ID_SEQ
PRINT N'Create sequence dbo.PIMS_INTEREST_HOLDER_PROPERTY_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_INTEREST_HOLDER_PROPERTY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_INTEREST_HOLDER_ID_SEQ
PRINT N'Create sequence dbo.PIMS_INTEREST_HOLDER_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_INTEREST_HOLDER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_INTEREST_HOLDER
PRINT N'Create table dbo.PIMS_INTEREST_HOLDER'
GO
CREATE TABLE [dbo].[PIMS_INTEREST_HOLDER]  ( 
	[INTEREST_HOLDER_ID]            	bigint NOT NULL CONSTRAINT [INTHLD_INTEREST_HOLDER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_INTEREST_HOLDER_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [INTHLD_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [INTHLD_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [INTHLD_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [INTHLD_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [INTHLD_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [INTHLD_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [INTHLD_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [INTHLD_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [INTHLD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [INTHLD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [INTHLD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [INTHLD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [INTHLD_PK] PRIMARY KEY CLUSTERED([INTEREST_HOLDER_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Documents the interest holders that have an stake in the acquisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.INTHLD_PERSON_ORGANIZATION_TUC
PRINT N'Create unique constraint dbo.INTHLD_PERSON_ORGANIZATION_TUC'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	ADD CONSTRAINT [INTHLD_PERSON_ORGANIZATION_TUC]
	UNIQUE ([PERSON_ID], [ORGANIZATION_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.INTHLD_PERSON_ORGANIZATION_TCC
PRINT N'Create check constraint dbo.INTHLD_PERSON_ORGANIZATION_TCC'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	ADD CONSTRAINT [INTHLD_PERSON_ORGANIZATION_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_INTEREST_HOLDER_INTEREST_TYPE
PRINT N'Create table dbo.PIMS_INTEREST_HOLDER_INTEREST_TYPE'
GO
CREATE TABLE [dbo].[PIMS_INTEREST_HOLDER_INTEREST_TYPE]  ( 
	[INTEREST_HOLDER_INTEREST_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                       	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                     	int NULL,
	[IS_DISABLED]                       	bit NULL CONSTRAINT [IHINTT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL CONSTRAINT [IHINTT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [IHINTT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [IHINTT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [IHINTT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [IHINTT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [IHINTT_PK] PRIMARY KEY CLUSTERED([INTEREST_HOLDER_INTEREST_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the interest holder interest type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'INTEREST_HOLDER_INTEREST_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the interest holder interest type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Tables that contains the codes and associated descriptions of the interest holder interest types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_INTEREST_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_INTHLDR_PROP_INTEREST
PRINT N'Create table dbo.PIMS_INTHLDR_PROP_INTEREST'
GO
CREATE TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]  ( 
	[PIMS_INTHLDR_PROP_INTEREST_ID]     	bigint NOT NULL CONSTRAINT [IHPRIN_PIMS_INTHLDR_PROP_INTEREST_ID_DEF]  DEFAULT ('NEXT VALUE FOR [PIMS_INTHLDR_PROP_INTEREST_ID_SEQ]'),
	[INTEREST_HOLDER_ID]                	bigint NOT NULL,
	[PROPERTY_ACQUISITION_FILE_ID]      	bigint NULL,
	[INTEREST_HOLDER_INTEREST_TYPE_CODE]	nvarchar(20) NOT NULL,
	[IS_DISABLED]                       	bit NULL CONSTRAINT [IHPRIN_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL CONSTRAINT [IHPRIN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [IHPRIN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [IHPRIN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL CONSTRAINT [IHPRIN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [IHPRIN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [IHPRIN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL CONSTRAINT [IHPRIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [IHPRIN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [IHPRIN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [IHPRIN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [IHPRIN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [IHPRIN_PK] PRIMARY KEY CLUSTERED([PIMS_INTHLDR_PROP_INTEREST_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTHLDR_PROP_INTEREST', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_OWNER_REPRESENTATIVE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_OWNER_REPRESENTATIVE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_OWNER_REPRESENTATIVE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 20147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_OWNER_REP
PRINT N'Create table dbo.PIMS_ACQUISITION_OWNER_REP'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP]  ( 
	[OWNER_REPRESENTATIVE_ID]       	bigint NOT NULL CONSTRAINT [AQOWRP_OWNER_REPRESENTATIVE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_OWNER_REPRESENTATIVE_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [AQOWRP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [AQOWRP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [AQOWRP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [AQOWRP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [AQOWRP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [AQOWRP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [AQOWRP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [AQOWRP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [AQOWRP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [AQOWRP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [AQOWRP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [AQOWRP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AQOWRP_PK] PRIMARY KEY CLUSTERED([OWNER_REPRESENTATIVE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Additional comment concerning this owener representative.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER_REP', 
	@level2type = N'Column', @level2name = N'COMMENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER_REP', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table describing the owners'' representative that is assigned to the acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER_REP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.AQOWRP_ACQUISITION_FILE_PERSON_TUC
PRINT N'Create unique constraint dbo.AQOWRP_ACQUISITION_FILE_PERSON_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP]
	ADD CONSTRAINT [AQOWRP_ACQUISITION_FILE_PERSON_TUC]
	UNIQUE ([ACQUISITION_FILE_ID], [PERSON_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_PAYEE
PRINT N'Alter table dbo.PIMS_ACQUISITION_PAYEE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE] ALTER COLUMN [ACQUISITION_OWNER_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	ADD [INTEREST_HOLDER_ID] bigint NULL, 
	[OWNER_REPRESENTATIVE_ID] bigint NULL, 
	[OWNER_SOLICITOR_ID] bigint NULL, 
	[ACQUISITION_FILE_PERSON_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.ACQPAY_COMP_REQ_PAYEE_TUC
PRINT N'Create unique constraint dbo.ACQPAY_COMP_REQ_PAYEE_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	ADD CONSTRAINT [ACQPAY_COMP_REQ_PAYEE_TUC]
	UNIQUE ([IS_DISABLED], [ACQUISITION_FILE_PERSON_ID], [OWNER_SOLICITOR_ID], [OWNER_REPRESENTATIVE_ID], [INTEREST_HOLDER_ID], [ACQUISITION_OWNER_ID], [COMPENSATION_REQUISITION_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.ACQPAY_COMP_REQ_PAYEE_TCC
PRINT N'Create check constraint dbo.ACQPAY_COMP_REQ_PAYEE_TCC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_PAYEE_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_PAYEE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE_HIST] ALTER COLUMN [ACQUISITION_OWNER_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE_HIST]
	ADD [INTEREST_HOLDER_ID] bigint NULL, 
	[OWNER_REPRESENTATIVE_ID] bigint NULL, 
	[OWNER_SOLICITOR_ID] bigint NULL, 
	[ACQUISITION_FILE_PERSON_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_OWNER_REP_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_OWNER_REP_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_OWNER_REP_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_OWNER_REP_HIST
PRINT N'Create table dbo.PIMS_ACQUISITION_OWNER_REP_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST]  ( 
	[_ACQUISITION_OWNER_REP_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_OWNER_REP_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[OWNER_REPRESENTATIVE_ID]       	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_AQOWRP_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_OWNER_REP_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_AQOWRP_H_UK
PRINT N'Create unique constraint dbo.PIMS_AQOWRP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST]
	ADD CONSTRAINT [PIMS_AQOWRP_H_UK]
	UNIQUE ([_ACQUISITION_OWNER_REP_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_PAYEE_CHEQUE
PRINT N'Alter table dbo.PIMS_ACQ_PAYEE_CHEQUE'
GO
ALTER TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE]
	DROP CONSTRAINT IF EXISTS [AQPCHQ_IS_GST_REQUIRED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE]
	ADD [GST_NUMBER] nvarchar(50) NULL, 
	[IS_PAYMENT_IN_TRUST] bit NULL CONSTRAINT [AQPCHQ_IS_PAYMENT_IN_TRUST_DEF] DEFAULT (CONVERT([bit],(0)))
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST number of the Payee' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PAYEE_CHEQUE', 
	@level2type = N'Column', @level2name = N'GST_NUMBER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE]
	DROP COLUMN IF EXISTS [IS_GST_REQUIRED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_PAYEE_CHEQUE_HIST
PRINT N'Alter table dbo.PIMS_ACQ_PAYEE_CHEQUE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE_HIST]
	ADD [GST_NUMBER] nvarchar(50) NULL, 
	[IS_PAYMENT_IN_TRUST] bit NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE_HIST]
	DROP COLUMN IF EXISTS [IS_GST_REQUIRED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_INTEREST_HOLDER_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_INTEREST_HOLDER_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_INTEREST_HOLDER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_INTEREST_HOLDER_HIST
PRINT N'Create table dbo.PIMS_INTEREST_HOLDER_HIST'
GO
CREATE TABLE [dbo].[PIMS_INTEREST_HOLDER_HIST]  ( 
	[_INTEREST_HOLDER_HIST_ID]      	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_INTEREST_HOLDER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[INTEREST_HOLDER_ID]            	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_INTHLD_H_PK] PRIMARY KEY CLUSTERED([_INTEREST_HOLDER_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_INTHLD_H_UK
PRINT N'Create unique constraint dbo.PIMS_INTHLD_H_UK'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER_HIST]
	ADD CONSTRAINT [PIMS_INTHLD_H_UK]
	UNIQUE ([_INTEREST_HOLDER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_INTHLDR_PROP_INTEREST_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_INTHLDR_PROP_INTEREST_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_INTHLDR_PROP_INTEREST_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_INTHLDR_PROP_INTEREST_HIST
PRINT N'Create table dbo.PIMS_INTHLDR_PROP_INTEREST_HIST'
GO
CREATE TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST_HIST]  ( 
	[_INTHLDR_PROP_INTEREST_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_INTHLDR_PROP_INTEREST_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[PIMS_INTHLDR_PROP_INTEREST_ID]     	bigint NOT NULL,
	[INTEREST_HOLDER_ID]                	bigint NOT NULL,
	[PROPERTY_ACQUISITION_FILE_ID]      	bigint NULL,
	[INTEREST_HOLDER_INTEREST_TYPE_CODE]	nvarchar(20) NOT NULL,
	[IS_DISABLED]                       	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_IHPRIN_H_PK] PRIMARY KEY CLUSTERED([_INTHLDR_PROP_INTEREST_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_IHPRIN_H_UK
PRINT N'Create unique constraint dbo.PIMS_IHPRIN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST_HIST]
	ADD CONSTRAINT [PIMS_IHPRIN_H_UK]
	UNIQUE ([_INTHLDR_PROP_INTEREST_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_CHKLST_SECTION_TYPE
PRINT N'Alter table dbo.PIMS_ACQ_CHKLST_SECTION_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ACQ_CHKLST_SECTION_TYPE] ADD CONSTRAINT [AQCSCT_EFFECTIVE_DATE_DEF] DEFAULT (getutcdate()) FOR [EFFECTIVE_DATE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_CHKLST_ITEM_TYPE
PRINT N'Alter table dbo.PIMS_ACQ_CHKLST_ITEM_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ACQ_CHKLST_ITEM_TYPE] ADD CONSTRAINT [ACQCIT_EFFECTIVE_DATE_DEF] DEFAULT (getutcdate()) FOR [EFFECTIVE_DATE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.IHPRIN_INTEREST_HOLDER_ID_IDX
PRINT N'Create index dbo.IHPRIN_INTEREST_HOLDER_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [IHPRIN_INTEREST_HOLDER_ID_IDX]
	ON [dbo].[PIMS_INTHLDR_PROP_INTEREST]([INTEREST_HOLDER_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.IHPRIN_PROPERTY_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.IHPRIN_PROPERTY_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [IHPRIN_PROPERTY_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_INTHLDR_PROP_INTEREST]([PROPERTY_ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.IHPRIN_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX
PRINT N'Create index dbo.IHPRIN_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [IHPRIN_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX]
	ON [dbo].[PIMS_INTHLDR_PROP_INTEREST]([INTEREST_HOLDER_INTEREST_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AQOWRP_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.AQOWRP_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AQOWRP_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER_REP]([ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPAY_ACQUISITION_FILE_PERSON_ID_IDX
PRINT N'Create index dbo.ACQPAY_ACQUISITION_FILE_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPAY_ACQUISITION_FILE_PERSON_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_PAYEE]([ACQUISITION_FILE_PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AQOWRP_PERSON_ID_IDX
PRINT N'Create index dbo.AQOWRP_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AQOWRP_PERSON_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER_REP]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPAY_OWNER_REPRESENTATIVE_ID_IDX
PRINT N'Create index dbo.ACQPAY_OWNER_REPRESENTATIVE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPAY_OWNER_REPRESENTATIVE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_PAYEE]([OWNER_REPRESENTATIVE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.INTHLD_ORGANIZATION_ID_IDX
PRINT N'Create index dbo.INTHLD_ORGANIZATION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [INTHLD_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_INTEREST_HOLDER]([ORGANIZATION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPAY_INTEREST_HOLDER_ID_IDX
PRINT N'Create index dbo.ACQPAY_INTEREST_HOLDER_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPAY_INTEREST_HOLDER_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_PAYEE]([INTEREST_HOLDER_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.INTHLD_PERSON_ID_IDX
PRINT N'Create index dbo.INTHLD_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [INTHLD_PERSON_ID_IDX]
	ON [dbo].[PIMS_INTEREST_HOLDER]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPAY_OWNER_SOLICITOR_ID_IDX
PRINT N'Create index dbo.ACQPAY_OWNER_SOLICITOR_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPAY_OWNER_SOLICITOR_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_PAYEE]([OWNER_SOLICITOR_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_INTHLD_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_INTHLD_FK'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_INTHLD_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_INTHLD_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_INTHLD_FK'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	ADD CONSTRAINT [PIM_ORG_PIM_INTHLD_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_INTHLD_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_INTHLD_FK'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	ADD CONSTRAINT [PIM_PERSON_PIM_INTHLD_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRACQF_PIM_IHPRIN_FK
PRINT N'Create foreign key constraint dbo.PIM_PRACQF_PIM_IHPRIN_FK'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	ADD CONSTRAINT [PIM_PRACQF_PIM_IHPRIN_FK]
	FOREIGN KEY([PROPERTY_ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]([PROPERTY_ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_IHINTT_PIM_IHPRIN_FK
PRINT N'Create foreign key constraint dbo.PIM_IHINTT_PIM_IHPRIN_FK'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	ADD CONSTRAINT [PIM_IHINTT_PIM_IHPRIN_FK]
	FOREIGN KEY([INTEREST_HOLDER_INTEREST_TYPE_CODE])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER_INTEREST_TYPE]([INTEREST_HOLDER_INTEREST_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_INTHLD_PIM_IHPRIN_FK
PRINT N'Create foreign key constraint dbo.PIM_INTHLD_PIM_IHPRIN_FK'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	ADD CONSTRAINT [PIM_INTHLD_PIM_IHPRIN_FK]
	FOREIGN KEY([INTEREST_HOLDER_ID])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER]([INTEREST_HOLDER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_AQOWRP_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_AQOWRP_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_AQOWRP_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_AQOWRP_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_AQOWRP_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP]
	ADD CONSTRAINT [PIM_PERSON_PIM_AQOWRP_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_AQOWRP_PIM_ACQPAY_FK
PRINT N'Create foreign key constraint dbo.PIM_AQOWRP_PIM_ACQPAY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	ADD CONSTRAINT [PIM_AQOWRP_PIM_ACQPAY_FK]
	FOREIGN KEY([OWNER_REPRESENTATIVE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_OWNER_REP]([OWNER_REPRESENTATIVE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_INTHLD_PIM_ACQPAY_FK
PRINT N'Create foreign key constraint dbo.PIM_INTHLD_PIM_ACQPAY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	ADD CONSTRAINT [PIM_INTHLD_PIM_ACQPAY_FK]
	FOREIGN KEY([INTEREST_HOLDER_ID])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER]([INTEREST_HOLDER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_AQOWSO_PIM_ACQPAY_FK
PRINT N'Create foreign key constraint dbo.PIM_AQOWSO_PIM_ACQPAY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	ADD CONSTRAINT [PIM_AQOWSO_PIM_ACQPAY_FK]
	FOREIGN KEY([OWNER_SOLICITOR_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]([OWNER_SOLICITOR_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQPER_PIM_ACQPAY_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQPER_PIM_ACQPAY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	ADD CONSTRAINT [PIM_ACQPER_PIM_ACQPAY_FK]
	FOREIGN KEY([ACQUISITION_FILE_PERSON_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE_PERSON]([ACQUISITION_FILE_PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_A_S_IUD_TR] ON PIMS_ACQUISITION_PAYEE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_PAYEE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_PAYEE_ID in (select ACQUISITION_PAYEE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_PAYEE_HIST ([ACQUISITION_PAYEE_ID], [COMPENSATION_REQUISITION_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [OWNER_REPRESENTATIVE_ID], [OWNER_SOLICITOR_ID], [ACQUISITION_FILE_PERSON_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_PAYEE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_PAYEE_ID], [COMPENSATION_REQUISITION_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [OWNER_REPRESENTATIVE_ID], [OWNER_SOLICITOR_ID], [ACQUISITION_FILE_PERSON_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_PAYEE_H_ID_SEQ]) as [_ACQUISITION_PAYEE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_IHPRIN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_IHPRIN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_IHPRIN_I_S_U_TR] ON PIMS_INTHLDR_PROP_INTEREST INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PIMS_INTHLDR_PROP_INTEREST_ID = deleted.PIMS_INTHLDR_PROP_INTEREST_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INTHLDR_PROP_INTEREST
    set "PIMS_INTHLDR_PROP_INTEREST_ID" = inserted."PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "INTEREST_HOLDER_INTEREST_TYPE_CODE" = inserted."INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INTHLDR_PROP_INTEREST
    inner join inserted
    on (PIMS_INTHLDR_PROP_INTEREST.PIMS_INTHLDR_PROP_INTEREST_ID = inserted.PIMS_INTHLDR_PROP_INTEREST_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_IHINTT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_IHINTT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_IHINTT_I_S_U_TR] ON PIMS_INTEREST_HOLDER_INTEREST_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.INTEREST_HOLDER_INTEREST_TYPE_CODE = deleted.INTEREST_HOLDER_INTEREST_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INTEREST_HOLDER_INTEREST_TYPE
    set "INTEREST_HOLDER_INTEREST_TYPE_CODE" = inserted."INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INTEREST_HOLDER_INTEREST_TYPE
    inner join inserted
    on (PIMS_INTEREST_HOLDER_INTEREST_TYPE.INTEREST_HOLDER_INTEREST_TYPE_CODE = inserted.INTEREST_HOLDER_INTEREST_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQOWRP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AQOWRP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQOWRP_I_S_U_TR] ON PIMS_ACQUISITION_OWNER_REP INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.OWNER_REPRESENTATIVE_ID = deleted.OWNER_REPRESENTATIVE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_OWNER_REP
    set "OWNER_REPRESENTATIVE_ID" = inserted."OWNER_REPRESENTATIVE_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "COMMENT" = inserted."COMMENT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_OWNER_REP
    inner join inserted
    on (PIMS_ACQUISITION_OWNER_REP.OWNER_REPRESENTATIVE_ID = inserted.OWNER_REPRESENTATIVE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQOWRP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_AQOWRP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQOWRP_A_S_IUD_TR] ON PIMS_ACQUISITION_OWNER_REP FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_OWNER_REP_HIST set END_DATE_HIST = @curr_date where OWNER_REPRESENTATIVE_ID in (select OWNER_REPRESENTATIVE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_OWNER_REP_HIST ([OWNER_REPRESENTATIVE_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_OWNER_REP_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [OWNER_REPRESENTATIVE_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_OWNER_REP_H_ID_SEQ]) as [_ACQUISITION_OWNER_REP_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INTHLD_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_INTHLD_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INTHLD_I_S_I_TR] ON PIMS_INTEREST_HOLDER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INTEREST_HOLDER ("INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_I_S_I_TR] ON PIMS_ACQUISITION_PAYEE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_PAYEE ("ACQUISITION_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "OWNER_REPRESENTATIVE_ID",
      "OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_PERSON_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "OWNER_REPRESENTATIVE_ID",
      "OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_PERSON_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQPCHQ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AQPCHQ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQPCHQ_I_S_U_TR] ON PIMS_ACQ_PAYEE_CHEQUE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_PAYEE_CHEQUE_ID = deleted.ACQ_PAYEE_CHEQUE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_PAYEE_CHEQUE
    set "ACQ_PAYEE_CHEQUE_ID" = inserted."ACQ_PAYEE_CHEQUE_ID",
      "ACQUISITION_PAYEE_ID" = inserted."ACQUISITION_PAYEE_ID",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "TAX_AMT" = inserted."TAX_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "GST_NUMBER" = inserted."GST_NUMBER",
      "IS_PAYMENT_IN_TRUST" = inserted."IS_PAYMENT_IN_TRUST",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_PAYEE_CHEQUE
    inner join inserted
    on (PIMS_ACQ_PAYEE_CHEQUE.ACQ_PAYEE_CHEQUE_ID = inserted.ACQ_PAYEE_CHEQUE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQPCHQ_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_AQPCHQ_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQPCHQ_A_S_IUD_TR] ON PIMS_ACQ_PAYEE_CHEQUE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQ_PAYEE_CHEQUE_HIST set END_DATE_HIST = @curr_date where ACQ_PAYEE_CHEQUE_ID in (select ACQ_PAYEE_CHEQUE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQ_PAYEE_CHEQUE_HIST ([ACQ_PAYEE_CHEQUE_ID], [ACQUISITION_PAYEE_ID], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [GST_NUMBER], [IS_PAYMENT_IN_TRUST], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQ_PAYEE_CHEQUE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQ_PAYEE_CHEQUE_ID], [ACQUISITION_PAYEE_ID], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [GST_NUMBER], [IS_PAYMENT_IN_TRUST], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQ_PAYEE_CHEQUE_H_ID_SEQ]) as [_ACQ_PAYEE_CHEQUE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_IHPRIN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_IHPRIN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_IHPRIN_I_S_I_TR] ON PIMS_INTHLDR_PROP_INTEREST INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INTHLDR_PROP_INTEREST ("PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_IHINTT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_IHINTT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_IHINTT_I_S_I_TR] ON PIMS_INTEREST_HOLDER_INTEREST_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INTEREST_HOLDER_INTEREST_TYPE ("INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INTHLD_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_INTHLD_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INTHLD_A_S_IUD_TR] ON PIMS_INTEREST_HOLDER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_INTEREST_HOLDER_HIST set END_DATE_HIST = @curr_date where INTEREST_HOLDER_ID in (select INTEREST_HOLDER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_INTEREST_HOLDER_HIST ([INTEREST_HOLDER_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _INTEREST_HOLDER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [INTEREST_HOLDER_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_INTEREST_HOLDER_H_ID_SEQ]) as [_INTEREST_HOLDER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQPCHQ_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AQPCHQ_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQPCHQ_I_S_I_TR] ON PIMS_ACQ_PAYEE_CHEQUE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_PAYEE_CHEQUE ("ACQ_PAYEE_CHEQUE_ID",
      "ACQUISITION_PAYEE_ID",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "GST_NUMBER",
      "IS_PAYMENT_IN_TRUST",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQ_PAYEE_CHEQUE_ID",
      "ACQUISITION_PAYEE_ID",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "GST_NUMBER",
      "IS_PAYMENT_IN_TRUST",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQOWRP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AQOWRP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQOWRP_I_S_I_TR] ON PIMS_ACQUISITION_OWNER_REP INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_OWNER_REP ("OWNER_REPRESENTATIVE_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "OWNER_REPRESENTATIVE_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_IHPRIN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_IHPRIN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_IHPRIN_A_S_IUD_TR] ON PIMS_INTHLDR_PROP_INTEREST FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_INTHLDR_PROP_INTEREST_HIST set END_DATE_HIST = @curr_date where PIMS_INTHLDR_PROP_INTEREST_ID in (select PIMS_INTHLDR_PROP_INTEREST_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_INTHLDR_PROP_INTEREST_HIST ([PIMS_INTHLDR_PROP_INTEREST_ID], [INTEREST_HOLDER_ID], [PROPERTY_ACQUISITION_FILE_ID], [INTEREST_HOLDER_INTEREST_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _INTHLDR_PROP_INTEREST_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PIMS_INTHLDR_PROP_INTEREST_ID], [INTEREST_HOLDER_ID], [PROPERTY_ACQUISITION_FILE_ID], [INTEREST_HOLDER_INTEREST_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_INTHLDR_PROP_INTEREST_H_ID_SEQ]) as [_INTHLDR_PROP_INTEREST_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INTHLD_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_INTHLD_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INTHLD_I_S_U_TR] ON PIMS_INTEREST_HOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.INTEREST_HOLDER_ID = deleted.INTEREST_HOLDER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INTEREST_HOLDER
    set "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INTEREST_HOLDER
    inner join inserted
    on (PIMS_INTEREST_HOLDER.INTEREST_HOLDER_ID = inserted.INTEREST_HOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_I_S_U_TR] ON PIMS_ACQUISITION_PAYEE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_PAYEE_ID = deleted.ACQUISITION_PAYEE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_PAYEE
    set "ACQUISITION_PAYEE_ID" = inserted."ACQUISITION_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "OWNER_REPRESENTATIVE_ID" = inserted."OWNER_REPRESENTATIVE_ID",
      "OWNER_SOLICITOR_ID" = inserted."OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_PERSON_ID" = inserted."ACQUISITION_FILE_PERSON_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_PAYEE
    inner join inserted
    on (PIMS_ACQUISITION_PAYEE.ACQUISITION_PAYEE_ID = inserted.ACQUISITION_PAYEE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
