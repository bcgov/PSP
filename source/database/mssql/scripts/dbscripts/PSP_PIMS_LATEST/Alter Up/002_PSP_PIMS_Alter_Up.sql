-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Mon Sep 18 16:15:10 PDT 2023
-- Execute this script on:
-- 		PSP_PIMS_S62.00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S63.00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTINS_PIM_ACTDOC_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTINS_PIM_ACTDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_ACTINS_PIM_ACTDOC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCMNT_PIM_ACTDOC_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCMNT_PIM_ACTDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_DOCMNT_PIM_ACTDOC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_NOTE_PIM_ACTINN_FK
PRINT N'Drop foreign key constraint dbo.PIM_NOTE_PIM_ACTINN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]
	DROP CONSTRAINT IF EXISTS [PIM_NOTE_PIM_ACTINN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTINS_PIM_ACTINN_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTINS_PIM_ACTINN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTINS_PIM_ACTINN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTTMP_PIM_ACTMDO_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTTMP_PIM_ACTMDO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_ACTTMP_PIM_ACTMDO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCMNT_PIM_ACTMDO_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCMNT_PIM_ACTMDO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_DOCMNT_PIM_ACTMDO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTINS_PIM_RSCHAI_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTINS_PIM_RSCHAI_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTINS_PIM_RSCHAI_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_RESRCH_PIM_RSCHAI_FK
PRINT N'Drop foreign key constraint dbo.PIM_RESRCH_PIM_RSCHAI_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [PIM_RESRCH_PIM_RSCHAI_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTINS_PIM_LSACIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTINS_PIM_LSACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTINS_PIM_LSACIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_LSACIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_LSACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [PIM_LEASE_PIM_LSACIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTINS_PIM_AIPRFL_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTINS_PIM_AIPRFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTINS_PIM_AIPRFL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRSCRC_PIM_AIPRFL_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRSCRC_PIM_AIPRFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]
	DROP CONSTRAINT IF EXISTS [PIM_PRSCRC_PIM_AIPRFL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRACQF_PIM_AIPAFL_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRACQF_PIM_AIPAFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]
	DROP CONSTRAINT IF EXISTS [PIM_PRACQF_PIM_AIPAFL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTINS_PIM_AIPAFL_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTINS_PIM_AIPAFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTINS_PIM_AIPAFL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_ACQAIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_ACQAIN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_ACQAIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTINS_PIM_ACQAIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTINS_PIM_ACQAIN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTINS_PIM_ACQAIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTTMP_PIM_ACTINS_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTTMP_PIM_ACTINS_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTTMP_PIM_ACTINS_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTIST_PIM_ACTINS_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTIST_PIM_ACTINS_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTIST_PIM_ACTINS_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTTTY_PIM_ACTTMP_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTTTY_PIM_ACTTMP_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTTTY_PIM_ACTTMP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRTY_LOCATION_IDX
PRINT N'Drop index dbo.PRPRTY_LOCATION_IDX'
GO
DROP INDEX IF EXISTS [PRPRTY_LOCATION_IDX] ON [dbo].[PIMS_PROPERTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRTY_BOUNDARY_IDX
PRINT N'Drop index dbo.PRPRTY_BOUNDARY_IDX'
GO
DROP INDEX IF EXISTS [PRPRTY_BOUNDARY_IDX] ON [dbo].[PIMS_PROPERTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTTMP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACTTMP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTTMP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_IDX
PRINT N'Drop index dbo.ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE].[ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTDOC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTDOC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTDOC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTDOC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTDOC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTDOC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTDOC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACTDOC_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTDOC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTDOC_DOCUMENT_ID_IDX
PRINT N'Drop index dbo.ACTDOC_DOCUMENT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT].[ACTDOC_DOCUMENT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTDOC_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Drop index dbo.ACTDOC_ACTIVITY_INSTANCE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT].[ACTDOC_ACTIVITY_INSTANCE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTINN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTINN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACTINN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTINN_NOTE_ID_IDX
PRINT N'Drop index dbo.ACTINN_NOTE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE].[ACTINN_NOTE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTINN_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Drop index dbo.ACTINN_ACTIVITY_INSTANCE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE].[ACTINN_ACTIVITY_INSTANCE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTMDO_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTMDO_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTMDO_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTMDO_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTMDO_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTMDO_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RSCHAI_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_RSCHAI_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RSCHAI_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.RSCHAI_RESEARCH_FILE_ID_IDX
PRINT N'Drop index dbo.RSCHAI_RESEARCH_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE].[RSCHAI_RESEARCH_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.RSCHAI_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Drop index dbo.RSCHAI_ACTIVITY_INSTANCE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE].[RSCHAI_ACTIVITY_INSTANCE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTMDO_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACTMDO_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTMDO_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTMDO_DOCUMENT_ID_IDX
PRINT N'Drop index dbo.ACTMDO_DOCUMENT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT].[ACTMDO_DOCUMENT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTMDO_ACTIVITY_TEMPLATE_ID_IDX
PRINT N'Drop index dbo.ACTMDO_ACTIVITY_TEMPLATE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT].[ACTMDO_ACTIVITY_TEMPLATE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RSCHAI_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RSCHAI_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RSCHAI_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RSCHAI_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_RSCHAI_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RSCHAI_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSACIN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSACIN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSACIN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSACIN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSACIN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSACIN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSACIN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LSACIN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSACIN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSACIN_LEASE_ID_IDX
PRINT N'Drop index dbo.LSACIN_LEASE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE].[LSACIN_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSACIN_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Drop index dbo.LSACIN_ACTIVITY_INSTANCE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE].[LSACIN_ACTIVITY_INSTANCE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AIPRFL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AIPRFL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AIPRFL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AIPRFL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_AIPRFL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AIPRFL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AIPRFL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_AIPRFL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AIPRFL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AIPRFL_PROPERTY_RESEARCH_FILE_ID_IDX
PRINT N'Drop index dbo.AIPRFL_PROPERTY_RESEARCH_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE].[AIPRFL_PROPERTY_RESEARCH_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AIPRFL_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Drop index dbo.AIPRFL_ACTIVITY_INSTANCE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE].[AIPRFL_ACTIVITY_INSTANCE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AIPAFL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AIPAFL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AIPAFL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AIPAFL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_AIPAFL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AIPAFL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AIPAFL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_AIPAFL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AIPAFL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AIPAFL_PROPERTY_ACQUISITION_FILE_ID_IDX
PRINT N'Drop index dbo.AIPAFL_PROPERTY_ACQUISITION_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE].[AIPAFL_PROPERTY_ACQUISITION_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AIPAFL_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Drop index dbo.AIPAFL_ACTIVITY_INSTANCE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE].[AIPAFL_ACTIVITY_INSTANCE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQAIN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQAIN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQAIN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQAIN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQAIN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQAIN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQAIN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQAIN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQAIN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQAIN_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Drop index dbo.ACQAIN_ACTIVITY_INSTANCE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE].[ACQAIN_ACTIVITY_INSTANCE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQAIN_ACQUISITION_FILE_ID_IDX
PRINT N'Drop index dbo.ACQAIN_ACQUISITION_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE].[ACQAIN_ACQUISITION_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTINS_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINS_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTINS_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINS_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINS_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACTINS_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINS_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTINS_ACTIVITY_TEMPLATE_ID_IDX
PRINT N'Drop index dbo.ACTINS_ACTIVITY_TEMPLATE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE].[ACTINS_ACTIVITY_TEMPLATE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE].[ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTIST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTIST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTIST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTIST_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTIST_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTIST_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTTMP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTTMP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTTMP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTTMP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTTMP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTTMP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTTTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTTTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTTTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTTTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTTTY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTTTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPREQ_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CMPREQ_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPREQ_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPREQ_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_CMPREQ_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPREQ_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPREQ_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_CMPREQ_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPREQ_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ACTTMP_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ACTTMP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTTMP_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ACTTMP_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ACTTMP_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTTMP_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ACTDOC_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ACTDOC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTDOC_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ACTDOC_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ACTDOC_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTDOC_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.ACTDOC_ACTIVITY_DOCUMENT_TUC
PRINT N'Drop unique constraint dbo.ACTDOC_ACTIVITY_DOCUMENT_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [ACTDOC_ACTIVITY_DOCUMENT_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.ACTDOC_PK
PRINT N'Drop primary key constraint dbo.ACTDOC_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [ACTDOC_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT
PRINT N'Drop table dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ACTINN_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ACTINN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTINN_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ACTINN_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ACTINN_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTINN_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.ACTINN_ACTIVITY_NOTE_TUC
PRINT N'Drop unique constraint dbo.ACTINN_ACTIVITY_NOTE_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]
	DROP CONSTRAINT IF EXISTS [ACTINN_ACTIVITY_NOTE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.ACTINN_PK
PRINT N'Drop primary key constraint dbo.ACTINN_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]
	DROP CONSTRAINT IF EXISTS [ACTINN_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_INSTANCE_NOTE
PRINT N'Drop table dbo.PIMS_ACTIVITY_INSTANCE_NOTE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_RSCHAI_H_UK
PRINT N'Drop unique constraint dbo.PIMS_RSCHAI_H_UK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_RSCHAI_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_RSCHAI_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_RSCHAI_H_PK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_RSCHAI_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.ACTMDO_ACT_TMP_DOC_TUC
PRINT N'Drop unique constraint dbo.ACTMDO_ACT_TMP_DOC_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [ACTMDO_ACT_TMP_DOC_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.ACTMDO_PK
PRINT N'Drop primary key constraint dbo.ACTMDO_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [ACTMDO_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT
PRINT N'Drop table dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.RSCHAI_RSRCH_FILE_ACTIVITY_TUC
PRINT N'Drop unique constraint dbo.RSCHAI_RSRCH_FILE_ACTIVITY_TUC'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [RSCHAI_RSRCH_FILE_ACTIVITY_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.RSCHAI_PK
PRINT N'Drop primary key constraint dbo.RSCHAI_PK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [RSCHAI_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE
PRINT N'Drop table dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ACTMDO_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ACTMDO_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTMDO_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ACTMDO_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ACTMDO_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTMDO_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_LSACIN_H_UK
PRINT N'Drop unique constraint dbo.PIMS_LSACIN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_LSACIN_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_LSACIN_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_LSACIN_H_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_LSACIN_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.LSACIN_LEASE_ACTIVITY_INSTANCE_TUC
PRINT N'Drop unique constraint dbo.LSACIN_LEASE_ACTIVITY_INSTANCE_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [LSACIN_LEASE_ACTIVITY_INSTANCE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSACIN_PK
PRINT N'Drop primary key constraint dbo.LSACIN_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [LSACIN_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_ACTIVITY_INSTANCE
PRINT N'Drop table dbo.PIMS_LEASE_ACTIVITY_INSTANCE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_AIPRFL_H_UK
PRINT N'Drop unique constraint dbo.PIMS_AIPRFL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_AIPRFL_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_AIPRFL_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_AIPRFL_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_AIPRFL_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.AIPRFL_ACT_INST_PROP_RSRCH_FL_TUC
PRINT N'Drop unique constraint dbo.AIPRFL_ACT_INST_PROP_RSRCH_FL_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]
	DROP CONSTRAINT IF EXISTS [AIPRFL_ACT_INST_PROP_RSRCH_FL_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.AIPRFL_PK
PRINT N'Drop primary key constraint dbo.AIPRFL_PK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]
	DROP CONSTRAINT IF EXISTS [AIPRFL_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACT_INST_PROP_RSRCH_FILE
PRINT N'Drop table dbo.PIMS_ACT_INST_PROP_RSRCH_FILE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_AIPAFL_H_UK
PRINT N'Drop unique constraint dbo.PIMS_AIPAFL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_AIPAFL_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_AIPAFL_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_AIPAFL_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_AIPAFL_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.AIPAFL_ACT_INST_PROP_ACQ_FL_TUC
PRINT N'Drop unique constraint dbo.AIPAFL_ACT_INST_PROP_ACQ_FL_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]
	DROP CONSTRAINT IF EXISTS [AIPAFL_ACT_INST_PROP_ACQ_FL_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.AIPAFL_PK
PRINT N'Drop primary key constraint dbo.AIPAFL_PK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]
	DROP CONSTRAINT IF EXISTS [AIPAFL_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACT_INST_PROP_ACQ_FILE
PRINT N'Drop table dbo.PIMS_ACT_INST_PROP_ACQ_FILE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ACQAIN_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ACQAIN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACQAIN_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ACQAIN_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ACQAIN_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACQAIN_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.ACQAIN_ACQ_ACTIVITY_TUC
PRINT N'Drop unique constraint dbo.ACQAIN_ACQ_ACTIVITY_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [ACQAIN_ACQ_ACTIVITY_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.ACQAIN_PK
PRINT N'Drop primary key constraint dbo.ACQAIN_PK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [ACQAIN_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE
PRINT N'Drop table dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ACTINS_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ACTINS_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTINS_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ACTINS_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ACTINS_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTINS_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.ACTINS_PK
PRINT N'Drop primary key constraint dbo.ACTINS_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [ACTINS_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_INSTANCE
PRINT N'Drop table dbo.PIMS_ACTIVITY_INSTANCE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.ACTIST_PK
PRINT N'Drop primary key constraint dbo.ACTIST_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_STATUS_TYPE]
	DROP CONSTRAINT IF EXISTS [ACTIST_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.ACTTMP_PK
PRINT N'Drop primary key constraint dbo.ACTTMP_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE]
	DROP CONSTRAINT IF EXISTS [ACTTMP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_TEMPLATE
PRINT N'Drop table dbo.PIMS_ACTIVITY_TEMPLATE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.ACTTTY_PK
PRINT N'Drop primary key constraint dbo.ACTTTY_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_TYPE]
	DROP CONSTRAINT IF EXISTS [ACTTTY_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PIMS_PROPERTY_ACTIVITY_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PIMS_PROPERTY_ACTIVITY_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PIMS_PROPERTY_ACTIVITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_PROP_CLASSIFICATION_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_PROP_CLASSIFICATION_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_CLASSIFICATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROPERTY_CONTACT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROPERTY_CONTACT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROPERTY_CONTACT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_PROPERTY' 
                   AND col.NAME = 'PROPERTY_CLASSIFICATION_TYPE_CODE')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_PROPERTY] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY
PRINT N'Alter table dbo.PIMS_PROPERTY'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY] ADD CONSTRAINT [PRPRTY_PROPERTY_CLASSIFICATION_TYPE_CODE_DEF] DEFAULT ('UNKNOWN') FOR [PROPERTY_CLASSIFICATION_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD [ADDITIONAL_DETAILS] nvarchar(4000) NULL, 
	[IS_UTILITIES_PAYABLE] bit NULL, 
	[IS_TAXES_PAYABLE] bit NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Additional details about the property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'ADDITIONAL_DETAILS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the utilities are being paid.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_UTILITIES_PAYABLE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the property taxes are being paid.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_TAXES_PAYABLE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_CONTACT
PRINT N'Create table dbo.PIMS_PROPERTY_CONTACT'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_CONTACT]  ( 
	[PROPERTY_CONTACT_ID]           	bigint NOT NULL CONSTRAINT [PRPCNT_PROPERTY_CONTACT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_CONTACT_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[PURPOSE]                       	nvarchar(500) NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [PRPCNT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRPCNT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPCNT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPCNT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPCNT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPCNT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DF__PIMS_PROP__APP_L__4341E1B1]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPCNT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPCNT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPCNT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPCNT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPCNT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPCNT_PK] PRIMARY KEY CLUSTERED([PROPERTY_CONTACT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary key of the associated property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Person ID of the property contact.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Organization ID of the property contact.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'ORGANIZATION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary contact for the organization' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'PRIMARY_CONTACT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Purpose of property contact' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'PURPOSE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the contacts that are associated with this property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_PROP_PURPOSE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_PROP_PURPOSE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_PURPOSE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_PURPOSE_TYPE
PRINT N'Create table dbo.PIMS_PROPERTY_PURPOSE_TYPE'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_PURPOSE_TYPE]  ( 
	[PROPERTY_PURPOSE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PRPPUR_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [PRPPUR_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRPPUR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRPPUR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PRPPUR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PRPPUR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPPUR_PK] PRIMARY KEY CLUSTERED([PROPERTY_PURPOSE_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the purpose of the property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'PROPERTY_PURPOSE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the purpose of the property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the property purpose type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_PURPOSE_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_PROP_PURPOSE
PRINT N'Create table dbo.PIMS_PROP_PROP_PURPOSE'
GO
CREATE TABLE [dbo].[PIMS_PROP_PROP_PURPOSE]  ( 
	[PROP_PROP_PURPOSE_ID]          	bigint NOT NULL CONSTRAINT [PRPRPU_PROP_PROP_PURPOSE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_PURPOSE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_PURPOSE_TYPE_CODE]    	nvarchar(20) NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [PRPRPU_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRPRPU_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRPU_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPRPU_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPRPU_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPRPU_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DF__PIMS_PROP__APP_L__235F2204]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPRPU_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRPU_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRPU_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPRPU_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPRPU_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRPU_PK] PRIMARY KEY CLUSTERED([PROP_PROP_PURPOSE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary key of the associated property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_PURPOSE', 
	@level2type = N'Column', @level2name = N'PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary key of the associated property purpose.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_PURPOSE', 
	@level2type = N'Column', @level2name = N'PROPERTY_PURPOSE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_PURPOSE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the contacts that are associated with this property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_PURPOSE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_HIST]
	ADD [ADDITIONAL_DETAILS] nvarchar(4000) NULL, 
	[IS_UTILITIES_PAYABLE] bit NULL, 
	[IS_TAXES_PAYABLE] bit NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTEREST_HOLDER
PRINT N'Alter table dbo.PIMS_INTEREST_HOLDER'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER] DROP CONSTRAINT IF EXISTS [INTHLD_INTEREST_HOLDER_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER] ADD CONSTRAINT [INTHLD_INTEREST_HOLDER_TYPE_CODE_DEF] DEFAULT ('INTHLDR') FOR [INTEREST_HOLDER_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COMPENSATION_REQUISITION
PRINT N'Alter table dbo.PIMS_COMPENSATION_REQUISITION'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	ADD [ADV_PMT_SERVED_DT] date NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date that the advanced payment was made.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'ADV_PMT_SERVED_DT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COMPENSATION_REQUISITION_HIST
PRINT N'Alter table dbo.PIMS_COMPENSATION_REQUISITION_HIST'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION_HIST]
	ADD [ADV_PMT_SERVED_DT] date NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROPERTY_CONTACT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROPERTY_CONTACT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROPERTY_CONTACT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_CONTACT_HIST
PRINT N'Create table dbo.PIMS_PROPERTY_CONTACT_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_CONTACT_HIST]  ( 
	[_PROPERTY_CONTACT_HIST_ID]     	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_CONTACT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROPERTY_CONTACT_ID]           	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[PURPOSE]                       	nvarchar(500) NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPCNT_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_CONTACT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRPCNT_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRPCNT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT_HIST]
	ADD CONSTRAINT [PIMS_PRPCNT_H_UK]
	UNIQUE ([_PROPERTY_CONTACT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_PROP_PURPOSE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_PROP_PURPOSE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_PURPOSE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_PROP_PURPOSE_HIST
PRINT N'Create table dbo.PIMS_PROP_PROP_PURPOSE_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROP_PROP_PURPOSE_HIST]  ( 
	[_PROP_PROP_PURPOSE_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_PURPOSE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROP_PROP_PURPOSE_ID]          	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_PURPOSE_TYPE_CODE]    	nvarchar(20) NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPRPU_H_PK] PRIMARY KEY CLUSTERED([_PROP_PROP_PURPOSE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRPRPU_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRPRPU_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_PURPOSE_HIST]
	ADD CONSTRAINT [PIMS_PRPRPU_H_UK]
	UNIQUE ([_PROP_PROP_PURPOSE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROPERTY_ACTIVITY_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROPERTY_ACTIVITY_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_ACTIVITY_HIST
PRINT N'Create table dbo.PIMS_PROPERTY_ACTIVITY_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]  ( 
	[_PROPERTY_ACTIVITY_HIST_ID]         	bigint NOT NULL CONSTRAINT [DF__PIMS_PROP___PROP__29820FAE]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL CONSTRAINT [DF__PIMS_PROP__EFFEC__2A7633E7]  DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[PIMS_PROPERTY_ACTIVITY_ID]          	bigint NOT NULL,
	[PROPERTY_ID]                        	bigint NOT NULL,
	[PROP_MGMT_ACTIVITY_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[PROP_MGMT_ACTIVITY_SUBTYPE_CODE]    	nvarchar(20) NOT NULL,
	[PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE]	nvarchar(20) NULL,
	[MINISTRY_CONTACT_ID]                	bigint NULL,
	[VENDOR_ID]                          	bigint NULL,
	[REQUEST_RECEIVED_DT]                	date NULL,
	[COMPLETION_DT]                      	date NULL,
	[DESCRIPTION]                        	nvarchar(2000) NOT NULL,
	[REQUEST_SOURCE]                     	nvarchar(2000) NULL,
	[INVOLVED_PARTY]                     	nvarchar(2000) NULL,
	[PRETAX_AMT]                         	money NULL,
	[GST_AMT]                            	money NULL,
	[PST_AMT]                            	money NULL,
	[TOTAL_AMT]                          	money NULL,
	[IS_DISABLED]                        	bit NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPACT_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_ACTIVITY_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRPACT_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRPACT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
	ADD CONSTRAINT [PIMS_PRPACT_H_UK]
	UNIQUE ([_PROPERTY_ACTIVITY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_PROP_CLASSIFICATION_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_PROP_CLASSIFICATION_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_CLASSIFICATION_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_PROP_CLASSIFICATION_HIST
PRINT N'Create table dbo.PIMS_PROP_PROP_CLASSIFICATION_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROP_PROP_CLASSIFICATION_HIST]  ( 
	[_PROP_PROP_CLASSIFICATION_HIST_ID]	bigint NOT NULL CONSTRAINT [DF__PIMS_PROP___PROP__18E19391]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_CLASSIFICATION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]              	datetime NOT NULL CONSTRAINT [DF__PIMS_PROP__EFFEC__19D5B7CA]  DEFAULT (getutcdate()),
	[END_DATE_HIST]                    	datetime NULL,
	[PROP_PROP_CLASSIFICATION_ID]      	bigint NOT NULL,
	[PROPERTY_ID]                      	bigint NOT NULL,
	[PROPERTY_CLASSIFICATION_TYPE_CODE]	nvarchar(20) NOT NULL,
	[IS_DISABLED]                      	bit NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPRCL_H_PK] PRIMARY KEY CLUSTERED([_PROP_PROP_CLASSIFICATION_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRPRCL_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRPRCL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_CLASSIFICATION_HIST]
	ADD CONSTRAINT [PIMS_PRPRCL_H_UK]
	UNIQUE ([_PROP_PROP_CLASSIFICATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPCNT_ORGANIZATION_ID_IDX
PRINT N'Create index dbo.PRPCNT_ORGANIZATION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPCNT_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_CONTACT]([ORGANIZATION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPCNT_PERSON_ID_IDX
PRINT N'Create index dbo.PRPCNT_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPCNT_PERSON_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_CONTACT]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRPU_PROPERTY_ID_IDX
PRINT N'Create index dbo.PRPRPU_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRPU_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_PURPOSE]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPCNT_PROPERTY_ID_IDX
PRINT N'Create index dbo.PRPCNT_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPCNT_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_CONTACT]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRPU_PROPERTY_PURPOSE_TYPE_CODE_IDX
PRINT N'Create index dbo.PRPRPU_PROPERTY_PURPOSE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRPU_PROPERTY_PURPOSE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_PROP_PURPOSE]([PROPERTY_PURPOSE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_A_S_IUD_TR] ON PIMS_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_HIST set END_DATE_HIST = @curr_date where PROPERTY_ID in (select PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_HIST ([PROPERTY_ID], [PROPERTY_MANAGER_ID], [PROP_MGMT_ORG_ID], [PROPERTY_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [NAME], [DESCRIPTION], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [GENERAL_LOCATION], [SURVEY_PLAN_NUMBER], [ENCUMBRANCE_REASON], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_PROPERTY_OF_INTEREST], [IS_VISIBLE_TO_OTHER_AGENCIES], [IS_SENSITIVE], [IS_PROVINCIAL_PUBLIC_HWY], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ZONING], [ZONING_POTENTIAL], [ADDITIONAL_DETAILS], [IS_UTILITIES_PAYABLE], [IS_TAXES_PAYABLE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ID], [PROPERTY_MANAGER_ID], [PROP_MGMT_ORG_ID], [PROPERTY_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [NAME], [DESCRIPTION], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [GENERAL_LOCATION], [SURVEY_PLAN_NUMBER], [ENCUMBRANCE_REASON], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_PROPERTY_OF_INTEREST], [IS_VISIBLE_TO_OTHER_AGENCIES], [IS_SENSITIVE], [IS_PROVINCIAL_PUBLIC_HWY], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ZONING], [ZONING_POTENTIAL], [ADDITIONAL_DETAILS], [IS_UTILITIES_PAYABLE], [IS_TAXES_PAYABLE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_H_ID_SEQ]) as [_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CMPREQ_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_CMPREQ_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CMPREQ_I_S_I_TR] ON PIMS_COMPENSATION_REQUISITION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_COMPENSATION_REQUISITION ("COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_PERSON_ID",
      "CHART_OF_ACCOUNTS_ID",
      "RESPONSIBILITY_ID",
      "YEARLY_FINANCIAL_ID",
      "ALTERNATE_PROJECT_ID",
      "LEGACY_PAYEE",
      "IS_DRAFT",
      "IS_PAYMENT_IN_TRUST",
      "GST_NUMBER",
      "FISCAL_YEAR",
      "AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT",
      "GENERATION_DT",
      "FINALIZED_DATE",
      "ADV_PMT_SERVED_DT",
      "SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_PERSON_ID",
      "CHART_OF_ACCOUNTS_ID",
      "RESPONSIBILITY_ID",
      "YEARLY_FINANCIAL_ID",
      "ALTERNATE_PROJECT_ID",
      "LEGACY_PAYEE",
      "IS_DRAFT",
      "IS_PAYMENT_IN_TRUST",
      "GST_NUMBER",
      "FISCAL_YEAR",
      "AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT",
      "GENERATION_DT",
      "FINALIZED_DATE",
      "ADV_PMT_SERVED_DT",
      "SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CMPREQ_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_CMPREQ_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CMPREQ_A_S_IUD_TR] ON PIMS_COMPENSATION_REQUISITION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_COMPENSATION_REQUISITION_HIST set END_DATE_HIST = @curr_date where COMPENSATION_REQUISITION_ID in (select COMPENSATION_REQUISITION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_COMPENSATION_REQUISITION_HIST ([COMPENSATION_REQUISITION_ID], [ACQUISITION_FILE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [ACQUISITION_FILE_PERSON_ID], [CHART_OF_ACCOUNTS_ID], [RESPONSIBILITY_ID], [YEARLY_FINANCIAL_ID], [ALTERNATE_PROJECT_ID], [LEGACY_PAYEE], [IS_DRAFT], [IS_PAYMENT_IN_TRUST], [GST_NUMBER], [FISCAL_YEAR], [AGREEMENT_DT], [EXPROP_NOTICE_SERVED_DT], [EXPROP_VESTING_DT], [GENERATION_DT], [FINALIZED_DATE], [ADV_PMT_SERVED_DT], [SPECIAL_INSTRUCTION], [DETAILED_REMARKS], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _COMPENSATION_REQUISITION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [COMPENSATION_REQUISITION_ID], [ACQUISITION_FILE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [ACQUISITION_FILE_PERSON_ID], [CHART_OF_ACCOUNTS_ID], [RESPONSIBILITY_ID], [YEARLY_FINANCIAL_ID], [ALTERNATE_PROJECT_ID], [LEGACY_PAYEE], [IS_DRAFT], [IS_PAYMENT_IN_TRUST], [GST_NUMBER], [FISCAL_YEAR], [AGREEMENT_DT], [EXPROP_NOTICE_SERVED_DT], [EXPROP_VESTING_DT], [GENERATION_DT], [FINALIZED_DATE], [ADV_PMT_SERVED_DT], [SPECIAL_INSTRUCTION], [DETAILED_REMARKS], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_COMPENSATION_REQUISITION_H_ID_SEQ]) as [_COMPENSATION_REQUISITION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_I_TR] ON PIMS_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY ("PROPERTY_ID",
      "PROPERTY_MANAGER_ID",
      "PROP_MGMT_ORG_ID",
      "PROPERTY_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME",
      "DESCRIPTION",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER",
      "ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "NOTES",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE",
      "IS_PROVINCIAL_PUBLIC_HWY",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ZONING",
      "ZONING_POTENTIAL",
      "ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ID",
      "PROPERTY_MANAGER_ID",
      "PROP_MGMT_ORG_ID",
      "PROPERTY_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME",
      "DESCRIPTION",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER",
      "ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "NOTES",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE",
      "IS_PROVINCIAL_PUBLIC_HWY",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ZONING",
      "ZONING_POTENTIAL",
      "ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPCNT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPCNT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPCNT_I_S_U_TR] ON PIMS_PROPERTY_CONTACT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_CONTACT_ID = deleted.PROPERTY_CONTACT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_CONTACT
    set "PROPERTY_CONTACT_ID" = inserted."PROPERTY_CONTACT_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "PURPOSE" = inserted."PURPOSE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_CONTACT
    inner join inserted
    on (PIMS_PROPERTY_CONTACT.PROPERTY_CONTACT_ID = inserted.PROPERTY_CONTACT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPPUR_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPPUR_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPPUR_I_S_I_TR] ON PIMS_PROPERTY_PURPOSE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_PURPOSE_TYPE ("PROPERTY_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPCNT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPCNT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPCNT_A_S_IUD_TR] ON PIMS_PROPERTY_CONTACT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_CONTACT_HIST set END_DATE_HIST = @curr_date where PROPERTY_CONTACT_ID in (select PROPERTY_CONTACT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_CONTACT_HIST ([PROPERTY_CONTACT_ID], [PROPERTY_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [PURPOSE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_CONTACT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_CONTACT_ID], [PROPERTY_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [PURPOSE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_CONTACT_H_ID_SEQ]) as [_PROPERTY_CONTACT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRPU_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRPU_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRPU_I_S_U_TR] ON PIMS_PROP_PROP_PURPOSE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_PURPOSE_ID = deleted.PROP_PROP_PURPOSE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_PURPOSE
    set "PROP_PROP_PURPOSE_ID" = inserted."PROP_PROP_PURPOSE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_PURPOSE_TYPE_CODE" = inserted."PROPERTY_PURPOSE_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_PURPOSE
    inner join inserted
    on (PIMS_PROP_PROP_PURPOSE.PROP_PROP_PURPOSE_ID = inserted.PROP_PROP_PURPOSE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CMPREQ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CMPREQ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CMPREQ_I_S_U_TR] ON PIMS_COMPENSATION_REQUISITION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.COMPENSATION_REQUISITION_ID = deleted.COMPENSATION_REQUISITION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COMPENSATION_REQUISITION
    set "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_PERSON_ID" = inserted."ACQUISITION_FILE_PERSON_ID",
      "CHART_OF_ACCOUNTS_ID" = inserted."CHART_OF_ACCOUNTS_ID",
      "RESPONSIBILITY_ID" = inserted."RESPONSIBILITY_ID",
      "YEARLY_FINANCIAL_ID" = inserted."YEARLY_FINANCIAL_ID",
      "ALTERNATE_PROJECT_ID" = inserted."ALTERNATE_PROJECT_ID",
      "LEGACY_PAYEE" = inserted."LEGACY_PAYEE",
      "IS_DRAFT" = inserted."IS_DRAFT",
      "IS_PAYMENT_IN_TRUST" = inserted."IS_PAYMENT_IN_TRUST",
      "GST_NUMBER" = inserted."GST_NUMBER",
      "FISCAL_YEAR" = inserted."FISCAL_YEAR",
      "AGREEMENT_DT" = inserted."AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT" = inserted."EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT" = inserted."EXPROP_VESTING_DT",
      "GENERATION_DT" = inserted."GENERATION_DT",
      "FINALIZED_DATE" = inserted."FINALIZED_DATE",
      "ADV_PMT_SERVED_DT" = inserted."ADV_PMT_SERVED_DT",
      "SPECIAL_INSTRUCTION" = inserted."SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS" = inserted."DETAILED_REMARKS",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COMPENSATION_REQUISITION
    inner join inserted
    on (PIMS_COMPENSATION_REQUISITION.COMPENSATION_REQUISITION_ID = inserted.COMPENSATION_REQUISITION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPCNT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPCNT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPCNT_I_S_I_TR] ON PIMS_PROPERTY_CONTACT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_CONTACT ("PROPERTY_CONTACT_ID",
      "PROPERTY_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "PURPOSE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_CONTACT_ID",
      "PROPERTY_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "PURPOSE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPPUR_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPPUR_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPPUR_I_S_U_TR] ON PIMS_PROPERTY_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_PURPOSE_TYPE_CODE = deleted.PROPERTY_PURPOSE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_PURPOSE_TYPE
    set "PROPERTY_PURPOSE_TYPE_CODE" = inserted."PROPERTY_PURPOSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_PURPOSE_TYPE
    inner join inserted
    on (PIMS_PROPERTY_PURPOSE_TYPE.PROPERTY_PURPOSE_TYPE_CODE = inserted.PROPERTY_PURPOSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRPU_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPRPU_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRPU_A_S_IUD_TR] ON PIMS_PROP_PROP_PURPOSE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_PROP_PURPOSE_HIST set END_DATE_HIST = @curr_date where PROP_PROP_PURPOSE_ID in (select PROP_PROP_PURPOSE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_PROP_PURPOSE_HIST ([PROP_PROP_PURPOSE_ID], [PROPERTY_ID], [PROPERTY_PURPOSE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_PROP_PURPOSE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_PROP_PURPOSE_ID], [PROPERTY_ID], [PROPERTY_PURPOSE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_PROP_PURPOSE_H_ID_SEQ]) as [_PROP_PROP_PURPOSE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRPU_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPRPU_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRPU_I_S_I_TR] ON PIMS_PROP_PROP_PURPOSE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_PURPOSE ("PROP_PROP_PURPOSE_ID",
      "PROPERTY_ID",
      "PROPERTY_PURPOSE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_PROP_PURPOSE_ID",
      "PROPERTY_ID",
      "PROPERTY_PURPOSE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_U_TR] ON PIMS_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ID = deleted.PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY
    set "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_MANAGER_ID" = inserted."PROPERTY_MANAGER_ID",
      "PROP_MGMT_ORG_ID" = inserted."PROP_MGMT_ORG_ID",
      "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE" = inserted."PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE" = inserted."PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE" = inserted."SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE" = inserted."VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE" = inserted."VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE" = inserted."PPH_STATUS_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE" = inserted."PROPERTY_CLASSIFICATION_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE" = inserted."PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "PID" = inserted."PID",
      "PIN" = inserted."PIN",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "FILE_NUMBER_SUFFIX" = inserted."FILE_NUMBER_SUFFIX",
      "LAND_AREA" = inserted."LAND_AREA",
      "LAND_LEGAL_DESCRIPTION" = inserted."LAND_LEGAL_DESCRIPTION",
      "BOUNDARY" = inserted."BOUNDARY",
      "LOCATION" = inserted."LOCATION",
      "GENERAL_LOCATION" = inserted."GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER" = inserted."SURVEY_PLAN_NUMBER",
      "ENCUMBRANCE_REASON" = inserted."ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT" = inserted."SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE" = inserted."SURPLUS_DECLARATION_DATE",
      "NOTES" = inserted."NOTES",
      "MUNICIPAL_ZONING" = inserted."MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL" = inserted."IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT" = inserted."VOLUMETRIC_MEASUREMENT",
      "IS_OWNED" = inserted."IS_OWNED",
      "IS_PROPERTY_OF_INTEREST" = inserted."IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES" = inserted."IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE" = inserted."IS_SENSITIVE",
      "IS_PROVINCIAL_PUBLIC_HWY" = inserted."IS_PROVINCIAL_PUBLIC_HWY",
      "PPH_STATUS_UPDATE_USERID" = inserted."PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP" = inserted."PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID" = inserted."PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT" = inserted."IS_RWY_BELT_DOM_PATENT",
      "ZONING" = inserted."ZONING",
      "ZONING_POTENTIAL" = inserted."ZONING_POTENTIAL",
      "ADDITIONAL_DETAILS" = inserted."ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE" = inserted."IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE" = inserted."IS_TAXES_PAYABLE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY
    inner join inserted
    on (PIMS_PROPERTY.PROPERTY_ID = inserted.PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTY_BOUNDARY_IDX
PRINT N'Create index dbo.PRPRTY_BOUNDARY_IDX'
GO
-- [PRPRTY_BOUNDARY_IDX] : Scripting for Spatial Index currently not supported
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTY_LOCATION_IDX
PRINT N'Create index dbo.PRPRTY_LOCATION_IDX'
GO
-- [PRPRTY_LOCATION_IDX] : Scripting for Spatial Index currently not supported
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_PRPCNT_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_PRPCNT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT]
	ADD CONSTRAINT [PIM_ORG_PIM_PRPCNT_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_PRPCNT_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_PRPCNT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRPCNT_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_PRM_PRPCNT_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_PRM_PRPCNT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRM_PRPCNT_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPCNT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPCNT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPCNT_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPPUR_PIM_PRPRPU_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPPUR_PIM_PRPRPU_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_PURPOSE]
	ADD CONSTRAINT [PIM_PRPPUR_PIM_PRPRPU_FK]
	FOREIGN KEY([PROPERTY_PURPOSE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_PURPOSE_TYPE]([PROPERTY_PURPOSE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRPU_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRPU_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_PURPOSE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRPU_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_TEMPLATE_HIST
PRINT N'Drop table dbo.PIMS_ACTIVITY_TEMPLATE_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST
PRINT N'Drop table dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_INSTANCE_NOTE_HIST
PRINT N'Drop table dbo.PIMS_ACTIVITY_INSTANCE_NOTE_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACTIVITY_INSTANCE_NOTE_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACTIVITY_INSTANCE_NOTE_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST
PRINT N'Drop table dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST
PRINT N'Drop table dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_ACTIVITY_INSTANCE_HIST
PRINT N'Drop table dbo.PIMS_LEASE_ACTIVITY_INSTANCE_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACT_INST_PROP_RSRCH_FILE_HIST
PRINT N'Drop table dbo.PIMS_ACT_INST_PROP_RSRCH_FILE_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACT_INST_PROP_RSRCH_FILE_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACT_INST_PROP_RSRCH_FILE_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACT_INST_PROP_ACQ_FILE_HIST
PRINT N'Drop table dbo.PIMS_ACT_INST_PROP_ACQ_FILE_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACT_INST_PROP_ACQ_FILE_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACT_INST_PROP_ACQ_FILE_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST
PRINT N'Drop table dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_INSTANCE_HIST
PRINT N'Drop table dbo.PIMS_ACTIVITY_INSTANCE_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACTIVITY_INSTANCE_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACTIVITY_INSTANCE_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_INSTANCE_STATUS_TYPE
PRINT N'Drop table dbo.PIMS_ACTIVITY_INSTANCE_STATUS_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE_STATUS_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_TEMPLATE_TYPE
PRINT N'Drop table dbo.PIMS_ACTIVITY_TEMPLATE_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
