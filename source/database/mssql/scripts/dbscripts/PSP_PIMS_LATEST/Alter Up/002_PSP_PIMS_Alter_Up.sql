-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Thu Jan 26 12:52:42 PST 2023
-- Execute this script on:
-- 		PSP_PIMS_S45_01/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S46_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROJCT_REGION_CODE_IDX
PRINT N'Drop index dbo.PROJCT_REGION_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT].[PROJCT_REGION_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique index dbo.PROJCT_CODE_IDX
PRINT N'Drop unique index dbo.PROJCT_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT].[PROJCT_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_RESEARCH_FILE_NOTE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_RESEARCH_FILE_NOTE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_NOTE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_RESEARCH_FILE_NOTE
PRINT N'Create table dbo.PIMS_RESEARCH_FILE_NOTE'
GO
CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]  ( 
	[RESEARCH_FILE_NOTE_ID]         	bigint NOT NULL CONSTRAINT [RSCNOT_RESEARCH_FILE_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_NOTE_ID_SEQ]),
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [RSCNOT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [RSCNOT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RSCNOT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RSCNOT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RSCNOT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RSCNOT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RSCNOT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RSCNOT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RSCNOT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [RSCNOT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RSCNOT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RSCNOT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RSCNOT_PK] PRIMARY KEY CLUSTERED([RESEARCH_FILE_NOTE_ID],[RESEARCH_FILE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the relationship betwwen a research file and a note.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_NOTE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.RSCNOT_RSRCH_FILE_NOTE_TUC
PRINT N'Create unique constraint dbo.RSCNOT_RSRCH_FILE_NOTE_TUC'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]
	ADD CONSTRAINT [RSCNOT_RSRCH_FILE_NOTE_TUC]
	UNIQUE ([NOTE_ID], [RESEARCH_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT
PRINT N'Alter table dbo.PIMS_PROJECT'
GO
ALTER TABLE [dbo].[PIMS_PROJECT] ALTER COLUMN [PROJECT_STATUS_TYPE_CODE] nvarchar(20) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROJECT] DROP CONSTRAINT IF EXISTS [PROJCT_PROJECT_STATUS_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
UPDATE [dbo].[PIMS_PROJECT] SET [REGION_CODE] = ((4)), CONCURRENCY_CONTROL_NUMBER = CONCURRENCY_CONTROL_NUMBER + 1 WHERE [REGION_CODE] IS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROJECT] ALTER COLUMN [REGION_CODE] smallint NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROJECT] ADD CONSTRAINT [PROJCT_REGION_CODE_DEF] DEFAULT ((4)) FOR [REGION_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROJECT] ALTER COLUMN [CODE] nvarchar(20) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROJECT] ADD CONSTRAINT [PROJCT_DESCRIPTION_DEF] DEFAULT ('<Empty>') FOR [DESCRIPTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_FILE_DOCUMENT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_FILE_DOCUMENT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_FILE_DOCUMENT
PRINT N'Create table dbo.PIMS_ACQUISITION_FILE_DOCUMENT'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT]  ( 
	[ACQUISITION_FILE_DOCUMENT_ID]  	bigint NOT NULL CONSTRAINT [ACQDOC_ACQUISITION_FILE_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_DOCUMENT_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [ACQDOC_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACQDOC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACQDOC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACQDOC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACQDOC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACQDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACQDOC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACQDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACQDOC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACQDOC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACQDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACQDOC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQDOC_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FILE_DOCUMENT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the relationship between an acquisition file and a document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_DOCUMENT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.ACQNOT_ACQUISITION_FILE_DOCUMENT_TUC
PRINT N'Create unique constraint dbo.ACQNOT_ACQUISITION_FILE_DOCUMENT_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT]
	ADD CONSTRAINT [ACQNOT_ACQUISITION_FILE_DOCUMENT_TUC]
	UNIQUE ([DOCUMENT_ID], [ACQUISITION_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_RESEARCH_FILE_DOCUMENT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_RESEARCH_FILE_DOCUMENT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_RESEARCH_FILE_DOCUMENT
PRINT N'Create table dbo.PIMS_RESEARCH_FILE_DOCUMENT'
GO
CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]  ( 
	[RESEARCH_FILE_DOCUMENT_ID]     	bigint NOT NULL CONSTRAINT [RSCDOC_RESEARCH_FILE_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_DOCUMENT_ID_SEQ]),
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RSCDOC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RSCDOC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RSCDOC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RSCDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RSCDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RSCDOC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [RSCDOC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RSCDOC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [RSCDOC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RSCDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RSCDOC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[IS_DISABLED]                   	bit NULL CONSTRAINT [RSCDOC_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	CONSTRAINT [RSCDOC_PK] PRIMARY KEY CLUSTERED([RESEARCH_FILE_DOCUMENT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the relationship betwwen a research file and a document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_DOCUMENT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.RSCDOC_RESEARCH_FILE_DOCUMENT_TUC
PRINT N'Create unique constraint dbo.RSCDOC_RESEARCH_FILE_DOCUMENT_TUC'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]
	ADD CONSTRAINT [RSCDOC_RESEARCH_FILE_DOCUMENT_TUC]
	UNIQUE ([DOCUMENT_ID], [RESEARCH_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_RESEARCH_FILE_DOCUMENT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_RESEARCH_FILE_DOCUMENT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_RESEARCH_FILE_DOCUMENT_HIST
PRINT N'Create table dbo.PIMS_RESEARCH_FILE_DOCUMENT_HIST'
GO
CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT_HIST]  ( 
	[_RESEARCH_FILE_DOCUMENT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[RESEARCH_FILE_DOCUMENT_ID]      	bigint NOT NULL,
	[RESEARCH_FILE_ID]               	bigint NOT NULL,
	[DOCUMENT_ID]                    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[IS_DISABLED]                    	bit NULL,
	CONSTRAINT [PIMS_RSCDOC_H_PK] PRIMARY KEY CLUSTERED([_RESEARCH_FILE_DOCUMENT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_RSCDOC_H_UK
PRINT N'Create unique constraint dbo.PIMS_RSCDOC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_RSCDOC_H_UK]
	UNIQUE ([_RESEARCH_FILE_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_FILE_DOCUMENT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_FILE_DOCUMENT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_FILE_DOCUMENT_HIST
PRINT N'Create table dbo.PIMS_ACQUISITION_FILE_DOCUMENT_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT_HIST]  ( 
	[_ACQUISITION_FILE_DOCUMENT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[ACQUISITION_FILE_DOCUMENT_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]               	bigint NOT NULL,
	[DOCUMENT_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                       	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQDOC_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_FILE_DOCUMENT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACQDOC_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACQDOC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_ACQDOC_H_UK]
	UNIQUE ([_ACQUISITION_FILE_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_RESEARCH_FILE_NOTE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_RESEARCH_FILE_NOTE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_NOTE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_RESEARCH_FILE_NOTE_HIST
PRINT N'Create table dbo.PIMS_RESEARCH_FILE_NOTE_HIST'
GO
CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE_HIST]  ( 
	[_RESEARCH_FILE_NOTE_HIST_ID]   	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_NOTE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[RESEARCH_FILE_NOTE_ID]         	bigint NOT NULL,
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RSCNOT_H_PK] PRIMARY KEY CLUSTERED([_RESEARCH_FILE_NOTE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_RSCNOT_H_UK
PRINT N'Create unique constraint dbo.PIMS_RSCNOT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE_HIST]
	ADD CONSTRAINT [PIMS_RSCNOT_H_UK]
	UNIQUE ([_RESEARCH_FILE_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_NOTE
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the relationship between an acquisition file and a note.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_NOTE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT_HIST
PRINT N'Alter table dbo.PIMS_PROJECT_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_HIST] ALTER COLUMN [PROJECT_STATUS_TYPE_CODE] nvarchar(20) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
UPDATE [dbo].[PIMS_PROJECT_HIST] SET [REGION_CODE] = 4, CONCURRENCY_CONTROL_NUMBER = CONCURRENCY_CONTROL_NUMBER + 1 WHERE [REGION_CODE] IS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROJECT_HIST] ALTER COLUMN [REGION_CODE] smallint NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
--ALTER TABLE [dbo].[PIMS_PROJECT_HIST] ADD DEFAULT 4 FOR [REGION_CODE]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO
ALTER TABLE [dbo].[PIMS_PROJECT_HIST] ALTER COLUMN [CODE] nvarchar(20) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RSCNOT_NOTE_ID_IDX
PRINT N'Create index dbo.RSCNOT_NOTE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [RSCNOT_NOTE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_NOTE]([NOTE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PROJCT_CODE_IDX
PRINT N'Create index dbo.PROJCT_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PROJCT_CODE_IDX]
	ON [dbo].[PIMS_PROJECT]([CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PROJCT_REGION_CODE_IDX
PRINT N'Create index dbo.PROJCT_REGION_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PROJCT_REGION_CODE_IDX]
	ON [dbo].[PIMS_PROJECT]([REGION_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQDOC_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.ACQDOC_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQDOC_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT]([ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RSCNOT_RESEARCH_FILE_ID_IDX
PRINT N'Create index dbo.RSCNOT_RESEARCH_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [RSCNOT_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_NOTE]([RESEARCH_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RSCDOC_RESEARCH_FILE_ID_IDX
PRINT N'Create index dbo.RSCDOC_RESEARCH_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [RSCDOC_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]([RESEARCH_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RSCDOC_DOCUMENT_ID_IDX
PRINT N'Create index dbo.RSCDOC_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [RSCDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQDOC_DOCUMENT_ID_IDX
PRINT N'Create index dbo.ACQDOC_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_RESRCH_PIM_RSCNOT_FK
PRINT N'Create foreign key constraint dbo.PIM_RESRCH_PIM_RSCNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]
	ADD CONSTRAINT [PIM_RESRCH_PIM_RSCNOT_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_NOTE_PIM_RSCNOT_FK
PRINT N'Create foreign key constraint dbo.PIM_NOTE_PIM_RSCNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]
	ADD CONSTRAINT [PIM_NOTE_PIM_RSCNOT_FK]
	FOREIGN KEY([NOTE_ID])
	REFERENCES [dbo].[PIMS_NOTE]([NOTE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_ACQDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_ACQDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_ACQDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQDOC_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_RSCDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_RSCDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_RSCDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_RESRCH_PIM_RSCDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_RESRCH_PIM_RSCDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_RESRCH_PIM_RSCDOC_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSCDOC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_RSCDOC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSCDOC_A_S_IUD_TR] ON PIMS_RESEARCH_FILE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_DOCUMENT_ID in (select RESEARCH_FILE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_DOCUMENT_HIST ([RESEARCH_FILE_DOCUMENT_ID], [RESEARCH_FILE_ID], [DOCUMENT_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED], _RESEARCH_FILE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_DOCUMENT_ID], [RESEARCH_FILE_ID], [DOCUMENT_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED], (next value for [dbo].[PIMS_RESEARCH_FILE_DOCUMENT_H_ID_SEQ]) as [_RESEARCH_FILE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;


GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSCDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RSCDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSCDOC_I_S_U_TR] ON PIMS_RESEARCH_FILE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_DOCUMENT_ID = deleted.RESEARCH_FILE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE_DOCUMENT
    set "RESEARCH_FILE_DOCUMENT_ID" = inserted."RESEARCH_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "IS_DISABLED" = inserted."IS_DISABLED"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_DOCUMENT
    inner join inserted
    on (PIMS_RESEARCH_FILE_DOCUMENT.RESEARCH_FILE_DOCUMENT_ID = inserted.RESEARCH_FILE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;


GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQDOC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQDOC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQDOC_I_S_I_TR] ON PIMS_ACQUISITION_FILE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE_DOCUMENT ("ACQUISITION_FILE_DOCUMENT_ID",
      "ACQUISITION_FILE_ID",
      "DOCUMENT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_DOCUMENT_ID",
      "ACQUISITION_FILE_ID",
      "DOCUMENT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;


GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSCNOT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RSCNOT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSCNOT_I_S_U_TR] ON PIMS_RESEARCH_FILE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_ID = deleted.RESEARCH_FILE_ID and inserted.RESEARCH_FILE_NOTE_ID = deleted.RESEARCH_FILE_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE_NOTE
    set "RESEARCH_FILE_NOTE_ID" = inserted."RESEARCH_FILE_NOTE_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_NOTE
    inner join inserted
    on (PIMS_RESEARCH_FILE_NOTE.RESEARCH_FILE_ID = inserted.RESEARCH_FILE_ID and PIMS_RESEARCH_FILE_NOTE.RESEARCH_FILE_NOTE_ID = inserted.RESEARCH_FILE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;


GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSCDOC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_RSCDOC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSCDOC_I_S_I_TR] ON PIMS_RESEARCH_FILE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE_DOCUMENT ("RESEARCH_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_ID",
      "DOCUMENT_ID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER",
      "IS_DISABLED")
    select "RESEARCH_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_ID",
      "DOCUMENT_ID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER",
      "IS_DISABLED"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;


GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQDOC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQDOC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQDOC_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_DOCUMENT_ID in (select ACQUISITION_FILE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_DOCUMENT_HIST ([ACQUISITION_FILE_DOCUMENT_ID], [ACQUISITION_FILE_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_DOCUMENT_ID], [ACQUISITION_FILE_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT_H_ID_SEQ]) as [_ACQUISITION_FILE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;


GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSCNOT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_RSCNOT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSCNOT_A_S_IUD_TR] ON PIMS_RESEARCH_FILE_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_NOTE_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_NOTE_ID in (select RESEARCH_FILE_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_NOTE_HIST ([RESEARCH_FILE_NOTE_ID], [RESEARCH_FILE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_NOTE_ID], [RESEARCH_FILE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_NOTE_H_ID_SEQ]) as [_RESEARCH_FILE_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;


GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSCNOT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_RSCNOT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSCNOT_I_S_I_TR] ON PIMS_RESEARCH_FILE_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE_NOTE ("RESEARCH_FILE_NOTE_ID",
      "RESEARCH_FILE_ID",
      "NOTE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_FILE_NOTE_ID",
      "RESEARCH_FILE_ID",
      "NOTE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;


GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQDOC_I_S_U_TR] ON PIMS_ACQUISITION_FILE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_DOCUMENT_ID = deleted.ACQUISITION_FILE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE_DOCUMENT
    set "ACQUISITION_FILE_DOCUMENT_ID" = inserted."ACQUISITION_FILE_DOCUMENT_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE_DOCUMENT
    inner join inserted
    on (PIMS_ACQUISITION_FILE_DOCUMENT.ACQUISITION_FILE_DOCUMENT_ID = inserted.ACQUISITION_FILE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;


GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
