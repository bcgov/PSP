-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Fri Feb 03 10:32:58 PST 2023
-- Execute this script on:
-- 		PSP_PIMS_S46_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S47_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RSCDOC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RSCDOC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RSCDOC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RSCDOC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_RSCDOC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RSCDOC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RSCDOC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_RSCDOC_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RSCDOC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_NOTE_PIM_RSCNOT_FK
PRINT N'Drop foreign key constraint dbo.PIM_NOTE_PIM_RSCNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]
	DROP CONSTRAINT IF EXISTS [PIM_NOTE_PIM_RSCNOT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_RESRCH_PIM_RSCNOT_FK
PRINT N'Drop foreign key constraint dbo.PIM_RESRCH_PIM_RSCNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]
	DROP CONSTRAINT IF EXISTS [PIM_RESRCH_PIM_RSCNOT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_RESRCH_PIM_RSCDOC_FK
PRINT N'Drop foreign key constraint dbo.PIM_RESRCH_PIM_RSCDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_RESRCH_PIM_RSCDOC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCMNT_PIM_RSCDOC_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCMNT_PIM_RSCDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_DOCMNT_PIM_RSCDOC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.RSCDOC_RESEARCH_FILE_ID_IDX
PRINT N'Drop index dbo.RSCDOC_RESEARCH_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_RESEARCH_FILE_DOCUMENT].[RSCDOC_RESEARCH_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.RSCDOC_DOCUMENT_ID_IDX
PRINT N'Drop index dbo.RSCDOC_DOCUMENT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_RESEARCH_FILE_DOCUMENT].[RSCDOC_DOCUMENT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RSCNOT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RSCNOT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RSCNOT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RSCNOT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_RSCNOT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RSCNOT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RSCNOT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_RSCNOT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RSCNOT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.RSCNOT_RESEARCH_FILE_ID_IDX
PRINT N'Drop index dbo.RSCNOT_RESEARCH_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_RESEARCH_FILE_NOTE].[RSCNOT_RESEARCH_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.RSCNOT_NOTE_ID_IDX
PRINT N'Drop index dbo.RSCNOT_NOTE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_RESEARCH_FILE_NOTE].[RSCNOT_NOTE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_RSCDOC_H_UK
PRINT N'Drop unique constraint dbo.PIMS_RSCDOC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_RSCDOC_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_RSCDOC_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_RSCDOC_H_PK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_RSCDOC_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_RSCNOT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_RSCNOT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_RSCNOT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_RSCNOT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_RSCNOT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_RSCNOT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.RSCNOT_RSRCH_FILE_NOTE_TUC
PRINT N'Drop unique constraint dbo.RSCNOT_RSRCH_FILE_NOTE_TUC'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]
	DROP CONSTRAINT IF EXISTS [RSCNOT_RSRCH_FILE_NOTE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.RSCNOT_PK
PRINT N'Drop primary key constraint dbo.RSCNOT_PK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]
	DROP CONSTRAINT IF EXISTS [RSCNOT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.RSCDOC_RESEARCH_FILE_DOCUMENT_TUC
PRINT N'Drop unique constraint dbo.RSCDOC_RESEARCH_FILE_DOCUMENT_TUC'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [RSCDOC_RESEARCH_FILE_DOCUMENT_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.RSCDOC_PK
PRINT N'Drop primary key constraint dbo.RSCDOC_PK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [RSCDOC_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_DOCUMENT
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_DOCUMENT'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] DROP CONSTRAINT IF EXISTS [RSCDOC_RESEARCH_FILE_DOCUMENT_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] ADD CONSTRAINT [RFLDOC_RESEARCH_FILE_DOCUMENT_ID_DEF] DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_DOCUMENT_ID_SEQ]) FOR [RESEARCH_FILE_DOCUMENT_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] DROP CONSTRAINT IF EXISTS [RSCDOC_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] ADD CONSTRAINT [RFLDOC_APP_CREATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [APP_CREATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] DROP CONSTRAINT IF EXISTS [RSCDOC_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] ADD CONSTRAINT [RFLDOC_APP_CREATE_USER_DIRECTORY_DEF] DEFAULT (user_name()) FOR [APP_CREATE_USER_DIRECTORY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] DROP CONSTRAINT IF EXISTS [RSCDOC_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] ADD CONSTRAINT [RFLDOC_APP_CREATE_USERID_DEF] DEFAULT (user_name()) FOR [APP_CREATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] DROP CONSTRAINT IF EXISTS [RSCDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] ADD CONSTRAINT [RFLDOC_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [APP_LAST_UPDATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] DROP CONSTRAINT IF EXISTS [RSCDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] ADD CONSTRAINT [RFLDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF] DEFAULT (user_name()) FOR [APP_LAST_UPDATE_USER_DIRECTORY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] DROP CONSTRAINT IF EXISTS [RSCDOC_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] ADD CONSTRAINT [RFLDOC_APP_LAST_UPDATE_USERID_DEF] DEFAULT (user_name()) FOR [APP_LAST_UPDATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] DROP CONSTRAINT IF EXISTS [RSCDOC_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] ADD CONSTRAINT [RFLDOC_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT ((1)) FOR [CONCURRENCY_CONTROL_NUMBER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] DROP CONSTRAINT IF EXISTS [RSCDOC_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] ADD CONSTRAINT [RFLDOC_DB_CREATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [DB_CREATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] DROP CONSTRAINT IF EXISTS [RSCDOC_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] ADD CONSTRAINT [RFLDOC_DB_CREATE_USERID_DEF] DEFAULT (user_name()) FOR [DB_CREATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] DROP CONSTRAINT IF EXISTS [RSCDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] ADD CONSTRAINT [RFLDOC_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [DB_LAST_UPDATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] DROP CONSTRAINT IF EXISTS [RSCDOC_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] ADD CONSTRAINT [RFLDOC_DB_LAST_UPDATE_USERID_DEF] DEFAULT (user_name()) FOR [DB_LAST_UPDATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] DROP CONSTRAINT IF EXISTS [RSCDOC_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] ADD CONSTRAINT [RFLDOC_IS_DISABLED_DEF] DEFAULT (CONVERT([bit],(0))) FOR [IS_DISABLED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]
	ADD CONSTRAINT [RFLDOC_PK]
	PRIMARY KEY CLUSTERED ([RESEARCH_FILE_DOCUMENT_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.RFLDOC_RESEARCH_FILE_DOCUMENT_TUC
PRINT N'Create unique constraint dbo.RFLDOC_RESEARCH_FILE_DOCUMENT_TUC'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]
	ADD CONSTRAINT [RFLDOC_RESEARCH_FILE_DOCUMENT_TUC]
	UNIQUE ([DOCUMENT_ID], [RESEARCH_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_NOTE
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_NOTE'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] DROP CONSTRAINT IF EXISTS [RSCNOT_RESEARCH_FILE_NOTE_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] ADD CONSTRAINT [RFLNOT_RESEARCH_FILE_NOTE_ID_DEF] DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_NOTE_ID_SEQ]) FOR [RESEARCH_FILE_NOTE_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] DROP CONSTRAINT IF EXISTS [RSCNOT_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] ADD CONSTRAINT [RFLNOT_IS_DISABLED_DEF] DEFAULT (CONVERT([bit],(0))) FOR [IS_DISABLED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] DROP CONSTRAINT IF EXISTS [RSCNOT_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] ADD CONSTRAINT [RFLNOT_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT ((1)) FOR [CONCURRENCY_CONTROL_NUMBER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] DROP CONSTRAINT IF EXISTS [RSCNOT_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] ADD CONSTRAINT [RFLNOT_APP_CREATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [APP_CREATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] DROP CONSTRAINT IF EXISTS [RSCNOT_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] ADD CONSTRAINT [RFLNOT_APP_CREATE_USERID_DEF] DEFAULT (user_name()) FOR [APP_CREATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] DROP CONSTRAINT IF EXISTS [RSCNOT_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] ADD CONSTRAINT [RFLNOT_APP_CREATE_USER_DIRECTORY_DEF] DEFAULT (user_name()) FOR [APP_CREATE_USER_DIRECTORY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] DROP CONSTRAINT IF EXISTS [RSCNOT_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] ADD CONSTRAINT [RFLNOT_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [APP_LAST_UPDATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] DROP CONSTRAINT IF EXISTS [RSCNOT_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] ADD CONSTRAINT [RFLNOT_APP_LAST_UPDATE_USERID_DEF] DEFAULT (user_name()) FOR [APP_LAST_UPDATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] DROP CONSTRAINT IF EXISTS [RSCNOT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] ADD CONSTRAINT [RFLNOT_APP_LAST_UPDATE_USER_DIRECTORY_DEF] DEFAULT (user_name()) FOR [APP_LAST_UPDATE_USER_DIRECTORY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] DROP CONSTRAINT IF EXISTS [RSCNOT_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] ADD CONSTRAINT [RFLNOT_DB_CREATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [DB_CREATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] DROP CONSTRAINT IF EXISTS [RSCNOT_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] ADD CONSTRAINT [RFLNOT_DB_CREATE_USERID_DEF] DEFAULT (user_name()) FOR [DB_CREATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] DROP CONSTRAINT IF EXISTS [RSCNOT_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] ADD CONSTRAINT [RFLNOT_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [DB_LAST_UPDATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] DROP CONSTRAINT IF EXISTS [RSCNOT_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] ADD CONSTRAINT [RFLNOT_DB_LAST_UPDATE_USERID_DEF] DEFAULT (user_name()) FOR [DB_LAST_UPDATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]
	ADD CONSTRAINT [RFLNOT_PK]
	PRIMARY KEY CLUSTERED ([RESEARCH_FILE_NOTE_ID], [RESEARCH_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.RFLNOT_RSRCH_FILE_NOTE_TUC
PRINT N'Create unique constraint dbo.RFLNOT_RSRCH_FILE_NOTE_TUC'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]
	ADD CONSTRAINT [RFLNOT_RSRCH_FILE_NOTE_TUC]
	UNIQUE ([NOTE_ID], [RESEARCH_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_NOTE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_NOTE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_NOTE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_NOTE
PRINT N'Create table dbo.PIMS_LEASE_NOTE'
GO
CREATE TABLE [dbo].[PIMS_LEASE_NOTE]  ( 
	[LEASE_NOTE_ID]                 	bigint NOT NULL CONSTRAINT [LESNOT_LEASE_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_NOTE_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [LESNOT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LESNOT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LESNOT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LESNOT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LESNOT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LESNOT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LESNOT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LESNOT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LESNOT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [LESNOT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LESNOT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LESNOT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LESNOT_PK] PRIMARY KEY CLUSTERED([LEASE_NOTE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_NOTE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the relationship betwwen a lease and a note.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_NOTE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.LESNOT_LEASE_NOTE_TUC
PRINT N'Create unique constraint dbo.LESNOT_LEASE_NOTE_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
	ADD CONSTRAINT [LESNOT_LEASE_NOTE_TUC]
	UNIQUE ([NOTE_ID], [LEASE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_CONSULTATION_STATUS_TYPE
PRINT N'Create table dbo.PIMS_CONSULTATION_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE]  ( 
	[CONSULTATION_STATUS_TYPE_CODE]	varchar(20) NOT NULL CONSTRAINT [CONSTY_CONSULTATION_STATUS_TYPE_CODE_DEF]  DEFAULT ('OTHER'),
	[DESCRIPTION]                  	nvarchar(200) NOT NULL CONSTRAINT [CONSTY_DESCRIPTION_DEF]  DEFAULT ('<Empty>'),
	[DISPLAY_ORDER]                	int NULL,
	[IS_DISABLED]                  	bit NOT NULL CONSTRAINT [CONSTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]   	bigint NOT NULL CONSTRAINT [CONSTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [CONSTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [CONSTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [CONSTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [CONSTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CONSTY_PK] PRIMARY KEY CLUSTERED([CONSULTATION_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the consultation status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONSULTATION_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the consultation status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Onscreen display order of the consultation types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the consultation status  type is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the consultation status type for (currently) a lease or license.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_CONSULTATION_TYPE
PRINT N'Create table dbo.PIMS_CONSULTATION_TYPE'
GO
CREATE TABLE [dbo].[PIMS_CONSULTATION_TYPE]  ( 
	[CONSULTATION_TYPE_CODE]       	varchar(20) NOT NULL CONSTRAINT [CONTYP_CONSULTATION_TYPE_CODE_DEF]  DEFAULT ('OTHER'),
	[CONSULTATION_STATUS_TYPE_CODE]	varchar(20) NOT NULL,
	[DESCRIPTION]                  	nvarchar(200) NOT NULL CONSTRAINT [CONTYP_DESCRIPTION_DEF]  DEFAULT ('<Empty>'),
	[OTHER_DESCRIPTION]            	nvarchar(200) NULL,
	[DISPLAY_ORDER]                	int NULL,
	[IS_DISABLED]                  	bit NOT NULL CONSTRAINT [CONTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]   	bigint NOT NULL CONSTRAINT [CONTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [CONTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [CONTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [CONTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [CONTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CONTYP_PK] PRIMARY KEY CLUSTERED([CONSULTATION_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the consultation type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_TYPE', 
	@level2type = N'Column', @level2name = N'CONSULTATION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the consultation type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Additional descriptive text of the consultation type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_TYPE', 
	@level2type = N'Column', @level2name = N'OTHER_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Onscreen display order of the consultation types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the consultation type is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the consultation type required for (currently) a lease or license.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_CONSULTATION_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_CONSULTATION_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_CONSULTATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_CONSULTATION
PRINT N'Create table dbo.PIMS_LEASE_CONSULTATION'
GO
CREATE TABLE [dbo].[PIMS_LEASE_CONSULTATION]  ( 
	[LEASE_CONSULTATION_ID]         	bigint NOT NULL CONSTRAINT [LESCON_LEASE_CONSULTATION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_CONSULTATION_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[CONSULTATION_TYPE_CODE]        	varchar(20) NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LESCON_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LESCON_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LESCON_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LESCON_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LESCON_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LESCON_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LESCON_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LESCON_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [LESCON_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LESCON_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LESCON_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[IS_DISABLED]                   	bit NULL CONSTRAINT [LESCON_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	CONSTRAINT [LESCON_PK] PRIMARY KEY CLUSTERED([LEASE_CONSULTATION_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.LESCON_LEASE_CONSULTATION_TUC
PRINT N'Create unique constraint dbo.LESCON_LEASE_CONSULTATION_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [LESCON_LEASE_CONSULTATION_TUC]
	UNIQUE ([CONSULTATION_TYPE_CODE], [LEASE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_DOCUMENT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_DOCUMENT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_DOCUMENT
PRINT N'Create table dbo.PIMS_LEASE_DOCUMENT'
GO
CREATE TABLE [dbo].[PIMS_LEASE_DOCUMENT]  ( 
	[LEASE_DOCUMENT_ID]             	bigint NOT NULL CONSTRAINT [LESDOC_LEASE_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_DOCUMENT_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [LESDOC_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LESDOC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LESDOC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LESDOC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LESDOC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LESDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LESDOC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LESDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LESDOC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [LESDOC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LESDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LESDOC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LESDOC_PK] PRIMARY KEY CLUSTERED([LEASE_DOCUMENT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the relationship betwwen a lease and a document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_DOCUMENT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.LESDOC_LEASE_DOCUMENT_TUC
PRINT N'Create unique constraint dbo.LESDOC_LEASE_DOCUMENT_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
	ADD CONSTRAINT [LESDOC_LEASE_DOCUMENT_TUC]
	UNIQUE ([DOCUMENT_ID], [LEASE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_RESEARCH_FILE_PROJECT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_RESEARCH_FILE_PROJECT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_PROJECT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PROJCT_DESCRIPTION_CODE_TUC
PRINT N'Create unique constraint dbo.PROJCT_DESCRIPTION_CODE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROJECT]
	ADD CONSTRAINT [PROJCT_DESCRIPTION_CODE_TUC]
	UNIQUE ([DESCRIPTION], [CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_RESEARCH_FILE_PROJECT
PRINT N'Create table dbo.PIMS_RESEARCH_FILE_PROJECT'
GO
CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_PROJECT]  ( 
	[RESEARCH_FILE_PROJECT_ID]      	bigint NOT NULL CONSTRAINT [RFLPRJ_RESEARCH_FILE_PROJECT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_PROJECT_ID_SEQ]),
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[PROJECT_ID]                    	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [RFLPRJ_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [RFLPRJ_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RFLPRJ_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RFLPRJ_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RFLPRJ_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RFLPRJ_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RFLPRJ_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RFLPRJ_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RFLPRJ_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [RFLPRJ_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RFLPRJ_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RFLPRJ_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RFLPRJ_PK] PRIMARY KEY CLUSTERED([RESEARCH_FILE_PROJECT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_PROJECT', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the relationship betwwen a research file and a project.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_PROJECT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.RFLPRJ_RESEARCH_FILE_PROJECT_TUC
PRINT N'Create unique constraint dbo.RFLPRJ_RESEARCH_FILE_PROJECT_TUC'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PROJECT]
	ADD CONSTRAINT [RFLPRJ_RESEARCH_FILE_PROJECT_TUC]
	UNIQUE ([PROJECT_ID], [RESEARCH_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_NOTE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_NOTE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_NOTE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_NOTE_HIST
PRINT N'Create table dbo.PIMS_LEASE_NOTE_HIST'
GO
CREATE TABLE [dbo].[PIMS_LEASE_NOTE_HIST]  ( 
	[_LEASE_NOTE_HIST_ID]           	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_NOTE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_NOTE_ID]                 	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LESNOT_H_PK] PRIMARY KEY CLUSTERED([_LEASE_NOTE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_LESNOT_H_UK
PRINT N'Create unique constraint dbo.PIMS_LESNOT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE_HIST]
	ADD CONSTRAINT [PIMS_LESNOT_H_UK]
	UNIQUE ([_LEASE_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_RESEARCH_FILE_PROJECT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_RESEARCH_FILE_PROJECT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_PROJECT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_RESEARCH_FILE_PROJECT_HIST
PRINT N'Create table dbo.PIMS_RESEARCH_FILE_PROJECT_HIST'
GO
CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_PROJECT_HIST]  ( 
	[_RESEARCH_FILE_PROJECT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_PROJECT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[RESEARCH_FILE_PROJECT_ID]      	bigint NOT NULL,
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[PROJECT_ID]                    	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RFLPRJ_H_PK] PRIMARY KEY CLUSTERED([_RESEARCH_FILE_PROJECT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_RFLPRJ_H_UK
PRINT N'Create unique constraint dbo.PIMS_RFLPRJ_H_UK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PROJECT_HIST]
	ADD CONSTRAINT [PIMS_RFLPRJ_H_UK]
	UNIQUE ([_RESEARCH_FILE_PROJECT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_CONSULTATION_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_CONSULTATION_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_CONSULTATION_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_CONSULTATION_HIST
PRINT N'Create table dbo.PIMS_LEASE_CONSULTATION_HIST'
GO
CREATE TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST]  ( 
	[_LEASE_CONSULTATION_HIST_ID]   	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_CONSULTATION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_CONSULTATION_ID]         	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[CONSULTATION_TYPE_CODE]        	varchar(20) NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	CONSTRAINT [PIMS_LESCON_H_PK] PRIMARY KEY CLUSTERED([_LEASE_CONSULTATION_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_LESCON_H_UK
PRINT N'Create unique constraint dbo.PIMS_LESCON_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST]
	ADD CONSTRAINT [PIMS_LESCON_H_UK]
	UNIQUE ([_LEASE_CONSULTATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_NOTE_HIST
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_NOTE_HIST'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE_HIST]
	ADD CONSTRAINT [PIMS_RFLNOT_H_PK]
	PRIMARY KEY CLUSTERED ([_RESEARCH_FILE_NOTE_HIST_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_RFLNOT_H_UK
PRINT N'Create unique constraint dbo.PIMS_RFLNOT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE_HIST]
	ADD CONSTRAINT [PIMS_RFLNOT_H_UK]
	UNIQUE ([_RESEARCH_FILE_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_DOCUMENT_HIST
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_DOCUMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_RFLDOC_H_PK]
	PRIMARY KEY CLUSTERED ([_RESEARCH_FILE_DOCUMENT_HIST_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_RFLDOC_H_UK
PRINT N'Create unique constraint dbo.PIMS_RFLDOC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_RFLDOC_H_UK]
	UNIQUE ([_RESEARCH_FILE_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_DOCUMENT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_DOCUMENT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_DOCUMENT_HIST
PRINT N'Create table dbo.PIMS_LEASE_DOCUMENT_HIST'
GO
CREATE TABLE [dbo].[PIMS_LEASE_DOCUMENT_HIST]  ( 
	[_LEASE_DOCUMENT_HIST_ID]       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_DOCUMENT_ID]             	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LESDOC_H_PK] PRIMARY KEY CLUSTERED([_LEASE_DOCUMENT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_LESDOC_H_UK
PRINT N'Create unique constraint dbo.PIMS_LESDOC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_LESDOC_H_UK]
	UNIQUE ([_LEASE_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RFLDOC_RESEARCH_FILE_ID_IDX
PRINT N'Create index dbo.RFLDOC_RESEARCH_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [RFLDOC_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]([RESEARCH_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RFLDOC_DOCUMENT_ID_IDX
PRINT N'Create index dbo.RFLDOC_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [RFLDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RFLNOT_RESEARCH_FILE_ID_IDX
PRINT N'Create index dbo.RFLNOT_RESEARCH_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [RFLNOT_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_NOTE]([RESEARCH_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESNOT_NOTE_ID_IDX
PRINT N'Create index dbo.LESNOT_NOTE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LESNOT_NOTE_ID_IDX]
	ON [dbo].[PIMS_LEASE_NOTE]([NOTE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.CONTYP_CONSULTATION_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.CONTYP_CONSULTATION_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [CONTYP_CONSULTATION_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_CONSULTATION_TYPE]([CONSULTATION_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESCON_LEASE_ID_IDX
PRINT N'Create index dbo.LESCON_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LESCON_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESDOC_DOCUMENT_ID_IDX
PRINT N'Create index dbo.LESDOC_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LESDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_LEASE_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RFLNOT_NOTE_ID_IDX
PRINT N'Create index dbo.RFLNOT_NOTE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [RFLNOT_NOTE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_NOTE]([NOTE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESNOT_LEASE_ID_IDX
PRINT N'Create index dbo.LESNOT_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LESNOT_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_NOTE]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RFLPRJ_PROJECT_ID_IDX
PRINT N'Create index dbo.RFLPRJ_PROJECT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [RFLPRJ_PROJECT_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_PROJECT]([PROJECT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESCON_CONSULTATION_TYPE_CODE_IDX
PRINT N'Create index dbo.LESCON_CONSULTATION_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LESCON_CONSULTATION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([CONSULTATION_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RFLPRJ_RESEARCH_FILE_ID_IDX
PRINT N'Create index dbo.RFLPRJ_RESEARCH_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [RFLPRJ_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_PROJECT]([RESEARCH_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESDOC_LEASE_ID_IDX
PRINT N'Create index dbo.LESDOC_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LESDOC_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_DOCUMENT]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESNOT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LESNOT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESNOT_A_S_IUD_TR] ON PIMS_LEASE_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_NOTE_HIST set END_DATE_HIST = @curr_date where LEASE_NOTE_ID in (select LEASE_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_NOTE_HIST ([LEASE_NOTE_ID], [LEASE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_NOTE_ID], [LEASE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_NOTE_H_ID_SEQ]) as [_LEASE_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLPRJ_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_RFLPRJ_A_S_IUD_TR'
GO
--CREATE TRIGGER PIMS_RFLNOT_A_S_IUD_TR ON PIMS_RESEARCH_FILE_NOTE FOR INSERT, UPDATE, DELETE AS
--SET NOCOUNT ON
--BEGIN TRY
--DECLARE @curr_date datetime;
--SET @curr_date = getutcdate();
--  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
--    RETURN;
--
--  -- historical
--  IF EXISTS(SELECT * FROM deleted)
--    update PIMS_RESEARCH_FILE_NOTE_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_NOTE_ID in (select RESEARCH_FILE_NOTE_ID from deleted) and END_DATE_HIST is null;
--  
--  IF EXISTS(SELECT * FROM inserted)
--    insert into PIMS_RESEARCH_FILE_NOTE_HIST ([RESEARCH_FILE_NOTE_ID], [RESEARCH_FILE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
--      select [RESEARCH_FILE_NOTE_ID], [RESEARCH_FILE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_NOTE_H_ID_SEQ]) as [_RESEARCH_FILE_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;
--
--END TRY
--BEGIN CATCH
--   IF @@trancount > 0 ROLLBACK TRANSACTION
--   EXEC pims_error_handling
--END CATCH;
--go

CREATE TRIGGER [dbo].[PIMS_RFLPRJ_A_S_IUD_TR] ON PIMS_RESEARCH_FILE_PROJECT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_PROJECT_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_PROJECT_ID in (select RESEARCH_FILE_PROJECT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_PROJECT_HIST ([RESEARCH_FILE_PROJECT_ID], [RESEARCH_FILE_ID], [PROJECT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_PROJECT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_PROJECT_ID], [RESEARCH_FILE_ID], [PROJECT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_PROJECT_H_ID_SEQ]) as [_RESEARCH_FILE_PROJECT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CONSTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CONSTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CONSTY_I_S_U_TR] ON PIMS_CONSULTATION_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONSULTATION_STATUS_TYPE_CODE = deleted.CONSULTATION_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONSULTATION_STATUS_TYPE
    set "CONSULTATION_STATUS_TYPE_CODE" = inserted."CONSULTATION_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONSULTATION_STATUS_TYPE
    inner join inserted
    on (PIMS_CONSULTATION_STATUS_TYPE.CONSULTATION_STATUS_TYPE_CODE = inserted.CONSULTATION_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LESDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESDOC_I_S_U_TR] ON PIMS_LEASE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_DOCUMENT_ID = deleted.LEASE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_DOCUMENT
    set "LEASE_DOCUMENT_ID" = inserted."LEASE_DOCUMENT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_DOCUMENT
    inner join inserted
    on (PIMS_LEASE_DOCUMENT.LEASE_DOCUMENT_ID = inserted.LEASE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLDOC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_RFLDOC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RFLDOC_I_S_I_TR] ON PIMS_RESEARCH_FILE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE_DOCUMENT ("RESEARCH_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_ID",
      "DOCUMENT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_ID",
      "DOCUMENT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CONTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CONTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CONTYP_I_S_U_TR] ON PIMS_CONSULTATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONSULTATION_TYPE_CODE = deleted.CONSULTATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONSULTATION_TYPE
    set "CONSULTATION_TYPE_CODE" = inserted."CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE" = inserted."CONSULTATION_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "OTHER_DESCRIPTION" = inserted."OTHER_DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONSULTATION_TYPE
    inner join inserted
    on (PIMS_CONSULTATION_TYPE.CONSULTATION_TYPE_CODE = inserted.CONSULTATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLPRJ_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_RFLPRJ_I_S_I_TR'
GO
--CREATE TRIGGER PIMS_RFLNOT_I_S_I_TR ON PIMS_RESEARCH_FILE_NOTE INSTEAD OF INSERT AS
--SET NOCOUNT ON
--BEGIN TRY
--  IF NOT EXISTS(SELECT * FROM inserted) 
--    RETURN;
--
--  
--  insert into PIMS_RESEARCH_FILE_NOTE ("RESEARCH_FILE_NOTE_ID",
--      "RESEARCH_FILE_ID",
--      "NOTE_ID",
--      "IS_DISABLED",
--      "CONCURRENCY_CONTROL_NUMBER",
--      "APP_CREATE_TIMESTAMP",
--      "APP_CREATE_USERID",
--      "APP_CREATE_USER_GUID",
--      "APP_CREATE_USER_DIRECTORY",
--      "APP_LAST_UPDATE_TIMESTAMP",
--      "APP_LAST_UPDATE_USERID",
--      "APP_LAST_UPDATE_USER_GUID",
--      "APP_LAST_UPDATE_USER_DIRECTORY")
--    select "RESEARCH_FILE_NOTE_ID",
--      "RESEARCH_FILE_ID",
--      "NOTE_ID",
--      "IS_DISABLED",
--      "CONCURRENCY_CONTROL_NUMBER",
--      "APP_CREATE_TIMESTAMP",
--      "APP_CREATE_USERID",
--      "APP_CREATE_USER_GUID",
--      "APP_CREATE_USER_DIRECTORY",
--      "APP_LAST_UPDATE_TIMESTAMP",
--      "APP_LAST_UPDATE_USERID",
--      "APP_LAST_UPDATE_USER_GUID",
--      "APP_LAST_UPDATE_USER_DIRECTORY"
--    from inserted;
--
--END TRY
--BEGIN CATCH
--   IF @@trancount > 0 ROLLBACK TRANSACTION
--   EXEC pims_error_handling
--END CATCH;
--go
CREATE TRIGGER [dbo].[PIMS_RFLPRJ_I_S_I_TR] ON PIMS_RESEARCH_FILE_PROJECT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE_PROJECT ("RESEARCH_FILE_PROJECT_ID",
      "RESEARCH_FILE_ID",
      "PROJECT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_FILE_PROJECT_ID",
      "RESEARCH_FILE_ID",
      "PROJECT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLNOT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RFLNOT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RFLNOT_I_S_U_TR] ON PIMS_RESEARCH_FILE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_ID = deleted.RESEARCH_FILE_ID and inserted.RESEARCH_FILE_NOTE_ID = deleted.RESEARCH_FILE_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE_NOTE
    set "RESEARCH_FILE_NOTE_ID" = inserted."RESEARCH_FILE_NOTE_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_NOTE
    inner join inserted
    on (PIMS_RESEARCH_FILE_NOTE.RESEARCH_FILE_ID = inserted.RESEARCH_FILE_ID and PIMS_RESEARCH_FILE_NOTE.RESEARCH_FILE_NOTE_ID = inserted.RESEARCH_FILE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESCON_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LESCON_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESCON_A_S_IUD_TR] ON PIMS_LEASE_CONSULTATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_CONSULTATION_HIST set END_DATE_HIST = @curr_date where LEASE_CONSULTATION_ID in (select LEASE_CONSULTATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_CONSULTATION_HIST ([LEASE_CONSULTATION_ID], [LEASE_ID], [CONSULTATION_TYPE_CODE], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED], _LEASE_CONSULTATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_CONSULTATION_ID], [LEASE_ID], [CONSULTATION_TYPE_CODE], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED], (next value for [dbo].[PIMS_LEASE_CONSULTATION_H_ID_SEQ]) as [_LEASE_CONSULTATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLNOT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_RFLNOT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RFLNOT_A_S_IUD_TR] ON PIMS_RESEARCH_FILE_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_NOTE_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_ID in (select RESEARCH_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_NOTE_HIST ([RESEARCH_FILE_NOTE_ID], [RESEARCH_FILE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_NOTE_ID], [RESEARCH_FILE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_NOTE_H_ID_SEQ]) as [_RESEARCH_FILE_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESCON_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LESCON_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESCON_I_S_U_TR] ON PIMS_LEASE_CONSULTATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CONSULTATION_ID = deleted.LEASE_CONSULTATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CONSULTATION
    set "LEASE_CONSULTATION_ID" = inserted."LEASE_CONSULTATION_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "CONSULTATION_TYPE_CODE" = inserted."CONSULTATION_TYPE_CODE",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "IS_DISABLED" = inserted."IS_DISABLED"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CONSULTATION
    inner join inserted
    on (PIMS_LEASE_CONSULTATION.LEASE_CONSULTATION_ID = inserted.LEASE_CONSULTATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESNOT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LESNOT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESNOT_I_S_U_TR] ON PIMS_LEASE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_NOTE_ID = deleted.LEASE_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_NOTE
    set "LEASE_NOTE_ID" = inserted."LEASE_NOTE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_NOTE
    inner join inserted
    on (PIMS_LEASE_NOTE.LEASE_NOTE_ID = inserted.LEASE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESCON_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LESCON_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESCON_I_S_I_TR] ON PIMS_LEASE_CONSULTATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CONSULTATION ("LEASE_CONSULTATION_ID",
      "LEASE_ID",
      "CONSULTATION_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER",
      "IS_DISABLED")
    select "LEASE_CONSULTATION_ID",
      "LEASE_ID",
      "CONSULTATION_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER",
      "IS_DISABLED"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLDOC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_RFLDOC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RFLDOC_A_S_IUD_TR] ON PIMS_RESEARCH_FILE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_DOCUMENT_ID in (select RESEARCH_FILE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_DOCUMENT_HIST ([RESEARCH_FILE_DOCUMENT_ID], [RESEARCH_FILE_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_DOCUMENT_ID], [RESEARCH_FILE_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_DOCUMENT_H_ID_SEQ]) as [_RESEARCH_FILE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESDOC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LESDOC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESDOC_I_S_I_TR] ON PIMS_LEASE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_DOCUMENT ("LEASE_DOCUMENT_ID",
      "LEASE_ID",
      "DOCUMENT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_DOCUMENT_ID",
      "LEASE_ID",
      "DOCUMENT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CONSTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_CONSTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CONSTY_I_S_I_TR] ON PIMS_CONSULTATION_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CONSULTATION_STATUS_TYPE ("CONSULTATION_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "CONSULTATION_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CONTYP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_CONTYP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CONTYP_I_S_I_TR] ON PIMS_CONSULTATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CONSULTATION_TYPE ("CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "OTHER_DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "OTHER_DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RFLDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RFLDOC_I_S_U_TR] ON PIMS_RESEARCH_FILE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_DOCUMENT_ID = deleted.RESEARCH_FILE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE_DOCUMENT
    set "RESEARCH_FILE_DOCUMENT_ID" = inserted."RESEARCH_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_DOCUMENT
    inner join inserted
    on (PIMS_RESEARCH_FILE_DOCUMENT.RESEARCH_FILE_DOCUMENT_ID = inserted.RESEARCH_FILE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESDOC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LESDOC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESDOC_A_S_IUD_TR] ON PIMS_LEASE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where LEASE_DOCUMENT_ID in (select LEASE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_DOCUMENT_HIST ([LEASE_DOCUMENT_ID], [LEASE_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_DOCUMENT_ID], [LEASE_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_DOCUMENT_H_ID_SEQ]) as [_LEASE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESNOT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LESNOT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESNOT_I_S_I_TR] ON PIMS_LEASE_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_NOTE ("LEASE_NOTE_ID",
      "LEASE_ID",
      "NOTE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_NOTE_ID",
      "LEASE_ID",
      "NOTE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLNOT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_RFLNOT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RFLNOT_I_S_I_TR] ON PIMS_RESEARCH_FILE_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE_NOTE ("RESEARCH_FILE_NOTE_ID",
      "RESEARCH_FILE_ID",
      "NOTE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_FILE_NOTE_ID",
      "RESEARCH_FILE_ID",
      "NOTE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLPRJ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RFLPRJ_I_S_U_TR'
GO
--CREATE TRIGGER PIMS_RFLNOT_I_S_U_TR ON PIMS_RESEARCH_FILE_NOTE INSTEAD OF UPDATE AS
--SET NOCOUNT ON
--BEGIN TRY
--  IF NOT EXISTS(SELECT * FROM deleted) 
--    RETURN;
--
--  -- validate concurrency control
--  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_ID = deleted.RESEARCH_FILE_ID and inserted.RESEARCH_FILE_NOTE_ID = deleted.RESEARCH_FILE_NOTE_ID)
--    raiserror('CONCURRENCY FAILURE.',16,1)
--
--
--  -- update statement
--  update PIMS_RESEARCH_FILE_NOTE
--    set "RESEARCH_FILE_NOTE_ID" = inserted."RESEARCH_FILE_NOTE_ID",
--      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
--      "NOTE_ID" = inserted."NOTE_ID",
--      "IS_DISABLED" = inserted."IS_DISABLED",
--      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
--      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
--      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
--      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
--      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
--    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
--    , DB_LAST_UPDATE_USERID = user_name()
--    from PIMS_RESEARCH_FILE_NOTE
--    inner join inserted
--    on (PIMS_RESEARCH_FILE_NOTE.RESEARCH_FILE_ID = inserted.RESEARCH_FILE_ID and PIMS_RESEARCH_FILE_NOTE.RESEARCH_FILE_NOTE_ID = inserted.RESEARCH_FILE_NOTE_ID);
--
--END TRY
--BEGIN CATCH
--   IF @@trancount > 0 ROLLBACK TRANSACTION
--   EXEC pims_error_handling
--END CATCH;
--go
CREATE TRIGGER [dbo].[PIMS_RFLPRJ_I_S_U_TR] ON PIMS_RESEARCH_FILE_PROJECT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_PROJECT_ID = deleted.RESEARCH_FILE_PROJECT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE_PROJECT
    set "RESEARCH_FILE_PROJECT_ID" = inserted."RESEARCH_FILE_PROJECT_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_PROJECT
    inner join inserted
    on (PIMS_RESEARCH_FILE_PROJECT.RESEARCH_FILE_PROJECT_ID = inserted.RESEARCH_FILE_PROJECT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_RFLDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_RFLDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_RFLDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_RESRCH_PIM_RFLDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_RESRCH_PIM_RFLDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_RESRCH_PIM_RFLDOC_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_NOTE_PIM_RFLNOT_FK
PRINT N'Create foreign key constraint dbo.PIM_NOTE_PIM_RFLNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]
	ADD CONSTRAINT [PIM_NOTE_PIM_RFLNOT_FK]
	FOREIGN KEY([NOTE_ID])
	REFERENCES [dbo].[PIMS_NOTE]([NOTE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_RESRCH_PIM_RFLNOT_FK
PRINT N'Create foreign key constraint dbo.PIM_RESRCH_PIM_RFLNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]
	ADD CONSTRAINT [PIM_RESRCH_PIM_RFLNOT_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_NOTE_PIM_LESNOT_FK
PRINT N'Create foreign key constraint dbo.PIM_NOTE_PIM_LESNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
	ADD CONSTRAINT [PIM_NOTE_PIM_LESNOT_FK]
	FOREIGN KEY([NOTE_ID])
	REFERENCES [dbo].[PIMS_NOTE]([NOTE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_LESNOT_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_LESNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
	ADD CONSTRAINT [PIM_LEASE_PIM_LESNOT_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CONSTY_PIM_CONTYP_FK
PRINT N'Create foreign key constraint dbo.PIM_CONSTY_PIM_CONTYP_FK'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE]
	ADD CONSTRAINT [PIM_CONSTY_PIM_CONTYP_FK]
	FOREIGN KEY([CONSULTATION_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CONSULTATION_STATUS_TYPE]([CONSULTATION_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_LESCON_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_LEASE_PIM_LESCON_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK
PRINT N'Create foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_CONTYP_PIM_LESCON_FK]
	FOREIGN KEY([CONSULTATION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CONSULTATION_TYPE]([CONSULTATION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_LESDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_LESDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
	ADD CONSTRAINT [PIM_LEASE_PIM_LESDOC_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_LESDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_LESDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_LESDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_RESRCH_PIM_RFLPRJ_FK
PRINT N'Create foreign key constraint dbo.PIM_RESRCH_PIM_RFLPRJ_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PROJECT]
	ADD CONSTRAINT [PIM_RESRCH_PIM_RFLPRJ_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PROJCT_PIM_RFLPRJ_FK
PRINT N'Create foreign key constraint dbo.PIM_PROJCT_PIM_RFLPRJ_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PROJECT]
	ADD CONSTRAINT [PIM_PROJCT_PIM_RFLPRJ_FK]
	FOREIGN KEY([PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
