-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Wed Oct 12 14:39:27 PDT 2022
-- Execute this script on:
-- 		PSP_PIMS_S38_01/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S39_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQOWN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQOWN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQOWN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQOWN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQOWN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQOWN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQOWN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQOWN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQOWN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_ACQAIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_ACQAIN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_ACQAIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTINS_PIM_ACQAIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTINS_PIM_ACQAIN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTINS_PIM_ACQAIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTINS_PIM_AIPAFL_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTINS_PIM_AIPAFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTINS_PIM_AIPAFL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTINS_PIM_RSCHAI_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTINS_PIM_RSCHAI_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTINS_PIM_RSCHAI_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTINS_PIM_AIPRFL_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTINS_PIM_AIPRFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTINS_PIM_AIPRFL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_PRACQF_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_PRACQF_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_PRACQF_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_ACQPER_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_ACQPER_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_ACQPER_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTINS_PIM_ACTDOC_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTINS_PIM_ACTDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_ACTINS_PIM_ACTDOC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTINS_PIM_ACTINN_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTINS_PIM_ACTINN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTINS_PIM_ACTINN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_ACQOWN_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_ACQOWN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_ACQOWN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_RESPONSIBILITY_CENTRE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_RESPONSIBILITY_CENTRE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_RESPONSIBILITY_CENTRE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_GL_ACCOUNT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_GL_ACCOUNT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_GL_ACCOUNT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_YEARLY_FINANCIAL_CODE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_YEARLY_FINANCIAL_CODE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_YEARLY_FINANCIAL_CODE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE
PRINT N'Alter table dbo.PIMS_LEASE'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	ADD [TFA_FILE_NUMBER] nvarchar(50) NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Sourced from t_fileMain.TFA_File_Number || - || t_fileSub.Subfile_Sequence_Code' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'TFA_FILE_NUMBER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_OWNER
PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER'
GO
EXEC dbo.sp_rename N'dbo.PIMS_ACQUISITION_OWNER.OWNER_NAME' , N'LAST_NAME_OR_CORP_NAME_1', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER] DROP CONSTRAINT IF EXISTS [ACQOWN_OWNER_NAME_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER] ADD CONSTRAINT [ACQOWN_LAST_NAME_OR_CORP_NAME_1_DEF] DEFAULT ('<Empty>') FOR [LAST_NAME_OR_CORP_NAME_1]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Name of the owner (person or organization).  If person, surname.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'LAST_NAME_OR_CORP_NAME_1'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER]
	ADD [ADDRESS_ID] bigint NULL, 
	[LAST_NAME_OR_CORP_NAME_2] nvarchar(300) NULL, 
	[GIVEN_NAME] nvarchar(300) NULL, 
	[INCORPORATION_NUMBER] nvarchar(50) NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Optional.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'LAST_NAME_OR_CORP_NAME_2'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Given name of the owner (person).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'GIVEN_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Incorporation number of the organization.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'INCORPORATION_NUMBER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER]
	DROP COLUMN IF EXISTS [OWNER_COMMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_OWNER_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_ACQUISITION_OWNER_HIST.OWNER_NAME' , N'LAST_NAME_OR_CORP_NAME_1', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
--ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST] ADD DEFAULT '<Empty>' FOR [LAST_NAME_OR_CORP_NAME_1]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST]
	ADD [ADDRESS_ID] bigint NULL, 
	[LAST_NAME_OR_CORP_NAME_2] nvarchar(300) NULL, 
	[GIVEN_NAME] nvarchar(300) NULL, 
	[INCORPORATION_NUMBER] nvarchar(50) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST]
	DROP COLUMN IF EXISTS [OWNER_COMMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_HIST
PRINT N'Alter table dbo.PIMS_LEASE_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_HIST]
	ADD [TFA_FILE_NUMBER] nvarchar(50) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- *****************************************************************************
-- Remove duplicate rows prior to creation of unique constraint
-- *****************************************************************************
WITH CTE AS 
  (SELECT *
          , ROW_NUMBER() OVER (PARTITION BY PROPERTY_ID, LEASE_ID ORDER BY PROPERTY_ID, LEASE_ID) AS DupRow
   FROM     PIMS_PROPERTY_LEASE)
DELETE FROM CTE WHERE DupRow <> 1
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO


-- Create unique constraint dbo.PROPLS_PROPERTY_LEASE_TUC
PRINT N'Create unique constraint dbo.PROPLS_PROPERTY_LEASE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	ADD CONSTRAINT [PROPLS_PROPERTY_LEASE_TUC]
	UNIQUE ([LEASE_ID], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.TENANT_LEASE_PERSON_ORG_TUC
PRINT N'Create unique constraint dbo.TENANT_LEASE_PERSON_ORG_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	ADD CONSTRAINT [TENANT_LEASE_PERSON_ORG_TUC]
	UNIQUE ([ORGANIZATION_ID], [PERSON_ID], [LEASE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.ACRQST_USER_ROLE_REGION_TUC
PRINT N'Create unique constraint dbo.ACRQST_USER_ROLE_REGION_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST]
	ADD CONSTRAINT [ACRQST_USER_ROLE_REGION_TUC]
	UNIQUE ([REGION_CODE], [ROLE_ID], [USER_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PRPRTT_PROP_PROP_TENURE_TUC
PRINT N'Create unique constraint dbo.PRPRTT_PROP_PROP_TENURE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYPE]
	ADD CONSTRAINT [PRPRTT_PROP_PROP_TENURE_TUC]
	UNIQUE ([PROPERTY_TENURE_TYPE_CODE], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.RSFLPR_RSRCH_FL_RSRCH_FL_PURP_TUC
PRINT N'Create unique constraint dbo.RSFLPR_RSRCH_FL_RSRCH_FL_PURP_TUC'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE]
	ADD CONSTRAINT [RSFLPR_RSRCH_FL_RSRCH_FL_PURP_TUC]
	UNIQUE ([RESEARCH_PURPOSE_TYPE_CODE], [RESEARCH_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LEASE_TFA_FILE_NUMBER_IDX
PRINT N'Create index dbo.LEASE_TFA_FILE_NUMBER_IDX'
GO
CREATE NONCLUSTERED INDEX [LEASE_TFA_FILE_NUMBER_IDX]
	ON [dbo].[PIMS_LEASE]([TFA_FILE_NUMBER])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQOWN_ADDRESS_ID_IDX
PRINT N'Create index dbo.ACQOWN_ADDRESS_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQOWN_ADDRESS_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER]([ADDRESS_ID])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQOWN_LAST_NAME_OR_CORP_NAME_1_IDX
PRINT N'Create index dbo.ACQOWN_LAST_NAME_OR_CORP_NAME_1_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQOWN_LAST_NAME_OR_CORP_NAME_1_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER]([LAST_NAME_OR_CORP_NAME_1])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ADDRSS_PIM_ACQOWN_FK
PRINT N'Create foreign key constraint dbo.PIM_ADDRSS_PIM_ACQOWN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER]
	ADD CONSTRAINT [PIM_ADDRSS_PIM_ACQOWN_FK]
	FOREIGN KEY([ADDRESS_ID])
	REFERENCES [dbo].[PIMS_ADDRESS]([ADDRESS_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQOWN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQOWN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQOWN_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_ACTINN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_ACTINN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_ACTINN_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_ACTDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_ACTDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
	ADD CONSTRAINT [PIM_ACTINS_PIM_ACTDOC_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQPER_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQPER_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQPER_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_PRACQF_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_PRACQF_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_PRACQF_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_AIPRFL_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_AIPRFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_AIPRFL_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_RSCHAI_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_RSCHAI_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_RSCHAI_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_AIPAFL_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_AIPAFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_AIPAFL_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_ACQAIN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_ACQAIN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_ACQAIN_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQAIN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQAIN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQAIN_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_A_S_IUD_TR] ON PIMS_ACQUISITION_OWNER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_OWNER_HIST set END_DATE_HIST = @curr_date where ACQUISITION_OWNER_ID in (select ACQUISITION_OWNER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_OWNER_HIST ([ACQUISITION_OWNER_ID], [ACQUISITION_FILE_ID], [ADDRESS_ID], [LAST_NAME_OR_CORP_NAME_1], [LAST_NAME_OR_CORP_NAME_2], [GIVEN_NAME], [INCORPORATION_NUMBER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_OWNER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_OWNER_ID], [ACQUISITION_FILE_ID], [ADDRESS_ID], [LAST_NAME_OR_CORP_NAME_1], [LAST_NAME_OR_CORP_NAME_2], [GIVEN_NAME], [INCORPORATION_NUMBER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_OWNER_H_ID_SEQ]) as [_ACQUISITION_OWNER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_U_TR] ON PIMS_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_ID = deleted.LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE
    set "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE" = inserted."LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE" = inserted."LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE" = inserted."LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE" = inserted."LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE" = inserted."LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE" = inserted."LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE" = inserted."LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE" = inserted."LEASE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "L_FILE_NO" = inserted."L_FILE_NO",
      "TFA_FILE_NO" = inserted."TFA_FILE_NO",
      "TFA_FILE_NUMBER" = inserted."TFA_FILE_NUMBER",
      "PS_FILE_NO" = inserted."PS_FILE_NO",
      "LEASE_DESCRIPTION" = inserted."LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC" = inserted."LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC" = inserted."LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES" = inserted."LEASE_NOTES",
      "MOTI_CONTACT" = inserted."MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE" = inserted."DOCUMENTATION_REFERENCE",
      "RETURN_NOTES" = inserted."RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE" = inserted."OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE" = inserted."OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE" = inserted."OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE" = inserted."ORIG_START_DATE",
      "ORIG_EXPIRY_DATE" = inserted."ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT" = inserted."LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE" = inserted."RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE" = inserted."INSPECTION_DATE",
      "INSPECTION_NOTES" = inserted."INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA" = inserted."IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG" = inserted."IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT" = inserted."IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED" = inserted."IS_EXPIRED",
      "HAS_PHYSICAL_FILE" = inserted."HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE" = inserted."HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE" = inserted."HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE" = inserted."HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE
    inner join inserted
    on (PIMS_LEASE.LEASE_ID = inserted.LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_I_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_OWNER ("ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID",
      "ADDRESS_ID",
      "LAST_NAME_OR_CORP_NAME_1",
      "LAST_NAME_OR_CORP_NAME_2",
      "GIVEN_NAME",
      "INCORPORATION_NUMBER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID",
      "ADDRESS_ID",
      "LAST_NAME_OR_CORP_NAME_1",
      "LAST_NAME_OR_CORP_NAME_2",
      "GIVEN_NAME",
      "INCORPORATION_NUMBER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LEASE_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_A_S_IUD_TR] ON PIMS_LEASE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_HIST set END_DATE_HIST = @curr_date where LEASE_ID in (select LEASE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_HIST ([LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_H_ID_SEQ]) as [_LEASE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LEASE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_I_TR] ON PIMS_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE ("LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "TFA_FILE_NUMBER",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "TFA_FILE_NUMBER",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_U_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_OWNER_ID = deleted.ACQUISITION_OWNER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_OWNER
    set "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "LAST_NAME_OR_CORP_NAME_1" = inserted."LAST_NAME_OR_CORP_NAME_1",
      "LAST_NAME_OR_CORP_NAME_2" = inserted."LAST_NAME_OR_CORP_NAME_2",
      "GIVEN_NAME" = inserted."GIVEN_NAME",
      "INCORPORATION_NUMBER" = inserted."INCORPORATION_NUMBER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_OWNER
    inner join inserted
    on (PIMS_ACQUISITION_OWNER.ACQUISITION_OWNER_ID = inserted.ACQUISITION_OWNER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
