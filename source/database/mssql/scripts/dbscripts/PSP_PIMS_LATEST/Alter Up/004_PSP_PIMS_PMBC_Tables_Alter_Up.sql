-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Tue Oct 05 16:47:03 PDT 2021
-- Execute this script on:
-- 		PIMS_S09_01/pmbc - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PIMS_S09_02/pmbc

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table pmbc.PMBC_BCTFA_PID if not existing
PRINT N'Create table pmbc.PMBC_BCTFA_PID'
GO
IF NOT EXISTS (SELECT *
               FROM   information_schema.tables
               WHERE  table_schema = 'pmbc'
                  AND table_name   = 'PMBC_BCTFA_PID')
  BEGIN
  CREATE TABLE [pmbc].[PMBC_BCTFA_PID] (
    [PID] INTEGER NOT NULL,
    [IS_BCTFA_OWNED] BIT CONSTRAINT [TFAPID_IS_BCTFA_OWNED_DEF] DEFAULT 0,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [TFAPID_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [APP_CREATE_TIMESTAMP] DATETIME CONSTRAINT [TFAPID_APP_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_CREATE_USERID] NVARCHAR(30) CONSTRAINT [TFAPID_APP_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [APP_CREATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_CREATE_USER_DIRECTORY] NVARCHAR(30) CONSTRAINT [TFAPID_APP_CREATE_USER_DIRECTORY_DEF] DEFAULT user_name() NOT NULL,
    [APP_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [TFAPID_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [APP_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [TFAPID_APP_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [APP_LAST_UPDATE_USER_GUID] UNIQUEIDENTIFIER,
    [APP_LAST_UPDATE_USER_DIRECTORY] NVARCHAR(30) CONSTRAINT [TFAPID_APP_LAST_UPDATE_USER_DIRECTORY_DEF] DEFAULT user_name() NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [TFAPID_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [TFAPID_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [TFAPID_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [TFAPID_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [TFAPID_PK] PRIMARY KEY CLUSTERED ([PID])
  )
  
  EXECUTE sp_addextendedproperty N'MS_Description', N'Property identifier and primary key', 'SCHEMA', N'pmbc', 'TABLE', N'PMBC_BCTFA_PID', 'COLUMN', N'PID'
  EXECUTE sp_addextendedproperty N'MS_Description', N'Indicates if the property is owned by BCTFA', 'SCHEMA', N'pmbc', 'TABLE', N'PMBC_BCTFA_PID', 'COLUMN', N'IS_BCTFA_OWNED'
  EXECUTE sp_addextendedproperty N'MS_Description', N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any other application or user.', 'SCHEMA', N'pmbc', 'TABLE', N'PMBC_BCTFA_PID', 'COLUMN', N'CONCURRENCY_CONTROL_NUMBER'
  EXECUTE sp_addextendedproperty N'MS_Description', N'The date and time the user created the record.', 'SCHEMA', N'pmbc', 'TABLE', N'PMBC_BCTFA_PID', 'COLUMN', N'APP_CREATE_TIMESTAMP'
  EXECUTE sp_addextendedproperty N'MS_Description', N'The user account that created the record.', 'SCHEMA', N'pmbc', 'TABLE', N'PMBC_BCTFA_PID', 'COLUMN', N'APP_CREATE_USERID'
  EXECUTE sp_addextendedproperty N'MS_Description', N'The GUID of the user account that created the record.', 'SCHEMA', N'pmbc', 'TABLE', N'PMBC_BCTFA_PID', 'COLUMN', N'APP_CREATE_USER_GUID'
  EXECUTE sp_addextendedproperty N'MS_Description', N'The directory of the user account that created the record.', 'SCHEMA', N'pmbc', 'TABLE', N'PMBC_BCTFA_PID', 'COLUMN', N'APP_CREATE_USER_DIRECTORY'
  EXECUTE sp_addextendedproperty N'MS_Description', N'The date and time the user updated the record.', 'SCHEMA', N'pmbc', 'TABLE', N'PMBC_BCTFA_PID', 'COLUMN', N'APP_LAST_UPDATE_TIMESTAMP'
  EXECUTE sp_addextendedproperty N'MS_Description', N'The user account that updated the record.', 'SCHEMA', N'pmbc', 'TABLE', N'PMBC_BCTFA_PID', 'COLUMN', N'APP_LAST_UPDATE_USERID'
  EXECUTE sp_addextendedproperty N'MS_Description', N'The GUID of the user account that updated the record.', 'SCHEMA', N'pmbc', 'TABLE', N'PMBC_BCTFA_PID', 'COLUMN', N'APP_LAST_UPDATE_USER_GUID'
  EXECUTE sp_addextendedproperty N'MS_Description', N'The directory of the user account that updated the record.', 'SCHEMA', N'pmbc', 'TABLE', N'PMBC_BCTFA_PID', 'COLUMN', N'APP_LAST_UPDATE_USER_DIRECTORY'
  EXECUTE sp_addextendedproperty N'MS_Description', N'The date and time the record was created.', 'SCHEMA', N'pmbc', 'TABLE', N'PMBC_BCTFA_PID', 'COLUMN', N'DB_CREATE_TIMESTAMP'
  EXECUTE sp_addextendedproperty N'MS_Description', N'The user or proxy account that created the record.', 'SCHEMA', N'pmbc', 'TABLE', N'PMBC_BCTFA_PID', 'COLUMN', N'DB_CREATE_USERID'
  EXECUTE sp_addextendedproperty N'MS_Description', N'The date and time the record was created or last updated.', 'SCHEMA', N'pmbc', 'TABLE', N'PMBC_BCTFA_PID', 'COLUMN', N'DB_LAST_UPDATE_TIMESTAMP'
  EXECUTE sp_addextendedproperty N'MS_Description', N'The user or proxy account that created or last updated the record.', 'SCHEMA', N'pmbc', 'TABLE', N'PMBC_BCTFA_PID', 'COLUMN', N'DB_LAST_UPDATE_USERID'
  END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view pmbc.PMBC_BCTFA_PARCEL_POLYGON_FABRIC
PRINT N'Drop view pmbc.PMBC_BCTFA_PARCEL_POLYGON_FABRIC'
GO
IF EXISTS (SELECT *
           FROM   information_schema.views
           WHERE  table_schema = 'pmbc'
	            AND table_name   = 'PMBC_BCTFA_PARCEL_POLYGON_FABRIC')
  BEGIN
  DROP VIEW IF EXISTS [pmbc].[PMBC_BCTFA_PARCEL_POLYGON_FABRIC]
  END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view pmbc.PMBC_BCTFA_PARCEL_POLYGON_FABRIC
PRINT N'Create view pmbc.PMBC_BCTFA_PARCEL_POLYGON_FABRIC'
GO
CREATE VIEW pmbc.PMBC_BCTFA_PARCEL_POLYGON_FABRIC AS
  SELECT
    tfapid.PID,
    tfapid.IS_BCTFA_OWNED,
    tfapid.CONCURRENCY_CONTROL_NUMBER,
    tfapid.APP_CREATE_TIMESTAMP,
    tfapid.APP_CREATE_USERID,
    tfapid.APP_CREATE_USER_GUID,
    tfapid.APP_CREATE_USER_DIRECTORY,
    tfapid.APP_LAST_UPDATE_TIMESTAMP,
    tfapid.APP_LAST_UPDATE_USERID,
    tfapid.APP_LAST_UPDATE_USER_GUID,
    tfapid.APP_LAST_UPDATE_USER_DIRECTORY,
    tfapid.DB_CREATE_TIMESTAMP,
    tfapid.DB_CREATE_USERID,
    tfapid.DB_LAST_UPDATE_TIMESTAMP,
    tfapid.DB_LAST_UPDATE_USERID,
    fabric.PARCEL_FABRIC_POLY_ID,
    fabric.GLOBAL_UID,
    fabric.PARCEL_NAME,
    fabric.PLAN_ID,
    fabric.PLAN_NUMBER,
    fabric.PIN,
    fabric.PID_NUMBER,
    fabric.SOURCE_PARCEL_ID,
    fabric.PARCEL_STATUS,
    fabric.PARCEL_CLASS,
    fabric.OWNER_TYPE,
    fabric.PARCEL_START_DATE,
    fabric.SURVEY_DESIGNATION_1,
    fabric.SURVEY_DESIGNATION_2,
    fabric.SURVEY_DESIGNATION_3,
    fabric.LEGAL_DESCRIPTION,
    fabric.MUNICIPALITY,
    fabric.REGIONAL_DISTRICT,
    fabric.IS_REMAINDER_IND,
    fabric.GEOMETRY_SOURCE,
    fabric.POSITIONAL_ERROR,
    fabric.ERROR_REPORTED_BY,
    fabric.CAPTURE_METHOD,
    fabric.COMPILED_IND,
    fabric.STATED_AREA,
    fabric.WHEN_CREATED,
    fabric.WHEN_UPDATED,
    fabric.FEATURE_AREA_SQM,
    fabric.FEATURE_LENGTH_M,
    fabric.SHAPE,
    fabric.OBJECTID,
    fabric.SE_ANNO_CAD_DATA 
  FROM
     pmbc.PMBC_BCTFA_PID             tfapid INNER JOIN 
     pmbc.PMBC_PARCEL_POLYGON_FABRIC fabric ON tfapid.PID = fabric.PID
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
