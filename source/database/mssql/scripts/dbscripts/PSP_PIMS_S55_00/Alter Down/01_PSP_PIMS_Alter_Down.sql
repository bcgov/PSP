-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Thu Jun 01 12:55:37 PDT 2023
-- Execute this script on:
-- 		PIMS_PSP_S55_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PIMS_PSP_S54_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_IHPRIN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_IHPRIN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_IHPRIN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_IHPRIN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_IHPRIN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_IHPRIN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_IHPRIN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_IHPRIN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_IHPRIN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_INTHLD_PIM_IHPRIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_INTHLD_PIM_IHPRIN_FK'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	DROP CONSTRAINT IF EXISTS [PIM_INTHLD_PIM_IHPRIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_IHINTT_PIM_IHPRIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_IHINTT_PIM_IHPRIN_FK'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	DROP CONSTRAINT IF EXISTS [PIM_IHINTT_PIM_IHPRIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRACQF_PIM_IHPRIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRACQF_PIM_IHPRIN_FK'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	DROP CONSTRAINT IF EXISTS [PIM_PRACQF_PIM_IHPRIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK
PRINT N'Drop foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [PIM_CONTYP_PIM_LESCON_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK
PRINT N'Drop foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [PIM_CONSTY_PIM_LESCON_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_AQOWSO_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_AQOWSO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_AQOWSO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQPER_PIM_ACQPAY_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQPER_PIM_ACQPAY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	DROP CONSTRAINT IF EXISTS [PIM_ACQPER_PIM_ACQPAY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_AQOWSO_PIM_ACQPAY_FK
PRINT N'Drop foreign key constraint dbo.PIM_AQOWSO_PIM_ACQPAY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	DROP CONSTRAINT IF EXISTS [PIM_AQOWSO_PIM_ACQPAY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_INTHLD_PIM_ACQPAY_FK
PRINT N'Drop foreign key constraint dbo.PIM_INTHLD_PIM_ACQPAY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	DROP CONSTRAINT IF EXISTS [PIM_INTHLD_PIM_ACQPAY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_AQOWRP_PIM_ACQPAY_FK
PRINT N'Drop foreign key constraint dbo.PIM_AQOWRP_PIM_ACQPAY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	DROP CONSTRAINT IF EXISTS [PIM_AQOWRP_PIM_ACQPAY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_AQOWRP_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_AQOWRP_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_AQOWRP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_AQOWRP_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_AQOWRP_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_AQOWRP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_INTHLD_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_INTHLD_FK'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_INTHLD_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_INTHLD_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_INTHLD_FK'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_INTHLD_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_INTHLD_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_INTHLD_FK'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_INTHLD_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.IHPRIN_PROPERTY_ACQUISITION_FILE_ID_IDX
PRINT N'Drop index dbo.IHPRIN_PROPERTY_ACQUISITION_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_INTHLDR_PROP_INTEREST].[IHPRIN_PROPERTY_ACQUISITION_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.IHPRIN_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX
PRINT N'Drop index dbo.IHPRIN_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_INTHLDR_PROP_INTEREST].[IHPRIN_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.IHPRIN_INTEREST_HOLDER_ID_IDX
PRINT N'Drop index dbo.IHPRIN_INTEREST_HOLDER_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_INTHLDR_PROP_INTEREST].[IHPRIN_INTEREST_HOLDER_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_IHINTT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_IHINTT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_IHINTT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_IHINTT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_IHINTT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_IHINTT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INTHLD_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_INTHLD_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INTHLD_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.INTHLD_PERSON_ID_IDX
PRINT N'Drop index dbo.INTHLD_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_INTEREST_HOLDER].[INTHLD_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.INTHLD_ORGANIZATION_ID_IDX
PRINT N'Drop index dbo.INTHLD_ORGANIZATION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_INTEREST_HOLDER].[INTHLD_ORGANIZATION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.INTHLD_ACQUISITION_FILE_ID_IDX
PRINT N'Drop index dbo.INTHLD_ACQUISITION_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_INTEREST_HOLDER].[INTHLD_ACQUISITION_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQPAY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQPAY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQPAY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQOWSO_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_AQOWSO_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQOWSO_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQPCHQ_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_AQPCHQ_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQPCHQ_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQPCHQ_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_AQPCHQ_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQPCHQ_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQPCHQ_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AQPCHQ_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQPCHQ_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQPAY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQPAY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQPAY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQOWSO_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AQOWSO_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQOWSO_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQOWSO_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_AQOWSO_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQOWSO_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AQOWSO_PERSON_ID_IDX
PRINT N'Drop index dbo.AQOWSO_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR].[AQOWSO_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AQOWSO_ORGANIZATION_ID_IDX
PRINT N'Drop index dbo.AQOWSO_ORGANIZATION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR].[AQOWSO_ORGANIZATION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQPAY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQPAY_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQPAY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQPAY_OWNER_SOLICITOR_ID_IDX
PRINT N'Drop index dbo.ACQPAY_OWNER_SOLICITOR_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_PAYEE].[ACQPAY_OWNER_SOLICITOR_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQPAY_OWNER_REPRESENTATIVE_ID_IDX
PRINT N'Drop index dbo.ACQPAY_OWNER_REPRESENTATIVE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_PAYEE].[ACQPAY_OWNER_REPRESENTATIVE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQPAY_INTEREST_HOLDER_ID_IDX
PRINT N'Drop index dbo.ACQPAY_INTEREST_HOLDER_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_PAYEE].[ACQPAY_INTEREST_HOLDER_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQPAY_ACQUISITION_OWNER_ID_IDX
PRINT N'Drop index dbo.ACQPAY_ACQUISITION_OWNER_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_PAYEE].[ACQPAY_ACQUISITION_OWNER_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQPAY_ACQUISITION_FILE_PERSON_ID_IDX
PRINT N'Drop index dbo.ACQPAY_ACQUISITION_FILE_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_PAYEE].[ACQPAY_ACQUISITION_FILE_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQOWRP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AQOWRP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQOWRP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQOWRP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_AQOWRP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQOWRP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQOWRP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_AQOWRP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQOWRP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AQOWRP_PERSON_ID_IDX
PRINT N'Drop index dbo.AQOWRP_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_REP].[AQOWRP_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AQOWRP_ACQUISITION_FILE_ID_IDX
PRINT N'Drop index dbo.AQOWRP_ACQUISITION_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_REP].[AQOWRP_ACQUISITION_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INTHLD_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_INTHLD_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INTHLD_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INTHLD_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_INTHLD_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INTHLD_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_IHPRIN_H_UK
PRINT N'Drop unique constraint dbo.PIMS_IHPRIN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_IHPRIN_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_IHPRIN_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_IHPRIN_H_PK'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_IHPRIN_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.IHPRIN_PK
PRINT N'Drop primary key constraint dbo.IHPRIN_PK'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	DROP CONSTRAINT IF EXISTS [IHPRIN_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_INTHLDR_PROP_INTEREST
PRINT N'Drop table dbo.PIMS_INTHLDR_PROP_INTEREST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_INTHLDR_PROP_INTEREST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.IHINTT_PK
PRINT N'Drop primary key constraint dbo.IHINTT_PK'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER_INTEREST_TYPE]
	DROP CONSTRAINT IF EXISTS [IHINTT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_INTHLD_H_UK
PRINT N'Drop unique constraint dbo.PIMS_INTHLD_H_UK'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_INTHLD_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_INTHLD_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_INTHLD_H_PK'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_INTHLD_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.CONTYP_PK
PRINT N'Drop primary key constraint dbo.CONTYP_PK'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE]
	DROP CONSTRAINT IF EXISTS [CONTYP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.CONSTY_PK
PRINT N'Drop primary key constraint dbo.CONSTY_PK'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE]
	DROP CONSTRAINT IF EXISTS [CONSTY_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.AQOWSO_%column%_TCC
PRINT N'Drop check constraint dbo.AQOWSO_%column%_TCC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	DROP CONSTRAINT IF EXISTS [AQOWSO_%column%_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.AQOWSO_ACQUISITION_FILE_PERSON_TUC
PRINT N'Drop unique constraint dbo.AQOWSO_ACQUISITION_FILE_PERSON_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	DROP CONSTRAINT IF EXISTS [AQOWSO_ACQUISITION_FILE_PERSON_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.ACQPAY_COMP_REQ_PAYEE_TCC
PRINT N'Drop check constraint dbo.ACQPAY_COMP_REQ_PAYEE_TCC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	DROP CONSTRAINT IF EXISTS [ACQPAY_COMP_REQ_PAYEE_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_AQOWRP_H_UK
PRINT N'Drop unique constraint dbo.PIMS_AQOWRP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_AQOWRP_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_AQOWRP_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_AQOWRP_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_AQOWRP_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.AQOWRP_ACQUISITION_FILE_PERSON_TUC
PRINT N'Drop unique constraint dbo.AQOWRP_ACQUISITION_FILE_PERSON_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP]
	DROP CONSTRAINT IF EXISTS [AQOWRP_ACQUISITION_FILE_PERSON_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.AQOWRP_PK
PRINT N'Drop primary key constraint dbo.AQOWRP_PK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP]
	DROP CONSTRAINT IF EXISTS [AQOWRP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACQUISITION_OWNER_REP
PRINT N'Drop table dbo.PIMS_ACQUISITION_OWNER_REP'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_REP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.INTHLD_PERSON_ORGANIZATION_TCC
PRINT N'Drop check constraint dbo.INTHLD_PERSON_ORGANIZATION_TCC'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	DROP CONSTRAINT IF EXISTS [INTHLD_PERSON_ORGANIZATION_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.INTHLD_PK
PRINT N'Drop primary key constraint dbo.INTHLD_PK'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	DROP CONSTRAINT IF EXISTS [INTHLD_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_INTEREST_HOLDER
PRINT N'Drop table dbo.PIMS_INTEREST_HOLDER'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_INTEREST_HOLDER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_INTEREST_HOLDER_PROPERTY_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_INTEREST_HOLDER_PROPERTY_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_INTEREST_HOLDER_PROPERTY_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_PAYEE
PRINT N'Alter table dbo.PIMS_ACQUISITION_PAYEE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE] ALTER COLUMN [ACQUISITION_OWNER_ID] bigint NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	DROP COLUMN IF EXISTS [INTEREST_HOLDER_ID], [OWNER_REPRESENTATIVE_ID], [OWNER_SOLICITOR_ID], [ACQUISITION_FILE_PERSON_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_PAYEE_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_PAYEE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE_HIST] ALTER COLUMN [ACQUISITION_OWNER_ID] bigint NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE_HIST]
	DROP COLUMN IF EXISTS [INTEREST_HOLDER_ID], [OWNER_REPRESENTATIVE_ID], [OWNER_SOLICITOR_ID], [ACQUISITION_FILE_PERSON_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR
PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR] ALTER COLUMN [PERSON_ID] bigint NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	DROP COLUMN IF EXISTS [ORGANIZATION_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.AQOWSO_ACQUISITION_FILE_PERSON_TUC
PRINT N'Create unique constraint dbo.AQOWSO_ACQUISITION_FILE_PERSON_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	ADD CONSTRAINT [AQOWSO_ACQUISITION_FILE_PERSON_TUC]
	UNIQUE ([ACQUISITION_FILE_ID], [PERSON_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_HIST] ALTER COLUMN [PERSON_ID] bigint NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_HIST]
	DROP COLUMN IF EXISTS [ORGANIZATION_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_PAYEE_CHEQUE
PRINT N'Alter table dbo.PIMS_ACQ_PAYEE_CHEQUE'
GO
ALTER TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE]
	DROP CONSTRAINT IF EXISTS [AQPCHQ_IS_PAYMENT_IN_TRUST_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE]
	ADD [IS_GST_REQUIRED] bit NULL CONSTRAINT [AQPCHQ_IS_GST_REQUIRED_DEF] DEFAULT (CONVERT([bit],(0)))
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if GST is required for this transaction.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PAYEE_CHEQUE', 
	@level2type = N'Column', @level2name = N'IS_GST_REQUIRED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE]
	DROP COLUMN IF EXISTS [GST_NUMBER], [IS_PAYMENT_IN_TRUST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_PAYEE_CHEQUE_HIST
PRINT N'Alter table dbo.PIMS_ACQ_PAYEE_CHEQUE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE_HIST]
	ADD [IS_GST_REQUIRED] bit NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE_HIST]
	DROP COLUMN IF EXISTS [GST_NUMBER], [IS_PAYMENT_IN_TRUST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_CHKLST_SECTION_TYPE
PRINT N'Alter table dbo.PIMS_ACQ_CHKLST_SECTION_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ACQ_CHKLST_SECTION_TYPE] DROP CONSTRAINT IF EXISTS [AQCSCT_EFFECTIVE_DATE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_CHKLST_ITEM_TYPE
PRINT N'Alter table dbo.PIMS_ACQ_CHKLST_ITEM_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ACQ_CHKLST_ITEM_TYPE] DROP CONSTRAINT IF EXISTS [ACQCIT_EFFECTIVE_DATE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CONSULTATION_HIST
PRINT N'Alter table dbo.PIMS_LEASE_CONSULTATION_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST] ALTER COLUMN [CONSULTATION_TYPE_CODE] nvarchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST] ALTER COLUMN [CONSULTATION_STATUS_TYPE_CODE] nvarchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_CONSULTATION_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_CONSULTATION_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE] DROP CONSTRAINT IF EXISTS [CONSTY_CONSULTATION_STATUS_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE] ALTER COLUMN [CONSULTATION_STATUS_TYPE_CODE] nvarchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE] ADD CONSTRAINT [CONSTY_CONSULTATION_STATUS_TYPE_CODE_DEF] DEFAULT ('OTHER') FOR [CONSULTATION_STATUS_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create primary key constraint dbo.CONSTY_PK
PRINT N'Create primary key constraint dbo.CONSTY_PK'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE]
	ADD CONSTRAINT [CONSTY_PK]
	PRIMARY KEY CLUSTERED ([CONSULTATION_STATUS_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_CONSULTATION_TYPE
PRINT N'Alter table dbo.PIMS_CONSULTATION_TYPE'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE] DROP CONSTRAINT IF EXISTS [CONTYP_CONSULTATION_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE] ALTER COLUMN [CONSULTATION_TYPE_CODE] nvarchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE] ADD CONSTRAINT [CONTYP_CONSULTATION_TYPE_CODE_DEF] DEFAULT ('OTHER') FOR [CONSULTATION_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create primary key constraint dbo.CONTYP_PK
PRINT N'Create primary key constraint dbo.CONTYP_PK'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE]
	ADD CONSTRAINT [CONTYP_PK]
	PRIMARY KEY CLUSTERED ([CONSULTATION_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CONSULTATION
PRINT N'Alter table dbo.PIMS_LEASE_CONSULTATION'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION] ALTER COLUMN [CONSULTATION_TYPE_CODE] nvarchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION] DROP CONSTRAINT IF EXISTS [LESCON_CONSULTATION_STATUS_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION] ALTER COLUMN [CONSULTATION_STATUS_TYPE_CODE] nvarchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION] ADD CONSTRAINT [LESCON_CONSULTATION_STATUS_TYPE_CODE_DEF] DEFAULT ('UNKNOWN') FOR [CONSULTATION_STATUS_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPAY_ACQUISITION_OWNER_ID_IDX
PRINT N'Create index dbo.ACQPAY_ACQUISITION_OWNER_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPAY_ACQUISITION_OWNER_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_PAYEE]([ACQUISITION_OWNER_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_A_S_IUD_TR] ON PIMS_ACQUISITION_PAYEE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_PAYEE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_PAYEE_ID in (select ACQUISITION_PAYEE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_PAYEE_HIST ([ACQUISITION_PAYEE_ID], [ACQUISITION_OWNER_ID], [COMPENSATION_REQUISITION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_PAYEE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_PAYEE_ID], [ACQUISITION_OWNER_ID], [COMPENSATION_REQUISITION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_PAYEE_H_ID_SEQ]) as [_ACQUISITION_PAYEE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AQOWSO_PERSON_ID_IDX
PRINT N'Create index dbo.AQOWSO_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AQOWSO_PERSON_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQOWSO_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_AQOWSO_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQOWSO_A_S_IUD_TR] ON PIMS_ACQUISITION_OWNER_SOLICITOR FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_OWNER_SOLICITOR_HIST set END_DATE_HIST = @curr_date where OWNER_SOLICITOR_ID in (select OWNER_SOLICITOR_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_OWNER_SOLICITOR_HIST ([OWNER_SOLICITOR_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_OWNER_SOLICITOR_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [OWNER_SOLICITOR_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ]) as [_ACQUISITION_OWNER_SOLICITOR_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQOWSO_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AQOWSO_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQOWSO_I_S_U_TR] ON PIMS_ACQUISITION_OWNER_SOLICITOR INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.OWNER_SOLICITOR_ID = deleted.OWNER_SOLICITOR_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_OWNER_SOLICITOR
    set "OWNER_SOLICITOR_ID" = inserted."OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_OWNER_SOLICITOR
    inner join inserted
    on (PIMS_ACQUISITION_OWNER_SOLICITOR.OWNER_SOLICITOR_ID = inserted.OWNER_SOLICITOR_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_I_S_I_TR] ON PIMS_ACQUISITION_PAYEE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_PAYEE ("ACQUISITION_PAYEE_ID",
      "ACQUISITION_OWNER_ID",
      "COMPENSATION_REQUISITION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_PAYEE_ID",
      "ACQUISITION_OWNER_ID",
      "COMPENSATION_REQUISITION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQPCHQ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AQPCHQ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQPCHQ_I_S_U_TR] ON PIMS_ACQ_PAYEE_CHEQUE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_PAYEE_CHEQUE_ID = deleted.ACQ_PAYEE_CHEQUE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_PAYEE_CHEQUE
    set "ACQ_PAYEE_CHEQUE_ID" = inserted."ACQ_PAYEE_CHEQUE_ID",
      "ACQUISITION_PAYEE_ID" = inserted."ACQUISITION_PAYEE_ID",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "TAX_AMT" = inserted."TAX_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "IS_GST_REQUIRED" = inserted."IS_GST_REQUIRED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_PAYEE_CHEQUE
    inner join inserted
    on (PIMS_ACQ_PAYEE_CHEQUE.ACQ_PAYEE_CHEQUE_ID = inserted.ACQ_PAYEE_CHEQUE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQPCHQ_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_AQPCHQ_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQPCHQ_A_S_IUD_TR] ON PIMS_ACQ_PAYEE_CHEQUE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQ_PAYEE_CHEQUE_HIST set END_DATE_HIST = @curr_date where ACQ_PAYEE_CHEQUE_ID in (select ACQ_PAYEE_CHEQUE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQ_PAYEE_CHEQUE_HIST ([ACQ_PAYEE_CHEQUE_ID], [ACQUISITION_PAYEE_ID], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [IS_GST_REQUIRED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQ_PAYEE_CHEQUE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQ_PAYEE_CHEQUE_ID], [ACQUISITION_PAYEE_ID], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [IS_GST_REQUIRED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQ_PAYEE_CHEQUE_H_ID_SEQ]) as [_ACQ_PAYEE_CHEQUE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQPCHQ_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AQPCHQ_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQPCHQ_I_S_I_TR] ON PIMS_ACQ_PAYEE_CHEQUE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_PAYEE_CHEQUE ("ACQ_PAYEE_CHEQUE_ID",
      "ACQUISITION_PAYEE_ID",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "IS_GST_REQUIRED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQ_PAYEE_CHEQUE_ID",
      "ACQUISITION_PAYEE_ID",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "IS_GST_REQUIRED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQOWSO_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AQOWSO_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQOWSO_I_S_I_TR] ON PIMS_ACQUISITION_OWNER_SOLICITOR INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_OWNER_SOLICITOR ("OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_I_S_U_TR] ON PIMS_ACQUISITION_PAYEE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_PAYEE_ID = deleted.ACQUISITION_PAYEE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_PAYEE
    set "ACQUISITION_PAYEE_ID" = inserted."ACQUISITION_PAYEE_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_PAYEE
    inner join inserted
    on (PIMS_ACQUISITION_PAYEE.ACQUISITION_PAYEE_ID = inserted.ACQUISITION_PAYEE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK
PRINT N'Create foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_CONSTY_PIM_LESCON_FK]
	FOREIGN KEY([CONSULTATION_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CONSULTATION_STATUS_TYPE]([CONSULTATION_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK
PRINT N'Create foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_CONTYP_PIM_LESCON_FK]
	FOREIGN KEY([CONSULTATION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CONSULTATION_TYPE]([CONSULTATION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_INTHLDR_PROP_INTEREST_HIST
PRINT N'Drop table dbo.PIMS_INTHLDR_PROP_INTEREST_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_INTHLDR_PROP_INTEREST_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_INTHLDR_PROP_INTEREST_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_INTHLDR_PROP_INTEREST_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_INTHLDR_PROP_INTEREST_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_INTHLDR_PROP_INTEREST_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_INTHLDR_PROP_INTEREST_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_INTHLDR_PROP_INTEREST_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_INTEREST_HOLDER_INTEREST_TYPE
PRINT N'Drop table dbo.PIMS_INTEREST_HOLDER_INTEREST_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_INTEREST_HOLDER_INTEREST_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_INTEREST_HOLDER_HIST
PRINT N'Drop table dbo.PIMS_INTEREST_HOLDER_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_INTEREST_HOLDER_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_INTEREST_HOLDER_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_INTEREST_HOLDER_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_INTEREST_HOLDER_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACQUISITION_OWNER_REP_HIST
PRINT N'Drop table dbo.PIMS_ACQUISITION_OWNER_REP_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACQUISITION_OWNER_REP_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACQUISITION_OWNER_REP_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_REP_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_OWNER_REPRESENTATIVE_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_OWNER_REPRESENTATIVE_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_OWNER_REPRESENTATIVE_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_INTEREST_HOLDER_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_INTEREST_HOLDER_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_INTEREST_HOLDER_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
