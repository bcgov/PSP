-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Wed Apr 02 18:31:32 PDT 2025
-- Execute this script on:
-- 		PSP_PIMS_S101_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S102_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_EXPPMT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_EXPPMT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_EXPPMT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRSPRP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRSPRP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRSPRP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRRT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRRT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYPE]
	DROP CONSTRAINT IF EXISTS [PIM_PRPRTY_PIM_PRPRRT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRROAD_PIM_PRPRRT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRROAD_PIM_PRPRRT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYPE]
	DROP CONSTRAINT IF EXISTS [PIM_PRROAD_PIM_PRPRRT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_RRESPT_PIM_PRSPRP_FK
PRINT N'Drop foreign key constraint dbo.PIM_RRESPT_PIM_PRSPRP_FK'
GO
ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]
	DROP CONSTRAINT IF EXISTS [PIM_RRESPT_PIM_PRSPRP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRSCRC_PIM_PRSPRP_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRSCRC_PIM_PRSPRP_FK'
GO
ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]
	DROP CONSTRAINT IF EXISTS [PIM_PRSCRC_PIM_PRSPRP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRAT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRAT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]
	DROP CONSTRAINT IF EXISTS [PIM_PRPRTY_PIM_PRPRAT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRANOM_PIM_PRPRAT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRANOM_PIM_PRPRAT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]
	DROP CONSTRAINT IF EXISTS [PIM_PRANOM_PIM_PRPRAT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRTT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRTT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYPE]
	DROP CONSTRAINT IF EXISTS [PIM_PRPRTY_PIM_PRPRTT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPTNR_PIM_PRPRTT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPTNR_PIM_PRPRTT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYPE]
	DROP CONSTRAINT IF EXISTS [PIM_PRPTNR_PIM_PRPRTT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_IHPRIN_PIM_PIHITY_FK
PRINT N'Drop foreign key constraint dbo.PIM_IHPRIN_PIM_PIHITY_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]
	DROP CONSTRAINT IF EXISTS [PIM_IHPRIN_PIM_PIHITY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_IHINTT_PIM_PIHITY_FK
PRINT N'Drop foreign key constraint dbo.PIM_IHINTT_PIM_PIHITY_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]
	DROP CONSTRAINT IF EXISTS [PIM_IHINTT_PIM_PIHITY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQOWN_PIM_EXPNOT_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQOWN_PIM_EXPNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_NOTICE]
	DROP CONSTRAINT IF EXISTS [PIM_ACQOWN_PIM_EXPNOT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_EXPNOT_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_EXPNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_NOTICE]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_EXPNOT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_INTHLD_PIM_EXPNOT_FK
PRINT N'Drop foreign key constraint dbo.PIM_INTHLD_PIM_EXPNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_NOTICE]
	DROP CONSTRAINT IF EXISTS [PIM_INTHLD_PIM_EXPNOT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_EXPVST_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_EXPVST_FK'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_VESTING]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_EXPVST_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRSPRP_PROPERTY_RESEARCH_FILE_ID_IDX
PRINT N'Drop index dbo.PRSPRP_PROPERTY_RESEARCH_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE].[PRSPRP_PROPERTY_RESEARCH_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRSPRP_PROP_RESEARCH_PURPOSE_TYPE_CODE_IDX
PRINT N'Drop index dbo.PRSPRP_PROP_RESEARCH_PURPOSE_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE].[PRSPRP_PROP_RESEARCH_PURPOSE_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRTT_PROPERTY_TENURE_TYPE_CODE_IDX
PRINT N'Drop index dbo.PRPRTT_PROPERTY_TENURE_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_PROP_TENURE_TYPE].[PRPRTT_PROPERTY_TENURE_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRTT_PROPERTY_ID_IDX
PRINT N'Drop index dbo.PRPRTT_PROPERTY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_PROP_TENURE_TYPE].[PRPRTT_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRAT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRAT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRAT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRAT_PROPERTY_ID_IDX
PRINT N'Drop index dbo.PRPRAT_PROPERTY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE].[PRPRAT_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRAT_PROPERTY_ANOMALY_TYPE_CODE_IDX
PRINT N'Drop index dbo.PRPRAT_PROPERTY_ANOMALY_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE].[PRPRAT_PROPERTY_ANOMALY_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRRT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRRT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRRT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRRT_PROPERTY_ROAD_TYPE_CODE_IDX
PRINT N'Drop index dbo.PRPRRT_PROPERTY_ROAD_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_PROP_ROAD_TYPE].[PRPRRT_PROPERTY_ROAD_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRRT_PROPERTY_ID_IDX
PRINT N'Drop index dbo.PRPRRT_PROPERTY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_PROP_ROAD_TYPE].[PRPRRT_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRRT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRRT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRRT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRSPRP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRSPRP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRSPRP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_EXPPMT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_EXPPMT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_EXPPMT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRAT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRAT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRAT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PIHITY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PIHITY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PIHITY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PIHITY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PIHITY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PIHITY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PIHITY_PIMS_INTHLDR_PROP_INTEREST_ID_IDX
PRINT N'Drop index dbo.PIHITY_PIMS_INTHLDR_PROP_INTEREST_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE].[PIHITY_PIMS_INTHLDR_PROP_INTEREST_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PIHITY_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX
PRINT N'Drop index dbo.PIHITY_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE].[PIHITY_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_EXPPMT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_EXPPMT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_EXPPMT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_EXPNOT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_EXPNOT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_EXPNOT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_EXPNOT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_EXPNOT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_EXPNOT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_EXPNOT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_EXPNOT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_EXPNOT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.EXPNOT_INTEREST_HOLDER_ID_IDX
PRINT N'Drop index dbo.EXPNOT_INTEREST_HOLDER_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_EXPROPRIATION_NOTICE].[EXPNOT_INTEREST_HOLDER_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.EXPNOT_COMPENSATION_REQUISITION_ID_IDX
PRINT N'Drop index dbo.EXPNOT_COMPENSATION_REQUISITION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_EXPROPRIATION_NOTICE].[EXPNOT_COMPENSATION_REQUISITION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.EXPNOT_ACQUISITION_OWNER_ID_IDX
PRINT N'Drop index dbo.EXPNOT_ACQUISITION_OWNER_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_EXPROPRIATION_NOTICE].[EXPNOT_ACQUISITION_OWNER_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.EXPNOT_ACQUISITION_FILE_ID_IDX
PRINT N'Drop index dbo.EXPNOT_ACQUISITION_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_EXPROPRIATION_NOTICE].[EXPNOT_ACQUISITION_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_EXPVST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_EXPVST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_EXPVST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_EXPVST_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_EXPVST_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_EXPVST_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_EXPVST_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_EXPVST_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_EXPVST_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.EXPVST_COMPENSATION_REQUISITION_ID_IDX
PRINT N'Drop index dbo.EXPVST_COMPENSATION_REQUISITION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_EXPROPRIATION_VESTING].[EXPVST_COMPENSATION_REQUISITION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.EXPVST_ACQUISITION_FILE_ID_IDX
PRINT N'Drop index dbo.EXPVST_ACQUISITION_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_EXPROPRIATION_VESTING].[EXPVST_ACQUISITION_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_PROPERTY_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_PROPERTY_BOUNDARY_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_LOCATION_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_LOCATION_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_PROPERTY_LOCATION_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PRPRRT_PROP_ROAD_TYPE_TUC
PRINT N'Drop unique constraint dbo.PRPRRT_PROP_ROAD_TYPE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYPE]
	DROP CONSTRAINT IF EXISTS [PRPRRT_PROP_ROAD_TYPE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRPRRT_PK
PRINT N'Drop primary key constraint dbo.PRPRRT_PK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYPE]
	DROP CONSTRAINT IF EXISTS [PRPRRT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROP_PROP_ROAD_TYPE
PRINT N'Drop table dbo.PIMS_PROP_PROP_ROAD_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROP_PROP_ROAD_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PRSPRP_PROP_PURPOSE_TUC
PRINT N'Drop unique constraint dbo.PRSPRP_PROP_PURPOSE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]
	DROP CONSTRAINT IF EXISTS [PRSPRP_PROP_PURPOSE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRSPRP_PK
PRINT N'Drop primary key constraint dbo.PRSPRP_PK'
GO
ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]
	DROP CONSTRAINT IF EXISTS [PRSPRP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE
PRINT N'Drop table dbo.PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PRPRAT_PROP_ANOMALY_TYPE_TUC
PRINT N'Drop unique constraint dbo.PRPRAT_PROP_ANOMALY_TYPE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]
	DROP CONSTRAINT IF EXISTS [PRPRAT_PROP_ANOMALY_TYPE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRPRAT_PK
PRINT N'Drop primary key constraint dbo.PRPRAT_PK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]
	DROP CONSTRAINT IF EXISTS [PRPRAT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROP_PROP_ANOMALY_TYPE
PRINT N'Drop table dbo.PIMS_PROP_PROP_ANOMALY_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PRPRTT_PROP_PROP_TENURE_TUC
PRINT N'Drop unique constraint dbo.PRPRTT_PROP_PROP_TENURE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYPE]
	DROP CONSTRAINT IF EXISTS [PRPRTT_PROP_PROP_TENURE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRPRTT_PK
PRINT N'Drop primary key constraint dbo.PRPRTT_PK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYPE]
	DROP CONSTRAINT IF EXISTS [PRPRTT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROP_PROP_TENURE_TYPE
PRINT N'Drop table dbo.PIMS_PROP_PROP_TENURE_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROP_PROP_TENURE_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIHITY_PK
PRINT N'Drop primary key constraint dbo.PIHITY_PK'
GO
ALTER TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]
	DROP CONSTRAINT IF EXISTS [PIHITY_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROP_INTHLDR_INTEREST_TYPE
PRINT N'Drop table dbo.PIMS_PROP_INTHLDR_INTEREST_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.EXPNOT_PK
PRINT N'Drop primary key constraint dbo.EXPNOT_PK'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_NOTICE]
	DROP CONSTRAINT IF EXISTS [EXPNOT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_EXPROPRIATION_NOTICE
PRINT N'Drop table dbo.PIMS_EXPROPRIATION_NOTICE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_EXPROPRIATION_NOTICE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.EXPVST_PK
PRINT N'Drop primary key constraint dbo.EXPVST_PK'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_VESTING]
	DROP CONSTRAINT IF EXISTS [EXPVST_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_EXPROPRIATION_VESTING
PRINT N'Drop table dbo.PIMS_EXPROPRIATION_VESTING'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_EXPROPRIATION_VESTING]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create function dbo.pimsGetPKColumn
PRINT N'Create function dbo.pimsGetPKColumn'
GO
/*------------------------------------------------------------------------------
SQL Server function to return the primary key column of the specified table

Input Parameters
----------------
SchemaName: Database schema of the history table of interest.
TableName:  Name of the history table of interest.

Output Parameters
-----------------
PKColNm: The name of the primary key column for the table.

Author        Date         Comment
------------  -----------  -----------------------------------------------------
Doug Filteau  2025-Feb-27  Initial version.
------------------------------------------------------------------------------*/

CREATE FUNCTION [dbo].[pimsGetPKColumn] (@SchemaName nvarchar(128), @TableName nvarchar(128))
RETURNS nvarchar(128)
AS
  BEGIN
  DECLARE @Result   nvarchar(128)

  -- Retrieve the name of the primary key column from the specified table.
  SET @Result = (SELECT COLUMN_NAME
                 FROM   information_schema.key_column_usage
                 WHERE  OBJECTPROPERTY(OBJECT_ID(CONSTRAINT_SCHEMA + '.' + QUOTENAME(CONSTRAINT_NAME)), 'IsPrimaryKey') = 1
                    AND TABLE_SCHEMA = @SchemaName
                    AND TABLE_NAME   = @TableName)

  RETURN @Result 
  END

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMSX_TableDefinitions
PRINT N'Alter table dbo.PIMSX_TableDefinitions'
GO
ALTER TABLE [dbo].[PIMSX_TableDefinitions] ALTER COLUMN [TABLE_NAME] nvarchar(255) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table name.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMSX_TableDefinitions', 
	@level2type = N'Column', @level2name = N'TABLE_NAME'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table alias.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMSX_TableDefinitions', 
	@level2type = N'Column', @level2name = N'TABLE_ALIAS'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is history required for this table?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMSX_TableDefinitions', 
	@level2type = N'Column', @level2name = N'HIST_REQUIRED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMSX_TableDefinitions', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMSX_TableDefinitions]
	ADD [TABLE_SCHEMA] nvarchar(128) NOT NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table schema.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMSX_TableDefinitions', 
	@level2type = N'Column', @level2name = N'TABLE_SCHEMA'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMSX_TableDefinitions]
	ADD CONSTRAINT [TBLDFN_PK]
	PRIMARY KEY CLUSTERED ([TABLE_SCHEMA], [TABLE_NAME]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_PROP_ROAD_TYP
PRINT N'Create table dbo.PIMS_PROP_PROP_ROAD_TYP'
GO
CREATE TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYP]  ( 
	[PROP_PROP_ROAD_TYPE_ID]        	bigint NOT NULL CONSTRAINT [PRPRRT_PROP_PROP_ROAD_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ROAD_TYPE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_ROAD_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRPRRT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRRT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPRRT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRRT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPRRT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRRT_PK] PRIMARY KEY CLUSTERED([PROP_PROP_ROAD_TYPE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Resolves many-to-many relationship between PIMS_PROPERTY and PIMS_PROPERTY_ROAD_TYPE' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_ROAD_TYP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PRPRRT_PROP_ROAD_TYPE_TUC
PRINT N'Create unique constraint dbo.PRPRRT_PROP_ROAD_TYPE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYP]
	ADD CONSTRAINT [PRPRRT_PROP_ROAD_TYPE_TUC]
	UNIQUE ([PROPERTY_ROAD_TYPE_CODE], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_EXPROP_OWNER_HISTORY_ID_SEQ
PRINT N'Create sequence dbo.PIMS_EXPROP_OWNER_HISTORY_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_EXPROP_OWNER_HISTORY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD [PHYSICAL_FILE_DETAILS] nvarchar(2000) NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Comments to provide details about the physical acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'PHYSICAL_FILE_DETAILS'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_EXPROP_OWNER_HISTORY_TYPE
PRINT N'Create table dbo.PIMS_EXPROP_OWNER_HISTORY_TYPE'
GO
CREATE TABLE [dbo].[PIMS_EXPROP_OWNER_HISTORY_TYPE]  ( 
	[EXPROP_OWNER_HISTORY_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [XPOHTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [XPOHTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [XPOHTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [XPOHTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [XPOHTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [XPOHTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [XPOHTY_PK] PRIMARY KEY CLUSTERED([EXPROP_OWNER_HISTORY_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the owner history type status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY_TYPE', 
	@level2type = N'Column', @level2name = N'EXPROP_OWNER_HISTORY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the owner history type status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the codes and descriptions of the history types associated with a property owner associated with an expropriation.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_EXPROP_OWNER_HISTORY
PRINT N'Create table dbo.PIMS_EXPROP_OWNER_HISTORY'
GO
CREATE TABLE [dbo].[PIMS_EXPROP_OWNER_HISTORY]  ( 
	[EXPROP_OWNER_HISTORY_ID]       	bigint NOT NULL CONSTRAINT [XPOWNH_EXPROP_OWNER_HISTORY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_EXPROP_OWNER_HISTORY_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[ACQUISITION_OWNER_ID]          	bigint NULL,
	[INTEREST_HOLDER_ID]            	bigint NULL,
	[EXPROP_OWNER_HISTORY_TYPE_CODE]	nvarchar(20) NOT NULL,
	[EVENT_DT]                      	datetime NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [XPOWNH_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [XPOWNH_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [XPOWNH_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [XPOWNH_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [XPOWNH_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [XPOWNH_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [XPOWNH_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [XPOWNH_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [XPOWNH_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [XPOWNH_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [XPOWNH_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [XPOWNH_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [XPOWNH_PK] PRIMARY KEY CLUSTERED([EXPROP_OWNER_HISTORY_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'EXPROP_OWNER_HISTORY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQUISITION_FILE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQUISITION_HOLDER table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'ACQUISITION_OWNER_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_INTEREST_HOLDER table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'INTEREST_HOLDER_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_EXPROP_OWNER_HISTORY_TYPE file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'EXPROP_OWNER_HISTORY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of the expropriation owner event.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'EVENT_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the row is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity continaing the details regarding actions involving a property owner associated with an expropriation.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_OWNER_HISTORY'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_PROP_TENURE_TYP
PRINT N'Create table dbo.PIMS_PROP_PROP_TENURE_TYP'
GO
CREATE TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYP]  ( 
	[PROP_PROP_TENURE_TYPE_ID]      	bigint NOT NULL CONSTRAINT [PRPRTT_PROP_PROP_TENURE_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_TENURE_TYPE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_TENURE_TYPE_CODE]     	nvarchar(20) NOT NULL CONSTRAINT [PRPRTT_PROPERTY_TENURE_TYPE_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRPRTT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRTT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPRTT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRTT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPRTT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRTT_PK] PRIMARY KEY CLUSTERED([PROP_PROP_TENURE_TYPE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Resolves many-to-many relationship between PIMS_PROPERTY and PIMS_PROPERTY_TENURE_TYPE' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_TENURE_TYP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PRPRTT_PROP_PROP_TENURE_TUC
PRINT N'Create unique constraint dbo.PRPRTT_PROP_PROP_TENURE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYP]
	ADD CONSTRAINT [PRPRTT_PROP_PROP_TENURE_TUC]
	UNIQUE ([PROPERTY_TENURE_TYPE_CODE], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_INTHLDR_INTEREST_TYP
PRINT N'Create table dbo.PIMS_PROP_INTHLDR_INTEREST_TYP'
GO
CREATE TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYP]  ( 
	[PROP_INTHLDR_INTEREST_TYPE_ID]     	bigint NOT NULL CONSTRAINT [PIHITY_PROP_INTHLDR_INTEREST_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_INTHLDR_INTEREST_TYPE_ID_SEQ]),
	[PIMS_INTHLDR_PROP_INTEREST_ID]     	bigint NOT NULL,
	[INTEREST_HOLDER_INTEREST_TYPE_CODE]	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL CONSTRAINT [PIHITY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [PIHITY_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [PIHITY_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [PIHITY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PIHITY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PIHITY_PK] PRIMARY KEY CLUSTERED([PROP_INTHLDR_INTEREST_TYPE_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP
PRINT N'Create table dbo.PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP'
GO
CREATE TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP]  ( 
	[PRF_PROP_RESEARCH_PURPOSE_ID]   	bigint NOT NULL CONSTRAINT [PRSPRP_PRF_PROP_RESEARCH_PURPOSE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PRF_PROP_RESEARCH_PURPOSE_ID_SEQ]),
	[PROPERTY_RESEARCH_FILE_ID]      	bigint NULL,
	[PROP_RESEARCH_PURPOSE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [PRSPRP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRSPRP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRSPRP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [PRSPRP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRSPRP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRSPRP_PK] PRIMARY KEY CLUSTERED([PRF_PROP_RESEARCH_PURPOSE_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PRSPRP_PROP_PURPOSE_TUC
PRINT N'Create unique constraint dbo.PRSPRP_PROP_PURPOSE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP]
	ADD CONSTRAINT [PRSPRP_PROP_PURPOSE_TUC]
	UNIQUE ([PROP_RESEARCH_PURPOSE_TYPE_CODE], [PROPERTY_RESEARCH_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_PROP_ANOMALY_TYP
PRINT N'Create table dbo.PIMS_PROP_PROP_ANOMALY_TYP'
GO
CREATE TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYP]  ( 
	[PROP_PROP_ANOMALY_TYPE_ID]     	bigint NOT NULL CONSTRAINT [PRPRAT_PROP_PROP_ANOMALY_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ANOMALY_TYPE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_ANOMALY_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRPRAT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRAT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPRAT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRAT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPRAT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRAT_PK] PRIMARY KEY CLUSTERED([PROP_PROP_ANOMALY_TYPE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Resolves many-to-many relationship between PIMS_PROPERTY and PIMS_PROPERTY_ANOMALY_TYPE' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_ANOMALY_TYP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PRPRAT_PROP_ANOMALY_TYPE_TUC
PRINT N'Create unique constraint dbo.PRPRAT_PROP_ANOMALY_TYPE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYP]
	ADD CONSTRAINT [PRPRAT_PROP_ANOMALY_TYPE_TUC]
	UNIQUE ([PROPERTY_ANOMALY_TYPE_CODE], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_INTHLDR_INTEREST_TYP_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_INTHLDR_INTEREST_TYP_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYP_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_INTHLDR_INTEREST_TYP_HIST
PRINT N'Create table dbo.PIMS_PROP_INTHLDR_INTEREST_TYP_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYP_HIST]  ( 
	[_PROP_INTHLDR_INTEREST_TYP_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROP_INTHLDR_INTEREST_TYP_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[PROP_INTHLDR_INTEREST_TYPE_ID]     	bigint NOT NULL,
	[PIMS_INTHLDR_PROP_INTEREST_ID]     	bigint NOT NULL,
	[INTEREST_HOLDER_INTEREST_TYPE_CODE]	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PIHITY_H_PK] PRIMARY KEY CLUSTERED([_PROP_INTHLDR_INTEREST_TYP_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PIHITY_H_UK
PRINT N'Create unique constraint dbo.PIMS_PIHITY_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYP_HIST]
	ADD CONSTRAINT [PIMS_PIHITY_H_UK]
	UNIQUE ([_PROP_INTHLDR_INTEREST_TYP_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_EXPROPRIATION_PAYMENT
PRINT N'Alter table dbo.PIMS_EXPROPRIATION_PAYMENT'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT]
	DROP COLUMN IF EXISTS [ADV_PMT_SERVED_DT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST]
	ADD [PHYSICAL_FILE_DETAILS] nvarchar(2000) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_PROP_ROAD_TYP_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_PROP_ROAD_TYP_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_ROAD_TYP_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_PROP_ROAD_TYP_HIST
PRINT N'Create table dbo.PIMS_PROP_PROP_ROAD_TYP_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYP_HIST]  ( 
	[_PROP_PROP_ROAD_TYP_HIST_ID]   	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ROAD_TYP_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROP_PROP_ROAD_TYPE_ID]        	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_ROAD_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPRRT_H_PK] PRIMARY KEY CLUSTERED([_PROP_PROP_ROAD_TYP_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRPRRT_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRPRRT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYP_HIST]
	ADD CONSTRAINT [PIMS_PRPRRT_H_UK]
	UNIQUE ([_PROP_PROP_ROAD_TYP_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP_HIST
PRINT N'Create table dbo.PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP_HIST'
GO
CREATE TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP_HIST]  ( 
	[_PRF_PROP_RESEARCH_PURPOSE_TYP_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                   	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                         	datetime NULL,
	[PRF_PROP_RESEARCH_PURPOSE_ID]          	bigint NOT NULL,
	[PROPERTY_RESEARCH_FILE_ID]             	bigint NULL,
	[PROP_RESEARCH_PURPOSE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]            	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]                  	datetime NOT NULL,
	[APP_CREATE_USERID]                     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                  	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                   	datetime NOT NULL,
	[DB_CREATE_USERID]                      	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]                 	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRSPRP_H_PK] PRIMARY KEY CLUSTERED([_PRF_PROP_RESEARCH_PURPOSE_TYP_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRSPRP_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRSPRP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP_HIST]
	ADD CONSTRAINT [PIMS_PRSPRP_H_UK]
	UNIQUE ([_PRF_PROP_RESEARCH_PURPOSE_TYP_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_PROP_TENURE_TYP_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_PROP_TENURE_TYP_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_TENURE_TYP_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_PROP_TENURE_TYP_HIST
PRINT N'Create table dbo.PIMS_PROP_PROP_TENURE_TYP_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYP_HIST]  ( 
	[_PROP_PROP_TENURE_TYP_HIST_ID] 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_TENURE_TYP_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROP_PROP_TENURE_TYPE_ID]      	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_TENURE_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPRTT_H_PK] PRIMARY KEY CLUSTERED([_PROP_PROP_TENURE_TYP_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRPRTT_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRPRTT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYP_HIST]
	ADD CONSTRAINT [PIMS_PRPRTT_H_UK]
	UNIQUE ([_PROP_PROP_TENURE_TYP_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_EXPROP_OWNER_HISTORY_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_EXPROP_OWNER_HISTORY_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_EXPROP_OWNER_HISTORY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_EXPROP_OWNER_HISTORY_HIST
PRINT N'Create table dbo.PIMS_EXPROP_OWNER_HISTORY_HIST'
GO
CREATE TABLE [dbo].[PIMS_EXPROP_OWNER_HISTORY_HIST]  ( 
	[_EXPROP_OWNER_HISTORY_HIST_ID] 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_EXPROP_OWNER_HISTORY_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[EXPROP_OWNER_HISTORY_ID]       	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[ACQUISITION_OWNER_ID]          	bigint NULL,
	[INTEREST_HOLDER_ID]            	bigint NULL,
	[EXPROP_OWNER_HISTORY_TYPE_CODE]	nvarchar(20) NOT NULL,
	[EVENT_DT]                      	datetime NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_XPOWNH_H_PK] PRIMARY KEY CLUSTERED([_EXPROP_OWNER_HISTORY_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_XPOWNH_H_UK
PRINT N'Create unique constraint dbo.PIMS_XPOWNH_H_UK'
GO
ALTER TABLE [dbo].[PIMS_EXPROP_OWNER_HISTORY_HIST]
	ADD CONSTRAINT [PIMS_XPOWNH_H_UK]
	UNIQUE ([_EXPROP_OWNER_HISTORY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_PROP_ANOMALY_TYP_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_PROP_ANOMALY_TYP_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_ANOMALY_TYP_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_PROP_ANOMALY_TYP_HIST
PRINT N'Create table dbo.PIMS_PROP_PROP_ANOMALY_TYP_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYP_HIST]  ( 
	[_PROP_PROP_ANOMALY_TYP_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ANOMALY_TYP_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROP_PROP_ANOMALY_TYPE_ID]     	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_ANOMALY_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPRAT_H_PK] PRIMARY KEY CLUSTERED([_PROP_PROP_ANOMALY_TYP_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRPRAT_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRPRAT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYP_HIST]
	ADD CONSTRAINT [PIMS_PRPRAT_H_UK]
	UNIQUE ([_PROP_PROP_ANOMALY_TYP_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_LOCATION_VW
PRINT N'Create view dbo.PIMS_PROPERTY_LOCATION_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_LOCATION_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN                   
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TNUR.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE TNUR INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYP TNTY ON TNTY.PROPERTY_TENURE_TYPE_CODE = TNUR.PROPERTY_TENURE_TYPE_CODE
                                                     AND TNTY.PROPERTY_ID               = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.LOCATION AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.SURVEY_PLAN_NUMBER
     , PROP.IS_OWNED
     , PROP.IS_RETIRED    
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_DISPOSITION_FILE_PROPERTY DFPR JOIN
                          PIMS_DISPOSITION_FILE          DISP   ON DISP.DISPOSITION_FILE_ID = DFPR.DISPOSITION_FILE_ID
                                                               AND DFPR.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  DISP.DISPOSITION_FILE_STATUS_TYPE_CODE = N'COMPLETE'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_DISPOSED 
     , CASE
         WHEN EXISTS (SELECT 1    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID            
                      WHERE  TAKE.IS_NEW_LAND_ACT       = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE = 'COMPLETE'                                                                                                                              
                         AND TAKE.LAND_ACT_TYPE_CODE   IN (N'Section 15', N'Section 16', N'Section 17', N'Section 66', N'NOI')) THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_INTEREST_IN_SRW = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE  = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID                                                     
                      WHERE  TAKE.IS_NEW_LICENSE_TO_CONSTRUCT = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE       = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1                                                                                                                                    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  IS_ACTIVE_LEASE       = 1
                         AND TAKE_STATUS_TYPE_CODE = N'COMPLETE') THEN CONVERT([bit],(1))
         ELSE CONVERT([bit],(0))
         END AS IS_OTHER_INTEREST                                                                 
     , IIF(EXISTS (SELECT 1                        
                   FROM   PIMS_PROPERTY_ACQUISITION_FILE PRAF JOIN
                          PIMS_ACQUISITION_FILE          ACQF   ON ACQF.ACQUISITION_FILE_ID = PRAF.ACQUISITION_FILE_ID
                                                               AND PRAF.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  ACQF.ACQUISITION_FILE_STATUS_TYPE_CODE IN (N'DRAFT', N'ACTIVE')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS HAS_ACTIVE_ACQUISITION_FILE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_RESEARCH_FILE PRSF JOIN
                          PIMS_RESEARCH_FILE          RSHF   ON RSHF.RESEARCH_FILE_ID = PRSF.RESEARCH_FILE_ID
                                                            AND PRSF.PROPERTY_ID      = PROP.PROPERTY_ID
                   WHERE  RSHF.RESEARCH_FILE_STATUS_TYPE_CODE = N'ACTIVE'), CONVERT([bit],(1)), CONVERT([bit],(0)))  AS HAS_ACTIVE_RESEARCH_FILE                                                              
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN ('PYBLMOTI', 'PYBLBCTFA')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN ('PYBLMOTI', 'PYBLBCTFA')
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE        ) OR   
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_RECEIVABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN      
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE        ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_RECEIVABLE_LEASE                     
     , FNVW.HISTORICAL_FILE_NUMBER_STR
FROM   PIMS_PROPERTY                  PROP                                                    LEFT OUTER JOIN  
       PIMS_HISTORICAL_FILE_NUMBER_VW FNVW ON FNVW.PROPERTY_ID       = PROP.PROPERTY_ID       LEFT OUTER JOIN
       PIMS_ADDRESS                   ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE            PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY                   CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
WHERE  PROP.LOCATION IS NOT NULL

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Create view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_VW] AS
SELECT PROP.PROPERTY_ID                
     , PROP.PID      
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN                
     , PROP.PROPERTY_TYPE_CODE     
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TNUR.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE TNUR INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYP TNTY ON TNTY.PROPERTY_TENURE_TYPE_CODE = TNUR.PROPERTY_TENURE_TYPE_CODE
                                                     AND TNTY.PROPERTY_ID               = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE                                                                                                                             
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY  
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA                                            
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.SURVEY_PLAN_NUMBER
     , PROP.IS_OWNED        
     , PROP.IS_RETIRED   
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_DISPOSITION_FILE_PROPERTY DFPR JOIN
                          PIMS_DISPOSITION_FILE          DISP   ON DISP.DISPOSITION_FILE_ID = DFPR.DISPOSITION_FILE_ID
                                                               AND DFPR.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  DISP.DISPOSITION_FILE_STATUS_TYPE_CODE = N'COMPLETE'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_DISPOSED 
     , CASE
         WHEN EXISTS (SELECT 1    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID            
                      WHERE  TAKE.IS_NEW_LAND_ACT       = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE = 'COMPLETE'                                                                                                                              
                         AND TAKE.LAND_ACT_TYPE_CODE   IN (N'Section 15', N'Section 16', N'Section 17', N'Section 66', N'NOI')) THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_INTEREST_IN_SRW = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE  = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_LICENSE_TO_CONSTRUCT = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE       = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1                                                                                                                                    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  IS_ACTIVE_LEASE       = 1
                         AND TAKE_STATUS_TYPE_CODE = N'COMPLETE') THEN CONVERT([bit],(1))
         ELSE CONVERT([bit],(0))
         END AS IS_OTHER_INTEREST                                                                 
     , IIF(EXISTS (SELECT 1                        
                   FROM   PIMS_PROPERTY_ACQUISITION_FILE PRAF JOIN
                          PIMS_ACQUISITION_FILE          ACQF   ON ACQF.ACQUISITION_FILE_ID = PRAF.ACQUISITION_FILE_ID
                                                               AND PRAF.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  ACQF.ACQUISITION_FILE_STATUS_TYPE_CODE IN (N'DRAFT', N'ACTIVE')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS HAS_ACTIVE_ACQUISITION_FILE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_RESEARCH_FILE PRSF JOIN
                          PIMS_RESEARCH_FILE          RSHF   ON RSHF.RESEARCH_FILE_ID = PRSF.RESEARCH_FILE_ID
                                                            AND PRSF.PROPERTY_ID      = PROP.PROPERTY_ID
                   WHERE  RSHF.RESEARCH_FILE_STATUS_TYPE_CODE = N'ACTIVE'), CONVERT([bit],(1)), CONVERT([bit],(0)))  AS HAS_ACTIVE_RESEARCH_FILE                                                              
     , IIF(EXISTS (SELECT 1                                            
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN (N'PYBLMOTI', N'PYBLBCTFA')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_PAYABLE_LEASE   
     , IIF(EXISTS (SELECT 1                                                                                                            
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN (N'PYBLMOTI', N'PYBLBCTFA')
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE          ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL  ) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_RECEIVABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE          ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL  ) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_RECEIVABLE_LEASE          
     , FNVW.HISTORICAL_FILE_NUMBER_STR
FROM   PIMS_PROPERTY                  PROP                                                    LEFT OUTER JOIN 
       PIMS_HISTORICAL_FILE_NUMBER_VW FNVW ON FNVW.PROPERTY_ID       = PROP.PROPERTY_ID       LEFT OUTER JOIN         
       PIMS_ADDRESS                   ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE            PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY                   CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID   
WHERE  PROP.BOUNDARY IS NOT NULL

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_VW
PRINT N'Create view dbo.PIMS_PROPERTY_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID   
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TNUR.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE TNUR INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYP TNTY ON TNTY.PROPERTY_TENURE_TYPE_CODE = TNUR.PROPERTY_TENURE_TYPE_CODE
                                                     AND TNTY.PROPERTY_ID               = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY
     , PROP.BOUNDARY AS LOCATION
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.SURVEY_PLAN_NUMBER
     , PROP.IS_OWNED
     , PROP.IS_RETIRED    
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_DISPOSITION_FILE_PROPERTY DFPR JOIN
                          PIMS_DISPOSITION_FILE          DISP   ON DISP.DISPOSITION_FILE_ID = DFPR.DISPOSITION_FILE_ID
                                                               AND DFPR.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  DISP.DISPOSITION_FILE_STATUS_TYPE_CODE = N'COMPLETE'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_DISPOSED 
     , CASE
         WHEN EXISTS (SELECT 1    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID            
                      WHERE  TAKE.IS_NEW_LAND_ACT       = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE = 'COMPLETE'                                                                                                                              
                         AND TAKE.LAND_ACT_TYPE_CODE   IN (N'Section 15', N'Section 16', N'Section 17', N'Section 66', N'NOI')) THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_INTEREST_IN_SRW = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE  = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_LICENSE_TO_CONSTRUCT = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE       = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1                                                                                                                                    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  IS_ACTIVE_LEASE       = 1                        
                         AND TAKE_STATUS_TYPE_CODE = N'COMPLETE') THEN CONVERT([bit],(1))
         ELSE CONVERT([bit],(0))
         END AS IS_OTHER_INTEREST                                                                 
     , IIF(EXISTS (SELECT 1                        
                   FROM   PIMS_PROPERTY_ACQUISITION_FILE PRAF JOIN
                          PIMS_ACQUISITION_FILE          ACQF   ON ACQF.ACQUISITION_FILE_ID = PRAF.ACQUISITION_FILE_ID
                                                               AND PRAF.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  ACQF.ACQUISITION_FILE_STATUS_TYPE_CODE IN (N'DRAFT', N'ACTIVE')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS HAS_ACTIVE_ACQUISITION_FILE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_RESEARCH_FILE PRSF JOIN
                          PIMS_RESEARCH_FILE          RSHF   ON RSHF.RESEARCH_FILE_ID = PRSF.RESEARCH_FILE_ID
                                                            AND PRSF.PROPERTY_ID      = PROP.PROPERTY_ID
                   WHERE  RSHF.RESEARCH_FILE_STATUS_TYPE_CODE = N'ACTIVE'), CONVERT([bit],(1)), CONVERT([bit],(0)))  AS HAS_ACTIVE_RESEARCH_FILE                                                              
     , IIF(EXISTS (SELECT 1                                            
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN (N'PYBLMOTI', N'PYBLBCTFA')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_PAYABLE_LEASE   
     , IIF(EXISTS (SELECT 1                                                                                                            
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN (N'PYBLMOTI', N'PYBLBCTFA')
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE          ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL  ) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_RECEIVABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE          ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL  ) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_RECEIVABLE_LEASE                 
     , FNVW.HISTORICAL_FILE_NUMBER_STR
FROM   PIMS_PROPERTY                  PROP                                                    LEFT OUTER JOIN  
       PIMS_HISTORICAL_FILE_NUMBER_VW FNVW ON FNVW.PROPERTY_ID       = PROP.PROPERTY_ID       LEFT OUTER JOIN
       PIMS_ADDRESS                   ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE            PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY                   CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRRT_PROPERTY_ROAD_TYPE_CODE_IDX
PRINT N'Create index dbo.PRPRRT_PROPERTY_ROAD_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRRT_PROPERTY_ROAD_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_PROP_ROAD_TYP]([PROPERTY_ROAD_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.XPOWNH_INTEREST_HOLDER_ID_IDX
PRINT N'Create index dbo.XPOWNH_INTEREST_HOLDER_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [XPOWNH_INTEREST_HOLDER_ID_IDX]
	ON [dbo].[PIMS_EXPROP_OWNER_HISTORY]([INTEREST_HOLDER_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.XPOWNH_ACQUISITION_OWNER_ID_IDX
PRINT N'Create index dbo.XPOWNH_ACQUISITION_OWNER_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [XPOWNH_ACQUISITION_OWNER_ID_IDX]
	ON [dbo].[PIMS_EXPROP_OWNER_HISTORY]([ACQUISITION_OWNER_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTT_PROPERTY_TENURE_TYPE_CODE_IDX
PRINT N'Create index dbo.PRPRTT_PROPERTY_TENURE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRTT_PROPERTY_TENURE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_PROP_TENURE_TYP]([PROPERTY_TENURE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PIHITY_PIMS_INTHLDR_PROP_INTEREST_ID_IDX
PRINT N'Create index dbo.PIHITY_PIMS_INTHLDR_PROP_INTEREST_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PIHITY_PIMS_INTHLDR_PROP_INTEREST_ID_IDX]
	ON [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYP]([PIMS_INTHLDR_PROP_INTEREST_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PIHITY_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX
PRINT N'Create index dbo.PIHITY_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PIHITY_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYP]([INTEREST_HOLDER_INTEREST_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRSPRP_PROPERTY_RESEARCH_FILE_ID_IDX
PRINT N'Create index dbo.PRSPRP_PROPERTY_RESEARCH_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRSPRP_PROPERTY_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP]([PROPERTY_RESEARCH_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTT_PROPERTY_ID_IDX
PRINT N'Create index dbo.PRPRTT_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRTT_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_TENURE_TYP]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRAT_PROPERTY_ANOMALY_TYPE_CODE_IDX
PRINT N'Create index dbo.PRPRAT_PROPERTY_ANOMALY_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRAT_PROPERTY_ANOMALY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_PROP_ANOMALY_TYP]([PROPERTY_ANOMALY_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.XPOWNH_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.XPOWNH_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [XPOWNH_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_EXPROP_OWNER_HISTORY]([ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.XPOWNH_EXPROP_OWNER_HISTORY_TYPE_CODE_IDX
PRINT N'Create index dbo.XPOWNH_EXPROP_OWNER_HISTORY_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [XPOWNH_EXPROP_OWNER_HISTORY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_EXPROP_OWNER_HISTORY]([EXPROP_OWNER_HISTORY_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRSPRP_PROP_RESEARCH_PURPOSE_TYPE_CODE_IDX
PRINT N'Create index dbo.PRSPRP_PROP_RESEARCH_PURPOSE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRSPRP_PROP_RESEARCH_PURPOSE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP]([PROP_RESEARCH_PURPOSE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRAT_PROPERTY_ID_IDX
PRINT N'Create index dbo.PRPRAT_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRAT_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ANOMALY_TYP]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRRT_PROPERTY_ID_IDX
PRINT N'Create index dbo.PRPRRT_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRRT_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ROAD_TYP]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PIHITY_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PIHITY_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PIHITY_A_S_IUD_TR] ON PIMS_PROP_INTHLDR_INTEREST_TYP FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_INTHLDR_INTEREST_TYP_HIST set END_DATE_HIST = @curr_date where PROP_INTHLDR_INTEREST_TYPE_ID in (select PROP_INTHLDR_INTEREST_TYPE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_INTHLDR_INTEREST_TYP_HIST ([PROP_INTHLDR_INTEREST_TYPE_ID], [PIMS_INTHLDR_PROP_INTEREST_ID], [INTEREST_HOLDER_INTEREST_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_INTHLDR_INTEREST_TYP_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_INTHLDR_INTEREST_TYPE_ID], [PIMS_INTHLDR_PROP_INTEREST_ID], [INTEREST_HOLDER_INTEREST_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYP_H_ID_SEQ]) as [_PROP_INTHLDR_INTEREST_TYP_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_I_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE ("ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "SUBFILE_INTEREST_TYPE_CODE",
      "ACQ_FILE_APPRAISAL_TYPE_CODE",
      "ACQ_FILE_LGL_SRVY_TYPE_CODE",
      "ACQ_FILE_EXPROP_RISK_TYPE_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NO_SUFFIX",
      "LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "OTHER_SUBFILE_INTEREST_TYPE",
      "EST_COMPLETION_DT",
      "POSSESSION_DT",
      "PHYSICAL_FILE_DETAILS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "SUBFILE_INTEREST_TYPE_CODE",
      "ACQ_FILE_APPRAISAL_TYPE_CODE",
      "ACQ_FILE_LGL_SRVY_TYPE_CODE",
      "ACQ_FILE_EXPROP_RISK_TYPE_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NO_SUFFIX",
      "LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "OTHER_SUBFILE_INTEREST_TYPE",
      "EST_COMPLETION_DT",
      "POSSESSION_DT",
      "PHYSICAL_FILE_DETAILS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_EXPPMT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_EXPPMT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_EXPPMT_I_S_I_TR] ON PIMS_EXPROPRIATION_PAYMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_EXPROPRIATION_PAYMENT ("EXPROPRIATION_PAYMENT_ID",
      "ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "EXPROPRIATING_AUTHORITY",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "EXPROPRIATION_PAYMENT_ID",
      "ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "EXPROPRIATING_AUTHORITY",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PIHITY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PIHITY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PIHITY_I_S_I_TR] ON PIMS_PROP_INTHLDR_INTEREST_TYP INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_INTHLDR_INTEREST_TYP ("PROP_INTHLDR_INTEREST_TYPE_ID",
      "PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_INTHLDR_INTEREST_TYPE_ID",
      "PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_XPOHTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_XPOHTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_XPOHTY_I_S_U_TR] ON PIMS_EXPROP_OWNER_HISTORY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.EXPROP_OWNER_HISTORY_TYPE_CODE = deleted.EXPROP_OWNER_HISTORY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_EXPROP_OWNER_HISTORY_TYPE
    set "EXPROP_OWNER_HISTORY_TYPE_CODE" = inserted."EXPROP_OWNER_HISTORY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_EXPROP_OWNER_HISTORY_TYPE
    inner join inserted
    on (PIMS_EXPROP_OWNER_HISTORY_TYPE.EXPROP_OWNER_HISTORY_TYPE_CODE = inserted.EXPROP_OWNER_HISTORY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRTT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTT_I_S_U_TR] ON PIMS_PROP_PROP_TENURE_TYP INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_TENURE_TYPE_ID = deleted.PROP_PROP_TENURE_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_TENURE_TYP
    set "PROP_PROP_TENURE_TYPE_ID" = inserted."PROP_PROP_TENURE_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_TENURE_TYPE_CODE" = inserted."PROPERTY_TENURE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_TENURE_TYP
    inner join inserted
    on (PIMS_PROP_PROP_TENURE_TYP.PROP_PROP_TENURE_TYPE_ID = inserted.PROP_PROP_TENURE_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PIHITY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PIHITY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PIHITY_I_S_U_TR] ON PIMS_PROP_INTHLDR_INTEREST_TYP INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_INTHLDR_INTEREST_TYPE_ID = deleted.PROP_INTHLDR_INTEREST_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_INTHLDR_INTEREST_TYP
    set "PROP_INTHLDR_INTEREST_TYPE_ID" = inserted."PROP_INTHLDR_INTEREST_TYPE_ID",
      "PIMS_INTHLDR_PROP_INTEREST_ID" = inserted."PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_INTEREST_TYPE_CODE" = inserted."INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_INTHLDR_INTEREST_TYP
    inner join inserted
    on (PIMS_PROP_INTHLDR_INTEREST_TYP.PROP_INTHLDR_INTEREST_TYPE_ID = inserted.PROP_INTHLDR_INTEREST_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_ID in (select ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_HIST ([ACQUISITION_FILE_ID], [PRNT_ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [SUBFILE_INTEREST_TYPE_CODE], [ACQ_FILE_APPRAISAL_TYPE_CODE], [ACQ_FILE_LGL_SRVY_TYPE_CODE], [ACQ_FILE_EXPROP_RISK_TYPE_CODE], [FILE_NAME], [FILE_NO], [FILE_NO_SUFFIX], [LEGACY_FILE_NUMBER], [LEGACY_STAKEHOLDER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [PAIMS_ACQUISITION_FILE_ID], [TOTAL_ALLOWABLE_COMPENSATION], [OTHER_SUBFILE_INTEREST_TYPE], [EST_COMPLETION_DT], [POSSESSION_DT], [PHYSICAL_FILE_DETAILS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_ID], [PRNT_ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [SUBFILE_INTEREST_TYPE_CODE], [ACQ_FILE_APPRAISAL_TYPE_CODE], [ACQ_FILE_LGL_SRVY_TYPE_CODE], [ACQ_FILE_EXPROP_RISK_TYPE_CODE], [FILE_NAME], [FILE_NO], [FILE_NO_SUFFIX], [LEGACY_FILE_NUMBER], [LEGACY_STAKEHOLDER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [PAIMS_ACQUISITION_FILE_ID], [TOTAL_ALLOWABLE_COMPENSATION], [OTHER_SUBFILE_INTEREST_TYPE], [EST_COMPLETION_DT], [POSSESSION_DT], [PHYSICAL_FILE_DETAILS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_H_ID_SEQ]) as [_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_XPOWNH_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_XPOWNH_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_XPOWNH_I_S_U_TR] ON PIMS_EXPROP_OWNER_HISTORY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.EXPROP_OWNER_HISTORY_ID = deleted.EXPROP_OWNER_HISTORY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_EXPROP_OWNER_HISTORY
    set "EXPROP_OWNER_HISTORY_ID" = inserted."EXPROP_OWNER_HISTORY_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "EXPROP_OWNER_HISTORY_TYPE_CODE" = inserted."EXPROP_OWNER_HISTORY_TYPE_CODE",
      "EVENT_DT" = inserted."EVENT_DT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_EXPROP_OWNER_HISTORY
    inner join inserted
    on (PIMS_EXPROP_OWNER_HISTORY.EXPROP_OWNER_HISTORY_ID = inserted.EXPROP_OWNER_HISTORY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRAT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAT_I_S_U_TR] ON PIMS_PROP_PROP_ANOMALY_TYP INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_ANOMALY_TYPE_ID = deleted.PROP_PROP_ANOMALY_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_ANOMALY_TYP
    set "PROP_PROP_ANOMALY_TYPE_ID" = inserted."PROP_PROP_ANOMALY_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_ANOMALY_TYPE_CODE" = inserted."PROPERTY_ANOMALY_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ANOMALY_TYP
    inner join inserted
    on (PIMS_PROP_PROP_ANOMALY_TYP.PROP_PROP_ANOMALY_TYPE_ID = inserted.PROP_PROP_ANOMALY_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_EXPPMT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_EXPPMT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_EXPPMT_I_S_U_TR] ON PIMS_EXPROPRIATION_PAYMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.EXPROPRIATION_PAYMENT_ID = deleted.EXPROPRIATION_PAYMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_EXPROPRIATION_PAYMENT
    set "EXPROPRIATION_PAYMENT_ID" = inserted."EXPROPRIATION_PAYMENT_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "EXPROPRIATING_AUTHORITY" = inserted."EXPROPRIATING_AUTHORITY",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_EXPROPRIATION_PAYMENT
    inner join inserted
    on (PIMS_EXPROPRIATION_PAYMENT.EXPROPRIATION_PAYMENT_ID = inserted.EXPROPRIATION_PAYMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRSPRP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRSPRP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRSPRP_I_S_U_TR] ON PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PRF_PROP_RESEARCH_PURPOSE_ID = deleted.PRF_PROP_RESEARCH_PURPOSE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP
    set "PRF_PROP_RESEARCH_PURPOSE_ID" = inserted."PRF_PROP_RESEARCH_PURPOSE_ID",
      "PROPERTY_RESEARCH_FILE_ID" = inserted."PROPERTY_RESEARCH_FILE_ID",
      "PROP_RESEARCH_PURPOSE_TYPE_CODE" = inserted."PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP
    inner join inserted
    on (PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP.PRF_PROP_RESEARCH_PURPOSE_ID = inserted.PRF_PROP_RESEARCH_PURPOSE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRRT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPRRT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRRT_A_S_IUD_TR] ON PIMS_PROP_PROP_ROAD_TYP FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_PROP_ROAD_TYP_HIST set END_DATE_HIST = @curr_date where PROP_PROP_ROAD_TYPE_ID in (select PROP_PROP_ROAD_TYPE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_PROP_ROAD_TYP_HIST ([PROP_PROP_ROAD_TYPE_ID], [PROPERTY_ID], [PROPERTY_ROAD_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_PROP_ROAD_TYP_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_PROP_ROAD_TYPE_ID], [PROPERTY_ID], [PROPERTY_ROAD_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_PROP_ROAD_TYP_H_ID_SEQ]) as [_PROP_PROP_ROAD_TYP_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_U_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_ID = deleted.ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE
    set "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID" = inserted."PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "SUBFILE_INTEREST_TYPE_CODE" = inserted."SUBFILE_INTEREST_TYPE_CODE",
      "ACQ_FILE_APPRAISAL_TYPE_CODE" = inserted."ACQ_FILE_APPRAISAL_TYPE_CODE",
      "ACQ_FILE_LGL_SRVY_TYPE_CODE" = inserted."ACQ_FILE_LGL_SRVY_TYPE_CODE",
      "ACQ_FILE_EXPROP_RISK_TYPE_CODE" = inserted."ACQ_FILE_EXPROP_RISK_TYPE_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_NO" = inserted."FILE_NO",
      "FILE_NO_SUFFIX" = inserted."FILE_NO_SUFFIX",
      "LEGACY_FILE_NUMBER" = inserted."LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER" = inserted."LEGACY_STAKEHOLDER",
      "FUNDING_OTHER" = inserted."FUNDING_OTHER",
      "ASSIGNED_DATE" = inserted."ASSIGNED_DATE",
      "DELIVERY_DATE" = inserted."DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID" = inserted."PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION" = inserted."TOTAL_ALLOWABLE_COMPENSATION",
      "OTHER_SUBFILE_INTEREST_TYPE" = inserted."OTHER_SUBFILE_INTEREST_TYPE",
      "EST_COMPLETION_DT" = inserted."EST_COMPLETION_DT",
      "POSSESSION_DT" = inserted."POSSESSION_DT",
      "PHYSICAL_FILE_DETAILS" = inserted."PHYSICAL_FILE_DETAILS",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE
    inner join inserted
    on (PIMS_ACQUISITION_FILE.ACQUISITION_FILE_ID = inserted.ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_XPOHTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_XPOHTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_XPOHTY_I_S_I_TR] ON PIMS_EXPROP_OWNER_HISTORY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_EXPROP_OWNER_HISTORY_TYPE ("EXPROP_OWNER_HISTORY_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "EXPROP_OWNER_HISTORY_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRRT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRRT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRRT_I_S_U_TR] ON PIMS_PROP_PROP_ROAD_TYP INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_ROAD_TYPE_ID = deleted.PROP_PROP_ROAD_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_ROAD_TYP
    set "PROP_PROP_ROAD_TYPE_ID" = inserted."PROP_PROP_ROAD_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_ROAD_TYPE_CODE" = inserted."PROPERTY_ROAD_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ROAD_TYP
    inner join inserted
    on (PIMS_PROP_PROP_ROAD_TYP.PROP_PROP_ROAD_TYPE_ID = inserted.PROP_PROP_ROAD_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRRT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPRRT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRRT_I_S_I_TR] ON PIMS_PROP_PROP_ROAD_TYP INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_ROAD_TYP ("PROP_PROP_ROAD_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ROAD_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_PROP_ROAD_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ROAD_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRSPRP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRSPRP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRSPRP_A_S_IUD_TR] ON PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP_HIST set END_DATE_HIST = @curr_date where PRF_PROP_RESEARCH_PURPOSE_ID in (select PRF_PROP_RESEARCH_PURPOSE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP_HIST ([PRF_PROP_RESEARCH_PURPOSE_ID], [PROPERTY_RESEARCH_FILE_ID], [PROP_RESEARCH_PURPOSE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PRF_PROP_RESEARCH_PURPOSE_TYP_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PRF_PROP_RESEARCH_PURPOSE_ID], [PROPERTY_RESEARCH_FILE_ID], [PROP_RESEARCH_PURPOSE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP_H_ID_SEQ]) as [_PRF_PROP_RESEARCH_PURPOSE_TYP_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPRAT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAT_I_S_I_TR] ON PIMS_PROP_PROP_ANOMALY_TYP INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_ANOMALY_TYP ("PROP_PROP_ANOMALY_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ANOMALY_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID")
    select "PROP_PROP_ANOMALY_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ANOMALY_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPRTT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTT_I_S_I_TR] ON PIMS_PROP_PROP_TENURE_TYP INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_TENURE_TYP ("PROP_PROP_TENURE_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_TENURE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_PROP_TENURE_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_TENURE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRRT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRRT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYP]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRRT_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRROAD_PIM_PRPRRT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRROAD_PIM_PRPRRT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYP]
	ADD CONSTRAINT [PIM_PRROAD_PIM_PRPRRT_FK]
	FOREIGN KEY([PROPERTY_ROAD_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_ROAD_TYPE]([PROPERTY_ROAD_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_INTHLD_PIM_XPOWNH_FK
PRINT N'Create foreign key constraint dbo.PIM_INTHLD_PIM_XPOWNH_FK'
GO
ALTER TABLE [dbo].[PIMS_EXPROP_OWNER_HISTORY]
	ADD CONSTRAINT [PIM_INTHLD_PIM_XPOWNH_FK]
	FOREIGN KEY([INTEREST_HOLDER_ID])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER]([INTEREST_HOLDER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_XPOWNH_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_XPOWNH_FK'
GO
ALTER TABLE [dbo].[PIMS_EXPROP_OWNER_HISTORY]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_XPOWNH_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_XPOHTY_PIM_XPOWNH_FK
PRINT N'Create foreign key constraint dbo.PIM_XPOHTY_PIM_XPOWNH_FK'
GO
ALTER TABLE [dbo].[PIMS_EXPROP_OWNER_HISTORY]
	ADD CONSTRAINT [PIM_XPOHTY_PIM_XPOWNH_FK]
	FOREIGN KEY([EXPROP_OWNER_HISTORY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_EXPROP_OWNER_HISTORY_TYPE]([EXPROP_OWNER_HISTORY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQOWN_PIM_XPOWNH_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQOWN_PIM_XPOWNH_FK'
GO
ALTER TABLE [dbo].[PIMS_EXPROP_OWNER_HISTORY]
	ADD CONSTRAINT [PIM_ACQOWN_PIM_XPOWNH_FK]
	FOREIGN KEY([ACQUISITION_OWNER_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_OWNER]([ACQUISITION_OWNER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPTNR_PIM_PRPRTT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPTNR_PIM_PRPRTT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYP]
	ADD CONSTRAINT [PIM_PRPTNR_PIM_PRPRTT_FK]
	FOREIGN KEY([PROPERTY_TENURE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_TENURE_TYPE]([PROPERTY_TENURE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRTT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRTT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYP]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRTT_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_IHINTT_PIM_PIHITY_FK
PRINT N'Create foreign key constraint dbo.PIM_IHINTT_PIM_PIHITY_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYP]
	ADD CONSTRAINT [PIM_IHINTT_PIM_PIHITY_FK]
	FOREIGN KEY([INTEREST_HOLDER_INTEREST_TYPE_CODE])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER_INTEREST_TYPE]([INTEREST_HOLDER_INTEREST_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_IHPRIN_PIM_PIHITY_FK
PRINT N'Create foreign key constraint dbo.PIM_IHPRIN_PIM_PIHITY_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYP]
	ADD CONSTRAINT [PIM_IHPRIN_PIM_PIHITY_FK]
	FOREIGN KEY([PIMS_INTHLDR_PROP_INTEREST_ID])
	REFERENCES [dbo].[PIMS_INTHLDR_PROP_INTEREST]([PIMS_INTHLDR_PROP_INTEREST_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_RRESPT_PIM_PRSPRP_FK
PRINT N'Create foreign key constraint dbo.PIM_RRESPT_PIM_PRSPRP_FK'
GO
ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP]
	ADD CONSTRAINT [PIM_RRESPT_PIM_PRSPRP_FK]
	FOREIGN KEY([PROP_RESEARCH_PURPOSE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_RESEARCH_PURPOSE_TYPE]([PROP_RESEARCH_PURPOSE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRSCRC_PIM_PRSPRP_FK
PRINT N'Create foreign key constraint dbo.PIM_PRSCRC_PIM_PRSPRP_FK'
GO
ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP]
	ADD CONSTRAINT [PIM_PRSCRC_PIM_PRSPRP_FK]
	FOREIGN KEY([PROPERTY_RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_RESEARCH_FILE]([PROPERTY_RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRAT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRAT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYP]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRAT_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRANOM_PIM_PRPRAT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRANOM_PIM_PRPRAT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYP]
	ADD CONSTRAINT [PIM_PRANOM_PIM_PRPRAT_FK]
	FOREIGN KEY([PROPERTY_ANOMALY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_ANOMALY_TYPE]([PROPERTY_ANOMALY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRSPRP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRSPRP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRSPRP_I_S_I_TR] ON PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PRF_PROP_RESEARCH_PURPOSE_TYP ("PRF_PROP_RESEARCH_PURPOSE_ID",
      "PROPERTY_RESEARCH_FILE_ID",
      "PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PRF_PROP_RESEARCH_PURPOSE_ID",
      "PROPERTY_RESEARCH_FILE_ID",
      "PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPRTT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTT_A_S_IUD_TR] ON PIMS_PROP_PROP_TENURE_TYP FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_PROP_TENURE_TYP_HIST set END_DATE_HIST = @curr_date where PROP_PROP_TENURE_TYPE_ID in (select PROP_PROP_TENURE_TYPE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_PROP_TENURE_TYP_HIST ([PROP_PROP_TENURE_TYPE_ID], [PROPERTY_ID], [PROPERTY_TENURE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_PROP_TENURE_TYP_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_PROP_TENURE_TYPE_ID], [PROPERTY_ID], [PROPERTY_TENURE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_PROP_TENURE_TYP_H_ID_SEQ]) as [_PROP_PROP_TENURE_TYP_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_EXPPMT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_EXPPMT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_EXPPMT_A_S_IUD_TR] ON PIMS_EXPROPRIATION_PAYMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_EXPROPRIATION_PAYMENT_HIST set END_DATE_HIST = @curr_date where EXPROPRIATION_PAYMENT_ID in (select EXPROPRIATION_PAYMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_EXPROPRIATION_PAYMENT_HIST ([EXPROPRIATION_PAYMENT_ID], [ACQUISITION_FILE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [EXPROPRIATING_AUTHORITY], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _EXPROPRIATION_PAYMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [EXPROPRIATION_PAYMENT_ID], [ACQUISITION_FILE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [EXPROPRIATING_AUTHORITY], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_EXPROPRIATION_PAYMENT_H_ID_SEQ]) as [_EXPROPRIATION_PAYMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_XPOWNH_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_XPOWNH_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_XPOWNH_I_S_I_TR] ON PIMS_EXPROP_OWNER_HISTORY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_EXPROP_OWNER_HISTORY ("EXPROP_OWNER_HISTORY_ID",
      "ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "EXPROP_OWNER_HISTORY_TYPE_CODE",
      "EVENT_DT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "EXPROP_OWNER_HISTORY_ID",
      "ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "EXPROP_OWNER_HISTORY_TYPE_CODE",
      "EVENT_DT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_XPOWNH_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_XPOWNH_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_XPOWNH_A_S_IUD_TR] ON PIMS_EXPROP_OWNER_HISTORY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_EXPROP_OWNER_HISTORY_HIST set END_DATE_HIST = @curr_date where EXPROP_OWNER_HISTORY_ID in (select EXPROP_OWNER_HISTORY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_EXPROP_OWNER_HISTORY_HIST ([EXPROP_OWNER_HISTORY_ID], [ACQUISITION_FILE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [EXPROP_OWNER_HISTORY_TYPE_CODE], [EVENT_DT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _EXPROP_OWNER_HISTORY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [EXPROP_OWNER_HISTORY_ID], [ACQUISITION_FILE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [EXPROP_OWNER_HISTORY_TYPE_CODE], [EVENT_DT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_EXPROP_OWNER_HISTORY_H_ID_SEQ]) as [_EXPROP_OWNER_HISTORY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPRAT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAT_A_S_IUD_TR] ON PIMS_PROP_PROP_ANOMALY_TYP FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_PROP_ANOMALY_TYP_HIST set END_DATE_HIST = @curr_date where PROP_PROP_ANOMALY_TYPE_ID in (select PROP_PROP_ANOMALY_TYPE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_PROP_ANOMALY_TYP_HIST ([PROP_PROP_ANOMALY_TYPE_ID], [PROPERTY_ID], [PROPERTY_ANOMALY_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_PROP_ANOMALY_TYP_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_PROP_ANOMALY_TYPE_ID], [PROPERTY_ID], [PROPERTY_ANOMALY_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_PROP_ANOMALY_TYP_H_ID_SEQ]) as [_PROP_PROP_ANOMALY_TYP_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_EXPROPRIATION_NOTICE_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_EXPROPRIATION_NOTICE_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_EXPROPRIATION_NOTICE_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_EXPROPRIATION_VESTING_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_EXPROPRIATION_VESTING_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_EXPROPRIATION_VESTING_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
