-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Fri Oct 18 17:58:56 PDT 2024
-- Execute this script on:
-- 		PSP_PIMS_S91_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S92_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCMNT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCMNT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCMNT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCMNT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DOCMNT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCMNT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCMNT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DOCMNT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCMNT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DOCUMENT_QUEUE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DOCUMENT_QUEUE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DOCUMENT_QUEUE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT
PRINT N'Alter table dbo.PIMS_DOCUMENT'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
	ADD [DOCUMENT_EXTERNAL_ID] nvarchar(1000) NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Fluid key used to uniquely identify document in external system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DOCUMENT_EXTERNAL_ID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DOCUMENT_QUEUE_STATUS_TYPE
PRINT N'Create table dbo.PIMS_DOCUMENT_QUEUE_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_DOCUMENT_QUEUE_STATUS_TYPE]  ( 
	[DOCUMENT_QUEUE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[IS_DISABLED]                    	bit NOT NULL CONSTRAINT [DOCQST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                  	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [DOCQST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [DOCQST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [DOCQST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [DOCQST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [DOCQST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DOCQST_PK] PRIMARY KEY CLUSTERED([DOCUMENT_QUEUE_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the document queue status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_QUEUE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the document queue status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is still active or is now disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Order in which to display the code values, if required.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table describing the status of the document in the queue for MAYAN EDMS assimilation.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DOCUMENT_QUEUE
PRINT N'Create table dbo.PIMS_DOCUMENT_QUEUE'
GO
CREATE TABLE [dbo].[PIMS_DOCUMENT_QUEUE]  ( 
	[DOCUMENT_QUEUE_ID]              	bigint NOT NULL CONSTRAINT [DOCQUE_DOCUMENT_QUEUE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DOCUMENT_QUEUE_ID_SEQ]),
	[DOCUMENT_ID]                    	bigint NULL,
	[DOCUMENT_QUEUE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DATA_SOURCE_TYPE_CODE]          	nvarchar(20) NOT NULL,
	[DOCUMENT_EXTERNAL_ID]           	nvarchar(1000) NULL,
	[DOC_PROCESS_START_DT]           	datetime NULL,
	[DOC_PROCESS_END_DT]             	datetime NULL,
	[DOC_PROCESS_RETRIES]            	int NULL,
	[MAYAN_ERROR]                    	nvarchar(4000) NULL,
	[DOCUMENT]                       	varbinary(max) NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [DOCQUE_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DOCQUE_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DOCQUE_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL CONSTRAINT [DOCQUE_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DOCQUE_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DOCQUE_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL CONSTRAINT [DOCQUE_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [DOCQUE_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [DOCQUE_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [DOCQUE_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [DOCQUE_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DOCQUE_PK] PRIMARY KEY CLUSTERED([DOCUMENT_QUEUE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_QUEUE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_DOCUMENT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value that represents the current status of the document as it is processed by PIMS/MAYAN' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_QUEUE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value that refers to the source system the document originated in.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DATA_SOURCE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Fluid key used to uniquely identify document in external system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_EXTERNAL_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'When the document is sent to the backend for processing, this will be populated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOC_PROCESS_START_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'When the document?s processing finishes, this will be populated' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOC_PROCESS_END_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The number of times that this document has been queued for upload.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOC_PROCESS_RETRIES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'If the upload process fails, the error corresponding to the failure will be displayed here.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'MAYAN_ERROR'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The actual document blob, stored temporarily until after processing completes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOCUMENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table providing progress tracking of document inclusion into the MAYAN EDMS.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_SUBFILE_INTEREST_TYPE
PRINT N'Create table dbo.PIMS_SUBFILE_INTEREST_TYPE'
GO
CREATE TABLE [dbo].[PIMS_SUBFILE_INTEREST_TYPE]  ( 
	[SUBFILE_INTEREST_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [SBFLIT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [SBFLIT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [SBFLIT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [SBFLIT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [SBFLIT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [SBFLIT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SBFLIT_PK] PRIMARY KEY CLUSTERED([SUBFILE_INTEREST_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the subfile interest type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'SUBFILE_INTEREST_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the subfile interest type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the subfile interest type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD [SUBFILE_INTEREST_TYPE_CODE] nvarchar(20) NULL, 
	[OTHER_SUBFILE_INTEREST_TYPE] nvarchar(200) NULL, 
	[EST_COMPLETION_DT] datetime NULL, 
	[POSSESSION_DT] datetime NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_SUBFILE_INTEREST_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'SUBFILE_INTEREST_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'If the user selects ?Other? then they will need to provide a subfile type description, which will be displayed as ''Other - <description>' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'OTHER_SUBFILE_INTEREST_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Estimated date by which the acquisition would be completed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'EST_COMPLETION_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of possession following acquisition completion.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'POSSESSION_DT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST]
	ADD [SUBFILE_INTEREST_TYPE_CODE] nvarchar(20) NULL, 
	[OTHER_SUBFILE_INTEREST_TYPE] nvarchar(200) NULL, 
	[EST_COMPLETION_DT] datetime NULL, 
	[POSSESSION_DT] datetime NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_HIST
PRINT N'Alter table dbo.PIMS_DOCUMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_HIST]
	ADD [DOCUMENT_EXTERNAL_ID] nvarchar(1000) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DOCUMENT_QUEUE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DOCUMENT_QUEUE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DOCUMENT_QUEUE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DOCUMENT_QUEUE_HIST
PRINT N'Create table dbo.PIMS_DOCUMENT_QUEUE_HIST'
GO
CREATE TABLE [dbo].[PIMS_DOCUMENT_QUEUE_HIST]  ( 
	[_DOCUMENT_QUEUE_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DOCUMENT_QUEUE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[DOCUMENT_QUEUE_ID]              	bigint NOT NULL,
	[DOCUMENT_ID]                    	bigint NULL,
	[DOCUMENT_QUEUE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DATA_SOURCE_TYPE_CODE]          	nvarchar(20) NOT NULL,
	[DOCUMENT_EXTERNAL_ID]           	nvarchar(1000) NULL,
	[DOC_PROCESS_START_DT]           	datetime NULL,
	[DOC_PROCESS_END_DT]             	datetime NULL,
	[DOC_PROCESS_RETRIES]            	int NULL,
	[MAYAN_ERROR]                    	nvarchar(4000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DOCQUE_H_PK] PRIMARY KEY CLUSTERED([_DOCUMENT_QUEUE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_DOCQUE_H_UK
PRINT N'Create unique constraint dbo.PIMS_DOCQUE_H_UK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE_HIST]
	ADD CONSTRAINT [PIMS_DOCQUE_H_UK]
	UNIQUE ([_DOCUMENT_QUEUE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DOCQUE_DOCUMENT_QUEUE_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.DOCQUE_DOCUMENT_QUEUE_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DOCQUE_DOCUMENT_QUEUE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DOCUMENT_QUEUE]([DOCUMENT_QUEUE_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQNFL_SUBFILE_INTEREST_TYPE_CODE_IDX
PRINT N'Create index dbo.ACQNFL_SUBFILE_INTEREST_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQNFL_SUBFILE_INTEREST_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([SUBFILE_INTEREST_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DOCQUE_DATA_SOURCE_TYPE_CODE_IDX
PRINT N'Create index dbo.DOCQUE_DATA_SOURCE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DOCQUE_DATA_SOURCE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DOCUMENT_QUEUE]([DATA_SOURCE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DOCQUE_DOCUMENT_ID_IDX
PRINT N'Create index dbo.DOCQUE_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DOCQUE_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DOCUMENT_QUEUE]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_DOCQUE_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_DOCQUE_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_DOCQUE_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCQST_PIM_DOCQUE_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCQST_PIM_DOCQUE_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD CONSTRAINT [PIM_DOCQST_PIM_DOCQUE_FK]
	FOREIGN KEY([DOCUMENT_QUEUE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DOCUMENT_QUEUE_STATUS_TYPE]([DOCUMENT_QUEUE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PIDSRT_PIM_DOCQUE_FK
PRINT N'Create foreign key constraint dbo.PIM_PIDSRT_PIM_DOCQUE_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD CONSTRAINT [PIM_PIDSRT_PIM_DOCQUE_FK]
	FOREIGN KEY([DATA_SOURCE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DATA_SOURCE_TYPE]([DATA_SOURCE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_SBFLIT_PIM_ACQNFL_FK
PRINT N'Create foreign key constraint dbo.PIM_SBFLIT_PIM_ACQNFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_SBFLIT_PIM_ACQNFL_FK]
	FOREIGN KEY([SUBFILE_INTEREST_TYPE_CODE])
	REFERENCES [dbo].[PIMS_SUBFILE_INTEREST_TYPE]([SUBFILE_INTEREST_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_I_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE ("ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "SUBFILE_INTEREST_TYPE_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUMBER",
      "LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "OTHER_SUBFILE_INTEREST_TYPE",
      "EST_COMPLETION_DT",
      "POSSESSION_DT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "SUBFILE_INTEREST_TYPE_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUMBER",
      "LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "OTHER_SUBFILE_INTEREST_TYPE",
      "EST_COMPLETION_DT",
      "POSSESSION_DT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SBFLIT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_SBFLIT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SBFLIT_I_S_U_TR] ON PIMS_SUBFILE_INTEREST_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SUBFILE_INTEREST_TYPE_CODE = deleted.SUBFILE_INTEREST_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SUBFILE_INTEREST_TYPE
    set "SUBFILE_INTEREST_TYPE_CODE" = inserted."SUBFILE_INTEREST_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SUBFILE_INTEREST_TYPE
    inner join inserted
    on (PIMS_SUBFILE_INTEREST_TYPE.SUBFILE_INTEREST_TYPE_CODE = inserted.SUBFILE_INTEREST_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCMNT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DOCMNT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCMNT_I_S_I_TR] ON PIMS_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT ("DOCUMENT_ID",
      "DOCUMENT_TYPE_ID",
      "DOCUMENT_STATUS_TYPE_CODE",
      "FILE_NAME",
      "MAYAN_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "DOCUMENT_EXTERNAL_ID")
    select "DOCUMENT_ID",
      "DOCUMENT_TYPE_ID",
      "DOCUMENT_STATUS_TYPE_CODE",
      "FILE_NAME",
      "MAYAN_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "DOCUMENT_EXTERNAL_ID"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCQUE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DOCQUE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCQUE_I_S_I_TR] ON PIMS_DOCUMENT_QUEUE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_QUEUE ("DOCUMENT_QUEUE_ID",
      "DOCUMENT_ID",
      "DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DATA_SOURCE_TYPE_CODE",
      "DOCUMENT_EXTERNAL_ID",
      "DOC_PROCESS_START_DT",
      "DOC_PROCESS_END_DT",
      "DOC_PROCESS_RETRIES",
      "MAYAN_ERROR",
      "DOCUMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DOCUMENT_QUEUE_ID",
      "DOCUMENT_ID",
      "DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DATA_SOURCE_TYPE_CODE",
      "DOCUMENT_EXTERNAL_ID",
      "DOC_PROCESS_START_DT",
      "DOC_PROCESS_END_DT",
      "DOC_PROCESS_RETRIES",
      "MAYAN_ERROR",
      "DOCUMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_ID in (select ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_HIST ([ACQUISITION_FILE_ID], [PRNT_ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [SUBFILE_INTEREST_TYPE_CODE], [FILE_NAME], [FILE_NO], [FILE_NUMBER], [LEGACY_FILE_NUMBER], [LEGACY_STAKEHOLDER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [PAIMS_ACQUISITION_FILE_ID], [TOTAL_ALLOWABLE_COMPENSATION], [OTHER_SUBFILE_INTEREST_TYPE], [EST_COMPLETION_DT], [POSSESSION_DT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_ID], [PRNT_ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [SUBFILE_INTEREST_TYPE_CODE], [FILE_NAME], [FILE_NO], [FILE_NUMBER], [LEGACY_FILE_NUMBER], [LEGACY_STAKEHOLDER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [PAIMS_ACQUISITION_FILE_ID], [TOTAL_ALLOWABLE_COMPENSATION], [OTHER_SUBFILE_INTEREST_TYPE], [EST_COMPLETION_DT], [POSSESSION_DT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_H_ID_SEQ]) as [_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCQST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCQST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCQST_I_S_U_TR] ON PIMS_DOCUMENT_QUEUE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_QUEUE_STATUS_TYPE_CODE = deleted.DOCUMENT_QUEUE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_QUEUE_STATUS_TYPE
    set "DOCUMENT_QUEUE_STATUS_TYPE_CODE" = inserted."DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_QUEUE_STATUS_TYPE
    inner join inserted
    on (PIMS_DOCUMENT_QUEUE_STATUS_TYPE.DOCUMENT_QUEUE_STATUS_TYPE_CODE = inserted.DOCUMENT_QUEUE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCMNT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DOCMNT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCMNT_A_S_IUD_TR] ON PIMS_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DOCUMENT_HIST set END_DATE_HIST = @curr_date where DOCUMENT_ID in (select DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DOCUMENT_HIST ([DOCUMENT_ID], [DOCUMENT_TYPE_ID], [DOCUMENT_STATUS_TYPE_CODE], [FILE_NAME], [MAYAN_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DOCUMENT_EXTERNAL_ID], _DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DOCUMENT_ID], [DOCUMENT_TYPE_ID], [DOCUMENT_STATUS_TYPE_CODE], [FILE_NAME], [MAYAN_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DOCUMENT_EXTERNAL_ID], (next value for [dbo].[PIMS_DOCUMENT_H_ID_SEQ]) as [_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SBFLIT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_SBFLIT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SBFLIT_I_S_I_TR] ON PIMS_SUBFILE_INTEREST_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SUBFILE_INTEREST_TYPE ("SUBFILE_INTEREST_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "SUBFILE_INTEREST_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCQUE_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DOCQUE_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCQUE_A_S_IUD_TR] ON PIMS_DOCUMENT_QUEUE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DOCUMENT_QUEUE_HIST set END_DATE_HIST = @curr_date where DOCUMENT_QUEUE_ID in (select DOCUMENT_QUEUE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DOCUMENT_QUEUE_HIST ([DOCUMENT_QUEUE_ID], [DOCUMENT_ID], [DOCUMENT_QUEUE_STATUS_TYPE_CODE], [DATA_SOURCE_TYPE_CODE], [DOCUMENT_EXTERNAL_ID], [DOC_PROCESS_START_DT], [DOC_PROCESS_END_DT], [DOC_PROCESS_RETRIES], [MAYAN_ERROR], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DOCUMENT_QUEUE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DOCUMENT_QUEUE_ID], [DOCUMENT_ID], [DOCUMENT_QUEUE_STATUS_TYPE_CODE], [DATA_SOURCE_TYPE_CODE], [DOCUMENT_EXTERNAL_ID], [DOC_PROCESS_START_DT], [DOC_PROCESS_END_DT], [DOC_PROCESS_RETRIES], [MAYAN_ERROR], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DOCUMENT_QUEUE_H_ID_SEQ]) as [_DOCUMENT_QUEUE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_U_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_ID = deleted.ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE
    set "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID" = inserted."PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "SUBFILE_INTEREST_TYPE_CODE" = inserted."SUBFILE_INTEREST_TYPE_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_NO" = inserted."FILE_NO",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "LEGACY_FILE_NUMBER" = inserted."LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER" = inserted."LEGACY_STAKEHOLDER",
      "FUNDING_OTHER" = inserted."FUNDING_OTHER",
      "ASSIGNED_DATE" = inserted."ASSIGNED_DATE",
      "DELIVERY_DATE" = inserted."DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID" = inserted."PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION" = inserted."TOTAL_ALLOWABLE_COMPENSATION",
      "OTHER_SUBFILE_INTEREST_TYPE" = inserted."OTHER_SUBFILE_INTEREST_TYPE",
      "EST_COMPLETION_DT" = inserted."EST_COMPLETION_DT",
      "POSSESSION_DT" = inserted."POSSESSION_DT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE
    inner join inserted
    on (PIMS_ACQUISITION_FILE.ACQUISITION_FILE_ID = inserted.ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCQUE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCQUE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCQUE_I_S_U_TR] ON PIMS_DOCUMENT_QUEUE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_QUEUE_ID = deleted.DOCUMENT_QUEUE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_QUEUE
    set "DOCUMENT_QUEUE_ID" = inserted."DOCUMENT_QUEUE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "DOCUMENT_QUEUE_STATUS_TYPE_CODE" = inserted."DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DATA_SOURCE_TYPE_CODE" = inserted."DATA_SOURCE_TYPE_CODE",
      "DOCUMENT_EXTERNAL_ID" = inserted."DOCUMENT_EXTERNAL_ID",
      "DOC_PROCESS_START_DT" = inserted."DOC_PROCESS_START_DT",
      "DOC_PROCESS_END_DT" = inserted."DOC_PROCESS_END_DT",
      "DOC_PROCESS_RETRIES" = inserted."DOC_PROCESS_RETRIES",
      "MAYAN_ERROR" = inserted."MAYAN_ERROR",
      "DOCUMENT" = inserted."DOCUMENT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_QUEUE
    inner join inserted
    on (PIMS_DOCUMENT_QUEUE.DOCUMENT_QUEUE_ID = inserted.DOCUMENT_QUEUE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCQST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DOCQST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCQST_I_S_I_TR] ON PIMS_DOCUMENT_QUEUE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_QUEUE_STATUS_TYPE ("DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCMNT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCMNT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCMNT_I_S_U_TR] ON PIMS_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_ID = deleted.DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT
    set "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "DOCUMENT_TYPE_ID" = inserted."DOCUMENT_TYPE_ID",
      "DOCUMENT_STATUS_TYPE_CODE" = inserted."DOCUMENT_STATUS_TYPE_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "MAYAN_ID" = inserted."MAYAN_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "DOCUMENT_EXTERNAL_ID" = inserted."DOCUMENT_EXTERNAL_ID"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT
    inner join inserted
    on (PIMS_DOCUMENT.DOCUMENT_ID = inserted.DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
