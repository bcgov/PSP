-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Mon Jul 07 10:10:57 PDT 2025
-- Execute this script on:
-- 		PSP_PIMS_S107_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S105_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_MFFLCN_PC_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_MFFLCN_PC_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_CONTACT]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_MFFLCN_PC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_MFFLCN_PE_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_MFFLCN_PE_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_CONTACT]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_MFFLCN_PE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_MFFLCN_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_MFFLCN_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_CONTACT]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_MFFLCN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_MGMTFL_PIM_MFFLCN_FK
PRINT N'Drop foreign key constraint dbo.PIM_MGMTFL_PIM_MFFLCN_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_CONTACT]
	DROP CONSTRAINT IF EXISTS [PIM_MGMTFL_PIM_MFFLCN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRAC_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRAC_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY]
	DROP CONSTRAINT IF EXISTS [PIM_PRPRTY_PIM_PRPRAC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRPRAC_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRPRAC_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY]
	DROP CONSTRAINT IF EXISTS [PIM_PRPACT_PIM_PRPRAC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACMC_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACMC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
	DROP CONSTRAINT IF EXISTS [PIM_PRPACT_PIM_PRACMC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_MGMTAC_PIM_PACMAC_FK
PRINT N'Drop foreign key constraint dbo.PIM_MGMTAC_PIM_PACMAC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACTIVITY_MGMT_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_MGMTAC_PIM_PACMAC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPACT_PIM_PAINVP_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPACT_PIM_PAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	DROP CONSTRAINT IF EXISTS [PIM_PRPACT_PIM_PAINVP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACDO_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACDO_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_PRPACT_PIM_PRACDO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
	DROP CONSTRAINT IF EXISTS [PIM_PRPACT_PIM_PRACIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRACTY_PIM_MGMTAC_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRACTY_PIM_MGMTAC_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PRACTY_PIM_MGMTAC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_PRPACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_PRPACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PACSTY_PIM_PRPACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PACSTY_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PACSTY_PIM_PRPACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_PRPACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_PRPACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_MGMTFL_PIM_MGMTAC_FK
PRINT N'Drop foreign key constraint dbo.PIM_MGMTFL_PIM_MGMTAC_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_MGMTFL_PIM_MGMTAC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MFFLCN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MFFLCN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MFFLCN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MFFLCN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MFFLCN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MFFLCN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MFFLCN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_MFFLCN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MFFLCN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MFFLCN_PRIMARY_CONTACT_ID_IDX
PRINT N'Drop index dbo.MFFLCN_PRIMARY_CONTACT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_FILE_CONTACT].[MFFLCN_PRIMARY_CONTACT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MFFLCN_PERSON_ID_IDX
PRINT N'Drop index dbo.MFFLCN_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_FILE_CONTACT].[MFFLCN_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MFFLCN_ORGANIZATION_ID_IDX
PRINT N'Drop index dbo.MFFLCN_ORGANIZATION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_FILE_CONTACT].[MFFLCN_ORGANIZATION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGMTAC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_MGMTAC_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGMTAC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX
PRINT N'Drop index dbo.PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY].[PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPACT_SERVICE_PROVIDER_ORG_ID_IDX
PRINT N'Drop index dbo.PRPACT_SERVICE_PROVIDER_ORG_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY].[PRPACT_SERVICE_PROVIDER_ORG_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY].[PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MGMTAC_MANAGEMENT_FILE_ID_IDX
PRINT N'Drop index dbo.MGMTAC_MANAGEMENT_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY].[MGMTAC_MANAGEMENT_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAACPR_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MAACPR_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAACPR_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAACPR_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MAACPR_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAACPR_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAACPR_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_MAACPR_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAACPR_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRAC_PROPERTY_ID_IDX
PRINT N'Drop index dbo.PRPRAC_PROPERTY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY].[PRPRAC_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY].[PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGMTAC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MGMTAC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGMTAC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGMTAC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MGMTAC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGMTAC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PAINVP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PAINVP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PAINVP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PAINVP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PAINVP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PAINVP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACDO_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRACDO_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACDO_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACMC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRACMC_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACMC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PACMAC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PACMAC_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PACMAC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PACMAC_PIMS_MANAGEMENT_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PACMAC_PIMS_MANAGEMENT_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_ACTIVITY_MGMT_ACTIVITY].[PACMAC_PIMS_MANAGEMENT_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACMC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRACMC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACMC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACIN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRACIN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACIN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACMC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRACMC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACMC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PAINVP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PAINVP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PAINVP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACDO_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRACDO_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACDO_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACIN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRACIN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACIN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PACMAC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PACMAC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PACMAC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACIN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRACIN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACIN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACDO_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRACDO_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACDO_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PACMAC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PACMAC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PACMAC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_ACT_MIN_CONTACT].[PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY].[PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT].[PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE].[PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_MFFLCN_H_UK
PRINT N'Drop unique constraint dbo.PIMS_MFFLCN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_CONTACT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_MFFLCN_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_MFFLCN_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_MFFLCN_H_PK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_CONTACT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_MFFLCN_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.MFFLCN_PK
PRINT N'Drop primary key constraint dbo.MFFLCN_PK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_CONTACT]
	DROP CONSTRAINT IF EXISTS [MFFLCN_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MANAGEMENT_FILE_CONTACT
PRINT N'Drop table dbo.PIMS_MANAGEMENT_FILE_CONTACT'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MANAGEMENT_FILE_CONTACT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_MGMTAC_H_UK
PRINT N'Drop unique constraint dbo.PIMS_MGMTAC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_MGMTAC_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_MGMTAC_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_MGMTAC_H_PK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_MGMTAC_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_LITE_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_LITE_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_PROPERTY_LITE_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_MAACPR_H_UK
PRINT N'Drop unique constraint dbo.PIMS_MAACPR_H_UK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_MAACPR_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_MAACPR_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_MAACPR_H_PK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_MAACPR_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.MAACPR_PK
PRINT N'Drop primary key constraint dbo.MAACPR_PK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY]
	DROP CONSTRAINT IF EXISTS [MAACPR_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MANAGEMENT_ACTIVITY_PROPERTY
PRINT N'Drop table dbo.PIMS_MANAGEMENT_ACTIVITY_PROPERTY'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.ACQNFL_SUBFILE_INTEREST_TYPEROP_CODE_TCC
PRINT N'Drop check constraint dbo.ACQNFL_SUBFILE_INTEREST_TYPEROP_CODE_TCC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	DROP CONSTRAINT IF EXISTS [ACQNFL_SUBFILE_INTEREST_TYPEROP_CODE_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PACMAC_UNIQUE_ACTIVITY_TUC
PRINT N'Drop unique constraint dbo.PACMAC_UNIQUE_ACTIVITY_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACTIVITY_MGMT_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PACMAC_UNIQUE_ACTIVITY_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.MGMTAC_PK
PRINT N'Drop primary key constraint dbo.MGMTAC_PK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [MGMTAC_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MANAGEMENT_ACTIVITY
PRINT N'Drop table dbo.PIMS_MANAGEMENT_ACTIVITY'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_ACTIVITY
PRINT N'Create table dbo.PIMS_PROPERTY_ACTIVITY'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]  ( 
	[PIMS_PROPERTY_ACTIVITY_ID]          	bigint NOT NULL CONSTRAINT [PRPACT_PROPERTY_ACTIVITY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_ID_SEQ]),
	[PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL CONSTRAINT [PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_DEF]  DEFAULT ('NOTSTARTED'),
	[SERVICE_PROVIDER_PERSON_ID]         	bigint NULL,
	[SERVICE_PROVIDER_ORG_ID]            	bigint NULL,
	[MANAGEMENT_FILE_ID]                 	bigint NULL,
	[PROP_MGMT_ACTIVITY_TYPE_CODE]       	nvarchar(20) NULL,
	[REQUEST_ADDED_DT]                   	date NOT NULL,
	[COMPLETION_DT]                      	date NULL,
	[DESCRIPTION]                        	nvarchar(max) NULL,
	[REQUEST_SOURCE]                     	nvarchar(2000) NULL,
	[IS_DISABLED]                        	bit NULL CONSTRAINT [PRPACT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL CONSTRAINT [PRPACT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [PRPACT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPACT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL CONSTRAINT [PRPACT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPACT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPACT_PK] PRIMARY KEY CLUSTERED([PIMS_PROPERTY_ACTIVITY_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Status of the property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the person as a service provider.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'SERVICE_PROVIDER_PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the organization as a service provider.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'SERVICE_PROVIDER_ORG_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the associated management file (PIMS_MANAGEMENT_FILE).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the associated management activity type (PIMS_PROP_MGMT_ACTIVITY_TYPE).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the request for a property management activity was added' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'REQUEST_ADDED_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the property management activity was completed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'COMPLETION_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Source of the management activity request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'REQUEST_SOURCE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the activities that are associated with this property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACTIVITY_INVOICE
PRINT N'Alter table dbo.PIMS_PROPERTY_ACTIVITY_INVOICE'
GO
EXEC dbo.sp_rename N'dbo.PIMS_PROPERTY_ACTIVITY_INVOICE.PIMS_MANAGEMENT_ACTIVITY_ID' , N'PIMS_PROPERTY_ACTIVITY_ID', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT
PRINT N'Alter table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT'
GO
EXEC dbo.sp_rename N'dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT.PIMS_MANAGEMENT_ACTIVITY_ID' , N'PIMS_PROPERTY_ACTIVITY_ID', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY
PRINT N'Alter table dbo.PIMS_PROPERTY'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD [NOTES] nvarchar(4000) NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes about the property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'NOTES'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_PROP_ACTIVITY
PRINT N'Create table dbo.PIMS_PROP_PROP_ACTIVITY'
GO
CREATE TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]  ( 
	[PROP_PROP_ACTIVITY_ID]         	bigint NOT NULL CONSTRAINT [PRPRAC_PROP_PROP_ACTIVITY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ACTIVITY_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRPRAC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRAC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPRAC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRAC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPRAC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRAC_PK] PRIMARY KEY CLUSTERED([PROP_PROP_ACTIVITY_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property to a property management actity (many-to-many).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_ACTIVITY'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_ACT_INVOLVED_PARTY
PRINT N'Alter table dbo.PIMS_PROP_ACT_INVOLVED_PARTY'
GO
EXEC dbo.sp_rename N'dbo.PIMS_PROP_ACT_INVOLVED_PARTY.PIMS_MANAGEMENT_ACTIVITY_ID' , N'PIMS_PROPERTY_ACTIVITY_ID', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_ACTIVITY_MGMT_ACTIVITY
PRINT N'Alter table dbo.PIMS_PROP_ACTIVITY_MGMT_ACTIVITY'
GO
EXEC dbo.sp_rename N'dbo.PIMS_PROP_ACTIVITY_MGMT_ACTIVITY.PIMS_MANAGEMENT_ACTIVITY_ID' , N'PIMS_PROPERTY_ACTIVITY_ID', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PACMAC_UNIQUE_ACTIVITY_TUC
PRINT N'Create unique constraint dbo.PACMAC_UNIQUE_ACTIVITY_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACTIVITY_MGMT_ACTIVITY]
	ADD CONSTRAINT [PACMAC_UNIQUE_ACTIVITY_TUC]
	UNIQUE ([PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_ACT_MIN_CONTACT
PRINT N'Alter table dbo.PIMS_PROP_ACT_MIN_CONTACT'
GO
EXEC dbo.sp_rename N'dbo.PIMS_PROP_ACT_MIN_CONTACT.PIMS_MANAGEMENT_ACTIVITY_ID' , N'PIMS_PROPERTY_ACTIVITY_ID', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_PROP_ACTIVITY_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_PROP_ACTIVITY_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_ACTIVITY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_PROP_ACTIVITY_HIST
PRINT N'Create table dbo.PIMS_PROP_PROP_ACTIVITY_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY_HIST]  ( 
	[_PROP_PROP_ACTIVITY_HIST_ID]   	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ACTIVITY_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROP_PROP_ACTIVITY_ID]         	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPRAC_H_PK] PRIMARY KEY CLUSTERED([_PROP_PROP_ACTIVITY_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRPRAC_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRPRAC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY_HIST]
	ADD CONSTRAINT [PIMS_PRPRAC_H_UK]
	UNIQUE ([_PROP_PROP_ACTIVITY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACTIVITY_INVOICE_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_ACTIVITY_INVOICE_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_PROPERTY_ACTIVITY_INVOICE_HIST.PIMS_MANAGEMENT_ACTIVITY_ID' , N'PIMS_PROPERTY_ACTIVITY_ID', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROPERTY_ACTIVITY_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROPERTY_ACTIVITY_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_ACTIVITY_HIST
PRINT N'Create table dbo.PIMS_PROPERTY_ACTIVITY_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]  ( 
	[_PROPERTY_ACTIVITY_HIST_ID]         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[PIMS_PROPERTY_ACTIVITY_ID]          	bigint NOT NULL,
	[PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[SERVICE_PROVIDER_PERSON_ID]         	bigint NULL,
	[SERVICE_PROVIDER_ORG_ID]            	bigint NULL,
	[MANAGEMENT_FILE_ID]                 	bigint NULL,
	[PROP_MGMT_ACTIVITY_TYPE_CODE]       	nvarchar(20) NULL,
	[REQUEST_ADDED_DT]                   	date NOT NULL,
	[COMPLETION_DT]                      	date NULL,
	[REQUEST_SOURCE]                     	nvarchar(2000) NULL,
	[IS_DISABLED]                        	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	[DESCRIPTION]                        	nvarchar(4000) NULL,
	CONSTRAINT [PIMS_PRPACT_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_ACTIVITY_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRPACT_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRPACT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
	ADD CONSTRAINT [PIMS_PRPACT_H_UK]
	UNIQUE ([_PROPERTY_ACTIVITY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_HIST
PRINT N'Alter table dbo.PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_HIST.PIMS_MANAGEMENT_ACTIVITY_ID' , N'PIMS_PROPERTY_ACTIVITY_ID', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_ACT_MIN_CONTACT_HIST
PRINT N'Alter table dbo.PIMS_PROP_ACT_MIN_CONTACT_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_PROP_ACT_MIN_CONTACT_HIST.PIMS_MANAGEMENT_ACTIVITY_ID' , N'PIMS_PROPERTY_ACTIVITY_ID', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST.PIMS_MANAGEMENT_ACTIVITY_ID' , N'PIMS_PROPERTY_ACTIVITY_ID', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_ACT_INVOLVED_PARTY_HIST
PRINT N'Alter table dbo.PIMS_PROP_ACT_INVOLVED_PARTY_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_PROP_ACT_INVOLVED_PARTY_HIST.PIMS_MANAGEMENT_ACTIVITY_ID' , N'PIMS_PROPERTY_ACTIVITY_ID', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_CONTACT
PRINT N'Alter table dbo.PIMS_PROPERTY_CONTACT'
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT] DROP CONSTRAINT IF EXISTS [PRPCNT_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT] ADD CONSTRAINT [DF__PIMS_PROP__APP_L__4341E1B1] DEFAULT (user_name()) FOR [APP_LAST_UPDATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.ACQNFL_SUBFILE_INTEREST_TYPE_CODE_TCC
PRINT N'Create check constraint dbo.ACQNFL_SUBFILE_INTEREST_TYPE_CODE_TCC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [ACQNFL_SUBFILE_INTEREST_TYPE_CODE_TCC] CHECK ([PRNT_ACQUISITION_FILE_ID] IS NOT NULL AND [SUBFILE_INTEREST_TYPE_CODE] IS NOT NULL OR [PRNT_ACQUISITION_FILE_ID] IS NULL AND [SUBFILE_INTEREST_TYPE_CODE] IS NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_SERVICE_PROVIDER_ORG_ID_IDX
PRINT N'Create index dbo.PRPACT_SERVICE_PROVIDER_ORG_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_SERVICE_PROVIDER_ORG_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([SERVICE_PROVIDER_ORG_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRAC_PROPERTY_ID_IDX
PRINT N'Create index dbo.PRPRAC_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRAC_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ACTIVITY]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PACMAC_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PACMAC_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PACMAC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROP_ACTIVITY_MGMT_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_MIN_CONTACT]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX
PRINT N'Create index dbo.PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([SERVICE_PROVIDER_PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_MANAGEMENT_FILE_ID_IDX
PRINT N'Create index dbo.PRPACT_MANAGEMENT_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_MANAGEMENT_FILE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([MANAGEMENT_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PACMAC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PACMAC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PACMAC_I_S_I_TR] ON PIMS_PROP_ACTIVITY_MGMT_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_ACTIVITY_MGMT_ACTIVITY ("PROP_ACTVTY_MGMT_ACTVTY_TYP_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_ACTVTY_MGMT_ACTVTY_TYP_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPRAC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAC_I_S_I_TR] ON PIMS_PROP_PROP_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_ACTIVITY ("PROP_PROP_ACTIVITY_ID",
      "PROPERTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_PROP_ACTIVITY_ID",
      "PROPERTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPACT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPACT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPACT_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PIMS_PROPERTY_ACTIVITY_ID = deleted.PIMS_PROPERTY_ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY
    set "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID" = inserted."SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID" = inserted."SERVICE_PROVIDER_ORG_ID",
      "MANAGEMENT_FILE_ID" = inserted."MANAGEMENT_FILE_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_TYPE_CODE",
      "REQUEST_ADDED_DT" = inserted."REQUEST_ADDED_DT",
      "COMPLETION_DT" = inserted."COMPLETION_DT",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "REQUEST_SOURCE" = inserted."REQUEST_SOURCE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY.PIMS_PROPERTY_ACTIVITY_ID = inserted.PIMS_PROPERTY_ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_I_TR] ON PIMS_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY ("PROPERTY_ID",
      "PROPERTY_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "UTILITY_RESPONSIBILITY_TYPE_CODE",
      "TAX_RESPONSIBILITY_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "NOTES",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_RETIRED",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE",
      "BAND_NAME",
      "RESERVE_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ID",
      "PROPERTY_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "UTILITY_RESPONSIBILITY_TYPE_CODE",
      "TAX_RESPONSIBILITY_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "NOTES",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_RETIRED",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE",
      "BAND_NAME",
      "RESERVE_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACDO_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACDO_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACDO_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY_DOCUMENT ("PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACIN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACIN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACIN_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY_INVOICE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACTIVITY_INVOICE_ID = deleted.PROPERTY_ACTIVITY_INVOICE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY_INVOICE
    set "PROPERTY_ACTIVITY_INVOICE_ID" = inserted."PROPERTY_ACTIVITY_INVOICE_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "INVOICE_DT" = inserted."INVOICE_DT",
      "INVOICE_NUM" = inserted."INVOICE_NUM",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "GST_AMT" = inserted."GST_AMT",
      "PST_AMT" = inserted."PST_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "IS_PST_REQUIRED" = inserted."IS_PST_REQUIRED",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY_INVOICE
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY_INVOICE.PROPERTY_ACTIVITY_INVOICE_ID = inserted.PROPERTY_ACTIVITY_INVOICE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PACMAC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PACMAC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PACMAC_I_S_U_TR] ON PIMS_PROP_ACTIVITY_MGMT_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_ACTVTY_MGMT_ACTVTY_TYP_ID = deleted.PROP_ACTVTY_MGMT_ACTVTY_TYP_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_ACTIVITY_MGMT_ACTIVITY
    set "PROP_ACTVTY_MGMT_ACTVTY_TYP_ID" = inserted."PROP_ACTVTY_MGMT_ACTVTY_TYP_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_ACTIVITY_MGMT_ACTIVITY
    inner join inserted
    on (PIMS_PROP_ACTIVITY_MGMT_ACTIVITY.PROP_ACTVTY_MGMT_ACTVTY_TYP_ID = inserted.PROP_ACTVTY_MGMT_ACTVTY_TYP_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPRAC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAC_A_S_IUD_TR] ON PIMS_PROP_PROP_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_PROP_ACTIVITY_HIST set END_DATE_HIST = @curr_date where PROP_PROP_ACTIVITY_ID in (select PROP_PROP_ACTIVITY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_PROP_ACTIVITY_HIST ([PROP_PROP_ACTIVITY_ID], [PROPERTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_PROP_ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_PROP_ACTIVITY_ID], [PROPERTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_PROP_ACTIVITY_H_ID_SEQ]) as [_PROP_PROP_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPACT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPACT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPACT_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY ("PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID",
      "MANAGEMENT_FILE_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "REQUEST_ADDED_DT",
      "COMPLETION_DT",
      "DESCRIPTION",
      "REQUEST_SOURCE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID",
      "MANAGEMENT_FILE_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "REQUEST_ADDED_DT",
      "COMPLETION_DT",
      "DESCRIPTION",
      "REQUEST_SOURCE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACIN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRACIN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACIN_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY_INVOICE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_INVOICE_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACTIVITY_INVOICE_ID in (select PROPERTY_ACTIVITY_INVOICE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_INVOICE_HIST ([PROPERTY_ACTIVITY_INVOICE_ID], [PIMS_PROPERTY_ACTIVITY_ID], [INVOICE_DT], [INVOICE_NUM], [DESCRIPTION], [PRETAX_AMT], [GST_AMT], [PST_AMT], [TOTAL_AMT], [IS_PST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_INVOICE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACTIVITY_INVOICE_ID], [PIMS_PROPERTY_ACTIVITY_ID], [INVOICE_DT], [INVOICE_NUM], [DESCRIPTION], [PRETAX_AMT], [GST_AMT], [PST_AMT], [TOTAL_AMT], [IS_PST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_INVOICE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACDO_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACDO_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACDO_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACTIVITY_DOCUMENT_ID = deleted.PROPERTY_ACTIVITY_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY_DOCUMENT
    set "PROPERTY_ACTIVITY_DOCUMENT_ID" = inserted."PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY_DOCUMENT
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY_DOCUMENT.PROPERTY_ACTIVITY_DOCUMENT_ID = inserted.PROPERTY_ACTIVITY_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PAINVP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PAINVP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PAINVP_I_S_I_TR] ON PIMS_PROP_ACT_INVOLVED_PARTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_ACT_INVOLVED_PARTY ("PROP_ACT_INVOLVED_PARTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_ACT_INVOLVED_PARTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_U_TR] ON PIMS_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ID = deleted.PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY
    set "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE" = inserted."PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE" = inserted."PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE" = inserted."SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE" = inserted."VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE" = inserted."VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE" = inserted."PPH_STATUS_TYPE_CODE",
      "UTILITY_RESPONSIBILITY_TYPE_CODE" = inserted."UTILITY_RESPONSIBILITY_TYPE_CODE",
      "TAX_RESPONSIBILITY_TYPE_CODE" = inserted."TAX_RESPONSIBILITY_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE" = inserted."PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "PID" = inserted."PID",
      "PIN" = inserted."PIN",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "FILE_NUMBER_SUFFIX" = inserted."FILE_NUMBER_SUFFIX",
      "LAND_AREA" = inserted."LAND_AREA",
      "LAND_LEGAL_DESCRIPTION" = inserted."LAND_LEGAL_DESCRIPTION",
      "BOUNDARY" = inserted."BOUNDARY",
      "LOCATION" = inserted."LOCATION",
      "GENERAL_LOCATION" = inserted."GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER" = inserted."SURVEY_PLAN_NUMBER",
      "SURPLUS_DECLARATION_COMMENT" = inserted."SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE" = inserted."SURPLUS_DECLARATION_DATE",
      "NOTES" = inserted."NOTES",
      "MUNICIPAL_ZONING" = inserted."MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL" = inserted."IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT" = inserted."VOLUMETRIC_MEASUREMENT",
      "IS_OWNED" = inserted."IS_OWNED",
      "IS_RETIRED" = inserted."IS_RETIRED",
      "PPH_STATUS_UPDATE_USERID" = inserted."PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP" = inserted."PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID" = inserted."PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT" = inserted."IS_RWY_BELT_DOM_PATENT",
      "ADDITIONAL_DETAILS" = inserted."ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE" = inserted."IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE" = inserted."IS_TAXES_PAYABLE",
      "BAND_NAME" = inserted."BAND_NAME",
      "RESERVE_NAME" = inserted."RESERVE_NAME",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY
    inner join inserted
    on (PIMS_PROPERTY.PROPERTY_ID = inserted.PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACMC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACMC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACMC_I_S_I_TR] ON PIMS_PROP_ACT_MIN_CONTACT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_ACT_MIN_CONTACT ("PROP_ACT_MIN_CONTACT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_ACT_MIN_CONTACT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_A_S_IUD_TR] ON PIMS_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_HIST set END_DATE_HIST = @curr_date where PROPERTY_ID in (select PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_HIST ([PROPERTY_ID], [PROPERTY_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [UTILITY_RESPONSIBILITY_TYPE_CODE], [TAX_RESPONSIBILITY_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [LAND_LEGAL_DESCRIPTION], [GENERAL_LOCATION], [SURVEY_PLAN_NUMBER], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [NOTES], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_RETIRED], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ADDITIONAL_DETAILS], [IS_UTILITIES_PAYABLE], [IS_TAXES_PAYABLE], [BAND_NAME], [RESERVE_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ID], [PROPERTY_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [UTILITY_RESPONSIBILITY_TYPE_CODE], [TAX_RESPONSIBILITY_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [LAND_LEGAL_DESCRIPTION], [GENERAL_LOCATION], [SURVEY_PLAN_NUMBER], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [NOTES], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_RETIRED], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ADDITIONAL_DETAILS], [IS_UTILITIES_PAYABLE], [IS_TAXES_PAYABLE], [BAND_NAME], [RESERVE_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_H_ID_SEQ]) as [_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPACT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPACT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPACT_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_HIST set END_DATE_HIST = @curr_date where PIMS_PROPERTY_ACTIVITY_ID in (select PIMS_PROPERTY_ACTIVITY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_HIST ([PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE], [SERVICE_PROVIDER_PERSON_ID], [SERVICE_PROVIDER_ORG_ID], [REQUEST_ADDED_DT], [COMPLETION_DT], [DESCRIPTION], [REQUEST_SOURCE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE], [SERVICE_PROVIDER_PERSON_ID], [SERVICE_PROVIDER_ORG_ID], [REQUEST_ADDED_DT], [COMPLETION_DT], SUBSTRING([DESCRIPTION], 1, 4000), [REQUEST_SOURCE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACIN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACIN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACIN_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY_INVOICE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY_INVOICE ("PROPERTY_ACTIVITY_INVOICE_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "INVOICE_DT",
      "INVOICE_NUM",
      "DESCRIPTION",
      "PRETAX_AMT",
      "GST_AMT",
      "PST_AMT",
      "TOTAL_AMT",
      "IS_PST_REQUIRED",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACTIVITY_INVOICE_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "INVOICE_DT",
      "INVOICE_NUM",
      "DESCRIPTION",
      "PRETAX_AMT",
      "GST_AMT",
      "PST_AMT",
      "TOTAL_AMT",
      "IS_PST_REQUIRED",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACMC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACMC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACMC_I_S_U_TR] ON PIMS_PROP_ACT_MIN_CONTACT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_ACT_MIN_CONTACT_ID = deleted.PROP_ACT_MIN_CONTACT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_ACT_MIN_CONTACT
    set "PROP_ACT_MIN_CONTACT_ID" = inserted."PROP_ACT_MIN_CONTACT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_ACT_MIN_CONTACT
    inner join inserted
    on (PIMS_PROP_ACT_MIN_CONTACT.PROP_ACT_MIN_CONTACT_ID = inserted.PROP_ACT_MIN_CONTACT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PACMAC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PACMAC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PACMAC_A_S_IUD_TR] ON PIMS_PROP_ACTIVITY_MGMT_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_HIST set END_DATE_HIST = @curr_date where PROP_ACTVTY_MGMT_ACTVTY_TYP_ID in (select PROP_ACTVTY_MGMT_ACTVTY_TYP_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_HIST ([PROP_ACTVTY_MGMT_ACTVTY_TYP_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_ACTIVITY_MGMT_ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_ACTVTY_MGMT_ACTVTY_TYP_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_H_ID_SEQ]) as [_PROP_ACTIVITY_MGMT_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACMC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRACMC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACMC_A_S_IUD_TR] ON PIMS_PROP_ACT_MIN_CONTACT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_ACT_MIN_CONTACT_HIST set END_DATE_HIST = @curr_date where PROP_ACT_MIN_CONTACT_ID in (select PROP_ACT_MIN_CONTACT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_ACT_MIN_CONTACT_HIST ([PROP_ACT_MIN_CONTACT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_ACT_MIN_CONTACT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_ACT_MIN_CONTACT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_ACT_MIN_CONTACT_H_ID_SEQ]) as [_PROP_ACT_MIN_CONTACT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACDO_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRACDO_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACDO_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACTIVITY_DOCUMENT_ID in (select PROPERTY_ACTIVITY_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST ([PROPERTY_ACTIVITY_DOCUMENT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACTIVITY_DOCUMENT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PAINVP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PAINVP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PAINVP_A_S_IUD_TR] ON PIMS_PROP_ACT_INVOLVED_PARTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_ACT_INVOLVED_PARTY_HIST set END_DATE_HIST = @curr_date where PROP_ACT_INVOLVED_PARTY_ID in (select PROP_ACT_INVOLVED_PARTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_ACT_INVOLVED_PARTY_HIST ([PROP_ACT_INVOLVED_PARTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_ACT_INVOLVED_PARTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_ACT_INVOLVED_PARTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY_H_ID_SEQ]) as [_PROP_ACT_INVOLVED_PARTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PAINVP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PAINVP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PAINVP_I_S_U_TR] ON PIMS_PROP_ACT_INVOLVED_PARTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_ACT_INVOLVED_PARTY_ID = deleted.PROP_ACT_INVOLVED_PARTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_ACT_INVOLVED_PARTY
    set "PROP_ACT_INVOLVED_PARTY_ID" = inserted."PROP_ACT_INVOLVED_PARTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_ACT_INVOLVED_PARTY
    inner join inserted
    on (PIMS_PROP_ACT_INVOLVED_PARTY.PROP_ACT_INVOLVED_PARTY_ID = inserted.PROP_ACT_INVOLVED_PARTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRAC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAC_I_S_U_TR] ON PIMS_PROP_PROP_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_ACTIVITY_ID = deleted.PROP_PROP_ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_ACTIVITY
    set "PROP_PROP_ACTIVITY_ID" = inserted."PROP_PROP_ACTIVITY_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ACTIVITY
    inner join inserted
    on (PIMS_PROP_PROP_ACTIVITY.PROP_PROP_ACTIVITY_ID = inserted.PROP_PROP_ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_ORG_PIM_PRPACT_FK]
	FOREIGN KEY([SERVICE_PROVIDER_ORG_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_MGMTFL_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_MGMTFL_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_MGMTFL_PIM_PRPACT_FK]
	FOREIGN KEY([MANAGEMENT_FILE_ID])
	REFERENCES [dbo].[PIMS_MANAGEMENT_FILE]([MANAGEMENT_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PACSTY_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PACSTY_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_PACSTY_PIM_PRPACT_FK]
	FOREIGN KEY([PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE]([PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRPACT_FK]
	FOREIGN KEY([SERVICE_PROVIDER_PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRACTY_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRACTY_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_PRACTY_PIM_PRPACT_FK]
	FOREIGN KEY([PROP_MGMT_ACTIVITY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_MGMT_ACTIVITY_TYPE]([PROP_MGMT_ACTIVITY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PRPRAC_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PRPRAC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRPRAC_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRAC_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRAC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRAC_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MANAGEMENT_FILE_CONTACT_HIST
PRINT N'Drop table dbo.PIMS_MANAGEMENT_FILE_CONTACT_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MANAGEMENT_FILE_CONTACT_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_MANAGEMENT_FILE_CONTACT_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_MANAGEMENT_FILE_CONTACT_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_MANAGEMENT_FILE_CONTACT_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_MANAGEMENT_FILE_CONTACT_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_MANAGEMENT_FILE_CONTACT_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_MANAGEMENT_FILE_CONTACT_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MANAGEMENT_ACTIVITY_HIST
PRINT N'Drop table dbo.PIMS_MANAGEMENT_ACTIVITY_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_MANAGEMENT_ACTIVITY_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_MANAGEMENT_ACTIVITY_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MANAGEMENT_ACTIVITY_PROPERTY_HIST
PRINT N'Drop table dbo.PIMS_MANAGEMENT_ACTIVITY_PROPERTY_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_MANAGEMENT_ACTIVITY_PROPERTY_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_MANAGEMENT_ACTIVITY_PROPERTY_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_MANAGEMENT_ACTIVITY_PROPERTY_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_MANAGEMENT_ACTIVITY_PROPERTY_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_MANAGEMENT_ACTIVITY_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_MANAGEMENT_ACTIVITY_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
