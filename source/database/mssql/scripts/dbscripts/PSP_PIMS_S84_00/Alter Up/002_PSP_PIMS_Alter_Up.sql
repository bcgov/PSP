-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Tue Jul 02 14:33:42 PDT 2024
-- Execute this script on:
-- 		PSP_PIMS_S83.00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S84.00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACIN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRACIN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACIN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACIN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRACIN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACIN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACIN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRACIN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACIN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
	DROP CONSTRAINT IF EXISTS [PIM_PRPACT_PIM_PRACIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACDO_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACDO_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_PRPACT_PIM_PRACDO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCMNT_PIM_PRACDO_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCMNT_PIM_PRACDO_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_DOCMNT_PIM_PRACDO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRAC_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRAC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PRPRTY_PIM_PRPRAC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRPRAC_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRPRAC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PRPACT_PIM_PRPRAC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_PRACMC_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_PRACMC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_PRACMC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACMC_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACMC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
	DROP CONSTRAINT IF EXISTS [PIM_PRPACT_PIM_PRACMC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_PAINVP_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_PAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_PAINVP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPACT_PIM_PAINVP_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPACT_PIM_PAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	DROP CONSTRAINT IF EXISTS [PIM_PRPACT_PIM_PAINVP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_PAINVP_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_PAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_PAINVP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRACTY_PIM_PRPACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRACTY_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PRACTY_PIM_PRPACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_PRPACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_PRPACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PACSTY_PIM_PRPACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PACSTY_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PACSTY_PIM_PRPACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRACST_PIM_PRPACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRACST_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PRACST_PIM_PRPACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_PRPACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_PRPACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LCISTY_PIM_LCHKLI_FK
PRINT N'Drop foreign key constraint dbo.PIM_LCISTY_PIM_LCHKLI_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CHECKLIST_ITEM]
	DROP CONSTRAINT IF EXISTS [PIM_LCISTY_PIM_LCHKLI_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQCST_PIM_ACQCKI_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQCST_PIM_ACQCKI_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM]
	DROP CONSTRAINT IF EXISTS [PIM_ACQCST_PIM_ACQCKI_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSTERM_PIM_LSPYMT_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSTERM_PIM_LSPYMT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT]
	DROP CONSTRAINT IF EXISTS [PIM_LSTERM_PIM_LSPYMT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LTRMST_PIM_LSTERM_FK
PRINT N'Drop foreign key constraint dbo.PIM_LTRMST_PIM_LSTERM_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	DROP CONSTRAINT IF EXISTS [PIM_LTRMST_PIM_LSTERM_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSPMTF_BASE_RENT_FREQ_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSPMTF_BASE_RENT_FREQ_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	DROP CONSTRAINT IF EXISTS [PIM_LSPMTF_BASE_RENT_FREQ_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DSPCST_PIM_DSPCKI_FK
PRINT N'Drop foreign key constraint dbo.PIM_DSPCST_PIM_DSPCKI_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]
	DROP CONSTRAINT IF EXISTS [PIM_DSPCST_PIM_DSPCKI_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE].[PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACDO_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRACDO_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACDO_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACDO_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRACDO_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACDO_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACDO_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRACDO_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACDO_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT].[PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRACDO_DOCUMENT_ID_IDX
PRINT N'Drop index dbo.PRACDO_DOCUMENT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT].[PRACDO_DOCUMENT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRAC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRAC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRAC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRAC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRAC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRAC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRAC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPRAC_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRAC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRAC_PROPERTY_ID_IDX
PRINT N'Drop index dbo.PRPRAC_PROPERTY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_PROP_ACTIVITY].[PRPRAC_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_PROP_ACTIVITY].[PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACMC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRACMC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACMC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACMC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRACMC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACMC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACMC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRACMC_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACMC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_ACT_MIN_CONTACT].[PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRACMC_PERSON_ID_IDX
PRINT N'Drop index dbo.PRACMC_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_ACT_MIN_CONTACT].[PRACMC_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PAINVP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PAINVP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PAINVP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PAINVP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PAINVP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PAINVP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PAINVP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PAINVP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PAINVP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY].[PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PAINVP_PERSON_ID_IDX
PRINT N'Drop index dbo.PAINVP_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY].[PAINVP_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PAINVP_ORGANIZATION_ID_IDX
PRINT N'Drop index dbo.PAINVP_ORGANIZATION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY].[PAINVP_ORGANIZATION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPACT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPACT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPACT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPACT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPACT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPACT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSTERM_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LSTERM_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSTERM_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSTERM_VBL_RENT_FREQ_IDX
PRINT N'Drop index dbo.LSTERM_VBL_RENT_FREQ_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_PERIOD].[LSTERM_VBL_RENT_FREQ_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSTERM_LEASE_PMT_FREQ_TYPE_CODE_IDX
PRINT N'Drop index dbo.LSTERM_LEASE_PMT_FREQ_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_PERIOD].[LSTERM_LEASE_PMT_FREQ_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSTERM_LEASE_PERIOD_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.LSTERM_LEASE_PERIOD_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_PERIOD].[LSTERM_LEASE_PERIOD_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSTERM_LEASE_ID_IDX
PRINT N'Drop index dbo.LSTERM_LEASE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_PERIOD].[LSTERM_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSTERM_BASE_RENT_FREQ_IDX
PRINT N'Drop index dbo.LSTERM_BASE_RENT_FREQ_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_PERIOD].[LSTERM_BASE_RENT_FREQ_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSTERM_ADDL_RENT_FREQ_IDX
PRINT N'Drop index dbo.LSTERM_ADDL_RENT_FREQ_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_PERIOD].[LSTERM_ADDL_RENT_FREQ_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSPYMT_LEASE_TERM_ID_IDX
PRINT N'Drop index dbo.LSPYMT_LEASE_TERM_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_PAYMENT].[LSPYMT_LEASE_TERM_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRSCRC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRSCRC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRSCRC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPRP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPPRP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPRP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROPLS_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PROPLS_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROPLS_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPCKI_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DSPCKI_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPCKI_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPCKI_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DSPCKI_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPCKI_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.DSPCKI_DSP_CHKLST_ITEM_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.DSPCKI_DSP_CHKLST_ITEM_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM].[DSPCKI_DSP_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRSCRC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRSCRC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRSCRC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPRP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DSPPRP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPRP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQCKI_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQCKI_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQCKI_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LCHKLI_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LCHKLI_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LCHKLI_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LCHKLI_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LCHKLI_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LCHKLI_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROPLS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROPLS_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROPLS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPCKI_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPCKI_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPCKI_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPACT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPACT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPACT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX
PRINT N'Drop index dbo.PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY].[PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPACT_SERVICE_PROVIDER_ORG_ID_IDX
PRINT N'Drop index dbo.PRPACT_SERVICE_PROVIDER_ORG_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY].[PRPACT_SERVICE_PROVIDER_ORG_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX
PRINT N'Drop index dbo.PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY].[PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_IDX
PRINT N'Drop index dbo.PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY].[PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY].[PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQCKI_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQCKI_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQCKI_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQCKI_ACQ_CHKLST_ITEM_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.ACQCKI_ACQ_CHKLST_ITEM_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM].[ACQCKI_ACQ_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQCKI_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQCKI_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQCKI_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LCHKLI_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LCHKLI_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LCHKLI_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_CHECKLIST_ITEM].[LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LCISTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LCISTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LCISTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LCISTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LCISTY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LCISTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQCST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQCST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQCST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQCST_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQCST_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQCST_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSTERM_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSTERM_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSTERM_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSTERM_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSTERM_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSTERM_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LTRMST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LTRMST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LTRMST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LTRMST_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LTRMST_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LTRMST_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPCST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPCST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPCST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPCST_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DSPCST_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPCST_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRACIN_PK
PRINT N'Drop primary key constraint dbo.PRACIN_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
	DROP CONSTRAINT IF EXISTS [PRACIN_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRACDO_PK
PRINT N'Drop primary key constraint dbo.PRACDO_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PRACDO_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRPRAC_PK
PRINT N'Drop primary key constraint dbo.PRPRAC_PK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PRPRAC_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRACMC_PK
PRINT N'Drop primary key constraint dbo.PRACMC_PK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
	DROP CONSTRAINT IF EXISTS [PRACMC_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PAINVP_PK
PRINT N'Drop primary key constraint dbo.PAINVP_PK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	DROP CONSTRAINT IF EXISTS [PAINVP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_LSTERM_H_UK
PRINT N'Drop unique constraint dbo.PIMS_LSTERM_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_LSTERM_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_LSTERM_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_LSTERM_H_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_LSTERM_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRPACT_PK
PRINT N'Drop primary key constraint dbo.PRPACT_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PRPACT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LCISTY_PK
PRINT N'Drop primary key constraint dbo.LCISTY_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE]
	DROP CONSTRAINT IF EXISTS [LCISTY_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.ACQCST_PK
PRINT N'Drop primary key constraint dbo.ACQCST_PK'
GO
ALTER TABLE [dbo].[PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE]
	DROP CONSTRAINT IF EXISTS [ACQCST_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSTERM_PK
PRINT N'Drop primary key constraint dbo.LSTERM_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	DROP CONSTRAINT IF EXISTS [LSTERM_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LTRMST_PK
PRINT N'Drop primary key constraint dbo.LTRMST_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE]
	DROP CONSTRAINT IF EXISTS [LTRMST_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.DSPCST_PK
PRINT N'Drop primary key constraint dbo.DSPCST_PK'
GO
ALTER TABLE [dbo].[PIMS_DSP_CHKLST_ITEM_STATUS_TYPE]
	DROP CONSTRAINT IF EXISTS [DSPCST_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_CHKLST_ITEM_STATUS_TYPE
PRINT N'Create table dbo.PIMS_CHKLST_ITEM_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_CHKLST_ITEM_STATUS_TYPE]  ( 
	[CHKLST_ITEM_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                 	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]               	int NULL,
	[IS_DISABLED]                 	bit NOT NULL CONSTRAINT [CHKLIS_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NOT NULL CONSTRAINT [CHKLIS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [CHKLIS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [CHKLIS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [CHKLIS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [CHKLIS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CHKLIS_PK] PRIMARY KEY CLUSTERED([CHKLST_ITEM_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the various checklist item status types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CHKLST_ITEM_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the various checklist item status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Common table that contains the codes and associated descriptions of the various checklist item status types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_CHECKLIST_ITEM
PRINT N'Alter table dbo.PIMS_DISPOSITION_CHECKLIST_ITEM'
GO
EXEC dbo.sp_rename N'dbo.PIMS_DISPOSITION_CHECKLIST_ITEM.DSP_CHKLST_ITEM_STATUS_TYPE_CODE' , N'CHKLST_ITEM_STATUS_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM] DROP CONSTRAINT IF EXISTS [DSPCKI_DSP_CHKLST_ITEM_STATUS_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_CHKLST_ITEM_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'CHKLST_ITEM_STATUS_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_PERIOD_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_PERIOD_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_PERIOD_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE
PRINT N'Alter table dbo.PIMS_LEASE'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	ADD [TERMINATION_DATE] datetime NULL, 
	[IS_PUBLIC_BENEFIT] bit NULL, 
	[IS_FINANCIAL_GAIN] bit NULL, 
	[FEE_DETERMINATION_NOTE] nvarchar(1000) NULL, 
	[PRIMARY_ARBITRATION_CITY] nvarchar(200) NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date that the lease was terminated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'TERMINATION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is there an associated public benefit with this lease?  TRUE = Yes, FALSE = No, and NULL = Unknown.  The default is NULL (Unknown).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_PUBLIC_BENEFIT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is there an associated financial gain with this lease?  TRUE = Yes, FALSE = No, and NULL = Unknown.  The default is NULL (Unknown).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_FINANCIAL_GAIN'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Note associated with fee determination.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'FEE_DETERMINATION_NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The location in which primary arbtration of the lease occurred.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'PRIMARY_ARBITRATION_CITY'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PERIOD_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_PERIOD_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] DROP CONSTRAINT IF EXISTS [LTRMST_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] ADD CONSTRAINT [LSPRST_IS_DISABLED_DEF] DEFAULT (CONVERT([bit],(0))) FOR [IS_DISABLED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] DROP CONSTRAINT IF EXISTS [LTRMST_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] ADD CONSTRAINT [LSPRST_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT ((1)) FOR [CONCURRENCY_CONTROL_NUMBER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] DROP CONSTRAINT IF EXISTS [LTRMST_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] ADD CONSTRAINT [LSPRST_DB_CREATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [DB_CREATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] DROP CONSTRAINT IF EXISTS [LTRMST_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] ADD CONSTRAINT [LSPRST_DB_CREATE_USERID_DEF] DEFAULT (user_name()) FOR [DB_CREATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] DROP CONSTRAINT IF EXISTS [LTRMST_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] ADD CONSTRAINT [LSPRST_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [DB_LAST_UPDATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] DROP CONSTRAINT IF EXISTS [LTRMST_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] ADD CONSTRAINT [LSPRST_DB_LAST_UPDATE_USERID_DEF] DEFAULT (user_name()) FOR [DB_LAST_UPDATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE]
	ADD CONSTRAINT [LSPRST_PK]
	PRIMARY KEY CLUSTERED ([LEASE_PERIOD_STATUS_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PERIOD
PRINT N'Alter table dbo.PIMS_LEASE_PERIOD'
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Describes a duration period for the associated lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSTERM_LEASE_PERIOD_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSPERD_LEASE_PERIOD_ID_DEF] DEFAULT (NEXT VALUE FOR [PIMS_LEASE_PERIOD_ID_SEQ]) FOR [LEASE_PERIOD_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSTERM_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSPERD_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT ((1)) FOR [CONCURRENCY_CONTROL_NUMBER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSTERM_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSPERD_APP_CREATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [APP_CREATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSTERM_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSPERD_APP_CREATE_USERID_DEF] DEFAULT (user_name()) FOR [APP_CREATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSTERM_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSPERD_APP_CREATE_USER_DIRECTORY_DEF] DEFAULT (user_name()) FOR [APP_CREATE_USER_DIRECTORY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSTERM_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSPERD_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [APP_LAST_UPDATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSTERM_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSPERD_APP_LAST_UPDATE_USERID_DEF] DEFAULT (user_name()) FOR [APP_LAST_UPDATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSTERM_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSPERD_APP_LAST_UPDATE_USER_DIRECTORY_DEF] DEFAULT (user_name()) FOR [APP_LAST_UPDATE_USER_DIRECTORY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSTERM_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSPERD_DB_CREATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [DB_CREATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSTERM_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSPERD_DB_CREATE_USERID_DEF] DEFAULT (user_name()) FOR [DB_CREATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSTERM_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSPERD_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT (getutcdate()) FOR [DB_LAST_UPDATE_TIMESTAMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSTERM_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSPERD_DB_LAST_UPDATE_USERID_DEF] DEFAULT (user_name()) FOR [DB_LAST_UPDATE_USERID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_LEASE_PERIOD.PAYMENT_TYPE' , N'IS_VARIABLE_PAYMENT', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSTERM_PAYMENT_TYPE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSPERD_IS_VARIABLE_PAYMENT_DEF] DEFAULT (CONVERT([bit],(0))) FOR [IS_VARIABLE_PAYMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_LEASE_PERIOD.PERIOD_DURATION' , N'IS_FLEXIBLE_DURATION', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] DROP CONSTRAINT IF EXISTS [LSTERM_PERIOD_DURATION_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ADD CONSTRAINT [LSPERD_IS_FLEXIBLE_DURATION_DEF] DEFAULT (CONVERT([bit],(0))) FOR [IS_FLEXIBLE_DURATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	ADD [ADDL_RENT_GST_AMOUNT] money NULL, 
	[VBL_RENT_GST_AMOUNT] money NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST dollar amount for the additional rent.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'ADDL_RENT_GST_AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST dollar amount for the variable rent.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'VBL_RENT_GST_AMOUNT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	DROP COLUMN IF EXISTS [BASE_RENT_FREQ], [BASE_RENT_AGREED_PMT], [IS_BASE_RENT_SUBJECT_TO_GST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	ADD CONSTRAINT [LSPERD_PK]
	PRIMARY KEY CLUSTERED ([LEASE_PERIOD_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_RENEWAL_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_RENEWAL_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_RENEWAL_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_RENEWAL
PRINT N'Create table dbo.PIMS_LEASE_RENEWAL'
GO
CREATE TABLE [dbo].[PIMS_LEASE_RENEWAL]  ( 
	[LEASE_RENEWAL_ID]              	bigint NOT NULL CONSTRAINT [LSRNWL_LEASE_RENEWAL_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_RENEWAL_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[COMMENCEMENT_DT]               	datetime NULL,
	[EXPIRY_DT]                     	datetime NULL,
	[IS_EXERCISED]                  	bit NULL,
	[RENEWAL_NOTE]                  	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LSRNWL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LSRNWL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LSRNWL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LSRNWL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LSRNWL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LSRNWL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LSRNWL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LSRNWL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LSRNWL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LSRNWL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LSRNWL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSRNWL_PK] PRIMARY KEY CLUSTERED([LEASE_RENEWAL_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'LEASE_RENEWAL_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'LEASE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date that the lease lease begins.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'COMMENCEMENT_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date that the lease lease ends.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'EXPIRY_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the lease renewal was exercised.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'IS_EXERCISED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes pertaining to the lease reewal.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'RENEWAL_NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing lease renewal options.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_CHECKLIST_ITEM
PRINT N'Alter table dbo.PIMS_ACQUISITION_CHECKLIST_ITEM'
GO
EXEC dbo.sp_rename N'dbo.PIMS_ACQUISITION_CHECKLIST_ITEM.ACQ_CHKLST_ITEM_STATUS_TYPE_CODE' , N'CHKLST_ITEM_STATUS_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_CHKLST_ITEM_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'CHKLST_ITEM_STATUS_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CHECKLIST_ITEM
PRINT N'Alter table dbo.PIMS_LEASE_CHECKLIST_ITEM'
GO
EXEC dbo.sp_rename N'dbo.PIMS_LEASE_CHECKLIST_ITEM.LEASE_CHKLST_ITEM_STATUS_TYPE_CODE' , N'CHKLST_ITEM_STATUS_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_CHKLST_ITEM_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'CHKLST_ITEM_STATUS_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_CHECKLIST_ITEM_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_CHECKLIST_ITEM_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_ACQUISITION_CHECKLIST_ITEM_HIST.ACQ_CHKLST_ITEM_STATUS_TYPE_CODE' , N'CHKLST_ITEM_STATUS_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROPERTY_ACTIVITY
PRINT N'Rebuild table dbo.PIMS_PROPERTY_ACTIVITY'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_PROPERTY_ACTIVITY_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [DF__PIMS_PROP__APP_L__21E0EDE6]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1719942371901]  ( 
	[PIMS_PROPERTY_ACTIVITY_ID]          	bigint NOT NULL CONSTRAINT [PRPACT_PROPERTY_ACTIVITY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_ID_SEQ]),
	[PROP_MGMT_ACTIVITY_TYPE_CODE]       	nvarchar(20) NOT NULL CONSTRAINT [PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[PROP_MGMT_ACTIVITY_SUBTYPE_CODE]    	nvarchar(20) NOT NULL CONSTRAINT [PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL CONSTRAINT [PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_DEF]  DEFAULT ('NOTSTARTED'),
	[SERVICE_PROVIDER_PERSON_ID]         	bigint NULL,
	[SERVICE_PROVIDER_ORG_ID]            	bigint NULL,
	[REQUEST_ADDED_DT]                   	date NOT NULL,
	[COMPLETION_DT]                      	date NULL,
	[DESCRIPTION]                        	nvarchar(max) NULL,
	[REQUEST_SOURCE]                     	nvarchar(2000) NULL,
	[IS_DISABLED]                        	bit NULL CONSTRAINT [PRPACT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL CONSTRAINT [PRPACT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [PRPACT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPACT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DF__PIMS_PROP__APP_L__21E0EDE6]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL CONSTRAINT [PRPACT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPACT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPACT_PK] PRIMARY KEY CLUSTERED([PIMS_PROPERTY_ACTIVITY_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Type of property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1719942371901', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Subtype of property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1719942371901', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_SUBTYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Status of the property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1719942371901', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the person as a service provider.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1719942371901', 
	@level2type = N'Column', @level2name = N'SERVICE_PROVIDER_PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the organization as a service provider.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1719942371901', 
	@level2type = N'Column', @level2name = N'SERVICE_PROVIDER_ORG_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the request for a property management activity was added' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1719942371901', 
	@level2type = N'Column', @level2name = N'REQUEST_ADDED_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the property management activity was completed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1719942371901', 
	@level2type = N'Column', @level2name = N'COMPLETION_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1719942371901', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Source of the management activity request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1719942371901', 
	@level2type = N'Column', @level2name = N'REQUEST_SOURCE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1719942371901', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the activities that are associated with this property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1719942371901'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1719942371901]([PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_TYPE_CODE], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE], [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE], [SERVICE_PROVIDER_PERSON_ID], [SERVICE_PROVIDER_ORG_ID], [REQUEST_ADDED_DT], [COMPLETION_DT], [DESCRIPTION], [REQUEST_SOURCE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_TYPE_CODE], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE], [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE], [SERVICE_PROVIDER_PERSON_ID], [SERVICE_PROVIDER_ORG_ID], [REQUEST_ADDED_DT], [COMPLETION_DT], SUBSTRING(DESCRIPTION,1,2147483647), [REQUEST_SOURCE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_PROPERTY_ACTIVITY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1719942371901]', N'PIMS_PROPERTY_ACTIVITY', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACTIVITY_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_ACTIVITY_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
	DROP COLUMN IF EXISTS [DESCRIPTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_RENEWAL_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_RENEWAL_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_RENEWAL_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_RENEWAL_HIST
PRINT N'Create table dbo.PIMS_LEASE_RENEWAL_HIST'
GO
CREATE TABLE [dbo].[PIMS_LEASE_RENEWAL_HIST]  ( 
	[_LEASE_RENEWAL_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_RENEWAL_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_RENEWAL_ID]              	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[COMMENCEMENT_DT]               	datetime NULL,
	[EXPIRY_DT]                     	datetime NULL,
	[IS_EXERCISED]                  	bit NULL,
	[RENEWAL_NOTE]                  	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LSRNWL_H_PK] PRIMARY KEY CLUSTERED([_LEASE_RENEWAL_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_LSRNWL_H_UK
PRINT N'Create unique constraint dbo.PIMS_LSRNWL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_RENEWAL_HIST]
	ADD CONSTRAINT [PIMS_LSRNWL_H_UK]
	UNIQUE ([_LEASE_RENEWAL_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_LEASE
PRINT N'Alter table dbo.PIMS_PROPERTY_LEASE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	ADD [LOCATION] [sys].[geometry] NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Geospatial location (pin) of property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_LEASE', 
	@level2type = N'Column', @level2name = N'LOCATION'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CHECKLIST_ITEM_HIST
PRINT N'Alter table dbo.PIMS_LEASE_CHECKLIST_ITEM_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_LEASE_CHECKLIST_ITEM_HIST.LEASE_CHKLST_ITEM_STATUS_TYPE_CODE' , N'CHKLST_ITEM_STATUS_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PERIOD_HIST
PRINT N'Alter table dbo.PIMS_LEASE_PERIOD_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_LEASE_PERIOD_HIST.PAYMENT_TYPE' , N'IS_VARIABLE_PAYMENT', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_LEASE_PERIOD_HIST.PERIOD_DURATION' , N'IS_FLEXIBLE_DURATION', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_HIST]
	ADD [ADDL_RENT_GST_AMOUNT] money NULL, 
	[VBL_RENT_GST_AMOUNT] money NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_HIST]
	DROP COLUMN IF EXISTS [BASE_RENT_FREQ], [BASE_RENT_AGREED_PMT], [IS_BASE_RENT_SUBJECT_TO_GST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_HIST]
	ADD CONSTRAINT [PIMS_LSPERD_H_PK]
	PRIMARY KEY CLUSTERED ([_LEASE_PERIOD_HIST_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_LSPERD_H_UK
PRINT N'Create unique constraint dbo.PIMS_LSPERD_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_HIST]
	ADD CONSTRAINT [PIMS_LSPERD_H_UK]
	UNIQUE ([_LEASE_PERIOD_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE_PROPERTY
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE_PROPERTY'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY]
	ADD [LOCATION] [sys].[geometry] NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Geospatial location (pin) of property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'LOCATION'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_RESEARCH_FILE
PRINT N'Alter table dbo.PIMS_PROPERTY_RESEARCH_FILE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE]
	ADD [LOCATION] [sys].[geometry] NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Geospatial location (pin) of property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'LOCATION'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_CHECKLIST_ITEM_HIST
PRINT N'Alter table dbo.PIMS_DISPOSITION_CHECKLIST_ITEM_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_DISPOSITION_CHECKLIST_ITEM_HIST.DSP_CHKLST_ITEM_STATUS_TYPE_CODE' , N'CHKLST_ITEM_STATUS_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_HIST
PRINT N'Alter table dbo.PIMS_LEASE_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_HIST]
	ADD [TERMINATION_DATE] datetime NULL, 
	[IS_PUBLIC_BENEFIT] bit NULL, 
	[IS_FINANCIAL_GAIN] bit NULL, 
	[FEE_DETERMINATION_NOTE] nvarchar(1000) NULL, 
	[PRIMARY_ARBITRATION_CITY] nvarchar(200) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROP_ACT_INVOLVED_PARTY
PRINT N'Rebuild table dbo.PIMS_PROP_ACT_INVOLVED_PARTY'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_PROP_ACT_INVOLVED_PARTY_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1719942371908]  ( 
	[PROP_ACT_INVOLVED_PARTY_ID]    	bigint NOT NULL CONSTRAINT [PAINVP_PROP_ACT_INVOLVED_PARTY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_ACT_INVOLVED_PARTY_ID_SEQ]),
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PAINVP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PAINVP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PAINVP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PAINVP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PAINVP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PAINVP_PK] PRIMARY KEY CLUSTERED([PROP_ACT_INVOLVED_PARTY_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property management activity to a vendor (many-to-many).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1719942371908'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1719942371908]([PROP_ACT_INVOLVED_PARTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [PROP_ACT_INVOLVED_PARTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1719942371908]', N'PIMS_PROP_ACT_INVOLVED_PARTY', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROP_ACT_MIN_CONTACT
PRINT N'Rebuild table dbo.PIMS_PROP_ACT_MIN_CONTACT'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_PROP_ACT_MIN_CONTACT_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1719942371909]  ( 
	[PROP_ACT_MIN_CONTACT_ID]       	bigint NOT NULL CONSTRAINT [PRACMC_PROP_ACT_MIN_CONTACT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_ACT_MIN_CONTACT_ID_SEQ]),
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRACMC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACMC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACMC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACMC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACMC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACMC_PK] PRIMARY KEY CLUSTERED([PROP_ACT_MIN_CONTACT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property management activity to a Ministry contact (many-to-many).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1719942371909'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1719942371909]([PROP_ACT_MIN_CONTACT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [PROP_ACT_MIN_CONTACT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1719942371909]', N'PIMS_PROP_ACT_MIN_CONTACT', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROP_PROP_ACTIVITY
PRINT N'Rebuild table dbo.PIMS_PROP_PROP_ACTIVITY'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_PROP_PROP_ACTIVITY_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1719942371911]  ( 
	[PROP_PROP_ACTIVITY_ID]         	bigint NOT NULL CONSTRAINT [PRPRAC_PROP_PROP_ACTIVITY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ACTIVITY_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRPRAC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRAC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPRAC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRAC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPRAC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRAC_PK] PRIMARY KEY CLUSTERED([PROP_PROP_ACTIVITY_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property to a property management actity (many-to-many).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1719942371911'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1719942371911]([PROP_PROP_ACTIVITY_ID], [PROPERTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [PROP_PROP_ACTIVITY_ID], [PROPERTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_PROP_PROP_ACTIVITY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROP_PROP_ACTIVITY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1719942371911]', N'PIMS_PROP_PROP_ACTIVITY', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT
PRINT N'Rebuild table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_PROPERTY_ACTIVITY_DOCUMENT_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1719942371907]  ( 
	[PROPERTY_ACTIVITY_DOCUMENT_ID] 	bigint NOT NULL CONSTRAINT [PRACDO_PROPERTY_ACTIVITY_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_DOCUMENT_ID_SEQ]),
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRACDO_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACDO_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACDO_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACDO_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACDO_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACDO_PK] PRIMARY KEY CLUSTERED([PROPERTY_ACTIVITY_DOCUMENT_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1719942371907]([PROPERTY_ACTIVITY_DOCUMENT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [PROPERTY_ACTIVITY_DOCUMENT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1719942371907]', N'PIMS_PROPERTY_ACTIVITY_DOCUMENT', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROPERTY_ACTIVITY_INVOICE
PRINT N'Rebuild table dbo.PIMS_PROPERTY_ACTIVITY_INVOICE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_PROPERTY_ACTIVITY_INVOICE_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_INVOICE_DT_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_DESCRIPTION_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_IS_PST_REQUIRED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1719942371910]  ( 
	[PROPERTY_ACTIVITY_INVOICE_ID]  	bigint NOT NULL CONSTRAINT [PRACIN_PROPERTY_ACTIVITY_INVOICE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_INVOICE_ID_SEQ]),
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[INVOICE_DT]                    	date NOT NULL CONSTRAINT [PRACIN_INVOICE_DT_DEF]  DEFAULT (getutcdate()),
	[INVOICE_NUM]                   	nvarchar(50) NULL,
	[DESCRIPTION]                   	nvarchar(1000) NULL CONSTRAINT [PRACIN_DESCRIPTION_DEF]  DEFAULT ('Unknown'),
	[PRETAX_AMT]                    	money NOT NULL,
	[GST_AMT]                       	money NULL,
	[PST_AMT]                       	money NULL,
	[TOTAL_AMT]                     	money NULL,
	[IS_PST_REQUIRED]               	bit NOT NULL CONSTRAINT [PRACIN_IS_PST_REQUIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_DISABLED]                   	bit NULL CONSTRAINT [PRACIN_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRACIN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACIN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACIN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACIN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACIN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACIN_PK] PRIMARY KEY CLUSTERED([PROPERTY_ACTIVITY_INVOICE_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1719942371910]([PROPERTY_ACTIVITY_INVOICE_ID], [PIMS_PROPERTY_ACTIVITY_ID], [INVOICE_DT], [INVOICE_NUM], [DESCRIPTION], [PRETAX_AMT], [GST_AMT], [PST_AMT], [TOTAL_AMT], [IS_PST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [PROPERTY_ACTIVITY_INVOICE_ID], [PIMS_PROPERTY_ACTIVITY_ID], [INVOICE_DT], [INVOICE_NUM], [DESCRIPTION], [PRETAX_AMT], [GST_AMT], [PST_AMT], [TOTAL_AMT], [IS_PST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1719942371910]', N'PIMS_PROPERTY_ACTIVITY_INVOICE', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the activities that are associated with this property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE'
GO

-- Create index dbo.DSPCKI_CHKLST_ITEM_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.DSPCKI_CHKLST_ITEM_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPCKI_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]([CHKLST_ITEM_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSPYMT_LEASE_PERIOD_ID_IDX
PRINT N'Create index dbo.LSPYMT_LEASE_PERIOD_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSPYMT_LEASE_PERIOD_ID_IDX]
	ON [dbo].[PIMS_LEASE_PAYMENT]([LEASE_PERIOD_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSPERD_VBL_RENT_FREQ_IDX
PRINT N'Create index dbo.LSPERD_VBL_RENT_FREQ_IDX'
GO
CREATE NONCLUSTERED INDEX [LSPERD_VBL_RENT_FREQ_IDX]
	ON [dbo].[PIMS_LEASE_PERIOD]([VBL_RENT_FREQ])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSPERD_LEASE_PERIOD_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.LSPERD_LEASE_PERIOD_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LSPERD_LEASE_PERIOD_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_PERIOD]([LEASE_PERIOD_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSPERD_LEASE_PMT_FREQ_TYPE_CODE_IDX
PRINT N'Create index dbo.LSPERD_LEASE_PMT_FREQ_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LSPERD_LEASE_PMT_FREQ_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_PERIOD]([LEASE_PMT_FREQ_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSPERD_ADDL_RENT_FREQ_IDX
PRINT N'Create index dbo.LSPERD_ADDL_RENT_FREQ_IDX'
GO
CREATE NONCLUSTERED INDEX [LSPERD_ADDL_RENT_FREQ_IDX]
	ON [dbo].[PIMS_LEASE_PERIOD]([ADDL_RENT_FREQ])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSRNWL_LEASE_ID_IDX
PRINT N'Create index dbo.LSRNWL_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSRNWL_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_RENEWAL]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQCKI_CHKLST_ITEM_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.ACQCKI_CHKLST_ITEM_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQCKI_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM]([CHKLST_ITEM_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSPERD_LEASE_ID_IDX
PRINT N'Create index dbo.LSPERD_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSPERD_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_PERIOD]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CHECKLIST_ITEM]([CHKLST_ITEM_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCHKLI_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LCHKLI_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCHKLI_I_S_I_TR] ON PIMS_LEASE_CHECKLIST_ITEM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CHECKLIST_ITEM ("LEASE_CHECKLIST_ITEM_ID",
      "LEASE_ID",
      "LEASE_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_CHECKLIST_ITEM_ID",
      "LEASE_ID",
      "LEASE_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CHKLIS_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_CHKLIS_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CHKLIS_I_S_I_TR] ON PIMS_CHKLST_ITEM_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CHKLST_ITEM_STATUS_TYPE ("CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQCKI_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQCKI_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQCKI_I_S_I_TR] ON PIMS_ACQUISITION_CHECKLIST_ITEM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_CHECKLIST_ITEM ("ACQUISITION_CHECKLIST_ITEM_ID",
      "ACQUISITION_FILE_ID",
      "ACQ_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_CHECKLIST_ITEM_ID",
      "ACQUISITION_FILE_ID",
      "ACQ_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQCKI_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQCKI_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQCKI_A_S_IUD_TR] ON PIMS_ACQUISITION_CHECKLIST_ITEM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_CHECKLIST_ITEM_HIST set END_DATE_HIST = @curr_date where ACQUISITION_CHECKLIST_ITEM_ID in (select ACQUISITION_CHECKLIST_ITEM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_CHECKLIST_ITEM_HIST ([ACQUISITION_CHECKLIST_ITEM_ID], [ACQUISITION_FILE_ID], [ACQ_CHKLST_ITEM_TYPE_CODE], [CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_CHECKLIST_ITEM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_CHECKLIST_ITEM_ID], [ACQUISITION_FILE_ID], [ACQ_CHKLST_ITEM_TYPE_CODE], [CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM_H_ID_SEQ]) as [_ACQUISITION_CHECKLIST_ITEM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_IDX
PRINT N'Create index dbo.PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([PROP_MGMT_ACTIVITY_SUBTYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX
PRINT N'Create index dbo.PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([PROP_MGMT_ACTIVITY_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_SERVICE_PROVIDER_ORG_ID_IDX
PRINT N'Create index dbo.PRPACT_SERVICE_PROVIDER_ORG_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_SERVICE_PROVIDER_ORG_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([SERVICE_PROVIDER_ORG_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX
PRINT N'Create index dbo.PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([SERVICE_PROVIDER_PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPACT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPACT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPACT_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_HIST set END_DATE_HIST = @curr_date where PIMS_PROPERTY_ACTIVITY_ID in (select PIMS_PROPERTY_ACTIVITY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_HIST ([PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_TYPE_CODE], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE], [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE], [SERVICE_PROVIDER_PERSON_ID], [SERVICE_PROVIDER_ORG_ID], [REQUEST_ADDED_DT], [COMPLETION_DT], [REQUEST_SOURCE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_TYPE_CODE], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE], [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE], [SERVICE_PROVIDER_PERSON_ID], [SERVICE_PROVIDER_ORG_ID], [REQUEST_ADDED_DT], [COMPLETION_DT], [REQUEST_SOURCE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSRNWL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSRNWL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSRNWL_I_S_U_TR] ON PIMS_LEASE_RENEWAL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_RENEWAL_ID = deleted.LEASE_RENEWAL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_RENEWAL
    set "LEASE_RENEWAL_ID" = inserted."LEASE_RENEWAL_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "COMMENCEMENT_DT" = inserted."COMMENCEMENT_DT",
      "EXPIRY_DT" = inserted."EXPIRY_DT",
      "IS_EXERCISED" = inserted."IS_EXERCISED",
      "RENEWAL_NOTE" = inserted."RENEWAL_NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_RENEWAL
    inner join inserted
    on (PIMS_LEASE_RENEWAL.LEASE_RENEWAL_ID = inserted.LEASE_RENEWAL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCKI_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPCKI_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCKI_I_S_U_TR] ON PIMS_DISPOSITION_CHECKLIST_ITEM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_CHECKLIST_ITEM_ID = deleted.DISPOSITION_CHECKLIST_ITEM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_CHECKLIST_ITEM
    set "DISPOSITION_CHECKLIST_ITEM_ID" = inserted."DISPOSITION_CHECKLIST_ITEM_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DSP_CHKLST_ITEM_TYPE_CODE" = inserted."DSP_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_CHECKLIST_ITEM
    inner join inserted
    on (PIMS_DISPOSITION_CHECKLIST_ITEM.DISPOSITION_CHECKLIST_ITEM_ID = inserted.DISPOSITION_CHECKLIST_ITEM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSPRST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LSPRST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSPRST_I_S_I_TR] ON PIMS_LEASE_PERIOD_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PERIOD_STATUS_TYPE ("LEASE_PERIOD_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PERIOD_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_U_TR] ON PIMS_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_ID = deleted.LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE
    set "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE" = inserted."LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE" = inserted."LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE" = inserted."LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE" = inserted."LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE" = inserted."LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE" = inserted."LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE" = inserted."LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE" = inserted."LEASE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "L_FILE_NO" = inserted."L_FILE_NO",
      "TFA_FILE_NO" = inserted."TFA_FILE_NO",
      "TFA_FILE_NUMBER" = inserted."TFA_FILE_NUMBER",
      "PS_FILE_NO" = inserted."PS_FILE_NO",
      "LEASE_DESCRIPTION" = inserted."LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC" = inserted."LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC" = inserted."LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES" = inserted."LEASE_NOTES",
      "MOTI_CONTACT" = inserted."MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE" = inserted."DOCUMENTATION_REFERENCE",
      "RETURN_NOTES" = inserted."RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE" = inserted."OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE" = inserted."OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE" = inserted."OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE" = inserted."ORIG_START_DATE",
      "ORIG_EXPIRY_DATE" = inserted."ORIG_EXPIRY_DATE",
      "TERMINATION_DATE" = inserted."TERMINATION_DATE",
      "LEASE_AMOUNT" = inserted."LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE" = inserted."RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE" = inserted."INSPECTION_DATE",
      "INSPECTION_NOTES" = inserted."INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA" = inserted."IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG" = inserted."IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT" = inserted."IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED" = inserted."IS_EXPIRED",
      "HAS_PHYSICAL_FILE" = inserted."HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE" = inserted."HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE" = inserted."HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE" = inserted."HAS_DIGITAL_LICENSE",
      "CANCELLATION_REASON" = inserted."CANCELLATION_REASON",
      "TERMINATION_REASON" = inserted."TERMINATION_REASON",
      "IS_PUBLIC_BENEFIT" = inserted."IS_PUBLIC_BENEFIT",
      "IS_FINANCIAL_GAIN" = inserted."IS_FINANCIAL_GAIN",
      "FEE_DETERMINATION_NOTE" = inserted."FEE_DETERMINATION_NOTE",
      "PRIMARY_ARBITRATION_CITY" = inserted."PRIMARY_ARBITRATION_CITY",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE
    inner join inserted
    on (PIMS_LEASE.LEASE_ID = inserted.LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSRNWL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LSRNWL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSRNWL_A_S_IUD_TR] ON PIMS_LEASE_RENEWAL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_RENEWAL_HIST set END_DATE_HIST = @curr_date where LEASE_RENEWAL_ID in (select LEASE_RENEWAL_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_RENEWAL_HIST ([LEASE_RENEWAL_ID], [LEASE_ID], [COMMENCEMENT_DT], [EXPIRY_DT], [IS_EXERCISED], [RENEWAL_NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_RENEWAL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_RENEWAL_ID], [LEASE_ID], [COMMENCEMENT_DT], [EXPIRY_DT], [IS_EXERCISED], [RENEWAL_NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_RENEWAL_H_ID_SEQ]) as [_LEASE_RENEWAL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSPERD_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LSPERD_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSPERD_I_S_I_TR] ON PIMS_LEASE_PERIOD INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PERIOD ("LEASE_PERIOD_ID",
      "LEASE_ID",
      "LEASE_PERIOD_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "ADDL_RENT_FREQ",
      "VBL_RENT_FREQ",
      "PERIOD_START_DATE",
      "PERIOD_EXPIRY_DATE",
      "PERIOD_RENEWAL_DATE",
      "PAYMENT_AMOUNT",
      "PAYMENT_DUE_DATE",
      "PAYMENT_NOTE",
      "IS_GST_ELIGIBLE",
      "GST_AMOUNT",
      "IS_PERIOD_EXERCISED",
      "IS_VARIABLE_PAYMENT",
      "IS_FLEXIBLE_DURATION",
      "ADDL_RENT_AGREED_PMT",
      "ADDL_RENT_GST_AMOUNT",
      "IS_ADDL_RENT_SUBJECT_TO_GST",
      "VBL_RENT_AGREED_PMT",
      "VBL_RENT_GST_AMOUNT",
      "IS_VBL_RENT_SUBJECT_TO_GST",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_PERIOD_ID",
      "LEASE_ID",
      "LEASE_PERIOD_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "ADDL_RENT_FREQ",
      "VBL_RENT_FREQ",
      "PERIOD_START_DATE",
      "PERIOD_EXPIRY_DATE",
      "PERIOD_RENEWAL_DATE",
      "PAYMENT_AMOUNT",
      "PAYMENT_DUE_DATE",
      "PAYMENT_NOTE",
      "IS_GST_ELIGIBLE",
      "GST_AMOUNT",
      "IS_PERIOD_EXERCISED",
      "IS_VARIABLE_PAYMENT",
      "IS_FLEXIBLE_DURATION",
      "ADDL_RENT_AGREED_PMT",
      "ADDL_RENT_GST_AMOUNT",
      "IS_ADDL_RENT_SUBJECT_TO_GST",
      "VBL_RENT_AGREED_PMT",
      "VBL_RENT_GST_AMOUNT",
      "IS_VBL_RENT_SUBJECT_TO_GST",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PROPLS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PROPLS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PROPLS_I_S_U_TR] ON PIMS_PROPERTY_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_LEASE_ID = deleted.PROPERTY_LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_LEASE
    set "PROPERTY_LEASE_ID" = inserted."PROPERTY_LEASE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "NAME" = inserted."NAME",
      "LEASE_AREA" = inserted."LEASE_AREA",
      "LOCATION" = inserted."LOCATION",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_LEASE
    inner join inserted
    on (PIMS_PROPERTY_LEASE.PROPERTY_LEASE_ID = inserted.PROPERTY_LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCHKLI_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LCHKLI_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCHKLI_I_S_U_TR] ON PIMS_LEASE_CHECKLIST_ITEM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CHECKLIST_ITEM_ID = deleted.LEASE_CHECKLIST_ITEM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CHECKLIST_ITEM
    set "LEASE_CHECKLIST_ITEM_ID" = inserted."LEASE_CHECKLIST_ITEM_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_CHKLST_ITEM_TYPE_CODE" = inserted."LEASE_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CHECKLIST_ITEM
    inner join inserted
    on (PIMS_LEASE_CHECKLIST_ITEM.LEASE_CHECKLIST_ITEM_ID = inserted.LEASE_CHECKLIST_ITEM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCHKLI_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LCHKLI_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCHKLI_A_S_IUD_TR] ON PIMS_LEASE_CHECKLIST_ITEM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_CHECKLIST_ITEM_HIST set END_DATE_HIST = @curr_date where LEASE_CHECKLIST_ITEM_ID in (select LEASE_CHECKLIST_ITEM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_CHECKLIST_ITEM_HIST ([LEASE_CHECKLIST_ITEM_ID], [LEASE_ID], [LEASE_CHKLST_ITEM_TYPE_CODE], [CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_CHECKLIST_ITEM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_CHECKLIST_ITEM_ID], [LEASE_ID], [LEASE_CHKLST_ITEM_TYPE_CODE], [CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_CHECKLIST_ITEM_H_ID_SEQ]) as [_LEASE_CHECKLIST_ITEM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSPERD_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LSPERD_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSPERD_A_S_IUD_TR] ON PIMS_LEASE_PERIOD FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_PERIOD_HIST set END_DATE_HIST = @curr_date where LEASE_PERIOD_ID in (select LEASE_PERIOD_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_PERIOD_HIST ([LEASE_PERIOD_ID], [LEASE_ID], [LEASE_PERIOD_STATUS_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [ADDL_RENT_FREQ], [VBL_RENT_FREQ], [PERIOD_START_DATE], [PERIOD_EXPIRY_DATE], [PERIOD_RENEWAL_DATE], [PAYMENT_AMOUNT], [PAYMENT_DUE_DATE], [PAYMENT_NOTE], [IS_GST_ELIGIBLE], [GST_AMOUNT], [IS_PERIOD_EXERCISED], [IS_VARIABLE_PAYMENT], [IS_FLEXIBLE_DURATION], [ADDL_RENT_AGREED_PMT], [ADDL_RENT_GST_AMOUNT], [IS_ADDL_RENT_SUBJECT_TO_GST], [VBL_RENT_AGREED_PMT], [VBL_RENT_GST_AMOUNT], [IS_VBL_RENT_SUBJECT_TO_GST], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_PERIOD_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_PERIOD_ID], [LEASE_ID], [LEASE_PERIOD_STATUS_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [ADDL_RENT_FREQ], [VBL_RENT_FREQ], [PERIOD_START_DATE], [PERIOD_EXPIRY_DATE], [PERIOD_RENEWAL_DATE], [PAYMENT_AMOUNT], [PAYMENT_DUE_DATE], [PAYMENT_NOTE], [IS_GST_ELIGIBLE], [GST_AMOUNT], [IS_PERIOD_EXERCISED], [IS_VARIABLE_PAYMENT], [IS_FLEXIBLE_DURATION], [ADDL_RENT_AGREED_PMT], [ADDL_RENT_GST_AMOUNT], [IS_ADDL_RENT_SUBJECT_TO_GST], [VBL_RENT_AGREED_PMT], [VBL_RENT_GST_AMOUNT], [IS_VBL_RENT_SUBJECT_TO_GST], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_PERIOD_H_ID_SEQ]) as [_LEASE_PERIOD_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQCKI_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQCKI_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQCKI_I_S_U_TR] ON PIMS_ACQUISITION_CHECKLIST_ITEM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_CHECKLIST_ITEM_ID = deleted.ACQUISITION_CHECKLIST_ITEM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_CHECKLIST_ITEM
    set "ACQUISITION_CHECKLIST_ITEM_ID" = inserted."ACQUISITION_CHECKLIST_ITEM_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQ_CHKLST_ITEM_TYPE_CODE" = inserted."ACQ_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_CHECKLIST_ITEM
    inner join inserted
    on (PIMS_ACQUISITION_CHECKLIST_ITEM.ACQUISITION_CHECKLIST_ITEM_ID = inserted.ACQUISITION_CHECKLIST_ITEM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPRP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPPRP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPRP_I_S_I_TR] ON PIMS_DISPOSITION_FILE_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE_PROPERTY ("DISPOSITION_FILE_PROPERTY_ID",
      "DISPOSITION_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_NAME",
      "LOCATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_FILE_PROPERTY_ID",
      "DISPOSITION_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_NAME",
      "LOCATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CHKLIS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CHKLIS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CHKLIS_I_S_U_TR] ON PIMS_CHKLST_ITEM_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CHKLST_ITEM_STATUS_TYPE_CODE = deleted.CHKLST_ITEM_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CHKLST_ITEM_STATUS_TYPE
    set "CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CHKLST_ITEM_STATUS_TYPE
    inner join inserted
    on (PIMS_CHKLST_ITEM_STATUS_TYPE.CHKLST_ITEM_STATUS_TYPE_CODE = inserted.CHKLST_ITEM_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSRNWL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LSRNWL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSRNWL_I_S_I_TR] ON PIMS_LEASE_RENEWAL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_RENEWAL ("LEASE_RENEWAL_ID",
      "LEASE_ID",
      "COMMENCEMENT_DT",
      "EXPIRY_DT",
      "IS_EXERCISED",
      "RENEWAL_NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_RENEWAL_ID",
      "LEASE_ID",
      "COMMENCEMENT_DT",
      "EXPIRY_DT",
      "IS_EXERCISED",
      "RENEWAL_NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRSCRC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRSCRC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRSCRC_I_S_U_TR] ON PIMS_PROPERTY_RESEARCH_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_RESEARCH_FILE_ID = deleted.PROPERTY_RESEARCH_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_RESEARCH_FILE
    set "PROPERTY_RESEARCH_FILE_ID" = inserted."PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "PROPERTY_NAME" = inserted."PROPERTY_NAME",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_LEGAL_OPINION_REQUIRED" = inserted."IS_LEGAL_OPINION_REQUIRED",
      "IS_LEGAL_OPINION_OBTAINED" = inserted."IS_LEGAL_OPINION_OBTAINED",
      "DOCUMENT_REFERENCE" = inserted."DOCUMENT_REFERENCE",
      "RESEARCH_SUMMARY" = inserted."RESEARCH_SUMMARY",
      "LOCATION" = inserted."LOCATION",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_RESEARCH_FILE
    inner join inserted
    on (PIMS_PROPERTY_RESEARCH_FILE.PROPERTY_RESEARCH_FILE_ID = inserted.PROPERTY_RESEARCH_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCKI_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPCKI_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCKI_A_S_IUD_TR] ON PIMS_DISPOSITION_CHECKLIST_ITEM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_CHECKLIST_ITEM_HIST set END_DATE_HIST = @curr_date where DISPOSITION_CHECKLIST_ITEM_ID in (select DISPOSITION_CHECKLIST_ITEM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_CHECKLIST_ITEM_HIST ([DISPOSITION_CHECKLIST_ITEM_ID], [DISPOSITION_FILE_ID], [DSP_CHKLST_ITEM_TYPE_CODE], [CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_CHECKLIST_ITEM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_CHECKLIST_ITEM_ID], [DISPOSITION_FILE_ID], [DSP_CHKLST_ITEM_TYPE_CODE], [CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM_H_ID_SEQ]) as [_DISPOSITION_CHECKLIST_ITEM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LEASE_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_A_S_IUD_TR] ON PIMS_LEASE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_HIST set END_DATE_HIST = @curr_date where LEASE_ID in (select LEASE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_HIST ([LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [TERMINATION_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CANCELLATION_REASON], [TERMINATION_REASON], [IS_PUBLIC_BENEFIT], [IS_FINANCIAL_GAIN], [FEE_DETERMINATION_NOTE], [PRIMARY_ARBITRATION_CITY], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [TERMINATION_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CANCELLATION_REASON], [TERMINATION_REASON], [IS_PUBLIC_BENEFIT], [IS_FINANCIAL_GAIN], [FEE_DETERMINATION_NOTE], [PRIMARY_ARBITRATION_CITY], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_H_ID_SEQ]) as [_LEASE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSPRST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSPRST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSPRST_I_S_U_TR] ON PIMS_LEASE_PERIOD_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PERIOD_STATUS_TYPE_CODE = deleted.LEASE_PERIOD_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PERIOD_STATUS_TYPE
    set "LEASE_PERIOD_STATUS_TYPE_CODE" = inserted."LEASE_PERIOD_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PERIOD_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_PERIOD_STATUS_TYPE.LEASE_PERIOD_STATUS_TYPE_CODE = inserted.LEASE_PERIOD_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCKI_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPCKI_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCKI_I_S_I_TR] ON PIMS_DISPOSITION_CHECKLIST_ITEM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_CHECKLIST_ITEM ("DISPOSITION_CHECKLIST_ITEM_ID",
      "DISPOSITION_FILE_ID",
      "DSP_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_CHECKLIST_ITEM_ID",
      "DISPOSITION_FILE_ID",
      "DSP_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LEASE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_I_TR] ON PIMS_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE ("LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "PROJECT_ID",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "TFA_FILE_NUMBER",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "TERMINATION_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CANCELLATION_REASON",
      "TERMINATION_REASON",
      "IS_PUBLIC_BENEFIT",
      "IS_FINANCIAL_GAIN",
      "FEE_DETERMINATION_NOTE",
      "PRIMARY_ARBITRATION_CITY",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "PROJECT_ID",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "TFA_FILE_NUMBER",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "TERMINATION_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CANCELLATION_REASON",
      "TERMINATION_REASON",
      "IS_PUBLIC_BENEFIT",
      "IS_FINANCIAL_GAIN",
      "FEE_DETERMINATION_NOTE",
      "PRIMARY_ARBITRATION_CITY",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PROPLS_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PROPLS_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PROPLS_I_S_I_TR] ON PIMS_PROPERTY_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_LEASE ("PROPERTY_LEASE_ID",
      "PROPERTY_ID",
      "LEASE_ID",
      "AREA_UNIT_TYPE_CODE",
      "NAME",
      "LEASE_AREA",
      "LOCATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_LEASE_ID",
      "PROPERTY_ID",
      "LEASE_ID",
      "AREA_UNIT_TYPE_CODE",
      "NAME",
      "LEASE_AREA",
      "LOCATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPRP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPPRP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPRP_I_S_U_TR] ON PIMS_DISPOSITION_FILE_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_PROPERTY_ID = deleted.DISPOSITION_FILE_PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE_PROPERTY
    set "DISPOSITION_FILE_PROPERTY_ID" = inserted."DISPOSITION_FILE_PROPERTY_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_NAME" = inserted."PROPERTY_NAME",
      "LOCATION" = inserted."LOCATION",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_PROPERTY
    inner join inserted
    on (PIMS_DISPOSITION_FILE_PROPERTY.DISPOSITION_FILE_PROPERTY_ID = inserted.DISPOSITION_FILE_PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSPERD_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSPERD_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSPERD_I_S_U_TR] ON PIMS_LEASE_PERIOD INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PERIOD_ID = deleted.LEASE_PERIOD_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PERIOD
    set "LEASE_PERIOD_ID" = inserted."LEASE_PERIOD_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_PERIOD_STATUS_TYPE_CODE" = inserted."LEASE_PERIOD_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE" = inserted."LEASE_PMT_FREQ_TYPE_CODE",
      "ADDL_RENT_FREQ" = inserted."ADDL_RENT_FREQ",
      "VBL_RENT_FREQ" = inserted."VBL_RENT_FREQ",
      "PERIOD_START_DATE" = inserted."PERIOD_START_DATE",
      "PERIOD_EXPIRY_DATE" = inserted."PERIOD_EXPIRY_DATE",
      "PERIOD_RENEWAL_DATE" = inserted."PERIOD_RENEWAL_DATE",
      "PAYMENT_AMOUNT" = inserted."PAYMENT_AMOUNT",
      "PAYMENT_DUE_DATE" = inserted."PAYMENT_DUE_DATE",
      "PAYMENT_NOTE" = inserted."PAYMENT_NOTE",
      "IS_GST_ELIGIBLE" = inserted."IS_GST_ELIGIBLE",
      "GST_AMOUNT" = inserted."GST_AMOUNT",
      "IS_PERIOD_EXERCISED" = inserted."IS_PERIOD_EXERCISED",
      "IS_VARIABLE_PAYMENT" = inserted."IS_VARIABLE_PAYMENT",
      "IS_FLEXIBLE_DURATION" = inserted."IS_FLEXIBLE_DURATION",
      "ADDL_RENT_AGREED_PMT" = inserted."ADDL_RENT_AGREED_PMT",
      "ADDL_RENT_GST_AMOUNT" = inserted."ADDL_RENT_GST_AMOUNT",
      "IS_ADDL_RENT_SUBJECT_TO_GST" = inserted."IS_ADDL_RENT_SUBJECT_TO_GST",
      "VBL_RENT_AGREED_PMT" = inserted."VBL_RENT_AGREED_PMT",
      "VBL_RENT_GST_AMOUNT" = inserted."VBL_RENT_GST_AMOUNT",
      "IS_VBL_RENT_SUBJECT_TO_GST" = inserted."IS_VBL_RENT_SUBJECT_TO_GST",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PERIOD
    inner join inserted
    on (PIMS_LEASE_PERIOD.LEASE_PERIOD_ID = inserted.LEASE_PERIOD_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRSCRC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRSCRC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRSCRC_I_S_I_TR] ON PIMS_PROPERTY_RESEARCH_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_RESEARCH_FILE ("PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID",
      "RESEARCH_FILE_ID",
      "PROPERTY_NAME",
      "DISPLAY_ORDER",
      "IS_LEGAL_OPINION_REQUIRED",
      "IS_LEGAL_OPINION_OBTAINED",
      "DOCUMENT_REFERENCE",
      "RESEARCH_SUMMARY",
      "LOCATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID",
      "RESEARCH_FILE_ID",
      "PROPERTY_NAME",
      "DISPLAY_ORDER",
      "IS_LEGAL_OPINION_REQUIRED",
      "IS_LEGAL_OPINION_OBTAINED",
      "DOCUMENT_REFERENCE",
      "RESEARCH_SUMMARY",
      "LOCATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPACT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPACT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPACT_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY ("PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID",
      "REQUEST_ADDED_DT",
      "COMPLETION_DT",
      "DESCRIPTION",
      "REQUEST_SOURCE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID",
      "REQUEST_ADDED_DT",
      "COMPLETION_DT",
      "DESCRIPTION",
      "REQUEST_SOURCE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPACT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPACT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPACT_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PIMS_PROPERTY_ACTIVITY_ID = deleted.PIMS_PROPERTY_ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY
    set "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_TYPE_CODE",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID" = inserted."SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID" = inserted."SERVICE_PROVIDER_ORG_ID",
      "REQUEST_ADDED_DT" = inserted."REQUEST_ADDED_DT",
      "COMPLETION_DT" = inserted."COMPLETION_DT",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "REQUEST_SOURCE" = inserted."REQUEST_SOURCE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY.PIMS_PROPERTY_ACTIVITY_ID = inserted.PIMS_PROPERTY_ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PAINVP_ORGANIZATION_ID_IDX
PRINT N'Create index dbo.PAINVP_ORGANIZATION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PAINVP_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]([ORGANIZATION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PAINVP_PERSON_ID_IDX
PRINT N'Create index dbo.PAINVP_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PAINVP_PERSON_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PAINVP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PAINVP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PAINVP_A_S_IUD_TR] ON PIMS_PROP_ACT_INVOLVED_PARTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_ACT_INVOLVED_PARTY_HIST set END_DATE_HIST = @curr_date where PROP_ACT_INVOLVED_PARTY_ID in (select PROP_ACT_INVOLVED_PARTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_ACT_INVOLVED_PARTY_HIST ([PROP_ACT_INVOLVED_PARTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_ACT_INVOLVED_PARTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_ACT_INVOLVED_PARTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY_H_ID_SEQ]) as [_PROP_ACT_INVOLVED_PARTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PAINVP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PAINVP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PAINVP_I_S_I_TR] ON PIMS_PROP_ACT_INVOLVED_PARTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_ACT_INVOLVED_PARTY ("PROP_ACT_INVOLVED_PARTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_ACT_INVOLVED_PARTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PAINVP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PAINVP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PAINVP_I_S_U_TR] ON PIMS_PROP_ACT_INVOLVED_PARTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_ACT_INVOLVED_PARTY_ID = deleted.PROP_ACT_INVOLVED_PARTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_ACT_INVOLVED_PARTY
    set "PROP_ACT_INVOLVED_PARTY_ID" = inserted."PROP_ACT_INVOLVED_PARTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_ACT_INVOLVED_PARTY
    inner join inserted
    on (PIMS_PROP_ACT_INVOLVED_PARTY.PROP_ACT_INVOLVED_PARTY_ID = inserted.PROP_ACT_INVOLVED_PARTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACMC_PERSON_ID_IDX
PRINT N'Create index dbo.PRACMC_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACMC_PERSON_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_MIN_CONTACT]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_MIN_CONTACT]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACMC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRACMC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACMC_A_S_IUD_TR] ON PIMS_PROP_ACT_MIN_CONTACT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_ACT_MIN_CONTACT_HIST set END_DATE_HIST = @curr_date where PROP_ACT_MIN_CONTACT_ID in (select PROP_ACT_MIN_CONTACT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_ACT_MIN_CONTACT_HIST ([PROP_ACT_MIN_CONTACT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_ACT_MIN_CONTACT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_ACT_MIN_CONTACT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_ACT_MIN_CONTACT_H_ID_SEQ]) as [_PROP_ACT_MIN_CONTACT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACMC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACMC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACMC_I_S_I_TR] ON PIMS_PROP_ACT_MIN_CONTACT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_ACT_MIN_CONTACT ("PROP_ACT_MIN_CONTACT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_ACT_MIN_CONTACT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACMC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACMC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACMC_I_S_U_TR] ON PIMS_PROP_ACT_MIN_CONTACT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_ACT_MIN_CONTACT_ID = deleted.PROP_ACT_MIN_CONTACT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_ACT_MIN_CONTACT
    set "PROP_ACT_MIN_CONTACT_ID" = inserted."PROP_ACT_MIN_CONTACT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_ACT_MIN_CONTACT
    inner join inserted
    on (PIMS_PROP_ACT_MIN_CONTACT.PROP_ACT_MIN_CONTACT_ID = inserted.PROP_ACT_MIN_CONTACT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRAC_PROPERTY_ID_IDX
PRINT N'Create index dbo.PRPRAC_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRAC_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ACTIVITY]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPRAC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAC_A_S_IUD_TR] ON PIMS_PROP_PROP_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_PROP_ACTIVITY_HIST set END_DATE_HIST = @curr_date where PROP_PROP_ACTIVITY_ID in (select PROP_PROP_ACTIVITY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_PROP_ACTIVITY_HIST ([PROP_PROP_ACTIVITY_ID], [PROPERTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_PROP_ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_PROP_ACTIVITY_ID], [PROPERTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_PROP_ACTIVITY_H_ID_SEQ]) as [_PROP_PROP_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPRAC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAC_I_S_I_TR] ON PIMS_PROP_PROP_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_ACTIVITY ("PROP_PROP_ACTIVITY_ID",
      "PROPERTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_PROP_ACTIVITY_ID",
      "PROPERTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRAC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAC_I_S_U_TR] ON PIMS_PROP_PROP_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_ACTIVITY_ID = deleted.PROP_PROP_ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_ACTIVITY
    set "PROP_PROP_ACTIVITY_ID" = inserted."PROP_PROP_ACTIVITY_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ACTIVITY
    inner join inserted
    on (PIMS_PROP_PROP_ACTIVITY.PROP_PROP_ACTIVITY_ID = inserted.PROP_PROP_ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACDO_DOCUMENT_ID_IDX
PRINT N'Create index dbo.PRACDO_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACDO_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACDO_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRACDO_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACDO_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACTIVITY_DOCUMENT_ID in (select PROPERTY_ACTIVITY_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST ([PROPERTY_ACTIVITY_DOCUMENT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACTIVITY_DOCUMENT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACDO_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACDO_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACDO_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY_DOCUMENT ("PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACDO_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACDO_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACDO_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACTIVITY_DOCUMENT_ID = deleted.PROPERTY_ACTIVITY_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY_DOCUMENT
    set "PROPERTY_ACTIVITY_DOCUMENT_ID" = inserted."PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY_DOCUMENT
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY_DOCUMENT.PROPERTY_ACTIVITY_DOCUMENT_ID = inserted.PROPERTY_ACTIVITY_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LTRMST_PIM_LSTERM_FK
PRINT N'Create foreign key constraint dbo.PIM_LTRMST_PIM_LSTERM_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	ADD CONSTRAINT [PIM_LTRMST_PIM_LSTERM_FK]
	FOREIGN KEY([LEASE_PERIOD_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE]([LEASE_PERIOD_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LSTERM_PIM_LSPYMT_FK
PRINT N'Create foreign key constraint dbo.PIM_LSTERM_PIM_LSPYMT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT]
	ADD CONSTRAINT [PIM_LSTERM_PIM_LSPYMT_FK]
	FOREIGN KEY([LEASE_PERIOD_ID])
	REFERENCES [dbo].[PIMS_LEASE_PERIOD]([LEASE_PERIOD_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_LSRNWL_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_LSRNWL_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_RENEWAL]
	ADD CONSTRAINT [PIM_LEASE_PIM_LSRNWL_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_ORG_PIM_PRPACT_FK]
	FOREIGN KEY([SERVICE_PROVIDER_ORG_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRACST_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRACST_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_PRACST_PIM_PRPACT_FK]
	FOREIGN KEY([PROP_MGMT_ACTIVITY_SUBTYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_MGMT_ACTIVITY_SUBTYPE]([PROP_MGMT_ACTIVITY_SUBTYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PACSTY_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PACSTY_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_PACSTY_PIM_PRPACT_FK]
	FOREIGN KEY([PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE]([PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRPACT_FK]
	FOREIGN KEY([SERVICE_PROVIDER_PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRACTY_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRACTY_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_PRACTY_PIM_PRPACT_FK]
	FOREIGN KEY([PROP_MGMT_ACTIVITY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_MGMT_ACTIVITY_TYPE]([PROP_MGMT_ACTIVITY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_PAINVP_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_PAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	ADD CONSTRAINT [PIM_ORG_PIM_PAINVP_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PAINVP_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PAINVP_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_PAINVP_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_PAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	ADD CONSTRAINT [PIM_PERSON_PIM_PAINVP_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACMC_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACMC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRACMC_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_PRACMC_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_PRACMC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRACMC_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PRPRAC_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PRPRAC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRPRAC_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRAC_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRAC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRAC_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_PRACDO_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_PRACDO_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_PRACDO_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACDO_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACDO_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRACDO_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACIN_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRACIN_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACIN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRACIN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACIN_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY_INVOICE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_INVOICE_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACTIVITY_INVOICE_ID in (select PROPERTY_ACTIVITY_INVOICE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_INVOICE_HIST ([PROPERTY_ACTIVITY_INVOICE_ID], [PIMS_PROPERTY_ACTIVITY_ID], [INVOICE_DT], [INVOICE_NUM], [DESCRIPTION], [PRETAX_AMT], [GST_AMT], [PST_AMT], [TOTAL_AMT], [IS_PST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_INVOICE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACTIVITY_INVOICE_ID], [PIMS_PROPERTY_ACTIVITY_ID], [INVOICE_DT], [INVOICE_NUM], [DESCRIPTION], [PRETAX_AMT], [GST_AMT], [PST_AMT], [TOTAL_AMT], [IS_PST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_INVOICE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACIN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACIN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACIN_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY_INVOICE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY_INVOICE ("PROPERTY_ACTIVITY_INVOICE_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "INVOICE_DT",
      "INVOICE_NUM",
      "DESCRIPTION",
      "PRETAX_AMT",
      "GST_AMT",
      "PST_AMT",
      "TOTAL_AMT",
      "IS_PST_REQUIRED",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACTIVITY_INVOICE_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "INVOICE_DT",
      "INVOICE_NUM",
      "DESCRIPTION",
      "PRETAX_AMT",
      "GST_AMT",
      "PST_AMT",
      "TOTAL_AMT",
      "IS_PST_REQUIRED",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACIN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACIN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACIN_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY_INVOICE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACTIVITY_INVOICE_ID = deleted.PROPERTY_ACTIVITY_INVOICE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY_INVOICE
    set "PROPERTY_ACTIVITY_INVOICE_ID" = inserted."PROPERTY_ACTIVITY_INVOICE_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "INVOICE_DT" = inserted."INVOICE_DT",
      "INVOICE_NUM" = inserted."INVOICE_NUM",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "GST_AMT" = inserted."GST_AMT",
      "PST_AMT" = inserted."PST_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "IS_PST_REQUIRED" = inserted."IS_PST_REQUIRED",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY_INVOICE
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY_INVOICE.PROPERTY_ACTIVITY_INVOICE_ID = inserted.PROPERTY_ACTIVITY_INVOICE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE
PRINT N'Drop table dbo.PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE
PRINT N'Drop table dbo.PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_DSP_CHKLST_ITEM_STATUS_TYPE
PRINT N'Drop table dbo.PIMS_DSP_CHKLST_ITEM_STATUS_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_DSP_CHKLST_ITEM_STATUS_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
