-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Tue Nov 29 15:11:30 PST 2022
-- Execute this script on:
-- 		PSP_PIMS_S40_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S41_00_B/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Clear any NULL columns that may cause migration issues
PRINT 'Clear any NULL columns IN PIMS_ACTIVITY_INSTANCE that may cause issues'
GO
UPDATE [dbo].[PIMS_ACTIVITY_INSTANCE]
SET    ACTIVITY_TEMPLATE_ID = 1
     , CONCURRENCY_CONTROL_NUMBER = CONCURRENCY_CONTROL_NUMBER + 1
WHERE  ACTIVITY_TEMPLATE_ID IS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Clear any NULL columns that may cause migration issues
PRINT 'Clear any NULL columns IN PIMS_ACTIVITY_INSTANCE_HIST that may cause issues'
GO
UPDATE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST]
SET    ACTIVITY_TEMPLATE_ID = 1
     , CONCURRENCY_CONTROL_NUMBER = CONCURRENCY_CONTROL_NUMBER + 1
WHERE  ACTIVITY_TEMPLATE_ID IS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTINS_ACTIVITY_TEMPLATE_ID_IDX
PRINT N'Drop index dbo.ACTINS_ACTIVITY_TEMPLATE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_INSTANCE].[ACTINS_ACTIVITY_TEMPLATE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_IDX
PRINT N'Drop index dbo.ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY_TEMPLATE].[ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_COST_TYPE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_COST_TYPE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_COST_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_COST_TYPE_CODE
PRINT N'Create table dbo.PIMS_COST_TYPE_CODE'
GO
CREATE TABLE [dbo].[PIMS_COST_TYPE_CODE]  ( 
	[ID]                            	bigint NOT NULL CONSTRAINT [COSTYP_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_COST_TYPE_ID_SEQ]),
	[CODE]                          	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL CONSTRAINT [COSTYP_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [COSTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [COSTYP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [COSTYP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [COSTYP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [COSTYP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [COSTYP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [COSTYP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [COSTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [COSTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [COSTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [COSTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [COSTYP_PK] PRIMARY KEY CLUSTERED([ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'System-generated primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COST_TYPE_CODE', 
	@level2type = N'Column', @level2name = N'ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COST_TYPE_CODE', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive value  of a code within the set.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COST_TYPE_CODE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COST_TYPE_CODE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code became effective.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COST_TYPE_CODE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code ceased to be in effect.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COST_TYPE_CODE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code and description of the cost type codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COST_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DATA_SOURCE_TYPE
PRINT N'Alter table dbo.PIMS_DATA_SOURCE_TYPE'
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the source system of the data (PAIMS, LIS, etc.)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DATA_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'DATA_SOURCE_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_CHART_OF_ACCOUNTS_ID_SEQ
PRINT N'Create sequence dbo.PIMS_CHART_OF_ACCOUNTS_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_CHART_OF_ACCOUNTS_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_CHART_OF_ACCOUNTS_CODE
PRINT N'Create table dbo.PIMS_CHART_OF_ACCOUNTS_CODE'
GO
CREATE TABLE [dbo].[PIMS_CHART_OF_ACCOUNTS_CODE]  ( 
	[ID]                            	bigint NOT NULL CONSTRAINT [CHRTAC_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_CHART_OF_ACCOUNTS_ID_SEQ]),
	[CODE]                          	int NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL CONSTRAINT [CHRTAC_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [CHRTAC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [CHRTAC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [CHRTAC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [CHRTAC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [CHRTAC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [CHRTAC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [CHRTAC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [CHRTAC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [CHRTAC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [CHRTAC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [CHRTAC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CHRTAC_PK] PRIMARY KEY CLUSTERED([ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'System-generated primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHART_OF_ACCOUNTS_CODE', 
	@level2type = N'Column', @level2name = N'ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHART_OF_ACCOUNTS_CODE', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive value  of a code within the set.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHART_OF_ACCOUNTS_CODE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHART_OF_ACCOUNTS_CODE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code became effective.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHART_OF_ACCOUNTS_CODE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code ceased to be in effect.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHART_OF_ACCOUNTS_CODE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code and description of the chart of accounts codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHART_OF_ACCOUNTS_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_YEARLY_FINANCIAL_CODE
PRINT N'Create table dbo.PIMS_YEARLY_FINANCIAL_CODE'
GO
CREATE TABLE [dbo].[PIMS_YEARLY_FINANCIAL_CODE]  ( 
	[ID]                            	bigint NOT NULL CONSTRAINT [YRFINC_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_YEARLY_FINANCIAL_CODE_ID_SEQ]),
	[CODE]                          	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL CONSTRAINT [YRFINC_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [YRFINC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [YRFINC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [YRFINC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [YRFINC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [YRFINC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [YRFINC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [YRFINC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [YRFINC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [YRFINC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [YRFINC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [YRFINC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [YRFINC_PK] PRIMARY KEY CLUSTERED([ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'System-generated primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_YEARLY_FINANCIAL_CODE', 
	@level2type = N'Column', @level2name = N'ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Standard Object of Expenditure (STOB) code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_YEARLY_FINANCIAL_CODE', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive value  of the STOB code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_YEARLY_FINANCIAL_CODE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_YEARLY_FINANCIAL_CODE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code became effective.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_YEARLY_FINANCIAL_CODE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code ceased to be in effect.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_YEARLY_FINANCIAL_CODE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code and description of the chart of accounts codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_YEARLY_FINANCIAL_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_BUSINESS_FUNCTION_ID_SEQ
PRINT N'Create sequence dbo.PIMS_BUSINESS_FUNCTION_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_BUSINESS_FUNCTION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_BUSINESS_FUNCTION_CODE
PRINT N'Create table dbo.PIMS_BUSINESS_FUNCTION_CODE'
GO
CREATE TABLE [dbo].[PIMS_BUSINESS_FUNCTION_CODE]  ( 
	[ID]                            	bigint NOT NULL CONSTRAINT [BIZFCN_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_BUSINESS_FUNCTION_ID_SEQ]),
	[CODE]                          	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL CONSTRAINT [BIZFCN_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [BIZFCN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BIZFCN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BIZFCN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [BIZFCN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BIZFCN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BIZFCN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [BIZFCN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [BIZFCN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [BIZFCN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [BIZFCN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [BIZFCN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [BIZFCN_PK] PRIMARY KEY CLUSTERED([ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'System-generated primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_BUSINESS_FUNCTION_CODE', 
	@level2type = N'Column', @level2name = N'ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_BUSINESS_FUNCTION_CODE', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive value  of a code within the set.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_BUSINESS_FUNCTION_CODE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_BUSINESS_FUNCTION_CODE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code became effective.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_BUSINESS_FUNCTION_CODE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code ceased to be in effect.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_BUSINESS_FUNCTION_CODE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code and description of the business function codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_BUSINESS_FUNCTION_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_WORK_ACTIVITY_ID_SEQ
PRINT N'Create sequence dbo.PIMS_WORK_ACTIVITY_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_WORK_ACTIVITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_WORK_ACTIVITY_CODE
PRINT N'Create table dbo.PIMS_WORK_ACTIVITY_CODE'
GO
CREATE TABLE [dbo].[PIMS_WORK_ACTIVITY_CODE]  ( 
	[ID]                            	bigint NOT NULL CONSTRAINT [WRKACT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_WORK_ACTIVITY_ID_SEQ]),
	[CODE]                          	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL CONSTRAINT [WRKACT_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [WRKACT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [WRKACT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [WRKACT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [WRKACT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [WRKACT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [WRKACT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [WRKACT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [WRKACT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [WRKACT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [WRKACT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [WRKACT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [WRKACT_PK] PRIMARY KEY CLUSTERED([ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'System-generated primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_WORK_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_WORK_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive value  of a code within the set.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_WORK_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_WORK_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code became effective.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_WORK_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code ceased to be in effect.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_WORK_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code and description of the work activity codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_WORK_ACTIVITY_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_FINANCIAL_ACTIVITY_ID_SEQ
PRINT N'Create sequence dbo.PIMS_FINANCIAL_ACTIVITY_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_FINANCIAL_ACTIVITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_FINANCIAL_ACTIVITY_CODE
PRINT N'Create table dbo.PIMS_FINANCIAL_ACTIVITY_CODE'
GO
CREATE TABLE [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE]  ( 
	[ID]                            	bigint NOT NULL CONSTRAINT [FINACT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_FINANCIAL_ACTIVITY_ID_SEQ]),
	[CODE]                          	smallint NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL CONSTRAINT [FINACT_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [FINACT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [FINACT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [FINACT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [FINACT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [FINACT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [FINACT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [FINACT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [FINACT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [FINACT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [FINACT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [FINACT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [FINACT_PK] PRIMARY KEY CLUSTERED([ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'System-generated primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FINANCIAL_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Value of the code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FINANCIAL_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive value  of a code within the set.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FINANCIAL_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FINANCIAL_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code became effective.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FINANCIAL_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code ceased to be in effect.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FINANCIAL_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code and description of the financial activity codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FINANCIAL_ACTIVITY_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_RESPONSIBILITY_CODE_SEQ
PRINT N'Create sequence dbo.PIMS_RESPONSIBILITY_CODE_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_RESPONSIBILITY_CODE_SEQ]
	AS bigint
	START WITH 991
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_RESPONSIBILITY_ID_SEQ
PRINT N'Create sequence dbo.PIMS_RESPONSIBILITY_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_RESPONSIBILITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_RESPONSIBILITY_CODE
PRINT N'Create table dbo.PIMS_RESPONSIBILITY_CODE'
GO
CREATE TABLE [dbo].[PIMS_RESPONSIBILITY_CODE]  ( 
	[ID]                            	bigint NOT NULL CONSTRAINT [RESPCD_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_RESPONSIBILITY_ID_SEQ]),
	[CODE]                          	int NOT NULL CONSTRAINT [RESPCD_CODE_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_RESPONSIBILITY_CODE_SEQ]),
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL CONSTRAINT [RESPCD_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [RESPCD_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RESPCD_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RESPCD_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RESPCD_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RESPCD_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RESPCD_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RESPCD_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RESPCD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [RESPCD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RESPCD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RESPCD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RESPCD_PK] PRIMARY KEY CLUSTERED([ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'System-generated primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESPONSIBILITY_CODE', 
	@level2type = N'Column', @level2name = N'ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESPONSIBILITY_CODE', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive value  of a code within the set.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESPONSIBILITY_CODE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESPONSIBILITY_CODE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code became effective.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESPONSIBILITY_CODE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code ceased to be in effect.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESPONSIBILITY_CODE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code and description of the responsibility codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESPONSIBILITY_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_YEARLY_FINANCIAL_CODE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_YEARLY_FINANCIAL_CODE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_YEARLY_FINANCIAL_CODE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_YEARLY_FINANCIAL_CODE_HIST
PRINT N'Create table dbo.PIMS_YEARLY_FINANCIAL_CODE_HIST'
GO
CREATE TABLE [dbo].[PIMS_YEARLY_FINANCIAL_CODE_HIST]  ( 
	[_YEARLY_FINANCIAL_CODE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_YEARLY_FINANCIAL_CODE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ID]                            	bigint NOT NULL,
	[CODE]                          	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL,
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_YRFINC_H_PK] PRIMARY KEY CLUSTERED([_YEARLY_FINANCIAL_CODE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_YRFINC_H_UK
PRINT N'Create unique constraint dbo.PIMS_YRFINC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_YEARLY_FINANCIAL_CODE_HIST]
	ADD CONSTRAINT [PIMS_YRFINC_H_UK]
	UNIQUE ([_YEARLY_FINANCIAL_CODE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_BUSINESS_FUNCTION_CODE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_BUSINESS_FUNCTION_CODE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_BUSINESS_FUNCTION_CODE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_BUSINESS_FUNCTION_CODE_HIST
PRINT N'Create table dbo.PIMS_BUSINESS_FUNCTION_CODE_HIST'
GO
CREATE TABLE [dbo].[PIMS_BUSINESS_FUNCTION_CODE_HIST]  ( 
	[_BUSINESS_FUNCTION_CODE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_BUSINESS_FUNCTION_CODE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[ID]                             	bigint NOT NULL,
	[CODE]                           	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                  	int NULL,
	[EFFECTIVE_DATE]                 	datetime NOT NULL,
	[EXPIRY_DATE]                    	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_BIZFCN_H_PK] PRIMARY KEY CLUSTERED([_BUSINESS_FUNCTION_CODE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_BIZFCN_H_UK
PRINT N'Create unique constraint dbo.PIMS_BIZFCN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_BUSINESS_FUNCTION_CODE_HIST]
	ADD CONSTRAINT [PIMS_BIZFCN_H_UK]
	UNIQUE ([_BUSINESS_FUNCTION_CODE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_RESPONSIBILITY_CODE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_RESPONSIBILITY_CODE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_RESPONSIBILITY_CODE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_RESPONSIBILITY_CODE_HIST
PRINT N'Create table dbo.PIMS_RESPONSIBILITY_CODE_HIST'
GO
CREATE TABLE [dbo].[PIMS_RESPONSIBILITY_CODE_HIST]  ( 
	[_RESPONSIBILITY_CODE_HIST_ID]  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_RESPONSIBILITY_CODE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ID]                            	bigint NOT NULL,
	[CODE]                          	int NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL,
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RESPCD_H_PK] PRIMARY KEY CLUSTERED([_RESPONSIBILITY_CODE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_RESPCD_H_UK
PRINT N'Create unique constraint dbo.PIMS_RESPCD_H_UK'
GO
ALTER TABLE [dbo].[PIMS_RESPONSIBILITY_CODE_HIST]
	ADD CONSTRAINT [PIMS_RESPCD_H_UK]
	UNIQUE ([_RESPONSIBILITY_CODE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_COST_TYPE_CODE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_COST_TYPE_CODE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_COST_TYPE_CODE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_COST_TYPE_CODE_HIST
PRINT N'Create table dbo.PIMS_COST_TYPE_CODE_HIST'
GO
CREATE TABLE [dbo].[PIMS_COST_TYPE_CODE_HIST]  ( 
	[_COST_TYPE_CODE_HIST_ID]       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_COST_TYPE_CODE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ID]                            	bigint NOT NULL,
	[CODE]                          	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL,
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_COSTYP_H_PK] PRIMARY KEY CLUSTERED([_COST_TYPE_CODE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_COSTYP_H_UK
PRINT N'Create unique constraint dbo.PIMS_COSTYP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_COST_TYPE_CODE_HIST]
	ADD CONSTRAINT [PIMS_COSTYP_H_UK]
	UNIQUE ([_COST_TYPE_CODE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_FINANCIAL_ACTIVITY_CODE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_FINANCIAL_ACTIVITY_CODE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_FINANCIAL_ACTIVITY_CODE_HIST
PRINT N'Create table dbo.PIMS_FINANCIAL_ACTIVITY_CODE_HIST'
GO
CREATE TABLE [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE_HIST]  ( 
	[_FINANCIAL_ACTIVITY_CODE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_FINANCIAL_ACTIVITY_CODE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]             	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                   	datetime NULL,
	[ID]                              	bigint NOT NULL,
	[CODE]                            	smallint NOT NULL,
	[DESCRIPTION]                     	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                   	int NULL,
	[EFFECTIVE_DATE]                  	datetime NOT NULL,
	[EXPIRY_DATE]                     	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_FINACT_H_PK] PRIMARY KEY CLUSTERED([_FINANCIAL_ACTIVITY_CODE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_FINACT_H_UK
PRINT N'Create unique constraint dbo.PIMS_FINACT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE_HIST]
	ADD CONSTRAINT [PIMS_FINACT_H_UK]
	UNIQUE ([_FINANCIAL_ACTIVITY_CODE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_WORK_ACTIVITY_CODE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_WORK_ACTIVITY_CODE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_WORK_ACTIVITY_CODE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_WORK_ACTIVITY_CODE_HIST
PRINT N'Create table dbo.PIMS_WORK_ACTIVITY_CODE_HIST'
GO
CREATE TABLE [dbo].[PIMS_WORK_ACTIVITY_CODE_HIST]  ( 
	[_WORK_ACTIVITY_CODE_HIST_ID]   	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_WORK_ACTIVITY_CODE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ID]                            	bigint NOT NULL,
	[CODE]                          	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL,
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_WRKACT_H_PK] PRIMARY KEY CLUSTERED([_WORK_ACTIVITY_CODE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_WRKACT_H_UK
PRINT N'Create unique constraint dbo.PIMS_WRKACT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_WORK_ACTIVITY_CODE_HIST]
	ADD CONSTRAINT [PIMS_WRKACT_H_UK]
	UNIQUE ([_WORK_ACTIVITY_CODE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_CHART_OF_ACCOUNTS_CODE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_CHART_OF_ACCOUNTS_CODE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_CHART_OF_ACCOUNTS_CODE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_CHART_OF_ACCOUNTS_CODE_HIST
PRINT N'Create table dbo.PIMS_CHART_OF_ACCOUNTS_CODE_HIST'
GO
CREATE TABLE [dbo].[PIMS_CHART_OF_ACCOUNTS_CODE_HIST]  ( 
	[_CHART_OF_ACCOUNTS_CODE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_CHART_OF_ACCOUNTS_CODE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[ID]                             	bigint NOT NULL,
	[CODE]                           	int NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                  	int NULL,
	[EFFECTIVE_DATE]                 	datetime NOT NULL,
	[EXPIRY_DATE]                    	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_CHRTAC_H_PK] PRIMARY KEY CLUSTERED([_CHART_OF_ACCOUNTS_CODE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_CHRTAC_H_UK
PRINT N'Create unique constraint dbo.PIMS_CHRTAC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_CHART_OF_ACCOUNTS_CODE_HIST]
	ADD CONSTRAINT [PIMS_CHRTAC_H_UK]
	UNIQUE ([_CHART_OF_ACCOUNTS_CODE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Dynamic drop of dynamically-named default constraints
PRINT N'Dynamic drop of dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_ACTIVITY_TEMPLATE_HIST' 
                   AND col.NAME = 'ACTIVITY_TEMPLATE_TYPE_CODE')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACTIVITY_TEMPLATE_HIST
PRINT N'Alter table dbo.PIMS_ACTIVITY_TEMPLATE_HIST'
GO
UPDATE [dbo].[PIMS_ACTIVITY_TEMPLATE_HIST] SET [ACTIVITY_TEMPLATE_TYPE_CODE] = 'GENERAL' WHERE [ACTIVITY_TEMPLATE_TYPE_CODE] IS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_HIST] ALTER COLUMN [ACTIVITY_TEMPLATE_TYPE_CODE] nvarchar(20) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_HIST] ADD DEFAULT 'GENERAL' FOR [ACTIVITY_TEMPLATE_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Dynamic drop of dynamically-named default constraints
PRINT N'Dynamic drop of dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_ACTIVITY_INSTANCE_HIST' 
                   AND col.NAME = 'ACTIVITY_TEMPLATE_ID')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACTIVITY_INSTANCE_HIST
PRINT N'Alter table dbo.PIMS_ACTIVITY_INSTANCE_HIST'
GO
UPDATE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST] SET [ACTIVITY_TEMPLATE_ID] = 1 WHERE [ACTIVITY_TEMPLATE_ID] IS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST] ALTER COLUMN [ACTIVITY_TEMPLATE_ID] bigint NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST] ADD DEFAULT 1 FOR [ACTIVITY_TEMPLATE_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACTIVITY_TEMPLATE
PRINT N'Alter table dbo.PIMS_ACTIVITY_TEMPLATE'
GO
UPDATE [dbo].[PIMS_ACTIVITY_TEMPLATE] SET [ACTIVITY_TEMPLATE_TYPE_CODE] = ('GENERAL') WHERE [ACTIVITY_TEMPLATE_TYPE_CODE] IS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE] ALTER COLUMN [ACTIVITY_TEMPLATE_TYPE_CODE] nvarchar(20) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE] ADD CONSTRAINT [ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_DEF] DEFAULT ('GENERAL') FOR [ACTIVITY_TEMPLATE_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACTIVITY_INSTANCE
PRINT N'Alter table dbo.PIMS_ACTIVITY_INSTANCE'
GO
UPDATE [dbo].[PIMS_ACTIVITY_INSTANCE] SET [ACTIVITY_TEMPLATE_ID] = ((-1)) WHERE [ACTIVITY_TEMPLATE_ID] IS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE] ALTER COLUMN [ACTIVITY_TEMPLATE_ID] bigint NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE] ADD CONSTRAINT [ACTINS_ACTIVITY_TEMPLATE_ID_DEF] DEFAULT ((-1)) FOR [ACTIVITY_TEMPLATE_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.COSTYP_CODE_IDX
PRINT N'Create index dbo.COSTYP_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [COSTYP_CODE_IDX]
	ON [dbo].[PIMS_COST_TYPE_CODE]([CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTY_PID_IDX
PRINT N'Create index dbo.PRPRTY_PID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRTY_PID_IDX]
	ON [dbo].[PIMS_PROPERTY]([PID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.CHRTAC_CODE_IDX
PRINT N'Create index dbo.CHRTAC_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [CHRTAC_CODE_IDX]
	ON [dbo].[PIMS_CHART_OF_ACCOUNTS_CODE]([CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.YRFINC_CODE_IDX
PRINT N'Create index dbo.YRFINC_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [YRFINC_CODE_IDX]
	ON [dbo].[PIMS_YEARLY_FINANCIAL_CODE]([CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique index dbo.BIZFCN_CODE_IDX
PRINT N'Create unique index dbo.BIZFCN_CODE_IDX'
GO
CREATE UNIQUE NONCLUSTERED INDEX [BIZFCN_CODE_IDX]
	ON [dbo].[PIMS_BUSINESS_FUNCTION_CODE]([CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.WRKACT_CODE_IDX
PRINT N'Create index dbo.WRKACT_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [WRKACT_CODE_IDX]
	ON [dbo].[PIMS_WORK_ACTIVITY_CODE]([CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.FINACT_CODE_IDX
PRINT N'Create index dbo.FINACT_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [FINACT_CODE_IDX]
	ON [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE]([CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RESPCD_CODE_IDX
PRINT N'Create index dbo.RESPCD_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [RESPCD_CODE_IDX]
	ON [dbo].[PIMS_RESPONSIBILITY_CODE]([CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_FINACT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_FINACT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_FINACT_I_S_U_TR] ON PIMS_FINANCIAL_ACTIVITY_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_FINANCIAL_ACTIVITY_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_FINANCIAL_ACTIVITY_CODE
    inner join inserted
    on (PIMS_FINANCIAL_ACTIVITY_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_YRFINC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_YRFINC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_YRFINC_A_S_IUD_TR] ON PIMS_YEARLY_FINANCIAL_CODE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_YEARLY_FINANCIAL_CODE_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_YEARLY_FINANCIAL_CODE_HIST ([ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _YEARLY_FINANCIAL_CODE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_YEARLY_FINANCIAL_CODE_H_ID_SEQ]) as [_YEARLY_FINANCIAL_CODE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_BIZFCN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_BIZFCN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_BIZFCN_A_S_IUD_TR] ON PIMS_BUSINESS_FUNCTION_CODE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_BUSINESS_FUNCTION_CODE_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_BUSINESS_FUNCTION_CODE_HIST ([ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _BUSINESS_FUNCTION_CODE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_BUSINESS_FUNCTION_CODE_H_ID_SEQ]) as [_BUSINESS_FUNCTION_CODE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RESPCD_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RESPCD_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RESPCD_I_S_U_TR] ON PIMS_RESPONSIBILITY_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESPONSIBILITY_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESPONSIBILITY_CODE
    inner join inserted
    on (PIMS_RESPONSIBILITY_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_BIZFCN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_BIZFCN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_BIZFCN_I_S_I_TR] ON PIMS_BUSINESS_FUNCTION_CODE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_BUSINESS_FUNCTION_CODE ("ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_COSTYP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_COSTYP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_COSTYP_I_S_I_TR] ON PIMS_COST_TYPE_CODE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_COST_TYPE_CODE ("ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RESPCD_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_RESPCD_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RESPCD_A_S_IUD_TR] ON PIMS_RESPONSIBILITY_CODE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESPONSIBILITY_CODE_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESPONSIBILITY_CODE_HIST ([ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESPONSIBILITY_CODE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESPONSIBILITY_CODE_H_ID_SEQ]) as [_RESPONSIBILITY_CODE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_YRFINC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_YRFINC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_YRFINC_I_S_I_TR] ON PIMS_YEARLY_FINANCIAL_CODE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_YEARLY_FINANCIAL_CODE ("ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_WRKACT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_WRKACT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_WRKACT_I_S_I_TR] ON PIMS_WORK_ACTIVITY_CODE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_WORK_ACTIVITY_CODE ("ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CHRTAC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CHRTAC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CHRTAC_I_S_U_TR] ON PIMS_CHART_OF_ACCOUNTS_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CHART_OF_ACCOUNTS_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CHART_OF_ACCOUNTS_CODE
    inner join inserted
    on (PIMS_CHART_OF_ACCOUNTS_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_WRKACT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_WRKACT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_WRKACT_I_S_U_TR] ON PIMS_WORK_ACTIVITY_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_WORK_ACTIVITY_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_WORK_ACTIVITY_CODE
    inner join inserted
    on (PIMS_WORK_ACTIVITY_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_COSTYP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_COSTYP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_COSTYP_A_S_IUD_TR] ON PIMS_COST_TYPE_CODE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_COST_TYPE_CODE_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_COST_TYPE_CODE_HIST ([ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _COST_TYPE_CODE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_COST_TYPE_CODE_H_ID_SEQ]) as [_COST_TYPE_CODE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_FINACT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_FINACT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_FINACT_I_S_I_TR] ON PIMS_FINANCIAL_ACTIVITY_CODE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_FINANCIAL_ACTIVITY_CODE ("ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_BIZFCN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_BIZFCN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_BIZFCN_I_S_U_TR] ON PIMS_BUSINESS_FUNCTION_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_BUSINESS_FUNCTION_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_BUSINESS_FUNCTION_CODE
    inner join inserted
    on (PIMS_BUSINESS_FUNCTION_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_FINACT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_FINACT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_FINACT_A_S_IUD_TR] ON PIMS_FINANCIAL_ACTIVITY_CODE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_FINANCIAL_ACTIVITY_CODE_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_FINANCIAL_ACTIVITY_CODE_HIST ([ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _FINANCIAL_ACTIVITY_CODE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE_H_ID_SEQ]) as [_FINANCIAL_ACTIVITY_CODE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_COSTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_COSTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_COSTYP_I_S_U_TR] ON PIMS_COST_TYPE_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COST_TYPE_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COST_TYPE_CODE
    inner join inserted
    on (PIMS_COST_TYPE_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_WRKACT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_WRKACT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_WRKACT_A_S_IUD_TR] ON PIMS_WORK_ACTIVITY_CODE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_WORK_ACTIVITY_CODE_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_WORK_ACTIVITY_CODE_HIST ([ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _WORK_ACTIVITY_CODE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_WORK_ACTIVITY_CODE_H_ID_SEQ]) as [_WORK_ACTIVITY_CODE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_YRFINC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_YRFINC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_YRFINC_I_S_U_TR] ON PIMS_YEARLY_FINANCIAL_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_YEARLY_FINANCIAL_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_YEARLY_FINANCIAL_CODE
    inner join inserted
    on (PIMS_YEARLY_FINANCIAL_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CHRTAC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_CHRTAC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CHRTAC_I_S_I_TR] ON PIMS_CHART_OF_ACCOUNTS_CODE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CHART_OF_ACCOUNTS_CODE ("ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CHRTAC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_CHRTAC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CHRTAC_A_S_IUD_TR] ON PIMS_CHART_OF_ACCOUNTS_CODE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_CHART_OF_ACCOUNTS_CODE_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_CHART_OF_ACCOUNTS_CODE_HIST ([ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _CHART_OF_ACCOUNTS_CODE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_CHART_OF_ACCOUNTS_CODE_H_ID_SEQ]) as [_CHART_OF_ACCOUNTS_CODE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RESPCD_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_RESPCD_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RESPCD_I_S_I_TR] ON PIMS_RESPONSIBILITY_CODE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESPONSIBILITY_CODE ("ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_IDX
PRINT N'Create index dbo.ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACTIVITY_TEMPLATE]([ACTIVITY_TEMPLATE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTINS_ACTIVITY_TEMPLATE_ID_IDX
PRINT N'Create index dbo.ACTINS_ACTIVITY_TEMPLATE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTINS_ACTIVITY_TEMPLATE_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_TEMPLATE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
