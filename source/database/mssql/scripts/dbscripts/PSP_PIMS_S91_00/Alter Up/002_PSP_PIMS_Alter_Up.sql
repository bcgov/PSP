-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Wed Oct 09 11:55:25 PDT 2024
-- Execute this script on:
-- 		PSP_PIMS_S89_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S91_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACIN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRACIN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACIN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACIN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRACIN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACIN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACIN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRACIN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACIN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
	DROP CONSTRAINT IF EXISTS [PIM_PRPACT_PIM_PRACIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACDO_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACDO_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_PRPACT_PIM_PRACDO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCMNT_PIM_PRACDO_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCMNT_PIM_PRACDO_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_DOCMNT_PIM_PRACDO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRAC_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRAC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PRPRTY_PIM_PRPRAC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRPRAC_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRPRAC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PRPACT_PIM_PRPRAC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_PRACMC_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_PRACMC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_PRACMC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACMC_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPACT_PIM_PRACMC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
	DROP CONSTRAINT IF EXISTS [PIM_PRPACT_PIM_PRACMC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_PAINVP_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_PAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_PAINVP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPACT_PIM_PAINVP_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPACT_PIM_PAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	DROP CONSTRAINT IF EXISTS [PIM_PRPACT_PIM_PAINVP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_PAINVP_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_PAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_PAINVP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRACTY_PIM_PRPACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRACTY_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PRACTY_PIM_PRPACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_PRPACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_PRPACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PACSTY_PIM_PRPACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PACSTY_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PACSTY_PIM_PRPACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRACST_PIM_PRPACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRACST_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PRACST_PIM_PRPACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_PRPACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_PRPACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE].[PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACDO_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRACDO_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACDO_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACDO_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRACDO_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACDO_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACDO_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRACDO_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACDO_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT].[PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRACDO_DOCUMENT_ID_IDX
PRINT N'Drop index dbo.PRACDO_DOCUMENT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT].[PRACDO_DOCUMENT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRAC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRAC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRAC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRAC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRAC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRAC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRAC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPRAC_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRAC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRAC_PROPERTY_ID_IDX
PRINT N'Drop index dbo.PRPRAC_PROPERTY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_PROP_ACTIVITY].[PRPRAC_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_PROP_ACTIVITY].[PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACMC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRACMC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACMC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACMC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRACMC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACMC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACMC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRACMC_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACMC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_ACT_MIN_CONTACT].[PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRACMC_PERSON_ID_IDX
PRINT N'Drop index dbo.PRACMC_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_ACT_MIN_CONTACT].[PRACMC_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PAINVP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PAINVP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PAINVP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PAINVP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PAINVP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PAINVP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PAINVP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PAINVP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PAINVP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY].[PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PAINVP_PERSON_ID_IDX
PRINT N'Drop index dbo.PAINVP_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY].[PAINVP_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PAINVP_ORGANIZATION_ID_IDX
PRINT N'Drop index dbo.PAINVP_ORGANIZATION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY].[PAINVP_ORGANIZATION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPACT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPACT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPACT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPACT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPACT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPACT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCTYP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DOCTYP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCTYP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DOCTYP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPACT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPACT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPACT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX
PRINT N'Drop index dbo.PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY].[PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPACT_SERVICE_PROVIDER_ORG_ID_IDX
PRINT N'Drop index dbo.PRPACT_SERVICE_PROVIDER_ORG_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY].[PRPACT_SERVICE_PROVIDER_ORG_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX
PRINT N'Drop index dbo.PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY].[PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_IDX
PRINT N'Drop index dbo.PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY].[PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY].[PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRACIN_PK
PRINT N'Drop primary key constraint dbo.PRACIN_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
	DROP CONSTRAINT IF EXISTS [PRACIN_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRACDO_PK
PRINT N'Drop primary key constraint dbo.PRACDO_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PRACDO_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRPRAC_PK
PRINT N'Drop primary key constraint dbo.PRPRAC_PK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PRPRAC_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRACMC_PK
PRINT N'Drop primary key constraint dbo.PRACMC_PK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
	DROP CONSTRAINT IF EXISTS [PRACMC_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PAINVP_PK
PRINT N'Drop primary key constraint dbo.PAINVP_PK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	DROP CONSTRAINT IF EXISTS [PAINVP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRPACT_PK
PRINT N'Drop primary key constraint dbo.PRPACT_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PRPACT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FILE_ID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_PROJECT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'PROJECT_ID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_PRODUCT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'PRODUCT_ID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQUISITION_FILE_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FILE_STATUS_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQUISITION_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQUISITION_FUNDING_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FUNDING_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQ_PHYS_FILE_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ACQ_PHYS_FILE_STATUS_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD [PRNT_ACQUISITION_FILE_ID] bigint NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Link to the parent acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'PRNT_ACQUISITION_FILE_ID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_TYP
PRINT N'Alter table dbo.PIMS_DOCUMENT_TYP'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
	ADD [DOCUMENT_TYPE_DEFINITION] nvarchar(500) NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the purpose of the document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_TYP', 
	@level2type = N'Column', @level2name = N'DOCUMENT_TYPE_DEFINITION'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROPERTY_ACTIVITY
PRINT N'Rebuild table dbo.PIMS_PROPERTY_ACTIVITY'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_PROPERTY_ACTIVITY_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [DF__PIMS_PROP__APP_L__21E0EDE6]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPACT_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1728500103562]  ( 
	[PIMS_PROPERTY_ACTIVITY_ID]          	bigint NOT NULL CONSTRAINT [PRPACT_PROPERTY_ACTIVITY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_ID_SEQ]),
	[PROP_MGMT_ACTIVITY_TYPE_CODE]       	nvarchar(20) NOT NULL CONSTRAINT [PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[PROP_MGMT_ACTIVITY_SUBTYPE_CODE]    	nvarchar(20) NOT NULL CONSTRAINT [PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL CONSTRAINT [PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_DEF]  DEFAULT ('NOTSTARTED'),
	[SERVICE_PROVIDER_PERSON_ID]         	bigint NULL,
	[SERVICE_PROVIDER_ORG_ID]            	bigint NULL,
	[REQUEST_ADDED_DT]                   	date NOT NULL,
	[COMPLETION_DT]                      	date NULL,
	[DESCRIPTION]                        	nvarchar(max) NULL,
	[REQUEST_SOURCE]                     	nvarchar(2000) NULL,
	[IS_DISABLED]                        	bit NULL CONSTRAINT [PRPACT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL CONSTRAINT [PRPACT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [PRPACT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPACT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DF__PIMS_PROP__APP_L__21E0EDE6]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL CONSTRAINT [PRPACT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPACT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPACT_PK] PRIMARY KEY CLUSTERED([PIMS_PROPERTY_ACTIVITY_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Type of property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103562', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Subtype of property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103562', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_SUBTYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Status of the property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103562', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the person as a service provider.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103562', 
	@level2type = N'Column', @level2name = N'SERVICE_PROVIDER_PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the organization as a service provider.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103562', 
	@level2type = N'Column', @level2name = N'SERVICE_PROVIDER_ORG_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the request for a property management activity was added' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103562', 
	@level2type = N'Column', @level2name = N'REQUEST_ADDED_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the property management activity was completed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103562', 
	@level2type = N'Column', @level2name = N'COMPLETION_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103562', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Source of the management activity request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103562', 
	@level2type = N'Column', @level2name = N'REQUEST_SOURCE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103562', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the activities that are associated with this property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103562'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1728500103562]([PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_TYPE_CODE], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE], [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE], [SERVICE_PROVIDER_PERSON_ID], [SERVICE_PROVIDER_ORG_ID], [REQUEST_ADDED_DT], [COMPLETION_DT], [DESCRIPTION], [REQUEST_SOURCE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_TYPE_CODE], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE], [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE], [SERVICE_PROVIDER_PERSON_ID], [SERVICE_PROVIDER_ORG_ID], [REQUEST_ADDED_DT], [COMPLETION_DT], SUBSTRING(DESCRIPTION,1,2147483647), [REQUEST_SOURCE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_PROPERTY_ACTIVITY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1728500103562]', N'PIMS_PROPERTY_ACTIVITY', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACTIVITY_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_ACTIVITY_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST] ALTER COLUMN [DESCRIPTION] nvarchar(4000) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST]
	ADD [PRNT_ACQUISITION_FILE_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_TYP_HIST
PRINT N'Alter table dbo.PIMS_DOCUMENT_TYP_HIST'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP_HIST]
	ADD [DOCUMENT_TYPE_DEFINITION] nvarchar(500) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROP_ACT_INVOLVED_PARTY
PRINT N'Rebuild table dbo.PIMS_PROP_ACT_INVOLVED_PARTY'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_PROP_ACT_INVOLVED_PARTY_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
DROP CONSTRAINT IF EXISTS [PAINVP_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1728500103569]  ( 
	[PROP_ACT_INVOLVED_PARTY_ID]    	bigint NOT NULL CONSTRAINT [PAINVP_PROP_ACT_INVOLVED_PARTY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_ACT_INVOLVED_PARTY_ID_SEQ]),
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PAINVP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PAINVP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PAINVP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PAINVP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PAINVP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PAINVP_PK] PRIMARY KEY CLUSTERED([PROP_ACT_INVOLVED_PARTY_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property management activity to a vendor (many-to-many).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103569'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1728500103569]([PROP_ACT_INVOLVED_PARTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [PROP_ACT_INVOLVED_PARTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1728500103569]', N'PIMS_PROP_ACT_INVOLVED_PARTY', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROP_ACT_MIN_CONTACT
PRINT N'Rebuild table dbo.PIMS_PROP_ACT_MIN_CONTACT'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_PROP_ACT_MIN_CONTACT_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
DROP CONSTRAINT IF EXISTS [PRACMC_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1728500103570]  ( 
	[PROP_ACT_MIN_CONTACT_ID]       	bigint NOT NULL CONSTRAINT [PRACMC_PROP_ACT_MIN_CONTACT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_ACT_MIN_CONTACT_ID_SEQ]),
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRACMC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACMC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACMC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACMC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACMC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACMC_PK] PRIMARY KEY CLUSTERED([PROP_ACT_MIN_CONTACT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property management activity to a Ministry contact (many-to-many).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103570'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1728500103570]([PROP_ACT_MIN_CONTACT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [PROP_ACT_MIN_CONTACT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1728500103570]', N'PIMS_PROP_ACT_MIN_CONTACT', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROP_PROP_ACTIVITY
PRINT N'Rebuild table dbo.PIMS_PROP_PROP_ACTIVITY'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_PROP_PROP_ACTIVITY_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
DROP CONSTRAINT IF EXISTS [PRPRAC_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1728500103572]  ( 
	[PROP_PROP_ACTIVITY_ID]         	bigint NOT NULL CONSTRAINT [PRPRAC_PROP_PROP_ACTIVITY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ACTIVITY_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRPRAC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRAC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPRAC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRAC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPRAC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRAC_PK] PRIMARY KEY CLUSTERED([PROP_PROP_ACTIVITY_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property to a property management actity (many-to-many).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103572'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1728500103572]([PROP_PROP_ACTIVITY_ID], [PROPERTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [PROP_PROP_ACTIVITY_ID], [PROPERTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_PROP_PROP_ACTIVITY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROP_PROP_ACTIVITY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1728500103572]', N'PIMS_PROP_PROP_ACTIVITY', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT
PRINT N'Rebuild table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_PROPERTY_ACTIVITY_DOCUMENT_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
DROP CONSTRAINT IF EXISTS [PRACDO_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1728500103568]  ( 
	[PROPERTY_ACTIVITY_DOCUMENT_ID] 	bigint NOT NULL CONSTRAINT [PRACDO_PROPERTY_ACTIVITY_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_DOCUMENT_ID_SEQ]),
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRACDO_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACDO_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACDO_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACDO_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACDO_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACDO_PK] PRIMARY KEY CLUSTERED([PROPERTY_ACTIVITY_DOCUMENT_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1728500103568]([PROPERTY_ACTIVITY_DOCUMENT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [PROPERTY_ACTIVITY_DOCUMENT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1728500103568]', N'PIMS_PROPERTY_ACTIVITY_DOCUMENT', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROPERTY_ACTIVITY_INVOICE
PRINT N'Rebuild table dbo.PIMS_PROPERTY_ACTIVITY_INVOICE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_PROPERTY_ACTIVITY_INVOICE_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_INVOICE_DT_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_DESCRIPTION_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_IS_PST_REQUIRED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
DROP CONSTRAINT IF EXISTS [PRACIN_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1728500103571]  ( 
	[PROPERTY_ACTIVITY_INVOICE_ID]  	bigint NOT NULL CONSTRAINT [PRACIN_PROPERTY_ACTIVITY_INVOICE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_INVOICE_ID_SEQ]),
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[INVOICE_DT]                    	date NOT NULL CONSTRAINT [PRACIN_INVOICE_DT_DEF]  DEFAULT (getutcdate()),
	[INVOICE_NUM]                   	nvarchar(50) NULL,
	[DESCRIPTION]                   	nvarchar(1000) NULL CONSTRAINT [PRACIN_DESCRIPTION_DEF]  DEFAULT ('Unknown'),
	[PRETAX_AMT]                    	money NOT NULL,
	[GST_AMT]                       	money NULL,
	[PST_AMT]                       	money NULL,
	[TOTAL_AMT]                     	money NULL,
	[IS_PST_REQUIRED]               	bit NOT NULL CONSTRAINT [PRACIN_IS_PST_REQUIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_DISABLED]                   	bit NULL CONSTRAINT [PRACIN_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRACIN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACIN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACIN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACIN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACIN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACIN_PK] PRIMARY KEY CLUSTERED([PROPERTY_ACTIVITY_INVOICE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of the invoice' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103571', 
	@level2type = N'Column', @level2name = N'INVOICE_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Number assigned to the invoice.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103571', 
	@level2type = N'Column', @level2name = N'INVOICE_NUM'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the invoice.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103571', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Subtotal of the invoice,' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103571', 
	@level2type = N'Column', @level2name = N'PRETAX_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST on the invoice.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103571', 
	@level2type = N'Column', @level2name = N'GST_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'PST on the invoice.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103571', 
	@level2type = N'Column', @level2name = N'PST_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Total cost of the invoice.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103571', 
	@level2type = N'Column', @level2name = N'TOTAL_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the invoice requires PST.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103571', 
	@level2type = N'Column', @level2name = N'IS_PST_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the invoice is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103571', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the activities that are associated with this property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1728500103571'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1728500103571]([PROPERTY_ACTIVITY_INVOICE_ID], [PIMS_PROPERTY_ACTIVITY_ID], [INVOICE_DT], [INVOICE_NUM], [DESCRIPTION], [PRETAX_AMT], [GST_AMT], [PST_AMT], [TOTAL_AMT], [IS_PST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [PROPERTY_ACTIVITY_INVOICE_ID], [PIMS_PROPERTY_ACTIVITY_ID], [INVOICE_DT], [INVOICE_NUM], [DESCRIPTION], [PRETAX_AMT], [GST_AMT], [PST_AMT], [TOTAL_AMT], [IS_PST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1728500103571]', N'PIMS_PROPERTY_ACTIVITY_INVOICE', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQNFL_PRNT_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.ACQNFL_PRNT_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQNFL_PRNT_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([PRNT_ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_I_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE ("ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUMBER",
      "LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUMBER",
      "LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCTYP_I_S_U_TR] ON PIMS_DOCUMENT_TYP INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_TYPE_ID = deleted.DOCUMENT_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_TYP
    set "DOCUMENT_TYPE_ID" = inserted."DOCUMENT_TYPE_ID",
      "MAYAN_ID" = inserted."MAYAN_ID",
      "DOCUMENT_TYPE" = inserted."DOCUMENT_TYPE",
      "DOCUMENT_TYPE_DESCRIPTION" = inserted."DOCUMENT_TYPE_DESCRIPTION",
      "DOCUMENT_TYPE_DEFINITION" = inserted."DOCUMENT_TYPE_DEFINITION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_TYP
    inner join inserted
    on (PIMS_DOCUMENT_TYP.DOCUMENT_TYPE_ID = inserted.DOCUMENT_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_IDX
PRINT N'Create index dbo.PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([PROP_MGMT_ACTIVITY_SUBTYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX
PRINT N'Create index dbo.PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([PROP_MGMT_ACTIVITY_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_SERVICE_PROVIDER_ORG_ID_IDX
PRINT N'Create index dbo.PRPACT_SERVICE_PROVIDER_ORG_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_SERVICE_PROVIDER_ORG_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([SERVICE_PROVIDER_ORG_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX
PRINT N'Create index dbo.PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([SERVICE_PROVIDER_PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPACT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPACT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPACT_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_HIST set END_DATE_HIST = @curr_date where PIMS_PROPERTY_ACTIVITY_ID in (select PIMS_PROPERTY_ACTIVITY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_HIST ([PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_TYPE_CODE], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE], [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE], [SERVICE_PROVIDER_PERSON_ID], [SERVICE_PROVIDER_ORG_ID], [REQUEST_ADDED_DT], [COMPLETION_DT], [DESCRIPTION], [REQUEST_SOURCE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_TYPE_CODE], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE], [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE], [SERVICE_PROVIDER_PERSON_ID], [SERVICE_PROVIDER_ORG_ID], [REQUEST_ADDED_DT], [COMPLETION_DT], SUBSTRING([DESCRIPTION], 1, 4000), [REQUEST_SOURCE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_ID in (select ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_HIST ([ACQUISITION_FILE_ID], [PRNT_ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [FILE_NAME], [FILE_NO], [FILE_NUMBER], [LEGACY_FILE_NUMBER], [LEGACY_STAKEHOLDER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [PAIMS_ACQUISITION_FILE_ID], [TOTAL_ALLOWABLE_COMPENSATION], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_ID], [PRNT_ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [FILE_NAME], [FILE_NO], [FILE_NUMBER], [LEGACY_FILE_NUMBER], [LEGACY_STAKEHOLDER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [PAIMS_ACQUISITION_FILE_ID], [TOTAL_ALLOWABLE_COMPENSATION], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_H_ID_SEQ]) as [_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCTYP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DOCTYP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCTYP_I_S_I_TR] ON PIMS_DOCUMENT_TYP INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_TYP ("DOCUMENT_TYPE_ID",
      "MAYAN_ID",
      "DOCUMENT_TYPE",
      "DOCUMENT_TYPE_DESCRIPTION",
      "DOCUMENT_TYPE_DEFINITION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DOCUMENT_TYPE_ID",
      "MAYAN_ID",
      "DOCUMENT_TYPE",
      "DOCUMENT_TYPE_DESCRIPTION",
      "DOCUMENT_TYPE_DEFINITION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_U_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_ID = deleted.ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE
    set "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID" = inserted."PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_NO" = inserted."FILE_NO",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "LEGACY_FILE_NUMBER" = inserted."LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER" = inserted."LEGACY_STAKEHOLDER",
      "FUNDING_OTHER" = inserted."FUNDING_OTHER",
      "ASSIGNED_DATE" = inserted."ASSIGNED_DATE",
      "DELIVERY_DATE" = inserted."DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID" = inserted."PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION" = inserted."TOTAL_ALLOWABLE_COMPENSATION",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE
    inner join inserted
    on (PIMS_ACQUISITION_FILE.ACQUISITION_FILE_ID = inserted.ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCTYP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DOCTYP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCTYP_A_S_IUD_TR] ON PIMS_DOCUMENT_TYP FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DOCUMENT_TYP_HIST set END_DATE_HIST = @curr_date where DOCUMENT_TYPE_ID in (select DOCUMENT_TYPE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DOCUMENT_TYP_HIST ([DOCUMENT_TYPE_ID], [MAYAN_ID], [DOCUMENT_TYPE], [DOCUMENT_TYPE_DESCRIPTION], [DOCUMENT_TYPE_DEFINITION], [IS_DISABLED], [DISPLAY_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DOCUMENT_TYP_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DOCUMENT_TYPE_ID], [MAYAN_ID], [DOCUMENT_TYPE], [DOCUMENT_TYPE_DESCRIPTION], [DOCUMENT_TYPE_DEFINITION], [IS_DISABLED], [DISPLAY_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DOCUMENT_TYP_H_ID_SEQ]) as [_DOCUMENT_TYP_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPACT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPACT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPACT_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY ("PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID",
      "REQUEST_ADDED_DT",
      "COMPLETION_DT",
      "DESCRIPTION",
      "REQUEST_SOURCE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID",
      "REQUEST_ADDED_DT",
      "COMPLETION_DT",
      "DESCRIPTION",
      "REQUEST_SOURCE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPACT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPACT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPACT_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PIMS_PROPERTY_ACTIVITY_ID = deleted.PIMS_PROPERTY_ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY
    set "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_TYPE_CODE",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID" = inserted."SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID" = inserted."SERVICE_PROVIDER_ORG_ID",
      "REQUEST_ADDED_DT" = inserted."REQUEST_ADDED_DT",
      "COMPLETION_DT" = inserted."COMPLETION_DT",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "REQUEST_SOURCE" = inserted."REQUEST_SOURCE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY.PIMS_PROPERTY_ACTIVITY_ID = inserted.PIMS_PROPERTY_ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PAINVP_ORGANIZATION_ID_IDX
PRINT N'Create index dbo.PAINVP_ORGANIZATION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PAINVP_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]([ORGANIZATION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PAINVP_PERSON_ID_IDX
PRINT N'Create index dbo.PAINVP_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PAINVP_PERSON_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PAINVP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PAINVP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PAINVP_A_S_IUD_TR] ON PIMS_PROP_ACT_INVOLVED_PARTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_ACT_INVOLVED_PARTY_HIST set END_DATE_HIST = @curr_date where PROP_ACT_INVOLVED_PARTY_ID in (select PROP_ACT_INVOLVED_PARTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_ACT_INVOLVED_PARTY_HIST ([PROP_ACT_INVOLVED_PARTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_ACT_INVOLVED_PARTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_ACT_INVOLVED_PARTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY_H_ID_SEQ]) as [_PROP_ACT_INVOLVED_PARTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PAINVP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PAINVP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PAINVP_I_S_I_TR] ON PIMS_PROP_ACT_INVOLVED_PARTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_ACT_INVOLVED_PARTY ("PROP_ACT_INVOLVED_PARTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_ACT_INVOLVED_PARTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PAINVP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PAINVP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PAINVP_I_S_U_TR] ON PIMS_PROP_ACT_INVOLVED_PARTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_ACT_INVOLVED_PARTY_ID = deleted.PROP_ACT_INVOLVED_PARTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_ACT_INVOLVED_PARTY
    set "PROP_ACT_INVOLVED_PARTY_ID" = inserted."PROP_ACT_INVOLVED_PARTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_ACT_INVOLVED_PARTY
    inner join inserted
    on (PIMS_PROP_ACT_INVOLVED_PARTY.PROP_ACT_INVOLVED_PARTY_ID = inserted.PROP_ACT_INVOLVED_PARTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACMC_PERSON_ID_IDX
PRINT N'Create index dbo.PRACMC_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACMC_PERSON_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_MIN_CONTACT]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_MIN_CONTACT]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACMC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRACMC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACMC_A_S_IUD_TR] ON PIMS_PROP_ACT_MIN_CONTACT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_ACT_MIN_CONTACT_HIST set END_DATE_HIST = @curr_date where PROP_ACT_MIN_CONTACT_ID in (select PROP_ACT_MIN_CONTACT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_ACT_MIN_CONTACT_HIST ([PROP_ACT_MIN_CONTACT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_ACT_MIN_CONTACT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_ACT_MIN_CONTACT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_ACT_MIN_CONTACT_H_ID_SEQ]) as [_PROP_ACT_MIN_CONTACT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACMC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACMC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACMC_I_S_I_TR] ON PIMS_PROP_ACT_MIN_CONTACT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_ACT_MIN_CONTACT ("PROP_ACT_MIN_CONTACT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_ACT_MIN_CONTACT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACMC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACMC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACMC_I_S_U_TR] ON PIMS_PROP_ACT_MIN_CONTACT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_ACT_MIN_CONTACT_ID = deleted.PROP_ACT_MIN_CONTACT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_ACT_MIN_CONTACT
    set "PROP_ACT_MIN_CONTACT_ID" = inserted."PROP_ACT_MIN_CONTACT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_ACT_MIN_CONTACT
    inner join inserted
    on (PIMS_PROP_ACT_MIN_CONTACT.PROP_ACT_MIN_CONTACT_ID = inserted.PROP_ACT_MIN_CONTACT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRAC_PROPERTY_ID_IDX
PRINT N'Create index dbo.PRPRAC_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRAC_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ACTIVITY]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPRAC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAC_A_S_IUD_TR] ON PIMS_PROP_PROP_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_PROP_ACTIVITY_HIST set END_DATE_HIST = @curr_date where PROP_PROP_ACTIVITY_ID in (select PROP_PROP_ACTIVITY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_PROP_ACTIVITY_HIST ([PROP_PROP_ACTIVITY_ID], [PROPERTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_PROP_ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_PROP_ACTIVITY_ID], [PROPERTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_PROP_ACTIVITY_H_ID_SEQ]) as [_PROP_PROP_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPRAC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAC_I_S_I_TR] ON PIMS_PROP_PROP_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_ACTIVITY ("PROP_PROP_ACTIVITY_ID",
      "PROPERTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_PROP_ACTIVITY_ID",
      "PROPERTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRAC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAC_I_S_U_TR] ON PIMS_PROP_PROP_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_ACTIVITY_ID = deleted.PROP_PROP_ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_ACTIVITY
    set "PROP_PROP_ACTIVITY_ID" = inserted."PROP_PROP_ACTIVITY_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ACTIVITY
    inner join inserted
    on (PIMS_PROP_PROP_ACTIVITY.PROP_PROP_ACTIVITY_ID = inserted.PROP_PROP_ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACDO_DOCUMENT_ID_IDX
PRINT N'Create index dbo.PRACDO_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACDO_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACDO_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRACDO_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACDO_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACTIVITY_DOCUMENT_ID in (select PROPERTY_ACTIVITY_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST ([PROPERTY_ACTIVITY_DOCUMENT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACTIVITY_DOCUMENT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACDO_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACDO_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACDO_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY_DOCUMENT ("PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACDO_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACDO_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACDO_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACTIVITY_DOCUMENT_ID = deleted.PROPERTY_ACTIVITY_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY_DOCUMENT
    set "PROPERTY_ACTIVITY_DOCUMENT_ID" = inserted."PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY_DOCUMENT
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY_DOCUMENT.PROPERTY_ACTIVITY_DOCUMENT_ID = inserted.PROPERTY_ACTIVITY_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQNFL_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQNFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQNFL_FK]
	FOREIGN KEY([PRNT_ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_ORG_PIM_PRPACT_FK]
	FOREIGN KEY([SERVICE_PROVIDER_ORG_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRACST_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRACST_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_PRACST_PIM_PRPACT_FK]
	FOREIGN KEY([PROP_MGMT_ACTIVITY_SUBTYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_MGMT_ACTIVITY_SUBTYPE]([PROP_MGMT_ACTIVITY_SUBTYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PACSTY_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PACSTY_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_PACSTY_PIM_PRPACT_FK]
	FOREIGN KEY([PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE]([PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRPACT_FK]
	FOREIGN KEY([SERVICE_PROVIDER_PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRACTY_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRACTY_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_PRACTY_PIM_PRPACT_FK]
	FOREIGN KEY([PROP_MGMT_ACTIVITY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_MGMT_ACTIVITY_TYPE]([PROP_MGMT_ACTIVITY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_PAINVP_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_PAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	ADD CONSTRAINT [PIM_ORG_PIM_PAINVP_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PAINVP_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PAINVP_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_PAINVP_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_PAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	ADD CONSTRAINT [PIM_PERSON_PIM_PAINVP_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACMC_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACMC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRACMC_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_PRACMC_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_PRACMC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRACMC_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PRPRAC_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PRPRAC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRPRAC_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRAC_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRAC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRAC_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_PRACDO_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_PRACDO_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_PRACDO_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACDO_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACDO_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRACDO_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACIN_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRACIN_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACIN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRACIN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACIN_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY_INVOICE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_INVOICE_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACTIVITY_INVOICE_ID in (select PROPERTY_ACTIVITY_INVOICE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_INVOICE_HIST ([PROPERTY_ACTIVITY_INVOICE_ID], [PIMS_PROPERTY_ACTIVITY_ID], [INVOICE_DT], [INVOICE_NUM], [DESCRIPTION], [PRETAX_AMT], [GST_AMT], [PST_AMT], [TOTAL_AMT], [IS_PST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_INVOICE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACTIVITY_INVOICE_ID], [PIMS_PROPERTY_ACTIVITY_ID], [INVOICE_DT], [INVOICE_NUM], [DESCRIPTION], [PRETAX_AMT], [GST_AMT], [PST_AMT], [TOTAL_AMT], [IS_PST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_INVOICE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACIN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACIN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACIN_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY_INVOICE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY_INVOICE ("PROPERTY_ACTIVITY_INVOICE_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "INVOICE_DT",
      "INVOICE_NUM",
      "DESCRIPTION",
      "PRETAX_AMT",
      "GST_AMT",
      "PST_AMT",
      "TOTAL_AMT",
      "IS_PST_REQUIRED",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACTIVITY_INVOICE_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "INVOICE_DT",
      "INVOICE_NUM",
      "DESCRIPTION",
      "PRETAX_AMT",
      "GST_AMT",
      "PST_AMT",
      "TOTAL_AMT",
      "IS_PST_REQUIRED",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACIN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACIN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACIN_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY_INVOICE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACTIVITY_INVOICE_ID = deleted.PROPERTY_ACTIVITY_INVOICE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY_INVOICE
    set "PROPERTY_ACTIVITY_INVOICE_ID" = inserted."PROPERTY_ACTIVITY_INVOICE_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "INVOICE_DT" = inserted."INVOICE_DT",
      "INVOICE_NUM" = inserted."INVOICE_NUM",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "GST_AMT" = inserted."GST_AMT",
      "PST_AMT" = inserted."PST_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "IS_PST_REQUIRED" = inserted."IS_PST_REQUIRED",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY_INVOICE
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY_INVOICE.PROPERTY_ACTIVITY_INVOICE_ID = inserted.PROPERTY_ACTIVITY_INVOICE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
