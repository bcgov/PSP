-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Tue May 23 21:40:42 PDT 2023
-- Execute this script on:
-- 		PIMS_PSP_S54_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PIMS_PSP_S53_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCCAT_PIM_DCCTSB_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCCAT_PIM_DCCTSB_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_CATEGORY_SUBTYPE]
	DROP CONSTRAINT IF EXISTS [PIM_DOCCAT_PIM_DCCTSB_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCTYP_PIM_DCCTSB_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCTYP_PIM_DCCTSB_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_CATEGORY_SUBTYPE]
	DROP CONSTRAINT IF EXISTS [PIM_DOCTYP_PIM_DCCTSB_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LNDATY_PIM_TAKE_FK
PRINT N'Drop foreign key constraint dbo.PIM_LNDATY_PIM_TAKE_FK'
GO
ALTER TABLE [dbo].[PIMS_TAKE]
	DROP CONSTRAINT IF EXISTS [PIM_LNDATY_PIM_TAKE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_FINACT_PIM_CRH120_FK
PRINT N'Drop foreign key constraint dbo.PIM_FINACT_PIM_CRH120_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_H120]
	DROP CONSTRAINT IF EXISTS [PIM_FINACT_PIM_CRH120_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_CHRTAC_PIM_CMPREQ_FK
PRINT N'Drop foreign key constraint dbo.PIM_CHRTAC_PIM_CMPREQ_FK'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	DROP CONSTRAINT IF EXISTS [PIM_CHRTAC_PIM_CMPREQ_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_YRFINC_PIM_CMPREQ_FK
PRINT N'Drop foreign key constraint dbo.PIM_YRFINC_PIM_CMPREQ_FK'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	DROP CONSTRAINT IF EXISTS [PIM_YRFINC_PIM_CMPREQ_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_RESPCD_PIM_CMPREQ_FK
PRINT N'Drop foreign key constraint dbo.PIM_RESPCD_PIM_CMPREQ_FK'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	DROP CONSTRAINT IF EXISTS [PIM_RESPCD_PIM_CMPREQ_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRTY_LOCATION_IDX
--PRINT N'Drop index dbo.PRPRTY_LOCATION_IDX'
--GO
--DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY].[PRPRTY_LOCATION_IDX]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Drop index dbo.PRPRTY_BOUNDARY_IDX
--PRINT N'Drop index dbo.PRPRTY_BOUNDARY_IDX'
--GO
--DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY].[PRPRTY_BOUNDARY_IDX]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Drop trigger dbo.PIMS_DOCFMT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCFMT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCFMT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCFMT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DOCFMT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCFMT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DCCTSB_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DCCTSB_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DCCTSB_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DCCTSB_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DCCTSB_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DCCTSB_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.DCCTSB_DOCUMENT_TYPE_ID_IDX
PRINT N'Drop index dbo.DCCTSB_DOCUMENT_TYPE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_DOCUMENT_CATEGORY_SUBTYPE].[DCCTSB_DOCUMENT_TYPE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.DCCTSB_DOCUMENT_CATEGORY_TYPE_CODE_IDX
PRINT N'Drop index dbo.DCCTSB_DOCUMENT_CATEGORY_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_DOCUMENT_CATEGORY_SUBTYPE].[DCCTSB_DOCUMENT_CATEGORY_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCCAT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCCAT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCCAT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCCAT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DOCCAT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCCAT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TAKE_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_TAKE_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TAKE_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TAKE_LAND_ACT_TYPE_CODE_IDX
PRINT N'Drop index dbo.TAKE_LAND_ACT_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_TAKE].[TAKE_LAND_ACT_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TAKE_AREA_UNIT_TYPE_CODE_IDX
PRINT N'Drop index dbo.TAKE_AREA_UNIT_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_TAKE].[TAKE_AREA_UNIT_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TAKE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TAKE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TAKE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQPCHQ_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_AQPCHQ_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQPCHQ_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPREQ_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CMPREQ_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPREQ_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CRH120_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_CRH120_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CRH120_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CRH120_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_CRH120_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CRH120_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.CRH120_FINANCIAL_ACTIVITY_CODE_ID_IDX
PRINT N'Drop index dbo.CRH120_FINANCIAL_ACTIVITY_CODE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_COMP_REQ_H120].[CRH120_FINANCIAL_ACTIVITY_CODE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQPCHQ_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_AQPCHQ_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQPCHQ_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQPCHQ_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AQPCHQ_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQPCHQ_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ADDRSS_STREET_ADDRESS_1_IDX
PRINT N'Drop index dbo.ADDRSS_STREET_ADDRESS_1_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ADDRESS].[ADDRSS_STREET_ADDRESS_1_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ADDRSS_MUNICIPALITY_NAME_IDX
PRINT N'Drop index dbo.ADDRSS_MUNICIPALITY_NAME_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ADDRESS].[ADDRSS_MUNICIPALITY_NAME_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TAKE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TAKE_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TAKE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LNDATY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LNDATY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LNDATY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LNDATY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LNDATY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LNDATY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CRH120_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CRH120_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CRH120_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPREQ_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_CMPREQ_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPREQ_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.CMPREQ_YEARLY_FINANCIAL_ID_IDX
PRINT N'Drop index dbo.CMPREQ_YEARLY_FINANCIAL_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_COMPENSATION_REQUISITION].[CMPREQ_YEARLY_FINANCIAL_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.CMPREQ_RESPONSIBILITY_ID_IDX
PRINT N'Drop index dbo.CMPREQ_RESPONSIBILITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_COMPENSATION_REQUISITION].[CMPREQ_RESPONSIBILITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.CMPREQ_CHART_OF_ACCOUNTS_ID_IDX
PRINT N'Drop index dbo.CMPREQ_CHART_OF_ACCOUNTS_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_COMPENSATION_REQUISITION].[CMPREQ_CHART_OF_ACCOUNTS_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPREQ_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_CMPREQ_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPREQ_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.DOCFMT_PK
PRINT N'Drop primary key constraint dbo.DOCFMT_PK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_FORMAT_TYPE]
	DROP CONSTRAINT IF EXISTS [DOCFMT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.DCCTSB_DOCUMENT_CATEGORY_SUBTYPE_TUC
PRINT N'Drop unique constraint dbo.DCCTSB_DOCUMENT_CATEGORY_SUBTYPE_TUC'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_CATEGORY_SUBTYPE]
	DROP CONSTRAINT IF EXISTS [DCCTSB_DOCUMENT_CATEGORY_SUBTYPE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.DCCTSB_PK
PRINT N'Drop primary key constraint dbo.DCCTSB_PK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_CATEGORY_SUBTYPE]
	DROP CONSTRAINT IF EXISTS [DCCTSB_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_DOCUMENT_CATEGORY_SUBTYPE
PRINT N'Drop table dbo.PIMS_DOCUMENT_CATEGORY_SUBTYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_DOCUMENT_CATEGORY_SUBTYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.DOCCAT_PK
PRINT N'Drop primary key constraint dbo.DOCCAT_PK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_CATEGORY_TYPE]
	DROP CONSTRAINT IF EXISTS [DOCCAT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LNDATY_PK
PRINT N'Drop primary key constraint dbo.LNDATY_PK'
GO
ALTER TABLE [dbo].[PIMS_LAND_ACT_TYPE]
	DROP CONSTRAINT IF EXISTS [LNDATY_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COMPENSATION_REQUISITION
PRINT N'Alter table dbo.PIMS_COMPENSATION_REQUISITION'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	DROP COLUMN IF EXISTS [CHART_OF_ACCOUNTS_ID], [RESPONSIBILITY_ID], [YEARLY_FINANCIAL_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COMP_REQ_H120
PRINT N'Alter table dbo.PIMS_COMP_REQ_H120'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_H120]
	DROP CONSTRAINT IF EXISTS [CRH120_IS_GST_REQUIRED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_H120]
	ADD [H120_CATEGORY_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_COMP_REQ_H120' 
                   AND col.NAME = 'FINANCIAL_ACTIVITY_CODE_ID')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_COMP_REQ_H120] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_COMP_REQ_H120' 
                   AND col.NAME = 'IS_GST_REQUIRED')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_COMP_REQ_H120] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TABLE [dbo].[PIMS_COMP_REQ_H120]
	DROP COLUMN IF EXISTS [FINANCIAL_ACTIVITY_CODE_ID], [IS_GST_REQUIRED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY
PRINT N'Alter table dbo.PIMS_PROPERTY'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY]
	DROP COLUMN IF EXISTS [GENERAL_LOCATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_HIST]
	DROP COLUMN IF EXISTS [GENERAL_LOCATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COMPENSATION_REQUISITION_HIST
PRINT N'Alter table dbo.PIMS_COMPENSATION_REQUISITION_HIST'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION_HIST]
	DROP COLUMN IF EXISTS [CHART_OF_ACCOUNTS_ID], [RESPONSIBILITY_ID], [YEARLY_FINANCIAL_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE
PRINT N'Alter table dbo.PIMS_TAKE'
GO
ALTER TABLE [dbo].[PIMS_TAKE]
	ADD [LAND_ACT_DESCRIPTION] nvarchar(2000) NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the land act-related take.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'LAND_ACT_DESCRIPTION'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE]
	DROP COLUMN IF EXISTS [LAND_ACT_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_PAYEE_CHEQUE
PRINT N'Alter table dbo.PIMS_ACQ_PAYEE_CHEQUE'
GO
ALTER TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE]
	DROP CONSTRAINT IF EXISTS [AQPCHQ_IS_GST_REQUIRED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE]
	DROP COLUMN IF EXISTS [IS_GST_REQUIRED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_PAYEE_CHEQUE_HIST
PRINT N'Alter table dbo.PIMS_ACQ_PAYEE_CHEQUE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQ_PAYEE_CHEQUE_HIST]
	DROP COLUMN IF EXISTS [IS_GST_REQUIRED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COMP_REQ_H120_HIST
PRINT N'Alter table dbo.PIMS_COMP_REQ_H120_HIST'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_H120_HIST]
	ADD [H120_CATEGORY_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_COMP_REQ_H120_HIST' 
                   AND col.NAME = 'FINANCIAL_ACTIVITY_CODE_ID')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_COMP_REQ_H120_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_COMP_REQ_H120_HIST' 
                   AND col.NAME = 'IS_GST_REQUIRED')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_COMP_REQ_H120_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TABLE [dbo].[PIMS_COMP_REQ_H120_HIST]
	DROP COLUMN IF EXISTS [FINANCIAL_ACTIVITY_CODE_ID], [IS_GST_REQUIRED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE_HIST
PRINT N'Alter table dbo.PIMS_TAKE_HIST'
GO
ALTER TABLE [dbo].[PIMS_TAKE_HIST]
	ADD [LAND_ACT_DESCRIPTION] nvarchar(2000) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE_HIST]
	DROP COLUMN IF EXISTS [LAND_ACT_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.CRH120_H120_CATEGORY_ID_IDX
PRINT N'Create index dbo.CRH120_H120_CATEGORY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [CRH120_H120_CATEGORY_ID_IDX]
	ON [dbo].[PIMS_COMP_REQ_H120]([H120_CATEGORY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_A_S_IUD_TR] ON PIMS_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_HIST set END_DATE_HIST = @curr_date where PROPERTY_ID in (select PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_HIST ([PROPERTY_ID], [PROPERTY_MANAGER_ID], [PROP_MGMT_ORG_ID], [PROPERTY_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [NAME], [DESCRIPTION], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [SURVEY_PLAN_NUMBER], [ENCUMBRANCE_REASON], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_PROPERTY_OF_INTEREST], [IS_VISIBLE_TO_OTHER_AGENCIES], [IS_SENSITIVE], [IS_PROVINCIAL_PUBLIC_HWY], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ZONING], [ZONING_POTENTIAL], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ID], [PROPERTY_MANAGER_ID], [PROP_MGMT_ORG_ID], [PROPERTY_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [NAME], [DESCRIPTION], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [SURVEY_PLAN_NUMBER], [ENCUMBRANCE_REASON], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_PROPERTY_OF_INTEREST], [IS_VISIBLE_TO_OTHER_AGENCIES], [IS_SENSITIVE], [IS_PROVINCIAL_PUBLIC_HWY], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ZONING], [ZONING_POTENTIAL], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_H_ID_SEQ]) as [_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CMPREQ_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_CMPREQ_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CMPREQ_I_S_I_TR] ON PIMS_COMPENSATION_REQUISITION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_COMPENSATION_REQUISITION ("COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID",
      "IS_DRAFT",
      "FISCAL_YEAR",
      "AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT",
      "GENERATION_DT",
      "SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID",
      "IS_DRAFT",
      "FISCAL_YEAR",
      "AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT",
      "GENERATION_DT",
      "SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CMPREQ_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_CMPREQ_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CMPREQ_A_S_IUD_TR] ON PIMS_COMPENSATION_REQUISITION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_COMPENSATION_REQUISITION_HIST set END_DATE_HIST = @curr_date where COMPENSATION_REQUISITION_ID in (select COMPENSATION_REQUISITION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_COMPENSATION_REQUISITION_HIST ([COMPENSATION_REQUISITION_ID], [ACQUISITION_FILE_ID], [IS_DRAFT], [FISCAL_YEAR], [AGREEMENT_DT], [EXPROP_NOTICE_SERVED_DT], [EXPROP_VESTING_DT], [GENERATION_DT], [SPECIAL_INSTRUCTION], [DETAILED_REMARKS], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _COMPENSATION_REQUISITION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [COMPENSATION_REQUISITION_ID], [ACQUISITION_FILE_ID], [IS_DRAFT], [FISCAL_YEAR], [AGREEMENT_DT], [EXPROP_NOTICE_SERVED_DT], [EXPROP_VESTING_DT], [GENERATION_DT], [SPECIAL_INSTRUCTION], [DETAILED_REMARKS], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_COMPENSATION_REQUISITION_H_ID_SEQ]) as [_COMPENSATION_REQUISITION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CRH120_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CRH120_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CRH120_I_S_U_TR] ON PIMS_COMP_REQ_H120 INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.COMP_REQ_FIN_ACTIVITY = deleted.COMP_REQ_FIN_ACTIVITY)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COMP_REQ_H120
    set "COMP_REQ_FIN_ACTIVITY" = inserted."COMP_REQ_FIN_ACTIVITY",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "H120_CATEGORY_ID" = inserted."H120_CATEGORY_ID",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "TAX_AMT" = inserted."TAX_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COMP_REQ_H120
    inner join inserted
    on (PIMS_COMP_REQ_H120.COMP_REQ_FIN_ACTIVITY = inserted.COMP_REQ_FIN_ACTIVITY);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_I_TR] ON PIMS_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY ("PROPERTY_ID",
      "PROPERTY_MANAGER_ID",
      "PROP_MGMT_ORG_ID",
      "PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME",
      "DESCRIPTION",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "SURVEY_PLAN_NUMBER",
      "ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "NOTES",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE",
      "IS_PROVINCIAL_PUBLIC_HWY",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ZONING",
      "ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ID",
      "PROPERTY_MANAGER_ID",
      "PROP_MGMT_ORG_ID",
      "PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME",
      "DESCRIPTION",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "SURVEY_PLAN_NUMBER",
      "ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "NOTES",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE",
      "IS_PROVINCIAL_PUBLIC_HWY",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ZONING",
      "ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TAKE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_TAKE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TAKE_I_S_I_TR] ON PIMS_TAKE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE ("TAKE_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "TAKE_TYPE_CODE",
      "TAKE_STATUS_TYPE_CODE",
      "TAKE_SITE_CONTAM_TYPE_CODE",
      "AREA_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_NEW_RIGHT_OF_WAY",
      "NEW_RIGHT_OF_WAY_AREA",
      "IS_STATUTORY_RIGHT_OF_WAY",
      "STATUTORY_RIGHT_OF_WAY_AREA",
      "IS_LICENSE_TO_CONSTRUCT",
      "LICENSE_TO_CONSTRUCT_AREA",
      "LTC_END_DT",
      "IS_LAND_ACT",
      "LAND_ACT_AREA",
      "LAND_ACT_DESCRIPTION",
      "LAND_ACT_END_DT",
      "IS_SURPLUS",
      "SURPLUS_AREA",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "TAKE_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "TAKE_TYPE_CODE",
      "TAKE_STATUS_TYPE_CODE",
      "TAKE_SITE_CONTAM_TYPE_CODE",
      "AREA_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_NEW_RIGHT_OF_WAY",
      "NEW_RIGHT_OF_WAY_AREA",
      "IS_STATUTORY_RIGHT_OF_WAY",
      "STATUTORY_RIGHT_OF_WAY_AREA",
      "IS_LICENSE_TO_CONSTRUCT",
      "LICENSE_TO_CONSTRUCT_AREA",
      "LTC_END_DT",
      "IS_LAND_ACT",
      "LAND_ACT_AREA",
      "LAND_ACT_DESCRIPTION",
      "LAND_ACT_END_DT",
      "IS_SURPLUS",
      "SURPLUS_AREA",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQPCHQ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AQPCHQ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQPCHQ_I_S_U_TR] ON PIMS_ACQ_PAYEE_CHEQUE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_PAYEE_CHEQUE_ID = deleted.ACQ_PAYEE_CHEQUE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_PAYEE_CHEQUE
    set "ACQ_PAYEE_CHEQUE_ID" = inserted."ACQ_PAYEE_CHEQUE_ID",
      "ACQUISITION_PAYEE_ID" = inserted."ACQUISITION_PAYEE_ID",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "TAX_AMT" = inserted."TAX_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_PAYEE_CHEQUE
    inner join inserted
    on (PIMS_ACQ_PAYEE_CHEQUE.ACQ_PAYEE_CHEQUE_ID = inserted.ACQ_PAYEE_CHEQUE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQPCHQ_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_AQPCHQ_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQPCHQ_A_S_IUD_TR] ON PIMS_ACQ_PAYEE_CHEQUE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQ_PAYEE_CHEQUE_HIST set END_DATE_HIST = @curr_date where ACQ_PAYEE_CHEQUE_ID in (select ACQ_PAYEE_CHEQUE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQ_PAYEE_CHEQUE_HIST ([ACQ_PAYEE_CHEQUE_ID], [ACQUISITION_PAYEE_ID], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQ_PAYEE_CHEQUE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQ_PAYEE_CHEQUE_ID], [ACQUISITION_PAYEE_ID], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQ_PAYEE_CHEQUE_H_ID_SEQ]) as [_ACQ_PAYEE_CHEQUE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CRH120_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_CRH120_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CRH120_A_S_IUD_TR] ON PIMS_COMP_REQ_H120 FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_COMP_REQ_H120_HIST set END_DATE_HIST = @curr_date where COMP_REQ_FIN_ACTIVITY in (select COMP_REQ_FIN_ACTIVITY from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_COMP_REQ_H120_HIST ([COMP_REQ_FIN_ACTIVITY], [COMPENSATION_REQUISITION_ID], [H120_CATEGORY_ID], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _COMP_REQ_H120_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [COMP_REQ_FIN_ACTIVITY], [COMPENSATION_REQUISITION_ID], [H120_CATEGORY_ID], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_COMP_REQ_H120_H_ID_SEQ]) as [_COMP_REQ_H120_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CRH120_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_CRH120_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CRH120_I_S_I_TR] ON PIMS_COMP_REQ_H120 INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_COMP_REQ_H120 ("COMP_REQ_FIN_ACTIVITY",
      "COMPENSATION_REQUISITION_ID",
      "H120_CATEGORY_ID",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "COMP_REQ_FIN_ACTIVITY",
      "COMPENSATION_REQUISITION_ID",
      "H120_CATEGORY_ID",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CMPREQ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CMPREQ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CMPREQ_I_S_U_TR] ON PIMS_COMPENSATION_REQUISITION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.COMPENSATION_REQUISITION_ID = deleted.COMPENSATION_REQUISITION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COMPENSATION_REQUISITION
    set "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "IS_DRAFT" = inserted."IS_DRAFT",
      "FISCAL_YEAR" = inserted."FISCAL_YEAR",
      "AGREEMENT_DT" = inserted."AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT" = inserted."EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT" = inserted."EXPROP_VESTING_DT",
      "GENERATION_DT" = inserted."GENERATION_DT",
      "SPECIAL_INSTRUCTION" = inserted."SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS" = inserted."DETAILED_REMARKS",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COMPENSATION_REQUISITION
    inner join inserted
    on (PIMS_COMPENSATION_REQUISITION.COMPENSATION_REQUISITION_ID = inserted.COMPENSATION_REQUISITION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQPCHQ_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AQPCHQ_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQPCHQ_I_S_I_TR] ON PIMS_ACQ_PAYEE_CHEQUE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_PAYEE_CHEQUE ("ACQ_PAYEE_CHEQUE_ID",
      "ACQUISITION_PAYEE_ID",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQ_PAYEE_CHEQUE_ID",
      "ACQUISITION_PAYEE_ID",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TAKE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TAKE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TAKE_I_S_U_TR] ON PIMS_TAKE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_ID = deleted.TAKE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE
    set "TAKE_ID" = inserted."TAKE_ID",
      "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "TAKE_TYPE_CODE" = inserted."TAKE_TYPE_CODE",
      "TAKE_STATUS_TYPE_CODE" = inserted."TAKE_STATUS_TYPE_CODE",
      "TAKE_SITE_CONTAM_TYPE_CODE" = inserted."TAKE_SITE_CONTAM_TYPE_CODE",
      "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_NEW_RIGHT_OF_WAY" = inserted."IS_NEW_RIGHT_OF_WAY",
      "NEW_RIGHT_OF_WAY_AREA" = inserted."NEW_RIGHT_OF_WAY_AREA",
      "IS_STATUTORY_RIGHT_OF_WAY" = inserted."IS_STATUTORY_RIGHT_OF_WAY",
      "STATUTORY_RIGHT_OF_WAY_AREA" = inserted."STATUTORY_RIGHT_OF_WAY_AREA",
      "IS_LICENSE_TO_CONSTRUCT" = inserted."IS_LICENSE_TO_CONSTRUCT",
      "LICENSE_TO_CONSTRUCT_AREA" = inserted."LICENSE_TO_CONSTRUCT_AREA",
      "LTC_END_DT" = inserted."LTC_END_DT",
      "IS_LAND_ACT" = inserted."IS_LAND_ACT",
      "LAND_ACT_AREA" = inserted."LAND_ACT_AREA",
      "LAND_ACT_DESCRIPTION" = inserted."LAND_ACT_DESCRIPTION",
      "LAND_ACT_END_DT" = inserted."LAND_ACT_END_DT",
      "IS_SURPLUS" = inserted."IS_SURPLUS",
      "SURPLUS_AREA" = inserted."SURPLUS_AREA",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE
    inner join inserted
    on (PIMS_TAKE.TAKE_ID = inserted.TAKE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TAKE_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_TAKE_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TAKE_A_S_IUD_TR] ON PIMS_TAKE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_TAKE_HIST set END_DATE_HIST = @curr_date where TAKE_ID in (select TAKE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_TAKE_HIST ([TAKE_ID], [PROPERTY_ACQUISITION_FILE_ID], [TAKE_TYPE_CODE], [TAKE_STATUS_TYPE_CODE], [TAKE_SITE_CONTAM_TYPE_CODE], [AREA_UNIT_TYPE_CODE], [DESCRIPTION], [IS_NEW_RIGHT_OF_WAY], [NEW_RIGHT_OF_WAY_AREA], [IS_STATUTORY_RIGHT_OF_WAY], [STATUTORY_RIGHT_OF_WAY_AREA], [IS_LICENSE_TO_CONSTRUCT], [LICENSE_TO_CONSTRUCT_AREA], [LTC_END_DT], [IS_LAND_ACT], [LAND_ACT_AREA], [LAND_ACT_DESCRIPTION], [LAND_ACT_END_DT], [IS_SURPLUS], [SURPLUS_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _TAKE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [TAKE_ID], [PROPERTY_ACQUISITION_FILE_ID], [TAKE_TYPE_CODE], [TAKE_STATUS_TYPE_CODE], [TAKE_SITE_CONTAM_TYPE_CODE], [AREA_UNIT_TYPE_CODE], [DESCRIPTION], [IS_NEW_RIGHT_OF_WAY], [NEW_RIGHT_OF_WAY_AREA], [IS_STATUTORY_RIGHT_OF_WAY], [STATUTORY_RIGHT_OF_WAY_AREA], [IS_LICENSE_TO_CONSTRUCT], [LICENSE_TO_CONSTRUCT_AREA], [LTC_END_DT], [IS_LAND_ACT], [LAND_ACT_AREA], [LAND_ACT_DESCRIPTION], [LAND_ACT_END_DT], [IS_SURPLUS], [SURPLUS_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_TAKE_H_ID_SEQ]) as [_TAKE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_U_TR] ON PIMS_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ID = deleted.PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY
    set "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_MANAGER_ID" = inserted."PROPERTY_MANAGER_ID",
      "PROP_MGMT_ORG_ID" = inserted."PROP_MGMT_ORG_ID",
      "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE" = inserted."PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE" = inserted."PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE" = inserted."PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE" = inserted."SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE" = inserted."VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE" = inserted."VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE" = inserted."PPH_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE" = inserted."PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "PID" = inserted."PID",
      "PIN" = inserted."PIN",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "FILE_NUMBER_SUFFIX" = inserted."FILE_NUMBER_SUFFIX",
      "LAND_AREA" = inserted."LAND_AREA",
      "LAND_LEGAL_DESCRIPTION" = inserted."LAND_LEGAL_DESCRIPTION",
      "BOUNDARY" = inserted."BOUNDARY",
      "LOCATION" = inserted."LOCATION",
      "SURVEY_PLAN_NUMBER" = inserted."SURVEY_PLAN_NUMBER",
      "ENCUMBRANCE_REASON" = inserted."ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT" = inserted."SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE" = inserted."SURPLUS_DECLARATION_DATE",
      "NOTES" = inserted."NOTES",
      "MUNICIPAL_ZONING" = inserted."MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL" = inserted."IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT" = inserted."VOLUMETRIC_MEASUREMENT",
      "IS_OWNED" = inserted."IS_OWNED",
      "IS_PROPERTY_OF_INTEREST" = inserted."IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES" = inserted."IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE" = inserted."IS_SENSITIVE",
      "IS_PROVINCIAL_PUBLIC_HWY" = inserted."IS_PROVINCIAL_PUBLIC_HWY",
      "PPH_STATUS_UPDATE_USERID" = inserted."PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP" = inserted."PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID" = inserted."PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT" = inserted."IS_RWY_BELT_DOM_PATENT",
      "ZONING" = inserted."ZONING",
      "ZONING_POTENTIAL" = inserted."ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY
    inner join inserted
    on (PIMS_PROPERTY.PROPERTY_ID = inserted.PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTY_BOUNDARY_IDX
--PRINT N'Create index dbo.PRPRTY_BOUNDARY_IDX'
--GO
---- [PRPRTY_BOUNDARY_IDX] : Scripting for Spatial Index currently not supported
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Create index dbo.PRPRTY_LOCATION_IDX
--PRINT N'Create index dbo.PRPRTY_LOCATION_IDX'
--GO
---- [PRPRTY_LOCATION_IDX] : Scripting for Spatial Index currently not supported
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Create foreign key constraint dbo.PIM_H120CT_PIM_CRH120_FK
PRINT N'Create foreign key constraint dbo.PIM_H120CT_PIM_CRH120_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_H120]
	ADD CONSTRAINT [PIM_H120CT_PIM_CRH120_FK]
	FOREIGN KEY([H120_CATEGORY_ID])
	REFERENCES [dbo].[PIMS_H120_CATEGORY]([H120_CATEGORY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_DOCUMENT_FORMAT_TYPE
PRINT N'Drop table dbo.PIMS_DOCUMENT_FORMAT_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_DOCUMENT_FORMAT_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_DOCUMENT_CATEGORY_SUBTYPE_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_DOCUMENT_CATEGORY_SUBTYPE_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_DOCUMENT_CATEGORY_SUBTYPE_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_DOCUMENT_CATEGORY_TYPE
PRINT N'Drop table dbo.PIMS_DOCUMENT_CATEGORY_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_DOCUMENT_CATEGORY_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LAND_ACT_TYPE
PRINT N'Drop table dbo.PIMS_LAND_ACT_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LAND_ACT_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
