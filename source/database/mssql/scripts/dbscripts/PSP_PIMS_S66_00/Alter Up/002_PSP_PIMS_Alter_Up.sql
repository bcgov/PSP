-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Wed Oct 25 09:40:44 PDT 2023
-- Execute this script on:
-- 		PSP_PIMS_S65.00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S66.00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRODCT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRODCT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRODCT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TAKE_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_TAKE_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TAKE_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TAKE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TAKE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TAKE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TAKE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TAKE_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TAKE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRODCT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRODCT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRODCT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRODCT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRODCT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRODCT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PROJCT_PIM_PRODCT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PROJCT_PIM_PRODCT_FK'
GO
ALTER TABLE [dbo].[PIMS_PRODUCT]
	DROP CONSTRAINT IF EXISTS [PIM_PROJCT_PIM_PRODCT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRODCT_PARENT_PROJECT_ID_IDX
PRINT N'Drop index dbo.PRODCT_PARENT_PROJECT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PRODUCT].[PRODCT_PARENT_PROJECT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRPRCL_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRPRCL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_CLASSIFICATION_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRPRCL_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRPRCL_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRPRCL_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_CLASSIFICATION_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRPRCL_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROP_PROP_CLASSIFICATION_HIST
PRINT N'Drop table dbo.PIMS_PROP_PROP_CLASSIFICATION_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROP_PROP_CLASSIFICATION_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT
PRINT N'Create table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]  ( 
	[PROPERTY_ACTIVITY_DOCUMENT_ID] 	bigint NOT NULL CONSTRAINT [PRACDO_PROPERTY_ACTIVITY_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_DOCUMENT_ID_SEQ]),
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRACDO_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACDO_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACDO_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACDO_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACDO_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACDO_PK] PRIMARY KEY CLUSTERED([PROPERTY_ACTIVITY_DOCUMENT_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROJECT_PRODUCT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROJECT_PRODUCT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROJECT_PRODUCT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PRODUCT
PRINT N'Alter table dbo.PIMS_PRODUCT'
GO
ALTER TABLE [dbo].[PIMS_PRODUCT]
	DROP COLUMN IF EXISTS [PARENT_PROJECT_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROJECT_PRODUCT
PRINT N'Create table dbo.PIMS_PROJECT_PRODUCT'
GO
CREATE TABLE [dbo].[PIMS_PROJECT_PRODUCT]  ( 
	[PROJECT_PRODUCT_ID]            	bigint NOT NULL CONSTRAINT [PRJPRD_PROJECT_PRODUCT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_PRODUCT_ID_SEQ]),
	[PROJECT_ID]                    	bigint NOT NULL,
	[PRODUCT_ID]                    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRJPRD_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRJPRD_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRJPRD_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRJPRD_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRJPRD_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRJPRD_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRJPRD_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRJPRD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRJPRD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRJPRD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRJPRD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRJPRD_PK] PRIMARY KEY CLUSTERED([PROJECT_PRODUCT_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PRODUCT_HIST
PRINT N'Alter table dbo.PIMS_PRODUCT_HIST'
GO
ALTER TABLE [dbo].[PIMS_PRODUCT_HIST]
	DROP COLUMN IF EXISTS [PARENT_PROJECT_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROJECT_PRODUCT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROJECT_PRODUCT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROJECT_PRODUCT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROJECT_PRODUCT_HIST
PRINT N'Create table dbo.PIMS_PROJECT_PRODUCT_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROJECT_PRODUCT_HIST]  ( 
	[_PROJECT_PRODUCT_HIST_ID]      	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_PRODUCT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROJECT_PRODUCT_ID]            	bigint NOT NULL,
	[PROJECT_ID]                    	bigint NOT NULL,
	[PRODUCT_ID]                    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRJPRD_H_PK] PRIMARY KEY CLUSTERED([_PROJECT_PRODUCT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRJPRD_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRJPRD_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PRODUCT_HIST]
	ADD CONSTRAINT [PIMS_PRJPRD_H_UK]
	UNIQUE ([_PROJECT_PRODUCT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE
PRINT N'Alter table dbo.PIMS_TAKE'
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE.IS_NEW_RIGHT_OF_WAY' , N'IS_NEW_HIGHWAY_DEDICATION', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE] DROP CONSTRAINT IF EXISTS [TAKE_IS_NEW_RIGHT_OF_WAY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE] ADD CONSTRAINT [TAKE_IS_NEW_HIGHWAY_DEDICATION_DEF] DEFAULT (CONVERT([bit],(0))) FOR [IS_NEW_HIGHWAY_DEDICATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE.NEW_RIGHT_OF_WAY_AREA' , N'NEW_HIGHWAY_DEDICATION_AREA', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE.IS_STATUTORY_RIGHT_OF_WAY' , N'IS_NEW_INTEREST_IN_SRW', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE] DROP CONSTRAINT IF EXISTS [TAKE_IS_STATUTORY_RIGHT_OF_WAY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE] ADD CONSTRAINT [TAKE_IS_NEW_INTEREST_IN_SRW_DEF] DEFAULT (CONVERT([bit],(0))) FOR [IS_NEW_INTEREST_IN_SRW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE.IS_LICENSE_TO_CONSTRUCT' , N'IS_NEW_LICENSE_TO_CONSTRUCT', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE] DROP CONSTRAINT IF EXISTS [TAKE_IS_LICENSE_TO_CONSTRUCT_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE] ADD CONSTRAINT [TAKE_IS_NEW_LICENSE_TO_CONSTRUCT_DEF] DEFAULT (CONVERT([bit],(0))) FOR [IS_NEW_LICENSE_TO_CONSTRUCT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE.IS_LAND_ACT' , N'IS_NEW_LAND_ACT', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE] DROP CONSTRAINT IF EXISTS [TAKE_IS_LAND_ACT_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE] ADD CONSTRAINT [TAKE_IS_NEW_LAND_ACT_DEF] DEFAULT (CONVERT([bit],(0))) FOR [IS_NEW_LAND_ACT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE.IS_SURPLUS' , N'IS_THERE_SURPLUS', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE] DROP CONSTRAINT IF EXISTS [TAKE_IS_SURPLUS_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE] ADD CONSTRAINT [TAKE_IS_THERE_SURPLUS_DEF] DEFAULT (CONVERT([bit],(0))) FOR [IS_THERE_SURPLUS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE]
	ADD [IS_ACQUIRED_FOR_INVENTORY] bit NOT NULL CONSTRAINT [TAKE_IS_ACQUIRED_FOR_INVENTORY_DEF] DEFAULT (CONVERT([bit],(0))), 
	[SRW_END_DT] date NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this being acquired for inventory? (default = TRUE)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'IS_ACQUIRED_FOR_INVENTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'End date of the statutory right-of-way.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'SRW_END_DT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST
PRINT N'Create table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST]  ( 
	[_PROPERTY_ACTIVITY_DOCUMENT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[PROPERTY_ACTIVITY_DOCUMENT_ID]      	bigint NOT NULL,
	[PIMS_PROPERTY_ACTIVITY_ID]          	bigint NOT NULL,
	[DOCUMENT_ID]                        	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRACDO_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_ACTIVITY_DOCUMENT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRACDO_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRACDO_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_PRACDO_H_UK]
	UNIQUE ([_PROPERTY_ACTIVITY_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE_HIST
PRINT N'Alter table dbo.PIMS_TAKE_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE_HIST.IS_NEW_RIGHT_OF_WAY' , N'IS_NEW_HIGHWAY_DEDICATION', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
--ALTER TABLE [dbo].[PIMS_TAKE_HIST] ADD DEFAULT CONVERT([bit],(0)) FOR [IS_NEW_HIGHWAY_DEDICATION]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE_HIST.NEW_RIGHT_OF_WAY_AREA' , N'NEW_HIGHWAY_DEDICATION_AREA', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE_HIST.IS_STATUTORY_RIGHT_OF_WAY' , N'IS_NEW_INTEREST_IN_SRW', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
--ALTER TABLE [dbo].[PIMS_TAKE_HIST] ADD DEFAULT CONVERT([bit],(0)) FOR [IS_NEW_INTEREST_IN_SRW]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE_HIST.IS_LICENSE_TO_CONSTRUCT' , N'IS_NEW_LICENSE_TO_CONSTRUCT', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
--ALTER TABLE [dbo].[PIMS_TAKE_HIST] ADD DEFAULT CONVERT([bit],(0)) FOR [IS_NEW_LICENSE_TO_CONSTRUCT]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE_HIST.IS_LAND_ACT' , N'IS_NEW_LAND_ACT', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
--ALTER TABLE [dbo].[PIMS_TAKE_HIST] ADD DEFAULT CONVERT([bit],(0)) FOR [IS_NEW_LAND_ACT]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE_HIST.IS_SURPLUS' , N'IS_THERE_SURPLUS', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
--ALTER TABLE [dbo].[PIMS_TAKE_HIST] ADD DEFAULT CONVERT([bit],(0)) FOR [IS_THERE_SURPLUS]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO
ALTER TABLE [dbo].[PIMS_TAKE_HIST]
	ADD [IS_ACQUIRED_FOR_INVENTORY] bit NOT NULL DEFAULT CONVERT([bit],(1)), 
	[SRW_END_DT] date NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_TAKE_HIST' 
                   AND col.NAME = 'IS_ACQUIRED_FOR_INVENTORY')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_TAKE_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]([PIMS_PROPERTY_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRJPRD_PRODUCT_ID_IDX
PRINT N'Create index dbo.PRJPRD_PRODUCT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRJPRD_PRODUCT_ID_IDX]
	ON [dbo].[PIMS_PROJECT_PRODUCT]([PRODUCT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRJPRD_PROJECT_ID_IDX
PRINT N'Create index dbo.PRJPRD_PROJECT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRJPRD_PROJECT_ID_IDX]
	ON [dbo].[PIMS_PROJECT_PRODUCT]([PROJECT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACDO_DOCUMENT_ID_IDX
PRINT N'Create index dbo.PRACDO_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACDO_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_PRACDO_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_PRACDO_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_PRACDO_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACDO_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACDO_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRACDO_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PROJCT_PIM_PRJPRD_FK
PRINT N'Create foreign key constraint dbo.PIM_PROJCT_PIM_PRJPRD_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PRODUCT]
	ADD CONSTRAINT [PIM_PROJCT_PIM_PRJPRD_FK]
	FOREIGN KEY([PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRODCT_PIM_PRJPRD_FK
PRINT N'Create foreign key constraint dbo.PIM_PRODCT_PIM_PRJPRD_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PRODUCT]
	ADD CONSTRAINT [PIM_PRODCT_PIM_PRJPRD_FK]
	FOREIGN KEY([PRODUCT_ID])
	REFERENCES [dbo].[PIMS_PRODUCT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRODCT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRODCT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRODCT_A_S_IUD_TR] ON PIMS_PRODUCT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PRODUCT_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PRODUCT_HIST ([ID], [CODE], [DESCRIPTION], [START_DATE], [COST_ESTIMATE], [COST_ESTIMATE_DATE], [OBJECTIVE], [SCOPE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PRODUCT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [CODE], [DESCRIPTION], [START_DATE], [COST_ESTIMATE], [COST_ESTIMATE_DATE], [OBJECTIVE], [SCOPE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PRODUCT_H_ID_SEQ]) as [_PRODUCT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJPRD_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRJPRD_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJPRD_A_S_IUD_TR] ON PIMS_PROJECT_PRODUCT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_PRODUCT_HIST set END_DATE_HIST = @curr_date where PROJECT_PRODUCT_ID in (select PROJECT_PRODUCT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_PRODUCT_HIST ([PROJECT_PRODUCT_ID], [PROJECT_ID], [PRODUCT_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_PRODUCT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_PRODUCT_ID], [PROJECT_ID], [PRODUCT_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_PRODUCT_H_ID_SEQ]) as [_PROJECT_PRODUCT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRODCT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRODCT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRODCT_I_S_I_TR] ON PIMS_PRODUCT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PRODUCT ("ID",
      "CODE",
      "DESCRIPTION",
      "START_DATE",
      "COST_ESTIMATE",
      "COST_ESTIMATE_DATE",
      "OBJECTIVE",
      "SCOPE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "CODE",
      "DESCRIPTION",
      "START_DATE",
      "COST_ESTIMATE",
      "COST_ESTIMATE_DATE",
      "OBJECTIVE",
      "SCOPE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TAKE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_TAKE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TAKE_I_S_I_TR] ON PIMS_TAKE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE ("TAKE_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "TAKE_TYPE_CODE",
      "TAKE_STATUS_TYPE_CODE",
      "TAKE_SITE_CONTAM_TYPE_CODE",
      "AREA_UNIT_TYPE_CODE",
      "LAND_ACT_TYPE_CODE",
      "DESCRIPTION",
      "IS_NEW_HIGHWAY_DEDICATION",
      "NEW_HIGHWAY_DEDICATION_AREA",
      "IS_ACQUIRED_FOR_INVENTORY",
      "IS_NEW_INTEREST_IN_SRW",
      "STATUTORY_RIGHT_OF_WAY_AREA",
      "SRW_END_DT",
      "IS_NEW_LICENSE_TO_CONSTRUCT",
      "LICENSE_TO_CONSTRUCT_AREA",
      "LTC_END_DT",
      "IS_NEW_LAND_ACT",
      "LAND_ACT_AREA",
      "LAND_ACT_END_DT",
      "IS_THERE_SURPLUS",
      "SURPLUS_AREA",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "TAKE_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "TAKE_TYPE_CODE",
      "TAKE_STATUS_TYPE_CODE",
      "TAKE_SITE_CONTAM_TYPE_CODE",
      "AREA_UNIT_TYPE_CODE",
      "LAND_ACT_TYPE_CODE",
      "DESCRIPTION",
      "IS_NEW_HIGHWAY_DEDICATION",
      "NEW_HIGHWAY_DEDICATION_AREA",
      "IS_ACQUIRED_FOR_INVENTORY",
      "IS_NEW_INTEREST_IN_SRW",
      "STATUTORY_RIGHT_OF_WAY_AREA",
      "SRW_END_DT",
      "IS_NEW_LICENSE_TO_CONSTRUCT",
      "LICENSE_TO_CONSTRUCT_AREA",
      "LTC_END_DT",
      "IS_NEW_LAND_ACT",
      "LAND_ACT_AREA",
      "LAND_ACT_END_DT",
      "IS_THERE_SURPLUS",
      "SURPLUS_AREA",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACDO_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRACDO_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACDO_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACTIVITY_DOCUMENT_ID in (select PROPERTY_ACTIVITY_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST ([PROPERTY_ACTIVITY_DOCUMENT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACTIVITY_DOCUMENT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACDO_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACDO_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACDO_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY_DOCUMENT ("PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJPRD_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRJPRD_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJPRD_I_S_I_TR] ON PIMS_PROJECT_PRODUCT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_PRODUCT ("PROJECT_PRODUCT_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_PRODUCT_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TAKE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TAKE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TAKE_I_S_U_TR] ON PIMS_TAKE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_ID = deleted.TAKE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE
    set "TAKE_ID" = inserted."TAKE_ID",
      "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "TAKE_TYPE_CODE" = inserted."TAKE_TYPE_CODE",
      "TAKE_STATUS_TYPE_CODE" = inserted."TAKE_STATUS_TYPE_CODE",
      "TAKE_SITE_CONTAM_TYPE_CODE" = inserted."TAKE_SITE_CONTAM_TYPE_CODE",
      "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "LAND_ACT_TYPE_CODE" = inserted."LAND_ACT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_NEW_HIGHWAY_DEDICATION" = inserted."IS_NEW_HIGHWAY_DEDICATION",
      "NEW_HIGHWAY_DEDICATION_AREA" = inserted."NEW_HIGHWAY_DEDICATION_AREA",
      "IS_ACQUIRED_FOR_INVENTORY" = inserted."IS_ACQUIRED_FOR_INVENTORY",
      "IS_NEW_INTEREST_IN_SRW" = inserted."IS_NEW_INTEREST_IN_SRW",
      "STATUTORY_RIGHT_OF_WAY_AREA" = inserted."STATUTORY_RIGHT_OF_WAY_AREA",
      "SRW_END_DT" = inserted."SRW_END_DT",
      "IS_NEW_LICENSE_TO_CONSTRUCT" = inserted."IS_NEW_LICENSE_TO_CONSTRUCT",
      "LICENSE_TO_CONSTRUCT_AREA" = inserted."LICENSE_TO_CONSTRUCT_AREA",
      "LTC_END_DT" = inserted."LTC_END_DT",
      "IS_NEW_LAND_ACT" = inserted."IS_NEW_LAND_ACT",
      "LAND_ACT_AREA" = inserted."LAND_ACT_AREA",
      "LAND_ACT_END_DT" = inserted."LAND_ACT_END_DT",
      "IS_THERE_SURPLUS" = inserted."IS_THERE_SURPLUS",
      "SURPLUS_AREA" = inserted."SURPLUS_AREA",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE
    inner join inserted
    on (PIMS_TAKE.TAKE_ID = inserted.TAKE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJPRD_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRJPRD_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJPRD_I_S_U_TR] ON PIMS_PROJECT_PRODUCT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_PRODUCT_ID = deleted.PROJECT_PRODUCT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_PRODUCT
    set "PROJECT_PRODUCT_ID" = inserted."PROJECT_PRODUCT_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_PRODUCT
    inner join inserted
    on (PIMS_PROJECT_PRODUCT.PROJECT_PRODUCT_ID = inserted.PROJECT_PRODUCT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TAKE_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_TAKE_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TAKE_A_S_IUD_TR] ON PIMS_TAKE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_TAKE_HIST set END_DATE_HIST = @curr_date where TAKE_ID in (select TAKE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_TAKE_HIST ([TAKE_ID], [PROPERTY_ACQUISITION_FILE_ID], [TAKE_TYPE_CODE], [TAKE_STATUS_TYPE_CODE], [TAKE_SITE_CONTAM_TYPE_CODE], [AREA_UNIT_TYPE_CODE], [LAND_ACT_TYPE_CODE], [DESCRIPTION], [IS_NEW_HIGHWAY_DEDICATION], [NEW_HIGHWAY_DEDICATION_AREA], [IS_ACQUIRED_FOR_INVENTORY], [IS_NEW_INTEREST_IN_SRW], [STATUTORY_RIGHT_OF_WAY_AREA], [SRW_END_DT], [IS_NEW_LICENSE_TO_CONSTRUCT], [LICENSE_TO_CONSTRUCT_AREA], [LTC_END_DT], [IS_NEW_LAND_ACT], [LAND_ACT_AREA], [LAND_ACT_END_DT], [IS_THERE_SURPLUS], [SURPLUS_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _TAKE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [TAKE_ID], [PROPERTY_ACQUISITION_FILE_ID], [TAKE_TYPE_CODE], [TAKE_STATUS_TYPE_CODE], [TAKE_SITE_CONTAM_TYPE_CODE], [AREA_UNIT_TYPE_CODE], [LAND_ACT_TYPE_CODE], [DESCRIPTION], [IS_NEW_HIGHWAY_DEDICATION], [NEW_HIGHWAY_DEDICATION_AREA], [IS_ACQUIRED_FOR_INVENTORY], [IS_NEW_INTEREST_IN_SRW], [STATUTORY_RIGHT_OF_WAY_AREA], [SRW_END_DT], [IS_NEW_LICENSE_TO_CONSTRUCT], [LICENSE_TO_CONSTRUCT_AREA], [LTC_END_DT], [IS_NEW_LAND_ACT], [LAND_ACT_AREA], [LAND_ACT_END_DT], [IS_THERE_SURPLUS], [SURPLUS_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_TAKE_H_ID_SEQ]) as [_TAKE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRODCT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRODCT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRODCT_I_S_U_TR] ON PIMS_PRODUCT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PRODUCT
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "START_DATE" = inserted."START_DATE",
      "COST_ESTIMATE" = inserted."COST_ESTIMATE",
      "COST_ESTIMATE_DATE" = inserted."COST_ESTIMATE_DATE",
      "OBJECTIVE" = inserted."OBJECTIVE",
      "SCOPE" = inserted."SCOPE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PRODUCT
    inner join inserted
    on (PIMS_PRODUCT.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACDO_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACDO_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACDO_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACTIVITY_DOCUMENT_ID = deleted.PROPERTY_ACTIVITY_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY_DOCUMENT
    set "PROPERTY_ACTIVITY_DOCUMENT_ID" = inserted."PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY_DOCUMENT
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY_DOCUMENT.PROPERTY_ACTIVITY_DOCUMENT_ID = inserted.PROPERTY_ACTIVITY_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
