-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Mon Dec 18 12:37:26 GMT-08:00 2023
-- Execute this script on:
-- 		PSP_PIMS_S67.00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S70.00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_FILE_NO_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_FILE_NO_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_NO_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_CHECKLIST_ITEM_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_CHECKLIST_ITEM_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_FILE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_FILE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_FILE_STATUS_TYPE
PRINT N'Create table dbo.PIMS_DISPOSITION_FILE_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_STATUS_TYPE]  ( 
	[DISPOSITION_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                      	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                    	int NULL,
	[IS_DISABLED]                      	bit NOT NULL CONSTRAINT [DSPFST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL CONSTRAINT [DSPFST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [DSPFST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [DSPFST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [DSPFST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [DSPFST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPFST_PK] PRIMARY KEY CLUSTERED([DISPOSITION_FILE_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_FUNDING_TYPE
PRINT N'Create table dbo.PIMS_DISPOSITION_FUNDING_TYPE'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_FUNDING_TYPE]  ( 
	[DISPOSITION_FUNDING_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                  	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                	int NULL,
	[IS_DISABLED]                  	bit NOT NULL CONSTRAINT [DSPFTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]   	bigint NOT NULL CONSTRAINT [DSPFTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPFTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPFTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPFTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPFTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPFTY_PK] PRIMARY KEY CLUSTERED([DISPOSITION_FUNDING_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the disposition funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FUNDING_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_INITIATING_DOC_TYPE
PRINT N'Create table dbo.PIMS_DISPOSITION_INITIATING_DOC_TYPE'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_INITIATING_DOC_TYPE]  ( 
	[DISPOSITION_INITIATING_DOC_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                         	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                       	int NULL,
	[IS_DISABLED]                         	bit NOT NULL CONSTRAINT [DSPIDT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]          	bigint NOT NULL CONSTRAINT [DSPIDT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]                 	datetime NOT NULL CONSTRAINT [DSPIDT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                    	nvarchar(30) NOT NULL CONSTRAINT [DSPIDT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [DSPIDT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [DSPIDT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPIDT_PK] PRIMARY KEY CLUSTERED([DISPOSITION_INITIATING_DOC_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion initiating document type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_INITIATING_DOC_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion initiating document type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion initiating document type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_STATUS_TYPE
PRINT N'Create table dbo.PIMS_DISPOSITION_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_STATUS_TYPE]  ( 
	[DISPOSITION_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                 	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]               	int NULL,
	[IS_DISABLED]                 	bit NOT NULL CONSTRAINT [DSPSTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NOT NULL CONSTRAINT [DSPSTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [DSPSTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [DSPSTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [DSPSTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [DSPSTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPSTY_PK] PRIMARY KEY CLUSTERED([DISPOSITION_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_TYPE
PRINT N'Create table dbo.PIMS_DISPOSITION_TYPE'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_TYPE]  ( 
	[DISPOSITION_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [DSPTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [DSPTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [DSPTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [DSPTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [DSPTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [DSPTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPTYP_PK] PRIMARY KEY CLUSTERED([DISPOSITION_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the disposition type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DSP_INITIATING_BRANCH_TYPE
PRINT N'Create table dbo.PIMS_DSP_INITIATING_BRANCH_TYPE'
GO
CREATE TABLE [dbo].[PIMS_DSP_INITIATING_BRANCH_TYPE]  ( 
	[DSP_INITIATING_BRANCH_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                  	int NULL,
	[IS_DISABLED]                    	bit NOT NULL CONSTRAINT [DSPIBT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [DSPIBT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [DSPIBT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [DSPIBT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [DSPIBT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [DSPIBT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPIBT_PK] PRIMARY KEY CLUSTERED([DSP_INITIATING_BRANCH_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion initiating branch.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'DSP_INITIATING_BRANCH_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion initiating branch.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion inititating branch.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DSP_PHYS_FILE_STATUS_TYPE
PRINT N'Create table dbo.PIMS_DSP_PHYS_FILE_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_DSP_PHYS_FILE_STATUS_TYPE]  ( 
	[DSP_PHYS_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [DSPPFS_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [DSPPFS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPPFS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPPFS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPPFS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPPFS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPPFS_PK] PRIMARY KEY CLUSTERED([DSP_PHYS_FILE_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion physical file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DSP_PHYS_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion physical file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion physical file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_FILE
PRINT N'Create table dbo.PIMS_DISPOSITION_FILE'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE]  ( 
	[DISPOSITION_FILE_ID]                 	bigint NOT NULL CONSTRAINT [DISPFL_DISPOSITION_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_ID_SEQ]),
	[DISPOSITION_STATUS_TYPE_CODE]        	nvarchar(20) NOT NULL CONSTRAINT [DISPFL_DISPOSITION_STATUS_TYPE_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[DISPOSITION_FILE_STATUS_TYPE_CODE]   	nvarchar(20) NOT NULL CONSTRAINT [DISPFL_DISPOSITION_FILE_STATUS_TYPE_CODE_DEF]  DEFAULT ('ACTIVE'),
	[DISPOSITION_TYPE_CODE]               	nvarchar(20) NOT NULL,
	[DISPOSITION_FUNDING_TYPE_CODE]       	nvarchar(20) NULL,
	[DISPOSITION_INITIATING_DOC_TYPE_CODE]	nvarchar(20) NULL,
	[DSP_PHYS_FILE_STATUS_TYPE_CODE]      	nvarchar(20) NULL,
	[DSP_INITIATING_BRANCH_TYPE_CODE]     	nvarchar(20) NULL,
	[REGION_CODE]                         	smallint NOT NULL,
	[FILE_NUMBER]                         	nvarchar(20) NULL,
	[FILE_NAME]                           	nvarchar(200) NULL,
	[FILE_REFERENCE]                      	nvarchar(200) NULL,
	[OTHER_DISPOSITION_TYPE]              	nvarchar(200) NULL,
	[OTHER_INITIATING_DOC_TYPE]           	nvarchar(200) NULL,
	[ASSIGNED_DT]                         	date NULL,
	[COMPLETED_DT]                        	date NULL,
	[INITIATING_DOCUMENT_DT]              	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]          	bigint NOT NULL CONSTRAINT [DISPFL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]                	datetime NOT NULL CONSTRAINT [DISPFL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                   	nvarchar(30) NOT NULL CONSTRAINT [DISPFL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]                	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]           	nvarchar(30) NOT NULL CONSTRAINT [DISPFL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DISPFL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DISPFL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL CONSTRAINT [DISPFL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]                 	datetime NOT NULL CONSTRAINT [DISPFL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                    	nvarchar(30) NOT NULL CONSTRAINT [DISPFL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [DISPFL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [DISPFL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DISPFL_PK] PRIMARY KEY CLUSTERED([DISPOSITION_FILE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the disposition type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the disposition funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FUNDING_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion initiating document type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_INITIATING_DOC_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion physical file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DSP_PHYS_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion initiating branch.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DSP_INITIATING_BRANCH_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the Ministry region code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'REGION_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The formatted disposition file number, seeded from the PIMS_DISPOSITION_FILE_NO_SEQ sequence.  Sample formats are D-1, D-2, D-3, etc.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'FILE_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'FILE_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Provide available reference number for historic program or file number (e.g.? RAEG, Acquisition File, etc.).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'FILE_REFERENCE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Required if "Other" disposition type selected.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'OTHER_DISPOSITION_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Required if "Other" disposition initiating document type selected.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'OTHER_INITIATING_DOC_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the disposition file was assigned.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'ASSIGNED_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the disposition file was completed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'COMPLETED_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Signoff date of the initiating document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'INITIATING_DOCUMENT_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity containing information regarding an disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DSP_CHKLST_ITEM_STATUS_TYPE
PRINT N'Create table dbo.PIMS_DSP_CHKLST_ITEM_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_DSP_CHKLST_ITEM_STATUS_TYPE]  ( 
	[DSP_CHKLST_ITEM_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                     	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                   	int NULL,
	[IS_DISABLED]                     	bit NOT NULL CONSTRAINT [DSPCST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL CONSTRAINT [DSPCST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [DSPCST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [DSPCST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [DSPCST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [DSPCST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPCST_PK] PRIMARY KEY CLUSTERED([DSP_CHKLST_ITEM_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the disposition checklist item status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DSP_CHKLST_ITEM_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the disposition checklist item status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Tables that contains the codes and associated descriptions of the disposition checklist item status types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DSP_CHKLST_SECTION_TYPE
PRINT N'Create table dbo.PIMS_DSP_CHKLST_SECTION_TYPE'
GO
CREATE TABLE [dbo].[PIMS_DSP_CHKLST_SECTION_TYPE]  ( 
	[DSP_CHKLST_SECTION_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                 	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]               	int NULL,
	[EFFECTIVE_DATE]              	date NOT NULL CONSTRAINT [DSPSCT_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                 	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NOT NULL CONSTRAINT [DSPSCT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [DSPSCT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [DSPSCT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [DSPSCT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [DSPSCT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPSCT_PK] PRIMARY KEY CLUSTERED([DSP_CHKLST_SECTION_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Disposition checklist section code value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DSP_CHKLST_SECTION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Disposition checklist section descriptive text presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies the order that the disposition checklist sections are presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the disposition checklist section is able to be presented to the user via the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the disposition checklist section is removed from the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the disposition checklist sctions that are presented to the user through dynamically building the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DSP_CHKLST_ITEM_TYPE
PRINT N'Create table dbo.PIMS_DSP_CHKLST_ITEM_TYPE'
GO
CREATE TABLE [dbo].[PIMS_DSP_CHKLST_ITEM_TYPE]  ( 
	[DSP_CHKLST_ITEM_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DSP_CHKLST_SECTION_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                 	nvarchar(200) NOT NULL,
	[HINT]                        	nvarchar(200) NULL,
	[IS_REQUIRED]                 	bit NULL CONSTRAINT [DSPCIT_IS_REQUIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]               	int NULL,
	[EFFECTIVE_DATE]              	date NOT NULL CONSTRAINT [DSPCIT_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                 	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NOT NULL CONSTRAINT [DSPCIT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [DSPCIT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [DSPCIT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [DSPCIT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [DSPCIT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPCIT_PK] PRIMARY KEY CLUSTERED([DSP_CHKLST_ITEM_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Disposition checklist item code value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DSP_CHKLST_ITEM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Disposition Section to which the item belongs.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DSP_CHKLST_SECTION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Disposition Checklist item descriptive text presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Disposition Checklist item descriptive tooltip presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'HINT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the disposition checklist item is a required field.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'IS_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies the order that the disposition checklist items are presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the disposition checklist item is able to be presented to the user via the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the disposition checklist item is removed from the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the disposition checklist items that are presented to the user through dynamically building the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_CHECKLIST_ITEM
PRINT N'Create table dbo.PIMS_DISPOSITION_CHECKLIST_ITEM'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]  ( 
	[DISPOSITION_CHECKLIST_ITEM_ID]   	bigint NOT NULL CONSTRAINT [DSPCKI_DISPOSITION_CHECKLIST_ITEM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_CHECKLIST_ITEM_ID_SEQ]),
	[DISPOSITION_FILE_ID]             	bigint NOT NULL,
	[DSP_CHKLST_ITEM_TYPE_CODE]       	nvarchar(20) NULL,
	[DSP_CHKLST_ITEM_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL CONSTRAINT [DSPCKI_DSP_CHKLST_ITEM_STATUS_TYPE_CODE_DEF]  DEFAULT ('INCOMP'),
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL CONSTRAINT [DSPCKI_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [DSPCKI_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [DSPCKI_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL CONSTRAINT [DSPCKI_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [DSPCKI_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [DSPCKI_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL CONSTRAINT [DSPCKI_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [DSPCKI_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [DSPCKI_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [DSPCKI_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [DSPCKI_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPCKI_PK] PRIMARY KEY CLUSTERED([DISPOSITION_CHECKLIST_ITEM_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DISPOSITION_CHECKLIST_ITEM_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the checklist item.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DSP_CHKLST_ITEM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the checklist item status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DSP_CHKLST_ITEM_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_SALE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_SALE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_SALE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_SALE
PRINT N'Create table dbo.PIMS_DISPOSITION_SALE'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_SALE]  ( 
	[DISPOSITION_SALE_ID]           	bigint NOT NULL CONSTRAINT [DSPSAL_DISPOSITION_SALE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_SALE_ID_SEQ]),
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[FINAL_CONDITION_REMOVAL_DT]    	date NULL,
	[SALE_COMPLETION_DT]            	date NULL,
	[SALE_FISCAL_YEAR]              	smallint NULL,
	[SALE_FINAL_AMT]                	money NULL,
	[REALTOR_COMMISSION_AMT]        	money NULL,
	[IS_GST_REQUIRED]               	bit NOT NULL CONSTRAINT [DSPSAL_IS_GST_REQUIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[GST_COLLECTED_AMT]             	money NULL,
	[NET_BOOK_AMT]                  	money NULL,
	[TOTAL_COST_AMT]                	money NULL,
	[SPP_AMT]                       	money NULL,
	[REMEDIATION_AMT]               	money NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [DSPSAL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPSAL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPSAL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPSAL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPSAL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPSAL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPSAL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPSAL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPSAL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPSAL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPSAL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPSAL_PK] PRIMARY KEY CLUSTERED([DISPOSITION_SALE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_SALE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the dispostion file' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'For general sales, provide the date when the last condition(s) are to be removed. For road closures enter the condition precedent date.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'FINAL_CONDITION_REMOVAL_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date the disposition was completed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'SALE_COMPLETION_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The fiscal year in which the sale was completed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'SALE_FISCAL_YEAR'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Value of the final sale.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'SALE_FINAL_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Amount paid to the realtor managing the sale.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'REALTOR_COMMISSION_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is GST required for this sale?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'IS_GST_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST collected is calculated based upon Final Sales Price.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'GST_COLLECTED_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net book value of the disposition sale.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'NET_BOOK_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The sum of all costs incurred to prepare property for sale (e.g., appraisal, environmental and other consultants, legal fees, First Nations accommodation, etc.).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'TOTAL_COST_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Surplus Property Program (SPP) fee to be paid to CITZ.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'SPP_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Cost of propery remediation.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'REMEDIATION_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity containing information regarding an disposition sale.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_PURCHASER_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_PURCHASER_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_PURCHASER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_PURCHASER
PRINT N'Create table dbo.PIMS_DISPOSITION_PURCHASER'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_PURCHASER]  ( 
	[DISPOSITION_PURCHASER_ID]      	bigint NOT NULL CONSTRAINT [DSPPUR_DISPOSITION_PURCHASER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_PURCHASER_ID_SEQ]),
	[DISPOSITION_SALE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [DSPPUR_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [DSPPUR_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPPUR_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPPUR_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPPUR_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPPUR_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPPUR_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPPUR_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPPUR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPPUR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPPUR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPPUR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPPUR_PK] PRIMARY KEY CLUSTERED([DISPOSITION_PURCHASER_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'DISPOSITION_PURCHASER_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the dispostion sale.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'DISPOSITION_SALE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the individual purchasing the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the organization purchasing the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'ORGANIZATION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary contact person for the organization' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'PRIMARY_CONTACT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the purchaser of the disposition.  There may be multiple purchasers and the purchasers include organizations and individuals.  If an organization is a purchaser, a primary contact person must be provided.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.DSPPUR_%column%_TCC
PRINT N'Create check constraint dbo.DSPPUR_%column%_TCC'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_PURCHASER]
	ADD CONSTRAINT [DSPPUR_%column%_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_FILE_TEAM_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_FILE_TEAM_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_TEAM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DSP_FL_TEAM_PROFILE_TYPE
PRINT N'Create table dbo.PIMS_DSP_FL_TEAM_PROFILE_TYPE'
GO
CREATE TABLE [dbo].[PIMS_DSP_FL_TEAM_PROFILE_TYPE]  ( 
	[DSP_FL_TEAM_PROFILE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                  	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                	int NULL,
	[IS_DISABLED]                  	bit NOT NULL CONSTRAINT [DSPFTP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]   	bigint NOT NULL CONSTRAINT [DSPFTP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPFTP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPFTP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPFTP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPFTP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPFTP_PK] PRIMARY KEY CLUSTERED([DSP_FL_TEAM_PROFILE_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the disposition file profile type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DSP_FL_TEAM_PROFILE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion file profile type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_FILE_TEAM
PRINT N'Create table dbo.PIMS_DISPOSITION_FILE_TEAM'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM]  ( 
	[DISPOSITION_FILE_TEAM_ID]      	bigint NOT NULL CONSTRAINT [DSPFTM_DISPOSITION_FILE_TEAM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_TEAM_ID_SEQ]),
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[DSP_FL_TEAM_PROFILE_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [DSPFTM_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPFTM_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPFTM_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPFTM_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPFTM_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPFTM_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPFTM_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPFTM_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPFTM_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPFTM_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPFTM_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPFTM_PK] PRIMARY KEY CLUSTERED([DISPOSITION_FILE_TEAM_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_TEAM_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the dispostion file' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the organization.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'ORGANIZATION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the primary contact person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'PRIMARY_CONTACT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the disposition file profile type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DSP_FL_TEAM_PROFILE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table to associate an acquisition file to a person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.DSPFTM_DSP_FILE_PROFILE_TUC
PRINT N'Create unique constraint dbo.DSPFTM_DSP_FILE_PROFILE_TUC'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM]
	ADD CONSTRAINT [DSPFTM_DSP_FILE_PROFILE_TUC]
	UNIQUE ([DISPOSITION_FILE_ID], [DSP_FL_TEAM_PROFILE_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DSP_PURCH_AGENT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DSP_PURCH_AGENT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DSP_PURCH_AGENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DSP_PURCH_AGENT
PRINT N'Create table dbo.PIMS_DSP_PURCH_AGENT'
GO
CREATE TABLE [dbo].[PIMS_DSP_PURCH_AGENT]  ( 
	[DSP_PURCH_AGENT_ID]            	bigint NOT NULL CONSTRAINT [DSPPAG_DSP_PURCH_AGENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DSP_PURCH_AGENT_ID_SEQ]),
	[DISPOSITION_SALE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [DSPPAG_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [DSPPAG_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPPAG_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPPAG_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPPAG_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPPAG_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPPAG_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPPAG_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPPAG_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPPAG_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPPAG_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPPAG_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPPAG_PK] PRIMARY KEY CLUSTERED([DSP_PURCH_AGENT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'DSP_PURCH_AGENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the dispostion sale.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'DISPOSITION_SALE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the individual agent for the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the organization agent for the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'ORGANIZATION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary contact person for the organization.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'PRIMARY_CONTACT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the agent associated with the sale of the disposition.  The agent may be an organizations or an individual.  If an organization is the agent, a primary contact person must be provided.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.DSPPAG_%column%_TCC
PRINT N'Create check constraint dbo.DSPPAG_%column%_TCC'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT]
	ADD CONSTRAINT [DSPPAG_%column%_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_APPRAISAL_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_APPRAISAL_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_APPRAISAL_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_APPRAISAL
PRINT N'Create table dbo.PIMS_DISPOSITION_APPRAISAL'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_APPRAISAL]  ( 
	[DISPOSITION_APPRAISAL_ID]      	bigint NOT NULL CONSTRAINT [DSPAPP_DISPOSITION_APPRAISAL_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_APPRAISAL_ID_SEQ]),
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[APPRAISED_AMT]                 	money NULL,
	[APPRAISAL_DT]                  	date NULL,
	[BCA_VALUE_AMT]                 	money NULL,
	[BCA_ROLL_YEAR]                 	smallint NULL,
	[LIST_PRICE_AMT]                	money NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [DSPAPP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPAPP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPAPP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPAPP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPAPP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPAPP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPAPP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPAPP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPAPP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPAPP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPAPP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPAPP_PK] PRIMARY KEY CLUSTERED([DISPOSITION_APPRAISAL_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'DISPOSITION_APPRAISAL_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Appraised value of the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APPRAISED_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of the disposition file appraisal.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APPRAISAL_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'BC Assessment value of the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'BCA_VALUE_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'BC Assessment roll year for the disposition file appraisal.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'BCA_ROLL_YEAR'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Listed disposition file selling price.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'LIST_PRICE_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity containing the appraisal and assessment information about the disposition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_FILE_NOTE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_FILE_NOTE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_NOTE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_FILE_NOTE
PRINT N'Create table dbo.PIMS_DISPOSITION_FILE_NOTE'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_NOTE]  ( 
	[DISPOSITION_FILE_NOTE_ID]      	bigint NOT NULL CONSTRAINT [DSPNOT_DISPOSITION_FILE_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_NOTE_ID_SEQ]),
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [DSPNOT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPNOT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPNOT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPNOT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPNOT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPNOT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPNOT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPNOT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPNOT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPNOT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPNOT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPNOT_PK] PRIMARY KEY CLUSTERED([DISPOSITION_FILE_NOTE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_NOTE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the associated disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the associated note.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'NOTE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.DSPNOT_DISPOSITION_NOTE_TUC
PRINT N'Create unique constraint dbo.DSPNOT_DISPOSITION_NOTE_TUC'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_NOTE]
	ADD CONSTRAINT [DSPNOT_DISPOSITION_NOTE_TUC]
	UNIQUE ([DISPOSITION_FILE_ID], [NOTE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_FILE_PROPERTY_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_FILE_PROPERTY_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_FILE_PROPERTY
PRINT N'Create table dbo.PIMS_DISPOSITION_FILE_PROPERTY'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY]  ( 
	[DISPOSITION_FILE_PROPERTY_ID]  	bigint NOT NULL CONSTRAINT [DSPPRP_DISPOSITION_FILE_PROPERTY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_PROPERTY_ID_SEQ]),
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [DSPPRP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPPRP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPPRP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPPRP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPPRP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPPRP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPPRP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPPRP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPPRP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPPRP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPPRP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPPRP_PK] PRIMARY KEY CLUSTERED([DISPOSITION_FILE_PROPERTY_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary key of the associated disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary key of the associated property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity to associate the properties involved with the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.DSPPRP_DISPOSITION_PROPERTY_TUC
PRINT N'Create unique constraint dbo.DSPPRP_DISPOSITION_PROPERTY_TUC'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY]
	ADD CONSTRAINT [DSPPRP_DISPOSITION_PROPERTY_TUC]
	UNIQUE ([PROPERTY_ID], [DISPOSITION_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DSP_PURCH_SOLICITOR_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DSP_PURCH_SOLICITOR_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DSP_PURCH_SOLICITOR_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DSP_PURCH_SOLICITOR
PRINT N'Create table dbo.PIMS_DSP_PURCH_SOLICITOR'
GO
CREATE TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR]  ( 
	[DSP_PURCH_SOLICITOR_ID]        	bigint NOT NULL CONSTRAINT [DSPPSL_DSP_PURCH_SOLICITOR_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DSP_PURCH_SOLICITOR_ID_SEQ]),
	[DISPOSITION_SALE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [DSPPSL_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [DSPPSL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPPSL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPPSL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPPSL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPPSL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPPSL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPPSL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPPSL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPPSL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPPSL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPPSL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPPSL_PK] PRIMARY KEY CLUSTERED([DSP_PURCH_SOLICITOR_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'DSP_PURCH_SOLICITOR_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the dispostion sale.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'DISPOSITION_SALE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the individual solicitor for the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the organization solicitor for the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'ORGANIZATION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary contact person for the organization.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'PRIMARY_CONTACT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the solicitor associated with the sale of the disposition.  The solicitor may be an organizations or an individual.  If an organization is the solicitor, a primary contact person must be provided.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.DSPPSL_%column%_TCC
PRINT N'Create check constraint dbo.DSPPSL_%column%_TCC'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR]
	ADD CONSTRAINT [DSPPSL_%column%_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_FILE_DOCUMENT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_FILE_DOCUMENT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_FILE_DOCUMENT
PRINT N'Create table dbo.PIMS_DISPOSITION_FILE_DOCUMENT'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT]  ( 
	[DISPOSITION_FILE_DOCUMENT_ID]  	bigint NOT NULL CONSTRAINT [DSPDOC_DISPOSITION_FILE_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_DOCUMENT_ID_SEQ]),
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPDOC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPDOC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPDOC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPDOC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [DSPDOC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPDOC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPDOC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPDOC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPDOC_PK] PRIMARY KEY CLUSTERED([DISPOSITION_FILE_DOCUMENT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.DSPDOC_DISPOSITION_DOCUMENT_TUC
PRINT N'Create unique constraint dbo.DSPDOC_DISPOSITION_DOCUMENT_TUC'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT]
	ADD CONSTRAINT [DSPDOC_DISPOSITION_DOCUMENT_TUC]
	UNIQUE ([DISPOSITION_FILE_ID], [DOCUMENT_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_OFFER_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_OFFER_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_OFFER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_OFFER_STATUS_TYPE
PRINT N'Create table dbo.PIMS_DISPOSITION_OFFER_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_OFFER_STATUS_TYPE]  ( 
	[DISPOSITION_OFFER_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                       	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                     	int NULL,
	[IS_DISABLED]                       	bit NOT NULL CONSTRAINT [DSPOFT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL CONSTRAINT [DSPOFT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [DSPOFT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [DSPOFT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPOFT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPOFT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPOFT_PK] PRIMARY KEY CLUSTERED([DISPOSITION_OFFER_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion offer status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_OFFER_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion offer status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion offer status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_OFFER
PRINT N'Create table dbo.PIMS_DISPOSITION_OFFER'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_OFFER]  ( 
	[DISPOSITION_OFFER_ID]              	bigint NOT NULL CONSTRAINT [DSPOFR_DISPOSITION_OFFER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_OFFER_ID_SEQ]),
	[DISPOSITION_FILE_ID]               	bigint NOT NULL,
	[DISPOSITION_OFFER_STATUS_TYPE_CODE]	nvarchar(20) NULL,
	[OFFER_NAME]                        	nvarchar(1000) NOT NULL,
	[OFFER_DT]                          	date NOT NULL,
	[OFFER_EXPIRY_DT]                   	date NULL,
	[OFFER_AMT]                         	money NOT NULL,
	[OFFER_NOTE]                        	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL CONSTRAINT [DSPOFR_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [DSPOFR_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [DSPOFR_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL CONSTRAINT [DSPOFR_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [DSPOFR_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [DSPOFR_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL CONSTRAINT [DSPOFR_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [DSPOFR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [DSPOFR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPOFR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPOFR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPOFR_PK] PRIMARY KEY CLUSTERED([DISPOSITION_OFFER_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'DISPOSITION_OFFER_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the dispostion file' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion offer status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'DISPOSITION_OFFER_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The name(s) associated with this disposition offer.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'OFFER_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date the disposition offer was made.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'OFFER_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date the disposition offer expires.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'OFFER_EXPIRY_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The monetary value of the disposition offer.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'OFFER_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Provide any additional details such as offer terms or conditions, and any commentary on why the offer was accepted/countered/rejected.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'OFFER_NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity containing information regarding an disposition offer.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_FILE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_FILE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_FILE_HIST
PRINT N'Create table dbo.PIMS_DISPOSITION_FILE_HIST'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_HIST]  ( 
	[_DISPOSITION_FILE_HIST_ID]           	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                 	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                       	datetime NULL,
	[DISPOSITION_FILE_ID]                 	bigint NOT NULL,
	[DISPOSITION_STATUS_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[DISPOSITION_FILE_STATUS_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DISPOSITION_TYPE_CODE]               	nvarchar(20) NOT NULL,
	[DISPOSITION_FUNDING_TYPE_CODE]       	nvarchar(20) NULL,
	[DISPOSITION_INITIATING_DOC_TYPE_CODE]	nvarchar(20) NULL,
	[DSP_PHYS_FILE_STATUS_TYPE_CODE]      	nvarchar(20) NULL,
	[DSP_INITIATING_BRANCH_TYPE_CODE]     	nvarchar(20) NULL,
	[REGION_CODE]                         	smallint NOT NULL,
	[FILE_NUMBER]                         	nvarchar(20) NULL,
	[FILE_NAME]                           	nvarchar(200) NULL,
	[FILE_REFERENCE]                      	nvarchar(200) NULL,
	[OTHER_DISPOSITION_TYPE]              	nvarchar(200) NULL,
	[OTHER_INITIATING_DOC_TYPE]           	nvarchar(200) NULL,
	[ASSIGNED_DT]                         	date NULL,
	[COMPLETED_DT]                        	date NULL,
	[INITIATING_DOCUMENT_DT]              	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]          	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[APP_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                 	datetime NOT NULL,
	[DB_CREATE_USERID]                    	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]               	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DISPFL_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_FILE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_DISPFL_H_UK
PRINT N'Create unique constraint dbo.PIMS_DISPFL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_HIST]
	ADD CONSTRAINT [PIMS_DISPFL_H_UK]
	UNIQUE ([_DISPOSITION_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_FILE_PROPERTY_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_FILE_PROPERTY_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_FILE_PROPERTY_HIST
PRINT N'Create table dbo.PIMS_DISPOSITION_FILE_PROPERTY_HIST'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY_HIST]  ( 
	[_DISPOSITION_FILE_PROPERTY_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_PROPERTY_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[DISPOSITION_FILE_PROPERTY_ID]      	bigint NOT NULL,
	[DISPOSITION_FILE_ID]               	bigint NOT NULL,
	[PROPERTY_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPPRP_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_FILE_PROPERTY_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_DSPPRP_H_UK
PRINT N'Create unique constraint dbo.PIMS_DSPPRP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY_HIST]
	ADD CONSTRAINT [PIMS_DSPPRP_H_UK]
	UNIQUE ([_DISPOSITION_FILE_PROPERTY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_SALE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_SALE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_SALE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_SALE_HIST
PRINT N'Create table dbo.PIMS_DISPOSITION_SALE_HIST'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_SALE_HIST]  ( 
	[_DISPOSITION_SALE_HIST_ID]     	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_SALE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DISPOSITION_SALE_ID]           	bigint NOT NULL,
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[FINAL_CONDITION_REMOVAL_DT]    	date NULL,
	[SALE_COMPLETION_DT]            	date NULL,
	[SALE_FISCAL_YEAR]              	smallint NULL,
	[SALE_FINAL_AMT]                	money NULL,
	[REALTOR_COMMISSION_AMT]        	money NULL,
	[IS_GST_REQUIRED]               	bit NOT NULL,
	[GST_COLLECTED_AMT]             	money NULL,
	[NET_BOOK_AMT]                  	money NULL,
	[TOTAL_COST_AMT]                	money NULL,
	[SPP_AMT]                       	money NULL,
	[REMEDIATION_AMT]               	money NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPSAL_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_SALE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_DSPSAL_H_UK
PRINT N'Create unique constraint dbo.PIMS_DSPSAL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_SALE_HIST]
	ADD CONSTRAINT [PIMS_DSPSAL_H_UK]
	UNIQUE ([_DISPOSITION_SALE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_OFFER_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_OFFER_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_OFFER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_OFFER_HIST
PRINT N'Create table dbo.PIMS_DISPOSITION_OFFER_HIST'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_OFFER_HIST]  ( 
	[_DISPOSITION_OFFER_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_OFFER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[DISPOSITION_OFFER_ID]              	bigint NOT NULL,
	[DISPOSITION_FILE_ID]               	bigint NOT NULL,
	[DISPOSITION_OFFER_STATUS_TYPE_CODE]	nvarchar(20) NULL,
	[OFFER_NAME]                        	nvarchar(1000) NOT NULL,
	[OFFER_DT]                          	date NOT NULL,
	[OFFER_EXPIRY_DT]                   	date NULL,
	[OFFER_AMT]                         	money NOT NULL,
	[OFFER_NOTE]                        	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPOFR_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_OFFER_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_DSPOFR_H_UK
PRINT N'Create unique constraint dbo.PIMS_DSPOFR_H_UK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_OFFER_HIST]
	ADD CONSTRAINT [PIMS_DSPOFR_H_UK]
	UNIQUE ([_DISPOSITION_OFFER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_APPRAISAL_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_APPRAISAL_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_APPRAISAL_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_APPRAISAL_HIST
PRINT N'Create table dbo.PIMS_DISPOSITION_APPRAISAL_HIST'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_APPRAISAL_HIST]  ( 
	[_DISPOSITION_APPRAISAL_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_APPRAISAL_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DISPOSITION_APPRAISAL_ID]      	bigint NOT NULL,
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[APPRAISED_AMT]                 	money NULL,
	[APPRAISAL_DT]                  	date NULL,
	[BCA_VALUE_AMT]                 	money NULL,
	[BCA_ROLL_YEAR]                 	smallint NULL,
	[LIST_PRICE_AMT]                	money NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPAPP_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_APPRAISAL_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_DSPAPP_H_UK
PRINT N'Create unique constraint dbo.PIMS_DSPAPP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_APPRAISAL_HIST]
	ADD CONSTRAINT [PIMS_DSPAPP_H_UK]
	UNIQUE ([_DISPOSITION_APPRAISAL_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_PURCHASER_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_PURCHASER_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_PURCHASER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_PURCHASER_HIST
PRINT N'Create table dbo.PIMS_DISPOSITION_PURCHASER_HIST'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_PURCHASER_HIST]  ( 
	[_DISPOSITION_PURCHASER_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_PURCHASER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DISPOSITION_PURCHASER_ID]      	bigint NOT NULL,
	[DISPOSITION_SALE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPPUR_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_PURCHASER_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_DSPPUR_H_UK
PRINT N'Create unique constraint dbo.PIMS_DSPPUR_H_UK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_PURCHASER_HIST]
	ADD CONSTRAINT [PIMS_DSPPUR_H_UK]
	UNIQUE ([_DISPOSITION_PURCHASER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_CHECKLIST_ITEM_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_CHECKLIST_ITEM_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_CHECKLIST_ITEM_HIST
PRINT N'Create table dbo.PIMS_DISPOSITION_CHECKLIST_ITEM_HIST'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM_HIST]  ( 
	[_DISPOSITION_CHECKLIST_ITEM_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_CHECKLIST_ITEM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[DISPOSITION_CHECKLIST_ITEM_ID]      	bigint NOT NULL,
	[DISPOSITION_FILE_ID]                	bigint NOT NULL,
	[DSP_CHKLST_ITEM_TYPE_CODE]          	nvarchar(20) NULL,
	[DSP_CHKLST_ITEM_STATUS_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPCKI_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_CHECKLIST_ITEM_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_DSPCKI_H_UK
PRINT N'Create unique constraint dbo.PIMS_DSPCKI_H_UK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM_HIST]
	ADD CONSTRAINT [PIMS_DSPCKI_H_UK]
	UNIQUE ([_DISPOSITION_CHECKLIST_ITEM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_FILE_TEAM_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_FILE_TEAM_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_TEAM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_FILE_TEAM_HIST
PRINT N'Create table dbo.PIMS_DISPOSITION_FILE_TEAM_HIST'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM_HIST]  ( 
	[_DISPOSITION_FILE_TEAM_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_TEAM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DISPOSITION_FILE_TEAM_ID]      	bigint NOT NULL,
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[DSP_FL_TEAM_PROFILE_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPFTM_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_FILE_TEAM_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_DSPFTM_H_UK
PRINT N'Create unique constraint dbo.PIMS_DSPFTM_H_UK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM_HIST]
	ADD CONSTRAINT [PIMS_DSPFTM_H_UK]
	UNIQUE ([_DISPOSITION_FILE_TEAM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DSP_PURCH_SOLICITOR_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DSP_PURCH_SOLICITOR_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DSP_PURCH_SOLICITOR_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DSP_PURCH_SOLICITOR_HIST
PRINT N'Create table dbo.PIMS_DSP_PURCH_SOLICITOR_HIST'
GO
CREATE TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR_HIST]  ( 
	[_DSP_PURCH_SOLICITOR_HIST_ID]  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DSP_PURCH_SOLICITOR_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DSP_PURCH_SOLICITOR_ID]        	bigint NOT NULL,
	[DISPOSITION_SALE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPPSL_H_PK] PRIMARY KEY CLUSTERED([_DSP_PURCH_SOLICITOR_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_DSPPSL_H_UK
PRINT N'Create unique constraint dbo.PIMS_DSPPSL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR_HIST]
	ADD CONSTRAINT [PIMS_DSPPSL_H_UK]
	UNIQUE ([_DSP_PURCH_SOLICITOR_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DSP_PURCH_AGENT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DSP_PURCH_AGENT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DSP_PURCH_AGENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DSP_PURCH_AGENT_HIST
PRINT N'Create table dbo.PIMS_DSP_PURCH_AGENT_HIST'
GO
CREATE TABLE [dbo].[PIMS_DSP_PURCH_AGENT_HIST]  ( 
	[_DSP_PURCH_AGENT_HIST_ID]      	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DSP_PURCH_AGENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DSP_PURCH_AGENT_ID]            	bigint NOT NULL,
	[DISPOSITION_SALE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPPAG_H_PK] PRIMARY KEY CLUSTERED([_DSP_PURCH_AGENT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_DSPPAG_H_UK
PRINT N'Create unique constraint dbo.PIMS_DSPPAG_H_UK'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT_HIST]
	ADD CONSTRAINT [PIMS_DSPPAG_H_UK]
	UNIQUE ([_DSP_PURCH_AGENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_FILE_DOCUMENT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_FILE_DOCUMENT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_FILE_DOCUMENT_HIST
PRINT N'Create table dbo.PIMS_DISPOSITION_FILE_DOCUMENT_HIST'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT_HIST]  ( 
	[_DISPOSITION_FILE_DOCUMENT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[DISPOSITION_FILE_DOCUMENT_ID]      	bigint NOT NULL,
	[DISPOSITION_FILE_ID]               	bigint NOT NULL,
	[DOCUMENT_ID]                       	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPDOC_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_FILE_DOCUMENT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_DSPDOC_H_UK
PRINT N'Create unique constraint dbo.PIMS_DSPDOC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_DSPDOC_H_UK]
	UNIQUE ([_DISPOSITION_FILE_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_DISPOSITION_FILE_NOTE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_DISPOSITION_FILE_NOTE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_NOTE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_DISPOSITION_FILE_NOTE_HIST
PRINT N'Create table dbo.PIMS_DISPOSITION_FILE_NOTE_HIST'
GO
CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_NOTE_HIST]  ( 
	[_DISPOSITION_FILE_NOTE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_NOTE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DISPOSITION_FILE_NOTE_ID]      	bigint NOT NULL,
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPNOT_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_FILE_NOTE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_DSPNOT_H_UK
PRINT N'Create unique constraint dbo.PIMS_DSPNOT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_NOTE_HIST]
	ADD CONSTRAINT [PIMS_DSPNOT_H_UK]
	UNIQUE ([_DISPOSITION_FILE_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPCKI_DISPOSITION_FILE_ID_IDX
PRINT N'Create index dbo.DSPCKI_DISPOSITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPCKI_DISPOSITION_FILE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]([DISPOSITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPSAL_DISPOSITION_FILE_ID_IDX
PRINT N'Create index dbo.DSPSAL_DISPOSITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPSAL_DISPOSITION_FILE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_SALE]([DISPOSITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DISPFL_DSP_PHYS_FILE_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.DISPFL_DSP_PHYS_FILE_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DISPFL_DSP_PHYS_FILE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([DSP_PHYS_FILE_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPPUR_DISPOSITION_SALE_ID_IDX
PRINT N'Create index dbo.DSPPUR_DISPOSITION_SALE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPPUR_DISPOSITION_SALE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_PURCHASER]([DISPOSITION_SALE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPFTM_PERSON_ID_IDX
PRINT N'Create index dbo.DSPFTM_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPFTM_PERSON_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_TEAM]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPFTM_ORGANIZATION_ID_IDX
PRINT N'Create index dbo.DSPFTM_ORGANIZATION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPFTM_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_TEAM]([ORGANIZATION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPPAG_ORGANIZATION_ID_IDX
PRINT N'Create index dbo.DSPPAG_ORGANIZATION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPPAG_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_DSP_PURCH_AGENT]([ORGANIZATION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPAPP_DISPOSITION_FILE_ID_IDX
PRINT N'Create index dbo.DSPAPP_DISPOSITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPAPP_DISPOSITION_FILE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_APPRAISAL]([DISPOSITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPNOT_DISPOSITION_FILE_ID_IDX
PRINT N'Create index dbo.DSPNOT_DISPOSITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPNOT_DISPOSITION_FILE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_NOTE]([DISPOSITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPCKI_DSP_CHKLST_ITEM_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.DSPCKI_DSP_CHKLST_ITEM_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPCKI_DSP_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]([DSP_CHKLST_ITEM_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DISPFL_DISPOSITION_FUNDING_TYPE_CODE_IDX
PRINT N'Create index dbo.DISPFL_DISPOSITION_FUNDING_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DISPFL_DISPOSITION_FUNDING_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FUNDING_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPPRP_PROPERTY_ID_IDX
PRINT N'Create index dbo.DSPPRP_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPPRP_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_PROPERTY]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPFTM_DSP_FL_TEAM_PROFILE_TYPE_CODE_IDX
PRINT N'Create index dbo.DSPFTM_DSP_FL_TEAM_PROFILE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPFTM_DSP_FL_TEAM_PROFILE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_TEAM]([DSP_FL_TEAM_PROFILE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPPAG_DISPOSITION_SALE_ID_IDX
PRINT N'Create index dbo.DSPPAG_DISPOSITION_SALE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPPAG_DISPOSITION_SALE_ID_IDX]
	ON [dbo].[PIMS_DSP_PURCH_AGENT]([DISPOSITION_SALE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DISPFL_DSP_INITIATING_BRANCH_TYPE_CODE_IDX
PRINT N'Create index dbo.DISPFL_DSP_INITIATING_BRANCH_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DISPFL_DSP_INITIATING_BRANCH_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([DSP_INITIATING_BRANCH_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DISPFL_REGION_CODE_IDX
PRINT N'Create index dbo.DISPFL_REGION_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DISPFL_REGION_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([REGION_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPPSL_PERSON_ID_IDX
PRINT N'Create index dbo.DSPPSL_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPPSL_PERSON_ID_IDX]
	ON [dbo].[PIMS_DSP_PURCH_SOLICITOR]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPPUR_PERSON_ID_IDX
PRINT N'Create index dbo.DSPPUR_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPPUR_PERSON_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_PURCHASER]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPPUR_PRIMARY_CONTACT_ID_IDX
PRINT N'Create index dbo.DSPPUR_PRIMARY_CONTACT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPPUR_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_PURCHASER]([PRIMARY_CONTACT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPDOC_DISPOSITION_FILE_ID_IDX
PRINT N'Create index dbo.DSPDOC_DISPOSITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPDOC_DISPOSITION_FILE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT]([DISPOSITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPFTM_PRIMARY_CONTACT_ID_IDX
PRINT N'Create index dbo.DSPFTM_PRIMARY_CONTACT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPFTM_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_TEAM]([PRIMARY_CONTACT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPNOT_NOTE_ID_IDX
PRINT N'Create index dbo.DSPNOT_NOTE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPNOT_NOTE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_NOTE]([NOTE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DISPFL_DISPOSITION_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.DISPFL_DISPOSITION_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DISPFL_DISPOSITION_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DISPFL_DISPOSITION_FILE_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.DISPFL_DISPOSITION_FILE_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DISPFL_DISPOSITION_FILE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPCKI_DSP_CHKLST_ITEM_TYPE_CODE_IDX
PRINT N'Create index dbo.DSPCKI_DSP_CHKLST_ITEM_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPCKI_DSP_CHKLST_ITEM_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]([DSP_CHKLST_ITEM_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPOFR_DISPOSITION_OFFER_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.DSPOFR_DISPOSITION_OFFER_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPOFR_DISPOSITION_OFFER_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_OFFER]([DISPOSITION_OFFER_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPPAG_PERSON_ID_IDX
PRINT N'Create index dbo.DSPPAG_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPPAG_PERSON_ID_IDX]
	ON [dbo].[PIMS_DSP_PURCH_AGENT]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPPRP_DISPOSITION_FILE_ID_IDX
PRINT N'Create index dbo.DSPPRP_DISPOSITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPPRP_DISPOSITION_FILE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_PROPERTY]([DISPOSITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPOFR_DISPOSITION_FILE_ID_IDX
PRINT N'Create index dbo.DSPOFR_DISPOSITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPOFR_DISPOSITION_FILE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_OFFER]([DISPOSITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPPUR_ORGANIZATION_ID_IDX
PRINT N'Create index dbo.DSPPUR_ORGANIZATION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPPUR_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_PURCHASER]([ORGANIZATION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPPSL_DISPOSITION_SALE_ID_IDX
PRINT N'Create index dbo.DSPPSL_DISPOSITION_SALE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPPSL_DISPOSITION_SALE_ID_IDX]
	ON [dbo].[PIMS_DSP_PURCH_SOLICITOR]([DISPOSITION_SALE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPCIT_DSP_CHKLST_SECTION_TYPE_CODE_IDX
PRINT N'Create index dbo.DSPCIT_DSP_CHKLST_SECTION_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPCIT_DSP_CHKLST_SECTION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DSP_CHKLST_ITEM_TYPE]([DSP_CHKLST_SECTION_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPPSL_PRIMARY_CONTACT_ID_IDX
PRINT N'Create index dbo.DSPPSL_PRIMARY_CONTACT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPPSL_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_DSP_PURCH_SOLICITOR]([PRIMARY_CONTACT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique index dbo.DSPCKI_DISPOSITION_FILE_ID_UK_IDX
PRINT N'Create unique index dbo.DSPCKI_DISPOSITION_FILE_ID_UK_IDX'
GO
CREATE UNIQUE NONCLUSTERED INDEX [DSPCKI_DISPOSITION_FILE_ID_UK_IDX]
	ON [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]([DISPOSITION_FILE_ID], [DSP_CHKLST_ITEM_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPPSL_ORGANIZATION_ID_IDX
PRINT N'Create index dbo.DSPPSL_ORGANIZATION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPPSL_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_DSP_PURCH_SOLICITOR]([ORGANIZATION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPPAG_PRIMARY_CONTACT_ID_IDX
PRINT N'Create index dbo.DSPPAG_PRIMARY_CONTACT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPPAG_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_DSP_PURCH_AGENT]([PRIMARY_CONTACT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DISPFL_DISPOSITION_INITIATING_DOC_TYPE_CODE_IDX
PRINT N'Create index dbo.DISPFL_DISPOSITION_INITIATING_DOC_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DISPFL_DISPOSITION_INITIATING_DOC_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_INITIATING_DOC_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DISPFL_DISPOSITION_TYPE_CODE_IDX
PRINT N'Create index dbo.DISPFL_DISPOSITION_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DISPFL_DISPOSITION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPFTM_DISPOSITION_FILE_ID_IDX
PRINT N'Create index dbo.DSPFTM_DISPOSITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPFTM_DISPOSITION_FILE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_TEAM]([DISPOSITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPDOC_DOCUMENT_ID_IDX
PRINT N'Create index dbo.DSPDOC_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPTYP_PIM_DISPFL_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPTYP_PIM_DISPFL_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_DSPTYP_PIM_DISPFL_FK]
	FOREIGN KEY([DISPOSITION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DISPOSITION_TYPE]([DISPOSITION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPFST_PIM_DISPFL_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPFST_PIM_DISPFL_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_DSPFST_PIM_DISPFL_FK]
	FOREIGN KEY([DISPOSITION_FILE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE_STATUS_TYPE]([DISPOSITION_FILE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPIDT_PIM_DISPFL_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPIDT_PIM_DISPFL_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_DSPIDT_PIM_DISPFL_FK]
	FOREIGN KEY([DISPOSITION_INITIATING_DOC_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DISPOSITION_INITIATING_DOC_TYPE]([DISPOSITION_INITIATING_DOC_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPPFS_PIM_DISPFL_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPPFS_PIM_DISPFL_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_DSPPFS_PIM_DISPFL_FK]
	FOREIGN KEY([DSP_PHYS_FILE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DSP_PHYS_FILE_STATUS_TYPE]([DSP_PHYS_FILE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPIBT_PIM_DISPFL_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPIBT_PIM_DISPFL_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_DSPIBT_PIM_DISPFL_FK]
	FOREIGN KEY([DSP_INITIATING_BRANCH_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DSP_INITIATING_BRANCH_TYPE]([DSP_INITIATING_BRANCH_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPSTY_PIM_DISPFL_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPSTY_PIM_DISPFL_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_DSPSTY_PIM_DISPFL_FK]
	FOREIGN KEY([DISPOSITION_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DISPOSITION_STATUS_TYPE]([DISPOSITION_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_REGION_PIM_DISPFL_FK
PRINT N'Create foreign key constraint dbo.PIM_REGION_PIM_DISPFL_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_REGION_PIM_DISPFL_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPFTY_PIM_DISPFL_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPFTY_PIM_DISPFL_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_DSPFTY_PIM_DISPFL_FK]
	FOREIGN KEY([DISPOSITION_FUNDING_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DISPOSITION_FUNDING_TYPE]([DISPOSITION_FUNDING_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPSCT_PIM_DSPCIT_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPSCT_PIM_DSPCIT_FK'
GO
ALTER TABLE [dbo].[PIMS_DSP_CHKLST_ITEM_TYPE]
	ADD CONSTRAINT [PIM_DSPSCT_PIM_DSPCIT_FK]
	FOREIGN KEY([DSP_CHKLST_SECTION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DSP_CHKLST_SECTION_TYPE]([DSP_CHKLST_SECTION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPCST_PIM_DSPCKI_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPCST_PIM_DSPCKI_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]
	ADD CONSTRAINT [PIM_DSPCST_PIM_DSPCKI_FK]
	FOREIGN KEY([DSP_CHKLST_ITEM_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DSP_CHKLST_ITEM_STATUS_TYPE]([DSP_CHKLST_ITEM_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPCIT_PIM_DSPCKI_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPCIT_PIM_DSPCKI_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]
	ADD CONSTRAINT [PIM_DSPCIT_PIM_DSPCKI_FK]
	FOREIGN KEY([DSP_CHKLST_ITEM_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DSP_CHKLST_ITEM_TYPE]([DSP_CHKLST_ITEM_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DISPFL_PIM_DSPCKI_FK
PRINT N'Create foreign key constraint dbo.PIM_DISPFL_PIM_DSPCKI_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]
	ADD CONSTRAINT [PIM_DISPFL_PIM_DSPCKI_FK]
	FOREIGN KEY([DISPOSITION_FILE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DISPFL_PIM_DSPSAL_FK
PRINT N'Create foreign key constraint dbo.PIM_DISPFL_PIM_DSPSAL_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_SALE]
	ADD CONSTRAINT [PIM_DISPFL_PIM_DSPSAL_FK]
	FOREIGN KEY([DISPOSITION_FILE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_DSPPUR_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_DSPPUR_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_PURCHASER]
	ADD CONSTRAINT [PIM_ORG_PIM_DSPPUR_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_DSPPUR_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_DSPPUR_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_PURCHASER]
	ADD CONSTRAINT [PIM_PERSON_PIM_DSPPUR_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPSAL_PIM_DSPPUR_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPSAL_PIM_DSPPUR_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_PURCHASER]
	ADD CONSTRAINT [PIM_DSPSAL_PIM_DSPPUR_FK]
	FOREIGN KEY([DISPOSITION_SALE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_SALE]([DISPOSITION_SALE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_DSPPUR_CONTACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_DSPPUR_CONTACT_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_PURCHASER]
	ADD CONSTRAINT [PIM_PERSON_PIM_DSPPUR_CONTACT_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_DSPFTM_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_DSPFTM_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM]
	ADD CONSTRAINT [PIM_PERSON_PIM_DSPFTM_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_DSPFTM_CONTACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_DSPFTM_CONTACT_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM]
	ADD CONSTRAINT [PIM_PERSON_PIM_DSPFTM_CONTACT_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_DSPFTM_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_DSPFTM_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM]
	ADD CONSTRAINT [PIM_ORG_PIM_DSPFTM_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DISPFL_PIM_DSPFTM_FK
PRINT N'Create foreign key constraint dbo.PIM_DISPFL_PIM_DSPFTM_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM]
	ADD CONSTRAINT [PIM_DISPFL_PIM_DSPFTM_FK]
	FOREIGN KEY([DISPOSITION_FILE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPFTP_PIM_DSPFTM_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPFTP_PIM_DSPFTM_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM]
	ADD CONSTRAINT [PIM_DSPFTP_PIM_DSPFTM_FK]
	FOREIGN KEY([DSP_FL_TEAM_PROFILE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DSP_FL_TEAM_PROFILE_TYPE]([DSP_FL_TEAM_PROFILE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_DSPPAG_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_DSPPAG_FK'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT]
	ADD CONSTRAINT [PIM_ORG_PIM_DSPPAG_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPSAL_PIM_DSPPAG_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPSAL_PIM_DSPPAG_FK'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT]
	ADD CONSTRAINT [PIM_DSPSAL_PIM_DSPPAG_FK]
	FOREIGN KEY([DISPOSITION_SALE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_SALE]([DISPOSITION_SALE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_DSPPAG_CONTACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_DSPPAG_CONTACT_FK'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT]
	ADD CONSTRAINT [PIM_PERSON_PIM_DSPPAG_CONTACT_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_DSPPAG_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_DSPPAG_FK'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT]
	ADD CONSTRAINT [PIM_PERSON_PIM_DSPPAG_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DISPFL_PIM_DSPAPP_FK
PRINT N'Create foreign key constraint dbo.PIM_DISPFL_PIM_DSPAPP_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_APPRAISAL]
	ADD CONSTRAINT [PIM_DISPFL_PIM_DSPAPP_FK]
	FOREIGN KEY([DISPOSITION_FILE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DISPFL_PIM_DSPNOT_FK
PRINT N'Create foreign key constraint dbo.PIM_DISPFL_PIM_DSPNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_NOTE]
	ADD CONSTRAINT [PIM_DISPFL_PIM_DSPNOT_FK]
	FOREIGN KEY([DISPOSITION_FILE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_NOTE_PIM_DSPNOT_FK
PRINT N'Create foreign key constraint dbo.PIM_NOTE_PIM_DSPNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_NOTE]
	ADD CONSTRAINT [PIM_NOTE_PIM_DSPNOT_FK]
	FOREIGN KEY([NOTE_ID])
	REFERENCES [dbo].[PIMS_NOTE]([NOTE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DISPFL_PIM_DSPPRP_FK
PRINT N'Create foreign key constraint dbo.PIM_DISPFL_PIM_DSPPRP_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY]
	ADD CONSTRAINT [PIM_DISPFL_PIM_DSPPRP_FK]
	FOREIGN KEY([DISPOSITION_FILE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_DSPPRP_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_DSPPRP_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_DSPPRP_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPSAL_PIM_DSPPSL_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPSAL_PIM_DSPPSL_FK'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR]
	ADD CONSTRAINT [PIM_DSPSAL_PIM_DSPPSL_FK]
	FOREIGN KEY([DISPOSITION_SALE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_SALE]([DISPOSITION_SALE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_DSPPSL_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_DSPPSL_FK'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR]
	ADD CONSTRAINT [PIM_ORG_PIM_DSPPSL_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_DSPPSL_CONTACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_DSPPSL_CONTACT_FK'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR]
	ADD CONSTRAINT [PIM_PERSON_PIM_DSPPSL_CONTACT_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_DSPPSL_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_DSPPSL_FK'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR]
	ADD CONSTRAINT [PIM_PERSON_PIM_DSPPSL_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DISPFL_PIM_DSPDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DISPFL_PIM_DSPDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_DISPFL_PIM_DSPDOC_FK]
	FOREIGN KEY([DISPOSITION_FILE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_DSPDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_DSPDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_DSPDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DISPFL_PIM_DSPOFR_FK
PRINT N'Create foreign key constraint dbo.PIM_DISPFL_PIM_DSPOFR_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_OFFER]
	ADD CONSTRAINT [PIM_DISPFL_PIM_DSPOFR_FK]
	FOREIGN KEY([DISPOSITION_FILE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPOFT_PIM_DSPOFR_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPOFT_PIM_DSPOFR_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_OFFER]
	ADD CONSTRAINT [PIM_DSPOFT_PIM_DSPOFR_FK]
	FOREIGN KEY([DISPOSITION_OFFER_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DISPOSITION_OFFER_STATUS_TYPE]([DISPOSITION_OFFER_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPIBT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPIBT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPIBT_I_S_I_TR] ON PIMS_DSP_INITIATING_BRANCH_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_INITIATING_BRANCH_TYPE ("DSP_INITIATING_BRANCH_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DSP_INITIATING_BRANCH_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPOFR_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPOFR_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPOFR_I_S_I_TR] ON PIMS_DISPOSITION_OFFER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_OFFER ("DISPOSITION_OFFER_ID",
      "DISPOSITION_FILE_ID",
      "DISPOSITION_OFFER_STATUS_TYPE_CODE",
      "OFFER_NAME",
      "OFFER_DT",
      "OFFER_EXPIRY_DT",
      "OFFER_AMT",
      "OFFER_NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_OFFER_ID",
      "DISPOSITION_FILE_ID",
      "DISPOSITION_OFFER_STATUS_TYPE_CODE",
      "OFFER_NAME",
      "OFFER_DT",
      "OFFER_EXPIRY_DT",
      "OFFER_AMT",
      "OFFER_NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPIDT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPIDT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPIDT_I_S_U_TR] ON PIMS_DISPOSITION_INITIATING_DOC_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_INITIATING_DOC_TYPE_CODE = deleted.DISPOSITION_INITIATING_DOC_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_INITIATING_DOC_TYPE
    set "DISPOSITION_INITIATING_DOC_TYPE_CODE" = inserted."DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_INITIATING_DOC_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_INITIATING_DOC_TYPE.DISPOSITION_INITIATING_DOC_TYPE_CODE = inserted.DISPOSITION_INITIATING_DOC_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DISPFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DISPFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DISPFL_I_S_U_TR] ON PIMS_DISPOSITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_ID = deleted.DISPOSITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE
    set "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DISPOSITION_STATUS_TYPE_CODE" = inserted."DISPOSITION_STATUS_TYPE_CODE",
      "DISPOSITION_FILE_STATUS_TYPE_CODE" = inserted."DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DISPOSITION_TYPE_CODE" = inserted."DISPOSITION_TYPE_CODE",
      "DISPOSITION_FUNDING_TYPE_CODE" = inserted."DISPOSITION_FUNDING_TYPE_CODE",
      "DISPOSITION_INITIATING_DOC_TYPE_CODE" = inserted."DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DSP_PHYS_FILE_STATUS_TYPE_CODE" = inserted."DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DSP_INITIATING_BRANCH_TYPE_CODE" = inserted."DSP_INITIATING_BRANCH_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_REFERENCE" = inserted."FILE_REFERENCE",
      "OTHER_DISPOSITION_TYPE" = inserted."OTHER_DISPOSITION_TYPE",
      "OTHER_INITIATING_DOC_TYPE" = inserted."OTHER_INITIATING_DOC_TYPE",
      "ASSIGNED_DT" = inserted."ASSIGNED_DT",
      "COMPLETED_DT" = inserted."COMPLETED_DT",
      "INITIATING_DOCUMENT_DT" = inserted."INITIATING_DOCUMENT_DT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE
    inner join inserted
    on (PIMS_DISPOSITION_FILE.DISPOSITION_FILE_ID = inserted.DISPOSITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPFTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPFTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPFTY_I_S_I_TR] ON PIMS_DISPOSITION_FUNDING_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FUNDING_TYPE ("DISPOSITION_FUNDING_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISPOSITION_FUNDING_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPFST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPFST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPFST_I_S_U_TR] ON PIMS_DISPOSITION_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_STATUS_TYPE_CODE = deleted.DISPOSITION_FILE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE_STATUS_TYPE
    set "DISPOSITION_FILE_STATUS_TYPE_CODE" = inserted."DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_FILE_STATUS_TYPE.DISPOSITION_FILE_STATUS_TYPE_CODE = inserted.DISPOSITION_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DISPFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DISPFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DISPFL_A_S_IUD_TR] ON PIMS_DISPOSITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_FILE_HIST set END_DATE_HIST = @curr_date where DISPOSITION_FILE_ID in (select DISPOSITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_FILE_HIST ([DISPOSITION_FILE_ID], [DISPOSITION_STATUS_TYPE_CODE], [DISPOSITION_FILE_STATUS_TYPE_CODE], [DISPOSITION_TYPE_CODE], [DISPOSITION_FUNDING_TYPE_CODE], [DISPOSITION_INITIATING_DOC_TYPE_CODE], [DSP_PHYS_FILE_STATUS_TYPE_CODE], [DSP_INITIATING_BRANCH_TYPE_CODE], [REGION_CODE], [FILE_NUMBER], [FILE_NAME], [FILE_REFERENCE], [OTHER_DISPOSITION_TYPE], [OTHER_INITIATING_DOC_TYPE], [ASSIGNED_DT], [COMPLETED_DT], [INITIATING_DOCUMENT_DT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_FILE_ID], [DISPOSITION_STATUS_TYPE_CODE], [DISPOSITION_FILE_STATUS_TYPE_CODE], [DISPOSITION_TYPE_CODE], [DISPOSITION_FUNDING_TYPE_CODE], [DISPOSITION_INITIATING_DOC_TYPE_CODE], [DSP_PHYS_FILE_STATUS_TYPE_CODE], [DSP_INITIATING_BRANCH_TYPE_CODE], [REGION_CODE], [FILE_NUMBER], [FILE_NAME], [FILE_REFERENCE], [OTHER_DISPOSITION_TYPE], [OTHER_INITIATING_DOC_TYPE], [ASSIGNED_DT], [COMPLETED_DT], [INITIATING_DOCUMENT_DT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_FILE_H_ID_SEQ]) as [_DISPOSITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCIT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPCIT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCIT_I_S_I_TR] ON PIMS_DSP_CHKLST_ITEM_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_CHKLST_ITEM_TYPE ("DSP_CHKLST_ITEM_TYPE_CODE",
      "DSP_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "HINT",
      "IS_REQUIRED",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DSP_CHKLST_ITEM_TYPE_CODE",
      "DSP_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "HINT",
      "IS_REQUIRED",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPSL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPPSL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPSL_I_S_U_TR] ON PIMS_DSP_PURCH_SOLICITOR INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_PURCH_SOLICITOR_ID = deleted.DSP_PURCH_SOLICITOR_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_PURCH_SOLICITOR
    set "DSP_PURCH_SOLICITOR_ID" = inserted."DSP_PURCH_SOLICITOR_ID",
      "DISPOSITION_SALE_ID" = inserted."DISPOSITION_SALE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_PURCH_SOLICITOR
    inner join inserted
    on (PIMS_DSP_PURCH_SOLICITOR.DSP_PURCH_SOLICITOR_ID = inserted.DSP_PURCH_SOLICITOR_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPRP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPPRP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPRP_A_S_IUD_TR] ON PIMS_DISPOSITION_FILE_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_FILE_PROPERTY_HIST set END_DATE_HIST = @curr_date where DISPOSITION_FILE_PROPERTY_ID in (select DISPOSITION_FILE_PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_FILE_PROPERTY_HIST ([DISPOSITION_FILE_PROPERTY_ID], [DISPOSITION_FILE_ID], [PROPERTY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_FILE_PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_FILE_PROPERTY_ID], [DISPOSITION_FILE_ID], [PROPERTY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_FILE_PROPERTY_H_ID_SEQ]) as [_DISPOSITION_FILE_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPAG_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPPAG_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPAG_I_S_U_TR] ON PIMS_DSP_PURCH_AGENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_PURCH_AGENT_ID = deleted.DSP_PURCH_AGENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_PURCH_AGENT
    set "DSP_PURCH_AGENT_ID" = inserted."DSP_PURCH_AGENT_ID",
      "DISPOSITION_SALE_ID" = inserted."DISPOSITION_SALE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_PURCH_AGENT
    inner join inserted
    on (PIMS_DSP_PURCH_AGENT.DSP_PURCH_AGENT_ID = inserted.DSP_PURCH_AGENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPTYP_I_S_U_TR] ON PIMS_DISPOSITION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_TYPE_CODE = deleted.DISPOSITION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_TYPE
    set "DISPOSITION_TYPE_CODE" = inserted."DISPOSITION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_TYPE.DISPOSITION_TYPE_CODE = inserted.DISPOSITION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPSCT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPSCT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPSCT_I_S_I_TR] ON PIMS_DSP_CHKLST_SECTION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_CHKLST_SECTION_TYPE ("DSP_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DSP_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPSAL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPSAL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPSAL_A_S_IUD_TR] ON PIMS_DISPOSITION_SALE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_SALE_HIST set END_DATE_HIST = @curr_date where DISPOSITION_SALE_ID in (select DISPOSITION_SALE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_SALE_HIST ([DISPOSITION_SALE_ID], [DISPOSITION_FILE_ID], [FINAL_CONDITION_REMOVAL_DT], [SALE_COMPLETION_DT], [SALE_FISCAL_YEAR], [SALE_FINAL_AMT], [REALTOR_COMMISSION_AMT], [IS_GST_REQUIRED], [GST_COLLECTED_AMT], [NET_BOOK_AMT], [TOTAL_COST_AMT], [SPP_AMT], [REMEDIATION_AMT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_SALE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_SALE_ID], [DISPOSITION_FILE_ID], [FINAL_CONDITION_REMOVAL_DT], [SALE_COMPLETION_DT], [SALE_FISCAL_YEAR], [SALE_FINAL_AMT], [REALTOR_COMMISSION_AMT], [IS_GST_REQUIRED], [GST_COLLECTED_AMT], [NET_BOOK_AMT], [TOTAL_COST_AMT], [SPP_AMT], [REMEDIATION_AMT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_SALE_H_ID_SEQ]) as [_DISPOSITION_SALE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCKI_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPCKI_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCKI_I_S_U_TR] ON PIMS_DISPOSITION_CHECKLIST_ITEM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_CHECKLIST_ITEM_ID = deleted.DISPOSITION_CHECKLIST_ITEM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_CHECKLIST_ITEM
    set "DISPOSITION_CHECKLIST_ITEM_ID" = inserted."DISPOSITION_CHECKLIST_ITEM_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DSP_CHKLST_ITEM_TYPE_CODE" = inserted."DSP_CHKLST_ITEM_TYPE_CODE",
      "DSP_CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."DSP_CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_CHECKLIST_ITEM
    inner join inserted
    on (PIMS_DISPOSITION_CHECKLIST_ITEM.DISPOSITION_CHECKLIST_ITEM_ID = inserted.DISPOSITION_CHECKLIST_ITEM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPUR_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPPUR_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPUR_I_S_U_TR] ON PIMS_DISPOSITION_PURCHASER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_PURCHASER_ID = deleted.DISPOSITION_PURCHASER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_PURCHASER
    set "DISPOSITION_PURCHASER_ID" = inserted."DISPOSITION_PURCHASER_ID",
      "DISPOSITION_SALE_ID" = inserted."DISPOSITION_SALE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_PURCHASER
    inner join inserted
    on (PIMS_DISPOSITION_PURCHASER.DISPOSITION_PURCHASER_ID = inserted.DISPOSITION_PURCHASER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPOFT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPOFT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPOFT_I_S_U_TR] ON PIMS_DISPOSITION_OFFER_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_OFFER_STATUS_TYPE_CODE = deleted.DISPOSITION_OFFER_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_OFFER_STATUS_TYPE
    set "DISPOSITION_OFFER_STATUS_TYPE_CODE" = inserted."DISPOSITION_OFFER_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_OFFER_STATUS_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_OFFER_STATUS_TYPE.DISPOSITION_OFFER_STATUS_TYPE_CODE = inserted.DISPOSITION_OFFER_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPTYP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPTYP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPTYP_I_S_I_TR] ON PIMS_DISPOSITION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_TYPE ("DISPOSITION_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISPOSITION_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPCST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCST_I_S_U_TR] ON PIMS_DSP_CHKLST_ITEM_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_CHKLST_ITEM_STATUS_TYPE_CODE = deleted.DSP_CHKLST_ITEM_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_CHKLST_ITEM_STATUS_TYPE
    set "DSP_CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."DSP_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_CHKLST_ITEM_STATUS_TYPE
    inner join inserted
    on (PIMS_DSP_CHKLST_ITEM_STATUS_TYPE.DSP_CHKLST_ITEM_STATUS_TYPE_CODE = inserted.DSP_CHKLST_ITEM_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPFTP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPFTP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPFTP_I_S_U_TR] ON PIMS_DSP_FL_TEAM_PROFILE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_FL_TEAM_PROFILE_TYPE_CODE = deleted.DSP_FL_TEAM_PROFILE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_FL_TEAM_PROFILE_TYPE
    set "DSP_FL_TEAM_PROFILE_TYPE_CODE" = inserted."DSP_FL_TEAM_PROFILE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_FL_TEAM_PROFILE_TYPE
    inner join inserted
    on (PIMS_DSP_FL_TEAM_PROFILE_TYPE.DSP_FL_TEAM_PROFILE_TYPE_CODE = inserted.DSP_FL_TEAM_PROFILE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPAPP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPAPP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPAPP_I_S_U_TR] ON PIMS_DISPOSITION_APPRAISAL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_APPRAISAL_ID = deleted.DISPOSITION_APPRAISAL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_APPRAISAL
    set "DISPOSITION_APPRAISAL_ID" = inserted."DISPOSITION_APPRAISAL_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "APPRAISED_AMT" = inserted."APPRAISED_AMT",
      "APPRAISAL_DT" = inserted."APPRAISAL_DT",
      "BCA_VALUE_AMT" = inserted."BCA_VALUE_AMT",
      "BCA_ROLL_YEAR" = inserted."BCA_ROLL_YEAR",
      "LIST_PRICE_AMT" = inserted."LIST_PRICE_AMT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_APPRAISAL
    inner join inserted
    on (PIMS_DISPOSITION_APPRAISAL.DISPOSITION_APPRAISAL_ID = inserted.DISPOSITION_APPRAISAL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPSTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPSTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPSTY_I_S_I_TR] ON PIMS_DISPOSITION_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_STATUS_TYPE ("DISPOSITION_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISPOSITION_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPOFR_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPOFR_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPOFR_A_S_IUD_TR] ON PIMS_DISPOSITION_OFFER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_OFFER_HIST set END_DATE_HIST = @curr_date where DISPOSITION_OFFER_ID in (select DISPOSITION_OFFER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_OFFER_HIST ([DISPOSITION_OFFER_ID], [DISPOSITION_FILE_ID], [DISPOSITION_OFFER_STATUS_TYPE_CODE], [OFFER_NAME], [OFFER_DT], [OFFER_EXPIRY_DT], [OFFER_AMT], [OFFER_NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_OFFER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_OFFER_ID], [DISPOSITION_FILE_ID], [DISPOSITION_OFFER_STATUS_TYPE_CODE], [OFFER_NAME], [OFFER_DT], [OFFER_EXPIRY_DT], [OFFER_AMT], [OFFER_NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_OFFER_H_ID_SEQ]) as [_DISPOSITION_OFFER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPAPP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPAPP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPAPP_A_S_IUD_TR] ON PIMS_DISPOSITION_APPRAISAL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_APPRAISAL_HIST set END_DATE_HIST = @curr_date where DISPOSITION_APPRAISAL_ID in (select DISPOSITION_APPRAISAL_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_APPRAISAL_HIST ([DISPOSITION_APPRAISAL_ID], [DISPOSITION_FILE_ID], [APPRAISED_AMT], [APPRAISAL_DT], [BCA_VALUE_AMT], [BCA_ROLL_YEAR], [LIST_PRICE_AMT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_APPRAISAL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_APPRAISAL_ID], [DISPOSITION_FILE_ID], [APPRAISED_AMT], [APPRAISAL_DT], [BCA_VALUE_AMT], [BCA_ROLL_YEAR], [LIST_PRICE_AMT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_APPRAISAL_H_ID_SEQ]) as [_DISPOSITION_APPRAISAL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPNOT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPNOT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPNOT_I_S_U_TR] ON PIMS_DISPOSITION_FILE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_NOTE_ID = deleted.DISPOSITION_FILE_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE_NOTE
    set "DISPOSITION_FILE_NOTE_ID" = inserted."DISPOSITION_FILE_NOTE_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_NOTE
    inner join inserted
    on (PIMS_DISPOSITION_FILE_NOTE.DISPOSITION_FILE_NOTE_ID = inserted.DISPOSITION_FILE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPFS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPPFS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPFS_I_S_U_TR] ON PIMS_DSP_PHYS_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_PHYS_FILE_STATUS_TYPE_CODE = deleted.DSP_PHYS_FILE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_PHYS_FILE_STATUS_TYPE
    set "DSP_PHYS_FILE_STATUS_TYPE_CODE" = inserted."DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_PHYS_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_DSP_PHYS_FILE_STATUS_TYPE.DSP_PHYS_FILE_STATUS_TYPE_CODE = inserted.DSP_PHYS_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPFTM_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPFTM_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPFTM_I_S_U_TR] ON PIMS_DISPOSITION_FILE_TEAM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_TEAM_ID = deleted.DISPOSITION_FILE_TEAM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE_TEAM
    set "DISPOSITION_FILE_TEAM_ID" = inserted."DISPOSITION_FILE_TEAM_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "DSP_FL_TEAM_PROFILE_TYPE_CODE" = inserted."DSP_FL_TEAM_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_TEAM
    inner join inserted
    on (PIMS_DISPOSITION_FILE_TEAM.DISPOSITION_FILE_TEAM_ID = inserted.DISPOSITION_FILE_TEAM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPRP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPPRP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPRP_I_S_I_TR] ON PIMS_DISPOSITION_FILE_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE_PROPERTY ("DISPOSITION_FILE_PROPERTY_ID",
      "DISPOSITION_FILE_ID",
      "PROPERTY_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_FILE_PROPERTY_ID",
      "DISPOSITION_FILE_ID",
      "PROPERTY_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPSAL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPSAL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPSAL_I_S_I_TR] ON PIMS_DISPOSITION_SALE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_SALE ("DISPOSITION_SALE_ID",
      "DISPOSITION_FILE_ID",
      "FINAL_CONDITION_REMOVAL_DT",
      "SALE_COMPLETION_DT",
      "SALE_FISCAL_YEAR",
      "SALE_FINAL_AMT",
      "REALTOR_COMMISSION_AMT",
      "IS_GST_REQUIRED",
      "GST_COLLECTED_AMT",
      "NET_BOOK_AMT",
      "TOTAL_COST_AMT",
      "SPP_AMT",
      "REMEDIATION_AMT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_SALE_ID",
      "DISPOSITION_FILE_ID",
      "FINAL_CONDITION_REMOVAL_DT",
      "SALE_COMPLETION_DT",
      "SALE_FISCAL_YEAR",
      "SALE_FINAL_AMT",
      "REALTOR_COMMISSION_AMT",
      "IS_GST_REQUIRED",
      "GST_COLLECTED_AMT",
      "NET_BOOK_AMT",
      "TOTAL_COST_AMT",
      "SPP_AMT",
      "REMEDIATION_AMT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCIT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPCIT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCIT_I_S_U_TR] ON PIMS_DSP_CHKLST_ITEM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_CHKLST_ITEM_TYPE_CODE = deleted.DSP_CHKLST_ITEM_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_CHKLST_ITEM_TYPE
    set "DSP_CHKLST_ITEM_TYPE_CODE" = inserted."DSP_CHKLST_ITEM_TYPE_CODE",
      "DSP_CHKLST_SECTION_TYPE_CODE" = inserted."DSP_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "HINT" = inserted."HINT",
      "IS_REQUIRED" = inserted."IS_REQUIRED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_CHKLST_ITEM_TYPE
    inner join inserted
    on (PIMS_DSP_CHKLST_ITEM_TYPE.DSP_CHKLST_ITEM_TYPE_CODE = inserted.DSP_CHKLST_ITEM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPUR_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPPUR_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPUR_A_S_IUD_TR] ON PIMS_DISPOSITION_PURCHASER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_PURCHASER_HIST set END_DATE_HIST = @curr_date where DISPOSITION_PURCHASER_ID in (select DISPOSITION_PURCHASER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_PURCHASER_HIST ([DISPOSITION_PURCHASER_ID], [DISPOSITION_SALE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_PURCHASER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_PURCHASER_ID], [DISPOSITION_SALE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_PURCHASER_H_ID_SEQ]) as [_DISPOSITION_PURCHASER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPIDT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPIDT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPIDT_I_S_I_TR] ON PIMS_DISPOSITION_INITIATING_DOC_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_INITIATING_DOC_TYPE ("DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DISPFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DISPFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DISPFL_I_S_I_TR] ON PIMS_DISPOSITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE ("DISPOSITION_FILE_ID",
      "DISPOSITION_STATUS_TYPE_CODE",
      "DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DISPOSITION_TYPE_CODE",
      "DISPOSITION_FUNDING_TYPE_CODE",
      "DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DSP_INITIATING_BRANCH_TYPE_CODE",
      "REGION_CODE",
      "FILE_NUMBER",
      "FILE_NAME",
      "FILE_REFERENCE",
      "OTHER_DISPOSITION_TYPE",
      "OTHER_INITIATING_DOC_TYPE",
      "ASSIGNED_DT",
      "COMPLETED_DT",
      "INITIATING_DOCUMENT_DT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_FILE_ID",
      "DISPOSITION_STATUS_TYPE_CODE",
      "DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DISPOSITION_TYPE_CODE",
      "DISPOSITION_FUNDING_TYPE_CODE",
      "DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DSP_INITIATING_BRANCH_TYPE_CODE",
      "REGION_CODE",
      "FILE_NUMBER",
      "FILE_NAME",
      "FILE_REFERENCE",
      "OTHER_DISPOSITION_TYPE",
      "OTHER_INITIATING_DOC_TYPE",
      "ASSIGNED_DT",
      "COMPLETED_DT",
      "INITIATING_DOCUMENT_DT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPAG_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPPAG_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPAG_I_S_I_TR] ON PIMS_DSP_PURCH_AGENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_PURCH_AGENT ("DSP_PURCH_AGENT_ID",
      "DISPOSITION_SALE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DSP_PURCH_AGENT_ID",
      "DISPOSITION_SALE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCKI_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPCKI_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCKI_A_S_IUD_TR] ON PIMS_DISPOSITION_CHECKLIST_ITEM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_CHECKLIST_ITEM_HIST set END_DATE_HIST = @curr_date where DISPOSITION_CHECKLIST_ITEM_ID in (select DISPOSITION_CHECKLIST_ITEM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_CHECKLIST_ITEM_HIST ([DISPOSITION_CHECKLIST_ITEM_ID], [DISPOSITION_FILE_ID], [DSP_CHKLST_ITEM_TYPE_CODE], [DSP_CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_CHECKLIST_ITEM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_CHECKLIST_ITEM_ID], [DISPOSITION_FILE_ID], [DSP_CHKLST_ITEM_TYPE_CODE], [DSP_CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM_H_ID_SEQ]) as [_DISPOSITION_CHECKLIST_ITEM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPFTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPFTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPFTY_I_S_U_TR] ON PIMS_DISPOSITION_FUNDING_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FUNDING_TYPE_CODE = deleted.DISPOSITION_FUNDING_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FUNDING_TYPE
    set "DISPOSITION_FUNDING_TYPE_CODE" = inserted."DISPOSITION_FUNDING_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FUNDING_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_FUNDING_TYPE.DISPOSITION_FUNDING_TYPE_CODE = inserted.DISPOSITION_FUNDING_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPSCT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPSCT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPSCT_I_S_U_TR] ON PIMS_DSP_CHKLST_SECTION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_CHKLST_SECTION_TYPE_CODE = deleted.DSP_CHKLST_SECTION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_CHKLST_SECTION_TYPE
    set "DSP_CHKLST_SECTION_TYPE_CODE" = inserted."DSP_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_CHKLST_SECTION_TYPE
    inner join inserted
    on (PIMS_DSP_CHKLST_SECTION_TYPE.DSP_CHKLST_SECTION_TYPE_CODE = inserted.DSP_CHKLST_SECTION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPFST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPFST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPFST_I_S_I_TR] ON PIMS_DISPOSITION_FILE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE_STATUS_TYPE ("DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPFTM_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPFTM_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPFTM_A_S_IUD_TR] ON PIMS_DISPOSITION_FILE_TEAM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_FILE_TEAM_HIST set END_DATE_HIST = @curr_date where DISPOSITION_FILE_TEAM_ID in (select DISPOSITION_FILE_TEAM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_FILE_TEAM_HIST ([DISPOSITION_FILE_TEAM_ID], [DISPOSITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [DSP_FL_TEAM_PROFILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_FILE_TEAM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_FILE_TEAM_ID], [DISPOSITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [DSP_FL_TEAM_PROFILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_FILE_TEAM_H_ID_SEQ]) as [_DISPOSITION_FILE_TEAM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPUR_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPPUR_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPUR_I_S_I_TR] ON PIMS_DISPOSITION_PURCHASER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_PURCHASER ("DISPOSITION_PURCHASER_ID",
      "DISPOSITION_SALE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_PURCHASER_ID",
      "DISPOSITION_SALE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPOFR_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPOFR_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPOFR_I_S_U_TR] ON PIMS_DISPOSITION_OFFER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_OFFER_ID = deleted.DISPOSITION_OFFER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_OFFER
    set "DISPOSITION_OFFER_ID" = inserted."DISPOSITION_OFFER_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DISPOSITION_OFFER_STATUS_TYPE_CODE" = inserted."DISPOSITION_OFFER_STATUS_TYPE_CODE",
      "OFFER_NAME" = inserted."OFFER_NAME",
      "OFFER_DT" = inserted."OFFER_DT",
      "OFFER_EXPIRY_DT" = inserted."OFFER_EXPIRY_DT",
      "OFFER_AMT" = inserted."OFFER_AMT",
      "OFFER_NOTE" = inserted."OFFER_NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_OFFER
    inner join inserted
    on (PIMS_DISPOSITION_OFFER.DISPOSITION_OFFER_ID = inserted.DISPOSITION_OFFER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPSL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPPSL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPSL_A_S_IUD_TR] ON PIMS_DSP_PURCH_SOLICITOR FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DSP_PURCH_SOLICITOR_HIST set END_DATE_HIST = @curr_date where DSP_PURCH_SOLICITOR_ID in (select DSP_PURCH_SOLICITOR_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DSP_PURCH_SOLICITOR_HIST ([DSP_PURCH_SOLICITOR_ID], [DISPOSITION_SALE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DSP_PURCH_SOLICITOR_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DSP_PURCH_SOLICITOR_ID], [DISPOSITION_SALE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DSP_PURCH_SOLICITOR_H_ID_SEQ]) as [_DSP_PURCH_SOLICITOR_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPDOC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPDOC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPDOC_I_S_I_TR] ON PIMS_DISPOSITION_FILE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE_DOCUMENT ("DISPOSITION_FILE_DOCUMENT_ID",
      "DISPOSITION_FILE_ID",
      "DOCUMENT_ID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISPOSITION_FILE_DOCUMENT_ID",
      "DISPOSITION_FILE_ID",
      "DOCUMENT_ID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPSL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPPSL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPSL_I_S_I_TR] ON PIMS_DSP_PURCH_SOLICITOR INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_PURCH_SOLICITOR ("DSP_PURCH_SOLICITOR_ID",
      "DISPOSITION_SALE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DSP_PURCH_SOLICITOR_ID",
      "DISPOSITION_SALE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPDOC_I_S_U_TR] ON PIMS_DISPOSITION_FILE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_DOCUMENT_ID = deleted.DISPOSITION_FILE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE_DOCUMENT
    set "DISPOSITION_FILE_DOCUMENT_ID" = inserted."DISPOSITION_FILE_DOCUMENT_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_DOCUMENT
    inner join inserted
    on (PIMS_DISPOSITION_FILE_DOCUMENT.DISPOSITION_FILE_DOCUMENT_ID = inserted.DISPOSITION_FILE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPAG_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPPAG_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPAG_A_S_IUD_TR] ON PIMS_DSP_PURCH_AGENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DSP_PURCH_AGENT_HIST set END_DATE_HIST = @curr_date where DSP_PURCH_AGENT_ID in (select DSP_PURCH_AGENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DSP_PURCH_AGENT_HIST ([DSP_PURCH_AGENT_ID], [DISPOSITION_SALE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DSP_PURCH_AGENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DSP_PURCH_AGENT_ID], [DISPOSITION_SALE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DSP_PURCH_AGENT_H_ID_SEQ]) as [_DSP_PURCH_AGENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCKI_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPCKI_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCKI_I_S_I_TR] ON PIMS_DISPOSITION_CHECKLIST_ITEM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_CHECKLIST_ITEM ("DISPOSITION_CHECKLIST_ITEM_ID",
      "DISPOSITION_FILE_ID",
      "DSP_CHKLST_ITEM_TYPE_CODE",
      "DSP_CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_CHECKLIST_ITEM_ID",
      "DISPOSITION_FILE_ID",
      "DSP_CHKLST_ITEM_TYPE_CODE",
      "DSP_CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPOFT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPOFT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPOFT_I_S_I_TR] ON PIMS_DISPOSITION_OFFER_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_OFFER_STATUS_TYPE ("DISPOSITION_OFFER_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISPOSITION_OFFER_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPDOC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPDOC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPDOC_A_S_IUD_TR] ON PIMS_DISPOSITION_FILE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_FILE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where DISPOSITION_FILE_DOCUMENT_ID in (select DISPOSITION_FILE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_FILE_DOCUMENT_HIST ([DISPOSITION_FILE_DOCUMENT_ID], [DISPOSITION_FILE_ID], [DOCUMENT_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_FILE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_FILE_DOCUMENT_ID], [DISPOSITION_FILE_ID], [DOCUMENT_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT_H_ID_SEQ]) as [_DISPOSITION_FILE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPCST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCST_I_S_I_TR] ON PIMS_DSP_CHKLST_ITEM_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_CHKLST_ITEM_STATUS_TYPE ("DSP_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DSP_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPRP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPPRP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPRP_I_S_U_TR] ON PIMS_DISPOSITION_FILE_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_PROPERTY_ID = deleted.DISPOSITION_FILE_PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE_PROPERTY
    set "DISPOSITION_FILE_PROPERTY_ID" = inserted."DISPOSITION_FILE_PROPERTY_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_PROPERTY
    inner join inserted
    on (PIMS_DISPOSITION_FILE_PROPERTY.DISPOSITION_FILE_PROPERTY_ID = inserted.DISPOSITION_FILE_PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPNOT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPNOT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPNOT_I_S_I_TR] ON PIMS_DISPOSITION_FILE_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE_NOTE ("DISPOSITION_FILE_NOTE_ID",
      "DISPOSITION_FILE_ID",
      "NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_FILE_NOTE_ID",
      "DISPOSITION_FILE_ID",
      "NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPAPP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPAPP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPAPP_I_S_I_TR] ON PIMS_DISPOSITION_APPRAISAL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_APPRAISAL ("DISPOSITION_APPRAISAL_ID",
      "DISPOSITION_FILE_ID",
      "APPRAISED_AMT",
      "APPRAISAL_DT",
      "BCA_VALUE_AMT",
      "BCA_ROLL_YEAR",
      "LIST_PRICE_AMT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_APPRAISAL_ID",
      "DISPOSITION_FILE_ID",
      "APPRAISED_AMT",
      "APPRAISAL_DT",
      "BCA_VALUE_AMT",
      "BCA_ROLL_YEAR",
      "LIST_PRICE_AMT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPSTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPSTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPSTY_I_S_U_TR] ON PIMS_DISPOSITION_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_STATUS_TYPE_CODE = deleted.DISPOSITION_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_STATUS_TYPE
    set "DISPOSITION_STATUS_TYPE_CODE" = inserted."DISPOSITION_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_STATUS_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_STATUS_TYPE.DISPOSITION_STATUS_TYPE_CODE = inserted.DISPOSITION_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPFTP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPFTP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPFTP_I_S_I_TR] ON PIMS_DSP_FL_TEAM_PROFILE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_FL_TEAM_PROFILE_TYPE ("DSP_FL_TEAM_PROFILE_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DSP_FL_TEAM_PROFILE_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPIBT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPIBT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPIBT_I_S_U_TR] ON PIMS_DSP_INITIATING_BRANCH_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_INITIATING_BRANCH_TYPE_CODE = deleted.DSP_INITIATING_BRANCH_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_INITIATING_BRANCH_TYPE
    set "DSP_INITIATING_BRANCH_TYPE_CODE" = inserted."DSP_INITIATING_BRANCH_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_INITIATING_BRANCH_TYPE
    inner join inserted
    on (PIMS_DSP_INITIATING_BRANCH_TYPE.DSP_INITIATING_BRANCH_TYPE_CODE = inserted.DSP_INITIATING_BRANCH_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPFS_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPPFS_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPFS_I_S_I_TR] ON PIMS_DSP_PHYS_FILE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_PHYS_FILE_STATUS_TYPE ("DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPFTM_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPFTM_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPFTM_I_S_I_TR] ON PIMS_DISPOSITION_FILE_TEAM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE_TEAM ("DISPOSITION_FILE_TEAM_ID",
      "DISPOSITION_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "DSP_FL_TEAM_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_FILE_TEAM_ID",
      "DISPOSITION_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "DSP_FL_TEAM_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPNOT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPNOT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPNOT_A_S_IUD_TR] ON PIMS_DISPOSITION_FILE_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_FILE_NOTE_HIST set END_DATE_HIST = @curr_date where DISPOSITION_FILE_NOTE_ID in (select DISPOSITION_FILE_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_FILE_NOTE_HIST ([DISPOSITION_FILE_NOTE_ID], [DISPOSITION_FILE_ID], [NOTE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_FILE_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_FILE_NOTE_ID], [DISPOSITION_FILE_ID], [NOTE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_FILE_NOTE_H_ID_SEQ]) as [_DISPOSITION_FILE_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPSAL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPSAL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPSAL_I_S_U_TR] ON PIMS_DISPOSITION_SALE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_SALE_ID = deleted.DISPOSITION_SALE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_SALE
    set "DISPOSITION_SALE_ID" = inserted."DISPOSITION_SALE_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "FINAL_CONDITION_REMOVAL_DT" = inserted."FINAL_CONDITION_REMOVAL_DT",
      "SALE_COMPLETION_DT" = inserted."SALE_COMPLETION_DT",
      "SALE_FISCAL_YEAR" = inserted."SALE_FISCAL_YEAR",
      "SALE_FINAL_AMT" = inserted."SALE_FINAL_AMT",
      "REALTOR_COMMISSION_AMT" = inserted."REALTOR_COMMISSION_AMT",
      "IS_GST_REQUIRED" = inserted."IS_GST_REQUIRED",
      "GST_COLLECTED_AMT" = inserted."GST_COLLECTED_AMT",
      "NET_BOOK_AMT" = inserted."NET_BOOK_AMT",
      "TOTAL_COST_AMT" = inserted."TOTAL_COST_AMT",
      "SPP_AMT" = inserted."SPP_AMT",
      "REMEDIATION_AMT" = inserted."REMEDIATION_AMT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_SALE
    inner join inserted
    on (PIMS_DISPOSITION_SALE.DISPOSITION_SALE_ID = inserted.DISPOSITION_SALE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
