/*
Script generated by Aqua Data Studio 24.0.0 on Nov.-15-2024 01:14:38 p.m.
Database: PSP_PIMS_S94_00
Schema: dbo
Objects: DATATYPE, DEFAULT, RULE, SEQUENCE, TABLE, VIEW, SYNONYM, PROCEDURE, FUNCTION, INDEX, TRIGGER, DATABASETRIGGER, DATABASE_AUDIT_SPEC
*/
CREATE SEQUENCE [dbo].[PIMS_ACCESS_REQUEST_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACCESS_REQUEST_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_ACTIVITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_FORM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_FORM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_NO_SEQ]
	AS int
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_NOTE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_NOTE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_PERSON_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_TEAM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_TEAM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_OWNER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_OWNER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_PAYEE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_MODEL_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_MODEL_TASK_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_SERVICE_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_TASK_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_TEMPLATE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ADDRESS_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ADDRESS_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_AGREEMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_AGREEMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ASSET_EVALUATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_BUILDING_CONSTRUCTION_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_BUILDING_EVALUATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_BUILDING_FISCAL_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_BUILDING_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_BUILDING_OCCUPANT_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_BUILDING_PREDOMINATE_USE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_BUSINESS_FUNCTION_CODE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_BUSINESS_FUNCTION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_CHART_OF_ACCOUNTS_CODE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_CHART_OF_ACCOUNTS_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_CLAIM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_CLAIM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_COMP_REQ_FINANCIAL_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_COMP_REQ_FINANCIAL_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_COMPENSATION_REQUISITION_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_COMPENSATION_REQUISITION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_CONTACT_METHOD_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_CONTACT_METHOD_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_COST_TYPE_CODE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_COST_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_APPRAISAL_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_APPRAISAL_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_NO_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_NOTE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_NOTE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_TEAM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_FILE_TEAM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_OFFER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_OFFER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_PURCHASER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_PURCHASER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_SALE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DISPOSITION_SALE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DOCUMENT_CATEGORY_SUBTYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DOCUMENT_QUEUE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DOCUMENT_QUEUE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DOCUMENT_TYP_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DOCUMENT_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DSP_PURCH_AGENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DSP_PURCH_AGENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DSP_PURCH_SOLICITOR_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DSP_PURCH_SOLICITOR_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_EXPROP_PMT_PMT_ITEM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_EXPROP_PMT_PMT_ITEM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_EXPROPRIATION_PAYMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_EXPROPRIATION_PAYMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_FILE_ENTITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_FILE_ENTITY_PERMISSIONS_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_FINANCIAL_ACTIVITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_FORM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_GL_ACCOUNT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_H120_CATEGORY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_H120_CATEGORY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_HISTORICAL_FILE_NUMBER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_HISTORICAL_FILE_NUMBER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_INSURANCE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_INSURANCE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_INTEREST_HOLDER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_INTEREST_HOLDER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_INTEREST_HOLDER_PROPERTY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_INTHLDR_PROP_INTEREST_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_INTHLDR_PROP_INTEREST_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_L_FILE_NO_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_ACTIVITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_ACTIVITY_PERIOD_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_CHECKLIST_ITEM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_CHECKLIST_ITEM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_CONSULTATION_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_CONSULTATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_LEASE_PURPOSE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_LEASE_PURPOSE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_NOTE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_NOTE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_PAYMENT_FORECAST_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_PAYMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_PAYMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_PAYMENT_PERIOD_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_PERIOD_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_PERIOD_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_RENEWAL_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_RENEWAL_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_STAKEHOLDER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_STAKEHOLDER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_TERM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_NOTE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_NOTE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ORGANIZATION_ADDRESS_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ORGANIZATION_ADDRESS_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ORGANIZATION_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ORGANIZATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_OWNER_REPRESENTATIVE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 20147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_OWNER_SOLICITOR_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PERSON_ADDRESS_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PERSON_ADDRESS_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PERSON_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PERSON_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PERSON_ORGANIZATION_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PERSON_ORGANIZATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 21474483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PRODUCT_BUSINESS_FUNCTION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PRODUCT_COST_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PRODUCT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PRODUCT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PRODUCT_WORK_ACTIVITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_NOTE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_NOTE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_NUMBER_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_ORGANIZATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_PERSON_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_PERSON_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_PRODUCT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_PRODUCT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_PROPERTY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_ACQ_FL_COMP_REQ_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_ACQ_FL_COMP_REQ_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_ACT_MIN_CONTACT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_ACT_MIN_CONTACT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_LEASE_COMP_REQ_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_LEASE_COMP_REQ_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_ACTIVITY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_ACTIVITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_PURPOSE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_PURPOSE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_ROAD_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_TENURE_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_CONTACT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_CONTACT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_EVALUATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_IMPROVEMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_IMPROVEMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_LEASE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_LEASE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_OPERATION_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_OPERATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_OPERATION_NO_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ORGANIZATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_RESEARCH_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_RESEARCH_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_SERVICE_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_STRUCTURE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_TAX_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_REGION_USER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_REGION_USER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_NOTE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_NOTE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_PROJECT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_PROJECT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_PURPOSE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_PURPOSE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESPONSIBILITY_CENTRE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESPONSIBILITY_CODE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESPONSIBILITY_CODE_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESPONSIBILITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RFILE_NUMBER_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ROLE_CLAIM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ROLE_CLAIM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ROLE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ROLE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_SECURITY_DEPOSIT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_SECURITY_DEPOSIT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_STATIC_VARIABLE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_STRUCTURE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_TAKE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_TAKE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_TASK_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_TASK_TEMPLATE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_TENANT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_USER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_USER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_USER_ORGANIZATION_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_USER_ORGANIZATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_USER_ROLE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_USER_ROLE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_USER_TASK_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_WORK_ACTIVITY_CODE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_WORK_ACTIVITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_WORKFLOW_MODEL_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_YEARLY_FINANCIAL_CODE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_YEARLY_FINANCIAL_CODE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE TABLE [dbo].[PIMSX_TableDefinitions]  ( 
	[TABLE_NAME]   	nvarchar(255) NULL,
	[TABLE_ALIAS]  	nvarchar(255) NULL,
	[HIST_REQUIRED]	nvarchar(1) NULL,
	[DESCRIPTION]  	nvarchar(500) NULL 
	)
GO

CREATE TABLE [dbo].[PIMS_ACCESS_REQUEST_STATUS_TYPE]  ( 
	[ACCESS_REQUEST_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[IS_DISABLED]                    	bit NOT NULL CONSTRAINT [ARQSTT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                  	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NULL CONSTRAINT [ARQSTT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [ARQSTT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [ARQSTT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ARQSTT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ARQSTT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ARQSTT_PK] PRIMARY KEY CLUSTERED([ACCESS_REQUEST_STATUS_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_REGION]  ( 
	[REGION_CODE]               	smallint NOT NULL,
	[REGION_NAME]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [REGION_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [REGION_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [REGION_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [REGION_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [REGION_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [REGION_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [REGION_PK] PRIMARY KEY CLUSTERED([REGION_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_ROLE]  ( 
	[ROLE_ID]                       	bigint NOT NULL CONSTRAINT [ROLE_ROLE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ROLE_ID_SEQ]),
	[ROLE_UID]                      	uniqueidentifier NOT NULL,
	[KEYCLOAK_GROUP_ID]             	uniqueidentifier NULL,
	[NAME]                          	nvarchar(100) NOT NULL,
	[DESCRIPTION]                   	nvarchar(500) NULL,
	[IS_PUBLIC]                     	bit NOT NULL CONSTRAINT [ROLE_IS_PUBLIC_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [ROLE_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[SORT_ORDER]                    	int NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [ROLE_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ROLE_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ROLE_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ROLE_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ROLE_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ROLE_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ROLE_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ROLE_PK] PRIMARY KEY CLUSTERED([ROLE_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PERSON]  ( 
	[PERSON_ID]                     	bigint NOT NULL CONSTRAINT [PERSON_PERSON_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PERSON_ID_SEQ]),
	[SURNAME]                       	nvarchar(50) NOT NULL,
	[FIRST_NAME]                    	nvarchar(50) NOT NULL,
	[MIDDLE_NAMES]                  	nvarchar(200) NULL,
	[NAME_SUFFIX]                   	nvarchar(50) NULL,
	[PREFERRED_NAME]                	nvarchar(200) NULL,
	[BIRTH_DATE]                    	date NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[ADDRESS_COMMENT]               	nvarchar(2000) NULL,
	[USE_ORGANIZATION_ADDRESS]      	bit NULL CONSTRAINT [PERSON_USE_ORGANIZATION_ADDRESS_DEF]  DEFAULT (CONVERT([bit],(0))),
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [PERSON_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PERSON_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PERSON_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PERSON_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PERSON_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PERSON_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PERSON_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PERSON_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PERSON_PK] PRIMARY KEY CLUSTERED([PERSON_ID])
)
GO

CREATE TABLE [dbo].[PIMS_USER_TYPE]  ( 
	[USER_TYPE_CODE]            	nvarchar(20) NOT NULL CONSTRAINT [USERTY_USER_TYPE_CODE_DEF]  DEFAULT ('CONTRACT'),
	[DESCRIPTION]               	nvarchar(200) NOT NULL CONSTRAINT [USERTY_DESCRIPTION_DEF]  DEFAULT ('Contractor'),
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [USERTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [USERTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [USERTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [USERTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [USERTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [USERTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [USERTY_PK] PRIMARY KEY CLUSTERED([USER_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the user type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER_TYPE', 
	@level2type = N'Column', @level2name = N'USER_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code description of the user type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the user type is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specified display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table describing the type of user.  Currently the user types are Ministry Staff and Contractor.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER_TYPE'
GO

CREATE TABLE [dbo].[PIMS_USER]  ( 
	[USER_ID]                       	bigint NOT NULL CONSTRAINT [USER_USER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_USER_ID_SEQ]),
	[PERSON_ID]                     	bigint NOT NULL,
	[USER_TYPE_CODE]                	nvarchar(20) NULL,
	[BUSINESS_IDENTIFIER_VALUE]     	nvarchar(30) NOT NULL,
	[GUID_IDENTIFIER_VALUE]         	uniqueidentifier NULL,
	[POSITION]                      	nvarchar(100) NULL,
	[NOTE]                          	nvarchar(1000) NULL,
	[LAST_LOGIN]                    	datetime NULL,
	[APPROVED_BY_ID]                	nvarchar(30) NULL,
	[ISSUE_DATE]                    	datetime NOT NULL,
	[EXPIRY_DATE]                   	datetime NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [USER_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [USER_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [USER_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [USER_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [USER_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [USER_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [USER_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [USER_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [USER_PK] PRIMARY KEY CLUSTERED([USER_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Accepted identifier of a user (e.g. IDIR)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'BUSINESS_IDENTIFIER_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique GUID associated with the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'GUID_IDENTIFIER_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Role/position assigned to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'POSITION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes associated with this user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Last date/time the user was logged into PIMS.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'LAST_LOGIN'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Identifier of the person that approved the creation of this PIMS user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'APPROVED_BY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date/time that this user was identified as a PIMS user,' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'ISSUE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Expiry date/time of this user account.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if this user account is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Information associated with an identified PIMS system user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER'
GO

CREATE TABLE [dbo].[PIMS_ACCESS_REQUEST]  ( 
	[ACCESS_REQUEST_ID]              	bigint NOT NULL CONSTRAINT [ACRQST_ACCESS_REQUEST_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACCESS_REQUEST_ID_SEQ]),
	[USER_ID]                        	bigint NOT NULL,
	[ROLE_ID]                        	bigint NULL,
	[USER_TYPE_CODE]                 	nvarchar(20) NULL,
	[ACCESS_REQUEST_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[REGION_CODE]                    	smallint NOT NULL CONSTRAINT [ACRQST_REGION_CODE_DEF]  DEFAULT ((4)),
	[NOTE]                           	nvarchar(1000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NULL CONSTRAINT [ACRQST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACRQST_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACRQST_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [ACRQST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [ACRQST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ACRQST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ACRQST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACRQST_PK] PRIMARY KEY CLUSTERED([ACCESS_REQUEST_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Note associated with this access request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACCESS_REQUEST', 
	@level2type = N'Column', @level2name = N'NOTE'
GO

CREATE TABLE [dbo].[PIMS_ACCESS_REQUEST_HIST]  ( 
	[_ACCESS_REQUEST_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACCESS_REQUEST_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[ACCESS_REQUEST_ID]              	bigint NOT NULL,
	[USER_ID]                        	bigint NOT NULL,
	[ROLE_ID]                        	bigint NULL,
	[USER_TYPE_CODE]                 	nvarchar(20) NULL,
	[ACCESS_REQUEST_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[REGION_CODE]                    	smallint NOT NULL,
	[NOTE]                           	nvarchar(1000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACRQST_H_PK] PRIMARY KEY CLUSTERED([_ACCESS_REQUEST_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DISTRICT]  ( 
	[DISTRICT_CODE]             	smallint NOT NULL,
	[REGION_CODE]               	smallint NOT NULL,
	[DISTRICT_NAME]             	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [DSTRCT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [DSTRCT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [DSTRCT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [DSTRCT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [DSTRCT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [DSTRCT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSTRCT_PK] PRIMARY KEY CLUSTERED([DISTRICT_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_ORG_IDENTIFIER_TYPE]  ( 
	[ORG_IDENTIFIER_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [ORGIDT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [ORGIDT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ORGIDT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ORGIDT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [ORGIDT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [ORGIDT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ORGIDT_PK] PRIMARY KEY CLUSTERED([ORG_IDENTIFIER_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_ORGANIZATION_TYPE]  ( 
	[ORGANIZATION_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [ORGTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [ORGTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ORGTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ORGTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [ORGTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [ORGTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ORGTYP_PK] PRIMARY KEY CLUSTERED([ORGANIZATION_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_ORGANIZATION]  ( 
	[ORGANIZATION_ID]               	bigint NOT NULL CONSTRAINT [ORG_ORGANIZATION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ORGANIZATION_ID_SEQ]),
	[PRNT_ORGANIZATION_ID]          	bigint NULL,
	[REGION_CODE]                   	smallint NULL,
	[DISTRICT_CODE]                 	smallint NULL,
	[ORGANIZATION_TYPE_CODE]        	nvarchar(20) NULL,
	[ORG_IDENTIFIER_TYPE_CODE]      	nvarchar(20) NULL,
	[ORGANIZATION_IDENTIFIER]       	nvarchar(100) NULL,
	[ORGANIZATION_NAME]             	nvarchar(200) NOT NULL,
	[ORGANIZATION_ALIAS]            	nvarchar(200) NULL,
	[INCORPORATION_NUMBER]          	nvarchar(50) NULL,
	[WEBSITE]                       	nvarchar(200) NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [ORG_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [ORG_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ORG_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ORG_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ORG_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ORG_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ORG_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ORG_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ORG_PK] PRIMARY KEY CLUSTERED([ORGANIZATION_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Incorporation number of the orgnization' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ORGANIZATION', 
	@level2type = N'Column', @level2name = N'INCORPORATION_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Information related to an organization identified in the PSP system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ORGANIZATION'
GO

CREATE TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION]  ( 
	[ACCESS_REQUEST_ORGANIZATION_ID]	bigint NOT NULL CONSTRAINT [ACRQOR_ACCESS_REQUEST_ORGANIZATION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACCESS_REQUEST_ORGANIZATION_ID_SEQ]),
	[ORGANIZATION_ID]               	bigint NULL,
	[ACCESS_REQUEST_ID]             	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [ACRQOR_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [ACRQOR_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACRQOR_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACRQOR_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACRQOR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACRQOR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACRQOR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACRQOR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACRQOR_PK] PRIMARY KEY CLUSTERED([ACCESS_REQUEST_ORGANIZATION_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_HIST]  ( 
	[_ACCESS_REQUEST_ORGANIZATION_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                 	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                       	datetime NULL,
	[ACCESS_REQUEST_ORGANIZATION_ID]      	bigint NOT NULL,
	[ORGANIZATION_ID]                     	bigint NULL,
	[ACCESS_REQUEST_ID]                   	bigint NOT NULL,
	[IS_DISABLED]                         	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]          	bigint NULL,
	[APP_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[APP_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                 	datetime NOT NULL,
	[DB_CREATE_USERID]                    	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]               	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACRQOR_H_PK] PRIMARY KEY CLUSTERED([_ACCESS_REQUEST_ORGANIZATION_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ACQ_CHKLST_SECTION_TYPE]  ( 
	[ACQ_CHKLST_SECTION_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                 	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]               	int NULL,
	[EFFECTIVE_DATE]              	date NOT NULL CONSTRAINT [AQCSCT_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                 	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NULL CONSTRAINT [AQCSCT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [AQCSCT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [AQCSCT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [AQCSCT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [AQCSCT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AQCSCT_PK] PRIMARY KEY CLUSTERED([ACQ_CHKLST_SECTION_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Checklist section code value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'ACQ_CHKLST_SECTION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Checklist section descriptive text presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies the order that the checklist sections are presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the checklist section is able to be presented to the user via the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the checklist section is removed from the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the checklist sctions that are presented to the user through dynamically building the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_SECTION_TYPE'
GO

CREATE TABLE [dbo].[PIMS_ACQ_CHKLST_ITEM_TYPE]  ( 
	[ACQ_CHKLST_ITEM_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[ACQ_CHKLST_SECTION_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                 	nvarchar(200) NOT NULL,
	[HINT]                        	nvarchar(200) NULL,
	[IS_REQUIRED]                 	bit NULL CONSTRAINT [ACQCIT_IS_REQUIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]               	int NULL,
	[EFFECTIVE_DATE]              	date NOT NULL CONSTRAINT [ACQCIT_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                 	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NULL CONSTRAINT [ACQCIT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [ACQCIT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [ACQCIT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [ACQCIT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [ACQCIT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQCIT_PK] PRIMARY KEY CLUSTERED([ACQ_CHKLST_ITEM_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Checklist item code value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'ACQ_CHKLST_ITEM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Section to which the item belongs.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'ACQ_CHKLST_SECTION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Checklist item descriptive text presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Checklist item descriptive tooltip presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'HINT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the checklist item is a required field.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'IS_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies the order that the checklist items are presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the checklist item is able to be presented to the user via the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the checklist item is removed from the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the checklist items that are presented to the user through dynamically building the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_ITEM_TYPE'
GO

CREATE TABLE [dbo].[PIMS_ACQ_PHYS_FILE_STATUS_TYPE]  ( 
	[ACQ_PHYS_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [ACQPFS_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [ACQPFS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACQPFS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACQPFS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACQPFS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACQPFS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQPFS_PK] PRIMARY KEY CLUSTERED([ACQ_PHYS_FILE_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the acquistion physical file status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'ACQ_PHYS_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquistion physical file status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquistion physical file status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PHYS_FILE_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_STATUS_TYPE]  ( 
	[ACQUISITION_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                      	nvarchar(200) NOT NULL,
	[IS_DISABLED]                      	bit NOT NULL CONSTRAINT [ACQFST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                    	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NULL CONSTRAINT [ACQFST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [ACQFST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [ACQFST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [ACQFST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [ACQFST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQFST_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FILE_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the acquistion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquistion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquistion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FUNDING_TYPE]  ( 
	[ACQUISITION_FUNDING_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                  	nvarchar(200) NOT NULL,
	[IS_DISABLED]                  	bit NOT NULL CONSTRAINT [ACQFTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]   	bigint NULL CONSTRAINT [ACQFTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACQFTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACQFTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACQFTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACQFTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQFTY_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FUNDING_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the acquistion funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FUNDING_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquistion funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquistion funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FUNDING_TYPE'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_TYPE]  ( 
	[ACQUISITION_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [ACQTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [ACQTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ACQTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ACQTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [ACQTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [ACQTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQTYP_PK] PRIMARY KEY CLUSTERED([ACQUISITION_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the acquistion type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_TYPE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquistion type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquistion type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PRODUCT]  ( 
	[ID]                            	bigint NOT NULL CONSTRAINT [PRODCT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PRODUCT_ID_SEQ]),
	[CODE]                          	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[START_DATE]                    	datetime NULL,
	[COST_ESTIMATE]                 	money NULL,
	[COST_ESTIMATE_DATE]            	datetime NULL,
	[OBJECTIVE]                     	nvarchar(2000) NULL,
	[SCOPE]                         	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRODCT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRODCT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRODCT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRODCT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRODCT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRODCT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRODCT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRODCT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRODCT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRODCT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRODCT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRODCT_PK] PRIMARY KEY CLUSTERED([ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'System-generated primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PRODUCT', 
	@level2type = N'Column', @level2name = N'ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Product number.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PRODUCT', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Product description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PRODUCT', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Product start date.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PRODUCT', 
	@level2type = N'Column', @level2name = N'START_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Estimate cost of the product.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PRODUCT', 
	@level2type = N'Column', @level2name = N'COST_ESTIMATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the product cost was estimated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PRODUCT', 
	@level2type = N'Column', @level2name = N'COST_ESTIMATE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Product objective(s).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PRODUCT', 
	@level2type = N'Column', @level2name = N'OBJECTIVE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Product scope.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PRODUCT', 
	@level2type = N'Column', @level2name = N'SCOPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code and description of a project.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PRODUCT'
GO

CREATE TABLE [dbo].[PIMS_BUSINESS_FUNCTION_CODE]  ( 
	[ID]                            	bigint NOT NULL CONSTRAINT [BIZFCN_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_BUSINESS_FUNCTION_ID_SEQ]),
	[CODE]                          	nvarchar(20) NOT NULL CONSTRAINT [BIZFCN_CODE_DEF]  DEFAULT ('<Empty>'),
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL CONSTRAINT [BIZFCN_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [BIZFCN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BIZFCN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BIZFCN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [BIZFCN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BIZFCN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BIZFCN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [BIZFCN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [BIZFCN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [BIZFCN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [BIZFCN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [BIZFCN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [BIZFCN_PK] PRIMARY KEY CLUSTERED([ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'System-generated primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_BUSINESS_FUNCTION_CODE', 
	@level2type = N'Column', @level2name = N'ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_BUSINESS_FUNCTION_CODE', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive value  of a code within the set.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_BUSINESS_FUNCTION_CODE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_BUSINESS_FUNCTION_CODE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code became effective.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_BUSINESS_FUNCTION_CODE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code ceased to be in effect.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_BUSINESS_FUNCTION_CODE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code and description of the business function codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_BUSINESS_FUNCTION_CODE'
GO

CREATE TABLE [dbo].[PIMS_COST_TYPE_CODE]  ( 
	[ID]                            	bigint NOT NULL CONSTRAINT [COSTYP_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_COST_TYPE_ID_SEQ]),
	[CODE]                          	nvarchar(20) NOT NULL CONSTRAINT [COSTYP_CODE_DEF]  DEFAULT ('<Empty>'),
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL CONSTRAINT [COSTYP_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [COSTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [COSTYP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [COSTYP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [COSTYP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [COSTYP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [COSTYP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [COSTYP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [COSTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [COSTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [COSTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [COSTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [COSTYP_PK] PRIMARY KEY CLUSTERED([ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'System-generated primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COST_TYPE_CODE', 
	@level2type = N'Column', @level2name = N'ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COST_TYPE_CODE', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive value  of a code within the set.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COST_TYPE_CODE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COST_TYPE_CODE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code became effective.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COST_TYPE_CODE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code ceased to be in effect.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COST_TYPE_CODE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code and description of the cost type codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COST_TYPE_CODE'
GO

CREATE TABLE [dbo].[PIMS_PROJECT_STATUS_TYPE]  ( 
	[PROJECT_STATUS_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PRJSTS_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [PRJSTS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRJSTS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRJSTS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PRJSTS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PRJSTS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRJSTY_PK] PRIMARY KEY CLUSTERED([PROJECT_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the project status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'PROJECT_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the project status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the project status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_WORK_ACTIVITY_CODE]  ( 
	[ID]                            	bigint NOT NULL CONSTRAINT [WRKACT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_WORK_ACTIVITY_ID_SEQ]),
	[CODE]                          	nvarchar(20) NOT NULL CONSTRAINT [WRKACT_CODE_DEF]  DEFAULT ('<Empty>'),
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL CONSTRAINT [WRKACT_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [WRKACT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [WRKACT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [WRKACT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [WRKACT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [WRKACT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [WRKACT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [WRKACT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [WRKACT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [WRKACT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [WRKACT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [WRKACT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [WRKACT_PK] PRIMARY KEY CLUSTERED([ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'System-generated primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_WORK_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_WORK_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive value  of a code within the set.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_WORK_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_WORK_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code became effective.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_WORK_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code ceased to be in effect.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_WORK_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code and description of the work activity codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_WORK_ACTIVITY_CODE'
GO

CREATE TABLE [dbo].[PIMS_PROJECT]  ( 
	[ID]                            	bigint NOT NULL CONSTRAINT [PROJCT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_ID_SEQ]),
	[PROJECT_STATUS_TYPE_CODE]      	nvarchar(20) NOT NULL CONSTRAINT [PROJCT_PROJECT_STATUS_TYPE_CODE_DEF]  DEFAULT ('AC'),
	[BUSINESS_FUNCTION_CODE_ID]     	bigint NULL,
	[COST_TYPE_CODE_ID]             	bigint NULL,
	[WORK_ACTIVITY_CODE_ID]         	bigint NULL,
	[REGION_CODE]                   	smallint NOT NULL CONSTRAINT [PROJCT_REGION_CODE_DEF]  DEFAULT ((4)),
	[CODE]                          	nvarchar(20) NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL CONSTRAINT [PROJCT_DESCRIPTION_DEF]  DEFAULT ('<Empty>'),
	[NOTE]                          	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PROJCT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PROJCT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PROJCT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PROJCT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PROJCT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PROJCT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PROJCT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PROJCT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PROJCT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PROJCT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PROJCT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PROJCT_PK] PRIMARY KEY CLUSTERED([ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'System-generated primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT', 
	@level2type = N'Column', @level2name = N'ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Project number.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Project description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive note relevant to the project.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT', 
	@level2type = N'Column', @level2name = N'NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code and description of a project.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT'
GO

CREATE TABLE [dbo].[PIMS_SUBFILE_INTEREST_TYPE]  ( 
	[SUBFILE_INTEREST_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [SBFLIT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [SBFLIT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [SBFLIT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [SBFLIT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [SBFLIT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [SBFLIT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SBFLIT_PK] PRIMARY KEY CLUSTERED([SUBFILE_INTEREST_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the subfile interest type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'SUBFILE_INTEREST_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the subfile interest type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the subfile interest type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SUBFILE_INTEREST_TYPE'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE]  ( 
	[ACQUISITION_FILE_ID]              	bigint NOT NULL CONSTRAINT [ACQNFL_ACQUISITION_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_ID_SEQ]),
	[PRNT_ACQUISITION_FILE_ID]         	bigint NULL,
	[PROJECT_ID]                       	bigint NULL,
	[PRODUCT_ID]                       	bigint NULL,
	[ACQUISITION_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[ACQUISITION_TYPE_CODE]            	nvarchar(20) NOT NULL,
	[ACQUISITION_FUNDING_TYPE_CODE]    	nvarchar(20) NULL,
	[ACQ_PHYS_FILE_STATUS_TYPE_CODE]   	nvarchar(20) NULL,
	[REGION_CODE]                      	smallint NOT NULL CONSTRAINT [ACQNFL_REGION_CODE_DEF]  DEFAULT ((-1)),
	[SUBFILE_INTEREST_TYPE_CODE]       	nvarchar(20) NULL,
	[FILE_NAME]                        	nvarchar(500) NOT NULL,
	[FILE_NO]                          	int NOT NULL CONSTRAINT [ACQNFL_FILE_NO_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_NO_SEQ]),
	[FILE_NUM_SUFFIX]                  	nvarchar(2) NOT NULL CONSTRAINT [ACQNFL_FILE_NUM_SUFFIX_DEF]  DEFAULT ('00'),
	[LEGACY_FILE_NUMBER]               	nvarchar(18) NULL,
	[LEGACY_STAKEHOLDER]               	nvarchar(4000) NULL,
	[FUNDING_OTHER]                    	nvarchar(200) NULL,
	[ASSIGNED_DATE]                    	datetime NULL CONSTRAINT [ACQNFL_ASSIGNED_DATE_DEF]  DEFAULT (getutcdate()),
	[DELIVERY_DATE]                    	datetime NULL,
	[PAIMS_ACQUISITION_FILE_ID]        	int NULL,
	[TOTAL_ALLOWABLE_COMPENSATION]     	money NULL,
	[OTHER_SUBFILE_INTEREST_TYPE]      	nvarchar(200) NULL,
	[EST_COMPLETION_DT]                	datetime NULL,
	[POSSESSION_DT]                    	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NULL CONSTRAINT [ACQNFL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [ACQNFL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [ACQNFL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [ACQNFL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [ACQNFL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQNFL_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FILE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Link to the parent acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'PRNT_ACQUISITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_PROJECT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'PROJECT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_PRODUCT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'PRODUCT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQUISITION_FILE_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQUISITION_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQUISITION_FUNDING_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FUNDING_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQ_PHYS_FILE_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ACQ_PHYS_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Region responsible for oversight of the acquisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'REGION_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_SUBFILE_INTEREST_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'SUBFILE_INTEREST_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive name given to the acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'FILE_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'File number assigned to the acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'FILE_NO'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Acquisition file number suffix' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'FILE_NUM_SUFFIX'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Legacy formatted file number assigned to the acquisition file.  Format follows YY-XXXXXX-ZZ where YY = MoTI region number, XXXXXX = generated integer sequence number,  and ZZ = file suffix number (defaulting to ''01'').   Required due to some files having t' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'LEGACY_FILE_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Legacy stakeholders imported from PAIMS.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'LEGACY_STAKEHOLDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of other funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'FUNDING_OTHER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of file assignment.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ASSIGNED_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of file delivery.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DELIVERY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Legacy Acquisition File ID from the PAIMS system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'PAIMS_ACQUISITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The maximum allowable compensation for the acquisition file.  This amount should not be exceeded by the total of all assiciated H120''s.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'TOTAL_ALLOWABLE_COMPENSATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'If the user selects ?Other? then they will need to provide a subfile type description, which will be displayed as ''Other - <description>' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'OTHER_SUBFILE_INTEREST_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Estimated date by which the acquisition would be completed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'EST_COMPLETION_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of possession following acquisition completion.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'POSSESSION_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity containing information regarding an acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE'
GO

CREATE TABLE [dbo].[PIMS_CHKLST_ITEM_STATUS_TYPE]  ( 
	[CHKLST_ITEM_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                 	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]               	int NULL,
	[IS_DISABLED]                 	bit NOT NULL CONSTRAINT [CHKLIS_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NULL CONSTRAINT [CHKLIS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [CHKLIS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [CHKLIS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [CHKLIS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [CHKLIS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CHKLIS_PK] PRIMARY KEY CLUSTERED([CHKLST_ITEM_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the various checklist item status types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CHKLST_ITEM_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the various checklist item status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Common table that contains the codes and associated descriptions of the various checklist item status types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHKLST_ITEM_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM]  ( 
	[ACQUISITION_CHECKLIST_ITEM_ID] 	bigint NOT NULL CONSTRAINT [ACQCKI_ACQUISITION_CHECKLIST_ITEM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_CHECKLIST_ITEM_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[ACQ_CHKLST_ITEM_TYPE_CODE]     	nvarchar(20) NULL,
	[CHKLST_ITEM_STATUS_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [ACQCKI_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACQCKI_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACQCKI_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACQCKI_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACQCKI_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACQCKI_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACQCKI_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACQCKI_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACQCKI_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACQCKI_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACQCKI_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQCKI_PK] PRIMARY KEY CLUSTERED([ACQUISITION_CHECKLIST_ITEM_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_CHKLST_ITEM_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'CHKLST_ITEM_STATUS_TYPE_CODE'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM_HIST]  ( 
	[_ACQUISITION_CHECKLIST_ITEM_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_CHECKLIST_ITEM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[ACQUISITION_CHECKLIST_ITEM_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]                	bigint NOT NULL,
	[ACQ_CHKLST_ITEM_TYPE_CODE]          	nvarchar(20) NULL,
	[CHKLST_ITEM_STATUS_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQCKI_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_CHECKLIST_ITEM_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DOCUMENT_STATUS_TYPE]  ( 
	[DOCUMENT_STATUS_TYPE_CODE] 	nvarchar(20) NOT NULL CONSTRAINT [DOCSTY_DOCUMENT_STATUS_TYPE_CODE_DEF]  DEFAULT ('NEXT VALUE FOR [PIMS_DOCUMENT_ID_SEQ]'),
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [DOCSTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [DOCSTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [DOCSTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [DOCSTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [DOCSTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [DOCSTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DOCSTY_PK] PRIMARY KEY CLUSTERED([DOCUMENT_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the document status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive translation of the document status type code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is still in use.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Determines the default display order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table describing the available document types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DOCUMENT_TYP]  ( 
	[DOCUMENT_TYPE_ID]              	bigint NOT NULL CONSTRAINT [DOCTYP_DOCUMENT_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DOCUMENT_TYPE_ID_SEQ]),
	[MAYAN_ID]                      	bigint NOT NULL CONSTRAINT [DOCTYP_MAYAN_ID_DEF]  DEFAULT ((-1)),
	[DOCUMENT_TYPE]                 	nvarchar(20) NOT NULL CONSTRAINT [DOCTYP_DOCUMENT_TYPE_DEF]  DEFAULT ('<Empty>'),
	[DOCUMENT_TYPE_DESCRIPTION]     	nvarchar(200) NOT NULL CONSTRAINT [DOCTYP_DOCUMENT_TYPE_DESCRIPTION_DEF]  DEFAULT ('<Empty>'),
	[DOCUMENT_TYPE_DEFINITION]      	nvarchar(500) NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [DOCTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [DOCTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DOCTYP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DOCTYP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DOCTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DOCTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DOCTYP_PK] PRIMARY KEY CLUSTERED([DOCUMENT_TYPE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Mayan-generated document type number used for retrieval from Mayan EDMS.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_TYP', 
	@level2type = N'Column', @level2name = N'MAYAN_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the available document types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_TYP', 
	@level2type = N'Column', @level2name = N'DOCUMENT_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the available document types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_TYP', 
	@level2type = N'Column', @level2name = N'DOCUMENT_TYPE_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the purpose of the document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_TYP', 
	@level2type = N'Column', @level2name = N'DOCUMENT_TYPE_DEFINITION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is still in use.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_TYP', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Determines the default display order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_TYP', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table describing the available document types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_TYP'
GO

CREATE TABLE [dbo].[PIMS_DOCUMENT]  ( 
	[DOCUMENT_ID]                   	bigint NOT NULL CONSTRAINT [DOCMNT_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DOCUMENT_ID_SEQ]),
	[DOCUMENT_TYPE_ID]              	bigint NOT NULL,
	[DOCUMENT_STATUS_TYPE_CODE]     	nvarchar(20) NOT NULL CONSTRAINT [DOCMNT_DOCUMENT_STATUS_TYPE_CODE_DEF]  DEFAULT ('NONE'),
	[FILE_NAME]                     	nvarchar(500) NOT NULL CONSTRAINT [DOCMNT_FILE_NAME_DEF]  DEFAULT ('<Empty>'),
	[MAYAN_ID]                      	bigint NOT NULL CONSTRAINT [DOCMNT_MAYAN_ID_DEF]  DEFAULT ((-1)),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [DOCMNT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DOCMNT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DOCMNT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DOCMNT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DOCMNT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[DOCUMENT_EXTERNAL_ID]          	nvarchar(1000) NULL,
	CONSTRAINT [DOCMNT_PK] PRIMARY KEY CLUSTERED([DOCUMENT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the file stored on Mayan EDMS.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT', 
	@level2type = N'Column', @level2name = N'FILE_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Mayan-generated document number used for retrieval from Mayan EDMS.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT', 
	@level2type = N'Column', @level2name = N'MAYAN_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Fluid key used to uniquely identify document in external system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DOCUMENT_EXTERNAL_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table describing the available document types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT]  ( 
	[ACQUISITION_FILE_DOCUMENT_ID]  	bigint NOT NULL CONSTRAINT [ACQDOC_ACQUISITION_FILE_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_DOCUMENT_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [ACQDOC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACQDOC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACQDOC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACQDOC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACQDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACQDOC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACQDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACQDOC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACQDOC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACQDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACQDOC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQDOC_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FILE_DOCUMENT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the relationship between an acquisition file and a document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_DOCUMENT'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT_HIST]  ( 
	[_ACQUISITION_FILE_DOCUMENT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[ACQUISITION_FILE_DOCUMENT_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]               	bigint NOT NULL,
	[DOCUMENT_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQDOC_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_FILE_DOCUMENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_FORM_TYPE]  ( 
	[FORM_TYPE_CODE]            	nvarchar(20) NOT NULL,
	[DOCUMENT_ID]               	bigint NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [FRMTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [FRMTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [FRMTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [FRMTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [FRMTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [FRMTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [FRMTYP_PK] PRIMARY KEY CLUSTERED([FORM_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the form type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_TYPE', 
	@level2type = N'Column', @level2name = N'FORM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the form type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the form types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_TYPE'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_FORM]  ( 
	[ACQUISITION_FILE_FORM_ID]      	bigint NOT NULL CONSTRAINT [ACQFRM_ACQUISITION_FILE_FORM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_FORM_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[FORM_TYPE_CODE]                	nvarchar(20) NOT NULL,
	[FORM_JSON]                     	nvarchar(4000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [ACQFRM_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACQFRM_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACQFRM_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACQFRM_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACQFRM_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACQFRM_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACQFRM_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACQFRM_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACQFRM_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACQFRM_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACQFRM_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQFRM_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FILE_FORM_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity associating a form to an acquisition file.  The acquisition file can have multiple forms.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_FORM'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_FORM_HIST]  ( 
	[_ACQUISITION_FILE_FORM_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_FORM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ACQUISITION_FILE_FORM_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[FORM_TYPE_CODE]                	nvarchar(20) NOT NULL,
	[FORM_JSON]                     	nvarchar(4000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQFRM_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_FILE_FORM_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST]  ( 
	[_ACQUISITION_FILE_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]              	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                    	datetime NULL,
	[ACQUISITION_FILE_ID]              	bigint NOT NULL,
	[PRNT_ACQUISITION_FILE_ID]         	bigint NULL,
	[PROJECT_ID]                       	bigint NULL,
	[PRODUCT_ID]                       	bigint NULL,
	[ACQUISITION_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[ACQUISITION_TYPE_CODE]            	nvarchar(20) NOT NULL,
	[ACQUISITION_FUNDING_TYPE_CODE]    	nvarchar(20) NULL,
	[ACQ_PHYS_FILE_STATUS_TYPE_CODE]   	nvarchar(20) NULL,
	[REGION_CODE]                      	smallint NOT NULL,
	[SUBFILE_INTEREST_TYPE_CODE]       	nvarchar(20) NULL,
	[FILE_NAME]                        	nvarchar(500) NOT NULL,
	[FILE_NO]                          	int NOT NULL,
	[FILE_NUM_SUFFIX]                  	nvarchar(2) NOT NULL,
	[LEGACY_FILE_NUMBER]               	nvarchar(18) NULL,
	[LEGACY_STAKEHOLDER]               	nvarchar(4000) NULL,
	[FUNDING_OTHER]                    	nvarchar(200) NULL,
	[ASSIGNED_DATE]                    	datetime NULL,
	[DELIVERY_DATE]                    	datetime NULL,
	[PAIMS_ACQUISITION_FILE_ID]        	int NULL,
	[TOTAL_ALLOWABLE_COMPENSATION]     	money NULL,
	[OTHER_SUBFILE_INTEREST_TYPE]      	nvarchar(200) NULL,
	[EST_COMPLETION_DT]                	datetime NULL,
	[POSSESSION_DT]                    	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NULL,
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQNFL_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_FILE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_NOTE]  ( 
	[NOTE_ID]                       	bigint NOT NULL CONSTRAINT [NOTE_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_NOTE_ID_SEQ]),
	[NOTE_TXT]                      	nvarchar(4000) NOT NULL CONSTRAINT [NOTE_NOTE_TXT_DEF]  DEFAULT ('<Empty>'),
	[IS_SYSTEM_GENERATED]           	bit NOT NULL CONSTRAINT [NOTE_IS_SYSTEM_GENERATED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [NOTE_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [NOTE_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [NOTE_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [NOTE_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [NOTE_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [NOTE_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [NOTE_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [NOTE_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [NOTE_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [NOTE_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [NOTE_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [NOTE_PK] PRIMARY KEY CLUSTERED([NOTE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Contents of the note.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_NOTE', 
	@level2type = N'Column', @level2name = N'NOTE_TXT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicatesd if this note is system-generated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_NOTE', 
	@level2type = N'Column', @level2name = N'IS_SYSTEM_GENERATED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table to contain all applicable notes for the PIMS PSP system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_NOTE'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_NOTE]  ( 
	[ACQUISITION_FILE_NOTE_ID]      	bigint NOT NULL CONSTRAINT [ACQNOT_ACQUISITION_FILE_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_NOTE_ID_SEQ]),
	[NOTE_ID]                       	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [ACQNOT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACQNOT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACQNOT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACQNOT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACQNOT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACQNOT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACQNOT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACQNOT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACQNOT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACQNOT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACQNOT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQNOT_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FILE_NOTE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the relationship between an acquisition file and a note.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_NOTE'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_NOTE_HIST]  ( 
	[_ACQUISITION_FILE_NOTE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_NOTE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ACQUISITION_FILE_NOTE_ID]      	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQNOT_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_FILE_NOTE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ACQ_FL_TEAM_PROFILE_TYPE]  ( 
	[ACQ_FL_TEAM_PROFILE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                  	nvarchar(200) NOT NULL,
	[IS_DISABLED]                  	bit NOT NULL CONSTRAINT [AQFPPT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]   	bigint NULL CONSTRAINT [AQFPPT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [AQFPPT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [AQFPPT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [AQFPPT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [AQFPPT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AQTPPT_PK] PRIMARY KEY CLUSTERED([ACQ_FL_TEAM_PROFILE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the acquistion file staff/org profile (role).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'ACQ_FL_TEAM_PROFILE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquistion file staff/org profile (role).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquistion file staff profile (role).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_TEAM_PROFILE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_TEAM]  ( 
	[ACQUISITION_FILE_TEAM_ID]      	bigint NOT NULL CONSTRAINT [ACQNTM_ACQUISITION_FILE_TEAM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_TEAM_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[ACQ_FL_TEAM_PROFILE_TYPE_CODE] 	nvarchar(20) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [ACQPER_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACQPER_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACQPER_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACQPER_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACQPER_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQNTM_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FILE_TEAM_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the team member' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the team member''s organization' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'ORGANIZATION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary contact for the organization' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'PRIMARY_CONTACT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table to associate an acquisition file to a person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_TEAM'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_TEAM_HIST]  ( 
	[_ACQUISITION_FILE_TEAM_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_TEAM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ACQUISITION_FILE_TEAM_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[ACQ_FL_TEAM_PROFILE_TYPE_CODE] 	nvarchar(20) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQNTM_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_FILE_TEAM_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_COUNTRY]  ( 
	[COUNTRY_ID]                	smallint NOT NULL,
	[COUNTRY_CODE]              	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [CNTRY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [CNTRY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [CNTRY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [CNTRY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [CNTRY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CNTRY_PK] PRIMARY KEY CLUSTERED([COUNTRY_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Abbreviated country code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COUNTRY', 
	@level2type = N'Column', @level2name = N'COUNTRY_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Country name/description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COUNTRY', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COUNTRY', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing the countries defined to the system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COUNTRY'
GO

CREATE TABLE [dbo].[PIMS_PROVINCE_STATE]  ( 
	[PROVINCE_STATE_ID]         	smallint NOT NULL,
	[COUNTRY_ID]                	smallint NOT NULL,
	[PROVINCE_STATE_CODE]       	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PROVNC_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [PROVNC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PROVNC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PROVNC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PROVNC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PROVNC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PROVNC_PK] PRIMARY KEY CLUSTERED([PROVINCE_STATE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Abbreviated province.state code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROVINCE_STATE', 
	@level2type = N'Column', @level2name = N'PROVINCE_STATE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Full name/description of the provbince/state.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROVINCE_STATE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if this code is disabled or enabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROVINCE_STATE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROVINCE_STATE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing the provinces and states that are defined for the system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROVINCE_STATE'
GO

CREATE TABLE [dbo].[PIMS_ADDRESS]  ( 
	[ADDRESS_ID]                    	bigint NOT NULL CONSTRAINT [ADDRSS_ADDRESS_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ADDRESS_ID_SEQ]),
	[REGION_CODE]                   	smallint NULL,
	[DISTRICT_CODE]                 	smallint NULL,
	[PROVINCE_STATE_ID]             	smallint NULL,
	[COUNTRY_ID]                    	smallint NULL,
	[STREET_ADDRESS_1]              	nvarchar(200) NULL,
	[STREET_ADDRESS_2]              	nvarchar(200) NULL,
	[STREET_ADDRESS_3]              	nvarchar(200) NULL,
	[MUNICIPALITY_NAME]             	nvarchar(200) NULL,
	[POSTAL_CODE]                   	nvarchar(20) NULL,
	[OTHER_COUNTRY]                 	nvarchar(200) NULL,
	[LATITUDE]                      	numeric(8,6) NULL,
	[LONGITUDE]                     	numeric(9,6) NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [ADDRSS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ADDRSS_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ADDRSS_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ADDRSS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ADDRSS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ADDRSS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ADDRSS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ADDRSS_PK] PRIMARY KEY CLUSTERED([ADDRESS_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Other country not listed in drop-down list' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ADDRESS', 
	@level2type = N'Column', @level2name = N'OTHER_COUNTRY'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_OWNER]  ( 
	[ACQUISITION_OWNER_ID]          	bigint NOT NULL CONSTRAINT [ACQOWN_ACQUISITION_OWNER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_OWNER_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NULL,
	[ADDRESS_ID]                    	bigint NULL,
	[IS_PRIMARY_OWNER]              	bit NOT NULL CONSTRAINT [ACQOWN_IS_PRIMARY_OWNER_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_ORGANIZATION]               	bit NOT NULL CONSTRAINT [ACQOWN_IS_ORGANIZATION_DEF]  DEFAULT (CONVERT([bit],(0))),
	[LAST_NAME_AND_CORP_NAME]       	nvarchar(300) NULL,
	[OTHER_NAME]                    	nvarchar(300) NULL,
	[GIVEN_NAME]                    	nvarchar(300) NULL,
	[INCORPORATION_NUMBER]          	nvarchar(50) NULL,
	[REGISTRATION_NUMBER]           	nvarchar(50) NULL,
	[CONTACT_EMAIL_ADDR]            	nvarchar(250) NULL,
	[CONTACT_PHONE_NUM]             	nvarchar(20) NULL,
	[EFFECTIVE_DATE]                	datetime NULL CONSTRAINT [ACQOWN_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [ACQOWN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACQOWN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACQOWN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACQOWN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACQOWN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQOWN_PK] PRIMARY KEY CLUSTERED([ACQUISITION_OWNER_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates that this is the file''s primary owner.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'IS_PRIMARY_OWNER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the owner is an organization.  Default value is FALSE, indicating that the owner is a person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'IS_ORGANIZATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the owner (person or organization).  If person, surname.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'LAST_NAME_AND_CORP_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Optional name field if required.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'OTHER_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Given name of the owner (person).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'GIVEN_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Incorporation number of the organization.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'INCORPORATION_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Registration number of the organization.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'REGISTRATION_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Email address to be used for contacting the owner.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'CONTACT_EMAIL_ADDR'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Phone number to be used for contacting the owner.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'CONTACT_PHONE_NUM'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the owner record became effective. Defaults to current date/time.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the owner record expired.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity containing information regarding the owner of an acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST]  ( 
	[_ACQUISITION_OWNER_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_OWNER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ACQUISITION_OWNER_ID]          	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NULL,
	[ADDRESS_ID]                    	bigint NULL,
	[IS_PRIMARY_OWNER]              	bit NOT NULL,
	[IS_ORGANIZATION]               	bit NOT NULL,
	[LAST_NAME_AND_CORP_NAME]       	nvarchar(300) NULL,
	[OTHER_NAME]                    	nvarchar(300) NULL,
	[GIVEN_NAME]                    	nvarchar(300) NULL,
	[INCORPORATION_NUMBER]          	nvarchar(50) NULL,
	[REGISTRATION_NUMBER]           	nvarchar(50) NULL,
	[CONTACT_EMAIL_ADDR]            	nvarchar(250) NULL,
	[CONTACT_PHONE_NUM]             	nvarchar(20) NULL,
	[EFFECTIVE_DATE]                	datetime NULL,
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQOWN_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_OWNER_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ADDRESS_HIST]  ( 
	[_ADDRESS_HIST_ID]              	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ADDRESS_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ADDRESS_ID]                    	bigint NOT NULL,
	[REGION_CODE]                   	smallint NULL,
	[DISTRICT_CODE]                 	smallint NULL,
	[PROVINCE_STATE_ID]             	smallint NULL,
	[COUNTRY_ID]                    	smallint NULL,
	[STREET_ADDRESS_1]              	nvarchar(200) NULL,
	[STREET_ADDRESS_2]              	nvarchar(200) NULL,
	[STREET_ADDRESS_3]              	nvarchar(200) NULL,
	[MUNICIPALITY_NAME]             	nvarchar(200) NULL,
	[POSTAL_CODE]                   	nvarchar(20) NULL,
	[OTHER_COUNTRY]                 	nvarchar(200) NULL,
	[LATITUDE]                      	numeric(18,0) NULL,
	[LONGITUDE]                     	numeric(18,0) NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ADDRSS_H_PK] PRIMARY KEY CLUSTERED([_ADDRESS_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ADDRESS_USAGE_TYPE]  ( 
	[ADDRESS_USAGE_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [ADUSGT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [ADUSGT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ADUSGT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ADUSGT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [ADUSGT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [ADUSGT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ADUSGT_PK] PRIMARY KEY CLUSTERED([ADDRESS_USAGE_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_AGREEMENT_STATUS_TYPE]  ( 
	[AGREEMENT_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[IS_DISABLED]               	bit NULL CONSTRAINT [AGRSTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [AGRSTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [AGRSTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [AGRSTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [AGRSTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [AGRSTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AGRSTY_PK] PRIMARY KEY CLUSTERED([AGREEMENT_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the agreement status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'AGREEMENT_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the agreement status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the codes and associated descriptions of the agreement types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_AGREEMENT_TYPE]  ( 
	[AGREEMENT_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[IS_DISABLED]               	bit NULL CONSTRAINT [AGRTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [AGRTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [AGRTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [AGRTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [AGRTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [AGRTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AGRTYP_PK] PRIMARY KEY CLUSTERED([AGREEMENT_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the agreement type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'AGREEMENT_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the agreement type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the codes and associated descriptions of the agreement types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT_TYPE'
GO

CREATE TABLE [dbo].[PIMS_AGREEMENT]  ( 
	[AGREEMENT_ID]                  	bigint NOT NULL CONSTRAINT [AGRMNT_AGREEMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_AGREEMENT_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[AGREEMENT_TYPE_CODE]           	nvarchar(20) NOT NULL,
	[AGREEMENT_STATUS_TYPE_CODE]    	nvarchar(20) NOT NULL CONSTRAINT [AGRMNT_AGREEMENT_STATUS_TYPE_CODE_DEF]  DEFAULT ('DRAFT'),
	[AGREEMENT_DATE]                	date NULL,
	[COMPLETION_DATE]               	date NULL,
	[TERMINATION_DATE]              	date NULL,
	[COMMENCEMENT_DATE]             	date NULL,
	[DEPOSIT_AMOUNT]                	money NULL,
	[NO_LATER_THAN_DAYS]            	int NULL,
	[PURCHASE_PRICE]                	money NULL,
	[LEGAL_SURVEY_PLAN_NUM]         	nvarchar(250) NULL,
	[OFFER_DATE]                    	date NULL,
	[EXPIRY_TS]                     	datetime NULL,
	[SIGNED_DATE]                   	date NULL,
	[INSPECTION_DATE]               	date NULL,
	[EXPROPRIATION_DATE]            	date NULL,
	[POSSESSION_DATE]               	date NULL,
	[CANCELLATION_NOTE]             	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [AGRMNT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [AGRMNT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [AGRMNT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [AGRMNT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [AGRMNT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [AGRMNT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [AGRMNT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [AGRMNT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [AGRMNT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [AGRMNT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [AGRMNT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AGRMNT_PK] PRIMARY KEY CLUSTERED([AGREEMENT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of the agreement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'AGREEMENT_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of completion of the agreement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'COMPLETION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of termination of the agreement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'TERMINATION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of commencement of the agreement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'COMMENCEMENT_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Amount of the deposit on the agreement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'DEPOSIT_AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Deposit due date' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'NO_LATER_THAN_DAYS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Amount of the purchase price of the agreement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'PURCHASE_PRICE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Legal survey plan number,' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'LEGAL_SURVEY_PLAN_NUM'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of acquisition offer.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'OFFER_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Expiry date and time of acquisition offer.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'EXPIRY_TS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Signed date of acquisition offer.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'SIGNED_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of inspection.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'INSPECTION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of expropriation of the property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'EXPROPRIATION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of possession of the property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'POSSESSION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Note pertaining to the cancellation of the agreement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'CANCELLATION_NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing the details of the acquisition agreement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT'
GO

CREATE TABLE [dbo].[PIMS_AGREEMENT_HIST]  ( 
	[_AGREEMENT_HIST_ID]            	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_AGREEMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[AGREEMENT_ID]                  	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[AGREEMENT_TYPE_CODE]           	nvarchar(20) NOT NULL,
	[AGREEMENT_STATUS_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[AGREEMENT_DATE]                	date NULL,
	[COMPLETION_DATE]               	date NULL,
	[TERMINATION_DATE]              	date NULL,
	[COMMENCEMENT_DATE]             	date NULL,
	[DEPOSIT_AMOUNT]                	money NULL,
	[NO_LATER_THAN_DAYS]            	int NULL,
	[PURCHASE_PRICE]                	money NULL,
	[LEGAL_SURVEY_PLAN_NUM]         	nvarchar(250) NULL,
	[OFFER_DATE]                    	date NULL,
	[EXPIRY_TS]                     	datetime NULL,
	[SIGNED_DATE]                   	date NULL,
	[INSPECTION_DATE]               	date NULL,
	[EXPROPRIATION_DATE]            	date NULL,
	[POSSESSION_DATE]               	date NULL,
	[CANCELLATION_NOTE]             	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_AGRMNT_H_PK] PRIMARY KEY CLUSTERED([_AGREEMENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_AREA_UNIT_TYPE]  ( 
	[AREA_UNIT_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [ARUNIT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [ARUNIT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ARUNIT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ARUNIT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [ARUNIT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [ARUNIT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ARUNIT_PK] PRIMARY KEY CLUSTERED([AREA_UNIT_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The area unit used for measuring Properties.  The units must be in metric: square metres or hectares.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AREA_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'AREA_UNIT_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Translation of the code value into a description that can be displayed to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AREA_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is still active or is now disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AREA_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Order in which to display the code values, if required.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AREA_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The area unit used for measuring Properties.  The units must be in metric: square metres or hectares.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AREA_UNIT_TYPE'
GO

CREATE TABLE [dbo].[PIMS_BUSINESS_FUNCTION_CODE_HIST]  ( 
	[_BUSINESS_FUNCTION_CODE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_BUSINESS_FUNCTION_CODE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[ID]                             	bigint NOT NULL,
	[CODE]                           	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                  	int NULL,
	[EFFECTIVE_DATE]                 	datetime NOT NULL,
	[EXPIRY_DATE]                    	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_BIZFCN_H_PK] PRIMARY KEY CLUSTERED([_BUSINESS_FUNCTION_CODE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_CHART_OF_ACCOUNTS_CODE]  ( 
	[ID]                            	bigint NOT NULL CONSTRAINT [CHRTAC_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_CHART_OF_ACCOUNTS_ID_SEQ]),
	[CODE]                          	nvarchar(20) NOT NULL CONSTRAINT [CHRTAC_CODE_DEF]  DEFAULT ('<Empty>'),
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL CONSTRAINT [CHRTAC_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [CHRTAC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [CHRTAC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [CHRTAC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [CHRTAC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [CHRTAC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [CHRTAC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [CHRTAC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [CHRTAC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [CHRTAC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [CHRTAC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [CHRTAC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CHRTAC_PK] PRIMARY KEY CLUSTERED([ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'System-generated primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHART_OF_ACCOUNTS_CODE', 
	@level2type = N'Column', @level2name = N'ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHART_OF_ACCOUNTS_CODE', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive value  of a code within the set.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHART_OF_ACCOUNTS_CODE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHART_OF_ACCOUNTS_CODE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code became effective.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHART_OF_ACCOUNTS_CODE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code ceased to be in effect.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHART_OF_ACCOUNTS_CODE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code and description of the chart of accounts codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CHART_OF_ACCOUNTS_CODE'
GO

CREATE TABLE [dbo].[PIMS_CHART_OF_ACCOUNTS_CODE_HIST]  ( 
	[_CHART_OF_ACCOUNTS_CODE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_CHART_OF_ACCOUNTS_CODE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[ID]                             	bigint NOT NULL,
	[CODE]                           	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                  	int NULL,
	[EFFECTIVE_DATE]                 	datetime NOT NULL,
	[EXPIRY_DATE]                    	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_CHRTAC_H_PK] PRIMARY KEY CLUSTERED([_CHART_OF_ACCOUNTS_CODE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_CLAIM]  ( 
	[CLAIM_ID]                      	bigint NOT NULL CONSTRAINT [CLMTYP_CLAIM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_CLAIM_ID_SEQ]),
	[CLAIM_UID]                     	uniqueidentifier NOT NULL,
	[KEYCLOAK_ROLE_ID]              	uniqueidentifier NULL,
	[NAME]                          	nvarchar(100) NOT NULL,
	[DESCRIPTION]                   	nvarchar(500) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [CLMTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [CLMTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [CLMTYP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [CLMTYP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [CLMTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [CLMTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [CLMTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [CLMTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CLMTYP_PK] PRIMARY KEY CLUSTERED([CLAIM_ID])
)
GO

CREATE TABLE [dbo].[PIMS_CLAIM_HIST]  ( 
	[_CLAIM_HIST_ID]                	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_CLAIM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[CLAIM_ID]                      	bigint NOT NULL,
	[CLAIM_UID]                     	uniqueidentifier NOT NULL,
	[KEYCLOAK_ROLE_ID]              	uniqueidentifier NULL,
	[NAME]                          	nvarchar(100) NOT NULL,
	[DESCRIPTION]                   	nvarchar(500) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_CLMTYP_H_PK] PRIMARY KEY CLUSTERED([_CLAIM_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_INTEREST_HOLDER_TYPE]  ( 
	[INTEREST_HOLDER_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [INHLDT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [INHLDT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [INHLDT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [INHLDT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [INHLDT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [INHLDT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [INHLDT_PK] PRIMARY KEY CLUSTERED([INTEREST_HOLDER_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the interest holder types, such as solicitors, representatives, and interest holders.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'INTEREST_HOLDER_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the interest holder types, such as solicitors, representatives, and interest holders.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Tables that contains the codes and associated descriptions of the interest holder types, such as solicitors, representatives, and interest holders.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_TYPE'
GO

CREATE TABLE [dbo].[PIMS_INTEREST_HOLDER]  ( 
	[INTEREST_HOLDER_ID]            	bigint NOT NULL CONSTRAINT [INTHLD_INTEREST_HOLDER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_INTEREST_HOLDER_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[INTEREST_HOLDER_TYPE_CODE]     	nvarchar(20) NOT NULL CONSTRAINT [INTHLD_INTEREST_HOLDER_TYPE_CODE_DEF]  DEFAULT ('INTHLDR'),
	[COMMENT]                       	nvarchar(2000) NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [INTHLD_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [INTHLD_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [INTHLD_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [INTHLD_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [INTHLD_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [INTHLD_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [INTHLD_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [INTHLD_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [INTHLD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [INTHLD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [INTHLD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [INTHLD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [INTHLD_PK] PRIMARY KEY CLUSTERED([INTEREST_HOLDER_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary contact for the organization' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER', 
	@level2type = N'Column', @level2name = N'PRIMARY_CONTACT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Additional comment concerning the owener representative.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER', 
	@level2type = N'Column', @level2name = N'COMMENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Documents the interest holders that have an stake in the acquisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER'
GO

CREATE TABLE [dbo].[PIMS_LEASE_INITIATOR_TYPE]  ( 
	[LEASE_INITIATOR_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LINITT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [LINITT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LINITT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LINITT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LINITT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LINITT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LINITT_PK] PRIMARY KEY CLUSTERED([LEASE_INITIATOR_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the initiator of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_INITIATOR_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_INITIATOR_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the initiator of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_INITIATOR_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the initiator of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_INITIATOR_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_LICENSE_TYPE]  ( 
	[LEASE_LICENSE_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LELIST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [LELIST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LELIST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LELIST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LELIST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LELIST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LELIST_PK] PRIMARY KEY CLUSTERED([LEASE_LICENSE_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_PAY_RVBL_TYPE]  ( 
	[LEASE_PAY_RVBL_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LSPRTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [LSPRTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LSPRTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LSPRTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LSPRTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LSPRTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSPRTY_PK] PRIMARY KEY CLUSTERED([LEASE_PAY_RVBL_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_PROGRAM_TYPE]  ( 
	[LEASE_PROGRAM_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LSPRGT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [LSPRGT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LSPRGT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LSPRGT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LSPRGT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LSPRGT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSPRGT_PK] PRIMARY KEY CLUSTERED([LEASE_PROGRAM_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the program type associated with a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PROGRAM_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_RESPONSIBILITY_TYPE]  ( 
	[LEASE_RESPONSIBILITY_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [LRESPT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [LRESPT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LRESPT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LRESPT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LRESPT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LRESPT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LRESPT_PK] PRIMARY KEY CLUSTERED([LEASE_RESPONSIBILITY_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the organization responsible for this lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_RESPONSIBILITY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the organization responsible for this lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes which organization is responsible for this lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RESPONSIBILITY_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_STATUS_TYPE]  ( 
	[LEASE_STATUS_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LSSTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [LSSTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LSSTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LSSTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LSSTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LSSTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSSTYP_PK] PRIMARY KEY CLUSTERED([LEASE_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the status of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the status of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the status of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE]  ( 
	[LEASE_ID]                      	bigint NOT NULL CONSTRAINT [LEASE_LEASE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_ID_SEQ]),
	[LEASE_PAY_RVBL_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[LEASE_LICENSE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_PROGRAM_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_INITIATOR_TYPE_CODE]     	nvarchar(20) NULL,
	[LEASE_RESPONSIBILITY_TYPE_CODE]	nvarchar(20) NULL,
	[LEASE_STATUS_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[REGION_CODE]                   	smallint NULL,
	[PROJECT_ID]                    	bigint NULL,
	[PRODUCT_ID]                    	bigint NULL,
	[L_FILE_NO]                     	nvarchar(50) NULL,
	[TFA_FILE_NO]                   	int NULL,
	[TFA_FILE_NUMBER]               	nvarchar(500) NULL,
	[PS_FILE_NO]                    	nvarchar(50) NULL,
	[LEASE_DESCRIPTION]             	nvarchar(2000) NULL,
	[LEASE_NOTES]                   	nvarchar(4000) NULL,
	[MOTI_CONTACT]                  	nvarchar(200) NULL,
	[DOCUMENTATION_REFERENCE]       	nvarchar(500) NULL,
	[RETURN_NOTES]                  	nvarchar(1000) NULL,
	[OTHER_LEASE_PROGRAM_TYPE]      	nvarchar(200) NULL,
	[OTHER_LEASE_LICENSE_TYPE]      	nvarchar(200) NULL,
	[ORIG_START_DATE]               	datetime NULL,
	[ORIG_EXPIRY_DATE]              	datetime NULL,
	[TERMINATION_DATE]              	datetime NULL,
	[LEASE_AMOUNT]                  	money NULL,
	[RESPONSIBILITY_EFFECTIVE_DATE] 	datetime NULL,
	[INSPECTION_DATE]               	datetime NULL,
	[INSPECTION_NOTES]              	nvarchar(1000) NULL,
	[IS_SUBJECT_TO_RTA]             	bit NULL CONSTRAINT [LEASE_IS_SUBJECT_TO_RTA_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_COMM_BLDG]                  	bit NULL CONSTRAINT [LEASE_IS_COMM_BLDG_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_OTHER_IMPROVEMENT]          	bit NULL CONSTRAINT [LEASE_IS_OTHER_IMPROVEMENT_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_EXPIRED]                    	bit NOT NULL CONSTRAINT [LEASE_EXPIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[HAS_PHYSICAL_FILE]             	bit NULL,
	[HAS_DIGITAL_FILE]              	bit NULL,
	[HAS_PHYSICIAL_LICENSE]         	bit NULL,
	[HAS_DIGITAL_LICENSE]           	bit NULL,
	[CANCELLATION_REASON]           	nvarchar(500) NULL,
	[TERMINATION_REASON]            	nvarchar(500) NULL,
	[IS_PUBLIC_BENEFIT]             	bit NULL,
	[IS_FINANCIAL_GAIN]             	bit NULL,
	[FEE_DETERMINATION_NOTE]        	nvarchar(1000) NULL,
	[PRIMARY_ARBITRATION_CITY]      	nvarchar(200) NULL,
	[TOTAL_ALLOWABLE_COMPENSATION]  	money NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [LEASE_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LEASE_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LEASE_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LEASE_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LEASE_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LEASE_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LEASE_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LEASE_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LEASE_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LEASE_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LEASE_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LEASE_PK] PRIMARY KEY CLUSTERED([LEASE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_PAY_RVBL_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_PAY_RVBL_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_LICENSE_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_LICENSE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_PROGRAM_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_PROGRAM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_INITIATOR_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_INITIATOR_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_RESPONSIBILITY_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_RESPONSIBILITY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_REGION table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'REGION_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_PROJECT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'PROJECT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_PRODUCT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'PRODUCT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated identifying lease/licence number' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'L_FILE_NO'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Sourced from t_fileMain.TFA_File_Number' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'TFA_FILE_NO'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Sourced from t_fileMain.TFA_File_Number || - || t_fileSub.Subfile_Sequence_Code' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'TFA_FILE_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Sourced from t_fileSubOverrideData.PSFile_No' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'PS_FILE_NO'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Manually etered lease description, not the legal description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes accompanying lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_NOTES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Contact of the MoTI person associated with the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'MOTI_CONTACT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Location of documents pertianing to the lease/license' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'DOCUMENTATION_REFERENCE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes accompanying lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'RETURN_NOTES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of a non-standard lease program type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'OTHER_LEASE_PROGRAM_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of a non-standard lease/license type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'OTHER_LEASE_LICENSE_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Original start date of the lease/license' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'ORIG_START_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Original expiry date of the lease/license' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'ORIG_EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date that the lease was terminated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'TERMINATION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Lease/licence amount' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date current responsibility came into effect for this lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'RESPONSIBILITY_EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Inspection date' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'INSPECTION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes accompanying inspection' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'INSPECTION_NOTES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is subject the Residential Tenancy Act' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_SUBJECT_TO_RTA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is a commercial building' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_COMM_BLDG'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is improvement of another description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_OTHER_IMPROVEMENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Incidcator that lease/license has expired' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_EXPIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicator that phyical file exists' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'HAS_PHYSICAL_FILE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicator that digital file exists' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'HAS_DIGITAL_FILE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicator that physical license exists' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'HAS_PHYSICIAL_LICENSE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicator that digital license exists' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'HAS_DIGITAL_LICENSE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Reason for the cancellation of the lease.  For example, "The request for leasing the space was withdrawn."' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'CANCELLATION_REASON'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Reason for the termination of the lease.  For example, "The tenant is in violation of the terms of the agreement."' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'TERMINATION_REASON'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is there an associated public benefit with this lease?  TRUE = Yes, FALSE = No, and NULL = Unknown.  The default is NULL (Unknown).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_PUBLIC_BENEFIT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is there an associated financial gain with this lease?  TRUE = Yes, FALSE = No, and NULL = Unknown.  The default is NULL (Unknown).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_FINANCIAL_GAIN'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Note associated with fee determination.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'FEE_DETERMINATION_NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The location in which primary arbtration of the lease occurred.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'PRIMARY_ARBITRATION_CITY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The maximum allowable compensation for the lease.  This amount should not be exceeded by the total of all assiciated H120''s.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'TOTAL_ALLOWABLE_COMPENSATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Details of a lease that is inventoried in PIMS system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE'
GO

CREATE TABLE [dbo].[PIMS_RESPONSIBILITY_CODE]  ( 
	[ID]                            	bigint NOT NULL CONSTRAINT [RESPCD_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_RESPONSIBILITY_ID_SEQ]),
	[CODE]                          	nvarchar(20) NOT NULL CONSTRAINT [RESPCD_CODE_DEF]  DEFAULT ('<Empty>'),
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL CONSTRAINT [RESPCD_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [RESPCD_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RESPCD_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RESPCD_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RESPCD_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RESPCD_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RESPCD_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RESPCD_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RESPCD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [RESPCD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RESPCD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RESPCD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RESPCD_PK] PRIMARY KEY CLUSTERED([ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'System-generated primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESPONSIBILITY_CODE', 
	@level2type = N'Column', @level2name = N'ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESPONSIBILITY_CODE', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive value  of a code within the set.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESPONSIBILITY_CODE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESPONSIBILITY_CODE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code became effective.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESPONSIBILITY_CODE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code ceased to be in effect.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESPONSIBILITY_CODE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code and description of the responsibility codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESPONSIBILITY_CODE'
GO

CREATE TABLE [dbo].[PIMS_YEARLY_FINANCIAL_CODE]  ( 
	[ID]                            	bigint NOT NULL CONSTRAINT [YRFINC_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_YEARLY_FINANCIAL_CODE_ID_SEQ]),
	[CODE]                          	nvarchar(20) NOT NULL CONSTRAINT [YRFINC_CODE_DEF]  DEFAULT ('<Empty>'),
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL CONSTRAINT [YRFINC_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [YRFINC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [YRFINC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [YRFINC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [YRFINC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [YRFINC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [YRFINC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [YRFINC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [YRFINC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [YRFINC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [YRFINC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [YRFINC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [YRFINC_PK] PRIMARY KEY CLUSTERED([ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'System-generated primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_YEARLY_FINANCIAL_CODE', 
	@level2type = N'Column', @level2name = N'ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Standard Object of Expenditure (STOB) code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_YEARLY_FINANCIAL_CODE', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive value  of the STOB code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_YEARLY_FINANCIAL_CODE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_YEARLY_FINANCIAL_CODE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code became effective.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_YEARLY_FINANCIAL_CODE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code ceased to be in effect.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_YEARLY_FINANCIAL_CODE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code and description of the chart of accounts codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_YEARLY_FINANCIAL_CODE'
GO

CREATE TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]  ( 
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL CONSTRAINT [CMPREQ_COMPENSATION_REQUISITION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_COMPENSATION_REQUISITION_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NULL,
	[LEASE_ID]                      	bigint NULL,
	[ACQUISITION_OWNER_ID]          	bigint NULL,
	[INTEREST_HOLDER_ID]            	bigint NULL,
	[ACQUISITION_FILE_TEAM_ID]      	bigint NULL,
	[CHART_OF_ACCOUNTS_ID]          	bigint NULL,
	[RESPONSIBILITY_ID]             	bigint NULL,
	[YEARLY_FINANCIAL_ID]           	bigint NULL,
	[ALTERNATE_PROJECT_ID]          	bigint NULL,
	[LEGACY_PAYEE]                  	nvarchar(1000) NULL,
	[IS_DRAFT]                      	bit NULL CONSTRAINT [CMPREQ_IS_DRAFT_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_PAYMENT_IN_TRUST]           	bit NULL CONSTRAINT [ACQPAY_IS_PAYMENT_IN_TRUST_DEF]  DEFAULT (CONVERT([bit],(0))),
	[GST_NUMBER]                    	nvarchar(50) NULL,
	[FISCAL_YEAR]                   	nvarchar(9) NULL,
	[AGREEMENT_DT]                  	date NULL,
	[EXPROP_NOTICE_SERVED_DT]       	date NULL,
	[EXPROP_VESTING_DT]             	date NULL,
	[GENERATION_DT]                 	date NULL,
	[FINALIZED_DATE]                	date NULL,
	[ADV_PMT_SERVED_DT]             	date NULL,
	[SPECIAL_INSTRUCTION]           	nvarchar(2000) NULL,
	[DETAILED_REMARKS]              	nvarchar(2000) NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [CMPREQ_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [CMPREQ_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [CMPREQ_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [CMPREQ_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [CMPREQ_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [CMPREQ_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [CMPREQ_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [CMPREQ_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [CMPREQ_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [CMPREQ_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [CMPREQ_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [CMPREQ_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CMPREQ_PK] PRIMARY KEY CLUSTERED([COMPENSATION_REQUISITION_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQUISITION_FILE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'LEASE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Link a file to an "Alternate Project", so the user can make alternate payments that may be due after the original file''s project closes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'ALTERNATE_PROJECT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payee where only the name is known from the PAIMS system,' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'LEGACY_PAYEE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the agreement is in draft format.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'IS_DRAFT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the payment was made in trust.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'IS_PAYMENT_IN_TRUST'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST number of the organization receiving the payment.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'GST_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Fiscal year of the compensation requisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'FISCAL_YEAR'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Agreement date.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'AGREEMENT_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Expropriation notice served date.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'EXPROP_NOTICE_SERVED_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Expropriation vesting date.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'EXPROP_VESTING_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Document generation date.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'GENERATION_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date that the draft Compensation Req changed from Draft to Final status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'FINALIZED_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date that the advanced payment was made.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'ADV_PMT_SERVED_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Special instructions for the compensation requisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'SPECIAL_INSTRUCTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Detailed remarks for the compensation requisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'DETAILED_REMARKS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the requisition is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing the compensation requisition data for the acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION'
GO

CREATE TABLE [dbo].[PIMS_COMPENSATION_REQUISITION_HIST]  ( 
	[_COMPENSATION_REQUISITION_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_COMPENSATION_REQUISITION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]              	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                    	datetime NULL,
	[COMPENSATION_REQUISITION_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]              	bigint NULL,
	[LEASE_ID]                         	bigint NULL,
	[ACQUISITION_OWNER_ID]             	bigint NULL,
	[INTEREST_HOLDER_ID]               	bigint NULL,
	[ACQUISITION_FILE_TEAM_ID]         	bigint NULL,
	[CHART_OF_ACCOUNTS_ID]             	bigint NULL,
	[RESPONSIBILITY_ID]                	bigint NULL,
	[YEARLY_FINANCIAL_ID]              	bigint NULL,
	[ALTERNATE_PROJECT_ID]             	bigint NULL,
	[LEGACY_PAYEE]                     	nvarchar(1000) NULL,
	[IS_DRAFT]                         	bit NULL,
	[IS_PAYMENT_IN_TRUST]              	bit NULL,
	[GST_NUMBER]                       	nvarchar(50) NULL,
	[FISCAL_YEAR]                      	nvarchar(9) NULL,
	[AGREEMENT_DT]                     	date NULL,
	[EXPROP_NOTICE_SERVED_DT]          	date NULL,
	[EXPROP_VESTING_DT]                	date NULL,
	[GENERATION_DT]                    	date NULL,
	[FINALIZED_DATE]                   	date NULL,
	[ADV_PMT_SERVED_DT]                	date NULL,
	[SPECIAL_INSTRUCTION]              	nvarchar(2000) NULL,
	[DETAILED_REMARKS]                 	nvarchar(2000) NULL,
	[IS_DISABLED]                      	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NULL,
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_CMPREQ_H_PK] PRIMARY KEY CLUSTERED([_COMPENSATION_REQUISITION_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE]  ( 
	[ID]                            	bigint NOT NULL CONSTRAINT [FINACT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_FINANCIAL_ACTIVITY_ID_SEQ]),
	[CODE]                          	nvarchar(20) NOT NULL CONSTRAINT [FINACT_CODE_DEF]  DEFAULT ('<Empty>'),
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL CONSTRAINT [FINACT_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [FINACT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [FINACT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [FINACT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [FINACT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [FINACT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [FINACT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [FINACT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [FINACT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [FINACT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [FINACT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [FINACT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [FINACT_PK] PRIMARY KEY CLUSTERED([ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'System-generated primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FINANCIAL_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Value of the code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FINANCIAL_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive value  of a code within the set.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FINANCIAL_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FINANCIAL_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code became effective.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FINANCIAL_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the code ceased to be in effect.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FINANCIAL_ACTIVITY_CODE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code and description of the financial activity codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FINANCIAL_ACTIVITY_CODE'
GO

CREATE TABLE [dbo].[PIMS_COMP_REQ_FINANCIAL]  ( 
	[COMP_REQ_FINANCIAL_ID]         	bigint NOT NULL CONSTRAINT [CRQFIN_COMP_REQ_FINANCIAL_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_COMP_REQ_FINANCIAL_ID_SEQ]),
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL,
	[FINANCIAL_ACTIVITY_CODE_ID]    	bigint NOT NULL,
	[PRETAX_AMT]                    	money NULL,
	[TAX_AMT]                       	money NULL,
	[TOTAL_AMT]                     	money NULL,
	[IS_GST_REQUIRED]               	bit NULL CONSTRAINT [CRH120_IS_GST_REQUIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_DISABLED]                   	bit NULL CONSTRAINT [CRH120_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [CRH120_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [CRH120_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [CRH120_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [CRH120_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [CRH120_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [CRH120_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [CRH120_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [CRH120_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [CRH120_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [CRH120_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [CRH120_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CRQFIN_PK] PRIMARY KEY CLUSTERED([COMP_REQ_FINANCIAL_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Subtotal of the requisition''s work activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_FINANCIAL', 
	@level2type = N'Column', @level2name = N'PRETAX_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Taxes on the requisition''s work activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_FINANCIAL', 
	@level2type = N'Column', @level2name = N'TAX_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Total value of the requisition''s work activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_FINANCIAL', 
	@level2type = N'Column', @level2name = N'TOTAL_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if GST is required for this transaction.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_FINANCIAL', 
	@level2type = N'Column', @level2name = N'IS_GST_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the requisition is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_FINANCIAL', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table associating compensation requisitions related to work activities.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_FINANCIAL'
GO

CREATE TABLE [dbo].[PIMS_COMP_REQ_FINANCIAL_HIST]  ( 
	[_COMP_REQ_FINANCIAL_HIST_ID]   	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_COMP_REQ_FINANCIAL_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[COMP_REQ_FINANCIAL_ID]         	bigint NOT NULL,
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL,
	[FINANCIAL_ACTIVITY_CODE_ID]    	bigint NOT NULL,
	[PRETAX_AMT]                    	money NULL,
	[TAX_AMT]                       	money NULL,
	[TOTAL_AMT]                     	money NULL,
	[IS_GST_REQUIRED]               	bit NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_CRQFIN_H_PK] PRIMARY KEY CLUSTERED([_COMP_REQ_FINANCIAL_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_CONSULTATION_OUTCOME_TYPE]  ( 
	[CONSULTATION_OUTCOME_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [OUTCMT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [OUTCMT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [OUTCMT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [OUTCMT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [OUTCMT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [OUTCMT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [OUTCMT_PK] PRIMARY KEY CLUSTERED([CONSULTATION_OUTCOME_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the consultation outcome type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_OUTCOME_TYPE', 
	@level2type = N'Column', @level2name = N'CONSULTATION_OUTCOME_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the consultation outcome type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_OUTCOME_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Onscreen display order of the code types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_OUTCOME_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code type is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_OUTCOME_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_OUTCOME_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_OUTCOME_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_OUTCOME_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_OUTCOME_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_OUTCOME_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the consultation outcome type for a lease or license.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_OUTCOME_TYPE'
GO

CREATE TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE]  ( 
	[CONSULTATION_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL CONSTRAINT [CONSTY_CONSULTATION_STATUS_TYPE_CODE_DEF]  DEFAULT ('OTHER'),
	[DESCRIPTION]                  	nvarchar(200) NOT NULL CONSTRAINT [CONSTY_DESCRIPTION_DEF]  DEFAULT ('<Empty>'),
	[DISPLAY_ORDER]                	int NULL,
	[IS_DISABLED]                  	bit NOT NULL CONSTRAINT [CONSTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]   	bigint NULL CONSTRAINT [CONSTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [CONSTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [CONSTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [CONSTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [CONSTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CONSTY_PK] PRIMARY KEY CLUSTERED([CONSULTATION_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the consultation status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONSULTATION_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the consultation status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Onscreen display order of the consultation types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the consultation status  type is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the consultation status type for (currently) a lease or license.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_CONSULTATION_TYPE]  ( 
	[CONSULTATION_TYPE_CODE]    	nvarchar(20) NOT NULL CONSTRAINT [CONTYP_CONSULTATION_TYPE_CODE_DEF]  DEFAULT ('OTHER'),
	[DESCRIPTION]               	nvarchar(200) NOT NULL CONSTRAINT [CONTYP_DESCRIPTION_DEF]  DEFAULT ('<Empty>'),
	[OTHER_DESCRIPTION]         	nvarchar(200) NULL,
	[DISPLAY_ORDER]             	int NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [CONTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [CONTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [CONTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [CONTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [CONTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [CONTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CONTYP_PK] PRIMARY KEY CLUSTERED([CONSULTATION_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the consultation type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_TYPE', 
	@level2type = N'Column', @level2name = N'CONSULTATION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the consultation type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Additional descriptive text of the consultation type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_TYPE', 
	@level2type = N'Column', @level2name = N'OTHER_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Onscreen display order of the consultation types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the consultation type is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the consultation type required for (currently) a lease or license.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_CONSULTATION_TYPE'
GO

CREATE TABLE [dbo].[PIMS_CONTACT_METHOD_TYPE]  ( 
	[CONTACT_METHOD_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [CNTMTT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [CNTMTT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [CNTMTT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [CNTMTT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [CNTMTT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [CNTMTT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CNTMTT_PK] PRIMARY KEY CLUSTERED([CONTACT_METHOD_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_CONTACT_METHOD]  ( 
	[CONTACT_METHOD_ID]             	bigint NOT NULL CONSTRAINT [CNTMTH_CONTACT_METHOD_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_CONTACT_METHOD_ID_SEQ]),
	[CONTACT_METHOD_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[CONTACT_METHOD_VALUE]          	nvarchar(200) NOT NULL,
	[IS_PREFERRED_METHOD]           	bit NULL CONSTRAINT [CNTMTH_IS_PREFERRED_METHOD_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [CNTMTH_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [CNTMTH_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [CNTMTH_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [CNTMTH_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [CNTMTH_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [CNTMTH_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [CNTMTH_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CNTMTH_PK] PRIMARY KEY CLUSTERED([CONTACT_METHOD_ID])
)
GO

CREATE TABLE [dbo].[PIMS_CONTACT_METHOD_HIST]  ( 
	[_CONTACT_METHOD_HIST_ID]       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_CONTACT_METHOD_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[CONTACT_METHOD_ID]             	bigint NOT NULL,
	[CONTACT_METHOD_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[CONTACT_METHOD_VALUE]          	nvarchar(200) NOT NULL,
	[IS_PREFERRED_METHOD]           	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_CNTMTH_H_PK] PRIMARY KEY CLUSTERED([_CONTACT_METHOD_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_COST_TYPE_CODE_HIST]  ( 
	[_COST_TYPE_CODE_HIST_ID]       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_COST_TYPE_CODE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ID]                            	bigint NOT NULL,
	[CODE]                          	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL,
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_COSTYP_H_PK] PRIMARY KEY CLUSTERED([_COST_TYPE_CODE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DATA_SOURCE_TYPE]  ( 
	[DATA_SOURCE_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PIDSRT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [PIDSRT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PIDSRT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PIDSRT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PIDSRT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PIDSRT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PIDSRT_PK] PRIMARY KEY CLUSTERED([DATA_SOURCE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the source system of the data (PAIMS, LIS, etc.)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DATA_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'DATA_SOURCE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the source system of the data (PAIMS, LIS, etc.)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DATA_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is still in use' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DATA_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the default display order of the descriptions' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DATA_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the source system of the data (PAIMS, LIS, etc.)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DATA_SOURCE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_STATUS_TYPE]  ( 
	[DISPOSITION_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                      	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                    	int NULL,
	[IS_DISABLED]                      	bit NOT NULL CONSTRAINT [DSPFST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NULL CONSTRAINT [DSPFST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [DSPFST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [DSPFST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [DSPFST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [DSPFST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPFST_PK] PRIMARY KEY CLUSTERED([DISPOSITION_FILE_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_FUNDING_TYPE]  ( 
	[DISPOSITION_FUNDING_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                  	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                	int NULL,
	[IS_DISABLED]                  	bit NOT NULL CONSTRAINT [DSPFTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]   	bigint NULL CONSTRAINT [DSPFTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPFTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPFTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPFTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPFTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPFTY_PK] PRIMARY KEY CLUSTERED([DISPOSITION_FUNDING_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the disposition funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FUNDING_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FUNDING_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_INITIATING_DOC_TYPE]  ( 
	[DISPOSITION_INITIATING_DOC_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                         	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                       	int NULL,
	[IS_DISABLED]                         	bit NOT NULL CONSTRAINT [DSPIDT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]          	bigint NULL CONSTRAINT [DSPIDT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]                 	datetime NOT NULL CONSTRAINT [DSPIDT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                    	nvarchar(30) NOT NULL CONSTRAINT [DSPIDT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [DSPIDT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [DSPIDT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPIDT_PK] PRIMARY KEY CLUSTERED([DISPOSITION_INITIATING_DOC_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion initiating document type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_INITIATING_DOC_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion initiating document type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion initiating document type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_INITIATING_DOC_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_STATUS_TYPE]  ( 
	[DISPOSITION_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                 	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]               	int NULL,
	[IS_DISABLED]                 	bit NOT NULL CONSTRAINT [DSPSTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NULL CONSTRAINT [DSPSTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [DSPSTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [DSPSTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [DSPSTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [DSPSTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPSTY_PK] PRIMARY KEY CLUSTERED([DISPOSITION_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_TYPE]  ( 
	[DISPOSITION_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [DSPTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [DSPTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [DSPTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [DSPTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [DSPTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [DSPTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPTYP_PK] PRIMARY KEY CLUSTERED([DISPOSITION_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the disposition type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DSP_INITIATING_BRANCH_TYPE]  ( 
	[DSP_INITIATING_BRANCH_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                  	int NULL,
	[IS_DISABLED]                    	bit NOT NULL CONSTRAINT [DSPIBT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NULL CONSTRAINT [DSPIBT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [DSPIBT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [DSPIBT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [DSPIBT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [DSPIBT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPIBT_PK] PRIMARY KEY CLUSTERED([DSP_INITIATING_BRANCH_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion initiating branch.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'DSP_INITIATING_BRANCH_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion initiating branch.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion inititating branch.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_INITIATING_BRANCH_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DSP_PHYS_FILE_STATUS_TYPE]  ( 
	[DSP_PHYS_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [DSPPFS_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [DSPPFS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPPFS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPPFS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPPFS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPPFS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPPFS_PK] PRIMARY KEY CLUSTERED([DSP_PHYS_FILE_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion physical file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DSP_PHYS_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion physical file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion physical file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PHYS_FILE_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE]  ( 
	[DISPOSITION_FILE_ID]                 	bigint NOT NULL CONSTRAINT [DISPFL_DISPOSITION_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_ID_SEQ]),
	[DISPOSITION_STATUS_TYPE_CODE]        	nvarchar(20) NOT NULL CONSTRAINT [DISPFL_DISPOSITION_STATUS_TYPE_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[DISPOSITION_FILE_STATUS_TYPE_CODE]   	nvarchar(20) NOT NULL CONSTRAINT [DISPFL_DISPOSITION_FILE_STATUS_TYPE_CODE_DEF]  DEFAULT ('ACTIVE'),
	[DISPOSITION_TYPE_CODE]               	nvarchar(20) NOT NULL,
	[DISPOSITION_FUNDING_TYPE_CODE]       	nvarchar(20) NULL,
	[DISPOSITION_INITIATING_DOC_TYPE_CODE]	nvarchar(20) NULL,
	[DSP_PHYS_FILE_STATUS_TYPE_CODE]      	nvarchar(20) NULL,
	[DSP_INITIATING_BRANCH_TYPE_CODE]     	nvarchar(20) NULL,
	[REGION_CODE]                         	smallint NOT NULL,
	[PROJECT_ID]                          	bigint NULL,
	[PRODUCT_ID]                          	bigint NULL,
	[FILE_NUMBER]                         	nvarchar(20) NULL,
	[FILE_NAME]                           	nvarchar(200) NULL,
	[FILE_REFERENCE]                      	nvarchar(200) NULL,
	[OTHER_DISPOSITION_TYPE]              	nvarchar(200) NULL,
	[OTHER_INITIATING_DOC_TYPE]           	nvarchar(200) NULL,
	[ASSIGNED_DT]                         	date NULL,
	[COMPLETED_DT]                        	date NULL,
	[INITIATING_DOCUMENT_DT]              	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]          	bigint NULL CONSTRAINT [DISPFL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]                	datetime NOT NULL CONSTRAINT [DISPFL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                   	nvarchar(30) NOT NULL CONSTRAINT [DISPFL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]                	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]           	nvarchar(30) NOT NULL CONSTRAINT [DISPFL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DISPFL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DISPFL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL CONSTRAINT [DISPFL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]                 	datetime NOT NULL CONSTRAINT [DISPFL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                    	nvarchar(30) NOT NULL CONSTRAINT [DISPFL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [DISPFL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [DISPFL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DISPFL_PK] PRIMARY KEY CLUSTERED([DISPOSITION_FILE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the disposition type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the disposition funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FUNDING_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion initiating document type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_INITIATING_DOC_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion physical file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DSP_PHYS_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion initiating branch.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DSP_INITIATING_BRANCH_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the Ministry region code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'REGION_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the project table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'PROJECT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the product table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'PRODUCT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The formatted disposition file number, seeded from the PIMS_DISPOSITION_FILE_NO_SEQ sequence.  Sample formats are D-1, D-2, D-3, etc.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'FILE_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'FILE_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Provide available reference number for historic program or file number (e.g.? RAEG, Acquisition File, etc.).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'FILE_REFERENCE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Required if "Other" disposition type selected.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'OTHER_DISPOSITION_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Required if "Other" disposition initiating document type selected.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'OTHER_INITIATING_DOC_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the disposition file was assigned.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'ASSIGNED_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the disposition file was completed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'COMPLETED_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Signoff date of the initiating document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'INITIATING_DOCUMENT_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity containing information regarding an disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_APPRAISAL]  ( 
	[DISPOSITION_APPRAISAL_ID]      	bigint NOT NULL CONSTRAINT [DSPAPP_DISPOSITION_APPRAISAL_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_APPRAISAL_ID_SEQ]),
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[APPRAISED_AMT]                 	money NULL,
	[APPRAISAL_DT]                  	date NULL,
	[BCA_VALUE_AMT]                 	money NULL,
	[BCA_ROLL_YEAR]                 	smallint NULL,
	[LIST_PRICE_AMT]                	money NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [DSPAPP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPAPP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPAPP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPAPP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPAPP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPAPP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPAPP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPAPP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPAPP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPAPP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPAPP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPAPP_PK] PRIMARY KEY CLUSTERED([DISPOSITION_APPRAISAL_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'DISPOSITION_APPRAISAL_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Appraised value of the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APPRAISED_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of the disposition file appraisal.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APPRAISAL_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'BC Assessment value of the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'BCA_VALUE_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'BC Assessment roll year for the disposition file appraisal.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'BCA_ROLL_YEAR'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Listed disposition file selling price.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'LIST_PRICE_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity containing the appraisal and assessment information about the disposition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_APPRAISAL'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_APPRAISAL_HIST]  ( 
	[_DISPOSITION_APPRAISAL_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_APPRAISAL_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DISPOSITION_APPRAISAL_ID]      	bigint NOT NULL,
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[APPRAISED_AMT]                 	money NULL,
	[APPRAISAL_DT]                  	date NULL,
	[BCA_VALUE_AMT]                 	money NULL,
	[BCA_ROLL_YEAR]                 	smallint NULL,
	[LIST_PRICE_AMT]                	money NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPAPP_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_APPRAISAL_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DSP_CHKLST_SECTION_TYPE]  ( 
	[DSP_CHKLST_SECTION_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                 	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]               	int NULL,
	[EFFECTIVE_DATE]              	date NOT NULL CONSTRAINT [DSPSCT_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                 	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NULL CONSTRAINT [DSPSCT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [DSPSCT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [DSPSCT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [DSPSCT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [DSPSCT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPSCT_PK] PRIMARY KEY CLUSTERED([DSP_CHKLST_SECTION_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Disposition checklist section code value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DSP_CHKLST_SECTION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Disposition checklist section descriptive text presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies the order that the disposition checklist sections are presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the disposition checklist section is able to be presented to the user via the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the disposition checklist section is removed from the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the disposition checklist sctions that are presented to the user through dynamically building the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_SECTION_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DSP_CHKLST_ITEM_TYPE]  ( 
	[DSP_CHKLST_ITEM_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DSP_CHKLST_SECTION_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                 	nvarchar(200) NOT NULL,
	[HINT]                        	nvarchar(200) NULL,
	[IS_REQUIRED]                 	bit NULL CONSTRAINT [DSPCIT_IS_REQUIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]               	int NULL,
	[EFFECTIVE_DATE]              	date NOT NULL CONSTRAINT [DSPCIT_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                 	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NULL CONSTRAINT [DSPCIT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [DSPCIT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [DSPCIT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [DSPCIT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [DSPCIT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPCIT_PK] PRIMARY KEY CLUSTERED([DSP_CHKLST_ITEM_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Disposition checklist item code value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DSP_CHKLST_ITEM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Disposition Section to which the item belongs.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DSP_CHKLST_SECTION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Disposition Checklist item descriptive text presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Disposition Checklist item descriptive tooltip presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'HINT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the disposition checklist item is a required field.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'IS_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies the order that the disposition checklist items are presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the disposition checklist item is able to be presented to the user via the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the disposition checklist item is removed from the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the disposition checklist items that are presented to the user through dynamically building the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_CHKLST_ITEM_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]  ( 
	[DISPOSITION_CHECKLIST_ITEM_ID] 	bigint NOT NULL CONSTRAINT [DSPCKI_DISPOSITION_CHECKLIST_ITEM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_CHECKLIST_ITEM_ID_SEQ]),
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[DSP_CHKLST_ITEM_TYPE_CODE]     	nvarchar(20) NULL,
	[CHKLST_ITEM_STATUS_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [DSPCKI_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPCKI_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPCKI_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPCKI_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPCKI_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPCKI_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPCKI_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPCKI_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPCKI_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPCKI_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPCKI_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPCKI_PK] PRIMARY KEY CLUSTERED([DISPOSITION_CHECKLIST_ITEM_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DISPOSITION_CHECKLIST_ITEM_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the checklist item.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DSP_CHKLST_ITEM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_CHKLST_ITEM_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'CHKLST_ITEM_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM_HIST]  ( 
	[_DISPOSITION_CHECKLIST_ITEM_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_CHECKLIST_ITEM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[DISPOSITION_CHECKLIST_ITEM_ID]      	bigint NOT NULL,
	[DISPOSITION_FILE_ID]                	bigint NOT NULL,
	[DSP_CHKLST_ITEM_TYPE_CODE]          	nvarchar(20) NULL,
	[CHKLST_ITEM_STATUS_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPCKI_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_CHECKLIST_ITEM_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT]  ( 
	[DISPOSITION_FILE_DOCUMENT_ID]  	bigint NOT NULL CONSTRAINT [DSPDOC_DISPOSITION_FILE_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_DOCUMENT_ID_SEQ]),
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [DSPDOC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPDOC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPDOC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPDOC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPDOC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPDOC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPDOC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPDOC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPDOC_PK] PRIMARY KEY CLUSTERED([DISPOSITION_FILE_DOCUMENT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT_HIST]  ( 
	[_DISPOSITION_FILE_DOCUMENT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[DISPOSITION_FILE_DOCUMENT_ID]      	bigint NOT NULL,
	[DISPOSITION_FILE_ID]               	bigint NOT NULL,
	[DOCUMENT_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPDOC_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_FILE_DOCUMENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_HIST]  ( 
	[_DISPOSITION_FILE_HIST_ID]           	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                 	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                       	datetime NULL,
	[DISPOSITION_FILE_ID]                 	bigint NOT NULL,
	[DISPOSITION_STATUS_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[DISPOSITION_FILE_STATUS_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DISPOSITION_TYPE_CODE]               	nvarchar(20) NOT NULL,
	[DISPOSITION_FUNDING_TYPE_CODE]       	nvarchar(20) NULL,
	[DISPOSITION_INITIATING_DOC_TYPE_CODE]	nvarchar(20) NULL,
	[DSP_PHYS_FILE_STATUS_TYPE_CODE]      	nvarchar(20) NULL,
	[DSP_INITIATING_BRANCH_TYPE_CODE]     	nvarchar(20) NULL,
	[REGION_CODE]                         	smallint NOT NULL,
	[PROJECT_ID]                          	bigint NULL,
	[PRODUCT_ID]                          	bigint NULL,
	[FILE_NUMBER]                         	nvarchar(20) NULL,
	[FILE_NAME]                           	nvarchar(200) NULL,
	[FILE_REFERENCE]                      	nvarchar(200) NULL,
	[OTHER_DISPOSITION_TYPE]              	nvarchar(200) NULL,
	[OTHER_INITIATING_DOC_TYPE]           	nvarchar(200) NULL,
	[ASSIGNED_DT]                         	date NULL,
	[COMPLETED_DT]                        	date NULL,
	[INITIATING_DOCUMENT_DT]              	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]          	bigint NULL,
	[APP_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[APP_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                 	datetime NOT NULL,
	[DB_CREATE_USERID]                    	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]               	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DISPFL_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_FILE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_NOTE]  ( 
	[DISPOSITION_FILE_NOTE_ID]      	bigint NOT NULL CONSTRAINT [DSPNOT_DISPOSITION_FILE_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_NOTE_ID_SEQ]),
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [DSPNOT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPNOT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPNOT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPNOT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPNOT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPNOT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPNOT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPNOT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPNOT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPNOT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPNOT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPNOT_PK] PRIMARY KEY CLUSTERED([DISPOSITION_FILE_NOTE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_NOTE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the associated disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the associated note.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'NOTE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_NOTE_HIST]  ( 
	[_DISPOSITION_FILE_NOTE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_NOTE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DISPOSITION_FILE_NOTE_ID]      	bigint NOT NULL,
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPNOT_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_FILE_NOTE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PPH_STATUS_TYPE]  ( 
	[PPH_STATUS_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NULL CONSTRAINT [PPHSTT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [PPHSTT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PPHSTT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PPHSTT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PPHSTT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PPHSTT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PPHSTT_PK] PRIMARY KEY CLUSTERED([PPH_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code indicating the Provincial Public Highway status' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PPH_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'PPH_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the code indicating the purpose of the property research' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PPH_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PPH_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PPH_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the Provincial Public Highway status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PPH_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_STATUS_TYPE]  ( 
	[PROPERTY_STATUS_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PRPSTS_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [PRPSTS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRPSTS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRPSTS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PRPSTS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PRPSTS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPSTS_PK] PRIMARY KEY CLUSTERED([PROPERTY_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property status code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'PROPERTY_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property status code description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe property status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_TYPE]  ( 
	[PROPERTY_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PRPTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [PRPTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRPTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRPTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PRPTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PRPTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPTYP_PK] PRIMARY KEY CLUSTERED([PROPERTY_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_SURPLUS_DECLARATION_TYPE]  ( 
	[SURPLUS_DECLARATION_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                  	nvarchar(200) NOT NULL,
	[IS_DISABLED]                  	bit NOT NULL CONSTRAINT [SPDCLT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]   	bigint NULL CONSTRAINT [SPDCLT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [SPDCLT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [SPDCLT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [SPDCLT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [SPDCLT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SPDCLT_PK] PRIMARY KEY CLUSTERED([SURPLUS_DECLARATION_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the surplus property type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURPLUS_DECLARATION_TYPE', 
	@level2type = N'Column', @level2name = N'SURPLUS_DECLARATION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code description of the surplus property type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURPLUS_DECLARATION_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates that the code value is disabled' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURPLUS_DECLARATION_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the surplus property type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURPLUS_DECLARATION_TYPE'
GO

CREATE TABLE [dbo].[PIMS_VOLUME_UNIT_TYPE]  ( 
	[VOLUME_UNIT_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [VOLUTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [VOLUTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [VOLUTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [VOLUTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [VOLUTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [VOLUTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [VOLUTY_PK] PRIMARY KEY CLUSTERED([VOLUME_UNIT_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The volume unit used for measuring Properties.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUME_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'VOLUME_UNIT_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Translation of the code value into a description that can be displayed to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUME_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is still active or is now disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUME_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Order in which to display the code values, if required.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUME_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The volume unit used for measuring Properties.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUME_UNIT_TYPE'
GO

CREATE TABLE [dbo].[PIMS_VOLUMETRIC_TYPE]  ( 
	[VOLUMETRIC_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PRVOLT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [PRVOLT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRVOLT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRVOLT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PRVOLT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PRVOLT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRVOLT_PK] PRIMARY KEY CLUSTERED([VOLUMETRIC_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property parcel/property volumetric code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUMETRIC_TYPE', 
	@level2type = N'Column', @level2name = N'VOLUMETRIC_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property parcel/property volumetric code description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUMETRIC_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUMETRIC_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUMETRIC_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe parcel/property volumetric type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUMETRIC_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY]  ( 
	[PROPERTY_ID]                        	bigint NOT NULL CONSTRAINT [PRPRTY_PROPERTY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ID_SEQ]),
	[PROPERTY_TYPE_CODE]                 	nvarchar(20) NOT NULL,
	[ADDRESS_ID]                         	bigint NULL,
	[REGION_CODE]                        	smallint NOT NULL,
	[DISTRICT_CODE]                      	smallint NOT NULL,
	[PROPERTY_AREA_UNIT_TYPE_CODE]       	nvarchar(20) NULL,
	[PROPERTY_DATA_SOURCE_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[PROPERTY_STATUS_TYPE_CODE]          	nvarchar(20) NOT NULL,
	[SURPLUS_DECLARATION_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[VOLUMETRIC_TYPE_CODE]               	nvarchar(20) NULL,
	[VOLUME_UNIT_TYPE_CODE]              	nvarchar(20) NULL,
	[PPH_STATUS_TYPE_CODE]               	nvarchar(20) NULL,
	[PROPERTY_DATA_SOURCE_EFFECTIVE_DATE]	date NOT NULL,
	[PID]                                	int NULL,
	[PIN]                                	int NULL,
	[FILE_NUMBER]                        	int NULL,
	[FILE_NUMBER_SUFFIX]                 	nvarchar(2) NULL,
	[LAND_AREA]                          	real NULL,
	[LAND_LEGAL_DESCRIPTION]             	nvarchar(2000) NULL,
	[BOUNDARY]                           	[sys].[geometry] NULL,
	[LOCATION]                           	[sys].[geometry] NULL,
	[GENERAL_LOCATION]                   	nvarchar(2000) NULL,
	[SURVEY_PLAN_NUMBER]                 	nvarchar(250) NULL,
	[SURPLUS_DECLARATION_COMMENT]        	nvarchar(2000) NULL,
	[SURPLUS_DECLARATION_DATE]           	datetime NULL,
	[NOTES]                              	nvarchar(4000) NULL,
	[MUNICIPAL_ZONING]                   	nvarchar(100) NULL,
	[IS_VOLUMETRIC_PARCEL]               	bit NULL CONSTRAINT [PRPRTY_IS_VOLUMETRIC_PARCEL_DEF]  DEFAULT (CONVERT([bit],(0))),
	[VOLUMETRIC_MEASUREMENT]             	real NULL,
	[IS_OWNED]                           	bit NOT NULL CONSTRAINT [PRPRTY_IS_OWNED_DEF]  DEFAULT (CONVERT([bit],(1))),
	[IS_RETIRED]                         	bit NULL,
	[PPH_STATUS_UPDATE_USERID]           	nvarchar(30) NULL,
	[PPH_STATUS_UPDATE_TIMESTAMP]        	datetime NULL,
	[PPH_STATUS_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[IS_RWY_BELT_DOM_PATENT]             	bit NULL CONSTRAINT [PRPRTY_IS_RWY_BELT_DOM_PATENT_DEF]  DEFAULT (CONVERT([bit],(0))),
	[ADDITIONAL_DETAILS]                 	nvarchar(4000) NULL,
	[IS_UTILITIES_PAYABLE]               	bit NULL,
	[IS_TAXES_PAYABLE]                   	bit NULL,
	[BAND_NAME]                          	nvarchar(80) NULL,
	[RESERVE_NAME]                       	nvarchar(100) NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NULL CONSTRAINT [PRPRTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [PRPRTY_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRTY_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL CONSTRAINT [PRPRTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL CONSTRAINT [PRPRTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRTY_PK] PRIMARY KEY CLUSTERED([PROPERTY_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the proprty type table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PROPERTY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the address table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'ADDRESS_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the region table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'REGION_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the district table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'DISTRICT_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the property area unit type table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PROPERTY_AREA_UNIT_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the property data source type table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PROPERTY_DATA_SOURCE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the property status type table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PROPERTY_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the surplus declaration type table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'SURPLUS_DECLARATION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the volumetric type table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'VOLUMETRIC_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the volume unit type table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'VOLUME_UNIT_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the provincial public highway status type table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PPH_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the property was officially registered' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PROPERTY_DATA_SOURCE_EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property ID' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property number' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PIN'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The (ARCS/ORCS) number identifying the Property File.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'FILE_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A suffix to distinguish between Property Files with the same number.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'FILE_NUMBER_SUFFIX'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Area occupied by property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'LAND_AREA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Legal description of property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'LAND_LEGAL_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Spatial bundary of land' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'BOUNDARY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Geospatial location (pin) of property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'LOCATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive location of the property, primarily for H120 activities.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'GENERAL_LOCATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property/Land Parcel survey plan number' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'SURVEY_PLAN_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Comment regarding the surplus declaration' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'SURPLUS_DECLARATION_COMMENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the property was declared surplus' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'SURPLUS_DECLARATION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes about the property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'NOTES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Municipal zoning that applies this property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'MUNICIPAL_ZONING'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is there a volumetric measurement for this parcel?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_VOLUMETRIC_PARCEL'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Volumetric measurement of the parcel.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'VOLUMETRIC_MEASUREMENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is the property currently owned?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_OWNED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'If the property was the source of a subdivision operation or the target of a consolidation operation, the property is marked as retired.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_RETIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Userid that updated the Provincial Public Highway status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PPH_STATUS_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date / time that the Provincial Public Highway status was updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PPH_STATUS_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the PPH status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PPH_STATUS_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if this property is original federal vs. provincial ownership.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_RWY_BELT_DOM_PATENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Additional details about the property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'ADDITIONAL_DETAILS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the utilities are being paid.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_UTILITIES_PAYABLE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the property taxes are being paid.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_TAXES_PAYABLE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the Indian band.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'BAND_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the Indian reserve.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'RESERVE_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the attributes of a property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY]  ( 
	[DISPOSITION_FILE_PROPERTY_ID]  	bigint NOT NULL CONSTRAINT [DSPPRP_DISPOSITION_FILE_PROPERTY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_PROPERTY_ID_SEQ]),
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_NAME]                 	nvarchar(500) NULL,
	[LOCATION]                      	[sys].[geometry] NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [DSPPRP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPPRP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPPRP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPPRP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPPRP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPPRP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPPRP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPPRP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPPRP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPPRP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPPRP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPPRP_PK] PRIMARY KEY CLUSTERED([DISPOSITION_FILE_PROPERTY_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary key of the associated disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary key of the associated property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive reference for the property associated with the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'PROPERTY_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Geospatial location (pin) of property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'LOCATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity to associate the properties involved with the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY_HIST]  ( 
	[_DISPOSITION_FILE_PROPERTY_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_PROPERTY_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[DISPOSITION_FILE_PROPERTY_ID]      	bigint NOT NULL,
	[DISPOSITION_FILE_ID]               	bigint NOT NULL,
	[PROPERTY_ID]                       	bigint NOT NULL,
	[PROPERTY_NAME]                     	nvarchar(500) NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPPRP_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_FILE_PROPERTY_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DSP_FL_TEAM_PROFILE_TYPE]  ( 
	[DSP_FL_TEAM_PROFILE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                  	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                	int NULL,
	[IS_DISABLED]                  	bit NOT NULL CONSTRAINT [DSPFTP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]   	bigint NULL CONSTRAINT [DSPFTP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPFTP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPFTP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPFTP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPFTP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPFTP_PK] PRIMARY KEY CLUSTERED([DSP_FL_TEAM_PROFILE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the disposition file profile type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DSP_FL_TEAM_PROFILE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion file profile type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_FL_TEAM_PROFILE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM]  ( 
	[DISPOSITION_FILE_TEAM_ID]      	bigint NOT NULL CONSTRAINT [DSPFTM_DISPOSITION_FILE_TEAM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_TEAM_ID_SEQ]),
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[DSP_FL_TEAM_PROFILE_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [DSPFTM_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPFTM_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPFTM_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPFTM_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPFTM_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPFTM_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPFTM_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPFTM_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPFTM_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPFTM_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPFTM_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPFTM_PK] PRIMARY KEY CLUSTERED([DISPOSITION_FILE_TEAM_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_TEAM_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the dispostion file' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the organization.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'ORGANIZATION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the primary contact person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'PRIMARY_CONTACT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the disposition file profile type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DSP_FL_TEAM_PROFILE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table to associate an acquisition file to a person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_TEAM'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM_HIST]  ( 
	[_DISPOSITION_FILE_TEAM_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_FILE_TEAM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DISPOSITION_FILE_TEAM_ID]      	bigint NOT NULL,
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[DSP_FL_TEAM_PROFILE_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPFTM_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_FILE_TEAM_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_OFFER_STATUS_TYPE]  ( 
	[DISPOSITION_OFFER_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                       	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                     	int NULL,
	[IS_DISABLED]                       	bit NOT NULL CONSTRAINT [DSPOFT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NULL CONSTRAINT [DSPOFT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [DSPOFT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [DSPOFT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPOFT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPOFT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPOFT_PK] PRIMARY KEY CLUSTERED([DISPOSITION_OFFER_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion offer status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_OFFER_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the dispostion offer status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the dispostion offer status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_OFFER]  ( 
	[DISPOSITION_OFFER_ID]              	bigint NOT NULL CONSTRAINT [DSPOFR_DISPOSITION_OFFER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_OFFER_ID_SEQ]),
	[DISPOSITION_FILE_ID]               	bigint NOT NULL,
	[DISPOSITION_OFFER_STATUS_TYPE_CODE]	nvarchar(20) NULL,
	[OFFER_NAME]                        	nvarchar(1000) NOT NULL,
	[OFFER_DT]                          	date NOT NULL,
	[OFFER_EXPIRY_DT]                   	date NULL,
	[OFFER_AMT]                         	money NOT NULL,
	[OFFER_NOTE]                        	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NULL CONSTRAINT [DSPOFR_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [DSPOFR_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [DSPOFR_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL CONSTRAINT [DSPOFR_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [DSPOFR_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [DSPOFR_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL CONSTRAINT [DSPOFR_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [DSPOFR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [DSPOFR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPOFR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPOFR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPOFR_PK] PRIMARY KEY CLUSTERED([DISPOSITION_OFFER_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'DISPOSITION_OFFER_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the dispostion file' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the dispostion offer status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'DISPOSITION_OFFER_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The name(s) associated with this disposition offer.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'OFFER_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date the disposition offer was made.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'OFFER_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date the disposition offer expires.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'OFFER_EXPIRY_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The monetary value of the disposition offer.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'OFFER_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Provide any additional details such as offer terms or conditions, and any commentary on why the offer was accepted/countered/rejected.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'OFFER_NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity containing information regarding an disposition offer.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_OFFER'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_OFFER_HIST]  ( 
	[_DISPOSITION_OFFER_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_OFFER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[DISPOSITION_OFFER_ID]              	bigint NOT NULL,
	[DISPOSITION_FILE_ID]               	bigint NOT NULL,
	[DISPOSITION_OFFER_STATUS_TYPE_CODE]	nvarchar(20) NULL,
	[OFFER_NAME]                        	nvarchar(1000) NOT NULL,
	[OFFER_DT]                          	date NOT NULL,
	[OFFER_EXPIRY_DT]                   	date NULL,
	[OFFER_AMT]                         	money NOT NULL,
	[OFFER_NOTE]                        	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPOFR_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_OFFER_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DSP_PURCH_AGENT]  ( 
	[DSP_PURCH_AGENT_ID]            	bigint NOT NULL CONSTRAINT [DSPPAG_DSP_PURCH_AGENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DSP_PURCH_AGENT_ID_SEQ]),
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [DSPPAG_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [DSPPAG_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPPAG_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPPAG_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPPAG_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPPAG_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPPAG_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPPAG_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPPAG_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPPAG_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPPAG_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPPAG_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPPAG_PK] PRIMARY KEY CLUSTERED([DSP_PURCH_AGENT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'DSP_PURCH_AGENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the individual agent for the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the organization agent for the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'ORGANIZATION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary contact person for the organization.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'PRIMARY_CONTACT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the agent associated with the sale of the disposition.  The agent may be an organizations or an individual.  If an organization is the agent, a primary contact person must be provided.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_AGENT'
GO

CREATE TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR]  ( 
	[DSP_PURCH_SOLICITOR_ID]        	bigint NOT NULL CONSTRAINT [DSPPSL_DSP_PURCH_SOLICITOR_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DSP_PURCH_SOLICITOR_ID_SEQ]),
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [DSPPSL_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [DSPPSL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPPSL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPPSL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPPSL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPPSL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPPSL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPPSL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPPSL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPPSL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPPSL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPPSL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPPSL_PK] PRIMARY KEY CLUSTERED([DSP_PURCH_SOLICITOR_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'DSP_PURCH_SOLICITOR_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the individual solicitor for the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the organization solicitor for the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'ORGANIZATION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary contact person for the organization.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'PRIMARY_CONTACT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the solicitor associated with the sale of the disposition.  The solicitor may be an organizations or an individual.  If an organization is the solicitor, a primary contact person must be provided.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DSP_PURCH_SOLICITOR'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_SALE]  ( 
	[DISPOSITION_SALE_ID]           	bigint NOT NULL CONSTRAINT [DSPSAL_DISPOSITION_SALE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_SALE_ID_SEQ]),
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[DSP_PURCH_AGENT_ID]            	bigint NULL,
	[DSP_PURCH_SOLICITOR_ID]        	bigint NULL,
	[FINAL_CONDITION_REMOVAL_DT]    	date NULL,
	[SALE_COMPLETION_DT]            	date NULL,
	[SALE_FISCAL_YEAR]              	smallint NULL,
	[SALE_FINAL_AMT]                	money NULL,
	[REALTOR_COMMISSION_AMT]        	money NULL,
	[IS_GST_REQUIRED]               	bit NOT NULL CONSTRAINT [DSPSAL_IS_GST_REQUIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[GST_COLLECTED_AMT]             	money NULL,
	[NET_BOOK_AMT]                  	money NULL,
	[TOTAL_COST_AMT]                	money NULL,
	[SPP_AMT]                       	money NULL,
	[REMEDIATION_AMT]               	money NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [DSPSAL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPSAL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPSAL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPSAL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPSAL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPSAL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPSAL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPSAL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPSAL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPSAL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPSAL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPSAL_PK] PRIMARY KEY CLUSTERED([DISPOSITION_SALE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_SALE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the dispostion file' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the agent associated with the sale of the disposition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'DSP_PURCH_AGENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the solicitor associated with the sale of the disposition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'DSP_PURCH_SOLICITOR_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'For general sales, provide the date when the last condition(s) are to be removed. For road closures enter the condition precedent date.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'FINAL_CONDITION_REMOVAL_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date the disposition was completed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'SALE_COMPLETION_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The fiscal year in which the sale was completed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'SALE_FISCAL_YEAR'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Value of the final sale.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'SALE_FINAL_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Amount paid to the realtor managing the sale.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'REALTOR_COMMISSION_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is GST required for this sale?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'IS_GST_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST collected is calculated based upon Final Sales Price.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'GST_COLLECTED_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net book value of the disposition sale.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'NET_BOOK_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The sum of all costs incurred to prepare property for sale (e.g., appraisal, environmental and other consultants, legal fees, First Nations accommodation, etc.).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'TOTAL_COST_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Surplus Property Program (SPP) fee to be paid to CITZ.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'SPP_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Cost of propery remediation.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'REMEDIATION_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity containing information regarding an disposition sale.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_PURCHASER]  ( 
	[DISPOSITION_PURCHASER_ID]      	bigint NOT NULL CONSTRAINT [DSPPUR_DISPOSITION_PURCHASER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_PURCHASER_ID_SEQ]),
	[DISPOSITION_SALE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [DSPPUR_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [DSPPUR_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DSPPUR_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DSPPUR_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DSPPUR_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DSPPUR_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DSPPUR_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DSPPUR_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DSPPUR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DSPPUR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DSPPUR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DSPPUR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSPPUR_PK] PRIMARY KEY CLUSTERED([DISPOSITION_PURCHASER_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique auto-generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'DISPOSITION_PURCHASER_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key value for the dispostion sale.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'DISPOSITION_SALE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the individual purchasing the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the organization purchasing the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'ORGANIZATION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary contact person for the organization' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'PRIMARY_CONTACT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the purchaser of the disposition.  There may be multiple purchasers and the purchasers include organizations and individuals.  If an organization is a purchaser, a primary contact person must be provided.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_PURCHASER'
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_PURCHASER_HIST]  ( 
	[_DISPOSITION_PURCHASER_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_PURCHASER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DISPOSITION_PURCHASER_ID]      	bigint NOT NULL,
	[DISPOSITION_SALE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPPUR_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_PURCHASER_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DISPOSITION_SALE_HIST]  ( 
	[_DISPOSITION_SALE_HIST_ID]     	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DISPOSITION_SALE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DISPOSITION_SALE_ID]           	bigint NOT NULL,
	[DISPOSITION_FILE_ID]           	bigint NOT NULL,
	[DSP_PURCH_AGENT_ID]            	bigint NULL,
	[DSP_PURCH_SOLICITOR_ID]        	bigint NULL,
	[FINAL_CONDITION_REMOVAL_DT]    	date NULL,
	[SALE_COMPLETION_DT]            	date NULL,
	[SALE_FISCAL_YEAR]              	smallint NULL,
	[SALE_FINAL_AMT]                	money NULL,
	[REALTOR_COMMISSION_AMT]        	money NULL,
	[IS_GST_REQUIRED]               	bit NOT NULL,
	[GST_COLLECTED_AMT]             	money NULL,
	[NET_BOOK_AMT]                  	money NULL,
	[TOTAL_COST_AMT]                	money NULL,
	[SPP_AMT]                       	money NULL,
	[REMEDIATION_AMT]               	money NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPSAL_H_PK] PRIMARY KEY CLUSTERED([_DISPOSITION_SALE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DOCUMENT_CATEGORY_TYPE]  ( 
	[DOCUMENT_CATEGORY_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                	nvarchar(200) NOT NULL,
	[IS_DISABLED]                	bit NOT NULL CONSTRAINT [DOCCAT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]              	int NULL,
	[CONCURRENCY_CONTROL_NUMBER] 	bigint NULL CONSTRAINT [DOCCAT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [DOCCAT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [DOCCAT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]   	datetime NOT NULL CONSTRAINT [DOCCAT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]      	nvarchar(30) NOT NULL CONSTRAINT [DOCCAT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DOCCAT_PK] PRIMARY KEY CLUSTERED([DOCUMENT_CATEGORY_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The code value category of the document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_CATEGORY_TYPE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_CATEGORY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Translation of the code value into a description that can be displayed to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_CATEGORY_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is still active or is now disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_CATEGORY_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Order in which to display the code values, if required.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_CATEGORY_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The volume unit used for measuring Properties.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_CATEGORY_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DOCUMENT_CATEGORY_SUBTYPE]  ( 
	[DOCUMENT_CATEGORY_SUBTYPE_ID]	bigint NOT NULL CONSTRAINT [DCCTSB_DOCUMENT_CATEGORY_SUBTYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DOCUMENT_CATEGORY_SUBTYPE_ID_SEQ]),
	[DOCUMENT_CATEGORY_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[DOCUMENT_TYPE_ID]            	bigint NOT NULL,
	[DISPLAY_ORDER]               	int NULL,
	[IS_DISABLED]                 	bit NOT NULL CONSTRAINT [DCCTSB_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NULL CONSTRAINT [DCCTSB_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [DCCTSB_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [DCCTSB_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [DCCTSB_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [DCCTSB_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DCCTSB_PK] PRIMARY KEY CLUSTERED([DOCUMENT_CATEGORY_SUBTYPE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Order in which to display the code values, if required.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_CATEGORY_SUBTYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is still active or is now disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_CATEGORY_SUBTYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO

CREATE TABLE [dbo].[PIMS_DOCUMENT_FORMAT_TYPE]  ( 
	[DOCUMENT_FORMAT_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[EFFECTIVE_DATE]            	date NOT NULL CONSTRAINT [DOCFMT_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]               	date NULL,
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [DOCFMT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [DOCFMT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [DOCFMT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [DOCFMT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [DOCFMT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DOCFMT_PK] PRIMARY KEY CLUSTERED([DOCUMENT_FORMAT_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the acceptable document type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_FORMAT_TYPE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_FORMAT_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Decription of the acceptable document type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_FORMAT_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date that the document format became acceptable to the system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_FORMAT_TYPE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date that the document format became unsupported in the system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_FORMAT_TYPE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code values or descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_FORMAT_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table to contain the acceptable document formats that can be uploaded to the system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_FORMAT_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DOCUMENT_HIST]  ( 
	[_DOCUMENT_HIST_ID]             	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[DOCUMENT_TYPE_ID]              	bigint NOT NULL,
	[DOCUMENT_STATUS_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[FILE_NAME]                     	nvarchar(500) NOT NULL,
	[MAYAN_ID]                      	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[DOCUMENT_EXTERNAL_ID]          	nvarchar(1000) NULL,
	CONSTRAINT [PIMS_DOCMNT_H_PK] PRIMARY KEY CLUSTERED([_DOCUMENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DOCUMENT_QUEUE_STATUS_TYPE]  ( 
	[DOCUMENT_QUEUE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[IS_DISABLED]                    	bit NOT NULL CONSTRAINT [DOCQST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                  	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NULL CONSTRAINT [DOCQST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [DOCQST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [DOCQST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [DOCQST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [DOCQST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DOCQST_PK] PRIMARY KEY CLUSTERED([DOCUMENT_QUEUE_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the document queue status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_QUEUE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the document queue status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is still active or is now disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Order in which to display the code values, if required.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table describing the status of the document in the queue for MAYAN EDMS assimilation.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_DOCUMENT]  ( 
	[LEASE_DOCUMENT_ID]             	bigint NOT NULL CONSTRAINT [LESDOC_LEASE_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_DOCUMENT_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [LESDOC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LESDOC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LESDOC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LESDOC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LESDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LESDOC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LESDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LESDOC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [LESDOC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LESDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LESDOC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LESDOC_PK] PRIMARY KEY CLUSTERED([LEASE_DOCUMENT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the relationship betwwen a lease and a document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_DOCUMENT'
GO

CREATE TABLE [dbo].[PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE]  ( 
	[PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                        	nvarchar(200) NOT NULL,
	[IS_DISABLED]                        	bit NOT NULL CONSTRAINT [PACSTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                      	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NULL CONSTRAINT [PACSTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL CONSTRAINT [PACSTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL CONSTRAINT [PACSTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PACSTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PACSTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PACSTY_PK] PRIMARY KEY CLUSTERED([PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the status of the property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the status of the property management status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the status of the property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROP_MGMT_ACTIVITY_TYPE]  ( 
	[PROP_MGMT_ACTIVITY_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                 	nvarchar(200) NOT NULL,
	[IS_DISABLED]                 	bit NOT NULL CONSTRAINT [PRACTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]               	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NULL CONSTRAINT [PRACTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [PRACTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [PRACTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [PRACTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [PRACTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACTY_PK] PRIMARY KEY CLUSTERED([PROP_MGMT_ACTIVITY_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the type of property management.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_TYPE', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the type of property management.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the type of property management.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROP_MGMT_ACTIVITY_SUBTYPE]  ( 
	[PROP_MGMT_ACTIVITY_SUBTYPE_CODE]	nvarchar(20) NOT NULL,
	[PROP_MGMT_ACTIVITY_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[IS_DISABLED]                    	bit NOT NULL CONSTRAINT [PRACST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                  	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NULL CONSTRAINT [PRACST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [PRACST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [PRACST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRACST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRACST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACST_PK] PRIMARY KEY CLUSTERED([PROP_MGMT_ACTIVITY_SUBTYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the subtype of property management.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_SUBTYPE', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_SUBTYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the type of property management.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_SUBTYPE', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the subtype of property management.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_SUBTYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_SUBTYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_SUBTYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the subtype of property management.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_SUBTYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]  ( 
	[PIMS_PROPERTY_ACTIVITY_ID]          	bigint NOT NULL CONSTRAINT [PRPACT_PROPERTY_ACTIVITY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_ID_SEQ]),
	[PROP_MGMT_ACTIVITY_TYPE_CODE]       	nvarchar(20) NOT NULL CONSTRAINT [PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[PROP_MGMT_ACTIVITY_SUBTYPE_CODE]    	nvarchar(20) NOT NULL CONSTRAINT [PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL CONSTRAINT [PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_DEF]  DEFAULT ('NOTSTARTED'),
	[SERVICE_PROVIDER_PERSON_ID]         	bigint NULL,
	[SERVICE_PROVIDER_ORG_ID]            	bigint NULL,
	[REQUEST_ADDED_DT]                   	date NOT NULL,
	[COMPLETION_DT]                      	date NULL,
	[DESCRIPTION]                        	nvarchar(max) NULL,
	[REQUEST_SOURCE]                     	nvarchar(2000) NULL,
	[IS_DISABLED]                        	bit NULL CONSTRAINT [PRPACT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NULL CONSTRAINT [PRPACT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [PRPACT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPACT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DF__PIMS_PROP__APP_L__21E0EDE6]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL CONSTRAINT [PRPACT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPACT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPACT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPACT_PK] PRIMARY KEY CLUSTERED([PIMS_PROPERTY_ACTIVITY_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Type of property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Subtype of property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_SUBTYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Status of the property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the person as a service provider.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'SERVICE_PROVIDER_PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key of the organization as a service provider.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'SERVICE_PROVIDER_ORG_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the request for a property management activity was added' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'REQUEST_ADDED_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the property management activity was completed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'COMPLETION_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Source of the management activity request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'REQUEST_SOURCE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the activities that are associated with this property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]  ( 
	[PROPERTY_ACTIVITY_DOCUMENT_ID] 	bigint NOT NULL CONSTRAINT [PRACDO_PROPERTY_ACTIVITY_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_DOCUMENT_ID_SEQ]),
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRACDO_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACDO_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACDO_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACDO_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACDO_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACDO_PK] PRIMARY KEY CLUSTERED([PROPERTY_ACTIVITY_DOCUMENT_ID])
)
GO

CREATE TABLE [dbo].[PIMS_REQUEST_SOURCE_TYPE]  ( 
	[REQUEST_SOURCE_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NULL CONSTRAINT [RQSRCT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [RQSRCT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [RQSRCT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [RQSRCT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [RQSRCT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [RQSRCT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RQSRCT_PK] PRIMARY KEY CLUSTERED([REQUEST_SOURCE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code indicating the source of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_REQUEST_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'REQUEST_SOURCE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the code indicating the source of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_REQUEST_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_REQUEST_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_REQUEST_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe source ot the research request' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_REQUEST_SOURCE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_STATUS_TYPE]  ( 
	[RESEARCH_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [RSRCHS_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [RSRCHS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RSRCHS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [RSRCHS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RSRCHS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RSRCHS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RSRCHS_PK] PRIMARY KEY CLUSTERED([RESEARCH_FILE_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code indicating the status of the research file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'RESEARCH_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the code indicating the status of the research file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe property adjacent land type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_FILE]  ( 
	[RESEARCH_FILE_ID]              	bigint NOT NULL CONSTRAINT [RESRCH_RESEARCH_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_ID_SEQ]),
	[RESEARCH_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL CONSTRAINT [RESRCH_RESEARCH_FILE_STATUS_TYPE_CODE_DEF]  DEFAULT ('ACTIVE'),
	[REQUEST_SOURCE_TYPE_CODE]      	nvarchar(20) NULL,
	[REQUESTOR_NAME]                	bigint NULL,
	[REQUESTOR_ORGANIZATION]        	bigint NULL,
	[NAME]                          	nvarchar(250) NOT NULL,
	[RFILE_NUMBER]                  	nvarchar(25) NOT NULL CONSTRAINT [RESRCH_RFILE_NUMBER_DEF]  DEFAULT ('RFILE-UNKNOWN'),
	[REQUEST_DATE]                  	date NULL,
	[ROAD_NAME]                     	nvarchar(200) NULL,
	[ROAD_ALIAS]                    	nvarchar(200) NULL,
	[REQUEST_DESCRIPTION]           	nvarchar(3000) NULL,
	[REQUEST_SOURCE_DESCRIPTION]    	nvarchar(2000) NULL,
	[RESEARCH_RESULT]               	nvarchar(2000) NULL,
	[IS_EXPROPRIATION]              	bit NULL,
	[EXPROPRIATION_NOTES]           	nvarchar(1000) NULL,
	[RESEARCH_COMPLETION_DATE]      	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [RESRCH_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RESRCH_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RESRCH_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RESRCH_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RESRCH_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RESRCH_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RESRCH_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RESRCH_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [RESRCH_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RESRCH_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RESRCH_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RESRCH_PK] PRIMARY KEY CLUSTERED([RESEARCH_FILE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the research requestor.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'REQUESTOR_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Organization associated with the research requestor.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'REQUESTOR_ORGANIZATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name given to the research file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'R-File number assigned to the research file, formatted value from PIMS_RFILE_NUMBER_SEQ sequence generator' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'RFILE_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'REQUEST_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name(s) of roads associated with this research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'ROAD_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Alias(es) of roads associated with this research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'ROAD_ALIAS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'REQUEST_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Result of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'RESEARCH_RESULT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this an expropriation?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'IS_EXPROPRIATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes associated with an expropriation.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'EXPROPRIATION_NOTES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the research request was completed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'RESEARCH_COMPLETION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property research file' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE'
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]  ( 
	[RESEARCH_FILE_DOCUMENT_ID]     	bigint NOT NULL CONSTRAINT [RFLDOC_RESEARCH_FILE_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_DOCUMENT_ID_SEQ]),
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [RFLDOC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RFLDOC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RFLDOC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RFLDOC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RFLDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RFLDOC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RFLDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RFLDOC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [RFLDOC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RFLDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RFLDOC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RFLDOC_PK] PRIMARY KEY CLUSTERED([RESEARCH_FILE_DOCUMENT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the relationship betwwen a research file and a document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_DOCUMENT'
GO

CREATE TABLE [dbo].[PIMS_DOCUMENT_QUEUE]  ( 
	[DOCUMENT_QUEUE_ID]              	bigint NOT NULL CONSTRAINT [DOCQUE_DOCUMENT_QUEUE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DOCUMENT_QUEUE_ID_SEQ]),
	[DOCUMENT_ID]                    	bigint NULL,
	[DOCUMENT_QUEUE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DATA_SOURCE_TYPE_CODE]          	nvarchar(20) NOT NULL,
	[PROPERTY_ACTIVITY_DOCUMENT_ID]  	bigint NULL,
	[ACQUISITION_FILE_DOCUMENT_ID]   	bigint NULL,
	[RESEARCH_FILE_DOCUMENT_ID]      	bigint NULL,
	[LEASE_DOCUMENT_ID]              	bigint NULL,
	[DISPOSITION_FILE_DOCUMENT_ID]   	bigint NULL,
	[FILE_NAME]                      	nvarchar(500) NOT NULL,
	[DOCUMENT_EXTERNAL_ID]           	nvarchar(1000) NULL,
	[DOCUMENT_METADATA]              	nvarchar(4000) NULL,
	[DOC_PROCESS_START_DT]           	datetime NULL,
	[DOC_PROCESS_END_DT]             	datetime NULL,
	[DOC_PROCESS_RETRIES]            	int NULL,
	[MAYAN_ERROR]                    	nvarchar(4000) NULL,
	[DOCUMENT]                       	varbinary(max) NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NULL CONSTRAINT [DOCQUE_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DOCQUE_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DOCQUE_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL CONSTRAINT [DOCQUE_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DOCQUE_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DOCQUE_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL CONSTRAINT [DOCQUE_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [DOCQUE_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [DOCQUE_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [DOCQUE_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [DOCQUE_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DOCQUE_PK] PRIMARY KEY CLUSTERED([DOCUMENT_QUEUE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_QUEUE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_DOCUMENT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value that represents the current status of the document as it is processed by PIMS/MAYAN' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_QUEUE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value that refers to the source system the document originated in.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DATA_SOURCE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_PROPERTY_ACTIVITY_DOCUMENT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_ACTIVITY_DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQUISITION_FILE_DOCUMENT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FILE_DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_RESEARCH_FILE_DOCUMENT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'RESEARCH_FILE_DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_DOCUMENT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'LEASE_DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_DISPOSITION_FILE_DOCUMENT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the file to be stored on Mayan EDMS.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'FILE_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Fluid key used to uniquely identify document in external system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_EXTERNAL_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Used to store JSON-encoded metadata that needs to be added to the document during upload.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_METADATA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'When the document is sent to the backend for processing, this will be populated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOC_PROCESS_START_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'When the document?s processing finishes, this will be populated' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOC_PROCESS_END_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The number of times that this document has been queued for upload.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOC_PROCESS_RETRIES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'If the upload process fails, the error corresponding to the failure will be displayed here.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'MAYAN_ERROR'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The actual document blob, stored temporarily until after processing completes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOCUMENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table providing progress tracking of document inclusion into the MAYAN EDMS.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE'
GO

CREATE TABLE [dbo].[PIMS_DOCUMENT_QUEUE_HIST]  ( 
	[_DOCUMENT_QUEUE_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DOCUMENT_QUEUE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[DOCUMENT_QUEUE_ID]              	bigint NOT NULL,
	[DOCUMENT_ID]                    	bigint NULL,
	[DOCUMENT_QUEUE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DATA_SOURCE_TYPE_CODE]          	nvarchar(20) NOT NULL,
	[PROPERTY_ACTIVITY_DOCUMENT_ID]  	bigint NULL,
	[ACQUISITION_FILE_DOCUMENT_ID]   	bigint NULL,
	[RESEARCH_FILE_DOCUMENT_ID]      	bigint NULL,
	[LEASE_DOCUMENT_ID]              	bigint NULL,
	[DISPOSITION_FILE_DOCUMENT_ID]   	bigint NULL,
	[FILE_NAME]                      	nvarchar(500) NOT NULL,
	[DOCUMENT_EXTERNAL_ID]           	nvarchar(1000) NULL,
	[DOCUMENT_METADATA]              	nvarchar(4000) NULL,
	[DOC_PROCESS_START_DT]           	datetime NULL,
	[DOC_PROCESS_END_DT]             	datetime NULL,
	[DOC_PROCESS_RETRIES]            	int NULL,
	[MAYAN_ERROR]                    	nvarchar(4000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DOCQUE_H_PK] PRIMARY KEY CLUSTERED([_DOCUMENT_QUEUE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DOCUMENT_TYP_HIST]  ( 
	[_DOCUMENT_TYP_HIST_ID]         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DOCUMENT_TYP_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DOCUMENT_TYPE_ID]              	bigint NOT NULL,
	[MAYAN_ID]                      	bigint NOT NULL,
	[DOCUMENT_TYPE]                 	nvarchar(20) NOT NULL,
	[DOCUMENT_TYPE_DESCRIPTION]     	nvarchar(200) NOT NULL,
	[DOCUMENT_TYPE_DEFINITION]      	nvarchar(500) NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DOCTYP_H_PK] PRIMARY KEY CLUSTERED([_DOCUMENT_TYP_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DSP_PURCH_AGENT_HIST]  ( 
	[_DSP_PURCH_AGENT_HIST_ID]      	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DSP_PURCH_AGENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DSP_PURCH_AGENT_ID]            	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPPAG_H_PK] PRIMARY KEY CLUSTERED([_DSP_PURCH_AGENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR_HIST]  ( 
	[_DSP_PURCH_SOLICITOR_HIST_ID]  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DSP_PURCH_SOLICITOR_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DSP_PURCH_SOLICITOR_ID]        	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DSPPSL_H_PK] PRIMARY KEY CLUSTERED([_DSP_PURCH_SOLICITOR_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT]  ( 
	[EXPROPRIATION_PAYMENT_ID]      	bigint NOT NULL CONSTRAINT [EXPPMT_EXPROPRIATION_PAYMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_EXPROPRIATION_PAYMENT_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[ACQUISITION_OWNER_ID]          	bigint NULL,
	[INTEREST_HOLDER_ID]            	bigint NULL,
	[EXPROPRIATING_AUTHORITY]       	bigint NULL,
	[DESCRIPTION]                   	nvarchar(2000) NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [FORM8_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [FORM8_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [FORM8_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [FORM8_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [FORM8_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [FORM8_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [FORM8_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [FORM8_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [FORM8_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [FORM8_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [FORM8_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [FORM8_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [EXPPMT_PK] PRIMARY KEY CLUSTERED([EXPROPRIATION_PAYMENT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Form 8 description field.  There are lawyer remarks pending.  This field could be used for: - providing remarks particular to an expropriation form, and /or - for any ETL descriptive fields as well as - a place-holder forfields that do not have a mapping' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROPRIATION_PAYMENT', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the Form 8 payment is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROPRIATION_PAYMENT', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity continaing the details regarding a Form 8 (Notice of Advance Payment).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROPRIATION_PAYMENT'
GO

CREATE TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT_HIST]  ( 
	[_EXPROPRIATION_PAYMENT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_EXPROPRIATION_PAYMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[EXPROPRIATION_PAYMENT_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[ACQUISITION_OWNER_ID]          	bigint NULL,
	[INTEREST_HOLDER_ID]            	bigint NULL,
	[EXPROPRIATING_AUTHORITY]       	bigint NULL,
	[DESCRIPTION]                   	nvarchar(2000) NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_EXPPMT_H_PK] PRIMARY KEY CLUSTERED([_EXPROPRIATION_PAYMENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PAYMENT_ITEM_TYPE]  ( 
	[PAYMENT_ITEM_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PMTITM_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [PMTITM_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PMTITM_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PMTITM_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PMTITM_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PMTITM_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PMTITM_PK] PRIMARY KEY CLUSTERED([PAYMENT_ITEM_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the payment item types, such as market value, temporary SRW, and disturbance damages.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PAYMENT_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'PAYMENT_ITEM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the payment item types, such as market value, temporary SRW, and disturbance damages.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PAYMENT_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PAYMENT_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PAYMENT_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the codes and associated descriptions of the payment item types, such as market value, temporary SRW, and disturbance damages.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PAYMENT_ITEM_TYPE'
GO

CREATE TABLE [dbo].[PIMS_EXPROP_PMT_PMT_ITEM]  ( 
	[EXPROP_PMT_PMT_ITEM_ID]        	bigint NOT NULL CONSTRAINT [XPMTITY_EXPROP_PMT_PMT_ITEM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_EXPROP_PMT_PMT_ITEM_ID_SEQ]),
	[EXPROPRIATION_PAYMENT_ID]      	bigint NOT NULL,
	[PAYMENT_ITEM_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[IS_GST_REQUIRED]               	bit NULL CONSTRAINT [XPMTITY_IS_GST_REQUIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[PRETAX_AMT]                    	money NULL,
	[TAX_AMT]                       	money NULL,
	[TOTAL_AMT]                     	money NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [XPMTITY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [XPMTITY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [XPMTITY_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [XPMTITY_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [XPMTITY_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [XPMTITY_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [XPMTITY_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [XPMTITY_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [XPMTITY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [XPMTITY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [XPMTITY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [XPMTITY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [XPMTITY_PK] PRIMARY KEY CLUSTERED([EXPROP_PMT_PMT_ITEM_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if GST is required for this transaction.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_PMT_PMT_ITEM', 
	@level2type = N'Column', @level2name = N'IS_GST_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Subtotal of the Form 8 payment.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_PMT_PMT_ITEM', 
	@level2type = N'Column', @level2name = N'PRETAX_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST on the Form 8 oayment.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_PMT_PMT_ITEM', 
	@level2type = N'Column', @level2name = N'TAX_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Total amount of the Form 8 payment.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_PMT_PMT_ITEM', 
	@level2type = N'Column', @level2name = N'TOTAL_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_PMT_PMT_ITEM', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associative entity to connect expropriation forms (Form 8) to payment item types.  The supports the ability to associate multiple payment item types to a single expropriation form (Form 8).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_EXPROP_PMT_PMT_ITEM'
GO

CREATE TABLE [dbo].[PIMS_EXPROP_PMT_PMT_ITEM_HIST]  ( 
	[_EXPROP_PMT_PMT_ITEM_HIST_ID]  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_EXPROP_PMT_PMT_ITEM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[EXPROP_PMT_PMT_ITEM_ID]        	bigint NOT NULL,
	[EXPROPRIATION_PAYMENT_ID]      	bigint NOT NULL,
	[PAYMENT_ITEM_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[IS_GST_REQUIRED]               	bit NULL,
	[PRETAX_AMT]                    	money NULL,
	[TAX_AMT]                       	money NULL,
	[TOTAL_AMT]                     	money NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_XPMTIT_H_PK] PRIMARY KEY CLUSTERED([_EXPROP_PMT_PMT_ITEM_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_FENCE_TYPE]  ( 
	[FENCE_TYPE_CODE]           	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [FNCTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [FNCTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [FNCTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [FNCTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [FNCTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [FNCTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [FNCTYP_PK] PRIMARY KEY CLUSTERED([FENCE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the fence type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FENCE_TYPE', 
	@level2type = N'Column', @level2name = N'FENCE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the fence type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FENCE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FENCE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FENCE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the fence type.  This is an unassociated table that is used in the UI to populate JSON attributes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FENCE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE_HIST]  ( 
	[_FINANCIAL_ACTIVITY_CODE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_FINANCIAL_ACTIVITY_CODE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]             	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                   	datetime NULL,
	[ID]                              	bigint NOT NULL,
	[CODE]                            	nvarchar(20) NOT NULL,
	[DESCRIPTION]                     	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                   	int NULL,
	[EFFECTIVE_DATE]                  	datetime NOT NULL,
	[EXPIRY_DATE]                     	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_FINACT_H_PK] PRIMARY KEY CLUSTERED([_FINANCIAL_ACTIVITY_CODE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_H120_CATEGORY]  ( 
	[H120_CATEGORY_ID]              	bigint NOT NULL CONSTRAINT [H120CT_H120_CATEGORY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_H120_CATEGORY_ID_SEQ]),
	[FINANCIAL_ACTIVITY_ID]         	bigint NOT NULL,
	[WORK_ACTIVITY_ID]              	bigint NULL,
	[COST_TYPE_ID]                  	bigint NULL,
	[H120_CATEGORY_NO]              	int NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[EXPIRY_DATE]                   	datetime NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [H120CT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [H120CT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [H120CT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [H120CT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [H120CT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [H120CT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [H120CT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [H120CT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [H120CT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [H120CT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [H120CT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [H120CT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [H120CT_PK] PRIMARY KEY CLUSTERED([H120_CATEGORY_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the H120 category.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_H120_CATEGORY', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Expiry date of the H120 category.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_H120_CATEGORY', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the requisition is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_H120_CATEGORY', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing the compensation requisition data for the acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_H120_CATEGORY'
GO

CREATE TABLE [dbo].[PIMS_H120_CATEGORY_HIST]  ( 
	[_H120_CATEGORY_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_H120_CATEGORY_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[H120_CATEGORY_ID]              	bigint NOT NULL,
	[FINANCIAL_ACTIVITY_ID]         	bigint NOT NULL,
	[WORK_ACTIVITY_ID]              	bigint NULL,
	[COST_TYPE_ID]                  	bigint NULL,
	[H120_CATEGORY_NO]              	int NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[EXPIRY_DATE]                   	datetime NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_H120CT_H_PK] PRIMARY KEY CLUSTERED([_H120_CATEGORY_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_HISTORICAL_FILE_NUMBER_TYPE]  ( 
	[HISTORICAL_FILE_NUMBER_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                     	nvarchar(200) NOT NULL,
	[IS_DISABLED]                     	bit NOT NULL CONSTRAINT [HFLNMT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                   	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NULL CONSTRAINT [HFLNMT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [HFLNMT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [HFLNMT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [HFLNMT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [HFLNMT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [HFLNMT_PK] PRIMARY KEY CLUSTERED([HISTORICAL_FILE_NUMBER_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the type of historical file number.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER_TYPE', 
	@level2type = N'Column', @level2name = N'HISTORICAL_FILE_NUMBER_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the type of historical file number.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the type of historical property file number.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER_TYPE'
GO

CREATE TABLE [dbo].[PIMS_HISTORICAL_FILE_NUMBER]  ( 
	[HISTORICAL_FILE_NUMBER_ID]       	bigint NOT NULL CONSTRAINT [HFLNUM_HISTORICAL_FILE_NUMBER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_HISTORICAL_FILE_NUMBER_ID_SEQ]),
	[PROPERTY_ID]                     	bigint NOT NULL,
	[DATA_SOURCE_TYPE_CODE]           	nvarchar(20) NULL,
	[HISTORICAL_FILE_NUMBER_TYPE_CODE]	nvarchar(20) NOT NULL,
	[HISTORICAL_FILE_NUMBER]          	nvarchar(500) NOT NULL,
	[OTHER_HIST_FILE_NUMBER_TYPE_CODE]	nvarchar(200) NULL,
	[IS_DISABLED]                     	bit NULL CONSTRAINT [HFLNUM_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NULL CONSTRAINT [HFLNUM_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [HFLNUM_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [HFLNUM_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL CONSTRAINT [HFLNUM_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [HFLNUM_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [HFLNUM_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL CONSTRAINT [HFLNUM_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [HFLNUM_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [HFLNUM_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [HFLNUM_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [HFLNUM_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [HFLNUM_PK] PRIMARY KEY CLUSTERED([HISTORICAL_FILE_NUMBER_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'HISTORICAL_FILE_NUMBER_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_PROPERTY table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key indicating the source of the data.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'DATA_SOURCE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key describing the historical file number type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'HISTORICAL_FILE_NUMBER_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The historical file number value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'HISTORICAL_FILE_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the historical file number type that''s not currently listed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'OTHER_HIST_FILE_NUMBER_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the record is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing the historical file numbers associated with a property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_HISTORICAL_FILE_NUMBER'
GO

CREATE TABLE [dbo].[PIMS_HISTORICAL_FILE_NUMBER_HIST]  ( 
	[_HISTORICAL_FILE_NUMBER_HIST_ID] 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_HISTORICAL_FILE_NUMBER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]             	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                   	datetime NULL,
	[HISTORICAL_FILE_NUMBER_ID]       	bigint NOT NULL,
	[PROPERTY_ID]                     	bigint NOT NULL,
	[DATA_SOURCE_TYPE_CODE]           	nvarchar(20) NULL,
	[HISTORICAL_FILE_NUMBER_TYPE_CODE]	nvarchar(20) NOT NULL,
	[HISTORICAL_FILE_NUMBER]          	nvarchar(500) NOT NULL,
	[OTHER_HIST_FILE_NUMBER_TYPE_CODE]	nvarchar(200) NULL,
	[IS_DISABLED]                     	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_HFLNUM_H_PK] PRIMARY KEY CLUSTERED([_HISTORICAL_FILE_NUMBER_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_INSURANCE_TYPE]  ( 
	[INSURANCE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [INSPYT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [INSPYT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [INSPYT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [INSPYT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [INSPYT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [INSPYT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [INSPYT_PK] PRIMARY KEY CLUSTERED([INSURANCE_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_INSURANCE]  ( 
	[INSURANCE_ID]                  	bigint NOT NULL CONSTRAINT [INSRNC_INSURANCE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_INSURANCE_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[INSURANCE_TYPE_CODE]           	nvarchar(20) NOT NULL,
	[OTHER_INSURANCE_TYPE]          	nvarchar(200) NULL,
	[COVERAGE_DESCRIPTION]          	nvarchar(2000) NULL,
	[COVERAGE_LIMIT]                	money NULL CONSTRAINT [INSRNC_COVERAGE_LIMIT_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_INSURANCE_IN_PLACE]         	bit NULL,
	[EXPIRY_DATE]                   	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [INSRNC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [INSRNC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [INSRNC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [INSRNC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [INSRNC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [INSRNC_PK] PRIMARY KEY CLUSTERED([INSURANCE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'INSURANCE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'LEASE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key indicating the type of insurance on the lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'INSURANCE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the non-standard insurance coverage type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'OTHER_INSURANCE_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the insurance coverage' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'COVERAGE_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Monetary limit of the insurance coverage' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'COVERAGE_LIMIT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicator that insurance is in place.  TRUE if insurance is in place, FALSE if insurance is not in place, and NULL if it is unknown if insurance is in place.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'IS_INSURANCE_IN_PLACE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the insurance expires' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO

CREATE TABLE [dbo].[PIMS_INSURANCE_HIST]  ( 
	[_INSURANCE_HIST_ID]            	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_INSURANCE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[INSURANCE_ID]                  	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[INSURANCE_TYPE_CODE]           	nvarchar(20) NOT NULL,
	[OTHER_INSURANCE_TYPE]          	nvarchar(200) NULL,
	[COVERAGE_DESCRIPTION]          	nvarchar(2000) NULL,
	[COVERAGE_LIMIT]                	money NULL,
	[IS_INSURANCE_IN_PLACE]         	bit NULL,
	[EXPIRY_DATE]                   	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_INSRNC_H_PK] PRIMARY KEY CLUSTERED([_INSURANCE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_INTEREST_HOLDER_HIST]  ( 
	[_INTEREST_HOLDER_HIST_ID]      	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_INTEREST_HOLDER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[INTEREST_HOLDER_ID]            	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[INTEREST_HOLDER_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_INTHLD_H_PK] PRIMARY KEY CLUSTERED([_INTEREST_HOLDER_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_INTEREST_HOLDER_INTEREST_TYPE]  ( 
	[INTEREST_HOLDER_INTEREST_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                       	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                     	int NULL,
	[IS_DISABLED]                       	bit NULL CONSTRAINT [IHINTT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NULL CONSTRAINT [IHINTT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [IHINTT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [IHINTT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [IHINTT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [IHINTT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [IHINTT_PK] PRIMARY KEY CLUSTERED([INTEREST_HOLDER_INTEREST_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the interest holder interest type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'INTEREST_HOLDER_INTEREST_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the interest holder interest type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Tables that contains the codes and associated descriptions of the interest holder interest types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_INTEREST_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]  ( 
	[PROPERTY_ACQUISITION_FILE_ID]  	bigint NOT NULL CONSTRAINT [PRACQF_PROPERTY_ACQUISITION_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACQUISITION_FILE_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_NAME]                 	nvarchar(500) NULL,
	[LOCATION]                      	[sys].[geometry] NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRACQF_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACQF_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACQF_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACQF_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACQF_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACQF_PK] PRIMARY KEY CLUSTERED([PROPERTY_ACQUISITION_FILE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'PROPERTY_ACQUISITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the ACQUISTION_FILE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PROPERTY table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive reference for the property associated with the acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'PROPERTY_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Geospatial location (pin) of property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'LOCATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property with an acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE'
GO

CREATE TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]  ( 
	[PIMS_INTHLDR_PROP_INTEREST_ID] 	bigint NOT NULL CONSTRAINT [IHPRIN_PIMS_INTHLDR_PROP_INTEREST_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_INTHLDR_PROP_INTEREST_ID_SEQ]),
	[INTEREST_HOLDER_ID]            	bigint NOT NULL,
	[PROPERTY_ACQUISITION_FILE_ID]  	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [IHPRIN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [IHPRIN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [IHPRIN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [IHPRIN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [IHPRIN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [IHPRIN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [IHPRIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [IHPRIN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [IHPRIN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [IHPRIN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [IHPRIN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [IHPRIN_PK] PRIMARY KEY CLUSTERED([PIMS_INTHLDR_PROP_INTEREST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST_HIST]  ( 
	[_INTHLDR_PROP_INTEREST_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_INTHLDR_PROP_INTEREST_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PIMS_INTHLDR_PROP_INTEREST_ID] 	bigint NOT NULL,
	[INTEREST_HOLDER_ID]            	bigint NOT NULL,
	[PROPERTY_ACQUISITION_FILE_ID]  	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_IHPRIN_H_PK] PRIMARY KEY CLUSTERED([_INTHLDR_PROP_INTEREST_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LAND_ACT_TYPE]  ( 
	[LAND_ACT_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LNDATY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [LNDATY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LNDATY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LNDATY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LNDATY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LNDATY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LNDATY_PK] PRIMARY KEY CLUSTERED([LAND_ACT_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the Land Act type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_ACT_TYPE', 
	@level2type = N'Column', @level2name = N'LAND_ACT_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the Land Act type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_ACT_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_ACT_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_ACT_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Tables that contains the codes and associated descriptions of the site contamination types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_ACT_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LAND_SURVEYOR_TYPE]  ( 
	[LAND_SURVEYOR_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LNSRVT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [LNSRVT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LNSRVT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LNSRVT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LNSRVT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LNSRVT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LNSRVT_PK] PRIMARY KEY CLUSTERED([LAND_SURVEYOR_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the land surveyor type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_SURVEYOR_TYPE', 
	@level2type = N'Column', @level2name = N'LAND_SURVEYOR_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the land surveyor type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_SURVEYOR_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_SURVEYOR_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_SURVEYOR_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the land surveyor type.  This is an unassociated table that is used in the UI to populate JSON attributes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_SURVEYOR_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_CHKLST_SECTION_TYPE]  ( 
	[LEASE_CHKLST_SECTION_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	date NOT NULL CONSTRAINT [LCKSTY_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	date NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [LCKSTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [LCKSTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LCKSTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LCKSTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LCKSTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LCKSTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LCKSTY_PK] PRIMARY KEY CLUSTERED([LEASE_CHKLST_SECTION_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Lease & license checklist section code value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_CHKLST_SECTION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Lease & license checklist section descriptive text presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies the order that the lease & license checklist sections are presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the lease & license checklist section is able to be presented to the user via the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the lease & license checklist section is removed from the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is currently active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the lease & license checklist sctions that are presented to the user through dynamically building the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_CHKLST_ITEM_TYPE]  ( 
	[LEASE_CHKLST_ITEM_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[LEASE_CHKLST_SECTION_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[HINT]                          	nvarchar(200) NULL,
	[IS_REQUIRED]                   	bit NULL CONSTRAINT [LCKITY_IS_REQUIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	date NOT NULL CONSTRAINT [LCKITY_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	date NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [LCKITY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [LCKITY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LCKITY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LCKITY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LCKITY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LCKITY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LCKITY_PK] PRIMARY KEY CLUSTERED([LEASE_CHKLST_ITEM_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Lease & license checklist item code value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_CHKLST_ITEM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_CHKLST_SECTION_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_CHKLST_SECTION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Lease & license checklist item descriptive text presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Lease & license checklist item descriptive tooltip presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'HINT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the lease & license checklist item is a required field.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'IS_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies the order that the lease & license checklist items are presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the lease & license checklist item is able to be presented to the user via the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the lease & license checklist item is removed from the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is currently active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the lease & license checklist items that are presented to the user through dynamically building the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_CHECKLIST_ITEM]  ( 
	[LEASE_CHECKLIST_ITEM_ID]       	bigint NOT NULL CONSTRAINT [LCHKLI_LEASE_CHECKLIST_ITEM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_CHECKLIST_ITEM_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[LEASE_CHKLST_ITEM_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[CHKLST_ITEM_STATUS_TYPE_CODE]  	nvarchar(20) NOT NULL CONSTRAINT [LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_DEF]  DEFAULT ('INCOMP'),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [LCHKLI_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LCHKLI_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LCHKLI_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LCHKLI_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LCHKLI_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LCHKLI_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LCHKLI_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LCHKLI_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LCHKLI_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LCHKLI_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LCHKLI_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LCHKLI_PK] PRIMARY KEY CLUSTERED([LEASE_CHECKLIST_ITEM_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'LEASE_CHECKLIST_ITEM_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'LEASE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_CHKLST_ITEM_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'LEASE_CHKLST_ITEM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_CHKLST_ITEM_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'CHKLST_ITEM_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the lease & license checklist items.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM'
GO

CREATE TABLE [dbo].[PIMS_LEASE_CHECKLIST_ITEM_HIST]  ( 
	[_LEASE_CHECKLIST_ITEM_HIST_ID] 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_CHECKLIST_ITEM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_CHECKLIST_ITEM_ID]       	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[LEASE_CHKLST_ITEM_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[CHKLST_ITEM_STATUS_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LCHKLI_H_PK] PRIMARY KEY CLUSTERED([_LEASE_CHECKLIST_ITEM_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_CONSULTATION]  ( 
	[LEASE_CONSULTATION_ID]         	bigint NOT NULL CONSTRAINT [LESCON_LEASE_CONSULTATION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_CONSULTATION_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[CONSULTATION_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[CONSULTATION_STATUS_TYPE_CODE] 	nvarchar(20) NOT NULL CONSTRAINT [LESCON_CONSULTATION_STATUS_TYPE_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[CONSULTATION_OUTCOME_TYPE_CODE]	nvarchar(20) NOT NULL CONSTRAINT [LESCON_CONSULTATION_OUTCOME_TYPE_CODE_DEF]  DEFAULT ('INPROGRESS'),
	[OTHER_DESCRIPTION]             	nvarchar(2000) NULL,
	[REQUESTED_ON]                  	datetime NULL,
	[IS_RESPONSE_RECEIVED]          	bit NULL,
	[RESPONSE_RECEIVED_DATE]        	datetime NULL,
	[COMMENT]                       	nvarchar(500) NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [LESCON_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [LESCON_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LESCON_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LESCON_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LESCON_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LESCON_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LESCON_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LESCON_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LESCON_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [LESCON_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LESCON_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LESCON_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LESCON_PK] PRIMARY KEY CLUSTERED([LEASE_CONSULTATION_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'LEASE_CONSULTATION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'LEASE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Consultation contact person exclusive of an organization.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Consultation contact organization.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'ORGANIZATION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Consultation contact person within the organization.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'PRIMARY_CONTACT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_CONSULTATION_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'CONSULTATION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_CONSULTATION_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'CONSULTATION_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_CONSULTATION_OUTCOME_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'CONSULTATION_OUTCOME_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description for the approval / consultation when "Other" consultation type is selected.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'OTHER_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date that the approval / consultation request was sent.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'REQUESTED_ON'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Has the consultation request response been received?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'IS_RESPONSE_RECEIVED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date that the consultation request response was received.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'RESPONSE_RECEIVED_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Remarks / summary on the process or its results.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'COMMENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'if the record is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO

CREATE TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST]  ( 
	[_LEASE_CONSULTATION_HIST_ID]   	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_CONSULTATION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_CONSULTATION_ID]         	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[CONSULTATION_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[CONSULTATION_STATUS_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[CONSULTATION_OUTCOME_TYPE_CODE]	nvarchar(20) NOT NULL,
	[OTHER_DESCRIPTION]             	nvarchar(2000) NULL,
	[REQUESTED_ON]                  	datetime NULL,
	[IS_RESPONSE_RECEIVED]          	bit NULL,
	[RESPONSE_RECEIVED_DATE]        	datetime NULL,
	[COMMENT]                       	nvarchar(500) NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LESCON_H_PK] PRIMARY KEY CLUSTERED([_LEASE_CONSULTATION_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_DOCUMENT_HIST]  ( 
	[_LEASE_DOCUMENT_HIST_ID]       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_DOCUMENT_ID]             	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LESDOC_H_PK] PRIMARY KEY CLUSTERED([_LEASE_DOCUMENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_HIST]  ( 
	[_LEASE_HIST_ID]                	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[LEASE_PAY_RVBL_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[LEASE_LICENSE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_PROGRAM_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_INITIATOR_TYPE_CODE]     	nvarchar(20) NULL,
	[LEASE_RESPONSIBILITY_TYPE_CODE]	nvarchar(20) NULL,
	[LEASE_STATUS_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[REGION_CODE]                   	smallint NULL,
	[PROJECT_ID]                    	bigint NULL,
	[PRODUCT_ID]                    	bigint NULL,
	[L_FILE_NO]                     	nvarchar(50) NULL,
	[TFA_FILE_NO]                   	int NULL,
	[TFA_FILE_NUMBER]               	nvarchar(500) NULL,
	[PS_FILE_NO]                    	nvarchar(50) NULL,
	[LEASE_DESCRIPTION]             	nvarchar(2000) NULL,
	[LEASE_NOTES]                   	nvarchar(4000) NULL,
	[MOTI_CONTACT]                  	nvarchar(200) NULL,
	[DOCUMENTATION_REFERENCE]       	nvarchar(500) NULL,
	[RETURN_NOTES]                  	nvarchar(1000) NULL,
	[OTHER_LEASE_PROGRAM_TYPE]      	nvarchar(200) NULL,
	[OTHER_LEASE_LICENSE_TYPE]      	nvarchar(200) NULL,
	[ORIG_START_DATE]               	datetime NULL,
	[ORIG_EXPIRY_DATE]              	datetime NULL,
	[TERMINATION_DATE]              	datetime NULL,
	[LEASE_AMOUNT]                  	money NULL,
	[RESPONSIBILITY_EFFECTIVE_DATE] 	datetime NULL,
	[INSPECTION_DATE]               	datetime NULL,
	[INSPECTION_NOTES]              	nvarchar(1000) NULL,
	[IS_SUBJECT_TO_RTA]             	bit NULL,
	[IS_COMM_BLDG]                  	bit NULL,
	[IS_OTHER_IMPROVEMENT]          	bit NULL,
	[IS_EXPIRED]                    	bit NOT NULL,
	[HAS_PHYSICAL_FILE]             	bit NULL,
	[HAS_DIGITAL_FILE]              	bit NULL,
	[HAS_PHYSICIAL_LICENSE]         	bit NULL,
	[HAS_DIGITAL_LICENSE]           	bit NULL,
	[CANCELLATION_REASON]           	nvarchar(500) NULL,
	[TERMINATION_REASON]            	nvarchar(500) NULL,
	[IS_PUBLIC_BENEFIT]             	bit NULL,
	[IS_FINANCIAL_GAIN]             	bit NULL,
	[FEE_DETERMINATION_NOTE]        	nvarchar(1000) NULL,
	[PRIMARY_ARBITRATION_CITY]      	nvarchar(200) NULL,
	[TOTAL_ALLOWABLE_COMPENSATION]  	money NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LEASE_H_PK] PRIMARY KEY CLUSTERED([_LEASE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_PURPOSE_TYPE]  ( 
	[LEASE_PURPOSE_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LPRPTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [LPRPTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LPRPTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LPRPTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LPRPTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LPRPTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LPRPTY_PK] PRIMARY KEY CLUSTERED([LEASE_PURPOSE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the purpose type associated with a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PURPOSE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_LEASE_PURPOSE]  ( 
	[LEASE_LEASE_PURPOSE_ID]        	bigint NOT NULL CONSTRAINT [LLPURP_LEASE_LEASE_PURPOSE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_LEASE_PURPOSE_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[LEASE_PURPOSE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_PURPOSE_OTHER_DESC]      	nvarchar(200) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [LLPURP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LLPURP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LLPURP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LLPURP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LLPURP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LLPURP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LLPURP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LLPURP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LLPURP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LLPURP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LLPURP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LLPURP_PK] PRIMARY KEY CLUSTERED([LEASE_LEASE_PURPOSE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'PK Generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'LEASE_LEASE_PURPOSE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'FK Foreign key to the PIMS_LEASE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'LEASE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'FK Foreign key to the PIMS_LEASE_PURPOSE_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'LEASE_PURPOSE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User-specified lease purpose description not included in standard set of lease purposes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'LEASE_PURPOSE_OTHER_DESC'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LEASE_PURPOSE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO

CREATE TABLE [dbo].[PIMS_LEASE_LEASE_PURPOSE_HIST]  ( 
	[_LEASE_LEASE_PURPOSE_HIST_ID]  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_LEASE_PURPOSE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_LEASE_PURPOSE_ID]        	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[LEASE_PURPOSE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_PURPOSE_OTHER_DESC]      	nvarchar(200) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LLPURP_H_PK] PRIMARY KEY CLUSTERED([_LEASE_LEASE_PURPOSE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_NOTE]  ( 
	[LEASE_NOTE_ID]                 	bigint NOT NULL CONSTRAINT [LESNOT_LEASE_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_NOTE_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [LESNOT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LESNOT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LESNOT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LESNOT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LESNOT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LESNOT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LESNOT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LESNOT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [LESNOT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LESNOT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LESNOT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LESNOT_PK] PRIMARY KEY CLUSTERED([LEASE_NOTE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the relationship betwwen a lease and a note.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_NOTE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_NOTE_HIST]  ( 
	[_LEASE_NOTE_HIST_ID]           	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_NOTE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_NOTE_ID]                 	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LESNOT_H_PK] PRIMARY KEY CLUSTERED([_LEASE_NOTE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_PAYMENT_CATEGORY_TYPE]  ( 
	[LEASE_PAYMENT_CATEGORY_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                     	nvarchar(200) NOT NULL,
	[IS_DISABLED]                     	bit NOT NULL CONSTRAINT [LPCATT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                   	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NULL CONSTRAINT [LPCATT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [LPCATT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [LPCATT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [LPCATT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [LPCATT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LPCATT_PK] PRIMARY KEY CLUSTERED([LEASE_PAYMENT_CATEGORY_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment category type code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_CATEGORY_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_PAYMENT_CATEGORY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment category type description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_CATEGORY_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates that the record is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_CATEGORY_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the descriptions' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_CATEGORY_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_CATEGORY_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_CATEGORY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_CATEGORY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_CATEGORY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_CATEGORY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the category of the lease payment (currently Base, Additional, or Variable).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_CATEGORY_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_PAYMENT_METHOD_TYPE]  ( 
	[LEASE_PAYMENT_METHOD_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [LSPMMT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [LSPMMT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LSPMMT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LSPMMT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LSPMMT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LSPMMT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSPMMT_PK] PRIMARY KEY CLUSTERED([LEASE_PAYMENT_METHOD_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment method type code' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_METHOD_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_PAYMENT_METHOD_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment method type description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_METHOD_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this code disabled?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_METHOD_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the descriptions' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_METHOD_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the type of payment method for a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_METHOD_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_PAYMENT_STATUS_TYPE]  ( 
	[LEASE_PAYMENT_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [LPSTST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [LPSTST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LPSTST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LPSTST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LPSTST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LPSTST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LPSTST_PK] PRIMARY KEY CLUSTERED([LEASE_PAYMENT_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment status type code' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_PAYMENT_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment status type description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this code disabled?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the descriptions' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the status of forecast payments' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE]  ( 
	[LEASE_PERIOD_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                  	nvarchar(200) NOT NULL,
	[IS_DISABLED]                  	bit NOT NULL CONSTRAINT [LSPRST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]   	bigint NULL CONSTRAINT [LSPRST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LSPRST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LSPRST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LSPRST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LSPRST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSPRST_PK] PRIMARY KEY CLUSTERED([LEASE_PERIOD_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the status of the lease period.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_PERIOD_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the status of the lease period.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates that the record is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the status of the lease period.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_PMT_FREQ_TYPE]  ( 
	[LEASE_PMT_FREQ_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LSPMTF_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [LSPMTF_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LSPMTF_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LSPMTF_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LSPMTF_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LSPMTF_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSPMTF_PK] PRIMARY KEY CLUSTERED([LEASE_PMT_FREQ_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment frequency type code' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PMT_FREQ_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_PMT_FREQ_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment frequency type code description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PMT_FREQ_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates that the record is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PMT_FREQ_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PMT_FREQ_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PMT_FREQ_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PMT_FREQ_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PMT_FREQ_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PMT_FREQ_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PMT_FREQ_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the frequency of payments for a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PMT_FREQ_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_PERIOD]  ( 
	[LEASE_PERIOD_ID]               	bigint NOT NULL CONSTRAINT [LSPERD_LEASE_PERIOD_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_PERIOD_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[LEASE_PERIOD_STATUS_TYPE_CODE] 	nvarchar(20) NULL,
	[LEASE_PMT_FREQ_TYPE_CODE]      	nvarchar(20) NULL,
	[ADDL_RENT_FREQ]                	nvarchar(20) NULL,
	[VBL_RENT_FREQ]                 	nvarchar(20) NULL,
	[PERIOD_START_DATE]             	datetime NOT NULL,
	[PERIOD_EXPIRY_DATE]            	datetime NULL,
	[PERIOD_RENEWAL_DATE]           	datetime NULL,
	[PAYMENT_AMOUNT]                	money NULL,
	[PAYMENT_DUE_DATE]              	nvarchar(2000) NULL,
	[PAYMENT_NOTE]                  	nvarchar(2000) NULL,
	[IS_GST_ELIGIBLE]               	bit NULL,
	[GST_AMOUNT]                    	money NULL,
	[IS_PERIOD_EXERCISED]           	bit NULL,
	[IS_VARIABLE_PAYMENT]           	bit NOT NULL CONSTRAINT [LSPERD_IS_VARIABLE_PAYMENT_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_FLEXIBLE_DURATION]          	bit NOT NULL CONSTRAINT [LSPERD_IS_FLEXIBLE_DURATION_DEF]  DEFAULT (CONVERT([bit],(0))),
	[ADDL_RENT_AGREED_PMT]          	money NULL,
	[ADDL_RENT_GST_AMOUNT]          	money NULL,
	[IS_ADDL_RENT_SUBJECT_TO_GST]   	bit NULL,
	[VBL_RENT_AGREED_PMT]           	money NULL,
	[VBL_RENT_GST_AMOUNT]           	money NULL,
	[IS_VBL_RENT_SUBJECT_TO_GST]    	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [LSPERD_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LSPERD_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LSPERD_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LSPERD_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LSPERD_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LSPERD_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LSPERD_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LSPERD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LSPERD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LSPERD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LSPERD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSPERD_PK] PRIMARY KEY CLUSTERED([LEASE_PERIOD_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'LEASE_PERIOD_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the PIMS_LEASE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'LEASE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the PIMS_LEASE_PERIOD_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'LEASE_PERIOD_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the PIMS_LEASE_PMT_FREQ_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'LEASE_PMT_FREQ_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the PIMS_LEASE_PMT_FREQ_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'ADDL_RENT_FREQ'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the PIMS_LEASE_PMT_FREQ_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'VBL_RENT_FREQ'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Start date of the current period of the lease/licence' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'PERIOD_START_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Expiry date of the current period of the lease/licence' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'PERIOD_EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Renewal date of the current period of the lease/licence' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'PERIOD_RENEWAL_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Agreed-to payment amount (exclusive of GST)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'PAYMENT_AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Anecdotal description of payment due date (e.g. 1st of month, end of month)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'PAYMENT_DUE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes regarding payment status for the lease period' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'PAYMENT_NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is the lease subject to GST?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'IS_GST_ELIGIBLE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Calculated/entered GST portion of the payment.  Can be overridden by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'GST_AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Has the lease period been exercised?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'IS_PERIOD_EXERCISED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether the payment type is predetermined (FALSE) or variable (TRUE).  Predetermined (FALSE) is the default value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'IS_VARIABLE_PAYMENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether the period duration is fixed (FALSE) or flexible (TRUE).  Fixed (FALSE) is the default value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'IS_FLEXIBLE_DURATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates the agreed-to variable additional rent payment amount.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'ADDL_RENT_AGREED_PMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST dollar amount for the additional rent.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'ADDL_RENT_GST_AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is the variable additional rent payment subject to GST?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'IS_ADDL_RENT_SUBJECT_TO_GST'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates the agreed-to variable rent payment amount.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'VBL_RENT_AGREED_PMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST dollar amount for the variable rent.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'VBL_RENT_GST_AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is the variable rent payment subject to GST?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'IS_VBL_RENT_SUBJECT_TO_GST'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes a duration period for the associated lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PERIOD'
GO

CREATE TABLE [dbo].[PIMS_LEASE_PAYMENT]  ( 
	[LEASE_PAYMENT_ID]                	bigint NOT NULL CONSTRAINT [LSPYMT_LEASE_PAYMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_PAYMENT_ID_SEQ]),
	[LEASE_PERIOD_ID]                 	bigint NOT NULL,
	[LEASE_PAYMENT_METHOD_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[LEASE_PAYMENT_STATUS_TYPE_CODE]  	nvarchar(20) NULL,
	[LEASE_PAYMENT_CATEGORY_TYPE_CODE]	nvarchar(20) NULL,
	[LEASE_PMT_FREQ_TYPE_CODE]        	nvarchar(20) NULL,
	[PAYMENT_RECEIVED_DATE]           	datetime NOT NULL,
	[PAYMENT_AMOUNT_PRE_TAX]          	money NOT NULL,
	[PAYMENT_AMOUNT_PST]              	money NULL,
	[PAYMENT_AMOUNT_GST]              	money NULL,
	[PAYMENT_AMOUNT_TOTAL]            	money NOT NULL,
	[NOTE]                            	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NULL CONSTRAINT [LSPYMT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [LSPYMT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [LSPYMT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL CONSTRAINT [LSPYMT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LSPYMT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LSPYMT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL CONSTRAINT [LSPYMT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [LSPYMT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [LSPYMT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [LSPYMT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [LSPYMT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSPYMT_PK] PRIMARY KEY CLUSTERED([LEASE_PAYMENT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'LEASE_PAYMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the PIMS_LEASE_PERIOD table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'LEASE_PERIOD_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the PIMS_LEASE_PAYMENT_METHOD_TYPE_CODE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'LEASE_PAYMENT_METHOD_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the PIMS_LEASE_PAYMENT_STATUS_TYPE_CODE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'LEASE_PAYMENT_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the PIMS_LEASE_PAYMENT_CATEGORY_TYPE_CODE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'LEASE_PAYMENT_CATEGORY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the PIMS_LEASE_PMT_FREQ_TYPE_CODE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'LEASE_PMT_FREQ_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the payment was received or sent' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'PAYMENT_RECEIVED_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Principal amount of the payment before applicable taxes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'PAYMENT_AMOUNT_PRE_TAX'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'PST owing on payment if applicable' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'PAYMENT_AMOUNT_PST'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST owing on payment if applicable' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'PAYMENT_AMOUNT_GST'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Total amount of payment including principal plus all applicable taxes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'PAYMENT_AMOUNT_TOTAL'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes regarding this payment' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes a payment associated with a lease term.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT'
GO

CREATE TABLE [dbo].[PIMS_LEASE_PAYMENT_HIST]  ( 
	[_LEASE_PAYMENT_HIST_ID]          	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_PAYMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]             	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                   	datetime NULL,
	[LEASE_PAYMENT_ID]                	bigint NOT NULL,
	[LEASE_PERIOD_ID]                 	bigint NOT NULL,
	[LEASE_PAYMENT_METHOD_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[LEASE_PAYMENT_STATUS_TYPE_CODE]  	nvarchar(20) NULL,
	[LEASE_PAYMENT_CATEGORY_TYPE_CODE]	nvarchar(20) NULL,
	[LEASE_PMT_FREQ_TYPE_CODE]        	nvarchar(20) NULL,
	[PAYMENT_RECEIVED_DATE]           	datetime NOT NULL,
	[PAYMENT_AMOUNT_PRE_TAX]          	money NOT NULL,
	[PAYMENT_AMOUNT_PST]              	money NULL,
	[PAYMENT_AMOUNT_GST]              	money NULL,
	[PAYMENT_AMOUNT_TOTAL]            	money NOT NULL,
	[NOTE]                            	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LSPYMT_H_PK] PRIMARY KEY CLUSTERED([_LEASE_PAYMENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_PERIOD_HIST]  ( 
	[_LEASE_PERIOD_HIST_ID]         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_PERIOD_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_PERIOD_ID]               	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[LEASE_PERIOD_STATUS_TYPE_CODE] 	nvarchar(20) NULL,
	[LEASE_PMT_FREQ_TYPE_CODE]      	nvarchar(20) NULL,
	[ADDL_RENT_FREQ]                	nvarchar(20) NULL,
	[VBL_RENT_FREQ]                 	nvarchar(20) NULL,
	[PERIOD_START_DATE]             	datetime NOT NULL,
	[PERIOD_EXPIRY_DATE]            	datetime NULL,
	[PERIOD_RENEWAL_DATE]           	datetime NULL,
	[PAYMENT_AMOUNT]                	money NULL,
	[PAYMENT_DUE_DATE]              	nvarchar(2000) NULL,
	[PAYMENT_NOTE]                  	nvarchar(2000) NULL,
	[IS_GST_ELIGIBLE]               	bit NULL,
	[GST_AMOUNT]                    	money NULL,
	[IS_PERIOD_EXERCISED]           	bit NULL,
	[IS_VARIABLE_PAYMENT]           	bit NOT NULL,
	[IS_FLEXIBLE_DURATION]          	bit NOT NULL,
	[ADDL_RENT_AGREED_PMT]          	money NULL,
	[ADDL_RENT_GST_AMOUNT]          	money NULL,
	[IS_ADDL_RENT_SUBJECT_TO_GST]   	bit NULL,
	[VBL_RENT_AGREED_PMT]           	money NULL,
	[VBL_RENT_GST_AMOUNT]           	money NULL,
	[IS_VBL_RENT_SUBJECT_TO_GST]    	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LSPERD_H_PK] PRIMARY KEY CLUSTERED([_LEASE_PERIOD_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_RENEWAL]  ( 
	[LEASE_RENEWAL_ID]              	bigint NOT NULL CONSTRAINT [LSRNWL_LEASE_RENEWAL_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_RENEWAL_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[COMMENCEMENT_DT]               	datetime NULL,
	[EXPIRY_DT]                     	datetime NULL,
	[IS_EXERCISED]                  	bit NULL,
	[RENEWAL_NOTE]                  	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [LSRNWL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LSRNWL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LSRNWL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LSRNWL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LSRNWL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LSRNWL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LSRNWL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LSRNWL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LSRNWL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LSRNWL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LSRNWL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSRNWL_PK] PRIMARY KEY CLUSTERED([LEASE_RENEWAL_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'LEASE_RENEWAL_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'LEASE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date that the lease lease begins.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'COMMENCEMENT_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date that the lease lease ends.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'EXPIRY_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the lease renewal was exercised.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'IS_EXERCISED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes pertaining to the lease reewal.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'RENEWAL_NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing lease renewal options.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RENEWAL'
GO

CREATE TABLE [dbo].[PIMS_LEASE_RENEWAL_HIST]  ( 
	[_LEASE_RENEWAL_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_RENEWAL_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_RENEWAL_ID]              	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[COMMENCEMENT_DT]               	datetime NULL,
	[EXPIRY_DT]                     	datetime NULL,
	[IS_EXERCISED]                  	bit NULL,
	[RENEWAL_NOTE]                  	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LSRNWL_H_PK] PRIMARY KEY CLUSTERED([_LEASE_RENEWAL_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_TYPE]  ( 
	[LEASE_STAKEHOLDER_TYPE_CODE]	nvarchar(20) NOT NULL CONSTRAINT [STKHLT_LEASE_STAKEHOLDER_TYPE_CODE_DEF]  DEFAULT ('UNK'),
	[DESCRIPTION]                	nvarchar(200) NOT NULL CONSTRAINT [STKHLT_DESCRIPTION_DEF]  DEFAULT ('Unknown'),
	[IS_PAYABLE_RELATED]         	bit NULL CONSTRAINT [STKHLT_IS_PAYABLE_RELATED_DEF]  DEFAULT ((0)),
	[IS_DISABLED]                	bit NOT NULL CONSTRAINT [STKHLT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]              	int NULL,
	[CONCURRENCY_CONTROL_NUMBER] 	bigint NULL CONSTRAINT [STKHLT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [STKHLT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [STKHLT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]   	datetime NOT NULL CONSTRAINT [STKHLT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]      	nvarchar(30) NOT NULL CONSTRAINT [STKHLT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [STKHLT_PK] PRIMARY KEY CLUSTERED([LEASE_STAKEHOLDER_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the types of stakeholders on a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_STAKEHOLDER_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the types of stakeholders on a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is related to payable leases.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'IS_PAYABLE_RELATED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is currently active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies a specific order to visually present the code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table describing the type of tenant on a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LESSOR_TYPE]  ( 
	[LESSOR_TYPE_CODE]          	nvarchar(20) NOT NULL CONSTRAINT [LSSRTY_LESSOR_TYPE_CODE_DEF]  DEFAULT ('UNK'),
	[DESCRIPTION]               	nvarchar(200) NOT NULL CONSTRAINT [LSSRTY_DESCRIPTION_DEF]  DEFAULT ('Unknown'),
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LSSRTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [LSSRTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LSSRTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LSSRTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LSSRTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LSSRTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSSRTY_PK] PRIMARY KEY CLUSTERED([LESSOR_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the types of lessors on a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LESSOR_TYPE', 
	@level2type = N'Column', @level2name = N'LESSOR_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the types of lessors on a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LESSOR_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is currently active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LESSOR_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies a specific order to visually present the code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LESSOR_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table describing the type of lessor on a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LESSOR_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_STAKEHOLDER]  ( 
	[LEASE_STAKEHOLDER_ID]          	bigint NOT NULL CONSTRAINT [LSTKHL_LEASE_STAKEHOLDER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_STAKEHOLDER_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[LESSOR_TYPE_CODE]              	nvarchar(20) NOT NULL CONSTRAINT [LSTKHL_LESSOR_TYPE_CODE_DEF]  DEFAULT ('UNK'),
	[LEASE_STAKEHOLDER_TYPE_CODE]   	nvarchar(20) NOT NULL CONSTRAINT [LSTKHL_LEASE_STAKEHOLDER_TYPE_CODE_DEF]  DEFAULT ('UNK'),
	[NOTE]                          	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [LSTKHL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LSTKHL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LSTKHL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LSTKHL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LSTKHL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LSTKHL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LSTKHL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LSTKHL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LSTKHL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LSTKHL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LSTKHL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSTKHL_PK] PRIMARY KEY CLUSTERED([LEASE_STAKEHOLDER_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes associated with the lease/tenant relationship.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER', 
	@level2type = N'Column', @level2name = N'NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a tenant with a lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER'
GO

CREATE TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ]  ( 
	[LEASE_STAKEHOLDER_COMP_REQ_ID] 	bigint NOT NULL CONSTRAINT [LSKCRQ_LEASE_STAKEHOLDER_COMP_REQ_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_STAKEHOLDER_COMP_REQ_ID_SEQ]),
	[LEASE_STAKEHOLDER_ID]          	bigint NOT NULL,
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [LSKCRQ_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LSKCRQ_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LSKCRQ_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LSKCRQ_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LSKCRQ_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LSKCRQ_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LSKCRQ_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LSKCRQ_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LSKCRQ_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LSKCRQ_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LSKCRQ_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSKCRQ_PK] PRIMARY KEY CLUSTERED([LEASE_STAKEHOLDER_COMP_REQ_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'LEASE_STAKEHOLDER_COMP_REQ_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the LEASE_STAKEHOLDER table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'LEASE_STAKEHOLDER_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_COMPENSATION_REQUISITION table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'COMPENSATION_REQUISITION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Desribes the relationship between a lease stakeholder and a compensation requisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ'
GO

CREATE TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST]  ( 
	[_LEASE_STAKEHOLDER_COMP_REQ_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_STAKEHOLDER_COMP_REQ_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[LEASE_STAKEHOLDER_COMP_REQ_ID]      	bigint NOT NULL,
	[LEASE_STAKEHOLDER_ID]               	bigint NOT NULL,
	[COMPENSATION_REQUISITION_ID]        	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LSKCRQ_H_PK] PRIMARY KEY CLUSTERED([_LEASE_STAKEHOLDER_COMP_REQ_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_HIST]  ( 
	[_LEASE_STAKEHOLDER_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_STAKEHOLDER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_STAKEHOLDER_ID]          	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[LESSOR_TYPE_CODE]              	nvarchar(20) NOT NULL,
	[LEASE_STAKEHOLDER_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[NOTE]                          	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LSTKHL_H_PK] PRIMARY KEY CLUSTERED([_LEASE_STAKEHOLDER_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LETTER_TYPE]  ( 
	[LETTER_TYPE_CODE]          	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LTRTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [LTRTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LTRTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LTRTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LTRTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LTRTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LTRTYP_PK] PRIMARY KEY CLUSTERED([LETTER_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the letter type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LETTER_TYPE', 
	@level2type = N'Column', @level2name = N'LETTER_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the letter type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LETTER_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LETTER_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LETTER_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the letter type.  This is an unassociated table that is used in the UI to populate JSON attributes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LETTER_TYPE'
GO

CREATE TABLE [dbo].[PIMS_NOTE_HIST]  ( 
	[_NOTE_HIST_ID]                 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_NOTE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[NOTE_TXT]                      	nvarchar(4000) NOT NULL,
	[IS_SYSTEM_GENERATED]           	bit NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_NOTE_H_PK] PRIMARY KEY CLUSTERED([_NOTE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ORGANIZATION_ADDRESS]  ( 
	[ORGANIZATION_ADDRESS_ID]       	bigint NOT NULL CONSTRAINT [ORGADD_ORGANIZATION_ADDRESS_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ORGANIZATION_ADDRESS_ID_SEQ]),
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[ADDRESS_ID]                    	bigint NOT NULL,
	[ADDRESS_USAGE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [ORGADD_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ORGADD_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ORGADD_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ORGADD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ORGADD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ORGADD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ORGADD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ORGADD_PK] PRIMARY KEY CLUSTERED([ORGANIZATION_ADDRESS_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'An associative entity to define multiple addresses for a person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ORGANIZATION_ADDRESS'
GO

CREATE TABLE [dbo].[PIMS_ORGANIZATION_ADDRESS_HIST]  ( 
	[_ORGANIZATION_ADDRESS_HIST_ID] 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ORGANIZATION_ADDRESS_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ORGANIZATION_ADDRESS_ID]       	bigint NOT NULL,
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[ADDRESS_ID]                    	bigint NOT NULL,
	[ADDRESS_USAGE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ORGADD_H_PK] PRIMARY KEY CLUSTERED([_ORGANIZATION_ADDRESS_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ORGANIZATION_HIST]  ( 
	[_ORGANIZATION_HIST_ID]         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ORGANIZATION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[PRNT_ORGANIZATION_ID]          	bigint NULL,
	[REGION_CODE]                   	smallint NULL,
	[DISTRICT_CODE]                 	smallint NULL,
	[ORGANIZATION_TYPE_CODE]        	nvarchar(20) NULL,
	[ORG_IDENTIFIER_TYPE_CODE]      	nvarchar(20) NULL,
	[ORGANIZATION_IDENTIFIER]       	nvarchar(100) NULL,
	[ORGANIZATION_NAME]             	nvarchar(200) NOT NULL,
	[ORGANIZATION_ALIAS]            	nvarchar(200) NULL,
	[INCORPORATION_NUMBER]          	nvarchar(50) NULL,
	[WEBSITE]                       	nvarchar(200) NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ORG_H_PK] PRIMARY KEY CLUSTERED([_ORGANIZATION_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PERSON_ADDRESS]  ( 
	[PERSON_ADDRESS_ID]             	bigint NOT NULL CONSTRAINT [PERADD_PERSON_ADDRESS_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PERSON_ADDRESS_ID_SEQ]),
	[PERSON_ID]                     	bigint NOT NULL,
	[ADDRESS_ID]                    	bigint NOT NULL,
	[ADDRESS_USAGE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PERADD_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PERADD_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PERADD_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PERADD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PERADD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PERADD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PERADD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PERADD_PK] PRIMARY KEY CLUSTERED([PERSON_ADDRESS_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'An associative entity to define multiple addresses for a person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PERSON_ADDRESS'
GO

CREATE TABLE [dbo].[PIMS_PERSON_ADDRESS_HIST]  ( 
	[_PERSON_ADDRESS_HIST_ID]       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PERSON_ADDRESS_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PERSON_ADDRESS_ID]             	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[ADDRESS_ID]                    	bigint NOT NULL,
	[ADDRESS_USAGE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PERADD_H_PK] PRIMARY KEY CLUSTERED([_PERSON_ADDRESS_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PERSON_HIST]  ( 
	[_PERSON_HIST_ID]               	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PERSON_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[SURNAME]                       	nvarchar(50) NOT NULL,
	[FIRST_NAME]                    	nvarchar(50) NOT NULL,
	[MIDDLE_NAMES]                  	nvarchar(200) NULL,
	[NAME_SUFFIX]                   	nvarchar(50) NULL,
	[PREFERRED_NAME]                	nvarchar(200) NULL,
	[BIRTH_DATE]                    	date NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[ADDRESS_COMMENT]               	nvarchar(2000) NULL,
	[USE_ORGANIZATION_ADDRESS]      	bit NULL,
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PERSON_H_PK] PRIMARY KEY CLUSTERED([_PERSON_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PERSON_ORGANIZATION]  ( 
	[PERSON_ORGANIZATION_ID]        	bigint NOT NULL CONSTRAINT [PERORG_PERSON_ORGANIZATION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PERSON_ORGANIZATION_ID_SEQ]),
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PERORG_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PERORG_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PERORG_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PERORG_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PERORG_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PERORG_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PERORG_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PERORG_PK] PRIMARY KEY CLUSTERED([PERSON_ORGANIZATION_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PERSON_ORGANIZATION_HIST]  ( 
	[_PERSON_ORGANIZATION_HIST_ID]  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PERSON_ORGANIZATION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PERSON_ORGANIZATION_ID]        	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PERORG_H_PK] PRIMARY KEY CLUSTERED([_PERSON_ORGANIZATION_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROP_RESEARCH_PURPOSE_TYPE]  ( 
	[PROP_RESEARCH_PURPOSE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[IS_DISABLED]                    	bit NULL CONSTRAINT [RRESPT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                  	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NULL CONSTRAINT [RRESPT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [RRESPT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [RRESPT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [RRESPT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [RRESPT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RRESPT_PK] PRIMARY KEY CLUSTERED([PROP_RESEARCH_PURPOSE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code indicating the purpose of the property research' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'PROP_RESEARCH_PURPOSE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the code indicating the purpose of the property research' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the purpose ot the property research' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_RESEARCH_PURPOSE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE]  ( 
	[PROPERTY_RESEARCH_FILE_ID]     	bigint NOT NULL CONSTRAINT [PRSCRC_PROPERTY_RESEARCH_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_RESEARCH_FILE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[PROPERTY_NAME]                 	nvarchar(500) NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[IS_LEGAL_OPINION_REQUIRED]     	bit NULL,
	[IS_LEGAL_OPINION_OBTAINED]     	bit NULL,
	[DOCUMENT_REFERENCE]            	nvarchar(2000) NULL,
	[RESEARCH_SUMMARY]              	nvarchar(1000) NULL,
	[LOCATION]                      	[sys].[geometry] NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRSCRC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRSCRC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRSCRC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRSCRC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRSCRC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRSCRC_PK] PRIMARY KEY CLUSTERED([PROPERTY_RESEARCH_FILE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive reference for the property being researched.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'PROPERTY_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether a legal opinion is required (0 = No, 1 = Yes, null = Unknown)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'IS_LEGAL_OPINION_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether a legal opinion was obtained (0 = No, 1 = Yes, null = Unknown)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'IS_LEGAL_OPINION_OBTAINED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'URL / reference to a LAN Drive' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_REFERENCE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Summary of the property research.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'RESEARCH_SUMMARY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Geospatial location (pin) of property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'LOCATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property with a research file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE'
GO

CREATE TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]  ( 
	[PRF_PROP_RESEARCH_PURPOSE_ID]   	bigint NOT NULL CONSTRAINT [PRSPRP_PRF_PROP_RESEARCH_PURPOSE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PRF_PROP_RESEARCH_PURPOSE_ID_SEQ]),
	[PROPERTY_RESEARCH_FILE_ID]      	bigint NULL,
	[PROP_RESEARCH_PURPOSE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NULL CONSTRAINT [PRSPRP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRSPRP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRSPRP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [PRSPRP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRSPRP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRSPRP_PK] PRIMARY KEY CLUSTERED([PRF_PROP_RESEARCH_PURPOSE_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PRODUCT_HIST]  ( 
	[_PRODUCT_HIST_ID]              	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PRODUCT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ID]                            	bigint NOT NULL,
	[CODE]                          	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[START_DATE]                    	datetime NULL,
	[COST_ESTIMATE]                 	money NULL,
	[COST_ESTIMATE_DATE]            	datetime NULL,
	[OBJECTIVE]                     	nvarchar(2000) NULL,
	[SCOPE]                         	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRODCT_H_PK] PRIMARY KEY CLUSTERED([_PRODUCT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROJECT_DOCUMENT]  ( 
	[PROJECT_DOCUMENT_ID]           	bigint NOT NULL CONSTRAINT [PRJDOC_PROJECT_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_DOCUMENT_ID_SEQ]),
	[PROJECT_ID]                    	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRJDOC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRJDOC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRJDOC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRJDOC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRJDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRJDOC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRJDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRJDOC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRJDOC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRJDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRJDOC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRJDOC_PK] PRIMARY KEY CLUSTERED([PROJECT_DOCUMENT_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROJECT_DOCUMENT_HIST]  ( 
	[_PROJECT_DOCUMENT_HIST_ID]     	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROJECT_DOCUMENT_ID]           	bigint NOT NULL,
	[PROJECT_ID]                    	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRJDOC_H_PK] PRIMARY KEY CLUSTERED([_PROJECT_DOCUMENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROJECT_HIST]  ( 
	[_PROJECT_HIST_ID]              	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ID]                            	bigint NOT NULL,
	[PROJECT_STATUS_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[BUSINESS_FUNCTION_CODE_ID]     	bigint NULL,
	[COST_TYPE_CODE_ID]             	bigint NULL,
	[WORK_ACTIVITY_CODE_ID]         	bigint NULL,
	[REGION_CODE]                   	smallint NOT NULL,
	[CODE]                          	nvarchar(20) NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[NOTE]                          	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PROJCT_H_PK] PRIMARY KEY CLUSTERED([_PROJECT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROJECT_NOTE]  ( 
	[PROJECT_NOTE_ID]               	bigint NOT NULL CONSTRAINT [PRJNOT_PROJECT_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_NOTE_ID_SEQ]),
	[PROJECT_ID]                    	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRJNOT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRJNOT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRJNOT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRJNOT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRJNOT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRJNOT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRJNOT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRJNOT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRJNOT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRJNOT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRJNOT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRJNOT_PK] PRIMARY KEY CLUSTERED([PROJECT_NOTE_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROJECT_NOTE_HIST]  ( 
	[_PROJECT_NOTE_HIST_ID]         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_NOTE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROJECT_NOTE_ID]               	bigint NOT NULL,
	[PROJECT_ID]                    	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRJNOT_H_PK] PRIMARY KEY CLUSTERED([_PROJECT_NOTE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROJECT_PERSON_ROLE_TYPE]  ( 
	[PROJECT_PERSON_ROLE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                  	nvarchar(200) NOT NULL,
	[IS_DISABLED]                  	bit NOT NULL CONSTRAINT [PRPRLT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]   	bigint NULL CONSTRAINT [PRPRLT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRLT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPRLT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPRLT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPRLT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRLT_PK] PRIMARY KEY CLUSTERED([PROJECT_PERSON_ROLE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the project/person role.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT_PERSON_ROLE_TYPE', 
	@level2type = N'Column', @level2name = N'PROJECT_PERSON_ROLE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the project/person role.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT_PERSON_ROLE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT_PERSON_ROLE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT_PERSON_ROLE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the project/person role.  A given person is able to have multiple roles in the project.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT_PERSON_ROLE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROJECT_PERSON]  ( 
	[PROJECT_PERSON_ID]             	bigint NOT NULL CONSTRAINT [PRJPER_PROJECT_PERSON_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_PERSON_ID_SEQ]),
	[PROJECT_ID]                    	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[PROJECT_PERSON_ROLE_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [PRJPER_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRJPER_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRJPER_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRJPER_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRJPER_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRJPER_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRJPER_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRJPER_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRJPER_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRJPER_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRJPER_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRJPER_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRJPER_PK] PRIMARY KEY CLUSTERED([PROJECT_PERSON_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT_PERSON', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity associating a paerson to a project.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT_PERSON'
GO

CREATE TABLE [dbo].[PIMS_PROJECT_PERSON_HIST]  ( 
	[_PROJECT_PERSON_HIST_ID]       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_PERSON_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROJECT_PERSON_ID]             	bigint NOT NULL,
	[PROJECT_ID]                    	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[PROJECT_PERSON_ROLE_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRJPER_H_PK] PRIMARY KEY CLUSTERED([_PROJECT_PERSON_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROJECT_PRODUCT]  ( 
	[PROJECT_PRODUCT_ID]            	bigint NOT NULL CONSTRAINT [PRJPRD_PROJECT_PRODUCT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_PRODUCT_ID_SEQ]),
	[PROJECT_ID]                    	bigint NOT NULL,
	[PRODUCT_ID]                    	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRJPRD_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRJPRD_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRJPRD_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRJPRD_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRJPRD_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRJPRD_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRJPRD_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRJPRD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRJPRD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRJPRD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRJPRD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRJPRD_PK] PRIMARY KEY CLUSTERED([PROJECT_PRODUCT_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROJECT_PRODUCT_HIST]  ( 
	[_PROJECT_PRODUCT_HIST_ID]      	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_PRODUCT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROJECT_PRODUCT_ID]            	bigint NOT NULL,
	[PROJECT_ID]                    	bigint NOT NULL,
	[PRODUCT_ID]                    	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRJPRD_H_PK] PRIMARY KEY CLUSTERED([_PROJECT_PRODUCT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_HIST]  ( 
	[_PROPERTY_ACQUISITION_FILE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACQUISITION_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[PROPERTY_ACQUISITION_FILE_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]               	bigint NOT NULL,
	[PROPERTY_ID]                       	bigint NOT NULL,
	[PROPERTY_NAME]                     	nvarchar(500) NULL,
	[DISPLAY_ORDER]                     	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRACQF_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_ACQUISITION_FILE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST]  ( 
	[_PROPERTY_ACTIVITY_DOCUMENT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[PROPERTY_ACTIVITY_DOCUMENT_ID]      	bigint NOT NULL,
	[PIMS_PROPERTY_ACTIVITY_ID]          	bigint NOT NULL,
	[DOCUMENT_ID]                        	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRACDO_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_ACTIVITY_DOCUMENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]  ( 
	[_PROPERTY_ACTIVITY_HIST_ID]         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[PIMS_PROPERTY_ACTIVITY_ID]          	bigint NOT NULL,
	[PROP_MGMT_ACTIVITY_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[PROP_MGMT_ACTIVITY_SUBTYPE_CODE]    	nvarchar(20) NOT NULL,
	[PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[SERVICE_PROVIDER_PERSON_ID]         	bigint NULL,
	[SERVICE_PROVIDER_ORG_ID]            	bigint NULL,
	[REQUEST_ADDED_DT]                   	date NOT NULL,
	[COMPLETION_DT]                      	date NULL,
	[REQUEST_SOURCE]                     	nvarchar(2000) NULL,
	[IS_DISABLED]                        	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPACT_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_ACTIVITY_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]  ( 
	[PROPERTY_ACTIVITY_INVOICE_ID]  	bigint NOT NULL CONSTRAINT [PRACIN_PROPERTY_ACTIVITY_INVOICE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_INVOICE_ID_SEQ]),
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[INVOICE_DT]                    	date NOT NULL CONSTRAINT [PRACIN_INVOICE_DT_DEF]  DEFAULT (getutcdate()),
	[INVOICE_NUM]                   	nvarchar(50) NULL,
	[DESCRIPTION]                   	nvarchar(1000) NULL CONSTRAINT [PRACIN_DESCRIPTION_DEF]  DEFAULT ('Unknown'),
	[PRETAX_AMT]                    	money NOT NULL,
	[GST_AMT]                       	money NULL,
	[PST_AMT]                       	money NULL,
	[TOTAL_AMT]                     	money NULL,
	[IS_PST_REQUIRED]               	bit NOT NULL CONSTRAINT [PRACIN_IS_PST_REQUIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_DISABLED]                   	bit NULL CONSTRAINT [PRACIN_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRACIN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACIN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACIN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACIN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACIN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACIN_PK] PRIMARY KEY CLUSTERED([PROPERTY_ACTIVITY_INVOICE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of the invoice' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'INVOICE_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Number assigned to the invoice.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'INVOICE_NUM'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the invoice.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Subtotal of the invoice,' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'PRETAX_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST on the invoice.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'GST_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'PST on the invoice.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'PST_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Total cost of the invoice.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'TOTAL_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the invoice requires PST.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'IS_PST_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the invoice is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the activities that are associated with this property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE_HIST]  ( 
	[_PROPERTY_ACTIVITY_INVOICE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_INVOICE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[PROPERTY_ACTIVITY_INVOICE_ID]      	bigint NOT NULL,
	[PIMS_PROPERTY_ACTIVITY_ID]         	bigint NOT NULL,
	[INVOICE_DT]                        	date NOT NULL,
	[INVOICE_NUM]                       	nvarchar(50) NULL,
	[DESCRIPTION]                       	nvarchar(1000) NULL,
	[PRETAX_AMT]                        	money NOT NULL,
	[GST_AMT]                           	money NULL,
	[PST_AMT]                           	money NULL,
	[TOTAL_AMT]                         	money NULL,
	[IS_PST_REQUIRED]                   	bit NOT NULL,
	[IS_DISABLED]                       	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRACIN_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_ACTIVITY_INVOICE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ANOMALY_TYPE]  ( 
	[PROPERTY_ANOMALY_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PRANOM_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [PRANOM_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRANOM_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRANOM_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PRANOM_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PRANOM_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRANOM_PK] PRIMARY KEY CLUSTERED([PROPERTY_ANOMALY_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property anomaly code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ANOMALY_TYPE', 
	@level2type = N'Column', @level2name = N'PROPERTY_ANOMALY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property anomaly code description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ANOMALY_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ANOMALY_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ANOMALY_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe property anomalies.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ANOMALY_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_CONTACT]  ( 
	[PROPERTY_CONTACT_ID]           	bigint NOT NULL CONSTRAINT [PRPCNT_PROPERTY_CONTACT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_CONTACT_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[PURPOSE]                       	nvarchar(500) NOT NULL CONSTRAINT [PRPCNT_PURPOSE_DEF]  DEFAULT ('Unknown'),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRPCNT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPCNT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPCNT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPCNT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPCNT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DF__PIMS_PROP__APP_L__4341E1B1]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPCNT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPCNT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPCNT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPCNT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPCNT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPCNT_PK] PRIMARY KEY CLUSTERED([PROPERTY_CONTACT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary key of the associated property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Person ID of the property contact.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Organization ID of the property contact.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'ORGANIZATION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary contact for the organization' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'PRIMARY_CONTACT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Purpose of property contact' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT', 
	@level2type = N'Column', @level2name = N'PURPOSE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the contacts that are associated with this property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_CONTACT'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_CONTACT_HIST]  ( 
	[_PROPERTY_CONTACT_HIST_ID]     	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_CONTACT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROPERTY_CONTACT_ID]           	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[PURPOSE]                       	nvarchar(500) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPCNT_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_CONTACT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_HIST]  ( 
	[_PROPERTY_HIST_ID]                  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[PROPERTY_ID]                        	bigint NOT NULL,
	[PROPERTY_TYPE_CODE]                 	nvarchar(20) NOT NULL,
	[ADDRESS_ID]                         	bigint NULL,
	[REGION_CODE]                        	smallint NOT NULL,
	[DISTRICT_CODE]                      	smallint NOT NULL,
	[PROPERTY_AREA_UNIT_TYPE_CODE]       	nvarchar(20) NULL,
	[PROPERTY_DATA_SOURCE_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[PROPERTY_STATUS_TYPE_CODE]          	nvarchar(20) NOT NULL,
	[SURPLUS_DECLARATION_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[VOLUMETRIC_TYPE_CODE]               	nvarchar(20) NULL,
	[VOLUME_UNIT_TYPE_CODE]              	nvarchar(20) NULL,
	[PPH_STATUS_TYPE_CODE]               	nvarchar(20) NULL,
	[PROPERTY_DATA_SOURCE_EFFECTIVE_DATE]	date NOT NULL,
	[PID]                                	int NULL,
	[PIN]                                	int NULL,
	[FILE_NUMBER]                        	int NULL,
	[FILE_NUMBER_SUFFIX]                 	nvarchar(2) NULL,
	[LAND_AREA]                          	real NULL,
	[LAND_LEGAL_DESCRIPTION]             	nvarchar(2000) NULL,
	[GENERAL_LOCATION]                   	nvarchar(2000) NULL,
	[SURVEY_PLAN_NUMBER]                 	nvarchar(250) NULL,
	[SURPLUS_DECLARATION_COMMENT]        	nvarchar(2000) NULL,
	[SURPLUS_DECLARATION_DATE]           	datetime NULL,
	[NOTES]                              	nvarchar(4000) NULL,
	[MUNICIPAL_ZONING]                   	nvarchar(100) NULL,
	[IS_VOLUMETRIC_PARCEL]               	bit NULL,
	[VOLUMETRIC_MEASUREMENT]             	real NULL,
	[IS_OWNED]                           	bit NOT NULL,
	[IS_RETIRED]                         	bit NULL,
	[PPH_STATUS_UPDATE_USERID]           	nvarchar(30) NULL,
	[PPH_STATUS_UPDATE_TIMESTAMP]        	datetime NULL,
	[PPH_STATUS_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[IS_RWY_BELT_DOM_PATENT]             	bit NULL,
	[ADDITIONAL_DETAILS]                 	nvarchar(4000) NULL,
	[IS_UTILITIES_PAYABLE]               	bit NULL,
	[IS_TAXES_PAYABLE]                   	bit NULL,
	[BAND_NAME]                          	nvarchar(80) NULL,
	[RESERVE_NAME]                       	nvarchar(100) NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPRTY_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT_TYPE]  ( 
	[PROPERTY_IMPROVEMENT_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [PIMPRT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PIMPRT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PIMPRT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PIMPRT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PIMPRT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PIMPRT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PIMPRT_PK] PRIMARY KEY CLUSTERED([PROPERTY_IMPROVEMENT_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the types of improvements made to a property during the lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'PROPERTY_IMPROVEMENT_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code description of the types of improvements made to a property during the lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the types of improvements made to a property during the lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]  ( 
	[PROPERTY_IMPROVEMENT_ID]       	bigint NOT NULL CONSTRAINT [PIMPRV_PROPERTY_IMPROVEMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_IMPROVEMENT_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[PROPERTY_IMPROVEMENT_TYPE_CODE]	nvarchar(20) NOT NULL,
	[IMPROVEMENT_DESCRIPTION]       	nvarchar(2000) NULL,
	[STRUCTURE_SIZE]                	nvarchar(2000) NULL,
	[ADDRESS]                       	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PIMPRV_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PIMPRV_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PIMPRV_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PIMPRV_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PIMPRV_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PIMPRV_PK] PRIMARY KEY CLUSTERED([PROPERTY_IMPROVEMENT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the improvements' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT', 
	@level2type = N'Column', @level2name = N'IMPROVEMENT_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Size of the structure (house, building, bridge, etc,)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT', 
	@level2type = N'Column', @level2name = N'STRUCTURE_SIZE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Addresses affected' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT', 
	@level2type = N'Column', @level2name = N'ADDRESS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of property improvements associated with the lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT_HIST]  ( 
	[_PROPERTY_IMPROVEMENT_HIST_ID] 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_IMPROVEMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROPERTY_IMPROVEMENT_ID]       	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[PROPERTY_IMPROVEMENT_TYPE_CODE]	nvarchar(20) NOT NULL,
	[IMPROVEMENT_DESCRIPTION]       	nvarchar(2000) NULL,
	[STRUCTURE_SIZE]                	nvarchar(2000) NULL,
	[ADDRESS]                       	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PIMPRV_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_IMPROVEMENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_LEASE]  ( 
	[PROPERTY_LEASE_ID]             	bigint NOT NULL CONSTRAINT [PROPLS_PROPERTY_LEASE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_LEASE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[AREA_UNIT_TYPE_CODE]           	nvarchar(20) NULL,
	[NAME]                          	nvarchar(250) NULL,
	[LEASE_AREA]                    	real NULL,
	[LOCATION]                      	[sys].[geometry] NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PROPLS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PROPLS_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PROPLS_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PROPLS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PROPLS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PROPLS_PK] PRIMARY KEY CLUSTERED([PROPERTY_LEASE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property/lease name' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_LEASE', 
	@level2type = N'Column', @level2name = N'NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Leased area measurement' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_AREA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Geospatial location (pin) of property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_LEASE', 
	@level2type = N'Column', @level2name = N'LOCATION'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_LEASE_HIST]  ( 
	[_PROPERTY_LEASE_HIST_ID]       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_LEASE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROPERTY_LEASE_ID]             	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[AREA_UNIT_TYPE_CODE]           	nvarchar(20) NULL,
	[NAME]                          	nvarchar(250) NULL,
	[LEASE_AREA]                    	real NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PROPLS_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_LEASE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_OPERATION_TYPE]  ( 
	[PROPERTY_OPERATION_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                 	nvarchar(200) NOT NULL,
	[IS_DISABLED]                 	bit NOT NULL CONSTRAINT [PRPOTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]               	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NULL CONSTRAINT [PRPOTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [PRPOTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [PRPOTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [PRPOTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [PRPOTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPOTY_PK] PRIMARY KEY CLUSTERED([PROPERTY_OPERATION_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the type of property operation.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION_TYPE', 
	@level2type = N'Column', @level2name = N'PROPERTY_OPERATION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the type of property operation.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the type of property operation.  Currently, property operations are consolidations and subdivisions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_OPERATION]  ( 
	[PROPERTY_OPERATION_ID]         	bigint NOT NULL CONSTRAINT [PROPOP_PROPERTY_OPERATION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_OPERATION_ID_SEQ]),
	[SOURCE_PROPERTY_ID]            	bigint NOT NULL,
	[DESTINATION_PROPERTY_ID]       	bigint NOT NULL,
	[PROPERTY_OPERATION_TYPE_CODE]  	nvarchar(20) NULL,
	[PROPERTY_OPERATION_NO]         	bigint NOT NULL,
	[OPERATION_DT]                  	datetime NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [PROPOP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PROPOP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PROPOP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PROPOP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PROPOP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PROPOP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PROPOP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PROPOP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PROPOP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PROPOP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PROPOP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PROPOP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PROPOP_PK] PRIMARY KEY CLUSTERED([PROPERTY_OPERATION_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Surrogate sequence-based generated primary key for the table.  This is used internally to enforce data uniqueness.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'PROPERTY_OPERATION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the source property of the property operation.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'SOURCE_PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the destination property of the property operation.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'DESTINATION_PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foriegn key to the descriptive operation  type code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'PROPERTY_OPERATION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Sequence-based operation identifying business key.  This is used to help identify when multiple properties were involved in a discrete operation.  The sequence number referenced is PIMS_PROPERTY_OPERATION_NO_SEQ.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'PROPERTY_OPERATION_NO'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Business date of the property operation.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'OPERATION_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the record is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the operations that are associated with properties.  These operations conccern property consolidations and suvdivisions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_OPERATION'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_OPERATION_HIST]  ( 
	[_PROPERTY_OPERATION_HIST_ID]   	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_OPERATION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROPERTY_OPERATION_ID]         	bigint NOT NULL,
	[SOURCE_PROPERTY_ID]            	bigint NOT NULL,
	[DESTINATION_PROPERTY_ID]       	bigint NOT NULL,
	[PROPERTY_OPERATION_TYPE_CODE]  	nvarchar(20) NULL,
	[PROPERTY_OPERATION_NO]         	bigint NOT NULL,
	[OPERATION_DT]                  	datetime NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PROPOP_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_OPERATION_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION]  ( 
	[PROPERTY_ORGANIZATION_ID]      	bigint NOT NULL CONSTRAINT [PRPORG_PROPERTY_ORGANIZATION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ORGANIZATION_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRPORG_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPORG_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPORG_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPORG_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPORG_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPORG_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPORG_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPORG_PK] PRIMARY KEY CLUSTERED([PROPERTY_ORGANIZATION_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION_HIST]  ( 
	[_PROPERTY_ORGANIZATION_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROPERTY_ORGANIZATION_ID]      	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPORG_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_ORGANIZATION_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_PURPOSE_TYPE]  ( 
	[PROPERTY_PURPOSE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PRPPUR_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [PRPPUR_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRPPUR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRPPUR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PRPPUR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PRPPUR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPPUR_PK] PRIMARY KEY CLUSTERED([PROPERTY_PURPOSE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the purpose of the property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'PROPERTY_PURPOSE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the purpose of the property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the property purpose type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_PURPOSE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE_HIST]  ( 
	[_PROPERTY_RESEARCH_FILE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_RESEARCH_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[PROPERTY_RESEARCH_FILE_ID]      	bigint NOT NULL,
	[PROPERTY_ID]                    	bigint NOT NULL,
	[RESEARCH_FILE_ID]               	bigint NOT NULL,
	[PROPERTY_NAME]                  	nvarchar(500) NULL,
	[DISPLAY_ORDER]                  	int NULL,
	[IS_LEGAL_OPINION_REQUIRED]      	bit NULL,
	[IS_LEGAL_OPINION_OBTAINED]      	bit NULL,
	[DOCUMENT_REFERENCE]             	nvarchar(2000) NULL,
	[RESEARCH_SUMMARY]               	nvarchar(1000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRSCRC_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_RESEARCH_FILE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ROAD_TYPE]  ( 
	[PROPERTY_ROAD_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PRROAD_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [PRROAD_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRROAD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRROAD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PRROAD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PRROAD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRROAD_PK] PRIMARY KEY CLUSTERED([PROPERTY_ROAD_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property highway/road code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ROAD_TYPE', 
	@level2type = N'Column', @level2name = N'PROPERTY_ROAD_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property highway/road code description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ROAD_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ROAD_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ROAD_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe property highway/road type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ROAD_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_TENURE_TYPE]  ( 
	[PROPERTY_TENURE_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PRPTNR_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [PRPTNR_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRPTNR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRPTNR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PRPTNR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PRPTNR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPTNR_PK] PRIMARY KEY CLUSTERED([PROPERTY_TENURE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code table to store property tenure codes. Tenure is defined as : "The act, right, manner or term of holding something(as a landed property)" In this case, tenure is required on Properties to indicate MoTI''s legal tenure on the property. The land parcel' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_TENURE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROP_ACQ_FL_COMP_REQ]  ( 
	[PROP_ACQ_FL_COMP_REQ_ID]       	bigint NOT NULL CONSTRAINT [PACMRQ_PROP_ACQ_FL_COMP_REQ_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_ACQ_FL_COMP_REQ_ID_SEQ]),
	[PROPERTY_ACQUISITION_FILE_ID]  	bigint NOT NULL,
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PACMRQ_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PACMRQ_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PACMRQ_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PACMRQ_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PACMRQ_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PACMRQ_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PACMRQ_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PACMRQ_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PACMRQ_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PACMRQ_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PACMRQ_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PACMRQ_PK] PRIMARY KEY CLUSTERED([PROP_ACQ_FL_COMP_REQ_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACQ_FL_COMP_REQ', 
	@level2type = N'Column', @level2name = N'PROP_ACQ_FL_COMP_REQ_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the PROPERTY_ACQUISITION_FILE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACQ_FL_COMP_REQ', 
	@level2type = N'Column', @level2name = N'PROPERTY_ACQUISITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the COMPENSATION_REQUISITION table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACQ_FL_COMP_REQ', 
	@level2type = N'Column', @level2name = N'COMPENSATION_REQUISITION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACQ_FL_COMP_REQ', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACQ_FL_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACQ_FL_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACQ_FL_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACQ_FL_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACQ_FL_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACQ_FL_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACQ_FL_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACQ_FL_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACQ_FL_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACQ_FL_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACQ_FL_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACQ_FL_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO

CREATE TABLE [dbo].[PIMS_PROP_ACQ_FL_COMP_REQ_HIST]  ( 
	[_PROP_ACQ_FL_COMP_REQ_HIST_ID] 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROP_ACQ_FL_COMP_REQ_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROP_ACQ_FL_COMP_REQ_ID]       	bigint NOT NULL,
	[PROPERTY_ACQUISITION_FILE_ID]  	bigint NOT NULL,
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PACMRQ_H_PK] PRIMARY KEY CLUSTERED([_PROP_ACQ_FL_COMP_REQ_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]  ( 
	[PROP_ACT_INVOLVED_PARTY_ID]    	bigint NOT NULL CONSTRAINT [PAINVP_PROP_ACT_INVOLVED_PARTY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_ACT_INVOLVED_PARTY_ID_SEQ]),
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PAINVP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PAINVP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PAINVP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PAINVP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PAINVP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PAINVP_PK] PRIMARY KEY CLUSTERED([PROP_ACT_INVOLVED_PARTY_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property management activity to a vendor (many-to-many).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACT_INVOLVED_PARTY'
GO

CREATE TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY_HIST]  ( 
	[_PROP_ACT_INVOLVED_PARTY_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROP_ACT_INVOLVED_PARTY_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]             	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                   	datetime NULL,
	[PROP_ACT_INVOLVED_PARTY_ID]      	bigint NOT NULL,
	[PIMS_PROPERTY_ACTIVITY_ID]       	bigint NOT NULL,
	[PERSON_ID]                       	bigint NULL,
	[ORGANIZATION_ID]                 	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PAINVP_H_PK] PRIMARY KEY CLUSTERED([_PROP_ACT_INVOLVED_PARTY_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]  ( 
	[PROP_ACT_MIN_CONTACT_ID]       	bigint NOT NULL CONSTRAINT [PRACMC_PROP_ACT_MIN_CONTACT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_ACT_MIN_CONTACT_ID_SEQ]),
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRACMC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACMC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACMC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACMC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACMC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACMC_PK] PRIMARY KEY CLUSTERED([PROP_ACT_MIN_CONTACT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property management activity to a Ministry contact (many-to-many).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACT_MIN_CONTACT'
GO

CREATE TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT_HIST]  ( 
	[_PROP_ACT_MIN_CONTACT_HIST_ID] 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROP_ACT_MIN_CONTACT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROP_ACT_MIN_CONTACT_ID]       	bigint NOT NULL,
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRACMC_H_PK] PRIMARY KEY CLUSTERED([_PROP_ACT_MIN_CONTACT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]  ( 
	[PROP_INTHLDR_INTEREST_TYPE_ID]     	bigint NOT NULL CONSTRAINT [PIHITY_PROP_INTHLDR_INTEREST_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_INTHLDR_INTEREST_TYPE_ID_SEQ]),
	[PIMS_INTHLDR_PROP_INTEREST_ID]     	bigint NOT NULL,
	[INTEREST_HOLDER_INTEREST_TYPE_CODE]	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NULL CONSTRAINT [PIHITY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [PIHITY_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [PIHITY_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [PIHITY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PIHITY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PIHITY_PK] PRIMARY KEY CLUSTERED([PROP_INTHLDR_INTEREST_TYPE_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROP_LEASE_COMP_REQ]  ( 
	[PROP_LEASE_COMP_REQ_ID]        	bigint NOT NULL CONSTRAINT [PLCMRQ_PROP_LEASE_COMP_REQ_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_LEASE_COMP_REQ_ID_SEQ]),
	[PROPERTY_LEASE_ID]             	bigint NOT NULL,
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PLCMRQ_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PLCMRQ_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PLCMRQ_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PLCMRQ_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PLCMRQ_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PLCMRQ_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PLCMRQ_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PLCMRQ_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PLCMRQ_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PLCMRQ_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PLCMRQ_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PLCMRQ_PK] PRIMARY KEY CLUSTERED([PROP_LEASE_COMP_REQ_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'PROP_LEASE_COMP_REQ_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'PROPERTY_LEASE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_COMPENSATION_REQUISITION table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'COMPENSATION_REQUISITION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Desribes the relationship between a leased property and a compensation requisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ'
GO

CREATE TABLE [dbo].[PIMS_PROP_LEASE_COMP_REQ_HIST]  ( 
	[_PROP_LEASE_COMP_REQ_HIST_ID]  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROP_LEASE_COMP_REQ_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROP_LEASE_COMP_REQ_ID]        	bigint NOT NULL,
	[PROPERTY_LEASE_ID]             	bigint NOT NULL,
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PLCMRQ_H_PK] PRIMARY KEY CLUSTERED([_PROP_LEASE_COMP_REQ_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]  ( 
	[PROP_PROP_ACTIVITY_ID]         	bigint NOT NULL CONSTRAINT [PRPRAC_PROP_PROP_ACTIVITY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ACTIVITY_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRPRAC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRAC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPRAC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRAC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPRAC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPRAC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRAC_PK] PRIMARY KEY CLUSTERED([PROP_PROP_ACTIVITY_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property to a property management actity (many-to-many).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_ACTIVITY'
GO

CREATE TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY_HIST]  ( 
	[_PROP_PROP_ACTIVITY_HIST_ID]   	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ACTIVITY_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROP_PROP_ACTIVITY_ID]         	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PIMS_PROPERTY_ACTIVITY_ID]     	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPRAC_H_PK] PRIMARY KEY CLUSTERED([_PROP_PROP_ACTIVITY_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]  ( 
	[PROP_PROP_ANOMALY_TYPE_ID]     	bigint NOT NULL CONSTRAINT [PRPRAT_PROP_PROP_ANOMALY_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ANOMALY_TYPE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_ANOMALY_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRPRAT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRAT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPRAT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRAT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPRAT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRAT_PK] PRIMARY KEY CLUSTERED([PROP_PROP_ANOMALY_TYPE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Resolves many-to-many relationship between PIMS_PROPERTY and PIMS_PROPERTY_ANOMALY_TYPE' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_ANOMALY_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROP_PROP_PURPOSE]  ( 
	[PROP_PROP_PURPOSE_ID]          	bigint NOT NULL CONSTRAINT [PRPRPU_PROP_PROP_PURPOSE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_PURPOSE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_PURPOSE_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRPRPU_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRPU_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPRPU_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPRPU_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPRPU_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DF__PIMS_PROP__APP_L__235F2204]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPRPU_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRPU_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRPU_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPRPU_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPRPU_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRPU_PK] PRIMARY KEY CLUSTERED([PROP_PROP_PURPOSE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary key of the associated property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_PURPOSE', 
	@level2type = N'Column', @level2name = N'PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary key of the associated property purpose.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_PURPOSE', 
	@level2type = N'Column', @level2name = N'PROPERTY_PURPOSE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the contacts that are associated with this property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_PURPOSE'
GO

CREATE TABLE [dbo].[PIMS_PROP_PROP_PURPOSE_HIST]  ( 
	[_PROP_PROP_PURPOSE_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_PURPOSE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROP_PROP_PURPOSE_ID]          	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_PURPOSE_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPRPU_H_PK] PRIMARY KEY CLUSTERED([_PROP_PROP_PURPOSE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYPE]  ( 
	[PROP_PROP_ROAD_TYPE_ID]        	bigint NOT NULL CONSTRAINT [PRPRRT_PROP_PROP_ROAD_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ROAD_TYPE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_ROAD_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRPRRT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRRT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPRRT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRRT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPRRT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRRT_PK] PRIMARY KEY CLUSTERED([PROP_PROP_ROAD_TYPE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Resolves many-to-many relationship between PIMS_PROPERTY and PIMS_PROPERTY_ROAD_TYPE' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_ROAD_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYPE]  ( 
	[PROP_PROP_TENURE_TYPE_ID]      	bigint NOT NULL CONSTRAINT [PRPRTT_PROP_PROP_TENURE_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_TENURE_TYPE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_TENURE_TYPE_CODE]     	nvarchar(20) NOT NULL CONSTRAINT [PRPRTT_PROPERTY_TENURE_TYPE_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [PRPRTT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRTT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPRTT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRTT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPRTT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRTT_PK] PRIMARY KEY CLUSTERED([PROP_PROP_TENURE_TYPE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Resolves many-to-many relationship between PIMS_PROPERTY and PIMS_PROPERTY_TENURE_TYPE' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_TENURE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_REGION_USER]  ( 
	[REGION_USER_ID]                	bigint NOT NULL CONSTRAINT [RGNUSR_REGION_USER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_REGION_USER_ID_SEQ]),
	[REGION_CODE]                   	smallint NOT NULL CONSTRAINT [RGNUSR_REGION_CODE_DEF]  DEFAULT ((4)),
	[USER_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [RGNUSR_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RGNUSR_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RGNUSR_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RGNUSR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RGNUSR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RGNUSR_PK] PRIMARY KEY CLUSTERED([REGION_USER_ID])
)
GO

CREATE TABLE [dbo].[PIMS_REGION_USER_HIST]  ( 
	[_REGION_USER_HIST_ID]          	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_REGION_USER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[REGION_USER_ID]                	bigint NOT NULL,
	[REGION_CODE]                   	smallint NOT NULL,
	[USER_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RGNUSR_H_PK] PRIMARY KEY CLUSTERED([_REGION_USER_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT_HIST]  ( 
	[_RESEARCH_FILE_DOCUMENT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[RESEARCH_FILE_DOCUMENT_ID]      	bigint NOT NULL,
	[RESEARCH_FILE_ID]               	bigint NOT NULL,
	[DOCUMENT_ID]                    	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RFLDOC_H_PK] PRIMARY KEY CLUSTERED([_RESEARCH_FILE_DOCUMENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_HIST]  ( 
	[_RESEARCH_FILE_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[RESEARCH_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[REQUEST_SOURCE_TYPE_CODE]      	nvarchar(20) NULL,
	[REQUESTOR_NAME]                	bigint NULL,
	[REQUESTOR_ORGANIZATION]        	bigint NULL,
	[NAME]                          	nvarchar(250) NOT NULL,
	[RFILE_NUMBER]                  	nvarchar(25) NOT NULL,
	[REQUEST_DATE]                  	date NULL,
	[ROAD_NAME]                     	nvarchar(200) NULL,
	[ROAD_ALIAS]                    	nvarchar(200) NULL,
	[REQUEST_DESCRIPTION]           	nvarchar(3000) NULL,
	[REQUEST_SOURCE_DESCRIPTION]    	nvarchar(2000) NULL,
	[RESEARCH_RESULT]               	nvarchar(2000) NULL,
	[IS_EXPROPRIATION]              	bit NULL,
	[EXPROPRIATION_NOTES]           	nvarchar(1000) NULL,
	[RESEARCH_COMPLETION_DATE]      	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RESRCH_H_PK] PRIMARY KEY CLUSTERED([_RESEARCH_FILE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]  ( 
	[RESEARCH_FILE_NOTE_ID]         	bigint NOT NULL CONSTRAINT [RFLNOT_RESEARCH_FILE_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_NOTE_ID_SEQ]),
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [RFLNOT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RFLNOT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RFLNOT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RFLNOT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RFLNOT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RFLNOT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RFLNOT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RFLNOT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [RFLNOT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RFLNOT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RFLNOT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RFLNOT_PK] PRIMARY KEY CLUSTERED([RESEARCH_FILE_NOTE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the relationship betwwen a research file and a note.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_NOTE'
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE_HIST]  ( 
	[_RESEARCH_FILE_NOTE_HIST_ID]   	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_NOTE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[RESEARCH_FILE_NOTE_ID]         	bigint NOT NULL,
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RFLNOT_H_PK] PRIMARY KEY CLUSTERED([_RESEARCH_FILE_NOTE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_PROJECT]  ( 
	[RESEARCH_FILE_PROJECT_ID]      	bigint NOT NULL CONSTRAINT [RFLPRJ_RESEARCH_FILE_PROJECT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_PROJECT_ID_SEQ]),
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[PROJECT_ID]                    	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [RFLPRJ_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RFLPRJ_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RFLPRJ_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RFLPRJ_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RFLPRJ_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RFLPRJ_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RFLPRJ_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RFLPRJ_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [RFLPRJ_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RFLPRJ_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RFLPRJ_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RFLPRJ_PK] PRIMARY KEY CLUSTERED([RESEARCH_FILE_PROJECT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the relationship betwwen a research file and a project.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_PROJECT'
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_PROJECT_HIST]  ( 
	[_RESEARCH_FILE_PROJECT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_PROJECT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[RESEARCH_FILE_PROJECT_ID]      	bigint NOT NULL,
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[PROJECT_ID]                    	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RFLPRJ_H_PK] PRIMARY KEY CLUSTERED([_RESEARCH_FILE_PROJECT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_PURPOSE_TYPE]  ( 
	[RESEARCH_PURPOSE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NULL CONSTRAINT [RSHPRT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [RSHPRT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [RSHPRT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [RSHPRT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [RSHPRT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [RSHPRT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RSHPRT_PK] PRIMARY KEY CLUSTERED([RESEARCH_PURPOSE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code indicating the purpose of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'RESEARCH_PURPOSE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the code indicating the purpose of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the purpose ot the research request' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_PURPOSE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE]  ( 
	[RESEARCH_FILE_PURPOSE_ID]      	bigint NOT NULL CONSTRAINT [RSFLPR_RESEARCH_FILE_PURPOSE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_PURPOSE_ID_SEQ]),
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[RESEARCH_PURPOSE_TYPE_CODE]    	nvarchar(20) NOT NULL CONSTRAINT [RSFLPR_RESEARCH_PURPOSE_TYPE_CODE_DEF]  DEFAULT ('GENENQ'),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [RSFLPR_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RSFLPR_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RSFLPR_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RSFLPR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RSFLPR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RSFLPR_PK] PRIMARY KEY CLUSTERED([RESEARCH_FILE_PURPOSE_ID])
)
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE_HIST]  ( 
	[_RESEARCH_FILE_PURPOSE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_PURPOSE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[RESEARCH_FILE_PURPOSE_ID]      	bigint NOT NULL,
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[RESEARCH_PURPOSE_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RSFLPR_H_PK] PRIMARY KEY CLUSTERED([_RESEARCH_FILE_PURPOSE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_RESPONSIBILITY_CODE_HIST]  ( 
	[_RESPONSIBILITY_CODE_HIST_ID]  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_RESPONSIBILITY_CODE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ID]                            	bigint NOT NULL,
	[CODE]                          	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL,
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RESPCD_H_PK] PRIMARY KEY CLUSTERED([_RESPONSIBILITY_CODE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ROLE_CLAIM]  ( 
	[ROLE_CLAIM_ID]                 	bigint NOT NULL CONSTRAINT [ROLCLM_ROLE_CLAIM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ROLE_CLAIM_ID_SEQ]),
	[ROLE_ID]                       	bigint NOT NULL,
	[CLAIM_ID]                      	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [ROLCLM_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [ROLCLM_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ROLCLM_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ROLCLM_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ROLCLM_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ROLCLM_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ROLCLM_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ROLCLM_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ROLCLM_PK] PRIMARY KEY CLUSTERED([ROLE_CLAIM_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ROLE_CLAIM_HIST]  ( 
	[_ROLE_CLAIM_HIST_ID]           	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ROLE_CLAIM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ROLE_CLAIM_ID]                 	bigint NOT NULL,
	[ROLE_ID]                       	bigint NOT NULL,
	[CLAIM_ID]                      	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ROLCLM_H_PK] PRIMARY KEY CLUSTERED([_ROLE_CLAIM_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ROLE_HIST]  ( 
	[_ROLE_HIST_ID]                 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ROLE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ROLE_ID]                       	bigint NOT NULL,
	[ROLE_UID]                      	uniqueidentifier NOT NULL,
	[KEYCLOAK_GROUP_ID]             	uniqueidentifier NULL,
	[NAME]                          	nvarchar(100) NOT NULL,
	[DESCRIPTION]                   	nvarchar(500) NULL,
	[IS_PUBLIC]                     	bit NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[SORT_ORDER]                    	int NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ROLE_H_PK] PRIMARY KEY CLUSTERED([_ROLE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT_TYPE]  ( 
	[SECURITY_DEPOSIT_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [SECDPT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [SECDPT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [SECDPT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [SECDPT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [SECDPT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [SECDPT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SECDPT_PK] PRIMARY KEY CLUSTERED([SECURITY_DEPOSIT_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT]  ( 
	[SECURITY_DEPOSIT_ID]           	bigint NOT NULL CONSTRAINT [SECDEP_SECURITY_DEPOSIT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[SECURITY_DEPOSIT_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[OTHER_DEPOSIT_TYPE_DESC]       	nvarchar(200) NULL,
	[DESCRIPTION]                   	nvarchar(2000) NOT NULL,
	[AMOUNT_PAID]                   	money NOT NULL,
	[DEPOSIT_DATE]                  	date NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [SECDEP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [SECDEP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [SECDEP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [SECDEP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [SECDEP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SECDEP_PK] PRIMARY KEY CLUSTERED([SECURITY_DEPOSIT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the deposit type If the SECURITY_DEPOSIT_TYPE_CODE has been chosen for this scurity deposit.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT', 
	@level2type = N'Column', @level2name = N'OTHER_DEPOSIT_TYPE_DESC'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descirption of this security deposit' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Amount paid of this security deposit' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT', 
	@level2type = N'Column', @level2name = N'AMOUNT_PAID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of this security deposit' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT', 
	@level2type = N'Column', @level2name = N'DEPOSIT_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of a security deposit associated with a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT'
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HIST]  ( 
	[_SECURITY_DEPOSIT_HIST_ID]     	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[SECURITY_DEPOSIT_ID]           	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[SECURITY_DEPOSIT_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[OTHER_DEPOSIT_TYPE_DESC]       	nvarchar(200) NULL,
	[DESCRIPTION]                   	nvarchar(2000) NOT NULL,
	[AMOUNT_PAID]                   	money NOT NULL,
	[DEPOSIT_DATE]                  	date NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_SECDEP_H_PK] PRIMARY KEY CLUSTERED([_SECURITY_DEPOSIT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]  ( 
	[SECURITY_DEPOSIT_HOLDER_ID]    	bigint NOT NULL CONSTRAINT [SCDPHL_SECURITY_DEPOSIT_HOLDER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_HOLDER_ID_SEQ]),
	[SECURITY_DEPOSIT_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [SCDPHL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [SCDPHL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [SCDPHL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [SCDPHL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [SCDPHL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SCDPHL_PK] PRIMARY KEY CLUSTERED([SECURITY_DEPOSIT_HOLDER_ID])
)
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER_HIST]  ( 
	[_SECURITY_DEPOSIT_HOLDER_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_HOLDER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]             	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                   	datetime NULL,
	[SECURITY_DEPOSIT_HOLDER_ID]      	bigint NOT NULL,
	[SECURITY_DEPOSIT_ID]             	bigint NOT NULL,
	[PERSON_ID]                       	bigint NULL,
	[ORGANIZATION_ID]                 	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_SCDPHL_H_PK] PRIMARY KEY CLUSTERED([_SECURITY_DEPOSIT_HOLDER_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]  ( 
	[SECURITY_DEPOSIT_RETURN_ID]    	bigint NOT NULL CONSTRAINT [SDRTRN_SECURITY_DEPOSIT_RETURN_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_RETURN_ID_SEQ]),
	[SECURITY_DEPOSIT_ID]           	bigint NOT NULL,
	[TERMINATION_DATE]              	datetime NOT NULL,
	[CLAIMS_AGAINST]                	money NULL,
	[RETURN_AMOUNT]                 	money NOT NULL,
	[RETURN_DATE]                   	datetime NOT NULL,
	[INTEREST_PAID]                 	money NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [SDRTRN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [SDRTRN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [SDRTRN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [SDRTRN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [SDRTRN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SDRTRN_PK] PRIMARY KEY CLUSTERED([SECURITY_DEPOSIT_RETURN_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the lease/license was terminated or surrendered' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'TERMINATION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Amount of claims against the deposit' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'CLAIMS_AGAINST'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Amount returned minus claims' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'RETURN_AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of deposit return' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'RETURN_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Interest paid on the deposit to the deposit holder' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'INTEREST_PAID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the details of the return of a security deposit.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN'
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HIST]  ( 
	[_SECURITY_DEPOSIT_RETURN_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_RETURN_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]             	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                   	datetime NULL,
	[SECURITY_DEPOSIT_RETURN_ID]      	bigint NOT NULL,
	[SECURITY_DEPOSIT_ID]             	bigint NOT NULL,
	[TERMINATION_DATE]                	datetime NOT NULL,
	[CLAIMS_AGAINST]                  	money NULL,
	[RETURN_AMOUNT]                   	money NOT NULL,
	[RETURN_DATE]                     	datetime NOT NULL,
	[INTEREST_PAID]                   	money NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_SDRTRN_H_PK] PRIMARY KEY CLUSTERED([_SECURITY_DEPOSIT_RETURN_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]  ( 
	[SECURITY_DEPOSIT_RETURN_HOLDER_ID]	bigint NOT NULL CONSTRAINT [SCDPRH_SECURITY_DEPOSIT_RETURN_HOLDER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_ID_SEQ]),
	[SECURITY_DEPOSIT_RETURN_ID]       	bigint NOT NULL,
	[PERSON_ID]                        	bigint NULL,
	[ORGANIZATION_ID]                  	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NULL CONSTRAINT [SCDPRH_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [SCDPRH_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [SCDPRH_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [SCDPRH_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [SCDPRH_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SCDPRH_PK] PRIMARY KEY CLUSTERED([SECURITY_DEPOSIT_RETURN_HOLDER_ID])
)
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST]  ( 
	[_SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                    	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                          	datetime NULL,
	[SECURITY_DEPOSIT_RETURN_HOLDER_ID]      	bigint NOT NULL,
	[SECURITY_DEPOSIT_RETURN_ID]             	bigint NOT NULL,
	[PERSON_ID]                              	bigint NULL,
	[ORGANIZATION_ID]                        	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]             	bigint NULL,
	[APP_CREATE_TIMESTAMP]                   	datetime NOT NULL,
	[APP_CREATE_USERID]                      	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                   	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]              	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                    	datetime NOT NULL,
	[DB_CREATE_USERID]                       	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]                  	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_SCDPRH_H_PK] PRIMARY KEY CLUSTERED([_SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_STATIC_VARIABLE]  ( 
	[STATIC_VARIABLE_NAME]          	nvarchar(100) NOT NULL,
	[STATIC_VARIABLE_VALUE]         	nvarchar(100) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [STAVBL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [STAVBL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [STAVBL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [STAVBL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [STAVBL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [STAVBL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [STAVBL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [STAVBL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [STAVBL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [STAVBL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [STAVBL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [STAVBL_PK] PRIMARY KEY CLUSTERED([STATIC_VARIABLE_NAME])
)
GO

CREATE TABLE [dbo].[PIMS_STATIC_VARIABLE_HIST]  ( 
	[_STATIC_VARIABLE_HIST_ID]      	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_STATIC_VARIABLE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[STATIC_VARIABLE_NAME]          	nvarchar(100) NOT NULL,
	[STATIC_VARIABLE_VALUE]         	nvarchar(100) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_STAVBL_H_PK] PRIMARY KEY CLUSTERED([_STATIC_VARIABLE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_SURVEY_PLAN_TYPE]  ( 
	[SURVEY_PLAN_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [SRVPLT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [SRVPLT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [SRVPLT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [SRVPLT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [SRVPLT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [SRVPLT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SRVPLT_PK] PRIMARY KEY CLUSTERED([SURVEY_PLAN_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the survey plan type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURVEY_PLAN_TYPE', 
	@level2type = N'Column', @level2name = N'SURVEY_PLAN_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the survey plan type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURVEY_PLAN_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURVEY_PLAN_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURVEY_PLAN_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the survey plan type.  This is an unassociated table that is used in the UI to populate JSON attributes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURVEY_PLAN_TYPE'
GO

CREATE TABLE [dbo].[PIMS_TAKE_SITE_CONTAM_TYPE]  ( 
	[TAKE_SITE_CONTAM_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [TKCONT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [TKCONT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [TKCONT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [TKCONT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [TKCONT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [TKCONT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [TKCONT_PK] PRIMARY KEY CLUSTERED([TAKE_SITE_CONTAM_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the site contamination type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_SITE_CONTAM_TYPE', 
	@level2type = N'Column', @level2name = N'TAKE_SITE_CONTAM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the site contamination type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_SITE_CONTAM_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_SITE_CONTAM_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_SITE_CONTAM_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Tables that contains the codes and associated descriptions of the site contamination types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_SITE_CONTAM_TYPE'
GO

CREATE TABLE [dbo].[PIMS_TAKE_STATUS_TYPE]  ( 
	[TAKE_STATUS_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [TKSTST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [TKSTST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [TKSTST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [TKSTST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [TKSTST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [TKSTST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [TKSTST_PK] PRIMARY KEY CLUSTERED([TAKE_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the take status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'TAKE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the take status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Tables that contains the codes and associated descriptions of the property take status types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_TAKE_TYPE]  ( 
	[TAKE_TYPE_CODE]            	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [TKTYPE_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [TKTYPE_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [TKTYPE_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [TKTYPE_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [TKTYPE_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [TKTYPE_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [TKTYPE_PK] PRIMARY KEY CLUSTERED([TAKE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the take type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'TAKE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the take type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Tables that contains the codes and associated descriptions of the property take types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_TAKE]  ( 
	[TAKE_ID]                       	bigint NOT NULL CONSTRAINT [TAKE_TAKE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_TAKE_ID_SEQ]),
	[PROPERTY_ACQUISITION_FILE_ID]  	bigint NOT NULL,
	[TAKE_TYPE_CODE]                	nvarchar(20) NOT NULL,
	[TAKE_STATUS_TYPE_CODE]         	nvarchar(20) NOT NULL CONSTRAINT [TAKE_TAKE_STATUS_TYPE_CODE_DEF]  DEFAULT ('INPROGRESS'),
	[TAKE_SITE_CONTAM_TYPE_CODE]    	nvarchar(20) NULL CONSTRAINT [TAKE_TAKE_SITE_CONTAM_TYPE_CODE_DEF]  DEFAULT ('UNK'),
	[AREA_UNIT_TYPE_CODE]           	nvarchar(20) NULL,
	[LAND_ACT_TYPE_CODE]            	nvarchar(20) NULL,
	[DESCRIPTION]                   	nvarchar(4000) NULL,
	[COMPLETION_DT]                 	date NULL,
	[IS_NEW_HIGHWAY_DEDICATION]     	bit NOT NULL CONSTRAINT [TAKE_IS_NEW_HIGHWAY_DEDICATION_DEF]  DEFAULT (CONVERT([bit],(0))),
	[NEW_HIGHWAY_DEDICATION_AREA]   	real NULL,
	[IS_ACQUIRED_FOR_INVENTORY]     	bit NOT NULL CONSTRAINT [TAKE_IS_ACQUIRED_FOR_INVENTORY_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_NEW_INTEREST_IN_SRW]        	bit NOT NULL CONSTRAINT [TAKE_IS_NEW_INTEREST_IN_SRW_DEF]  DEFAULT (CONVERT([bit],(0))),
	[STATUTORY_RIGHT_OF_WAY_AREA]   	real NULL,
	[SRW_END_DT]                    	date NULL,
	[IS_NEW_LICENSE_TO_CONSTRUCT]   	bit NOT NULL CONSTRAINT [TAKE_IS_NEW_LICENSE_TO_CONSTRUCT_DEF]  DEFAULT (CONVERT([bit],(0))),
	[LICENSE_TO_CONSTRUCT_AREA]     	real NULL,
	[LTC_END_DT]                    	date NULL,
	[IS_NEW_LAND_ACT]               	bit NOT NULL CONSTRAINT [TAKE_IS_NEW_LAND_ACT_DEF]  DEFAULT (CONVERT([bit],(0))),
	[LAND_ACT_AREA]                 	real NULL,
	[LAND_ACT_END_DT]               	date NULL,
	[IS_THERE_SURPLUS]              	bit NOT NULL CONSTRAINT [TAKE_IS_THERE_SURPLUS_DEF]  DEFAULT (CONVERT([bit],(0))),
	[SURPLUS_AREA]                  	real NULL,
	[IS_ACTIVE_LEASE]               	bit NOT NULL CONSTRAINT [TAKE_IS_ACTIVE_LEASE_DEF]  DEFAULT (CONVERT([bit],(0))),
	[ACTIVE_LEASE_AREA]             	real NULL,
	[ACTIVE_LEASE_END_DT]           	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [TAKE_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [TAKE_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [TAKE_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [TAKE_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [TAKE_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [TAKE_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [TAKE_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [TAKE_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [TAKE_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [TAKE_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [TAKE_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [TAKE_PK] PRIMARY KEY CLUSTERED([TAKE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the property take.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the take was completed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'COMPLETION_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is there a new right of way? (default = FALSE)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'IS_NEW_HIGHWAY_DEDICATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Area of the new right-of-way.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'NEW_HIGHWAY_DEDICATION_AREA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this being acquired for inventory? (default = TRUE)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'IS_ACQUIRED_FOR_INVENTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is there a statutory right of way? (default = FALSE)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'IS_NEW_INTEREST_IN_SRW'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Area of the statutory right-of-way.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'STATUTORY_RIGHT_OF_WAY_AREA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'End date of the statutory right-of-way.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'SRW_END_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is there a license to construct? (default = FALSE)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'IS_NEW_LICENSE_TO_CONSTRUCT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Area of the license to construct.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'LICENSE_TO_CONSTRUCT_AREA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'End date of the license to construct.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'LTC_END_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is there a Section 16? (default = FALSE)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'IS_NEW_LAND_ACT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Area of the Section 16 activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'LAND_ACT_AREA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'End date of the Section 16 activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'LAND_ACT_END_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is there a surplus or severance? (default = FALSE)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'IS_THERE_SURPLUS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Surplus/severance area.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'SURPLUS_AREA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is there an active lease associated with the take?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'IS_ACTIVE_LEASE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Area of the active lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'ACTIVE_LEASE_AREA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'End date of the active lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'ACTIVE_LEASE_END_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table defining the take related to a specific acquisition file and property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE'
GO

CREATE TABLE [dbo].[PIMS_TAKE_HIST]  ( 
	[_TAKE_HIST_ID]                 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_TAKE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[TAKE_ID]                       	bigint NOT NULL,
	[PROPERTY_ACQUISITION_FILE_ID]  	bigint NOT NULL,
	[TAKE_TYPE_CODE]                	nvarchar(20) NOT NULL,
	[TAKE_STATUS_TYPE_CODE]         	nvarchar(20) NOT NULL,
	[TAKE_SITE_CONTAM_TYPE_CODE]    	nvarchar(20) NULL,
	[AREA_UNIT_TYPE_CODE]           	nvarchar(20) NULL,
	[LAND_ACT_TYPE_CODE]            	nvarchar(20) NULL,
	[DESCRIPTION]                   	nvarchar(4000) NULL,
	[COMPLETION_DT]                 	date NULL,
	[IS_NEW_HIGHWAY_DEDICATION]     	bit NOT NULL,
	[NEW_HIGHWAY_DEDICATION_AREA]   	real NULL,
	[IS_ACQUIRED_FOR_INVENTORY]     	bit NOT NULL,
	[IS_NEW_INTEREST_IN_SRW]        	bit NOT NULL,
	[STATUTORY_RIGHT_OF_WAY_AREA]   	real NULL,
	[SRW_END_DT]                    	date NULL,
	[IS_NEW_LICENSE_TO_CONSTRUCT]   	bit NOT NULL,
	[LICENSE_TO_CONSTRUCT_AREA]     	real NULL,
	[LTC_END_DT]                    	date NULL,
	[IS_NEW_LAND_ACT]               	bit NOT NULL,
	[LAND_ACT_AREA]                 	real NULL,
	[LAND_ACT_END_DT]               	date NULL,
	[IS_THERE_SURPLUS]              	bit NOT NULL,
	[SURPLUS_AREA]                  	real NULL,
	[IS_ACTIVE_LEASE]               	bit NOT NULL,
	[ACTIVE_LEASE_AREA]             	real NULL,
	[ACTIVE_LEASE_END_DT]           	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_TAKE_H_PK] PRIMARY KEY CLUSTERED([_TAKE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_TENANT]  ( 
	[TENANT_ID]                 	bigint NOT NULL CONSTRAINT [TENNTX_TENANT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_TENANT_ID_SEQ]),
	[CODE]                      	nvarchar(6) NOT NULL,
	[NAME]                      	nvarchar(150) NOT NULL,
	[DESCRIPTION]               	nvarchar(500) NULL,
	[SETTINGS]                  	nvarchar(2000) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NULL CONSTRAINT [TENNTX_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [TENNTX_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [TENNTX_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [TENNTX_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [TENNTX_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [TENNTX_PK] PRIMARY KEY CLUSTERED([TENANT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Auto-sequenced unique key value' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT', 
	@level2type = N'Column', @level2name = N'TENANT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for entry' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the entry for display purposes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT', 
	@level2type = N'Column', @level2name = N'NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the entry for display purposes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Serialized JSON value for the configuration' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT', 
	@level2type = N'Column', @level2name = N'SETTINGS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Deprecated table to support legacy CITZ-PIMS application code.  This table will be removed once the code dependency is removed from the system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT'
GO

CREATE TABLE [dbo].[PIMS_USER_HIST]  ( 
	[_USER_HIST_ID]                 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_USER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[USER_ID]                       	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[USER_TYPE_CODE]                	nvarchar(20) NULL,
	[BUSINESS_IDENTIFIER_VALUE]     	nvarchar(30) NOT NULL,
	[GUID_IDENTIFIER_VALUE]         	uniqueidentifier NULL,
	[POSITION]                      	nvarchar(100) NULL,
	[NOTE]                          	nvarchar(1000) NULL,
	[LAST_LOGIN]                    	datetime NULL,
	[APPROVED_BY_ID]                	nvarchar(30) NULL,
	[ISSUE_DATE]                    	datetime NOT NULL,
	[EXPIRY_DATE]                   	datetime NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_USER_H_PK] PRIMARY KEY CLUSTERED([_USER_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_USER_ORGANIZATION]  ( 
	[USER_ORGANIZATION_ID]          	bigint NOT NULL CONSTRAINT [USRORG_USER_ORGANIZATION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_USER_ORGANIZATION_ID_SEQ]),
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[USER_ID]                       	bigint NOT NULL,
	[ROLE_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [USRORG_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [USRORG_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [USRORG_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [USRORG_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [USRORG_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [USRORG_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [USRORG_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [USRORG_PK] PRIMARY KEY CLUSTERED([USER_ORGANIZATION_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a user with an organization.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER_ORGANIZATION'
GO

CREATE TABLE [dbo].[PIMS_USER_ORGANIZATION_HIST]  ( 
	[_USER_ORGANIZATION_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_USER_ORGANIZATION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[USER_ORGANIZATION_ID]          	bigint NOT NULL,
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[USER_ID]                       	bigint NOT NULL,
	[ROLE_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_USRORG_H_PK] PRIMARY KEY CLUSTERED([_USER_ORGANIZATION_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_USER_ROLE]  ( 
	[USER_ROLE_ID]                  	bigint NOT NULL CONSTRAINT [USERRL_USER_ROLE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_USER_ROLE_ID_SEQ]),
	[USER_ID]                       	bigint NOT NULL,
	[ROLE_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [USERRL_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL CONSTRAINT [USERRL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [USERRL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [USERRL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [USERRL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [USERRL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [USERRL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [USERRL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [USERRL_PK] PRIMARY KEY CLUSTERED([USER_ROLE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if this association is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER_ROLE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a user with an role.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER_ROLE'
GO

CREATE TABLE [dbo].[PIMS_USER_ROLE_HIST]  ( 
	[_USER_ROLE_HIST_ID]            	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_USER_ROLE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[USER_ROLE_ID]                  	bigint NOT NULL,
	[USER_ID]                       	bigint NOT NULL,
	[ROLE_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_USERRL_H_PK] PRIMARY KEY CLUSTERED([_USER_ROLE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_WORK_ACTIVITY_CODE_HIST]  ( 
	[_WORK_ACTIVITY_CODE_HIST_ID]   	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_WORK_ACTIVITY_CODE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ID]                            	bigint NOT NULL,
	[CODE]                          	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL,
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_WRKACT_H_PK] PRIMARY KEY CLUSTERED([_WORK_ACTIVITY_CODE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_YEARLY_FINANCIAL_CODE_HIST]  ( 
	[_YEARLY_FINANCIAL_CODE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_YEARLY_FINANCIAL_CODE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ID]                            	bigint NOT NULL,
	[CODE]                          	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	datetime NOT NULL,
	[EXPIRY_DATE]                   	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_YRFINC_H_PK] PRIMARY KEY CLUSTERED([_YEARLY_FINANCIAL_CODE_HIST_ID])
)
GO

CREATE TABLE [dbo].[__EFMigrationsHistory]  ( 
	[MigrationId]   	nvarchar(150) NOT NULL,
	[ProductVersion]	nvarchar(32) NULL,
	CONSTRAINT [MIGHIS_PK] PRIMARY KEY CLUSTERED([MigrationId])
)
GO

CREATE VIEW [dbo].[PIMS_PERSON_CONTACT_VW] AS
SELECT DISTINCT PERSON_ID
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'FAX'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS FAX
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'PERSMOBIL'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS PERSONAL_MOBILE
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'PERSPHONE'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS PERSONAL_PHONE
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'WORKMOBIL'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS WORK_MOBILE
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'WORKPHONE'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS WORK_PHONE
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'WORKEMAIL'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS WORK_EMAIL
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'PERSEMAIL'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS PERSONAL_EMAIL
FROM   PIMS_CONTACT_METHOD TMP
WHERE  ORGANIZATION_ID IS NULL
GO

CREATE VIEW [dbo].[PIMS_CONTACT_MGR_VW] AS
WITH
  -- Return the most recently updated mailing address for the person
  topPMailingAddr_CTE (PERSON_ID, ADDRESS_ID, ADDRESS_USAGE_TYPE_CODE, APP_LAST_UPDATE_TIMESTAMP, RN)
    AS
      (SELECT PERSON_ID
            , ADDRESS_ID
            , ADDRESS_USAGE_TYPE_CODE
            , APP_LAST_UPDATE_TIMESTAMP
            , ROW_NUMBER() OVER (PARTITION BY PERSON_ID
                                 ORDER     BY APP_LAST_UPDATE_TIMESTAMP DESC) AS RN
       FROM   PIMS_PERSON_ADDRESS
       WHERE  ADDRESS_USAGE_TYPE_CODE = 'MAILING'
          AND PERSON_ID              IS NOT NULL),
       
  -- Return the most recently updated mailing address for the organization
  topOMailingAddr_CTE (ORGANIZATION_ID, ADDRESS_ID, APP_LAST_UPDATE_TIMESTAMP, RN)
    AS
      (SELECT ORGANIZATION_ID
            , ADDRESS_ID
            , APP_LAST_UPDATE_TIMESTAMP
            , ROW_NUMBER() OVER (PARTITION BY ORGANIZATION_ID
                                 ORDER     BY APP_LAST_UPDATE_TIMESTAMP DESC) AS RN
       FROM   PIMS_ORGANIZATION_ADDRESS
       WHERE  ADDRESS_USAGE_TYPE_CODE = 'MAILING'
          AND ORGANIZATION_ID        IS NOT NULL),
       
  -- Return the most recently updated work email address for the organization
  topOWorkEmail_CTE (ORGANIZATION_ID, CONTACT_METHOD_VALUE, APP_LAST_UPDATE_TIMESTAMP, RN)
    AS
       (SELECT ORGANIZATION_ID
             , CONTACT_METHOD_VALUE
             , APP_LAST_UPDATE_TIMESTAMP
             , ROW_NUMBER() OVER (PARTITION BY ORGANIZATION_ID
                                  ORDER     BY APP_LAST_UPDATE_TIMESTAMP DESC) AS RN
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'WORKEMAIL'
           AND ORGANIZATION_ID         IS NOT NULL)

  SELECT CONCAT('P', PER.PERSON_ID)                                                                              AS ID
       , PER.PERSON_ID
       , ORG.ORGANIZATION_ID                                                                                     AS ORGANIZATION_ID                
       , PER.IS_DISABLED
       , TRIM(CONCAT_WS(' ', NULLIF(PER.FIRST_NAME, ''), NULLIF(PER.MIDDLE_NAMES, ''), NULLIF(PER.SURNAME, ''))) AS SUMMARY
       , PER.SURNAME
       , PER.FIRST_NAME
       , PER.MIDDLE_NAMES
       , ORG.ORGANIZATION_NAME                                                                                   AS ORGANIZATION_NAME
       , PAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1                                                                                    AS MAILING_ADDRESS
       , ADR.MUNICIPALITY_NAME
       , PRV.PROVINCE_STATE_CODE                                                                                 AS PROVINCE_STATE
       , COALESCE(PVW.WORK_EMAIL, PVW.PERSONAL_EMAIL)                                                            AS EMAIL_ADDRESS
  FROM   PIMS_PERSON              PER                                                  LEFT JOIN
         topPMailingAddr_CTE      PAD ON PAD.PERSON_ID         = PER.PERSON_ID
                                     AND PAD.RN                = 1                     LEFT JOIN
         PIMS_ADDRESS             ADR ON ADR.ADDRESS_ID        = PAD.ADDRESS_ID        LEFT JOIN 
         PIMS_PROVINCE_STATE      PRV ON PRV.PROVINCE_STATE_ID = ADR.PROVINCE_STATE_ID LEFT JOIN
         PIMS_PERSON_CONTACT_VW   PVW ON PVW.PERSON_ID         = PER.PERSON_ID         LEFT JOIN
         (SELECT   PERSON_ID
                 , MAX(ORGANIZATION_ID) AS ORGANIZATION_ID 
          FROM     PIMS_PERSON_ORGANIZATION
          GROUP BY PERSON_ID)     POR ON POR.PERSON_ID         = PER.PERSON_ID         LEFT JOIN
         PIMS_ORGANIZATION        ORG ON ORG.ORGANIZATION_ID   = POR.ORGANIZATION_ID
  UNION
  SELECT CONCAT('O', ORG.ORGANIZATION_ID)
       , NULL
       , ORG.ORGANIZATION_ID
       , ORG.IS_DISABLED
       , ORG.ORGANIZATION_NAME
       , NULL
       , NULL                            
       , NULL                                                        
       , ORG.ORGANIZATION_NAME
       , OAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1
       , ADR.MUNICIPALITY_NAME                     
       , PRV.PROVINCE_STATE_CODE
       , CON.CONTACT_METHOD_VALUE 
  FROM   PIMS_ORGANIZATION         ORG                                                  LEFT JOIN 
         topOMailingAddr_CTE       OAD ON OAD.ORGANIZATION_ID   = ORG.ORGANIZATION_ID
                                      AND OAD.RN                = 1                     LEFT JOIN
         PIMS_ADDRESS              ADR ON ADR.ADDRESS_ID        = OAD.ADDRESS_ID        LEFT JOIN 
         PIMS_PROVINCE_STATE       PRV ON PRV.PROVINCE_STATE_ID = ADR.PROVINCE_STATE_ID LEFT JOIN
         topOWorkEmail_CTE         CON ON CON.ORGANIZATION_ID   = ORG.ORGANIZATION_ID
                                      AND CON.RN                = 1
GO

CREATE VIEW [dbo].[PIMS_HISTORICAL_FILE_NUMBER_VW] AS
SELECT PROPERTY_ID  
     , STRING_AGG(HISTORICAL_FILE_NUMBER_STR, N', ') AS HISTORICAL_FILE_NUMBER_STR
FROM   (SELECT fnum.PROPERTY_ID
             , fnum.HISTORICAL_FILE_NUMBER
             , fdsc.DISPLAY_ORDER
             , CASE
                 WHEN fnum.HISTORICAL_FILE_NUMBER_TYPE_CODE <> N'OTHER' THEN 
                   fdsc.DESCRIPTION + N': ' + fnum.HISTORICAL_FILE_NUMBER
                 ELSE 
                   fnum.OTHER_HIST_FILE_NUMBER_TYPE_CODE + N': ' + fnum.HISTORICAL_FILE_NUMBER
               END AS HISTORICAL_FILE_NUMBER_STR
        FROM   PIMS_HISTORICAL_FILE_NUMBER      fnum JOIN
               PIMS_HISTORICAL_FILE_NUMBER_TYPE fdsc ON fdsc.HISTORICAL_FILE_NUMBER_TYPE_CODE = fnum.HISTORICAL_FILE_NUMBER_TYPE_CODE) AS HISTORICAL_FILE_NUMBER
GROUP BY PROPERTY_ID
GO

CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_LITE_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.BOUNDARY AS GEOMETRY
     , PROP.IS_OWNED
     , PROP.IS_RETIRED
     , CASE
         WHEN EXISTS (SELECT 1    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID            
                      WHERE  TAKE.IS_NEW_LAND_ACT       = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE = 'COMPLETE'                                                                                                                              
                         AND TAKE.LAND_ACT_TYPE_CODE   IN (N'Section 15', N'Section 16', N'Section 17', N'Section 66', N'NOI')) THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_INTEREST_IN_SRW = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE  = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_LICENSE_TO_CONSTRUCT = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE       = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1                                                                                                                                    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  IS_ACTIVE_LEASE       = 1
                         AND TAKE_STATUS_TYPE_CODE = N'COMPLETE') THEN CONVERT([bit],(1))
         ELSE CONVERT([bit],(0))                                                                                                                                                                                          
         END AS IS_OTHER_INTEREST
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_DISPOSITION_FILE_PROPERTY DFPR JOIN
                          PIMS_DISPOSITION_FILE          DISP   ON DISP.DISPOSITION_FILE_ID = DFPR.DISPOSITION_FILE_ID
                                                               AND DFPR.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  DISP.DISPOSITION_FILE_STATUS_TYPE_CODE = N'COMPLETE'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_DISPOSED
     , IIF(EXISTS (SELECT 1                        
                   FROM   PIMS_PROPERTY_ACQUISITION_FILE PRAF JOIN
                          PIMS_ACQUISITION_FILE          ACQF   ON ACQF.ACQUISITION_FILE_ID = PRAF.ACQUISITION_FILE_ID
                                                               AND PRAF.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  ACQF.ACQUISITION_FILE_STATUS_TYPE_CODE IN (N'DRAFT', N'ACTIVE')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS HAS_ACTIVE_ACQUISITION_FILE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_RESEARCH_FILE PRSF JOIN
                          PIMS_RESEARCH_FILE          RSHF   ON RSHF.RESEARCH_FILE_ID = PRSF.RESEARCH_FILE_ID
                                                            AND PRSF.PROPERTY_ID      = PROP.PROPERTY_ID
                   WHERE  RSHF.RESEARCH_FILE_STATUS_TYPE_CODE = N'ACTIVE'), CONVERT([bit],(1)), CONVERT([bit],(0)))  AS HAS_ACTIVE_RESEARCH_FILE  
FROM   PIMS_PROPERTY PROP
WHERE  PROP.BOUNDARY IS NOT NULL
GO

CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_VW] AS
SELECT PROP.PROPERTY_ID                
     , PROP.PID      
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN
     , PROP.PROPERTY_TYPE_CODE     
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TNUR.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE  TNUR INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYPE TNTY ON TNTY.PROPERTY_TENURE_TYPE_CODE = TNUR.PROPERTY_TENURE_TYPE_CODE
                                                      AND TNTY.PROPERTY_ID               = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE                                                                                                                             
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY  
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA                                            
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.SURVEY_PLAN_NUMBER
     , PROP.IS_OWNED        
     , PROP.IS_RETIRED   
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_DISPOSITION_FILE_PROPERTY DFPR JOIN
                          PIMS_DISPOSITION_FILE          DISP   ON DISP.DISPOSITION_FILE_ID = DFPR.DISPOSITION_FILE_ID
                                                               AND DFPR.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  DISP.DISPOSITION_FILE_STATUS_TYPE_CODE = N'COMPLETE'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_DISPOSED 
     , CASE
         WHEN EXISTS (SELECT 1    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID            
                      WHERE  TAKE.IS_NEW_LAND_ACT       = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE = 'COMPLETE'                                                                                                                              
                         AND TAKE.LAND_ACT_TYPE_CODE   IN (N'Section 15', N'Section 16', N'Section 17', N'Section 66', N'NOI')) THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_INTEREST_IN_SRW = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE  = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_LICENSE_TO_CONSTRUCT = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE       = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1                                                                                                                                    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  IS_ACTIVE_LEASE       = 1
                         AND TAKE_STATUS_TYPE_CODE = N'COMPLETE') THEN CONVERT([bit],(1))
         ELSE CONVERT([bit],(0))
         END AS IS_OTHER_INTEREST                                                                 
     , IIF(EXISTS (SELECT 1                        
                   FROM   PIMS_PROPERTY_ACQUISITION_FILE PRAF JOIN
                          PIMS_ACQUISITION_FILE          ACQF   ON ACQF.ACQUISITION_FILE_ID = PRAF.ACQUISITION_FILE_ID
                                                               AND PRAF.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  ACQF.ACQUISITION_FILE_STATUS_TYPE_CODE IN (N'DRAFT', N'ACTIVE')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS HAS_ACTIVE_ACQUISITION_FILE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_RESEARCH_FILE PRSF JOIN
                          PIMS_RESEARCH_FILE          RSHF   ON RSHF.RESEARCH_FILE_ID = PRSF.RESEARCH_FILE_ID
                                                            AND PRSF.PROPERTY_ID      = PROP.PROPERTY_ID
                   WHERE  RSHF.RESEARCH_FILE_STATUS_TYPE_CODE = N'ACTIVE'), CONVERT([bit],(1)), CONVERT([bit],(0)))  AS HAS_ACTIVE_RESEARCH_FILE                                                              
     , IIF(EXISTS (SELECT 1                                            
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN (N'PYBLMOTI', N'PYBLBCTFA')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_PAYABLE_LEASE   
     , IIF(EXISTS (SELECT 1                                                                                                            
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN (N'PYBLMOTI', N'PYBLBCTFA')
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE          ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL  ) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_RECEIVABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE          ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL  ) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_RECEIVABLE_LEASE          
     , FNVW.HISTORICAL_FILE_NUMBER_STR
FROM   PIMS_PROPERTY                  PROP                                                    LEFT OUTER JOIN 
       PIMS_HISTORICAL_FILE_NUMBER_VW FNVW ON FNVW.PROPERTY_ID       = PROP.PROPERTY_ID       LEFT OUTER JOIN         
       PIMS_ADDRESS                   ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE            PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY                   CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID   
WHERE  PROP.BOUNDARY IS NOT NULL
GO

CREATE VIEW [dbo].[PIMS_PROPERTY_LOCATION_LITE_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.LOCATION AS GEOMETRY
     , PROP.IS_OWNED
     , PROP.IS_RETIRED
     , CASE
         WHEN EXISTS (SELECT 1    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID            
                      WHERE  TAKE.IS_NEW_LAND_ACT       = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE = 'COMPLETE'                                                                                                                              
                         AND TAKE.LAND_ACT_TYPE_CODE   IN (N'Section 15', N'Section 16', N'Section 17', N'Section 66', N'NOI')) THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_INTEREST_IN_SRW = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE  = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID                                                     
                      WHERE  TAKE.IS_NEW_LICENSE_TO_CONSTRUCT = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE       = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1                                                                                                                                    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  IS_ACTIVE_LEASE       = 1
                         AND TAKE_STATUS_TYPE_CODE = N'COMPLETE') THEN CONVERT([bit],(1))
         ELSE CONVERT([bit],(0))
         END AS IS_OTHER_INTEREST
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_DISPOSITION_FILE_PROPERTY DFPR JOIN
                          PIMS_DISPOSITION_FILE          DISP   ON DISP.DISPOSITION_FILE_ID = DFPR.DISPOSITION_FILE_ID
                                                               AND DFPR.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  DISP.DISPOSITION_FILE_STATUS_TYPE_CODE = N'COMPLETE'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_DISPOSED                                                            
     , IIF(EXISTS (SELECT 1                        
                   FROM   PIMS_PROPERTY_ACQUISITION_FILE PRAF JOIN
                          PIMS_ACQUISITION_FILE          ACQF   ON ACQF.ACQUISITION_FILE_ID = PRAF.ACQUISITION_FILE_ID
                                                               AND PRAF.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  ACQF.ACQUISITION_FILE_STATUS_TYPE_CODE IN (N'DRAFT', N'ACTIVE')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS HAS_ACTIVE_ACQUISITION_FILE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_RESEARCH_FILE PRSF JOIN
                          PIMS_RESEARCH_FILE          RSHF   ON RSHF.RESEARCH_FILE_ID = PRSF.RESEARCH_FILE_ID
                                                            AND PRSF.PROPERTY_ID      = PROP.PROPERTY_ID
                   WHERE  RSHF.RESEARCH_FILE_STATUS_TYPE_CODE = N'ACTIVE'), CONVERT([bit],(1)), CONVERT([bit],(0)))  AS HAS_ACTIVE_RESEARCH_FILE   
FROM   PIMS_PROPERTY PROP
WHERE  PROP.LOCATION IS NOT NULL
GO

CREATE VIEW [dbo].[PIMS_PROPERTY_LOCATION_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN                   
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TNUR.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE  TNUR INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYPE TNTY ON TNTY.PROPERTY_TENURE_TYPE_CODE = TNUR.PROPERTY_TENURE_TYPE_CODE
                                                      AND TNTY.PROPERTY_ID               = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.LOCATION AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.SURVEY_PLAN_NUMBER
     , PROP.IS_OWNED
     , PROP.IS_RETIRED    
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_DISPOSITION_FILE_PROPERTY DFPR JOIN
                          PIMS_DISPOSITION_FILE          DISP   ON DISP.DISPOSITION_FILE_ID = DFPR.DISPOSITION_FILE_ID
                                                               AND DFPR.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  DISP.DISPOSITION_FILE_STATUS_TYPE_CODE = N'COMPLETE'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_DISPOSED 
     , CASE
         WHEN EXISTS (SELECT 1    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID            
                      WHERE  TAKE.IS_NEW_LAND_ACT       = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE = 'COMPLETE'                                                                                                                              
                         AND TAKE.LAND_ACT_TYPE_CODE   IN (N'Section 15', N'Section 16', N'Section 17', N'Section 66', N'NOI')) THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_INTEREST_IN_SRW = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE  = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID                                                     
                      WHERE  TAKE.IS_NEW_LICENSE_TO_CONSTRUCT = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE       = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1                                                                                                                                    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  IS_ACTIVE_LEASE       = 1
                         AND TAKE_STATUS_TYPE_CODE = N'COMPLETE') THEN CONVERT([bit],(1))
         ELSE CONVERT([bit],(0))
         END AS IS_OTHER_INTEREST                                                                 
     , IIF(EXISTS (SELECT 1                        
                   FROM   PIMS_PROPERTY_ACQUISITION_FILE PRAF JOIN
                          PIMS_ACQUISITION_FILE          ACQF   ON ACQF.ACQUISITION_FILE_ID = PRAF.ACQUISITION_FILE_ID
                                                               AND PRAF.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  ACQF.ACQUISITION_FILE_STATUS_TYPE_CODE IN (N'DRAFT', N'ACTIVE')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS HAS_ACTIVE_ACQUISITION_FILE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_RESEARCH_FILE PRSF JOIN
                          PIMS_RESEARCH_FILE          RSHF   ON RSHF.RESEARCH_FILE_ID = PRSF.RESEARCH_FILE_ID
                                                            AND PRSF.PROPERTY_ID      = PROP.PROPERTY_ID
                   WHERE  RSHF.RESEARCH_FILE_STATUS_TYPE_CODE = N'ACTIVE'), CONVERT([bit],(1)), CONVERT([bit],(0)))  AS HAS_ACTIVE_RESEARCH_FILE                                                              
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN ('PYBLMOTI', 'PYBLBCTFA')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN ('PYBLMOTI', 'PYBLBCTFA')
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE        ) OR   
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_RECEIVABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN      
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE        ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_RECEIVABLE_LEASE                     
     , FNVW.HISTORICAL_FILE_NUMBER_STR
FROM   PIMS_PROPERTY                  PROP                                                    LEFT OUTER JOIN  
       PIMS_HISTORICAL_FILE_NUMBER_VW FNVW ON FNVW.PROPERTY_ID       = PROP.PROPERTY_ID       LEFT OUTER JOIN
       PIMS_ADDRESS                   ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE            PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY                   CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
WHERE  PROP.LOCATION IS NOT NULL
GO

CREATE VIEW [dbo].[PIMS_PROPERTY_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID   
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TNUR.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE  TNUR INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYPE TNTY ON TNTY.PROPERTY_TENURE_TYPE_CODE = TNUR.PROPERTY_TENURE_TYPE_CODE
                                                      AND TNTY.PROPERTY_ID               = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY
     , PROP.BOUNDARY AS LOCATION
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.SURVEY_PLAN_NUMBER
     , PROP.IS_OWNED
     , PROP.IS_RETIRED    
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_DISPOSITION_FILE_PROPERTY DFPR JOIN
                          PIMS_DISPOSITION_FILE          DISP   ON DISP.DISPOSITION_FILE_ID = DFPR.DISPOSITION_FILE_ID
                                                               AND DFPR.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  DISP.DISPOSITION_FILE_STATUS_TYPE_CODE = N'COMPLETE'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_DISPOSED 
     , CASE
         WHEN EXISTS (SELECT 1    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID            
                      WHERE  TAKE.IS_NEW_LAND_ACT       = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE = 'COMPLETE'                                                                                                                              
                         AND TAKE.LAND_ACT_TYPE_CODE   IN (N'Section 15', N'Section 16', N'Section 17', N'Section 66', N'NOI')) THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_INTEREST_IN_SRW = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE  = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_LICENSE_TO_CONSTRUCT = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE       = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1                                                                                                                                    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  IS_ACTIVE_LEASE       = 1                        
                         AND TAKE_STATUS_TYPE_CODE = N'COMPLETE') THEN CONVERT([bit],(1))
         ELSE CONVERT([bit],(0))
         END AS IS_OTHER_INTEREST                                                                 
     , IIF(EXISTS (SELECT 1                        
                   FROM   PIMS_PROPERTY_ACQUISITION_FILE PRAF JOIN
                          PIMS_ACQUISITION_FILE          ACQF   ON ACQF.ACQUISITION_FILE_ID = PRAF.ACQUISITION_FILE_ID
                                                               AND PRAF.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  ACQF.ACQUISITION_FILE_STATUS_TYPE_CODE IN (N'DRAFT', N'ACTIVE')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS HAS_ACTIVE_ACQUISITION_FILE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_RESEARCH_FILE PRSF JOIN
                          PIMS_RESEARCH_FILE          RSHF   ON RSHF.RESEARCH_FILE_ID = PRSF.RESEARCH_FILE_ID
                                                            AND PRSF.PROPERTY_ID      = PROP.PROPERTY_ID
                   WHERE  RSHF.RESEARCH_FILE_STATUS_TYPE_CODE = N'ACTIVE'), CONVERT([bit],(1)), CONVERT([bit],(0)))  AS HAS_ACTIVE_RESEARCH_FILE                                                              
     , IIF(EXISTS (SELECT 1                                            
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN (N'PYBLMOTI', N'PYBLBCTFA')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_PAYABLE_LEASE   
     , IIF(EXISTS (SELECT 1                                                                                                            
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN (N'PYBLMOTI', N'PYBLBCTFA')
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE          ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL  ) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_RECEIVABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE          ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL  ) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_RECEIVABLE_LEASE                 
     , FNVW.HISTORICAL_FILE_NUMBER_STR
FROM   PIMS_PROPERTY                  PROP                                                    LEFT OUTER JOIN  
       PIMS_HISTORICAL_FILE_NUMBER_VW FNVW ON FNVW.PROPERTY_ID       = PROP.PROPERTY_ID       LEFT OUTER JOIN
       PIMS_ADDRESS                   ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE            PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY                   CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
GO

-- ............................................................................................


-- --------------------------------------------------------------------------------------------
-- Create procedure pims_error_handling 
-- --------------------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pims_error_handling] AS 
  begin
    DECLARE @errmsg   nvarchar(2048),
      @severity tinyint,
      @state    tinyint,
      @errno    int,
      @proc     sysname,
      @lineno   int
           
    SELECT @errmsg = error_message(), @severity = error_severity(),
      @state  = error_state(), @errno = error_number(),
      @proc   = error_procedure(), @lineno = error_line()

    IF @errmsg NOT LIKE '***%'
      BEGIN
        SELECT @errmsg = '*** ' + coalesce(quotename(@proc), '<dynamic SQL>') + 
          ', Line ' + ltrim(str(@lineno)) + '. Errno ' + 
          ltrim(str(@errno)) + ': ' + @errmsg
      END

    RAISERROR('%s', @severity, @state, @errmsg)
  end
GO

-- --------------------------------------------------------------------------------------------
-- Create function pims_ColumnExists 
-- --------------------------------------------------------------------------------------------
CREATE FUNCTION [dbo].[pims_ColumnExists](@TableName varchar(100), @ColumnName varchar(100))
RETURNS nvarchar(1) 
AS
BEGIN
  DECLARE @Result nvarchar(1);
  
  IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = @TableName AND COLUMN_NAME = @ColumnName)
    SET @Result = 'Y'
  ELSE
    SET @Result = 'N'

  IF @TableName LIKE '%HIST'
    SET @Result = 'N'
 
 RETURN @Result;
END
GO

CREATE NONCLUSTERED INDEX [ACQCIT_ACQ_CHKLST_SECTION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQ_CHKLST_ITEM_TYPE]([ACQ_CHKLST_SECTION_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQCKI_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM]([ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [ACQCKI_ACQ_CHKLST_ITEM_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM]([ACQ_CHKLST_ITEM_TYPE_CODE])
GO

CREATE UNIQUE NONCLUSTERED INDEX [ACQCKI_ACQ_FILE_CHKLST_ITEM_UK_IDX]
	ON [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM]([ACQUISITION_FILE_ID], [ACQ_CHKLST_ITEM_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQCKI_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM]([CHKLST_ITEM_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQDOC_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT]([ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [ACQDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT]([DOCUMENT_ID])
GO

CREATE NONCLUSTERED INDEX [ACQFRM_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_FORM]([ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [ACQFRM_FORM_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_FORM]([FORM_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQNFL_ACQUISITION_FILE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQNFL_ACQUISITION_FUNDING_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FUNDING_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQNFL_ACQUISITION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQNFL_ACQ_PHYS_FILE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([ACQ_PHYS_FILE_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQNFL_FILE_NO_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([FILE_NO])
GO

CREATE NONCLUSTERED INDEX [ACQNFL_LEGACY_FILE_NUMBER_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([LEGACY_FILE_NUMBER])
GO

CREATE NONCLUSTERED INDEX [ACQNFL_PRNT_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([PRNT_ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [ACQNFL_PRODUCT_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([PRODUCT_ID])
GO

CREATE NONCLUSTERED INDEX [ACQNFL_PROJECT_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([PROJECT_ID])
GO

CREATE NONCLUSTERED INDEX [ACQNFL_REGION_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQNFL_SUBFILE_INTEREST_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([SUBFILE_INTEREST_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQNOT_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_NOTE]([ACQUISITION_FILE_ID])
GO

CREATE UNIQUE NONCLUSTERED INDEX [ACQNOT_NOTE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_NOTE]([NOTE_ID])
GO

CREATE NONCLUSTERED INDEX [ACQNTM_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_TEAM]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [ACQNTM_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_TEAM]([PRIMARY_CONTACT_ID])
GO

CREATE NONCLUSTERED INDEX [ACQOWN_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER]([ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [ACQOWN_ADDRESS_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER]([ADDRESS_ID])
GO

CREATE NONCLUSTERED INDEX [ACQOWN_LAST_NAME_OR_CORP_NAME_1_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER]([LAST_NAME_AND_CORP_NAME])
GO

CREATE NONCLUSTERED INDEX [ACQPER_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_TEAM]([ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [ACQPER_ACQ_FL_PERSON_PROFILE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_TEAM]([ACQ_FL_TEAM_PROFILE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQPER_PERSON_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_TEAM]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [ACRQOR_ACCESS_REQUEST_ID_IDX]
	ON [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION]([ACCESS_REQUEST_ID])
GO

CREATE NONCLUSTERED INDEX [ACRQOR_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [ACRQST_ACCESS_REQUEST_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACCESS_REQUEST]([ACCESS_REQUEST_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACRQST_REGION_CODE_IDX]
	ON [dbo].[PIMS_ACCESS_REQUEST]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [ACRQST_ROLE_ID_IDX]
	ON [dbo].[PIMS_ACCESS_REQUEST]([ROLE_ID])
GO

CREATE NONCLUSTERED INDEX [ACRQST_USER_ID_IDX]
	ON [dbo].[PIMS_ACCESS_REQUEST]([USER_ID])
GO

CREATE NONCLUSTERED INDEX [ACRQST_USER_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACCESS_REQUEST]([USER_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ADDRSS_COUNTRY_ID_IDX]
	ON [dbo].[PIMS_ADDRESS]([COUNTRY_ID])
GO

CREATE NONCLUSTERED INDEX [ADDRSS_DISTRICT_CODE_IDX]
	ON [dbo].[PIMS_ADDRESS]([DISTRICT_CODE])
GO

CREATE NONCLUSTERED INDEX [ADDRSS_MUNICIPALITY_NAME_IDX]
	ON [dbo].[PIMS_ADDRESS]([MUNICIPALITY_NAME])
GO

CREATE NONCLUSTERED INDEX [ADDRSS_PROVINCE_STATE_ID_IDX]
	ON [dbo].[PIMS_ADDRESS]([PROVINCE_STATE_ID])
GO

CREATE NONCLUSTERED INDEX [ADDRSS_REGION_CODE_IDX]
	ON [dbo].[PIMS_ADDRESS]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [ADDRSS_STREET_ADDRESS_1_IDX]
	ON [dbo].[PIMS_ADDRESS]([STREET_ADDRESS_1])
GO

CREATE NONCLUSTERED INDEX [AGRMNT_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_AGREEMENT]([ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [AGRMNT_AGREEMENT_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_AGREEMENT]([AGREEMENT_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [AGRMNT_AGREEMENT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_AGREEMENT]([AGREEMENT_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [BIZFCN_CODE_IDX]
	ON [dbo].[PIMS_BUSINESS_FUNCTION_CODE]([CODE])
GO

CREATE NONCLUSTERED INDEX [CHRTAC_CODE_IDX]
	ON [dbo].[PIMS_CHART_OF_ACCOUNTS_CODE]([CODE])
GO

CREATE NONCLUSTERED INDEX [CLMTYP_CLAIM_UID_IDX]
	ON [dbo].[PIMS_CLAIM]([CLAIM_UID])
GO

CREATE NONCLUSTERED INDEX [CLMTYP_KEYCLOAK_ROLE_ID_IDX]
	ON [dbo].[PIMS_CLAIM]([KEYCLOAK_ROLE_ID])
GO

CREATE NONCLUSTERED INDEX [CMPREQ_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_COMPENSATION_REQUISITION]([ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [CMPREQ_ACQUISITION_FILE_PERSON_ID_IDX]
	ON [dbo].[PIMS_COMPENSATION_REQUISITION]([ACQUISITION_FILE_TEAM_ID])
GO

CREATE NONCLUSTERED INDEX [CMPREQ_ACQUISITION_OWNER_ID_IDX]
	ON [dbo].[PIMS_COMPENSATION_REQUISITION]([ACQUISITION_OWNER_ID])
GO

CREATE NONCLUSTERED INDEX [CMPREQ_ALTERNATE_PROJECT_ID_IDX]
	ON [dbo].[PIMS_COMPENSATION_REQUISITION]([ALTERNATE_PROJECT_ID])
GO

CREATE NONCLUSTERED INDEX [CMPREQ_CHART_OF_ACCOUNTS_ID_IDX]
	ON [dbo].[PIMS_COMPENSATION_REQUISITION]([CHART_OF_ACCOUNTS_ID])
GO

CREATE NONCLUSTERED INDEX [CMPREQ_INTEREST_HOLDER_ID_IDX]
	ON [dbo].[PIMS_COMPENSATION_REQUISITION]([INTEREST_HOLDER_ID])
GO

CREATE NONCLUSTERED INDEX [CMPREQ_LEASE_ID_IDX]
	ON [dbo].[PIMS_COMPENSATION_REQUISITION]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [CMPREQ_RESPONSIBILITY_ID_IDX]
	ON [dbo].[PIMS_COMPENSATION_REQUISITION]([RESPONSIBILITY_ID])
GO

CREATE NONCLUSTERED INDEX [CMPREQ_YEARLY_FINANCIAL_ID_IDX]
	ON [dbo].[PIMS_COMPENSATION_REQUISITION]([YEARLY_FINANCIAL_ID])
GO

CREATE NONCLUSTERED INDEX [CNTMTH_CONTACT_METHOD_TYPE_CODE_IDX]
	ON [dbo].[PIMS_CONTACT_METHOD]([CONTACT_METHOD_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [CNTMTH_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_CONTACT_METHOD]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [CNTMTH_PERSON_ID_IDX]
	ON [dbo].[PIMS_CONTACT_METHOD]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [COSTYP_CODE_IDX]
	ON [dbo].[PIMS_COST_TYPE_CODE]([CODE])
GO

CREATE NONCLUSTERED INDEX [CRH120_COMPENSATION_REQUISITION_ID_IDX]
	ON [dbo].[PIMS_COMP_REQ_FINANCIAL]([COMPENSATION_REQUISITION_ID])
GO

CREATE NONCLUSTERED INDEX [CRH120_FINANCIAL_ACTIVITY_CODE_ID_IDX]
	ON [dbo].[PIMS_COMP_REQ_FINANCIAL]([FINANCIAL_ACTIVITY_CODE_ID])
GO

CREATE NONCLUSTERED INDEX [DCCTSB_DOCUMENT_CATEGORY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DOCUMENT_CATEGORY_SUBTYPE]([DOCUMENT_CATEGORY_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DCCTSB_DOCUMENT_TYPE_ID_IDX]
	ON [dbo].[PIMS_DOCUMENT_CATEGORY_SUBTYPE]([DOCUMENT_TYPE_ID])
GO

CREATE NONCLUSTERED INDEX [DISPFL_DISPOSITION_FILE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DISPFL_DISPOSITION_FUNDING_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FUNDING_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DISPFL_DISPOSITION_INITIATING_DOC_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_INITIATING_DOC_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DISPFL_DISPOSITION_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DISPFL_DISPOSITION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DISPFL_DSP_INITIATING_BRANCH_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([DSP_INITIATING_BRANCH_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DISPFL_DSP_PHYS_FILE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([DSP_PHYS_FILE_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DISPFL_PRODUCT_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([PRODUCT_ID])
GO

CREATE NONCLUSTERED INDEX [DISPFL_PROJECT_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([PROJECT_ID])
GO

CREATE NONCLUSTERED INDEX [DISPFL_REGION_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [DOCMNT_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
GO

CREATE NONCLUSTERED INDEX [DOCMNT_DOCUMENT_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DOCUMENT]([DOCUMENT_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DOCQUE_ACQUISITION_FILE_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DOCUMENT_QUEUE]([ACQUISITION_FILE_DOCUMENT_ID])
GO

CREATE NONCLUSTERED INDEX [DOCQUE_DATA_SOURCE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DOCUMENT_QUEUE]([DATA_SOURCE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DOCQUE_DISPOSITION_FILE_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DOCUMENT_QUEUE]([DISPOSITION_FILE_DOCUMENT_ID])
GO

CREATE NONCLUSTERED INDEX [DOCQUE_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DOCUMENT_QUEUE]([DOCUMENT_ID])
GO

CREATE NONCLUSTERED INDEX [DOCQUE_DOCUMENT_QUEUE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DOCUMENT_QUEUE]([DOCUMENT_QUEUE_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DOCQUE_LEASE_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DOCUMENT_QUEUE]([LEASE_DOCUMENT_ID])
GO

CREATE NONCLUSTERED INDEX [DOCQUE_PROPERTY_ACTIVITY_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DOCUMENT_QUEUE]([PROPERTY_ACTIVITY_DOCUMENT_ID])
GO

CREATE NONCLUSTERED INDEX [DOCQUE_RESEARCH_FILE_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DOCUMENT_QUEUE]([RESEARCH_FILE_DOCUMENT_ID])
GO

CREATE NONCLUSTERED INDEX [DSPAPP_DISPOSITION_FILE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_APPRAISAL]([DISPOSITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [DSPCIT_DSP_CHKLST_SECTION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DSP_CHKLST_ITEM_TYPE]([DSP_CHKLST_SECTION_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DSPCKI_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]([CHKLST_ITEM_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DSPCKI_DISPOSITION_FILE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]([DISPOSITION_FILE_ID])
GO

CREATE UNIQUE NONCLUSTERED INDEX [DSPCKI_DISPOSITION_FILE_ID_UK_IDX]
	ON [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]([DISPOSITION_FILE_ID], [DSP_CHKLST_ITEM_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DSPCKI_DSP_CHKLST_ITEM_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]([DSP_CHKLST_ITEM_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DSPDOC_DISPOSITION_FILE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT]([DISPOSITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [DSPDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT]([DOCUMENT_ID])
GO

CREATE NONCLUSTERED INDEX [DSPFTM_DISPOSITION_FILE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_TEAM]([DISPOSITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [DSPFTM_DSP_FL_TEAM_PROFILE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_TEAM]([DSP_FL_TEAM_PROFILE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DSPFTM_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_TEAM]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [DSPFTM_PERSON_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_TEAM]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [DSPFTM_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_TEAM]([PRIMARY_CONTACT_ID])
GO

CREATE NONCLUSTERED INDEX [DSPNOT_DISPOSITION_FILE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_NOTE]([DISPOSITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [DSPNOT_NOTE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_NOTE]([NOTE_ID])
GO

CREATE NONCLUSTERED INDEX [DSPOFR_DISPOSITION_FILE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_OFFER]([DISPOSITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [DSPOFR_DISPOSITION_OFFER_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DISPOSITION_OFFER]([DISPOSITION_OFFER_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DSPPAG_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_DSP_PURCH_AGENT]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [DSPPAG_PERSON_ID_IDX]
	ON [dbo].[PIMS_DSP_PURCH_AGENT]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [DSPPAG_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_DSP_PURCH_AGENT]([PRIMARY_CONTACT_ID])
GO

CREATE NONCLUSTERED INDEX [DSPPRP_DISPOSITION_FILE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_PROPERTY]([DISPOSITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [DSPPRP_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE_PROPERTY]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [DSPPSL_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_DSP_PURCH_SOLICITOR]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [DSPPSL_PERSON_ID_IDX]
	ON [dbo].[PIMS_DSP_PURCH_SOLICITOR]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [DSPPSL_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_DSP_PURCH_SOLICITOR]([PRIMARY_CONTACT_ID])
GO

CREATE NONCLUSTERED INDEX [DSPPUR_DISPOSITION_SALE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_PURCHASER]([DISPOSITION_SALE_ID])
GO

CREATE NONCLUSTERED INDEX [DSPPUR_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_PURCHASER]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [DSPPUR_PERSON_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_PURCHASER]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [DSPPUR_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_PURCHASER]([PRIMARY_CONTACT_ID])
GO

CREATE NONCLUSTERED INDEX [DSPSAL_DISPOSITION_FILE_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_SALE]([DISPOSITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [DSPSAL_DSP_PURCH_AGENT_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_SALE]([DSP_PURCH_AGENT_ID])
GO

CREATE NONCLUSTERED INDEX [DSPSAL_DSP_PURCH_SOLICITOR_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_SALE]([DSP_PURCH_SOLICITOR_ID])
GO

CREATE NONCLUSTERED INDEX [DSTRCT_REGION_CODE_IDX]
	ON [dbo].[PIMS_DISTRICT]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [EXPPMT_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_EXPROPRIATION_PAYMENT]([ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [EXPPMT_ACQUISITION_OWNER_ID_IDX]
	ON [dbo].[PIMS_EXPROPRIATION_PAYMENT]([ACQUISITION_OWNER_ID])
GO

CREATE NONCLUSTERED INDEX [EXPPMT_EXPROPRIATING_AUTHORITY_IDX]
	ON [dbo].[PIMS_EXPROPRIATION_PAYMENT]([EXPROPRIATING_AUTHORITY])
GO

CREATE NONCLUSTERED INDEX [EXPPMT_INTEREST_HOLDER_ID_IDX]
	ON [dbo].[PIMS_EXPROPRIATION_PAYMENT]([INTEREST_HOLDER_ID])
GO

CREATE NONCLUSTERED INDEX [FINACT_CODE_IDX]
	ON [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE]([CODE])
GO

CREATE NONCLUSTERED INDEX [H120CT_COST_TYPE_ID_IDX]
	ON [dbo].[PIMS_H120_CATEGORY]([COST_TYPE_ID])
GO

CREATE NONCLUSTERED INDEX [H120CT_FINANCIAL_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_H120_CATEGORY]([FINANCIAL_ACTIVITY_ID])
GO

CREATE NONCLUSTERED INDEX [H120CT_WORK_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_H120_CATEGORY]([WORK_ACTIVITY_ID])
GO

CREATE NONCLUSTERED INDEX [HFLNUM_DATA_SOURCE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_HISTORICAL_FILE_NUMBER]([DATA_SOURCE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [HFLNUM_HISTORICAL_FILE_NUMBER_IDX]
	ON [dbo].[PIMS_HISTORICAL_FILE_NUMBER]([HISTORICAL_FILE_NUMBER])
GO

CREATE NONCLUSTERED INDEX [HFLNUM_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_HISTORICAL_FILE_NUMBER]([PROPERTY_ID])
GO

CREATE UNIQUE NONCLUSTERED INDEX [HFLNUM_PROPERTY_ID_UK]
	ON [dbo].[PIMS_HISTORICAL_FILE_NUMBER]([PROPERTY_ID], [HISTORICAL_FILE_NUMBER_TYPE_CODE], [HISTORICAL_FILE_NUMBER], [OTHER_HIST_FILE_NUMBER_TYPE_CODE], [IS_DISABLED])
GO

CREATE NONCLUSTERED INDEX [IHPRIN_INTEREST_HOLDER_ID_IDX]
	ON [dbo].[PIMS_INTHLDR_PROP_INTEREST]([INTEREST_HOLDER_ID])
GO

CREATE NONCLUSTERED INDEX [IHPRIN_PROPERTY_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_INTHLDR_PROP_INTEREST]([PROPERTY_ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [INSRNC_INSURANCE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_INSURANCE]([INSURANCE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [INSRNC_LEASE_ID_IDX]
	ON [dbo].[PIMS_INSURANCE]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [INTHLD_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_INTEREST_HOLDER]([ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [INTHLD_INTEREST_HOLDER_TYPE_CODE_IDX]
	ON [dbo].[PIMS_INTEREST_HOLDER]([INTEREST_HOLDER_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [INTHLD_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_INTEREST_HOLDER]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [INTHLD_PERSON_ID_IDX]
	ON [dbo].[PIMS_INTEREST_HOLDER]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [INTHLD_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_INTEREST_HOLDER]([PRIMARY_CONTACT_ID])
GO

CREATE NONCLUSTERED INDEX [LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CHECKLIST_ITEM]([CHKLST_ITEM_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LCHKLI_LEASE_CHKLST_ITEM_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CHECKLIST_ITEM]([LEASE_CHKLST_ITEM_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LCHKLI_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_CHECKLIST_ITEM]([LEASE_ID])
GO

CREATE UNIQUE NONCLUSTERED INDEX [LCHKLI_LEASE_ID_UK]
	ON [dbo].[PIMS_LEASE_CHECKLIST_ITEM]([LEASE_ID], [LEASE_CHKLST_ITEM_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LCKITY_LEASE_CHKLST_SECTION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CHKLST_ITEM_TYPE]([LEASE_CHKLST_SECTION_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_LEASE_INITIATOR_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_INITIATOR_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_LEASE_LICENSE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_LICENSE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_LEASE_PAY_RVBL_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_PAY_RVBL_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_LEASE_PROGRAM_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_PROGRAM_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_LEASE_RESPONSIBILITY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_RESPONSIBILITY_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_LEASE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_L_FILE_NO_IDX]
	ON [dbo].[PIMS_LEASE]([L_FILE_NO])
GO

CREATE NONCLUSTERED INDEX [LEASE_PRODUCT_ID_IDX]
	ON [dbo].[PIMS_LEASE]([PRODUCT_ID])
GO

CREATE NONCLUSTERED INDEX [LEASE_PROJECT_ID_IDX]
	ON [dbo].[PIMS_LEASE]([PROJECT_ID])
GO

CREATE NONCLUSTERED INDEX [LEASE_PS_FILE_NO_IDX]
	ON [dbo].[PIMS_LEASE]([PS_FILE_NO])
GO

CREATE NONCLUSTERED INDEX [LEASE_REGION_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_TFA_FILE_NO_IDX]
	ON [dbo].[PIMS_LEASE]([TFA_FILE_NO])
GO

CREATE NONCLUSTERED INDEX [LEASE_TFA_FILE_NUMBER_IDX]
	ON [dbo].[PIMS_LEASE]([TFA_FILE_NUMBER])
GO

CREATE NONCLUSTERED INDEX [LESCON_CONSULTATION_OUTCOME_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([CONSULTATION_OUTCOME_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([CONSULTATION_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LESCON_CONSULTATION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([CONSULTATION_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LESCON_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [LESCON_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [LESCON_PERSON_ID_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [LESCON_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([PRIMARY_CONTACT_ID])
GO

CREATE NONCLUSTERED INDEX [LESDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_LEASE_DOCUMENT]([DOCUMENT_ID])
GO

CREATE NONCLUSTERED INDEX [LESDOC_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_DOCUMENT]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [LESNOT_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_NOTE]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [LESNOT_NOTE_ID_IDX]
	ON [dbo].[PIMS_LEASE_NOTE]([NOTE_ID])
GO

CREATE NONCLUSTERED INDEX [LLPURP_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_LEASE_PURPOSE]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [LLPURP_LEASE_PURPOSE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_LEASE_PURPOSE]([LEASE_PURPOSE_TYPE_CODE])
GO

CREATE UNIQUE NONCLUSTERED INDEX [LLPURP_PURPOSE_IDX]
	ON [dbo].[PIMS_LEASE_LEASE_PURPOSE]([LEASE_ID], [LEASE_PURPOSE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LSKCRQ_COMPENSATION_REQUISITION_ID_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ]([COMPENSATION_REQUISITION_ID])
GO

CREATE NONCLUSTERED INDEX [LSKCRQ_LEASE_STAKEHOLDER_ID_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ]([LEASE_STAKEHOLDER_ID])
GO

CREATE UNIQUE NONCLUSTERED INDEX [LSKCRQ_LS_TNT_COMP_REQ_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ]([LEASE_STAKEHOLDER_ID], [COMPENSATION_REQUISITION_ID])
GO

CREATE NONCLUSTERED INDEX [LSPERD_ADDL_RENT_FREQ_IDX]
	ON [dbo].[PIMS_LEASE_PERIOD]([ADDL_RENT_FREQ])
GO

CREATE NONCLUSTERED INDEX [LSPERD_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_PERIOD]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [LSPERD_LEASE_PERIOD_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_PERIOD]([LEASE_PERIOD_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LSPERD_LEASE_PMT_FREQ_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_PERIOD]([LEASE_PMT_FREQ_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LSPERD_VBL_RENT_FREQ_IDX]
	ON [dbo].[PIMS_LEASE_PERIOD]([VBL_RENT_FREQ])
GO

CREATE NONCLUSTERED INDEX [LSPYMT_LEASE_PAYMENT_CATEGORY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_PAYMENT]([LEASE_PAYMENT_CATEGORY_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LSPYMT_LEASE_PAYMENT_METHOD_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_PAYMENT]([LEASE_PAYMENT_METHOD_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LSPYMT_LEASE_PAYMENT_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_PAYMENT]([LEASE_PAYMENT_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LSPYMT_LEASE_PERIOD_ID_IDX]
	ON [dbo].[PIMS_LEASE_PAYMENT]([LEASE_PERIOD_ID])
GO

CREATE NONCLUSTERED INDEX [LSPYMT_LEASE_PMT_FREQ_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_PAYMENT]([LEASE_PMT_FREQ_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LSRNWL_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_RENEWAL]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [LSTKHL_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [LSTKHL_LEASE_STAKEHOLDER_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER]([LEASE_STAKEHOLDER_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LSTKHL_LESSOR_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER]([LESSOR_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LSTKHL_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [LSTKHL_PERSON_ID_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [LSTKHL_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER]([PRIMARY_CONTACT_ID])
GO

CREATE NONCLUSTERED INDEX [ORGADD_ADDRESS_ID_IDX]
	ON [dbo].[PIMS_ORGANIZATION_ADDRESS]([ADDRESS_ID])
GO

CREATE NONCLUSTERED INDEX [ORGADD_ADDRESS_USAGE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ORGANIZATION_ADDRESS]([ADDRESS_USAGE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ORGADD_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_ORGANIZATION_ADDRESS]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [ORG_DISTRICT_CODE_IDX]
	ON [dbo].[PIMS_ORGANIZATION]([DISTRICT_CODE])
GO

CREATE NONCLUSTERED INDEX [ORG_ORGANIZATION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ORG_ORG_IDENTIFIER_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ORGANIZATION]([ORG_IDENTIFIER_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ORG_PRNT_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_ORGANIZATION]([PRNT_ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [ORG_REGION_CODE_IDX]
	ON [dbo].[PIMS_ORGANIZATION]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [PACMRQ_COMPENSATION_REQUISITION_ID_IDX]
	ON [dbo].[PIMS_PROP_ACQ_FL_COMP_REQ]([COMPENSATION_REQUISITION_ID])
GO

CREATE NONCLUSTERED INDEX [PACMRQ_PROPERTY_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_PROP_ACQ_FL_COMP_REQ]([PROPERTY_ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [PAINVP_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [PAINVP_PERSON_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]([PIMS_PROPERTY_ACTIVITY_ID])
GO

CREATE NONCLUSTERED INDEX [PERADD_ADDRESS_ID_IDX]
	ON [dbo].[PIMS_PERSON_ADDRESS]([ADDRESS_ID])
GO

CREATE NONCLUSTERED INDEX [PERADD_ADDRESS_USAGE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PERSON_ADDRESS]([ADDRESS_USAGE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PERADD_PERSON_ID_IDX]
	ON [dbo].[PIMS_PERSON_ADDRESS]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [PERORG_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_PERSON_ORGANIZATION]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [PERORG_PERSON_ID_IDX]
	ON [dbo].[PIMS_PERSON_ORGANIZATION]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [PIHITY_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]([INTEREST_HOLDER_INTEREST_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PIHITY_PIMS_INTHLDR_PROP_INTEREST_ID_IDX]
	ON [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]([PIMS_INTHLDR_PROP_INTEREST_ID])
GO

CREATE NONCLUSTERED INDEX [PIMPRV_PROPERTY_IMPROVEMENT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY_IMPROVEMENT]([PROPERTY_IMPROVEMENT_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PIMPRV_PROPERTY_LEASE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_IMPROVEMENT]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [PLCMRQ_COMPENSATION_REQUISITION_ID_IDX]
	ON [dbo].[PIMS_PROP_LEASE_COMP_REQ]([COMPENSATION_REQUISITION_ID])
GO

CREATE NONCLUSTERED INDEX [PLCMRQ_PROPERTY_LEASE_ID_IDX]
	ON [dbo].[PIMS_PROP_LEASE_COMP_REQ]([PROPERTY_LEASE_ID])
GO

CREATE UNIQUE NONCLUSTERED INDEX [PLCMRQ_PROP_LS_COMP_REQ_IDX]
	ON [dbo].[PIMS_PROP_LEASE_COMP_REQ]([PROPERTY_LEASE_ID], [COMPENSATION_REQUISITION_ID])
GO

CREATE NONCLUSTERED INDEX [PRACDO_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]([DOCUMENT_ID])
GO

CREATE NONCLUSTERED INDEX [PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]([PIMS_PROPERTY_ACTIVITY_ID])
GO

CREATE NONCLUSTERED INDEX [PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]([PIMS_PROPERTY_ACTIVITY_ID])
GO

CREATE NONCLUSTERED INDEX [PRACMC_PERSON_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_MIN_CONTACT]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_MIN_CONTACT]([PIMS_PROPERTY_ACTIVITY_ID])
GO

CREATE NONCLUSTERED INDEX [PRACQF_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [PRACQF_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRACST_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_MGMT_ACTIVITY_SUBTYPE]([PROP_MGMT_ACTIVITY_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRJDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_PROJECT_DOCUMENT]([DOCUMENT_ID])
GO

CREATE NONCLUSTERED INDEX [PRJDOC_PROJECT_ID_IDX]
	ON [dbo].[PIMS_PROJECT_DOCUMENT]([PROJECT_ID])
GO

CREATE NONCLUSTERED INDEX [PRJNOT_NOTE_ID_IDX]
	ON [dbo].[PIMS_PROJECT_NOTE]([NOTE_ID])
GO

CREATE NONCLUSTERED INDEX [PRJNOT_PROJECT_ID_IDX]
	ON [dbo].[PIMS_PROJECT_NOTE]([PROJECT_ID])
GO

CREATE NONCLUSTERED INDEX [PRJPER_PERSON_ID_IDX]
	ON [dbo].[PIMS_PROJECT_PERSON]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [PRJPER_PROJECT_ID_IDX]
	ON [dbo].[PIMS_PROJECT_PERSON]([PROJECT_ID])
GO

CREATE NONCLUSTERED INDEX [PRJPER_PROJECT_PERSON_ROLE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROJECT_PERSON]([PROJECT_PERSON_ROLE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRJPRD_PRODUCT_ID_IDX]
	ON [dbo].[PIMS_PROJECT_PRODUCT]([PRODUCT_ID])
GO

CREATE NONCLUSTERED INDEX [PRJPRD_PROJECT_ID_IDX]
	ON [dbo].[PIMS_PROJECT_PRODUCT]([PROJECT_ID])
GO

CREATE NONCLUSTERED INDEX [PRODCT_CODE_IDX]
	ON [dbo].[PIMS_PRODUCT]([CODE])
GO

CREATE NONCLUSTERED INDEX [PROJCT_BUSINESS_FUNCTION_CODE_ID_IDX]
	ON [dbo].[PIMS_PROJECT]([BUSINESS_FUNCTION_CODE_ID])
GO

CREATE NONCLUSTERED INDEX [PROJCT_CODE_IDX]
	ON [dbo].[PIMS_PROJECT]([CODE])
GO

CREATE NONCLUSTERED INDEX [PROJCT_COST_TYPE_CODE_ID_IDX]
	ON [dbo].[PIMS_PROJECT]([COST_TYPE_CODE_ID])
GO

CREATE NONCLUSTERED INDEX [PROJCT_PROJECT_STATUS_CODE_IDX]
	ON [dbo].[PIMS_PROJECT]([PROJECT_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PROJCT_REGION_CODE_IDX]
	ON [dbo].[PIMS_PROJECT]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [PROJCT_WORK_ACTIVITY_CODE_ID_IDX]
	ON [dbo].[PIMS_PROJECT]([WORK_ACTIVITY_CODE_ID])
GO

CREATE NONCLUSTERED INDEX [PROPLS_LEASE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_LEASE]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [PROPLS_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_LEASE]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PROPOP_DESTINATION_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_OPERATION]([DESTINATION_PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PROPOP_PROPERTY_OPERATION_NO_IDX]
	ON [dbo].[PIMS_PROPERTY_OPERATION]([PROPERTY_OPERATION_NO])
GO

CREATE NONCLUSTERED INDEX [PROPOP_PROPERTY_OPERATION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY_OPERATION]([PROPERTY_OPERATION_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PROPOP_SOURCE_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_OPERATION]([SOURCE_PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PROVNC_COUNTRY_ID_IDX]
	ON [dbo].[PIMS_PROVINCE_STATE]([COUNTRY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPACT_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([PROP_MGMT_ACTIVITY_SUBTYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPACT_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([PROP_MGMT_ACTIVITY_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPACT_SERVICE_PROVIDER_ORG_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([SERVICE_PROVIDER_ORG_ID])
GO

CREATE NONCLUSTERED INDEX [PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY]([SERVICE_PROVIDER_PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [PRPCNT_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_CONTACT]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [PRPCNT_PERSON_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_CONTACT]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [PRPCNT_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_CONTACT]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPORG_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ORGANIZATION]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [PRPORG_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ORGANIZATION]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRAC_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ACTIVITY]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRAT_PROPERTY_ANOMALY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]([PROPERTY_ANOMALY_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRAT_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRPU_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_PURPOSE]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRPU_PROPERTY_PURPOSE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_PROP_PURPOSE]([PROPERTY_PURPOSE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRRT_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ROAD_TYPE]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRRT_PROPERTY_ROAD_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_PROP_ROAD_TYPE]([PROPERTY_ROAD_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTT_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_TENURE_TYPE]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRTT_PROPERTY_TENURE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_PROP_TENURE_TYPE]([PROPERTY_TENURE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_ADDRESS_ID_IDX]
	ON [dbo].[PIMS_PROPERTY]([ADDRESS_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_DISTRICT_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([DISTRICT_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_PID_IDX]
	ON [dbo].[PIMS_PROPERTY]([PID])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_PPH_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([PPH_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_PROPERTY_AREA_UNIT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([PROPERTY_AREA_UNIT_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_PROPERTY_DATA_SOURCE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([PROPERTY_DATA_SOURCE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_PROPERTY_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([PROPERTY_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_PROPERTY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([PROPERTY_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_REGION_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_SURPLUS_DECLARATION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([SURPLUS_DECLARATION_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_SURVEY_PLAN_NUMBER_IDX]
	ON [dbo].[PIMS_PROPERTY]([SURVEY_PLAN_NUMBER])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_VOLUMETRIC_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([VOLUMETRIC_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_VOLUME_UNIT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([VOLUME_UNIT_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRSCRC_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_RESEARCH_FILE]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRSCRC_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_RESEARCH_FILE]([RESEARCH_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [PRSPRP_PROPERTY_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]([PROPERTY_RESEARCH_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [PRSPRP_PROP_RESEARCH_PURPOSE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]([PROP_RESEARCH_PURPOSE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [RESPCD_CODE_IDX]
	ON [dbo].[PIMS_RESPONSIBILITY_CODE]([CODE])
GO

CREATE NONCLUSTERED INDEX [RESRCH_REQUESTOR_NAME_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE]([REQUESTOR_NAME])
GO

CREATE NONCLUSTERED INDEX [RESRCH_REQUESTOR_ORGANIZATION_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE]([REQUESTOR_ORGANIZATION])
GO

CREATE NONCLUSTERED INDEX [RESRCH_REQUEST_SOURCE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE]([REQUEST_SOURCE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [RESRCH_RESEARCH_FILE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [RFLDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]([DOCUMENT_ID])
GO

CREATE NONCLUSTERED INDEX [RFLDOC_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]([RESEARCH_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [RFLNOT_NOTE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_NOTE]([NOTE_ID])
GO

CREATE NONCLUSTERED INDEX [RFLNOT_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_NOTE]([RESEARCH_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [RFLPRJ_PROJECT_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_PROJECT]([PROJECT_ID])
GO

CREATE NONCLUSTERED INDEX [RFLPRJ_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_PROJECT]([RESEARCH_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [RGNUSR_REGION_CODE_IDX]
	ON [dbo].[PIMS_REGION_USER]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [RGNUSR_USER_ID_IDX]
	ON [dbo].[PIMS_REGION_USER]([USER_ID])
GO

CREATE NONCLUSTERED INDEX [ROLCLM_CLAIM_ID_IDX]
	ON [dbo].[PIMS_ROLE_CLAIM]([CLAIM_ID])
GO

CREATE NONCLUSTERED INDEX [ROLCLM_ROLE_ID_IDX]
	ON [dbo].[PIMS_ROLE_CLAIM]([ROLE_ID])
GO

CREATE NONCLUSTERED INDEX [ROLE_KEYCLOAK_GROUP_ID_IDX]
	ON [dbo].[PIMS_ROLE]([KEYCLOAK_GROUP_ID])
GO

CREATE NONCLUSTERED INDEX [ROLE_ROLE_UID_IDX]
	ON [dbo].[PIMS_ROLE]([ROLE_UID])
GO

CREATE NONCLUSTERED INDEX [RSFLPR_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_PURPOSE]([RESEARCH_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [RSFLPR_RESEARCH_PURPOSE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_PURPOSE]([RESEARCH_PURPOSE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [SCDPHL_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [SCDPHL_PERSON_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [SCDPHL_SECURITY_DEPOSIT_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]([SECURITY_DEPOSIT_ID])
GO

CREATE NONCLUSTERED INDEX [SCDPRH_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [SCDPRH_PERSON_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [SCDPRH_SECURITY_DEPOSIT_RETURN_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]([SECURITY_DEPOSIT_RETURN_ID])
GO

CREATE NONCLUSTERED INDEX [SDRTRN_SECURITY_DEPOSIT_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]([SECURITY_DEPOSIT_ID])
GO

CREATE NONCLUSTERED INDEX [SECDEP_LEASE_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [SECDEP_SECURITY_DEPOSIT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT]([SECURITY_DEPOSIT_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [TAKE_AREA_UNIT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_TAKE]([AREA_UNIT_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [TAKE_LAND_ACT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_TAKE]([LAND_ACT_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [TAKE_PROPERTY_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_TAKE]([PROPERTY_ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [TAKE_TAKE_SITE_CONTAM_TYPE_CODE_IDX]
	ON [dbo].[PIMS_TAKE]([TAKE_SITE_CONTAM_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [TAKE_TAKE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_TAKE]([TAKE_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [TAKE_TAKE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_TAKE]([TAKE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [USERRL_ROLE_ID_IDX]
	ON [dbo].[PIMS_USER_ROLE]([ROLE_ID])
GO

CREATE NONCLUSTERED INDEX [USERRL_USER_ID_IDX]
	ON [dbo].[PIMS_USER_ROLE]([USER_ID])
GO

CREATE NONCLUSTERED INDEX [USER_BUSINESS_IDENTIFIER_VALUE_IDX]
	ON [dbo].[PIMS_USER]([BUSINESS_IDENTIFIER_VALUE])
GO

CREATE NONCLUSTERED INDEX [USER_GUID_IDENTIFIER_VALUE_IDX]
	ON [dbo].[PIMS_USER]([GUID_IDENTIFIER_VALUE])
GO

CREATE NONCLUSTERED INDEX [USER_PERSON_ID_IDX]
	ON [dbo].[PIMS_USER]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [USER_USER_TYPE_CODE_IDX]
	ON [dbo].[PIMS_USER]([USER_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [USRORG_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_USER_ORGANIZATION]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [USRORG_ROLE_ID_IDX]
	ON [dbo].[PIMS_USER_ORGANIZATION]([ROLE_ID])
GO

CREATE NONCLUSTERED INDEX [USRORG_USER_ID_IDX]
	ON [dbo].[PIMS_USER_ORGANIZATION]([USER_ID])
GO

CREATE NONCLUSTERED INDEX [WRKACT_CODE_IDX]
	ON [dbo].[PIMS_WORK_ACTIVITY_CODE]([CODE])
GO

CREATE NONCLUSTERED INDEX [XPMTITY_EXPROPRIATION_PAYMENT_ID_IDX]
	ON [dbo].[PIMS_EXPROP_PMT_PMT_ITEM]([EXPROPRIATION_PAYMENT_ID])
GO

CREATE NONCLUSTERED INDEX [XPMTITY_PAYMENT_ITEM_TYPE_CODE_IDX]
	ON [dbo].[PIMS_EXPROP_PMT_PMT_ITEM]([PAYMENT_ITEM_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [YRFINC_CODE_IDX]
	ON [dbo].[PIMS_YEARLY_FINANCIAL_CODE]([CODE])
GO

CREATE TRIGGER [dbo].[PIMS_LRESPT_I_S_I_TR] ON PIMS_LEASE_RESPONSIBILITY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_RESPONSIBILITY_TYPE ("LEASE_RESPONSIBILITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_RESPONSIBILITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSFLPR_I_S_U_TR] ON PIMS_RESEARCH_FILE_PURPOSE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_PURPOSE_ID = deleted.RESEARCH_FILE_PURPOSE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE_PURPOSE
    set "RESEARCH_FILE_PURPOSE_ID" = inserted."RESEARCH_FILE_PURPOSE_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "RESEARCH_PURPOSE_TYPE_CODE" = inserted."RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_PURPOSE
    inner join inserted
    on (PIMS_RESEARCH_FILE_PURPOSE.RESEARCH_FILE_PURPOSE_ID = inserted.RESEARCH_FILE_PURPOSE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DISPFL_I_S_U_TR] ON PIMS_DISPOSITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_ID = deleted.DISPOSITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE
    set "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DISPOSITION_STATUS_TYPE_CODE" = inserted."DISPOSITION_STATUS_TYPE_CODE",
      "DISPOSITION_FILE_STATUS_TYPE_CODE" = inserted."DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DISPOSITION_TYPE_CODE" = inserted."DISPOSITION_TYPE_CODE",
      "DISPOSITION_FUNDING_TYPE_CODE" = inserted."DISPOSITION_FUNDING_TYPE_CODE",
      "DISPOSITION_INITIATING_DOC_TYPE_CODE" = inserted."DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DSP_PHYS_FILE_STATUS_TYPE_CODE" = inserted."DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DSP_INITIATING_BRANCH_TYPE_CODE" = inserted."DSP_INITIATING_BRANCH_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_REFERENCE" = inserted."FILE_REFERENCE",
      "OTHER_DISPOSITION_TYPE" = inserted."OTHER_DISPOSITION_TYPE",
      "OTHER_INITIATING_DOC_TYPE" = inserted."OTHER_INITIATING_DOC_TYPE",
      "ASSIGNED_DT" = inserted."ASSIGNED_DT",
      "COMPLETED_DT" = inserted."COMPLETED_DT",
      "INITIATING_DOCUMENT_DT" = inserted."INITIATING_DOCUMENT_DT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE
    inner join inserted
    on (PIMS_DISPOSITION_FILE.DISPOSITION_FILE_ID = inserted.DISPOSITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACRQOR_A_S_IUD_TR] ON PIMS_ACCESS_REQUEST_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACCESS_REQUEST_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where ACCESS_REQUEST_ORGANIZATION_ID in (select ACCESS_REQUEST_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACCESS_REQUEST_ORGANIZATION_HIST ([ACCESS_REQUEST_ORGANIZATION_ID], [ORGANIZATION_ID], [ACCESS_REQUEST_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACCESS_REQUEST_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACCESS_REQUEST_ORGANIZATION_ID], [ORGANIZATION_ID], [ACCESS_REQUEST_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ]) as [_ACCESS_REQUEST_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSTKHL_I_S_I_TR] ON PIMS_LEASE_STAKEHOLDER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_STAKEHOLDER ("LEASE_STAKEHOLDER_ID",
      "LEASE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "LESSOR_TYPE_CODE",
      "LEASE_STAKEHOLDER_TYPE_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_STAKEHOLDER_ID",
      "LEASE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "LESSOR_TYPE_CODE",
      "LEASE_STAKEHOLDER_TYPE_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSRCHS_I_S_U_TR] ON PIMS_RESEARCH_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_STATUS_TYPE_CODE = deleted.RESEARCH_FILE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE_STATUS_TYPE
    set "RESEARCH_FILE_STATUS_TYPE_CODE" = inserted."RESEARCH_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_RESEARCH_FILE_STATUS_TYPE.RESEARCH_FILE_STATUS_TYPE_CODE = inserted.RESEARCH_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPDOC_I_S_U_TR] ON PIMS_DISPOSITION_FILE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_DOCUMENT_ID = deleted.DISPOSITION_FILE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE_DOCUMENT
    set "DISPOSITION_FILE_DOCUMENT_ID" = inserted."DISPOSITION_FILE_DOCUMENT_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_DOCUMENT
    inner join inserted
    on (PIMS_DISPOSITION_FILE_DOCUMENT.DISPOSITION_FILE_DOCUMENT_ID = inserted.DISPOSITION_FILE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACRQST_A_S_IUD_TR] ON PIMS_ACCESS_REQUEST FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACCESS_REQUEST_HIST set END_DATE_HIST = @curr_date where ACCESS_REQUEST_ID in (select ACCESS_REQUEST_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACCESS_REQUEST_HIST ([ACCESS_REQUEST_ID], [USER_ID], [ROLE_ID], [USER_TYPE_CODE], [ACCESS_REQUEST_STATUS_TYPE_CODE], [REGION_CODE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACCESS_REQUEST_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACCESS_REQUEST_ID], [USER_ID], [ROLE_ID], [USER_TYPE_CODE], [ACCESS_REQUEST_STATUS_TYPE_CODE], [REGION_CODE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACCESS_REQUEST_H_ID_SEQ]) as [_ACCESS_REQUEST_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSKCRQ_I_S_I_TR] ON PIMS_LEASE_STAKEHOLDER_COMP_REQ INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_STAKEHOLDER_COMP_REQ ("LEASE_STAKEHOLDER_COMP_REQ_ID",
      "LEASE_STAKEHOLDER_ID",
      "COMPENSATION_REQUISITION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_STAKEHOLDER_COMP_REQ_ID",
      "LEASE_STAKEHOLDER_ID",
      "COMPENSATION_REQUISITION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSHPRT_I_S_U_TR] ON PIMS_RESEARCH_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_PURPOSE_TYPE_CODE = deleted.RESEARCH_PURPOSE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_PURPOSE_TYPE
    set "RESEARCH_PURPOSE_TYPE_CODE" = inserted."RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_PURPOSE_TYPE
    inner join inserted
    on (PIMS_RESEARCH_PURPOSE_TYPE.RESEARCH_PURPOSE_TYPE_CODE = inserted.RESEARCH_PURPOSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPNOT_I_S_U_TR] ON PIMS_DISPOSITION_FILE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_NOTE_ID = deleted.DISPOSITION_FILE_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE_NOTE
    set "DISPOSITION_FILE_NOTE_ID" = inserted."DISPOSITION_FILE_NOTE_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_NOTE
    inner join inserted
    on (PIMS_DISPOSITION_FILE_NOTE.DISPOSITION_FILE_NOTE_ID = inserted.DISPOSITION_FILE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ADDRSS_A_S_IUD_TR] ON PIMS_ADDRESS FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ADDRESS_HIST set END_DATE_HIST = @curr_date where ADDRESS_ID in (select ADDRESS_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ADDRESS_HIST ([ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROVINCE_STATE_ID], [COUNTRY_ID], [STREET_ADDRESS_1], [STREET_ADDRESS_2], [STREET_ADDRESS_3], [MUNICIPALITY_NAME], [POSTAL_CODE], [OTHER_COUNTRY], [LATITUDE], [LONGITUDE], [COMMENT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ADDRESS_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROVINCE_STATE_ID], [COUNTRY_ID], [STREET_ADDRESS_1], [STREET_ADDRESS_2], [STREET_ADDRESS_3], [MUNICIPALITY_NAME], [POSTAL_CODE], [OTHER_COUNTRY], [LATITUDE], [LONGITUDE], [COMMENT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ADDRESS_H_ID_SEQ]) as [_ADDRESS_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_STKHLT_I_S_I_TR] ON PIMS_LEASE_STAKEHOLDER_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_STAKEHOLDER_TYPE ("LEASE_STAKEHOLDER_TYPE_CODE",
      "DESCRIPTION",
      "IS_PAYABLE_RELATED",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_STAKEHOLDER_TYPE_CODE",
      "DESCRIPTION",
      "IS_PAYABLE_RELATED",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RESPCD_I_S_U_TR] ON PIMS_RESPONSIBILITY_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESPONSIBILITY_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESPONSIBILITY_CODE
    inner join inserted
    on (PIMS_RESPONSIBILITY_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPPRP_I_S_U_TR] ON PIMS_DISPOSITION_FILE_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_PROPERTY_ID = deleted.DISPOSITION_FILE_PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE_PROPERTY
    set "DISPOSITION_FILE_PROPERTY_ID" = inserted."DISPOSITION_FILE_PROPERTY_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_NAME" = inserted."PROPERTY_NAME",
      "LOCATION" = inserted."LOCATION",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_PROPERTY
    inner join inserted
    on (PIMS_DISPOSITION_FILE_PROPERTY.DISPOSITION_FILE_PROPERTY_ID = inserted.DISPOSITION_FILE_PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AGRMNT_A_S_IUD_TR] ON PIMS_AGREEMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_AGREEMENT_HIST set END_DATE_HIST = @curr_date where AGREEMENT_ID in (select AGREEMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_AGREEMENT_HIST ([AGREEMENT_ID], [ACQUISITION_FILE_ID], [AGREEMENT_TYPE_CODE], [AGREEMENT_STATUS_TYPE_CODE], [AGREEMENT_DATE], [COMPLETION_DATE], [TERMINATION_DATE], [COMMENCEMENT_DATE], [DEPOSIT_AMOUNT], [NO_LATER_THAN_DAYS], [PURCHASE_PRICE], [LEGAL_SURVEY_PLAN_NUM], [OFFER_DATE], [EXPIRY_TS], [SIGNED_DATE], [INSPECTION_DATE], [EXPROPRIATION_DATE], [POSSESSION_DATE], [CANCELLATION_NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _AGREEMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [AGREEMENT_ID], [ACQUISITION_FILE_ID], [AGREEMENT_TYPE_CODE], [AGREEMENT_STATUS_TYPE_CODE], [AGREEMENT_DATE], [COMPLETION_DATE], [TERMINATION_DATE], [COMMENCEMENT_DATE], [DEPOSIT_AMOUNT], [NO_LATER_THAN_DAYS], [PURCHASE_PRICE], [LEGAL_SURVEY_PLAN_NUM], [OFFER_DATE], [EXPIRY_TS], [SIGNED_DATE], [INSPECTION_DATE], [EXPROPRIATION_DATE], [POSSESSION_DATE], [CANCELLATION_NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_AGREEMENT_H_ID_SEQ]) as [_AGREEMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSSTYP_I_S_I_TR] ON PIMS_LEASE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_STATUS_TYPE ("LEASE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ROLE_I_S_U_TR] ON PIMS_ROLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ROLE_ID = deleted.ROLE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ROLE
    set "ROLE_ID" = inserted."ROLE_ID",
      "ROLE_UID" = inserted."ROLE_UID",
      "KEYCLOAK_GROUP_ID" = inserted."KEYCLOAK_GROUP_ID",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_PUBLIC" = inserted."IS_PUBLIC",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "SORT_ORDER" = inserted."SORT_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ROLE
    inner join inserted
    on (PIMS_ROLE.ROLE_ID = inserted.ROLE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPFST_I_S_U_TR] ON PIMS_DISPOSITION_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_STATUS_TYPE_CODE = deleted.DISPOSITION_FILE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE_STATUS_TYPE
    set "DISPOSITION_FILE_STATUS_TYPE_CODE" = inserted."DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_FILE_STATUS_TYPE.DISPOSITION_FILE_STATUS_TYPE_CODE = inserted.DISPOSITION_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_BIZFCN_A_S_IUD_TR] ON PIMS_BUSINESS_FUNCTION_CODE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_BUSINESS_FUNCTION_CODE_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_BUSINESS_FUNCTION_CODE_HIST ([ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _BUSINESS_FUNCTION_CODE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_BUSINESS_FUNCTION_CODE_H_ID_SEQ]) as [_BUSINESS_FUNCTION_CODE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSSRTY_I_S_I_TR] ON PIMS_LESSOR_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LESSOR_TYPE ("LESSOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LESSOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ROLCLM_I_S_U_TR] ON PIMS_ROLE_CLAIM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ROLE_CLAIM_ID = deleted.ROLE_CLAIM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ROLE_CLAIM
    set "ROLE_CLAIM_ID" = inserted."ROLE_CLAIM_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "CLAIM_ID" = inserted."CLAIM_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ROLE_CLAIM
    inner join inserted
    on (PIMS_ROLE_CLAIM.ROLE_CLAIM_ID = inserted.ROLE_CLAIM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPFTM_I_S_U_TR] ON PIMS_DISPOSITION_FILE_TEAM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_TEAM_ID = deleted.DISPOSITION_FILE_TEAM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE_TEAM
    set "DISPOSITION_FILE_TEAM_ID" = inserted."DISPOSITION_FILE_TEAM_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "DSP_FL_TEAM_PROFILE_TYPE_CODE" = inserted."DSP_FL_TEAM_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_TEAM
    inner join inserted
    on (PIMS_DISPOSITION_FILE_TEAM.DISPOSITION_FILE_TEAM_ID = inserted.DISPOSITION_FILE_TEAM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CHRTAC_A_S_IUD_TR] ON PIMS_CHART_OF_ACCOUNTS_CODE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_CHART_OF_ACCOUNTS_CODE_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_CHART_OF_ACCOUNTS_CODE_HIST ([ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _CHART_OF_ACCOUNTS_CODE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_CHART_OF_ACCOUNTS_CODE_H_ID_SEQ]) as [_CHART_OF_ACCOUNTS_CODE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LTRTYP_I_S_I_TR] ON PIMS_LETTER_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LETTER_TYPE ("LETTER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LETTER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SECDEP_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_ID = deleted.SECURITY_DEPOSIT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT
    set "SECURITY_DEPOSIT_ID" = inserted."SECURITY_DEPOSIT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE" = inserted."SECURITY_DEPOSIT_TYPE_CODE",
      "OTHER_DEPOSIT_TYPE_DESC" = inserted."OTHER_DEPOSIT_TYPE_DESC",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "AMOUNT_PAID" = inserted."AMOUNT_PAID",
      "DEPOSIT_DATE" = inserted."DEPOSIT_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT.SECURITY_DEPOSIT_ID = inserted.SECURITY_DEPOSIT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPFTY_I_S_U_TR] ON PIMS_DISPOSITION_FUNDING_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FUNDING_TYPE_CODE = deleted.DISPOSITION_FUNDING_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FUNDING_TYPE
    set "DISPOSITION_FUNDING_TYPE_CODE" = inserted."DISPOSITION_FUNDING_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FUNDING_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_FUNDING_TYPE.DISPOSITION_FUNDING_TYPE_CODE = inserted.DISPOSITION_FUNDING_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CLMTYP_A_S_IUD_TR] ON PIMS_CLAIM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_CLAIM_HIST set END_DATE_HIST = @curr_date where CLAIM_ID in (select CLAIM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_CLAIM_HIST ([CLAIM_ID], [CLAIM_UID], [KEYCLOAK_ROLE_ID], [NAME], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _CLAIM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [CLAIM_ID], [CLAIM_UID], [KEYCLOAK_ROLE_ID], [NAME], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_CLAIM_H_ID_SEQ]) as [_CLAIM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_NOTE_I_S_I_TR] ON PIMS_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_NOTE ("NOTE_ID",
      "NOTE_TXT",
      "IS_SYSTEM_GENERATED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "NOTE_ID",
      "NOTE_TXT",
      "IS_SYSTEM_GENERATED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SCDPHL_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT_HOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_HOLDER_ID = deleted.SECURITY_DEPOSIT_HOLDER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT_HOLDER
    set "SECURITY_DEPOSIT_HOLDER_ID" = inserted."SECURITY_DEPOSIT_HOLDER_ID",
      "SECURITY_DEPOSIT_ID" = inserted."SECURITY_DEPOSIT_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_HOLDER
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_HOLDER.SECURITY_DEPOSIT_HOLDER_ID = inserted.SECURITY_DEPOSIT_HOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPIDT_I_S_U_TR] ON PIMS_DISPOSITION_INITIATING_DOC_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_INITIATING_DOC_TYPE_CODE = deleted.DISPOSITION_INITIATING_DOC_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_INITIATING_DOC_TYPE
    set "DISPOSITION_INITIATING_DOC_TYPE_CODE" = inserted."DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_INITIATING_DOC_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_INITIATING_DOC_TYPE.DISPOSITION_INITIATING_DOC_TYPE_CODE = inserted.DISPOSITION_INITIATING_DOC_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CMPREQ_A_S_IUD_TR] ON PIMS_COMPENSATION_REQUISITION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_COMPENSATION_REQUISITION_HIST set END_DATE_HIST = @curr_date where COMPENSATION_REQUISITION_ID in (select COMPENSATION_REQUISITION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_COMPENSATION_REQUISITION_HIST ([COMPENSATION_REQUISITION_ID], [ACQUISITION_FILE_ID], [LEASE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [ACQUISITION_FILE_TEAM_ID], [CHART_OF_ACCOUNTS_ID], [RESPONSIBILITY_ID], [YEARLY_FINANCIAL_ID], [ALTERNATE_PROJECT_ID], [LEGACY_PAYEE], [IS_DRAFT], [IS_PAYMENT_IN_TRUST], [GST_NUMBER], [FISCAL_YEAR], [AGREEMENT_DT], [EXPROP_NOTICE_SERVED_DT], [EXPROP_VESTING_DT], [GENERATION_DT], [FINALIZED_DATE], [ADV_PMT_SERVED_DT], [SPECIAL_INSTRUCTION], [DETAILED_REMARKS], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _COMPENSATION_REQUISITION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [COMPENSATION_REQUISITION_ID], [ACQUISITION_FILE_ID], [LEASE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [ACQUISITION_FILE_TEAM_ID], [CHART_OF_ACCOUNTS_ID], [RESPONSIBILITY_ID], [YEARLY_FINANCIAL_ID], [ALTERNATE_PROJECT_ID], [LEGACY_PAYEE], [IS_DRAFT], [IS_PAYMENT_IN_TRUST], [GST_NUMBER], [FISCAL_YEAR], [AGREEMENT_DT], [EXPROP_NOTICE_SERVED_DT], [EXPROP_VESTING_DT], [GENERATION_DT], [FINALIZED_DATE], [ADV_PMT_SERVED_DT], [SPECIAL_INSTRUCTION], [DETAILED_REMARKS], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_COMPENSATION_REQUISITION_H_ID_SEQ]) as [_COMPENSATION_REQUISITION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORGIDT_I_S_I_TR] ON PIMS_ORG_IDENTIFIER_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ORG_IDENTIFIER_TYPE ("ORG_IDENTIFIER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ORG_IDENTIFIER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SDRTRN_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT_RETURN INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_RETURN_ID = deleted.SECURITY_DEPOSIT_RETURN_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT_RETURN
    set "SECURITY_DEPOSIT_RETURN_ID" = inserted."SECURITY_DEPOSIT_RETURN_ID",
      "SECURITY_DEPOSIT_ID" = inserted."SECURITY_DEPOSIT_ID",
      "TERMINATION_DATE" = inserted."TERMINATION_DATE",
      "CLAIMS_AGAINST" = inserted."CLAIMS_AGAINST",
      "RETURN_AMOUNT" = inserted."RETURN_AMOUNT",
      "RETURN_DATE" = inserted."RETURN_DATE",
      "INTEREST_PAID" = inserted."INTEREST_PAID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_RETURN
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_RETURN.SECURITY_DEPOSIT_RETURN_ID = inserted.SECURITY_DEPOSIT_RETURN_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPOFR_I_S_U_TR] ON PIMS_DISPOSITION_OFFER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_OFFER_ID = deleted.DISPOSITION_OFFER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_OFFER
    set "DISPOSITION_OFFER_ID" = inserted."DISPOSITION_OFFER_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DISPOSITION_OFFER_STATUS_TYPE_CODE" = inserted."DISPOSITION_OFFER_STATUS_TYPE_CODE",
      "OFFER_NAME" = inserted."OFFER_NAME",
      "OFFER_DT" = inserted."OFFER_DT",
      "OFFER_EXPIRY_DT" = inserted."OFFER_EXPIRY_DT",
      "OFFER_AMT" = inserted."OFFER_AMT",
      "OFFER_NOTE" = inserted."OFFER_NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_OFFER
    inner join inserted
    on (PIMS_DISPOSITION_OFFER.DISPOSITION_OFFER_ID = inserted.DISPOSITION_OFFER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CNTMTH_A_S_IUD_TR] ON PIMS_CONTACT_METHOD FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_CONTACT_METHOD_HIST set END_DATE_HIST = @curr_date where CONTACT_METHOD_ID in (select CONTACT_METHOD_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_CONTACT_METHOD_HIST ([CONTACT_METHOD_ID], [CONTACT_METHOD_TYPE_CODE], [PERSON_ID], [ORGANIZATION_ID], [CONTACT_METHOD_VALUE], [IS_PREFERRED_METHOD], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _CONTACT_METHOD_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [CONTACT_METHOD_ID], [CONTACT_METHOD_TYPE_CODE], [PERSON_ID], [ORGANIZATION_ID], [CONTACT_METHOD_VALUE], [IS_PREFERRED_METHOD], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_CONTACT_METHOD_H_ID_SEQ]) as [_CONTACT_METHOD_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORG_I_S_I_TR] ON PIMS_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ORGANIZATION ("ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME",
      "ORGANIZATION_ALIAS",
      "INCORPORATION_NUMBER",
      "WEBSITE",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME",
      "ORGANIZATION_ALIAS",
      "INCORPORATION_NUMBER",
      "WEBSITE",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SCDPRH_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT_RETURN_HOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_RETURN_HOLDER_ID = deleted.SECURITY_DEPOSIT_RETURN_HOLDER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT_RETURN_HOLDER
    set "SECURITY_DEPOSIT_RETURN_HOLDER_ID" = inserted."SECURITY_DEPOSIT_RETURN_HOLDER_ID",
      "SECURITY_DEPOSIT_RETURN_ID" = inserted."SECURITY_DEPOSIT_RETURN_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_RETURN_HOLDER
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_RETURN_HOLDER.SECURITY_DEPOSIT_RETURN_HOLDER_ID = inserted.SECURITY_DEPOSIT_RETURN_HOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPOFT_I_S_U_TR] ON PIMS_DISPOSITION_OFFER_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_OFFER_STATUS_TYPE_CODE = deleted.DISPOSITION_OFFER_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_OFFER_STATUS_TYPE
    set "DISPOSITION_OFFER_STATUS_TYPE_CODE" = inserted."DISPOSITION_OFFER_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_OFFER_STATUS_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_OFFER_STATUS_TYPE.DISPOSITION_OFFER_STATUS_TYPE_CODE = inserted.DISPOSITION_OFFER_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_COSTYP_A_S_IUD_TR] ON PIMS_COST_TYPE_CODE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_COST_TYPE_CODE_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_COST_TYPE_CODE_HIST ([ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _COST_TYPE_CODE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_COST_TYPE_CODE_H_ID_SEQ]) as [_COST_TYPE_CODE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORGADD_I_S_I_TR] ON PIMS_ORGANIZATION_ADDRESS INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ORGANIZATION_ADDRESS ("ORGANIZATION_ADDRESS_ID",
      "ORGANIZATION_ID",
      "ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ORGANIZATION_ADDRESS_ID",
      "ORGANIZATION_ID",
      "ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SECDPT_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_TYPE_CODE = deleted.SECURITY_DEPOSIT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT_TYPE
    set "SECURITY_DEPOSIT_TYPE_CODE" = inserted."SECURITY_DEPOSIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_TYPE
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_TYPE.SECURITY_DEPOSIT_TYPE_CODE = inserted.SECURITY_DEPOSIT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPPUR_I_S_U_TR] ON PIMS_DISPOSITION_PURCHASER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_PURCHASER_ID = deleted.DISPOSITION_PURCHASER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_PURCHASER
    set "DISPOSITION_PURCHASER_ID" = inserted."DISPOSITION_PURCHASER_ID",
      "DISPOSITION_SALE_ID" = inserted."DISPOSITION_SALE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_PURCHASER
    inner join inserted
    on (PIMS_DISPOSITION_PURCHASER.DISPOSITION_PURCHASER_ID = inserted.DISPOSITION_PURCHASER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CRQFIN_A_S_IUD_TR] ON PIMS_COMP_REQ_FINANCIAL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_COMP_REQ_FINANCIAL_HIST set END_DATE_HIST = @curr_date where COMP_REQ_FINANCIAL_ID in (select COMP_REQ_FINANCIAL_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_COMP_REQ_FINANCIAL_HIST ([COMP_REQ_FINANCIAL_ID], [COMPENSATION_REQUISITION_ID], [FINANCIAL_ACTIVITY_CODE_ID], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [IS_GST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _COMP_REQ_FINANCIAL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [COMP_REQ_FINANCIAL_ID], [COMPENSATION_REQUISITION_ID], [FINANCIAL_ACTIVITY_CODE_ID], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [IS_GST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_COMP_REQ_FINANCIAL_H_ID_SEQ]) as [_COMP_REQ_FINANCIAL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORGTYP_I_S_I_TR] ON PIMS_ORGANIZATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ORGANIZATION_TYPE ("ORGANIZATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ORGANIZATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_STAVBL_I_S_U_TR] ON PIMS_STATIC_VARIABLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.STATIC_VARIABLE_NAME = deleted.STATIC_VARIABLE_NAME)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_STATIC_VARIABLE
    set "STATIC_VARIABLE_NAME" = inserted."STATIC_VARIABLE_NAME",
      "STATIC_VARIABLE_VALUE" = inserted."STATIC_VARIABLE_VALUE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_STATIC_VARIABLE
    inner join inserted
    on (PIMS_STATIC_VARIABLE.STATIC_VARIABLE_NAME = inserted.STATIC_VARIABLE_NAME);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPSAL_I_S_U_TR] ON PIMS_DISPOSITION_SALE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_SALE_ID = deleted.DISPOSITION_SALE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_SALE
    set "DISPOSITION_SALE_ID" = inserted."DISPOSITION_SALE_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DSP_PURCH_AGENT_ID" = inserted."DSP_PURCH_AGENT_ID",
      "DSP_PURCH_SOLICITOR_ID" = inserted."DSP_PURCH_SOLICITOR_ID",
      "FINAL_CONDITION_REMOVAL_DT" = inserted."FINAL_CONDITION_REMOVAL_DT",
      "SALE_COMPLETION_DT" = inserted."SALE_COMPLETION_DT",
      "SALE_FISCAL_YEAR" = inserted."SALE_FISCAL_YEAR",
      "SALE_FINAL_AMT" = inserted."SALE_FINAL_AMT",
      "REALTOR_COMMISSION_AMT" = inserted."REALTOR_COMMISSION_AMT",
      "IS_GST_REQUIRED" = inserted."IS_GST_REQUIRED",
      "GST_COLLECTED_AMT" = inserted."GST_COLLECTED_AMT",
      "NET_BOOK_AMT" = inserted."NET_BOOK_AMT",
      "TOTAL_COST_AMT" = inserted."TOTAL_COST_AMT",
      "SPP_AMT" = inserted."SPP_AMT",
      "REMEDIATION_AMT" = inserted."REMEDIATION_AMT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_SALE
    inner join inserted
    on (PIMS_DISPOSITION_SALE.DISPOSITION_SALE_ID = inserted.DISPOSITION_SALE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DISPFL_A_S_IUD_TR] ON PIMS_DISPOSITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_FILE_HIST set END_DATE_HIST = @curr_date where DISPOSITION_FILE_ID in (select DISPOSITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_FILE_HIST ([DISPOSITION_FILE_ID], [DISPOSITION_STATUS_TYPE_CODE], [DISPOSITION_FILE_STATUS_TYPE_CODE], [DISPOSITION_TYPE_CODE], [DISPOSITION_FUNDING_TYPE_CODE], [DISPOSITION_INITIATING_DOC_TYPE_CODE], [DSP_PHYS_FILE_STATUS_TYPE_CODE], [DSP_INITIATING_BRANCH_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [PRODUCT_ID], [FILE_NUMBER], [FILE_NAME], [FILE_REFERENCE], [OTHER_DISPOSITION_TYPE], [OTHER_INITIATING_DOC_TYPE], [ASSIGNED_DT], [COMPLETED_DT], [INITIATING_DOCUMENT_DT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_FILE_ID], [DISPOSITION_STATUS_TYPE_CODE], [DISPOSITION_FILE_STATUS_TYPE_CODE], [DISPOSITION_TYPE_CODE], [DISPOSITION_FUNDING_TYPE_CODE], [DISPOSITION_INITIATING_DOC_TYPE_CODE], [DSP_PHYS_FILE_STATUS_TYPE_CODE], [DSP_INITIATING_BRANCH_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [PRODUCT_ID], [FILE_NUMBER], [FILE_NAME], [FILE_REFERENCE], [OTHER_DISPOSITION_TYPE], [OTHER_INITIATING_DOC_TYPE], [ASSIGNED_DT], [COMPLETED_DT], [INITIATING_DOCUMENT_DT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_FILE_H_ID_SEQ]) as [_DISPOSITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PMTITM_I_S_I_TR] ON PIMS_PAYMENT_ITEM_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PAYMENT_ITEM_TYPE ("PAYMENT_ITEM_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PAYMENT_ITEM_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SBFLIT_I_S_U_TR] ON PIMS_SUBFILE_INTEREST_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SUBFILE_INTEREST_TYPE_CODE = deleted.SUBFILE_INTEREST_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SUBFILE_INTEREST_TYPE
    set "SUBFILE_INTEREST_TYPE_CODE" = inserted."SUBFILE_INTEREST_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SUBFILE_INTEREST_TYPE
    inner join inserted
    on (PIMS_SUBFILE_INTEREST_TYPE.SUBFILE_INTEREST_TYPE_CODE = inserted.SUBFILE_INTEREST_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPSTY_I_S_U_TR] ON PIMS_DISPOSITION_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_STATUS_TYPE_CODE = deleted.DISPOSITION_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_STATUS_TYPE
    set "DISPOSITION_STATUS_TYPE_CODE" = inserted."DISPOSITION_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_STATUS_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_STATUS_TYPE.DISPOSITION_STATUS_TYPE_CODE = inserted.DISPOSITION_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCMNT_A_S_IUD_TR] ON PIMS_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DOCUMENT_HIST set END_DATE_HIST = @curr_date where DOCUMENT_ID in (select DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DOCUMENT_HIST ([DOCUMENT_ID], [DOCUMENT_TYPE_ID], [DOCUMENT_STATUS_TYPE_CODE], [FILE_NAME], [MAYAN_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DOCUMENT_EXTERNAL_ID], _DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DOCUMENT_ID], [DOCUMENT_TYPE_ID], [DOCUMENT_STATUS_TYPE_CODE], [FILE_NAME], [MAYAN_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DOCUMENT_EXTERNAL_ID], (next value for [dbo].[PIMS_DOCUMENT_H_ID_SEQ]) as [_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERSON_I_S_I_TR] ON PIMS_PERSON INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PERSON ("PERSON_ID",
      "SURNAME",
      "FIRST_NAME",
      "MIDDLE_NAMES",
      "NAME_SUFFIX",
      "PREFERRED_NAME",
      "BIRTH_DATE",
      "COMMENT",
      "ADDRESS_COMMENT",
      "USE_ORGANIZATION_ADDRESS",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PERSON_ID",
      "SURNAME",
      "FIRST_NAME",
      "MIDDLE_NAMES",
      "NAME_SUFFIX",
      "PREFERRED_NAME",
      "BIRTH_DATE",
      "COMMENT",
      "ADDRESS_COMMENT",
      "USE_ORGANIZATION_ADDRESS",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SPDCLT_I_S_U_TR] ON PIMS_SURPLUS_DECLARATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SURPLUS_DECLARATION_TYPE_CODE = deleted.SURPLUS_DECLARATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SURPLUS_DECLARATION_TYPE
    set "SURPLUS_DECLARATION_TYPE_CODE" = inserted."SURPLUS_DECLARATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SURPLUS_DECLARATION_TYPE
    inner join inserted
    on (PIMS_SURPLUS_DECLARATION_TYPE.SURPLUS_DECLARATION_TYPE_CODE = inserted.SURPLUS_DECLARATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPTYP_I_S_U_TR] ON PIMS_DISPOSITION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_TYPE_CODE = deleted.DISPOSITION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_TYPE
    set "DISPOSITION_TYPE_CODE" = inserted."DISPOSITION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_TYPE.DISPOSITION_TYPE_CODE = inserted.DISPOSITION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCQUE_A_S_IUD_TR] ON PIMS_DOCUMENT_QUEUE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DOCUMENT_QUEUE_HIST set END_DATE_HIST = @curr_date where DOCUMENT_QUEUE_ID in (select DOCUMENT_QUEUE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DOCUMENT_QUEUE_HIST ([DOCUMENT_QUEUE_ID], [DOCUMENT_ID], [DOCUMENT_QUEUE_STATUS_TYPE_CODE], [DATA_SOURCE_TYPE_CODE], [PROPERTY_ACTIVITY_DOCUMENT_ID], [ACQUISITION_FILE_DOCUMENT_ID], [RESEARCH_FILE_DOCUMENT_ID], [LEASE_DOCUMENT_ID], [DISPOSITION_FILE_DOCUMENT_ID], [FILE_NAME], [DOCUMENT_EXTERNAL_ID], [DOCUMENT_METADATA], [DOC_PROCESS_START_DT], [DOC_PROCESS_END_DT], [DOC_PROCESS_RETRIES], [MAYAN_ERROR], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DOCUMENT_QUEUE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DOCUMENT_QUEUE_ID], [DOCUMENT_ID], [DOCUMENT_QUEUE_STATUS_TYPE_CODE], [DATA_SOURCE_TYPE_CODE], [PROPERTY_ACTIVITY_DOCUMENT_ID], [ACQUISITION_FILE_DOCUMENT_ID], [RESEARCH_FILE_DOCUMENT_ID], [LEASE_DOCUMENT_ID], [DISPOSITION_FILE_DOCUMENT_ID], [FILE_NAME], [DOCUMENT_EXTERNAL_ID], [DOCUMENT_METADATA], [DOC_PROCESS_START_DT], [DOC_PROCESS_END_DT], [DOC_PROCESS_RETRIES], [MAYAN_ERROR], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DOCUMENT_QUEUE_H_ID_SEQ]) as [_DOCUMENT_QUEUE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERADD_I_S_I_TR] ON PIMS_PERSON_ADDRESS INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PERSON_ADDRESS ("PERSON_ADDRESS_ID",
      "PERSON_ID",
      "ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PERSON_ADDRESS_ID",
      "PERSON_ID",
      "ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SRVPLT_I_S_U_TR] ON PIMS_SURVEY_PLAN_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SURVEY_PLAN_TYPE_CODE = deleted.SURVEY_PLAN_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SURVEY_PLAN_TYPE
    set "SURVEY_PLAN_TYPE_CODE" = inserted."SURVEY_PLAN_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SURVEY_PLAN_TYPE
    inner join inserted
    on (PIMS_SURVEY_PLAN_TYPE.SURVEY_PLAN_TYPE_CODE = inserted.SURVEY_PLAN_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSTRCT_I_S_U_TR] ON PIMS_DISTRICT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISTRICT_CODE = deleted.DISTRICT_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISTRICT
    set "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_NAME" = inserted."DISTRICT_NAME",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISTRICT
    inner join inserted
    on (PIMS_DISTRICT.DISTRICT_CODE = inserted.DISTRICT_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCTYP_A_S_IUD_TR] ON PIMS_DOCUMENT_TYP FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DOCUMENT_TYP_HIST set END_DATE_HIST = @curr_date where DOCUMENT_TYPE_ID in (select DOCUMENT_TYPE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DOCUMENT_TYP_HIST ([DOCUMENT_TYPE_ID], [MAYAN_ID], [DOCUMENT_TYPE], [DOCUMENT_TYPE_DESCRIPTION], [DOCUMENT_TYPE_DEFINITION], [IS_DISABLED], [DISPLAY_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DOCUMENT_TYP_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DOCUMENT_TYPE_ID], [MAYAN_ID], [DOCUMENT_TYPE], [DOCUMENT_TYPE_DESCRIPTION], [DOCUMENT_TYPE_DEFINITION], [IS_DISABLED], [DISPLAY_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DOCUMENT_TYP_H_ID_SEQ]) as [_DOCUMENT_TYP_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERORG_I_S_I_TR] ON PIMS_PERSON_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PERSON_ORGANIZATION ("PERSON_ORGANIZATION_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PERSON_ORGANIZATION_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_TAKE_I_S_U_TR] ON PIMS_TAKE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_ID = deleted.TAKE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE
    set "TAKE_ID" = inserted."TAKE_ID",
      "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "TAKE_TYPE_CODE" = inserted."TAKE_TYPE_CODE",
      "TAKE_STATUS_TYPE_CODE" = inserted."TAKE_STATUS_TYPE_CODE",
      "TAKE_SITE_CONTAM_TYPE_CODE" = inserted."TAKE_SITE_CONTAM_TYPE_CODE",
      "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "LAND_ACT_TYPE_CODE" = inserted."LAND_ACT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "COMPLETION_DT" = inserted."COMPLETION_DT",
      "IS_NEW_HIGHWAY_DEDICATION" = inserted."IS_NEW_HIGHWAY_DEDICATION",
      "NEW_HIGHWAY_DEDICATION_AREA" = inserted."NEW_HIGHWAY_DEDICATION_AREA",
      "IS_ACQUIRED_FOR_INVENTORY" = inserted."IS_ACQUIRED_FOR_INVENTORY",
      "IS_NEW_INTEREST_IN_SRW" = inserted."IS_NEW_INTEREST_IN_SRW",
      "STATUTORY_RIGHT_OF_WAY_AREA" = inserted."STATUTORY_RIGHT_OF_WAY_AREA",
      "SRW_END_DT" = inserted."SRW_END_DT",
      "IS_NEW_LICENSE_TO_CONSTRUCT" = inserted."IS_NEW_LICENSE_TO_CONSTRUCT",
      "LICENSE_TO_CONSTRUCT_AREA" = inserted."LICENSE_TO_CONSTRUCT_AREA",
      "LTC_END_DT" = inserted."LTC_END_DT",
      "IS_NEW_LAND_ACT" = inserted."IS_NEW_LAND_ACT",
      "LAND_ACT_AREA" = inserted."LAND_ACT_AREA",
      "LAND_ACT_END_DT" = inserted."LAND_ACT_END_DT",
      "IS_THERE_SURPLUS" = inserted."IS_THERE_SURPLUS",
      "SURPLUS_AREA" = inserted."SURPLUS_AREA",
      "IS_ACTIVE_LEASE" = inserted."IS_ACTIVE_LEASE",
      "ACTIVE_LEASE_AREA" = inserted."ACTIVE_LEASE_AREA",
      "ACTIVE_LEASE_END_DT" = inserted."ACTIVE_LEASE_END_DT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE
    inner join inserted
    on (PIMS_TAKE.TAKE_ID = inserted.TAKE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCMNT_I_S_U_TR] ON PIMS_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_ID = deleted.DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT
    set "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "DOCUMENT_TYPE_ID" = inserted."DOCUMENT_TYPE_ID",
      "DOCUMENT_STATUS_TYPE_CODE" = inserted."DOCUMENT_STATUS_TYPE_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "MAYAN_ID" = inserted."MAYAN_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "DOCUMENT_EXTERNAL_ID" = inserted."DOCUMENT_EXTERNAL_ID"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT
    inner join inserted
    on (PIMS_DOCUMENT.DOCUMENT_ID = inserted.DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPAPP_A_S_IUD_TR] ON PIMS_DISPOSITION_APPRAISAL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_APPRAISAL_HIST set END_DATE_HIST = @curr_date where DISPOSITION_APPRAISAL_ID in (select DISPOSITION_APPRAISAL_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_APPRAISAL_HIST ([DISPOSITION_APPRAISAL_ID], [DISPOSITION_FILE_ID], [APPRAISED_AMT], [APPRAISAL_DT], [BCA_VALUE_AMT], [BCA_ROLL_YEAR], [LIST_PRICE_AMT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_APPRAISAL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_APPRAISAL_ID], [DISPOSITION_FILE_ID], [APPRAISED_AMT], [APPRAISAL_DT], [BCA_VALUE_AMT], [BCA_ROLL_YEAR], [LIST_PRICE_AMT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_APPRAISAL_H_ID_SEQ]) as [_DISPOSITION_APPRAISAL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PPHSTT_I_S_I_TR] ON PIMS_PPH_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PPH_STATUS_TYPE ("PPH_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PPH_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_TKCONT_I_S_U_TR] ON PIMS_TAKE_SITE_CONTAM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_SITE_CONTAM_TYPE_CODE = deleted.TAKE_SITE_CONTAM_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE_SITE_CONTAM_TYPE
    set "TAKE_SITE_CONTAM_TYPE_CODE" = inserted."TAKE_SITE_CONTAM_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE_SITE_CONTAM_TYPE
    inner join inserted
    on (PIMS_TAKE_SITE_CONTAM_TYPE.TAKE_SITE_CONTAM_TYPE_CODE = inserted.TAKE_SITE_CONTAM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DCCTSB_I_S_U_TR] ON PIMS_DOCUMENT_CATEGORY_SUBTYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_CATEGORY_SUBTYPE_ID = deleted.DOCUMENT_CATEGORY_SUBTYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_CATEGORY_SUBTYPE
    set "DOCUMENT_CATEGORY_SUBTYPE_ID" = inserted."DOCUMENT_CATEGORY_SUBTYPE_ID",
      "DOCUMENT_CATEGORY_TYPE_CODE" = inserted."DOCUMENT_CATEGORY_TYPE_CODE",
      "DOCUMENT_TYPE_ID" = inserted."DOCUMENT_TYPE_ID",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_CATEGORY_SUBTYPE
    inner join inserted
    on (PIMS_DOCUMENT_CATEGORY_SUBTYPE.DOCUMENT_CATEGORY_SUBTYPE_ID = inserted.DOCUMENT_CATEGORY_SUBTYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPCKI_A_S_IUD_TR] ON PIMS_DISPOSITION_CHECKLIST_ITEM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_CHECKLIST_ITEM_HIST set END_DATE_HIST = @curr_date where DISPOSITION_CHECKLIST_ITEM_ID in (select DISPOSITION_CHECKLIST_ITEM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_CHECKLIST_ITEM_HIST ([DISPOSITION_CHECKLIST_ITEM_ID], [DISPOSITION_FILE_ID], [DSP_CHKLST_ITEM_TYPE_CODE], [CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_CHECKLIST_ITEM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_CHECKLIST_ITEM_ID], [DISPOSITION_FILE_ID], [DSP_CHKLST_ITEM_TYPE_CODE], [CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM_H_ID_SEQ]) as [_DISPOSITION_CHECKLIST_ITEM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRSPRP_I_S_I_TR] ON PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE ("PRF_PROP_RESEARCH_PURPOSE_ID",
      "PROPERTY_RESEARCH_FILE_ID",
      "PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PRF_PROP_RESEARCH_PURPOSE_ID",
      "PROPERTY_RESEARCH_FILE_ID",
      "PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_TKSTST_I_S_U_TR] ON PIMS_TAKE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_STATUS_TYPE_CODE = deleted.TAKE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE_STATUS_TYPE
    set "TAKE_STATUS_TYPE_CODE" = inserted."TAKE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE_STATUS_TYPE
    inner join inserted
    on (PIMS_TAKE_STATUS_TYPE.TAKE_STATUS_TYPE_CODE = inserted.TAKE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCCAT_I_S_U_TR] ON PIMS_DOCUMENT_CATEGORY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_CATEGORY_TYPE_CODE = deleted.DOCUMENT_CATEGORY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_CATEGORY_TYPE
    set "DOCUMENT_CATEGORY_TYPE_CODE" = inserted."DOCUMENT_CATEGORY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_CATEGORY_TYPE
    inner join inserted
    on (PIMS_DOCUMENT_CATEGORY_TYPE.DOCUMENT_CATEGORY_TYPE_CODE = inserted.DOCUMENT_CATEGORY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPDOC_A_S_IUD_TR] ON PIMS_DISPOSITION_FILE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_FILE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where DISPOSITION_FILE_DOCUMENT_ID in (select DISPOSITION_FILE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_FILE_DOCUMENT_HIST ([DISPOSITION_FILE_DOCUMENT_ID], [DISPOSITION_FILE_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_FILE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_FILE_DOCUMENT_ID], [DISPOSITION_FILE_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT_H_ID_SEQ]) as [_DISPOSITION_FILE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRODCT_I_S_I_TR] ON PIMS_PRODUCT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PRODUCT ("ID",
      "CODE",
      "DESCRIPTION",
      "START_DATE",
      "COST_ESTIMATE",
      "COST_ESTIMATE_DATE",
      "OBJECTIVE",
      "SCOPE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "CODE",
      "DESCRIPTION",
      "START_DATE",
      "COST_ESTIMATE",
      "COST_ESTIMATE_DATE",
      "OBJECTIVE",
      "SCOPE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_TKTYPE_I_S_U_TR] ON PIMS_TAKE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_TYPE_CODE = deleted.TAKE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE_TYPE
    set "TAKE_TYPE_CODE" = inserted."TAKE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE_TYPE
    inner join inserted
    on (PIMS_TAKE_TYPE.TAKE_TYPE_CODE = inserted.TAKE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCFMT_I_S_U_TR] ON PIMS_DOCUMENT_FORMAT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_FORMAT_TYPE_CODE = deleted.DOCUMENT_FORMAT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_FORMAT_TYPE
    set "DOCUMENT_FORMAT_TYPE_CODE" = inserted."DOCUMENT_FORMAT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_FORMAT_TYPE
    inner join inserted
    on (PIMS_DOCUMENT_FORMAT_TYPE.DOCUMENT_FORMAT_TYPE_CODE = inserted.DOCUMENT_FORMAT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPFTM_A_S_IUD_TR] ON PIMS_DISPOSITION_FILE_TEAM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_FILE_TEAM_HIST set END_DATE_HIST = @curr_date where DISPOSITION_FILE_TEAM_ID in (select DISPOSITION_FILE_TEAM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_FILE_TEAM_HIST ([DISPOSITION_FILE_TEAM_ID], [DISPOSITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [DSP_FL_TEAM_PROFILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_FILE_TEAM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_FILE_TEAM_ID], [DISPOSITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [DSP_FL_TEAM_PROFILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_FILE_TEAM_H_ID_SEQ]) as [_DISPOSITION_FILE_TEAM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PROJCT_I_S_I_TR] ON PIMS_PROJECT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT ("ID",
      "PROJECT_STATUS_TYPE_CODE",
      "BUSINESS_FUNCTION_CODE_ID",
      "COST_TYPE_CODE_ID",
      "WORK_ACTIVITY_CODE_ID",
      "REGION_CODE",
      "CODE",
      "DESCRIPTION",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "PROJECT_STATUS_TYPE_CODE",
      "BUSINESS_FUNCTION_CODE_ID",
      "COST_TYPE_CODE_ID",
      "WORK_ACTIVITY_CODE_ID",
      "REGION_CODE",
      "CODE",
      "DESCRIPTION",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_TENNTX_I_S_U_TR] ON PIMS_TENANT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TENANT_ID = deleted.TENANT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TENANT
    set "TENANT_ID" = inserted."TENANT_ID",
      "CODE" = inserted."CODE",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "SETTINGS" = inserted."SETTINGS",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TENANT
    inner join inserted
    on (PIMS_TENANT.TENANT_ID = inserted.TENANT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCQUE_I_S_U_TR] ON PIMS_DOCUMENT_QUEUE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_QUEUE_ID = deleted.DOCUMENT_QUEUE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_QUEUE
    set "DOCUMENT_QUEUE_ID" = inserted."DOCUMENT_QUEUE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "DOCUMENT_QUEUE_STATUS_TYPE_CODE" = inserted."DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DATA_SOURCE_TYPE_CODE" = inserted."DATA_SOURCE_TYPE_CODE",
      "PROPERTY_ACTIVITY_DOCUMENT_ID" = inserted."PROPERTY_ACTIVITY_DOCUMENT_ID",
      "ACQUISITION_FILE_DOCUMENT_ID" = inserted."ACQUISITION_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_DOCUMENT_ID" = inserted."RESEARCH_FILE_DOCUMENT_ID",
      "LEASE_DOCUMENT_ID" = inserted."LEASE_DOCUMENT_ID",
      "DISPOSITION_FILE_DOCUMENT_ID" = inserted."DISPOSITION_FILE_DOCUMENT_ID",
      "FILE_NAME" = inserted."FILE_NAME",
      "DOCUMENT_EXTERNAL_ID" = inserted."DOCUMENT_EXTERNAL_ID",
      "DOCUMENT_METADATA" = inserted."DOCUMENT_METADATA",
      "DOC_PROCESS_START_DT" = inserted."DOC_PROCESS_START_DT",
      "DOC_PROCESS_END_DT" = inserted."DOC_PROCESS_END_DT",
      "DOC_PROCESS_RETRIES" = inserted."DOC_PROCESS_RETRIES",
      "MAYAN_ERROR" = inserted."MAYAN_ERROR",
      "DOCUMENT" = inserted."DOCUMENT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_QUEUE
    inner join inserted
    on (PIMS_DOCUMENT_QUEUE.DOCUMENT_QUEUE_ID = inserted.DOCUMENT_QUEUE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPNOT_A_S_IUD_TR] ON PIMS_DISPOSITION_FILE_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_FILE_NOTE_HIST set END_DATE_HIST = @curr_date where DISPOSITION_FILE_NOTE_ID in (select DISPOSITION_FILE_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_FILE_NOTE_HIST ([DISPOSITION_FILE_NOTE_ID], [DISPOSITION_FILE_ID], [NOTE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_FILE_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_FILE_NOTE_ID], [DISPOSITION_FILE_ID], [NOTE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_FILE_NOTE_H_ID_SEQ]) as [_DISPOSITION_FILE_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRJDOC_I_S_I_TR] ON PIMS_PROJECT_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_DOCUMENT ("PROJECT_DOCUMENT_ID",
      "PROJECT_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROJECT_DOCUMENT_ID",
      "PROJECT_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USER_I_S_U_TR] ON PIMS_USER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.USER_ID = deleted.USER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_USER
    set "USER_ID" = inserted."USER_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "USER_TYPE_CODE" = inserted."USER_TYPE_CODE",
      "BUSINESS_IDENTIFIER_VALUE" = inserted."BUSINESS_IDENTIFIER_VALUE",
      "GUID_IDENTIFIER_VALUE" = inserted."GUID_IDENTIFIER_VALUE",
      "POSITION" = inserted."POSITION",
      "NOTE" = inserted."NOTE",
      "LAST_LOGIN" = inserted."LAST_LOGIN",
      "APPROVED_BY_ID" = inserted."APPROVED_BY_ID",
      "ISSUE_DATE" = inserted."ISSUE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER
    inner join inserted
    on (PIMS_USER.USER_ID = inserted.USER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCQST_I_S_U_TR] ON PIMS_DOCUMENT_QUEUE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_QUEUE_STATUS_TYPE_CODE = deleted.DOCUMENT_QUEUE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_QUEUE_STATUS_TYPE
    set "DOCUMENT_QUEUE_STATUS_TYPE_CODE" = inserted."DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_QUEUE_STATUS_TYPE
    inner join inserted
    on (PIMS_DOCUMENT_QUEUE_STATUS_TYPE.DOCUMENT_QUEUE_STATUS_TYPE_CODE = inserted.DOCUMENT_QUEUE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPOFR_A_S_IUD_TR] ON PIMS_DISPOSITION_OFFER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_OFFER_HIST set END_DATE_HIST = @curr_date where DISPOSITION_OFFER_ID in (select DISPOSITION_OFFER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_OFFER_HIST ([DISPOSITION_OFFER_ID], [DISPOSITION_FILE_ID], [DISPOSITION_OFFER_STATUS_TYPE_CODE], [OFFER_NAME], [OFFER_DT], [OFFER_EXPIRY_DT], [OFFER_AMT], [OFFER_NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_OFFER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_OFFER_ID], [DISPOSITION_FILE_ID], [DISPOSITION_OFFER_STATUS_TYPE_CODE], [OFFER_NAME], [OFFER_DT], [OFFER_EXPIRY_DT], [OFFER_AMT], [OFFER_NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_OFFER_H_ID_SEQ]) as [_DISPOSITION_OFFER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRJNOT_I_S_I_TR] ON PIMS_PROJECT_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_NOTE ("PROJECT_NOTE_ID",
      "PROJECT_ID",
      "NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROJECT_NOTE_ID",
      "PROJECT_ID",
      "NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USRORG_I_S_U_TR] ON PIMS_USER_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.USER_ORGANIZATION_ID = deleted.USER_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_USER_ORGANIZATION
    set "USER_ORGANIZATION_ID" = inserted."USER_ORGANIZATION_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER_ORGANIZATION
    inner join inserted
    on (PIMS_USER_ORGANIZATION.USER_ORGANIZATION_ID = inserted.USER_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCSTY_I_S_U_TR] ON PIMS_DOCUMENT_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_STATUS_TYPE_CODE = deleted.DOCUMENT_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_STATUS_TYPE
    set "DOCUMENT_STATUS_TYPE_CODE" = inserted."DOCUMENT_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_STATUS_TYPE
    inner join inserted
    on (PIMS_DOCUMENT_STATUS_TYPE.DOCUMENT_STATUS_TYPE_CODE = inserted.DOCUMENT_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPPAG_A_S_IUD_TR] ON PIMS_DSP_PURCH_AGENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DSP_PURCH_AGENT_HIST set END_DATE_HIST = @curr_date where DSP_PURCH_AGENT_ID in (select DSP_PURCH_AGENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DSP_PURCH_AGENT_HIST ([DSP_PURCH_AGENT_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DSP_PURCH_AGENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DSP_PURCH_AGENT_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DSP_PURCH_AGENT_H_ID_SEQ]) as [_DSP_PURCH_AGENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRJPER_I_S_I_TR] ON PIMS_PROJECT_PERSON INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_PERSON ("PROJECT_PERSON_ID",
      "PROJECT_ID",
      "PERSON_ID",
      "PROJECT_PERSON_ROLE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROJECT_PERSON_ID",
      "PROJECT_ID",
      "PERSON_ID",
      "PROJECT_PERSON_ROLE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USERRL_I_S_U_TR] ON PIMS_USER_ROLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.USER_ROLE_ID = deleted.USER_ROLE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_USER_ROLE
    set "USER_ROLE_ID" = inserted."USER_ROLE_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER_ROLE
    inner join inserted
    on (PIMS_USER_ROLE.USER_ROLE_ID = inserted.USER_ROLE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCTYP_I_S_U_TR] ON PIMS_DOCUMENT_TYP INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_TYPE_ID = deleted.DOCUMENT_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_TYP
    set "DOCUMENT_TYPE_ID" = inserted."DOCUMENT_TYPE_ID",
      "MAYAN_ID" = inserted."MAYAN_ID",
      "DOCUMENT_TYPE" = inserted."DOCUMENT_TYPE",
      "DOCUMENT_TYPE_DESCRIPTION" = inserted."DOCUMENT_TYPE_DESCRIPTION",
      "DOCUMENT_TYPE_DEFINITION" = inserted."DOCUMENT_TYPE_DEFINITION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_TYP
    inner join inserted
    on (PIMS_DOCUMENT_TYP.DOCUMENT_TYPE_ID = inserted.DOCUMENT_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPPRP_A_S_IUD_TR] ON PIMS_DISPOSITION_FILE_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_FILE_PROPERTY_HIST set END_DATE_HIST = @curr_date where DISPOSITION_FILE_PROPERTY_ID in (select DISPOSITION_FILE_PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_FILE_PROPERTY_HIST ([DISPOSITION_FILE_PROPERTY_ID], [DISPOSITION_FILE_ID], [PROPERTY_ID], [PROPERTY_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_FILE_PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_FILE_PROPERTY_ID], [DISPOSITION_FILE_ID], [PROPERTY_ID], [PROPERTY_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_FILE_PROPERTY_H_ID_SEQ]) as [_DISPOSITION_FILE_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRLT_I_S_I_TR] ON PIMS_PROJECT_PERSON_ROLE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_PERSON_ROLE_TYPE ("PROJECT_PERSON_ROLE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_PERSON_ROLE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USERTY_I_S_U_TR] ON PIMS_USER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.USER_TYPE_CODE = deleted.USER_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_USER_TYPE
    set "USER_TYPE_CODE" = inserted."USER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER_TYPE
    inner join inserted
    on (PIMS_USER_TYPE.USER_TYPE_CODE = inserted.USER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPCIT_I_S_U_TR] ON PIMS_DSP_CHKLST_ITEM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_CHKLST_ITEM_TYPE_CODE = deleted.DSP_CHKLST_ITEM_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_CHKLST_ITEM_TYPE
    set "DSP_CHKLST_ITEM_TYPE_CODE" = inserted."DSP_CHKLST_ITEM_TYPE_CODE",
      "DSP_CHKLST_SECTION_TYPE_CODE" = inserted."DSP_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "HINT" = inserted."HINT",
      "IS_REQUIRED" = inserted."IS_REQUIRED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_CHKLST_ITEM_TYPE
    inner join inserted
    on (PIMS_DSP_CHKLST_ITEM_TYPE.DSP_CHKLST_ITEM_TYPE_CODE = inserted.DSP_CHKLST_ITEM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPPSL_A_S_IUD_TR] ON PIMS_DSP_PURCH_SOLICITOR FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DSP_PURCH_SOLICITOR_HIST set END_DATE_HIST = @curr_date where DSP_PURCH_SOLICITOR_ID in (select DSP_PURCH_SOLICITOR_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DSP_PURCH_SOLICITOR_HIST ([DSP_PURCH_SOLICITOR_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DSP_PURCH_SOLICITOR_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DSP_PURCH_SOLICITOR_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DSP_PURCH_SOLICITOR_H_ID_SEQ]) as [_DSP_PURCH_SOLICITOR_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRJPRD_I_S_I_TR] ON PIMS_PROJECT_PRODUCT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_PRODUCT ("PROJECT_PRODUCT_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID")
    select "PROJECT_PRODUCT_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_VOLUTY_I_S_U_TR] ON PIMS_VOLUME_UNIT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.VOLUME_UNIT_TYPE_CODE = deleted.VOLUME_UNIT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_VOLUME_UNIT_TYPE
    set "VOLUME_UNIT_TYPE_CODE" = inserted."VOLUME_UNIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_VOLUME_UNIT_TYPE
    inner join inserted
    on (PIMS_VOLUME_UNIT_TYPE.VOLUME_UNIT_TYPE_CODE = inserted.VOLUME_UNIT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPSCT_I_S_U_TR] ON PIMS_DSP_CHKLST_SECTION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_CHKLST_SECTION_TYPE_CODE = deleted.DSP_CHKLST_SECTION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_CHKLST_SECTION_TYPE
    set "DSP_CHKLST_SECTION_TYPE_CODE" = inserted."DSP_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_CHKLST_SECTION_TYPE
    inner join inserted
    on (PIMS_DSP_CHKLST_SECTION_TYPE.DSP_CHKLST_SECTION_TYPE_CODE = inserted.DSP_CHKLST_SECTION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPPUR_A_S_IUD_TR] ON PIMS_DISPOSITION_PURCHASER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_PURCHASER_HIST set END_DATE_HIST = @curr_date where DISPOSITION_PURCHASER_ID in (select DISPOSITION_PURCHASER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_PURCHASER_HIST ([DISPOSITION_PURCHASER_ID], [DISPOSITION_SALE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_PURCHASER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_PURCHASER_ID], [DISPOSITION_SALE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_PURCHASER_H_ID_SEQ]) as [_DISPOSITION_PURCHASER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRJSTY_I_S_I_TR] ON PIMS_PROJECT_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_STATUS_TYPE ("PROJECT_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRVOLT_I_S_U_TR] ON PIMS_VOLUMETRIC_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.VOLUMETRIC_TYPE_CODE = deleted.VOLUMETRIC_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_VOLUMETRIC_TYPE
    set "VOLUMETRIC_TYPE_CODE" = inserted."VOLUMETRIC_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_VOLUMETRIC_TYPE
    inner join inserted
    on (PIMS_VOLUMETRIC_TYPE.VOLUMETRIC_TYPE_CODE = inserted.VOLUMETRIC_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPFTP_I_S_U_TR] ON PIMS_DSP_FL_TEAM_PROFILE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_FL_TEAM_PROFILE_TYPE_CODE = deleted.DSP_FL_TEAM_PROFILE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_FL_TEAM_PROFILE_TYPE
    set "DSP_FL_TEAM_PROFILE_TYPE_CODE" = inserted."DSP_FL_TEAM_PROFILE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_FL_TEAM_PROFILE_TYPE
    inner join inserted
    on (PIMS_DSP_FL_TEAM_PROFILE_TYPE.DSP_FL_TEAM_PROFILE_TYPE_CODE = inserted.DSP_FL_TEAM_PROFILE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPSAL_A_S_IUD_TR] ON PIMS_DISPOSITION_SALE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_SALE_HIST set END_DATE_HIST = @curr_date where DISPOSITION_SALE_ID in (select DISPOSITION_SALE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_SALE_HIST ([DISPOSITION_SALE_ID], [DISPOSITION_FILE_ID], [DSP_PURCH_AGENT_ID], [DSP_PURCH_SOLICITOR_ID], [FINAL_CONDITION_REMOVAL_DT], [SALE_COMPLETION_DT], [SALE_FISCAL_YEAR], [SALE_FINAL_AMT], [REALTOR_COMMISSION_AMT], [IS_GST_REQUIRED], [GST_COLLECTED_AMT], [NET_BOOK_AMT], [TOTAL_COST_AMT], [SPP_AMT], [REMEDIATION_AMT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_SALE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_SALE_ID], [DISPOSITION_FILE_ID], [DSP_PURCH_AGENT_ID], [DSP_PURCH_SOLICITOR_ID], [FINAL_CONDITION_REMOVAL_DT], [SALE_COMPLETION_DT], [SALE_FISCAL_YEAR], [SALE_FINAL_AMT], [REALTOR_COMMISSION_AMT], [IS_GST_REQUIRED], [GST_COLLECTED_AMT], [NET_BOOK_AMT], [TOTAL_COST_AMT], [SPP_AMT], [REMEDIATION_AMT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_SALE_H_ID_SEQ]) as [_DISPOSITION_SALE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PACMRQ_I_S_I_TR] ON PIMS_PROP_ACQ_FL_COMP_REQ INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_ACQ_FL_COMP_REQ ("PROP_ACQ_FL_COMP_REQ_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "COMPENSATION_REQUISITION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_ACQ_FL_COMP_REQ_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "COMPENSATION_REQUISITION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_WRKACT_I_S_U_TR] ON PIMS_WORK_ACTIVITY_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_WORK_ACTIVITY_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_WORK_ACTIVITY_CODE
    inner join inserted
    on (PIMS_WORK_ACTIVITY_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPIBT_I_S_U_TR] ON PIMS_DSP_INITIATING_BRANCH_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_INITIATING_BRANCH_TYPE_CODE = deleted.DSP_INITIATING_BRANCH_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_INITIATING_BRANCH_TYPE
    set "DSP_INITIATING_BRANCH_TYPE_CODE" = inserted."DSP_INITIATING_BRANCH_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_INITIATING_BRANCH_TYPE
    inner join inserted
    on (PIMS_DSP_INITIATING_BRANCH_TYPE.DSP_INITIATING_BRANCH_TYPE_CODE = inserted.DSP_INITIATING_BRANCH_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_EXPPMT_A_S_IUD_TR] ON PIMS_EXPROPRIATION_PAYMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_EXPROPRIATION_PAYMENT_HIST set END_DATE_HIST = @curr_date where EXPROPRIATION_PAYMENT_ID in (select EXPROPRIATION_PAYMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_EXPROPRIATION_PAYMENT_HIST ([EXPROPRIATION_PAYMENT_ID], [ACQUISITION_FILE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [EXPROPRIATING_AUTHORITY], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _EXPROPRIATION_PAYMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [EXPROPRIATION_PAYMENT_ID], [ACQUISITION_FILE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [EXPROPRIATING_AUTHORITY], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_EXPROPRIATION_PAYMENT_H_ID_SEQ]) as [_EXPROPRIATION_PAYMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PAINVP_I_S_I_TR] ON PIMS_PROP_ACT_INVOLVED_PARTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_ACT_INVOLVED_PARTY ("PROP_ACT_INVOLVED_PARTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_ACT_INVOLVED_PARTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_YRFINC_I_S_U_TR] ON PIMS_YEARLY_FINANCIAL_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_YEARLY_FINANCIAL_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_YEARLY_FINANCIAL_CODE
    inner join inserted
    on (PIMS_YEARLY_FINANCIAL_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPPFS_I_S_U_TR] ON PIMS_DSP_PHYS_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_PHYS_FILE_STATUS_TYPE_CODE = deleted.DSP_PHYS_FILE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_PHYS_FILE_STATUS_TYPE
    set "DSP_PHYS_FILE_STATUS_TYPE_CODE" = inserted."DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_PHYS_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_DSP_PHYS_FILE_STATUS_TYPE.DSP_PHYS_FILE_STATUS_TYPE_CODE = inserted.DSP_PHYS_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_FINACT_A_S_IUD_TR] ON PIMS_FINANCIAL_ACTIVITY_CODE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_FINANCIAL_ACTIVITY_CODE_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_FINANCIAL_ACTIVITY_CODE_HIST ([ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _FINANCIAL_ACTIVITY_CODE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE_H_ID_SEQ]) as [_FINANCIAL_ACTIVITY_CODE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACMC_I_S_I_TR] ON PIMS_PROP_ACT_MIN_CONTACT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_ACT_MIN_CONTACT ("PROP_ACT_MIN_CONTACT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_ACT_MIN_CONTACT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACRQST_I_S_I_TR] ON PIMS_ACCESS_REQUEST INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACCESS_REQUEST ("ACCESS_REQUEST_ID",
      "USER_ID",
      "ROLE_ID",
      "USER_TYPE_CODE",
      "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "REGION_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACCESS_REQUEST_ID",
      "USER_ID",
      "ROLE_ID",
      "USER_TYPE_CODE",
      "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "REGION_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPPAG_I_S_U_TR] ON PIMS_DSP_PURCH_AGENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_PURCH_AGENT_ID = deleted.DSP_PURCH_AGENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_PURCH_AGENT
    set "DSP_PURCH_AGENT_ID" = inserted."DSP_PURCH_AGENT_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_PURCH_AGENT
    inner join inserted
    on (PIMS_DSP_PURCH_AGENT.DSP_PURCH_AGENT_ID = inserted.DSP_PURCH_AGENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_H120CT_A_S_IUD_TR] ON PIMS_H120_CATEGORY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_H120_CATEGORY_HIST set END_DATE_HIST = @curr_date where H120_CATEGORY_ID in (select H120_CATEGORY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_H120_CATEGORY_HIST ([H120_CATEGORY_ID], [FINANCIAL_ACTIVITY_ID], [WORK_ACTIVITY_ID], [COST_TYPE_ID], [H120_CATEGORY_NO], [DESCRIPTION], [EXPIRY_DATE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _H120_CATEGORY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [H120_CATEGORY_ID], [FINANCIAL_ACTIVITY_ID], [WORK_ACTIVITY_ID], [COST_TYPE_ID], [H120_CATEGORY_NO], [DESCRIPTION], [EXPIRY_DATE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_H120_CATEGORY_H_ID_SEQ]) as [_H120_CATEGORY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PIHITY_I_S_I_TR] ON PIMS_PROP_INTHLDR_INTEREST_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_INTHLDR_INTEREST_TYPE ("PROP_INTHLDR_INTEREST_TYPE_ID",
      "PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_INTHLDR_INTEREST_TYPE_ID",
      "PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACRQOR_I_S_I_TR] ON PIMS_ACCESS_REQUEST_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACCESS_REQUEST_ORGANIZATION ("ACCESS_REQUEST_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "ACCESS_REQUEST_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACCESS_REQUEST_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "ACCESS_REQUEST_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPPSL_I_S_U_TR] ON PIMS_DSP_PURCH_SOLICITOR INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_PURCH_SOLICITOR_ID = deleted.DSP_PURCH_SOLICITOR_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_PURCH_SOLICITOR
    set "DSP_PURCH_SOLICITOR_ID" = inserted."DSP_PURCH_SOLICITOR_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_PURCH_SOLICITOR
    inner join inserted
    on (PIMS_DSP_PURCH_SOLICITOR.DSP_PURCH_SOLICITOR_ID = inserted.DSP_PURCH_SOLICITOR_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_HFLNUM_A_S_IUD_TR] ON PIMS_HISTORICAL_FILE_NUMBER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_HISTORICAL_FILE_NUMBER_HIST set END_DATE_HIST = @curr_date where HISTORICAL_FILE_NUMBER_ID in (select HISTORICAL_FILE_NUMBER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_HISTORICAL_FILE_NUMBER_HIST ([HISTORICAL_FILE_NUMBER_ID], [PROPERTY_ID], [DATA_SOURCE_TYPE_CODE], [HISTORICAL_FILE_NUMBER_TYPE_CODE], [HISTORICAL_FILE_NUMBER], [OTHER_HIST_FILE_NUMBER_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _HISTORICAL_FILE_NUMBER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [HISTORICAL_FILE_NUMBER_ID], [PROPERTY_ID], [DATA_SOURCE_TYPE_CODE], [HISTORICAL_FILE_NUMBER_TYPE_CODE], [HISTORICAL_FILE_NUMBER], [OTHER_HIST_FILE_NUMBER_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_HISTORICAL_FILE_NUMBER_H_ID_SEQ]) as [_HISTORICAL_FILE_NUMBER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PLCMRQ_I_S_I_TR] ON PIMS_PROP_LEASE_COMP_REQ INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_LEASE_COMP_REQ ("PROP_LEASE_COMP_REQ_ID",
      "PROPERTY_LEASE_ID",
      "COMPENSATION_REQUISITION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_LEASE_COMP_REQ_ID",
      "PROPERTY_LEASE_ID",
      "COMPENSATION_REQUISITION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ARQSTT_I_S_I_TR] ON PIMS_ACCESS_REQUEST_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACCESS_REQUEST_STATUS_TYPE ("ACCESS_REQUEST_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_XPMTITY_I_S_U_TR] ON PIMS_EXPROP_PMT_PMT_ITEM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.EXPROP_PMT_PMT_ITEM_ID = deleted.EXPROP_PMT_PMT_ITEM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_EXPROP_PMT_PMT_ITEM
    set "EXPROP_PMT_PMT_ITEM_ID" = inserted."EXPROP_PMT_PMT_ITEM_ID",
      "EXPROPRIATION_PAYMENT_ID" = inserted."EXPROPRIATION_PAYMENT_ID",
      "PAYMENT_ITEM_TYPE_CODE" = inserted."PAYMENT_ITEM_TYPE_CODE",
      "IS_GST_REQUIRED" = inserted."IS_GST_REQUIRED",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "TAX_AMT" = inserted."TAX_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_EXPROP_PMT_PMT_ITEM
    inner join inserted
    on (PIMS_EXPROP_PMT_PMT_ITEM.EXPROP_PMT_PMT_ITEM_ID = inserted.EXPROP_PMT_PMT_ITEM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_IHPRIN_A_S_IUD_TR] ON PIMS_INTHLDR_PROP_INTEREST FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_INTHLDR_PROP_INTEREST_HIST set END_DATE_HIST = @curr_date where PIMS_INTHLDR_PROP_INTEREST_ID in (select PIMS_INTHLDR_PROP_INTEREST_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_INTHLDR_PROP_INTEREST_HIST ([PIMS_INTHLDR_PROP_INTEREST_ID], [INTEREST_HOLDER_ID], [PROPERTY_ACQUISITION_FILE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _INTHLDR_PROP_INTEREST_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PIMS_INTHLDR_PROP_INTEREST_ID], [INTEREST_HOLDER_ID], [PROPERTY_ACQUISITION_FILE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_INTHLDR_PROP_INTEREST_H_ID_SEQ]) as [_INTHLDR_PROP_INTEREST_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PACSTY_I_S_I_TR] ON PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE ("PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQCIT_I_S_I_TR] ON PIMS_ACQ_CHKLST_ITEM_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_CHKLST_ITEM_TYPE ("ACQ_CHKLST_ITEM_TYPE_CODE",
      "ACQ_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "HINT",
      "IS_REQUIRED",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_CHKLST_ITEM_TYPE_CODE",
      "ACQ_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "HINT",
      "IS_REQUIRED",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_EXPPMT_I_S_U_TR] ON PIMS_EXPROPRIATION_PAYMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.EXPROPRIATION_PAYMENT_ID = deleted.EXPROPRIATION_PAYMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_EXPROPRIATION_PAYMENT
    set "EXPROPRIATION_PAYMENT_ID" = inserted."EXPROPRIATION_PAYMENT_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "EXPROPRIATING_AUTHORITY" = inserted."EXPROPRIATING_AUTHORITY",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_EXPROPRIATION_PAYMENT
    inner join inserted
    on (PIMS_EXPROPRIATION_PAYMENT.EXPROPRIATION_PAYMENT_ID = inserted.EXPROPRIATION_PAYMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_INSRNC_A_S_IUD_TR] ON PIMS_INSURANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_INSURANCE_HIST set END_DATE_HIST = @curr_date where INSURANCE_ID in (select INSURANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_INSURANCE_HIST ([INSURANCE_ID], [LEASE_ID], [INSURANCE_TYPE_CODE], [OTHER_INSURANCE_TYPE], [COVERAGE_DESCRIPTION], [COVERAGE_LIMIT], [IS_INSURANCE_IN_PLACE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _INSURANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [INSURANCE_ID], [LEASE_ID], [INSURANCE_TYPE_CODE], [OTHER_INSURANCE_TYPE], [COVERAGE_DESCRIPTION], [COVERAGE_LIMIT], [IS_INSURANCE_IN_PLACE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_INSURANCE_H_ID_SEQ]) as [_INSURANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACST_I_S_I_TR] ON PIMS_PROP_MGMT_ACTIVITY_SUBTYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_MGMT_ACTIVITY_SUBTYPE ("PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AQCSCT_I_S_I_TR] ON PIMS_ACQ_CHKLST_SECTION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_CHKLST_SECTION_TYPE ("ACQ_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_FNCTYP_I_S_U_TR] ON PIMS_FENCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.FENCE_TYPE_CODE = deleted.FENCE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_FENCE_TYPE
    set "FENCE_TYPE_CODE" = inserted."FENCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_FENCE_TYPE
    inner join inserted
    on (PIMS_FENCE_TYPE.FENCE_TYPE_CODE = inserted.FENCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_INTHLD_A_S_IUD_TR] ON PIMS_INTEREST_HOLDER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_INTEREST_HOLDER_HIST set END_DATE_HIST = @curr_date where INTEREST_HOLDER_ID in (select INTEREST_HOLDER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_INTEREST_HOLDER_HIST ([INTEREST_HOLDER_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [INTEREST_HOLDER_TYPE_CODE], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _INTEREST_HOLDER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [INTEREST_HOLDER_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [INTEREST_HOLDER_TYPE_CODE], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_INTEREST_HOLDER_H_ID_SEQ]) as [_INTEREST_HOLDER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACTY_I_S_I_TR] ON PIMS_PROP_MGMT_ACTIVITY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_MGMT_ACTIVITY_TYPE ("PROP_MGMT_ACTIVITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AQTPPT_I_S_I_TR] ON PIMS_ACQ_FL_TEAM_PROFILE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_FL_TEAM_PROFILE_TYPE ("ACQ_FL_TEAM_PROFILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_FL_TEAM_PROFILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_FINACT_I_S_U_TR] ON PIMS_FINANCIAL_ACTIVITY_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_FINANCIAL_ACTIVITY_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_FINANCIAL_ACTIVITY_CODE
    inner join inserted
    on (PIMS_FINANCIAL_ACTIVITY_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LCHKLI_A_S_IUD_TR] ON PIMS_LEASE_CHECKLIST_ITEM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_CHECKLIST_ITEM_HIST set END_DATE_HIST = @curr_date where LEASE_CHECKLIST_ITEM_ID in (select LEASE_CHECKLIST_ITEM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_CHECKLIST_ITEM_HIST ([LEASE_CHECKLIST_ITEM_ID], [LEASE_ID], [LEASE_CHKLST_ITEM_TYPE_CODE], [CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_CHECKLIST_ITEM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_CHECKLIST_ITEM_ID], [LEASE_ID], [LEASE_CHKLST_ITEM_TYPE_CODE], [CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_CHECKLIST_ITEM_H_ID_SEQ]) as [_LEASE_CHECKLIST_ITEM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRAC_I_S_I_TR] ON PIMS_PROP_PROP_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_ACTIVITY ("PROP_PROP_ACTIVITY_ID",
      "PROPERTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_PROP_ACTIVITY_ID",
      "PROPERTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQPFS_I_S_I_TR] ON PIMS_ACQ_PHYS_FILE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_PHYS_FILE_STATUS_TYPE ("ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_FRMTYP_I_S_U_TR] ON PIMS_FORM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.FORM_TYPE_CODE = deleted.FORM_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_FORM_TYPE
    set "FORM_TYPE_CODE" = inserted."FORM_TYPE_CODE",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_FORM_TYPE
    inner join inserted
    on (PIMS_FORM_TYPE.FORM_TYPE_CODE = inserted.FORM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LEASE_A_S_IUD_TR] ON PIMS_LEASE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_HIST set END_DATE_HIST = @curr_date where LEASE_ID in (select LEASE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_HIST ([LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [PRODUCT_ID], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_DESCRIPTION], [LEASE_NOTES], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [RETURN_NOTES], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [TERMINATION_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [INSPECTION_NOTES], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CANCELLATION_REASON], [TERMINATION_REASON], [IS_PUBLIC_BENEFIT], [IS_FINANCIAL_GAIN], [FEE_DETERMINATION_NOTE], [PRIMARY_ARBITRATION_CITY], [TOTAL_ALLOWABLE_COMPENSATION], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [PRODUCT_ID], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_DESCRIPTION], [LEASE_NOTES], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [RETURN_NOTES], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [TERMINATION_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [INSPECTION_NOTES], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CANCELLATION_REASON], [TERMINATION_REASON], [IS_PUBLIC_BENEFIT], [IS_FINANCIAL_GAIN], [FEE_DETERMINATION_NOTE], [PRIMARY_ARBITRATION_CITY], [TOTAL_ALLOWABLE_COMPENSATION], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_H_ID_SEQ]) as [_LEASE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRAT_I_S_I_TR] ON PIMS_PROP_PROP_ANOMALY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_ANOMALY_TYPE ("PROP_PROP_ANOMALY_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ANOMALY_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID")
    select "PROP_PROP_ANOMALY_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ANOMALY_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQCKI_I_S_I_TR] ON PIMS_ACQUISITION_CHECKLIST_ITEM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_CHECKLIST_ITEM ("ACQUISITION_CHECKLIST_ITEM_ID",
      "ACQUISITION_FILE_ID",
      "ACQ_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_CHECKLIST_ITEM_ID",
      "ACQUISITION_FILE_ID",
      "ACQ_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_H120CT_I_S_U_TR] ON PIMS_H120_CATEGORY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.H120_CATEGORY_ID = deleted.H120_CATEGORY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_H120_CATEGORY
    set "H120_CATEGORY_ID" = inserted."H120_CATEGORY_ID",
      "FINANCIAL_ACTIVITY_ID" = inserted."FINANCIAL_ACTIVITY_ID",
      "WORK_ACTIVITY_ID" = inserted."WORK_ACTIVITY_ID",
      "COST_TYPE_ID" = inserted."COST_TYPE_ID",
      "H120_CATEGORY_NO" = inserted."H120_CATEGORY_NO",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_H120_CATEGORY
    inner join inserted
    on (PIMS_H120_CATEGORY.H120_CATEGORY_ID = inserted.H120_CATEGORY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LESCON_A_S_IUD_TR] ON PIMS_LEASE_CONSULTATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_CONSULTATION_HIST set END_DATE_HIST = @curr_date where LEASE_CONSULTATION_ID in (select LEASE_CONSULTATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_CONSULTATION_HIST ([LEASE_CONSULTATION_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [CONSULTATION_TYPE_CODE], [CONSULTATION_STATUS_TYPE_CODE], [CONSULTATION_OUTCOME_TYPE_CODE], [OTHER_DESCRIPTION], [REQUESTED_ON], [IS_RESPONSE_RECEIVED], [RESPONSE_RECEIVED_DATE], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_CONSULTATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_CONSULTATION_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [CONSULTATION_TYPE_CODE], [CONSULTATION_STATUS_TYPE_CODE], [CONSULTATION_OUTCOME_TYPE_CODE], [OTHER_DESCRIPTION], [REQUESTED_ON], [IS_RESPONSE_RECEIVED], [RESPONSE_RECEIVED_DATE], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_CONSULTATION_H_ID_SEQ]) as [_LEASE_CONSULTATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRPU_I_S_I_TR] ON PIMS_PROP_PROP_PURPOSE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_PURPOSE ("PROP_PROP_PURPOSE_ID",
      "PROPERTY_ID",
      "PROPERTY_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_PROP_PURPOSE_ID",
      "PROPERTY_ID",
      "PROPERTY_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_I_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE ("ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "SUBFILE_INTEREST_TYPE_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUM_SUFFIX",
      "LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "OTHER_SUBFILE_INTEREST_TYPE",
      "EST_COMPLETION_DT",
      "POSSESSION_DT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "SUBFILE_INTEREST_TYPE_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUM_SUFFIX",
      "LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "OTHER_SUBFILE_INTEREST_TYPE",
      "EST_COMPLETION_DT",
      "POSSESSION_DT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_HFLNUM_I_S_U_TR] ON PIMS_HISTORICAL_FILE_NUMBER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.HISTORICAL_FILE_NUMBER_ID = deleted.HISTORICAL_FILE_NUMBER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_HISTORICAL_FILE_NUMBER
    set "HISTORICAL_FILE_NUMBER_ID" = inserted."HISTORICAL_FILE_NUMBER_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "DATA_SOURCE_TYPE_CODE" = inserted."DATA_SOURCE_TYPE_CODE",
      "HISTORICAL_FILE_NUMBER_TYPE_CODE" = inserted."HISTORICAL_FILE_NUMBER_TYPE_CODE",
      "HISTORICAL_FILE_NUMBER" = inserted."HISTORICAL_FILE_NUMBER",
      "OTHER_HIST_FILE_NUMBER_TYPE_CODE" = inserted."OTHER_HIST_FILE_NUMBER_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_HISTORICAL_FILE_NUMBER
    inner join inserted
    on (PIMS_HISTORICAL_FILE_NUMBER.HISTORICAL_FILE_NUMBER_ID = inserted.HISTORICAL_FILE_NUMBER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LESDOC_A_S_IUD_TR] ON PIMS_LEASE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where LEASE_DOCUMENT_ID in (select LEASE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_DOCUMENT_HIST ([LEASE_DOCUMENT_ID], [LEASE_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_DOCUMENT_ID], [LEASE_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_DOCUMENT_H_ID_SEQ]) as [_LEASE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRRT_I_S_I_TR] ON PIMS_PROP_PROP_ROAD_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_ROAD_TYPE ("PROP_PROP_ROAD_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ROAD_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_PROP_ROAD_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ROAD_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQDOC_I_S_I_TR] ON PIMS_ACQUISITION_FILE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE_DOCUMENT ("ACQUISITION_FILE_DOCUMENT_ID",
      "ACQUISITION_FILE_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_DOCUMENT_ID",
      "ACQUISITION_FILE_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_HFLNMT_I_S_U_TR] ON PIMS_HISTORICAL_FILE_NUMBER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.HISTORICAL_FILE_NUMBER_TYPE_CODE = deleted.HISTORICAL_FILE_NUMBER_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_HISTORICAL_FILE_NUMBER_TYPE
    set "HISTORICAL_FILE_NUMBER_TYPE_CODE" = inserted."HISTORICAL_FILE_NUMBER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_HISTORICAL_FILE_NUMBER_TYPE
    inner join inserted
    on (PIMS_HISTORICAL_FILE_NUMBER_TYPE.HISTORICAL_FILE_NUMBER_TYPE_CODE = inserted.HISTORICAL_FILE_NUMBER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LESNOT_A_S_IUD_TR] ON PIMS_LEASE_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_NOTE_HIST set END_DATE_HIST = @curr_date where LEASE_NOTE_ID in (select LEASE_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_NOTE_HIST ([LEASE_NOTE_ID], [LEASE_ID], [NOTE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_NOTE_ID], [LEASE_ID], [NOTE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_NOTE_H_ID_SEQ]) as [_LEASE_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRTT_I_S_I_TR] ON PIMS_PROP_PROP_TENURE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_TENURE_TYPE ("PROP_PROP_TENURE_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_TENURE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_PROP_TENURE_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_TENURE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQFRM_I_S_I_TR] ON PIMS_ACQUISITION_FILE_FORM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE_FORM ("ACQUISITION_FILE_FORM_ID",
      "ACQUISITION_FILE_ID",
      "FORM_TYPE_CODE",
      "FORM_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_FORM_ID",
      "ACQUISITION_FILE_ID",
      "FORM_TYPE_CODE",
      "FORM_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_INSRNC_I_S_U_TR] ON PIMS_INSURANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.INSURANCE_ID = deleted.INSURANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INSURANCE
    set "INSURANCE_ID" = inserted."INSURANCE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "INSURANCE_TYPE_CODE" = inserted."INSURANCE_TYPE_CODE",
      "OTHER_INSURANCE_TYPE" = inserted."OTHER_INSURANCE_TYPE",
      "COVERAGE_DESCRIPTION" = inserted."COVERAGE_DESCRIPTION",
      "COVERAGE_LIMIT" = inserted."COVERAGE_LIMIT",
      "IS_INSURANCE_IN_PLACE" = inserted."IS_INSURANCE_IN_PLACE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INSURANCE
    inner join inserted
    on (PIMS_INSURANCE.INSURANCE_ID = inserted.INSURANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LLPURP_A_S_IUD_TR] ON PIMS_LEASE_LEASE_PURPOSE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_LEASE_PURPOSE_HIST set END_DATE_HIST = @curr_date where LEASE_LEASE_PURPOSE_ID in (select LEASE_LEASE_PURPOSE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_LEASE_PURPOSE_HIST ([LEASE_LEASE_PURPOSE_ID], [LEASE_ID], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PURPOSE_OTHER_DESC], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_LEASE_PURPOSE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_LEASE_PURPOSE_ID], [LEASE_ID], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PURPOSE_OTHER_DESC], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_LEASE_PURPOSE_H_ID_SEQ]) as [_LEASE_LEASE_PURPOSE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RRESPT_I_S_I_TR] ON PIMS_PROP_RESEARCH_PURPOSE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_RESEARCH_PURPOSE_TYPE ("PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQNOT_I_S_I_TR] ON PIMS_ACQUISITION_FILE_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE_NOTE ("ACQUISITION_FILE_NOTE_ID",
      "NOTE_ID",
      "ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_NOTE_ID",
      "NOTE_ID",
      "ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_INSPYT_I_S_U_TR] ON PIMS_INSURANCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.INSURANCE_TYPE_CODE = deleted.INSURANCE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INSURANCE_TYPE
    set "INSURANCE_TYPE_CODE" = inserted."INSURANCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INSURANCE_TYPE
    inner join inserted
    on (PIMS_INSURANCE_TYPE.INSURANCE_TYPE_CODE = inserted.INSURANCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSKCRQ_A_S_IUD_TR] ON PIMS_LEASE_STAKEHOLDER_COMP_REQ FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST set END_DATE_HIST = @curr_date where LEASE_STAKEHOLDER_COMP_REQ_ID in (select LEASE_STAKEHOLDER_COMP_REQ_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST ([LEASE_STAKEHOLDER_COMP_REQ_ID], [LEASE_STAKEHOLDER_ID], [COMPENSATION_REQUISITION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_STAKEHOLDER_COMP_REQ_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_STAKEHOLDER_COMP_REQ_ID], [LEASE_STAKEHOLDER_ID], [COMPENSATION_REQUISITION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ_H_ID_SEQ]) as [_LEASE_STAKEHOLDER_COMP_REQ_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_I_TR] ON PIMS_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY ("PROPERTY_ID",
      "PROPERTY_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "NOTES",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_RETIRED",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE",
      "BAND_NAME",
      "RESERVE_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ID",
      "PROPERTY_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "NOTES",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_RETIRED",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE",
      "BAND_NAME",
      "RESERVE_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQFST_I_S_I_TR] ON PIMS_ACQUISITION_FILE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE_STATUS_TYPE ("ACQUISITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_INTHLD_I_S_U_TR] ON PIMS_INTEREST_HOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.INTEREST_HOLDER_ID = deleted.INTEREST_HOLDER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INTEREST_HOLDER
    set "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "INTEREST_HOLDER_TYPE_CODE" = inserted."INTEREST_HOLDER_TYPE_CODE",
      "COMMENT" = inserted."COMMENT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INTEREST_HOLDER
    inner join inserted
    on (PIMS_INTEREST_HOLDER.INTEREST_HOLDER_ID = inserted.INTEREST_HOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPERD_A_S_IUD_TR] ON PIMS_LEASE_PERIOD FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_PERIOD_HIST set END_DATE_HIST = @curr_date where LEASE_PERIOD_ID in (select LEASE_PERIOD_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_PERIOD_HIST ([LEASE_PERIOD_ID], [LEASE_ID], [LEASE_PERIOD_STATUS_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [ADDL_RENT_FREQ], [VBL_RENT_FREQ], [PERIOD_START_DATE], [PERIOD_EXPIRY_DATE], [PERIOD_RENEWAL_DATE], [PAYMENT_AMOUNT], [PAYMENT_DUE_DATE], [PAYMENT_NOTE], [IS_GST_ELIGIBLE], [GST_AMOUNT], [IS_PERIOD_EXERCISED], [IS_VARIABLE_PAYMENT], [IS_FLEXIBLE_DURATION], [ADDL_RENT_AGREED_PMT], [ADDL_RENT_GST_AMOUNT], [IS_ADDL_RENT_SUBJECT_TO_GST], [VBL_RENT_AGREED_PMT], [VBL_RENT_GST_AMOUNT], [IS_VBL_RENT_SUBJECT_TO_GST], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_PERIOD_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_PERIOD_ID], [LEASE_ID], [LEASE_PERIOD_STATUS_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [ADDL_RENT_FREQ], [VBL_RENT_FREQ], [PERIOD_START_DATE], [PERIOD_EXPIRY_DATE], [PERIOD_RENEWAL_DATE], [PAYMENT_AMOUNT], [PAYMENT_DUE_DATE], [PAYMENT_NOTE], [IS_GST_ELIGIBLE], [GST_AMOUNT], [IS_PERIOD_EXERCISED], [IS_VARIABLE_PAYMENT], [IS_FLEXIBLE_DURATION], [ADDL_RENT_AGREED_PMT], [ADDL_RENT_GST_AMOUNT], [IS_ADDL_RENT_SUBJECT_TO_GST], [VBL_RENT_AGREED_PMT], [VBL_RENT_GST_AMOUNT], [IS_VBL_RENT_SUBJECT_TO_GST], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_PERIOD_H_ID_SEQ]) as [_LEASE_PERIOD_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACQF_I_S_I_TR] ON PIMS_PROPERTY_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACQUISITION_FILE ("PROPERTY_ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_NAME",
      "LOCATION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_NAME",
      "LOCATION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQNTM_I_S_I_TR] ON PIMS_ACQUISITION_FILE_TEAM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE_TEAM ("ACQUISITION_FILE_TEAM_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "ACQ_FL_TEAM_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_TEAM_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "ACQ_FL_TEAM_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_IHINTT_I_S_U_TR] ON PIMS_INTEREST_HOLDER_INTEREST_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.INTEREST_HOLDER_INTEREST_TYPE_CODE = deleted.INTEREST_HOLDER_INTEREST_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INTEREST_HOLDER_INTEREST_TYPE
    set "INTEREST_HOLDER_INTEREST_TYPE_CODE" = inserted."INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INTEREST_HOLDER_INTEREST_TYPE
    inner join inserted
    on (PIMS_INTEREST_HOLDER_INTEREST_TYPE.INTEREST_HOLDER_INTEREST_TYPE_CODE = inserted.INTEREST_HOLDER_INTEREST_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPYMT_A_S_IUD_TR] ON PIMS_LEASE_PAYMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_PAYMENT_HIST set END_DATE_HIST = @curr_date where LEASE_PAYMENT_ID in (select LEASE_PAYMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_PAYMENT_HIST ([LEASE_PAYMENT_ID], [LEASE_PERIOD_ID], [LEASE_PAYMENT_METHOD_TYPE_CODE], [LEASE_PAYMENT_STATUS_TYPE_CODE], [LEASE_PAYMENT_CATEGORY_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [PAYMENT_RECEIVED_DATE], [PAYMENT_AMOUNT_PRE_TAX], [PAYMENT_AMOUNT_PST], [PAYMENT_AMOUNT_GST], [PAYMENT_AMOUNT_TOTAL], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_PAYMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_PAYMENT_ID], [LEASE_PERIOD_ID], [LEASE_PAYMENT_METHOD_TYPE_CODE], [LEASE_PAYMENT_STATUS_TYPE_CODE], [LEASE_PAYMENT_CATEGORY_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [PAYMENT_RECEIVED_DATE], [PAYMENT_AMOUNT_PRE_TAX], [PAYMENT_AMOUNT_PST], [PAYMENT_AMOUNT_GST], [PAYMENT_AMOUNT_TOTAL], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_PAYMENT_H_ID_SEQ]) as [_LEASE_PAYMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPACT_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY ("PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID",
      "REQUEST_ADDED_DT",
      "COMPLETION_DT",
      "DESCRIPTION",
      "REQUEST_SOURCE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID",
      "REQUEST_ADDED_DT",
      "COMPLETION_DT",
      "DESCRIPTION",
      "REQUEST_SOURCE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQFTY_I_S_I_TR] ON PIMS_ACQUISITION_FUNDING_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FUNDING_TYPE ("ACQUISITION_FUNDING_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQUISITION_FUNDING_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_INHLDT_I_S_U_TR] ON PIMS_INTEREST_HOLDER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.INTEREST_HOLDER_TYPE_CODE = deleted.INTEREST_HOLDER_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INTEREST_HOLDER_TYPE
    set "INTEREST_HOLDER_TYPE_CODE" = inserted."INTEREST_HOLDER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INTEREST_HOLDER_TYPE
    inner join inserted
    on (PIMS_INTEREST_HOLDER_TYPE.INTEREST_HOLDER_TYPE_CODE = inserted.INTEREST_HOLDER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSRNWL_A_S_IUD_TR] ON PIMS_LEASE_RENEWAL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_RENEWAL_HIST set END_DATE_HIST = @curr_date where LEASE_RENEWAL_ID in (select LEASE_RENEWAL_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_RENEWAL_HIST ([LEASE_RENEWAL_ID], [LEASE_ID], [COMMENCEMENT_DT], [EXPIRY_DT], [IS_EXERCISED], [RENEWAL_NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_RENEWAL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_RENEWAL_ID], [LEASE_ID], [COMMENCEMENT_DT], [EXPIRY_DT], [IS_EXERCISED], [RENEWAL_NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_RENEWAL_H_ID_SEQ]) as [_LEASE_RENEWAL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACDO_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY_DOCUMENT ("PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_I_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_OWNER ("ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID",
      "ADDRESS_ID",
      "IS_PRIMARY_OWNER",
      "IS_ORGANIZATION",
      "LAST_NAME_AND_CORP_NAME",
      "OTHER_NAME",
      "GIVEN_NAME",
      "INCORPORATION_NUMBER",
      "REGISTRATION_NUMBER",
      "CONTACT_EMAIL_ADDR",
      "CONTACT_PHONE_NUM",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID",
      "ADDRESS_ID",
      "IS_PRIMARY_OWNER",
      "IS_ORGANIZATION",
      "LAST_NAME_AND_CORP_NAME",
      "OTHER_NAME",
      "GIVEN_NAME",
      "INCORPORATION_NUMBER",
      "REGISTRATION_NUMBER",
      "CONTACT_EMAIL_ADDR",
      "CONTACT_PHONE_NUM",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_IHPRIN_I_S_U_TR] ON PIMS_INTHLDR_PROP_INTEREST INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PIMS_INTHLDR_PROP_INTEREST_ID = deleted.PIMS_INTHLDR_PROP_INTEREST_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INTHLDR_PROP_INTEREST
    set "PIMS_INTHLDR_PROP_INTEREST_ID" = inserted."PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INTHLDR_PROP_INTEREST
    inner join inserted
    on (PIMS_INTHLDR_PROP_INTEREST.PIMS_INTHLDR_PROP_INTEREST_ID = inserted.PIMS_INTHLDR_PROP_INTEREST_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSTKHL_A_S_IUD_TR] ON PIMS_LEASE_STAKEHOLDER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_STAKEHOLDER_HIST set END_DATE_HIST = @curr_date where LEASE_STAKEHOLDER_ID in (select LEASE_STAKEHOLDER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_STAKEHOLDER_HIST ([LEASE_STAKEHOLDER_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [LESSOR_TYPE_CODE], [LEASE_STAKEHOLDER_TYPE_CODE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_STAKEHOLDER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_STAKEHOLDER_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [LESSOR_TYPE_CODE], [LEASE_STAKEHOLDER_TYPE_CODE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_STAKEHOLDER_H_ID_SEQ]) as [_LEASE_STAKEHOLDER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACIN_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY_INVOICE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY_INVOICE ("PROPERTY_ACTIVITY_INVOICE_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "INVOICE_DT",
      "INVOICE_NUM",
      "DESCRIPTION",
      "PRETAX_AMT",
      "GST_AMT",
      "PST_AMT",
      "TOTAL_AMT",
      "IS_PST_REQUIRED",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACTIVITY_INVOICE_ID",
      "PIMS_PROPERTY_ACTIVITY_ID",
      "INVOICE_DT",
      "INVOICE_NUM",
      "DESCRIPTION",
      "PRETAX_AMT",
      "GST_AMT",
      "PST_AMT",
      "TOTAL_AMT",
      "IS_PST_REQUIRED",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQTYP_I_S_I_TR] ON PIMS_ACQUISITION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_TYPE ("ACQUISITION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQUISITION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LNDATY_I_S_U_TR] ON PIMS_LAND_ACT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LAND_ACT_TYPE_CODE = deleted.LAND_ACT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LAND_ACT_TYPE
    set "LAND_ACT_TYPE_CODE" = inserted."LAND_ACT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LAND_ACT_TYPE
    inner join inserted
    on (PIMS_LAND_ACT_TYPE.LAND_ACT_TYPE_CODE = inserted.LAND_ACT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_NOTE_A_S_IUD_TR] ON PIMS_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_NOTE_HIST set END_DATE_HIST = @curr_date where NOTE_ID in (select NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_NOTE_HIST ([NOTE_ID], [NOTE_TXT], [IS_SYSTEM_GENERATED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [NOTE_ID], [NOTE_TXT], [IS_SYSTEM_GENERATED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_NOTE_H_ID_SEQ]) as [_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRANOM_I_S_I_TR] ON PIMS_PROPERTY_ANOMALY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ANOMALY_TYPE ("PROPERTY_ANOMALY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_ANOMALY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ADDRSS_I_S_I_TR] ON PIMS_ADDRESS INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ADDRESS ("ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "STREET_ADDRESS_1",
      "STREET_ADDRESS_2",
      "STREET_ADDRESS_3",
      "MUNICIPALITY_NAME",
      "POSTAL_CODE",
      "OTHER_COUNTRY",
      "LATITUDE",
      "LONGITUDE",
      "COMMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "STREET_ADDRESS_1",
      "STREET_ADDRESS_2",
      "STREET_ADDRESS_3",
      "MUNICIPALITY_NAME",
      "POSTAL_CODE",
      "OTHER_COUNTRY",
      "LATITUDE",
      "LONGITUDE",
      "COMMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LNSRVT_I_S_U_TR] ON PIMS_LAND_SURVEYOR_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LAND_SURVEYOR_TYPE_CODE = deleted.LAND_SURVEYOR_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LAND_SURVEYOR_TYPE
    set "LAND_SURVEYOR_TYPE_CODE" = inserted."LAND_SURVEYOR_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LAND_SURVEYOR_TYPE
    inner join inserted
    on (PIMS_LAND_SURVEYOR_TYPE.LAND_SURVEYOR_TYPE_CODE = inserted.LAND_SURVEYOR_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORG_A_S_IUD_TR] ON PIMS_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where ORGANIZATION_ID in (select ORGANIZATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ORGANIZATION_HIST ([ORGANIZATION_ID], [PRNT_ORGANIZATION_ID], [REGION_CODE], [DISTRICT_CODE], [ORGANIZATION_TYPE_CODE], [ORG_IDENTIFIER_TYPE_CODE], [ORGANIZATION_IDENTIFIER], [ORGANIZATION_NAME], [ORGANIZATION_ALIAS], [INCORPORATION_NUMBER], [WEBSITE], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ORGANIZATION_ID], [PRNT_ORGANIZATION_ID], [REGION_CODE], [DISTRICT_CODE], [ORGANIZATION_TYPE_CODE], [ORG_IDENTIFIER_TYPE_CODE], [ORGANIZATION_IDENTIFIER], [ORGANIZATION_NAME], [ORGANIZATION_ALIAS], [INCORPORATION_NUMBER], [WEBSITE], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ORGANIZATION_H_ID_SEQ]) as [_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPCNT_I_S_I_TR] ON PIMS_PROPERTY_CONTACT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_CONTACT ("PROPERTY_CONTACT_ID",
      "PROPERTY_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "PURPOSE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_CONTACT_ID",
      "PROPERTY_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "PURPOSE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ADUSGT_I_S_I_TR] ON PIMS_ADDRESS_USAGE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ADDRESS_USAGE_TYPE ("ADDRESS_USAGE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ADDRESS_USAGE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_U_TR] ON PIMS_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_ID = deleted.LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE
    set "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE" = inserted."LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE" = inserted."LEASE_LICENSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE" = inserted."LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE" = inserted."LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE" = inserted."LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE" = inserted."LEASE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "L_FILE_NO" = inserted."L_FILE_NO",
      "TFA_FILE_NO" = inserted."TFA_FILE_NO",
      "TFA_FILE_NUMBER" = inserted."TFA_FILE_NUMBER",
      "PS_FILE_NO" = inserted."PS_FILE_NO",
      "LEASE_DESCRIPTION" = inserted."LEASE_DESCRIPTION",
      "LEASE_NOTES" = inserted."LEASE_NOTES",
      "MOTI_CONTACT" = inserted."MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE" = inserted."DOCUMENTATION_REFERENCE",
      "RETURN_NOTES" = inserted."RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE" = inserted."OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE" = inserted."OTHER_LEASE_LICENSE_TYPE",
      "ORIG_START_DATE" = inserted."ORIG_START_DATE",
      "ORIG_EXPIRY_DATE" = inserted."ORIG_EXPIRY_DATE",
      "TERMINATION_DATE" = inserted."TERMINATION_DATE",
      "LEASE_AMOUNT" = inserted."LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE" = inserted."RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE" = inserted."INSPECTION_DATE",
      "INSPECTION_NOTES" = inserted."INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA" = inserted."IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG" = inserted."IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT" = inserted."IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED" = inserted."IS_EXPIRED",
      "HAS_PHYSICAL_FILE" = inserted."HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE" = inserted."HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE" = inserted."HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE" = inserted."HAS_DIGITAL_LICENSE",
      "CANCELLATION_REASON" = inserted."CANCELLATION_REASON",
      "TERMINATION_REASON" = inserted."TERMINATION_REASON",
      "IS_PUBLIC_BENEFIT" = inserted."IS_PUBLIC_BENEFIT",
      "IS_FINANCIAL_GAIN" = inserted."IS_FINANCIAL_GAIN",
      "FEE_DETERMINATION_NOTE" = inserted."FEE_DETERMINATION_NOTE",
      "PRIMARY_ARBITRATION_CITY" = inserted."PRIMARY_ARBITRATION_CITY",
      "TOTAL_ALLOWABLE_COMPENSATION" = inserted."TOTAL_ALLOWABLE_COMPENSATION",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE
    inner join inserted
    on (PIMS_LEASE.LEASE_ID = inserted.LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORGADD_A_S_IUD_TR] ON PIMS_ORGANIZATION_ADDRESS FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ORGANIZATION_ADDRESS_HIST set END_DATE_HIST = @curr_date where ORGANIZATION_ADDRESS_ID in (select ORGANIZATION_ADDRESS_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ORGANIZATION_ADDRESS_HIST ([ORGANIZATION_ADDRESS_ID], [ORGANIZATION_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ORGANIZATION_ADDRESS_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ORGANIZATION_ADDRESS_ID], [ORGANIZATION_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ORGANIZATION_ADDRESS_H_ID_SEQ]) as [_ORGANIZATION_ADDRESS_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PIMPRV_I_S_I_TR] ON PIMS_PROPERTY_IMPROVEMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_IMPROVEMENT ("PROPERTY_IMPROVEMENT_ID",
      "LEASE_ID",
      "PROPERTY_IMPROVEMENT_TYPE_CODE",
      "IMPROVEMENT_DESCRIPTION",
      "STRUCTURE_SIZE",
      "ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_IMPROVEMENT_ID",
      "LEASE_ID",
      "PROPERTY_IMPROVEMENT_TYPE_CODE",
      "IMPROVEMENT_DESCRIPTION",
      "STRUCTURE_SIZE",
      "ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AGRMNT_I_S_I_TR] ON PIMS_AGREEMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_AGREEMENT ("AGREEMENT_ID",
      "ACQUISITION_FILE_ID",
      "AGREEMENT_TYPE_CODE",
      "AGREEMENT_STATUS_TYPE_CODE",
      "AGREEMENT_DATE",
      "COMPLETION_DATE",
      "TERMINATION_DATE",
      "COMMENCEMENT_DATE",
      "DEPOSIT_AMOUNT",
      "NO_LATER_THAN_DAYS",
      "PURCHASE_PRICE",
      "LEGAL_SURVEY_PLAN_NUM",
      "OFFER_DATE",
      "EXPIRY_TS",
      "SIGNED_DATE",
      "INSPECTION_DATE",
      "EXPROPRIATION_DATE",
      "POSSESSION_DATE",
      "CANCELLATION_NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "AGREEMENT_ID",
      "ACQUISITION_FILE_ID",
      "AGREEMENT_TYPE_CODE",
      "AGREEMENT_STATUS_TYPE_CODE",
      "AGREEMENT_DATE",
      "COMPLETION_DATE",
      "TERMINATION_DATE",
      "COMMENCEMENT_DATE",
      "DEPOSIT_AMOUNT",
      "NO_LATER_THAN_DAYS",
      "PURCHASE_PRICE",
      "LEGAL_SURVEY_PLAN_NUM",
      "OFFER_DATE",
      "EXPIRY_TS",
      "SIGNED_DATE",
      "INSPECTION_DATE",
      "EXPROPRIATION_DATE",
      "POSSESSION_DATE",
      "CANCELLATION_NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LCHKLI_I_S_U_TR] ON PIMS_LEASE_CHECKLIST_ITEM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CHECKLIST_ITEM_ID = deleted.LEASE_CHECKLIST_ITEM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CHECKLIST_ITEM
    set "LEASE_CHECKLIST_ITEM_ID" = inserted."LEASE_CHECKLIST_ITEM_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_CHKLST_ITEM_TYPE_CODE" = inserted."LEASE_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CHECKLIST_ITEM
    inner join inserted
    on (PIMS_LEASE_CHECKLIST_ITEM.LEASE_CHECKLIST_ITEM_ID = inserted.LEASE_CHECKLIST_ITEM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PACMRQ_A_S_IUD_TR] ON PIMS_PROP_ACQ_FL_COMP_REQ FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_ACQ_FL_COMP_REQ_HIST set END_DATE_HIST = @curr_date where PROP_ACQ_FL_COMP_REQ_ID in (select PROP_ACQ_FL_COMP_REQ_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_ACQ_FL_COMP_REQ_HIST ([PROP_ACQ_FL_COMP_REQ_ID], [PROPERTY_ACQUISITION_FILE_ID], [COMPENSATION_REQUISITION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_ACQ_FL_COMP_REQ_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_ACQ_FL_COMP_REQ_ID], [PROPERTY_ACQUISITION_FILE_ID], [COMPENSATION_REQUISITION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_ACQ_FL_COMP_REQ_H_ID_SEQ]) as [_PROP_ACQ_FL_COMP_REQ_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PIMPRT_I_S_I_TR] ON PIMS_PROPERTY_IMPROVEMENT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_IMPROVEMENT_TYPE ("PROPERTY_IMPROVEMENT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_IMPROVEMENT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AGRSTY_I_S_I_TR] ON PIMS_AGREEMENT_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_AGREEMENT_STATUS_TYPE ("AGREEMENT_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "AGREEMENT_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LCKITY_I_S_U_TR] ON PIMS_LEASE_CHKLST_ITEM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CHKLST_ITEM_TYPE_CODE = deleted.LEASE_CHKLST_ITEM_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CHKLST_ITEM_TYPE
    set "LEASE_CHKLST_ITEM_TYPE_CODE" = inserted."LEASE_CHKLST_ITEM_TYPE_CODE",
      "LEASE_CHKLST_SECTION_TYPE_CODE" = inserted."LEASE_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "HINT" = inserted."HINT",
      "IS_REQUIRED" = inserted."IS_REQUIRED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CHKLST_ITEM_TYPE
    inner join inserted
    on (PIMS_LEASE_CHKLST_ITEM_TYPE.LEASE_CHKLST_ITEM_TYPE_CODE = inserted.LEASE_CHKLST_ITEM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PAINVP_A_S_IUD_TR] ON PIMS_PROP_ACT_INVOLVED_PARTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_ACT_INVOLVED_PARTY_HIST set END_DATE_HIST = @curr_date where PROP_ACT_INVOLVED_PARTY_ID in (select PROP_ACT_INVOLVED_PARTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_ACT_INVOLVED_PARTY_HIST ([PROP_ACT_INVOLVED_PARTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_ACT_INVOLVED_PARTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_ACT_INVOLVED_PARTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY_H_ID_SEQ]) as [_PROP_ACT_INVOLVED_PARTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PROPLS_I_S_I_TR] ON PIMS_PROPERTY_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_LEASE ("PROPERTY_LEASE_ID",
      "PROPERTY_ID",
      "LEASE_ID",
      "AREA_UNIT_TYPE_CODE",
      "NAME",
      "LEASE_AREA",
      "LOCATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_LEASE_ID",
      "PROPERTY_ID",
      "LEASE_ID",
      "AREA_UNIT_TYPE_CODE",
      "NAME",
      "LEASE_AREA",
      "LOCATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AGRTYP_I_S_I_TR] ON PIMS_AGREEMENT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_AGREEMENT_TYPE ("AGREEMENT_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "AGREEMENT_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LCKSTY_I_S_U_TR] ON PIMS_LEASE_CHKLST_SECTION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CHKLST_SECTION_TYPE_CODE = deleted.LEASE_CHKLST_SECTION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CHKLST_SECTION_TYPE
    set "LEASE_CHKLST_SECTION_TYPE_CODE" = inserted."LEASE_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CHKLST_SECTION_TYPE
    inner join inserted
    on (PIMS_LEASE_CHKLST_SECTION_TYPE.LEASE_CHKLST_SECTION_TYPE_CODE = inserted.LEASE_CHKLST_SECTION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERADD_A_S_IUD_TR] ON PIMS_PERSON_ADDRESS FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PERSON_ADDRESS_HIST set END_DATE_HIST = @curr_date where PERSON_ADDRESS_ID in (select PERSON_ADDRESS_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PERSON_ADDRESS_HIST ([PERSON_ADDRESS_ID], [PERSON_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PERSON_ADDRESS_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PERSON_ADDRESS_ID], [PERSON_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PERSON_ADDRESS_H_ID_SEQ]) as [_PERSON_ADDRESS_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PROPOP_I_S_I_TR] ON PIMS_PROPERTY_OPERATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_OPERATION ("PROPERTY_OPERATION_ID",
      "SOURCE_PROPERTY_ID",
      "DESTINATION_PROPERTY_ID",
      "PROPERTY_OPERATION_TYPE_CODE",
      "PROPERTY_OPERATION_NO",
      "OPERATION_DT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_OPERATION_ID",
      "SOURCE_PROPERTY_ID",
      "DESTINATION_PROPERTY_ID",
      "PROPERTY_OPERATION_TYPE_CODE",
      "PROPERTY_OPERATION_NO",
      "OPERATION_DT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ARUNIT_I_S_I_TR] ON PIMS_AREA_UNIT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_AREA_UNIT_TYPE ("AREA_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "AREA_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LESCON_I_S_U_TR] ON PIMS_LEASE_CONSULTATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CONSULTATION_ID = deleted.LEASE_CONSULTATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CONSULTATION
    set "LEASE_CONSULTATION_ID" = inserted."LEASE_CONSULTATION_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "CONSULTATION_TYPE_CODE" = inserted."CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE" = inserted."CONSULTATION_STATUS_TYPE_CODE",
      "CONSULTATION_OUTCOME_TYPE_CODE" = inserted."CONSULTATION_OUTCOME_TYPE_CODE",
      "OTHER_DESCRIPTION" = inserted."OTHER_DESCRIPTION",
      "REQUESTED_ON" = inserted."REQUESTED_ON",
      "IS_RESPONSE_RECEIVED" = inserted."IS_RESPONSE_RECEIVED",
      "RESPONSE_RECEIVED_DATE" = inserted."RESPONSE_RECEIVED_DATE",
      "COMMENT" = inserted."COMMENT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CONSULTATION
    inner join inserted
    on (PIMS_LEASE_CONSULTATION.LEASE_CONSULTATION_ID = inserted.LEASE_CONSULTATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERORG_A_S_IUD_TR] ON PIMS_PERSON_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PERSON_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where PERSON_ORGANIZATION_ID in (select PERSON_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PERSON_ORGANIZATION_HIST ([PERSON_ORGANIZATION_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PERSON_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PERSON_ORGANIZATION_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PERSON_ORGANIZATION_H_ID_SEQ]) as [_PERSON_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPOTY_I_S_I_TR] ON PIMS_PROPERTY_OPERATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_OPERATION_TYPE ("PROPERTY_OPERATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_OPERATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_BIZFCN_I_S_I_TR] ON PIMS_BUSINESS_FUNCTION_CODE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_BUSINESS_FUNCTION_CODE ("ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LESDOC_I_S_U_TR] ON PIMS_LEASE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_DOCUMENT_ID = deleted.LEASE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_DOCUMENT
    set "LEASE_DOCUMENT_ID" = inserted."LEASE_DOCUMENT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_DOCUMENT
    inner join inserted
    on (PIMS_LEASE_DOCUMENT.LEASE_DOCUMENT_ID = inserted.LEASE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERSON_A_S_IUD_TR] ON PIMS_PERSON FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PERSON_HIST set END_DATE_HIST = @curr_date where PERSON_ID in (select PERSON_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PERSON_HIST ([PERSON_ID], [SURNAME], [FIRST_NAME], [MIDDLE_NAMES], [NAME_SUFFIX], [PREFERRED_NAME], [BIRTH_DATE], [COMMENT], [ADDRESS_COMMENT], [USE_ORGANIZATION_ADDRESS], [PIMS_PROPERTY_ACTIVITY_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PERSON_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PERSON_ID], [SURNAME], [FIRST_NAME], [MIDDLE_NAMES], [NAME_SUFFIX], [PREFERRED_NAME], [BIRTH_DATE], [COMMENT], [ADDRESS_COMMENT], [USE_ORGANIZATION_ADDRESS], [PIMS_PROPERTY_ACTIVITY_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PERSON_H_ID_SEQ]) as [_PERSON_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPORG_I_S_I_TR] ON PIMS_PROPERTY_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ORGANIZATION ("PROPERTY_ORGANIZATION_ID",
      "PROPERTY_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ORGANIZATION_ID",
      "PROPERTY_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CHRTAC_I_S_I_TR] ON PIMS_CHART_OF_ACCOUNTS_CODE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CHART_OF_ACCOUNTS_CODE ("ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LINITT_I_S_U_TR] ON PIMS_LEASE_INITIATOR_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_INITIATOR_TYPE_CODE = deleted.LEASE_INITIATOR_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_INITIATOR_TYPE
    set "LEASE_INITIATOR_TYPE_CODE" = inserted."LEASE_INITIATOR_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_INITIATOR_TYPE
    inner join inserted
    on (PIMS_LEASE_INITIATOR_TYPE.LEASE_INITIATOR_TYPE_CODE = inserted.LEASE_INITIATOR_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PIMPRV_A_S_IUD_TR] ON PIMS_PROPERTY_IMPROVEMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_IMPROVEMENT_HIST set END_DATE_HIST = @curr_date where PROPERTY_IMPROVEMENT_ID in (select PROPERTY_IMPROVEMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_IMPROVEMENT_HIST ([PROPERTY_IMPROVEMENT_ID], [LEASE_ID], [PROPERTY_IMPROVEMENT_TYPE_CODE], [IMPROVEMENT_DESCRIPTION], [STRUCTURE_SIZE], [ADDRESS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_IMPROVEMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_IMPROVEMENT_ID], [LEASE_ID], [PROPERTY_IMPROVEMENT_TYPE_CODE], [IMPROVEMENT_DESCRIPTION], [STRUCTURE_SIZE], [ADDRESS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_IMPROVEMENT_H_ID_SEQ]) as [_PROPERTY_IMPROVEMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPPUR_I_S_I_TR] ON PIMS_PROPERTY_PURPOSE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_PURPOSE_TYPE ("PROPERTY_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CHKLIS_I_S_I_TR] ON PIMS_CHKLST_ITEM_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CHKLST_ITEM_STATUS_TYPE ("CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LLPURP_I_S_U_TR] ON PIMS_LEASE_LEASE_PURPOSE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_LEASE_PURPOSE_ID = deleted.LEASE_LEASE_PURPOSE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_LEASE_PURPOSE
    set "LEASE_LEASE_PURPOSE_ID" = inserted."LEASE_LEASE_PURPOSE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_PURPOSE_TYPE_CODE" = inserted."LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PURPOSE_OTHER_DESC" = inserted."LEASE_PURPOSE_OTHER_DESC",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_LEASE_PURPOSE
    inner join inserted
    on (PIMS_LEASE_LEASE_PURPOSE.LEASE_LEASE_PURPOSE_ID = inserted.LEASE_LEASE_PURPOSE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PLCMRQ_A_S_IUD_TR] ON PIMS_PROP_LEASE_COMP_REQ FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_LEASE_COMP_REQ_HIST set END_DATE_HIST = @curr_date where PROP_LEASE_COMP_REQ_ID in (select PROP_LEASE_COMP_REQ_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_LEASE_COMP_REQ_HIST ([PROP_LEASE_COMP_REQ_ID], [PROPERTY_LEASE_ID], [COMPENSATION_REQUISITION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_LEASE_COMP_REQ_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_LEASE_COMP_REQ_ID], [PROPERTY_LEASE_ID], [COMPENSATION_REQUISITION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_LEASE_COMP_REQ_H_ID_SEQ]) as [_PROP_LEASE_COMP_REQ_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRSCRC_I_S_I_TR] ON PIMS_PROPERTY_RESEARCH_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_RESEARCH_FILE ("PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID",
      "RESEARCH_FILE_ID",
      "PROPERTY_NAME",
      "DISPLAY_ORDER",
      "IS_LEGAL_OPINION_REQUIRED",
      "IS_LEGAL_OPINION_OBTAINED",
      "DOCUMENT_REFERENCE",
      "RESEARCH_SUMMARY",
      "LOCATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID",
      "RESEARCH_FILE_ID",
      "PROPERTY_NAME",
      "DISPLAY_ORDER",
      "IS_LEGAL_OPINION_REQUIRED",
      "IS_LEGAL_OPINION_OBTAINED",
      "DOCUMENT_REFERENCE",
      "RESEARCH_SUMMARY",
      "LOCATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CLMTYP_I_S_I_TR] ON PIMS_CLAIM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CLAIM ("CLAIM_ID",
      "CLAIM_UID",
      "KEYCLOAK_ROLE_ID",
      "NAME",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "CLAIM_ID",
      "CLAIM_UID",
      "KEYCLOAK_ROLE_ID",
      "NAME",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LELIST_I_S_U_TR] ON PIMS_LEASE_LICENSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_LICENSE_TYPE_CODE = deleted.LEASE_LICENSE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_LICENSE_TYPE
    set "LEASE_LICENSE_TYPE_CODE" = inserted."LEASE_LICENSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_LICENSE_TYPE
    inner join inserted
    on (PIMS_LEASE_LICENSE_TYPE.LEASE_LICENSE_TYPE_CODE = inserted.LEASE_LICENSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACDO_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACTIVITY_DOCUMENT_ID in (select PROPERTY_ACTIVITY_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST ([PROPERTY_ACTIVITY_DOCUMENT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACTIVITY_DOCUMENT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRROAD_I_S_I_TR] ON PIMS_PROPERTY_ROAD_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ROAD_TYPE ("PROPERTY_ROAD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_ROAD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CRQFIN_I_S_I_TR] ON PIMS_COMP_REQ_FINANCIAL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_COMP_REQ_FINANCIAL ("COMP_REQ_FINANCIAL_ID",
      "COMPENSATION_REQUISITION_ID",
      "FINANCIAL_ACTIVITY_CODE_ID",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "IS_GST_REQUIRED",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "COMP_REQ_FINANCIAL_ID",
      "COMPENSATION_REQUISITION_ID",
      "FINANCIAL_ACTIVITY_CODE_ID",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "IS_GST_REQUIRED",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LESNOT_I_S_U_TR] ON PIMS_LEASE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_NOTE_ID = deleted.LEASE_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_NOTE
    set "LEASE_NOTE_ID" = inserted."LEASE_NOTE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_NOTE
    inner join inserted
    on (PIMS_LEASE_NOTE.LEASE_NOTE_ID = inserted.LEASE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACIN_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY_INVOICE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_INVOICE_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACTIVITY_INVOICE_ID in (select PROPERTY_ACTIVITY_INVOICE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_INVOICE_HIST ([PROPERTY_ACTIVITY_INVOICE_ID], [PIMS_PROPERTY_ACTIVITY_ID], [INVOICE_DT], [INVOICE_NUM], [DESCRIPTION], [PRETAX_AMT], [GST_AMT], [PST_AMT], [TOTAL_AMT], [IS_PST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_INVOICE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACTIVITY_INVOICE_ID], [PIMS_PROPERTY_ACTIVITY_ID], [INVOICE_DT], [INVOICE_NUM], [DESCRIPTION], [PRETAX_AMT], [GST_AMT], [PST_AMT], [TOTAL_AMT], [IS_PST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_INVOICE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPSTS_I_S_I_TR] ON PIMS_PROPERTY_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_STATUS_TYPE ("PROPERTY_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CMPREQ_I_S_I_TR] ON PIMS_COMPENSATION_REQUISITION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_COMPENSATION_REQUISITION ("COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID",
      "LEASE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_TEAM_ID",
      "CHART_OF_ACCOUNTS_ID",
      "RESPONSIBILITY_ID",
      "YEARLY_FINANCIAL_ID",
      "ALTERNATE_PROJECT_ID",
      "LEGACY_PAYEE",
      "IS_DRAFT",
      "IS_PAYMENT_IN_TRUST",
      "GST_NUMBER",
      "FISCAL_YEAR",
      "AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT",
      "GENERATION_DT",
      "FINALIZED_DATE",
      "ADV_PMT_SERVED_DT",
      "SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID",
      "LEASE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_TEAM_ID",
      "CHART_OF_ACCOUNTS_ID",
      "RESPONSIBILITY_ID",
      "YEARLY_FINANCIAL_ID",
      "ALTERNATE_PROJECT_ID",
      "LEGACY_PAYEE",
      "IS_DRAFT",
      "IS_PAYMENT_IN_TRUST",
      "GST_NUMBER",
      "FISCAL_YEAR",
      "AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT",
      "GENERATION_DT",
      "FINALIZED_DATE",
      "ADV_PMT_SERVED_DT",
      "SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPRTY_I_S_U_TR] ON PIMS_LEASE_PAY_RVBL_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PAY_RVBL_TYPE_CODE = deleted.LEASE_PAY_RVBL_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PAY_RVBL_TYPE
    set "LEASE_PAY_RVBL_TYPE_CODE" = inserted."LEASE_PAY_RVBL_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAY_RVBL_TYPE
    inner join inserted
    on (PIMS_LEASE_PAY_RVBL_TYPE.LEASE_PAY_RVBL_TYPE_CODE = inserted.LEASE_PAY_RVBL_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACMC_A_S_IUD_TR] ON PIMS_PROP_ACT_MIN_CONTACT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_ACT_MIN_CONTACT_HIST set END_DATE_HIST = @curr_date where PROP_ACT_MIN_CONTACT_ID in (select PROP_ACT_MIN_CONTACT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_ACT_MIN_CONTACT_HIST ([PROP_ACT_MIN_CONTACT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_ACT_MIN_CONTACT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_ACT_MIN_CONTACT_ID], [PIMS_PROPERTY_ACTIVITY_ID], [PERSON_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_ACT_MIN_CONTACT_H_ID_SEQ]) as [_PROP_ACT_MIN_CONTACT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPTNR_I_S_I_TR] ON PIMS_PROPERTY_TENURE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_TENURE_TYPE ("PROPERTY_TENURE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_TENURE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_OUTCMT_I_S_I_TR] ON PIMS_CONSULTATION_OUTCOME_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CONSULTATION_OUTCOME_TYPE ("CONSULTATION_OUTCOME_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "CONSULTATION_OUTCOME_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPYMT_I_S_U_TR] ON PIMS_LEASE_PAYMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PAYMENT_ID = deleted.LEASE_PAYMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PAYMENT
    set "LEASE_PAYMENT_ID" = inserted."LEASE_PAYMENT_ID",
      "LEASE_PERIOD_ID" = inserted."LEASE_PERIOD_ID",
      "LEASE_PAYMENT_METHOD_TYPE_CODE" = inserted."LEASE_PAYMENT_METHOD_TYPE_CODE",
      "LEASE_PAYMENT_STATUS_TYPE_CODE" = inserted."LEASE_PAYMENT_STATUS_TYPE_CODE",
      "LEASE_PAYMENT_CATEGORY_TYPE_CODE" = inserted."LEASE_PAYMENT_CATEGORY_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE" = inserted."LEASE_PMT_FREQ_TYPE_CODE",
      "PAYMENT_RECEIVED_DATE" = inserted."PAYMENT_RECEIVED_DATE",
      "PAYMENT_AMOUNT_PRE_TAX" = inserted."PAYMENT_AMOUNT_PRE_TAX",
      "PAYMENT_AMOUNT_PST" = inserted."PAYMENT_AMOUNT_PST",
      "PAYMENT_AMOUNT_GST" = inserted."PAYMENT_AMOUNT_GST",
      "PAYMENT_AMOUNT_TOTAL" = inserted."PAYMENT_AMOUNT_TOTAL",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAYMENT
    inner join inserted
    on (PIMS_LEASE_PAYMENT.LEASE_PAYMENT_ID = inserted.LEASE_PAYMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACQF_A_S_IUD_TR] ON PIMS_PROPERTY_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACQUISITION_FILE_ID in (select PROPERTY_ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACQUISITION_FILE_HIST ([PROPERTY_ACQUISITION_FILE_ID], [ACQUISITION_FILE_ID], [PROPERTY_ID], [PROPERTY_NAME], [DISPLAY_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACQUISITION_FILE_ID], [ACQUISITION_FILE_ID], [PROPERTY_ID], [PROPERTY_NAME], [DISPLAY_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_H_ID_SEQ]) as [_PROPERTY_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPTYP_I_S_I_TR] ON PIMS_PROPERTY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_TYPE ("PROPERTY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CONSTY_I_S_I_TR] ON PIMS_CONSULTATION_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CONSULTATION_STATUS_TYPE ("CONSULTATION_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "CONSULTATION_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LPCATT_I_S_U_TR] ON PIMS_LEASE_PAYMENT_CATEGORY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PAYMENT_CATEGORY_TYPE_CODE = deleted.LEASE_PAYMENT_CATEGORY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PAYMENT_CATEGORY_TYPE
    set "LEASE_PAYMENT_CATEGORY_TYPE_CODE" = inserted."LEASE_PAYMENT_CATEGORY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAYMENT_CATEGORY_TYPE
    inner join inserted
    on (PIMS_LEASE_PAYMENT_CATEGORY_TYPE.LEASE_PAYMENT_CATEGORY_TYPE_CODE = inserted.LEASE_PAYMENT_CATEGORY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRJDOC_A_S_IUD_TR] ON PIMS_PROJECT_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_DOCUMENT_HIST set END_DATE_HIST = @curr_date where PROJECT_DOCUMENT_ID in (select PROJECT_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_DOCUMENT_HIST ([PROJECT_DOCUMENT_ID], [PROJECT_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_DOCUMENT_ID], [PROJECT_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_DOCUMENT_H_ID_SEQ]) as [_PROJECT_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PROVNC_I_S_I_TR] ON PIMS_PROVINCE_STATE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROVINCE_STATE ("PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "PROVINCE_STATE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "PROVINCE_STATE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CONTYP_I_S_I_TR] ON PIMS_CONSULTATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CONSULTATION_TYPE ("CONSULTATION_TYPE_CODE",
      "DESCRIPTION",
      "OTHER_DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "CONSULTATION_TYPE_CODE",
      "DESCRIPTION",
      "OTHER_DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPMMT_I_S_U_TR] ON PIMS_LEASE_PAYMENT_METHOD_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PAYMENT_METHOD_TYPE_CODE = deleted.LEASE_PAYMENT_METHOD_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PAYMENT_METHOD_TYPE
    set "LEASE_PAYMENT_METHOD_TYPE_CODE" = inserted."LEASE_PAYMENT_METHOD_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAYMENT_METHOD_TYPE
    inner join inserted
    on (PIMS_LEASE_PAYMENT_METHOD_TYPE.LEASE_PAYMENT_METHOD_TYPE_CODE = inserted.LEASE_PAYMENT_METHOD_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRJNOT_A_S_IUD_TR] ON PIMS_PROJECT_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_NOTE_HIST set END_DATE_HIST = @curr_date where PROJECT_NOTE_ID in (select PROJECT_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_NOTE_HIST ([PROJECT_NOTE_ID], [PROJECT_ID], [NOTE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_NOTE_ID], [PROJECT_ID], [NOTE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_NOTE_H_ID_SEQ]) as [_PROJECT_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_REGION_I_S_I_TR] ON PIMS_REGION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_REGION ("REGION_CODE",
      "REGION_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "REGION_CODE",
      "REGION_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CNTMTH_I_S_I_TR] ON PIMS_CONTACT_METHOD INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CONTACT_METHOD ("CONTACT_METHOD_ID",
      "CONTACT_METHOD_TYPE_CODE",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONTACT_METHOD_VALUE",
      "IS_PREFERRED_METHOD",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "CONTACT_METHOD_ID",
      "CONTACT_METHOD_TYPE_CODE",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONTACT_METHOD_VALUE",
      "IS_PREFERRED_METHOD",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LPSTST_I_S_U_TR] ON PIMS_LEASE_PAYMENT_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PAYMENT_STATUS_TYPE_CODE = deleted.LEASE_PAYMENT_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PAYMENT_STATUS_TYPE
    set "LEASE_PAYMENT_STATUS_TYPE_CODE" = inserted."LEASE_PAYMENT_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAYMENT_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_PAYMENT_STATUS_TYPE.LEASE_PAYMENT_STATUS_TYPE_CODE = inserted.LEASE_PAYMENT_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRJPER_A_S_IUD_TR] ON PIMS_PROJECT_PERSON FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_PERSON_HIST set END_DATE_HIST = @curr_date where PROJECT_PERSON_ID in (select PROJECT_PERSON_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_PERSON_HIST ([PROJECT_PERSON_ID], [PROJECT_ID], [PERSON_ID], [PROJECT_PERSON_ROLE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_PERSON_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_PERSON_ID], [PROJECT_ID], [PERSON_ID], [PROJECT_PERSON_ROLE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_PERSON_H_ID_SEQ]) as [_PROJECT_PERSON_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RGNUSR_I_S_I_TR] ON PIMS_REGION_USER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_REGION_USER ("REGION_USER_ID",
      "REGION_CODE",
      "USER_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "REGION_USER_ID",
      "REGION_CODE",
      "USER_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CNTMTT_I_S_I_TR] ON PIMS_CONTACT_METHOD_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CONTACT_METHOD_TYPE ("CONTACT_METHOD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "CONTACT_METHOD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPERD_I_S_U_TR] ON PIMS_LEASE_PERIOD INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PERIOD_ID = deleted.LEASE_PERIOD_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PERIOD
    set "LEASE_PERIOD_ID" = inserted."LEASE_PERIOD_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_PERIOD_STATUS_TYPE_CODE" = inserted."LEASE_PERIOD_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE" = inserted."LEASE_PMT_FREQ_TYPE_CODE",
      "ADDL_RENT_FREQ" = inserted."ADDL_RENT_FREQ",
      "VBL_RENT_FREQ" = inserted."VBL_RENT_FREQ",
      "PERIOD_START_DATE" = inserted."PERIOD_START_DATE",
      "PERIOD_EXPIRY_DATE" = inserted."PERIOD_EXPIRY_DATE",
      "PERIOD_RENEWAL_DATE" = inserted."PERIOD_RENEWAL_DATE",
      "PAYMENT_AMOUNT" = inserted."PAYMENT_AMOUNT",
      "PAYMENT_DUE_DATE" = inserted."PAYMENT_DUE_DATE",
      "PAYMENT_NOTE" = inserted."PAYMENT_NOTE",
      "IS_GST_ELIGIBLE" = inserted."IS_GST_ELIGIBLE",
      "GST_AMOUNT" = inserted."GST_AMOUNT",
      "IS_PERIOD_EXERCISED" = inserted."IS_PERIOD_EXERCISED",
      "IS_VARIABLE_PAYMENT" = inserted."IS_VARIABLE_PAYMENT",
      "IS_FLEXIBLE_DURATION" = inserted."IS_FLEXIBLE_DURATION",
      "ADDL_RENT_AGREED_PMT" = inserted."ADDL_RENT_AGREED_PMT",
      "ADDL_RENT_GST_AMOUNT" = inserted."ADDL_RENT_GST_AMOUNT",
      "IS_ADDL_RENT_SUBJECT_TO_GST" = inserted."IS_ADDL_RENT_SUBJECT_TO_GST",
      "VBL_RENT_AGREED_PMT" = inserted."VBL_RENT_AGREED_PMT",
      "VBL_RENT_GST_AMOUNT" = inserted."VBL_RENT_GST_AMOUNT",
      "IS_VBL_RENT_SUBJECT_TO_GST" = inserted."IS_VBL_RENT_SUBJECT_TO_GST",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PERIOD
    inner join inserted
    on (PIMS_LEASE_PERIOD.LEASE_PERIOD_ID = inserted.LEASE_PERIOD_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRJPRD_A_S_IUD_TR] ON PIMS_PROJECT_PRODUCT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_PRODUCT_HIST set END_DATE_HIST = @curr_date where PROJECT_PRODUCT_ID in (select PROJECT_PRODUCT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_PRODUCT_HIST ([PROJECT_PRODUCT_ID], [PROJECT_ID], [PRODUCT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_PRODUCT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_PRODUCT_ID], [PROJECT_ID], [PRODUCT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_PRODUCT_H_ID_SEQ]) as [_PROJECT_PRODUCT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RQSRCT_I_S_I_TR] ON PIMS_REQUEST_SOURCE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_REQUEST_SOURCE_TYPE ("REQUEST_SOURCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "REQUEST_SOURCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_COSTYP_I_S_I_TR] ON PIMS_COST_TYPE_CODE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_COST_TYPE_CODE ("ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPRST_I_S_U_TR] ON PIMS_LEASE_PERIOD_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PERIOD_STATUS_TYPE_CODE = deleted.LEASE_PERIOD_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PERIOD_STATUS_TYPE
    set "LEASE_PERIOD_STATUS_TYPE_CODE" = inserted."LEASE_PERIOD_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PERIOD_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_PERIOD_STATUS_TYPE.LEASE_PERIOD_STATUS_TYPE_CODE = inserted.LEASE_PERIOD_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRODCT_A_S_IUD_TR] ON PIMS_PRODUCT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PRODUCT_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PRODUCT_HIST ([ID], [CODE], [DESCRIPTION], [START_DATE], [COST_ESTIMATE], [COST_ESTIMATE_DATE], [OBJECTIVE], [SCOPE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PRODUCT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [CODE], [DESCRIPTION], [START_DATE], [COST_ESTIMATE], [COST_ESTIMATE_DATE], [OBJECTIVE], [SCOPE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PRODUCT_H_ID_SEQ]) as [_PRODUCT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RESRCH_I_S_I_TR] ON PIMS_RESEARCH_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE ("RESEARCH_FILE_ID",
      "RESEARCH_FILE_STATUS_TYPE_CODE",
      "REQUEST_SOURCE_TYPE_CODE",
      "REQUESTOR_NAME",
      "REQUESTOR_ORGANIZATION",
      "NAME",
      "RFILE_NUMBER",
      "REQUEST_DATE",
      "ROAD_NAME",
      "ROAD_ALIAS",
      "REQUEST_DESCRIPTION",
      "REQUEST_SOURCE_DESCRIPTION",
      "RESEARCH_RESULT",
      "IS_EXPROPRIATION",
      "EXPROPRIATION_NOTES",
      "RESEARCH_COMPLETION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_FILE_ID",
      "RESEARCH_FILE_STATUS_TYPE_CODE",
      "REQUEST_SOURCE_TYPE_CODE",
      "REQUESTOR_NAME",
      "REQUESTOR_ORGANIZATION",
      "NAME",
      "RFILE_NUMBER",
      "REQUEST_DATE",
      "ROAD_NAME",
      "ROAD_ALIAS",
      "REQUEST_DESCRIPTION",
      "REQUEST_SOURCE_DESCRIPTION",
      "RESEARCH_RESULT",
      "IS_EXPROPRIATION",
      "EXPROPRIATION_NOTES",
      "RESEARCH_COMPLETION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CNTRY_I_S_I_TR] ON PIMS_COUNTRY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_COUNTRY ("COUNTRY_ID",
      "COUNTRY_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "COUNTRY_ID",
      "COUNTRY_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPMTF_I_S_U_TR] ON PIMS_LEASE_PMT_FREQ_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PMT_FREQ_TYPE_CODE = deleted.LEASE_PMT_FREQ_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PMT_FREQ_TYPE
    set "LEASE_PMT_FREQ_TYPE_CODE" = inserted."LEASE_PMT_FREQ_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PMT_FREQ_TYPE
    inner join inserted
    on (PIMS_LEASE_PMT_FREQ_TYPE.LEASE_PMT_FREQ_TYPE_CODE = inserted.LEASE_PMT_FREQ_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PROJCT_A_S_IUD_TR] ON PIMS_PROJECT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_HIST ([ID], [PROJECT_STATUS_TYPE_CODE], [BUSINESS_FUNCTION_CODE_ID], [COST_TYPE_CODE_ID], [WORK_ACTIVITY_CODE_ID], [REGION_CODE], [CODE], [DESCRIPTION], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [PROJECT_STATUS_TYPE_CODE], [BUSINESS_FUNCTION_CODE_ID], [COST_TYPE_CODE_ID], [WORK_ACTIVITY_CODE_ID], [REGION_CODE], [CODE], [DESCRIPTION], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_H_ID_SEQ]) as [_PROJECT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RFLDOC_I_S_I_TR] ON PIMS_RESEARCH_FILE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE_DOCUMENT ("RESEARCH_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PIDSRT_I_S_I_TR] ON PIMS_DATA_SOURCE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DATA_SOURCE_TYPE ("DATA_SOURCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DATA_SOURCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPRGT_I_S_U_TR] ON PIMS_LEASE_PROGRAM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PROGRAM_TYPE_CODE = deleted.LEASE_PROGRAM_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PROGRAM_TYPE
    set "LEASE_PROGRAM_TYPE_CODE" = inserted."LEASE_PROGRAM_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PROGRAM_TYPE
    inner join inserted
    on (PIMS_LEASE_PROGRAM_TYPE.LEASE_PROGRAM_TYPE_CODE = inserted.LEASE_PROGRAM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PROPLS_A_S_IUD_TR] ON PIMS_PROPERTY_LEASE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_LEASE_HIST set END_DATE_HIST = @curr_date where PROPERTY_LEASE_ID in (select PROPERTY_LEASE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_LEASE_HIST ([PROPERTY_LEASE_ID], [PROPERTY_ID], [LEASE_ID], [AREA_UNIT_TYPE_CODE], [NAME], [LEASE_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_LEASE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_LEASE_ID], [PROPERTY_ID], [LEASE_ID], [AREA_UNIT_TYPE_CODE], [NAME], [LEASE_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_LEASE_H_ID_SEQ]) as [_PROPERTY_LEASE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RFLNOT_I_S_I_TR] ON PIMS_RESEARCH_FILE_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE_NOTE ("RESEARCH_FILE_NOTE_ID",
      "RESEARCH_FILE_ID",
      "NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_FILE_NOTE_ID",
      "RESEARCH_FILE_ID",
      "NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPAPP_I_S_I_TR] ON PIMS_DISPOSITION_APPRAISAL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_APPRAISAL ("DISPOSITION_APPRAISAL_ID",
      "DISPOSITION_FILE_ID",
      "APPRAISED_AMT",
      "APPRAISAL_DT",
      "BCA_VALUE_AMT",
      "BCA_ROLL_YEAR",
      "LIST_PRICE_AMT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_APPRAISAL_ID",
      "DISPOSITION_FILE_ID",
      "APPRAISED_AMT",
      "APPRAISAL_DT",
      "BCA_VALUE_AMT",
      "BCA_ROLL_YEAR",
      "LIST_PRICE_AMT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LPRPTY_I_S_U_TR] ON PIMS_LEASE_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PURPOSE_TYPE_CODE = deleted.LEASE_PURPOSE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PURPOSE_TYPE
    set "LEASE_PURPOSE_TYPE_CODE" = inserted."LEASE_PURPOSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PURPOSE_TYPE
    inner join inserted
    on (PIMS_LEASE_PURPOSE_TYPE.LEASE_PURPOSE_TYPE_CODE = inserted.LEASE_PURPOSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PROPOP_A_S_IUD_TR] ON PIMS_PROPERTY_OPERATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_OPERATION_HIST set END_DATE_HIST = @curr_date where PROPERTY_OPERATION_ID in (select PROPERTY_OPERATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_OPERATION_HIST ([PROPERTY_OPERATION_ID], [SOURCE_PROPERTY_ID], [DESTINATION_PROPERTY_ID], [PROPERTY_OPERATION_TYPE_CODE], [PROPERTY_OPERATION_NO], [OPERATION_DT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_OPERATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_OPERATION_ID], [SOURCE_PROPERTY_ID], [DESTINATION_PROPERTY_ID], [PROPERTY_OPERATION_TYPE_CODE], [PROPERTY_OPERATION_NO], [OPERATION_DT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_OPERATION_H_ID_SEQ]) as [_PROPERTY_OPERATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RFLPRJ_I_S_I_TR] ON PIMS_RESEARCH_FILE_PROJECT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE_PROJECT ("RESEARCH_FILE_PROJECT_ID",
      "RESEARCH_FILE_ID",
      "PROJECT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_FILE_PROJECT_ID",
      "RESEARCH_FILE_ID",
      "PROJECT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPCKI_I_S_I_TR] ON PIMS_DISPOSITION_CHECKLIST_ITEM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_CHECKLIST_ITEM ("DISPOSITION_CHECKLIST_ITEM_ID",
      "DISPOSITION_FILE_ID",
      "DSP_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_CHECKLIST_ITEM_ID",
      "DISPOSITION_FILE_ID",
      "DSP_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSRNWL_I_S_U_TR] ON PIMS_LEASE_RENEWAL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_RENEWAL_ID = deleted.LEASE_RENEWAL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_RENEWAL
    set "LEASE_RENEWAL_ID" = inserted."LEASE_RENEWAL_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "COMMENCEMENT_DT" = inserted."COMMENCEMENT_DT",
      "EXPIRY_DT" = inserted."EXPIRY_DT",
      "IS_EXERCISED" = inserted."IS_EXERCISED",
      "RENEWAL_NOTE" = inserted."RENEWAL_NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_RENEWAL
    inner join inserted
    on (PIMS_LEASE_RENEWAL.LEASE_RENEWAL_ID = inserted.LEASE_RENEWAL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPACT_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_HIST set END_DATE_HIST = @curr_date where PIMS_PROPERTY_ACTIVITY_ID in (select PIMS_PROPERTY_ACTIVITY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_HIST ([PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_TYPE_CODE], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE], [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE], [SERVICE_PROVIDER_PERSON_ID], [SERVICE_PROVIDER_ORG_ID], [REQUEST_ADDED_DT], [COMPLETION_DT], [REQUEST_SOURCE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PIMS_PROPERTY_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_TYPE_CODE], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE], [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE], [SERVICE_PROVIDER_PERSON_ID], [SERVICE_PROVIDER_ORG_ID], [REQUEST_ADDED_DT], [COMPLETION_DT], [REQUEST_SOURCE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSFLPR_I_S_I_TR] ON PIMS_RESEARCH_FILE_PURPOSE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE_PURPOSE ("RESEARCH_FILE_PURPOSE_ID",
      "RESEARCH_FILE_ID",
      "RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_FILE_PURPOSE_ID",
      "RESEARCH_FILE_ID",
      "RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DISPFL_I_S_I_TR] ON PIMS_DISPOSITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE ("DISPOSITION_FILE_ID",
      "DISPOSITION_STATUS_TYPE_CODE",
      "DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DISPOSITION_TYPE_CODE",
      "DISPOSITION_FUNDING_TYPE_CODE",
      "DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DSP_INITIATING_BRANCH_TYPE_CODE",
      "REGION_CODE",
      "PROJECT_ID",
      "PRODUCT_ID",
      "FILE_NUMBER",
      "FILE_NAME",
      "FILE_REFERENCE",
      "OTHER_DISPOSITION_TYPE",
      "OTHER_INITIATING_DOC_TYPE",
      "ASSIGNED_DT",
      "COMPLETED_DT",
      "INITIATING_DOCUMENT_DT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_FILE_ID",
      "DISPOSITION_STATUS_TYPE_CODE",
      "DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DISPOSITION_TYPE_CODE",
      "DISPOSITION_FUNDING_TYPE_CODE",
      "DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DSP_INITIATING_BRANCH_TYPE_CODE",
      "REGION_CODE",
      "PROJECT_ID",
      "PRODUCT_ID",
      "FILE_NUMBER",
      "FILE_NAME",
      "FILE_REFERENCE",
      "OTHER_DISPOSITION_TYPE",
      "OTHER_INITIATING_DOC_TYPE",
      "ASSIGNED_DT",
      "COMPLETED_DT",
      "INITIATING_DOCUMENT_DT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LRESPT_I_S_U_TR] ON PIMS_LEASE_RESPONSIBILITY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_RESPONSIBILITY_TYPE_CODE = deleted.LEASE_RESPONSIBILITY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_RESPONSIBILITY_TYPE
    set "LEASE_RESPONSIBILITY_TYPE_CODE" = inserted."LEASE_RESPONSIBILITY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_RESPONSIBILITY_TYPE
    inner join inserted
    on (PIMS_LEASE_RESPONSIBILITY_TYPE.LEASE_RESPONSIBILITY_TYPE_CODE = inserted.LEASE_RESPONSIBILITY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPCNT_A_S_IUD_TR] ON PIMS_PROPERTY_CONTACT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_CONTACT_HIST set END_DATE_HIST = @curr_date where PROPERTY_CONTACT_ID in (select PROPERTY_CONTACT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_CONTACT_HIST ([PROPERTY_CONTACT_ID], [PROPERTY_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [PURPOSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_CONTACT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_CONTACT_ID], [PROPERTY_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [PURPOSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_CONTACT_H_ID_SEQ]) as [_PROPERTY_CONTACT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSRCHS_I_S_I_TR] ON PIMS_RESEARCH_FILE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE_STATUS_TYPE ("RESEARCH_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "RESEARCH_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPDOC_I_S_I_TR] ON PIMS_DISPOSITION_FILE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE_DOCUMENT ("DISPOSITION_FILE_DOCUMENT_ID",
      "DISPOSITION_FILE_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID")
    select "DISPOSITION_FILE_DOCUMENT_ID",
      "DISPOSITION_FILE_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSTKHL_I_S_U_TR] ON PIMS_LEASE_STAKEHOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_STAKEHOLDER_ID = deleted.LEASE_STAKEHOLDER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_STAKEHOLDER
    set "LEASE_STAKEHOLDER_ID" = inserted."LEASE_STAKEHOLDER_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "LESSOR_TYPE_CODE" = inserted."LESSOR_TYPE_CODE",
      "LEASE_STAKEHOLDER_TYPE_CODE" = inserted."LEASE_STAKEHOLDER_TYPE_CODE",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_STAKEHOLDER
    inner join inserted
    on (PIMS_LEASE_STAKEHOLDER.LEASE_STAKEHOLDER_ID = inserted.LEASE_STAKEHOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPORG_A_S_IUD_TR] ON PIMS_PROPERTY_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where PROPERTY_ORGANIZATION_ID in (select PROPERTY_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ORGANIZATION_HIST ([PROPERTY_ORGANIZATION_ID], [PROPERTY_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ORGANIZATION_ID], [PROPERTY_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ]) as [_PROPERTY_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSHPRT_I_S_I_TR] ON PIMS_RESEARCH_PURPOSE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_PURPOSE_TYPE ("RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPNOT_I_S_I_TR] ON PIMS_DISPOSITION_FILE_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE_NOTE ("DISPOSITION_FILE_NOTE_ID",
      "DISPOSITION_FILE_ID",
      "NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_FILE_NOTE_ID",
      "DISPOSITION_FILE_ID",
      "NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSKCRQ_I_S_U_TR] ON PIMS_LEASE_STAKEHOLDER_COMP_REQ INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_STAKEHOLDER_COMP_REQ_ID = deleted.LEASE_STAKEHOLDER_COMP_REQ_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_STAKEHOLDER_COMP_REQ
    set "LEASE_STAKEHOLDER_COMP_REQ_ID" = inserted."LEASE_STAKEHOLDER_COMP_REQ_ID",
      "LEASE_STAKEHOLDER_ID" = inserted."LEASE_STAKEHOLDER_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_STAKEHOLDER_COMP_REQ
    inner join inserted
    on (PIMS_LEASE_STAKEHOLDER_COMP_REQ.LEASE_STAKEHOLDER_COMP_REQ_ID = inserted.LEASE_STAKEHOLDER_COMP_REQ_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRAC_A_S_IUD_TR] ON PIMS_PROP_PROP_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_PROP_ACTIVITY_HIST set END_DATE_HIST = @curr_date where PROP_PROP_ACTIVITY_ID in (select PROP_PROP_ACTIVITY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_PROP_ACTIVITY_HIST ([PROP_PROP_ACTIVITY_ID], [PROPERTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_PROP_ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_PROP_ACTIVITY_ID], [PROPERTY_ID], [PIMS_PROPERTY_ACTIVITY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_PROP_ACTIVITY_H_ID_SEQ]) as [_PROP_PROP_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RESPCD_I_S_I_TR] ON PIMS_RESPONSIBILITY_CODE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESPONSIBILITY_CODE ("ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPPRP_I_S_I_TR] ON PIMS_DISPOSITION_FILE_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE_PROPERTY ("DISPOSITION_FILE_PROPERTY_ID",
      "DISPOSITION_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_NAME",
      "LOCATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_FILE_PROPERTY_ID",
      "DISPOSITION_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_NAME",
      "LOCATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_STKHLT_I_S_U_TR] ON PIMS_LEASE_STAKEHOLDER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_STAKEHOLDER_TYPE_CODE = deleted.LEASE_STAKEHOLDER_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_STAKEHOLDER_TYPE
    set "LEASE_STAKEHOLDER_TYPE_CODE" = inserted."LEASE_STAKEHOLDER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_PAYABLE_RELATED" = inserted."IS_PAYABLE_RELATED",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_STAKEHOLDER_TYPE
    inner join inserted
    on (PIMS_LEASE_STAKEHOLDER_TYPE.LEASE_STAKEHOLDER_TYPE_CODE = inserted.LEASE_STAKEHOLDER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRPU_A_S_IUD_TR] ON PIMS_PROP_PROP_PURPOSE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_PROP_PURPOSE_HIST set END_DATE_HIST = @curr_date where PROP_PROP_PURPOSE_ID in (select PROP_PROP_PURPOSE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_PROP_PURPOSE_HIST ([PROP_PROP_PURPOSE_ID], [PROPERTY_ID], [PROPERTY_PURPOSE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_PROP_PURPOSE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_PROP_PURPOSE_ID], [PROPERTY_ID], [PROPERTY_PURPOSE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_PROP_PURPOSE_H_ID_SEQ]) as [_PROP_PROP_PURPOSE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ROLE_I_S_I_TR] ON PIMS_ROLE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ROLE ("ROLE_ID",
      "ROLE_UID",
      "KEYCLOAK_GROUP_ID",
      "NAME",
      "DESCRIPTION",
      "IS_PUBLIC",
      "IS_DISABLED",
      "SORT_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ROLE_ID",
      "ROLE_UID",
      "KEYCLOAK_GROUP_ID",
      "NAME",
      "DESCRIPTION",
      "IS_PUBLIC",
      "IS_DISABLED",
      "SORT_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPFST_I_S_I_TR] ON PIMS_DISPOSITION_FILE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE_STATUS_TYPE ("DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSSTYP_I_S_U_TR] ON PIMS_LEASE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_STATUS_TYPE_CODE = deleted.LEASE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_STATUS_TYPE
    set "LEASE_STATUS_TYPE_CODE" = inserted."LEASE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_STATUS_TYPE.LEASE_STATUS_TYPE_CODE = inserted.LEASE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRTY_A_S_IUD_TR] ON PIMS_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_HIST set END_DATE_HIST = @curr_date where PROPERTY_ID in (select PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_HIST ([PROPERTY_ID], [PROPERTY_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [LAND_LEGAL_DESCRIPTION], [GENERAL_LOCATION], [SURVEY_PLAN_NUMBER], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [NOTES], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_RETIRED], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ADDITIONAL_DETAILS], [IS_UTILITIES_PAYABLE], [IS_TAXES_PAYABLE], [BAND_NAME], [RESERVE_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ID], [PROPERTY_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [LAND_LEGAL_DESCRIPTION], [GENERAL_LOCATION], [SURVEY_PLAN_NUMBER], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [NOTES], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_RETIRED], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ADDITIONAL_DETAILS], [IS_UTILITIES_PAYABLE], [IS_TAXES_PAYABLE], [BAND_NAME], [RESERVE_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_H_ID_SEQ]) as [_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ROLCLM_I_S_I_TR] ON PIMS_ROLE_CLAIM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ROLE_CLAIM ("ROLE_CLAIM_ID",
      "ROLE_ID",
      "CLAIM_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ROLE_CLAIM_ID",
      "ROLE_ID",
      "CLAIM_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPFTM_I_S_I_TR] ON PIMS_DISPOSITION_FILE_TEAM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE_TEAM ("DISPOSITION_FILE_TEAM_ID",
      "DISPOSITION_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "DSP_FL_TEAM_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_FILE_TEAM_ID",
      "DISPOSITION_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "DSP_FL_TEAM_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSSRTY_I_S_U_TR] ON PIMS_LESSOR_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LESSOR_TYPE_CODE = deleted.LESSOR_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LESSOR_TYPE
    set "LESSOR_TYPE_CODE" = inserted."LESSOR_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LESSOR_TYPE
    inner join inserted
    on (PIMS_LESSOR_TYPE.LESSOR_TYPE_CODE = inserted.LESSOR_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRSCRC_A_S_IUD_TR] ON PIMS_PROPERTY_RESEARCH_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_RESEARCH_FILE_HIST set END_DATE_HIST = @curr_date where PROPERTY_RESEARCH_FILE_ID in (select PROPERTY_RESEARCH_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_RESEARCH_FILE_HIST ([PROPERTY_RESEARCH_FILE_ID], [PROPERTY_ID], [RESEARCH_FILE_ID], [PROPERTY_NAME], [DISPLAY_ORDER], [IS_LEGAL_OPINION_REQUIRED], [IS_LEGAL_OPINION_OBTAINED], [DOCUMENT_REFERENCE], [RESEARCH_SUMMARY], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_RESEARCH_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_RESEARCH_FILE_ID], [PROPERTY_ID], [RESEARCH_FILE_ID], [PROPERTY_NAME], [DISPLAY_ORDER], [IS_LEGAL_OPINION_REQUIRED], [IS_LEGAL_OPINION_OBTAINED], [DOCUMENT_REFERENCE], [RESEARCH_SUMMARY], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_RESEARCH_FILE_H_ID_SEQ]) as [_PROPERTY_RESEARCH_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SECDEP_I_S_I_TR] ON PIMS_SECURITY_DEPOSIT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT ("SECURITY_DEPOSIT_ID",
      "LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE",
      "OTHER_DEPOSIT_TYPE_DESC",
      "DESCRIPTION",
      "AMOUNT_PAID",
      "DEPOSIT_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_ID",
      "LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE",
      "OTHER_DEPOSIT_TYPE_DESC",
      "DESCRIPTION",
      "AMOUNT_PAID",
      "DEPOSIT_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPFTY_I_S_I_TR] ON PIMS_DISPOSITION_FUNDING_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FUNDING_TYPE ("DISPOSITION_FUNDING_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISPOSITION_FUNDING_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LTRTYP_I_S_U_TR] ON PIMS_LETTER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LETTER_TYPE_CODE = deleted.LETTER_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LETTER_TYPE
    set "LETTER_TYPE_CODE" = inserted."LETTER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LETTER_TYPE
    inner join inserted
    on (PIMS_LETTER_TYPE.LETTER_TYPE_CODE = inserted.LETTER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RESPCD_A_S_IUD_TR] ON PIMS_RESPONSIBILITY_CODE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESPONSIBILITY_CODE_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESPONSIBILITY_CODE_HIST ([ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESPONSIBILITY_CODE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESPONSIBILITY_CODE_H_ID_SEQ]) as [_RESPONSIBILITY_CODE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SCDPHL_I_S_I_TR] ON PIMS_SECURITY_DEPOSIT_HOLDER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT_HOLDER ("SECURITY_DEPOSIT_HOLDER_ID",
      "SECURITY_DEPOSIT_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_HOLDER_ID",
      "SECURITY_DEPOSIT_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPIDT_I_S_I_TR] ON PIMS_DISPOSITION_INITIATING_DOC_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_INITIATING_DOC_TYPE ("DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_NOTE_I_S_U_TR] ON PIMS_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.NOTE_ID = deleted.NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_NOTE
    set "NOTE_ID" = inserted."NOTE_ID",
      "NOTE_TXT" = inserted."NOTE_TXT",
      "IS_SYSTEM_GENERATED" = inserted."IS_SYSTEM_GENERATED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_NOTE
    inner join inserted
    on (PIMS_NOTE.NOTE_ID = inserted.NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RESRCH_A_S_IUD_TR] ON PIMS_RESEARCH_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_ID in (select RESEARCH_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_HIST ([RESEARCH_FILE_ID], [RESEARCH_FILE_STATUS_TYPE_CODE], [REQUEST_SOURCE_TYPE_CODE], [REQUESTOR_NAME], [REQUESTOR_ORGANIZATION], [NAME], [RFILE_NUMBER], [REQUEST_DATE], [ROAD_NAME], [ROAD_ALIAS], [REQUEST_DESCRIPTION], [REQUEST_SOURCE_DESCRIPTION], [RESEARCH_RESULT], [IS_EXPROPRIATION], [EXPROPRIATION_NOTES], [RESEARCH_COMPLETION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_ID], [RESEARCH_FILE_STATUS_TYPE_CODE], [REQUEST_SOURCE_TYPE_CODE], [REQUESTOR_NAME], [REQUESTOR_ORGANIZATION], [NAME], [RFILE_NUMBER], [REQUEST_DATE], [ROAD_NAME], [ROAD_ALIAS], [REQUEST_DESCRIPTION], [REQUEST_SOURCE_DESCRIPTION], [RESEARCH_RESULT], [IS_EXPROPRIATION], [EXPROPRIATION_NOTES], [RESEARCH_COMPLETION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_H_ID_SEQ]) as [_RESEARCH_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SDRTRN_I_S_I_TR] ON PIMS_SECURITY_DEPOSIT_RETURN INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT_RETURN ("SECURITY_DEPOSIT_RETURN_ID",
      "SECURITY_DEPOSIT_ID",
      "TERMINATION_DATE",
      "CLAIMS_AGAINST",
      "RETURN_AMOUNT",
      "RETURN_DATE",
      "INTEREST_PAID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_RETURN_ID",
      "SECURITY_DEPOSIT_ID",
      "TERMINATION_DATE",
      "CLAIMS_AGAINST",
      "RETURN_AMOUNT",
      "RETURN_DATE",
      "INTEREST_PAID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPOFR_I_S_I_TR] ON PIMS_DISPOSITION_OFFER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_OFFER ("DISPOSITION_OFFER_ID",
      "DISPOSITION_FILE_ID",
      "DISPOSITION_OFFER_STATUS_TYPE_CODE",
      "OFFER_NAME",
      "OFFER_DT",
      "OFFER_EXPIRY_DT",
      "OFFER_AMT",
      "OFFER_NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_OFFER_ID",
      "DISPOSITION_FILE_ID",
      "DISPOSITION_OFFER_STATUS_TYPE_CODE",
      "OFFER_NAME",
      "OFFER_DT",
      "OFFER_EXPIRY_DT",
      "OFFER_AMT",
      "OFFER_NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORGIDT_I_S_U_TR] ON PIMS_ORG_IDENTIFIER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORG_IDENTIFIER_TYPE_CODE = deleted.ORG_IDENTIFIER_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORG_IDENTIFIER_TYPE
    set "ORG_IDENTIFIER_TYPE_CODE" = inserted."ORG_IDENTIFIER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORG_IDENTIFIER_TYPE
    inner join inserted
    on (PIMS_ORG_IDENTIFIER_TYPE.ORG_IDENTIFIER_TYPE_CODE = inserted.ORG_IDENTIFIER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RFLDOC_A_S_IUD_TR] ON PIMS_RESEARCH_FILE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_DOCUMENT_ID in (select RESEARCH_FILE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_DOCUMENT_HIST ([RESEARCH_FILE_DOCUMENT_ID], [RESEARCH_FILE_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_DOCUMENT_ID], [RESEARCH_FILE_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_DOCUMENT_H_ID_SEQ]) as [_RESEARCH_FILE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SCDPRH_I_S_I_TR] ON PIMS_SECURITY_DEPOSIT_RETURN_HOLDER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT_RETURN_HOLDER ("SECURITY_DEPOSIT_RETURN_HOLDER_ID",
      "SECURITY_DEPOSIT_RETURN_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_RETURN_HOLDER_ID",
      "SECURITY_DEPOSIT_RETURN_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPOFT_I_S_I_TR] ON PIMS_DISPOSITION_OFFER_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_OFFER_STATUS_TYPE ("DISPOSITION_OFFER_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISPOSITION_OFFER_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORG_I_S_U_TR] ON PIMS_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORGANIZATION_ID = deleted.ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORGANIZATION
    set "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID" = inserted."PRNT_ORGANIZATION_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE" = inserted."ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE" = inserted."ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER" = inserted."ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME" = inserted."ORGANIZATION_NAME",
      "ORGANIZATION_ALIAS" = inserted."ORGANIZATION_ALIAS",
      "INCORPORATION_NUMBER" = inserted."INCORPORATION_NUMBER",
      "WEBSITE" = inserted."WEBSITE",
      "COMMENT" = inserted."COMMENT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION
    inner join inserted
    on (PIMS_ORGANIZATION.ORGANIZATION_ID = inserted.ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RFLNOT_A_S_IUD_TR] ON PIMS_RESEARCH_FILE_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_NOTE_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_NOTE_ID in (select RESEARCH_FILE_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_NOTE_HIST ([RESEARCH_FILE_NOTE_ID], [RESEARCH_FILE_ID], [NOTE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_NOTE_ID], [RESEARCH_FILE_ID], [NOTE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_NOTE_H_ID_SEQ]) as [_RESEARCH_FILE_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SECDPT_I_S_I_TR] ON PIMS_SECURITY_DEPOSIT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT_TYPE ("SECURITY_DEPOSIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "SECURITY_DEPOSIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPPUR_I_S_I_TR] ON PIMS_DISPOSITION_PURCHASER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_PURCHASER ("DISPOSITION_PURCHASER_ID",
      "DISPOSITION_SALE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_PURCHASER_ID",
      "DISPOSITION_SALE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORGADD_I_S_U_TR] ON PIMS_ORGANIZATION_ADDRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORGANIZATION_ADDRESS_ID = deleted.ORGANIZATION_ADDRESS_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORGANIZATION_ADDRESS
    set "ORGANIZATION_ADDRESS_ID" = inserted."ORGANIZATION_ADDRESS_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE" = inserted."ADDRESS_USAGE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION_ADDRESS
    inner join inserted
    on (PIMS_ORGANIZATION_ADDRESS.ORGANIZATION_ADDRESS_ID = inserted.ORGANIZATION_ADDRESS_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RFLPRJ_A_S_IUD_TR] ON PIMS_RESEARCH_FILE_PROJECT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_PROJECT_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_PROJECT_ID in (select RESEARCH_FILE_PROJECT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_PROJECT_HIST ([RESEARCH_FILE_PROJECT_ID], [RESEARCH_FILE_ID], [PROJECT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_PROJECT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_PROJECT_ID], [RESEARCH_FILE_ID], [PROJECT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_PROJECT_H_ID_SEQ]) as [_RESEARCH_FILE_PROJECT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_STAVBL_I_S_I_TR] ON PIMS_STATIC_VARIABLE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_STATIC_VARIABLE ("STATIC_VARIABLE_NAME",
      "STATIC_VARIABLE_VALUE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "STATIC_VARIABLE_NAME",
      "STATIC_VARIABLE_VALUE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPSAL_I_S_I_TR] ON PIMS_DISPOSITION_SALE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_SALE ("DISPOSITION_SALE_ID",
      "DISPOSITION_FILE_ID",
      "DSP_PURCH_AGENT_ID",
      "DSP_PURCH_SOLICITOR_ID",
      "FINAL_CONDITION_REMOVAL_DT",
      "SALE_COMPLETION_DT",
      "SALE_FISCAL_YEAR",
      "SALE_FINAL_AMT",
      "REALTOR_COMMISSION_AMT",
      "IS_GST_REQUIRED",
      "GST_COLLECTED_AMT",
      "NET_BOOK_AMT",
      "TOTAL_COST_AMT",
      "SPP_AMT",
      "REMEDIATION_AMT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_SALE_ID",
      "DISPOSITION_FILE_ID",
      "DSP_PURCH_AGENT_ID",
      "DSP_PURCH_SOLICITOR_ID",
      "FINAL_CONDITION_REMOVAL_DT",
      "SALE_COMPLETION_DT",
      "SALE_FISCAL_YEAR",
      "SALE_FINAL_AMT",
      "REALTOR_COMMISSION_AMT",
      "IS_GST_REQUIRED",
      "GST_COLLECTED_AMT",
      "NET_BOOK_AMT",
      "TOTAL_COST_AMT",
      "SPP_AMT",
      "REMEDIATION_AMT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORGTYP_I_S_U_TR] ON PIMS_ORGANIZATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORGANIZATION_TYPE_CODE = deleted.ORGANIZATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORGANIZATION_TYPE
    set "ORGANIZATION_TYPE_CODE" = inserted."ORGANIZATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION_TYPE
    inner join inserted
    on (PIMS_ORGANIZATION_TYPE.ORGANIZATION_TYPE_CODE = inserted.ORGANIZATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RGNUSR_A_S_IUD_TR] ON PIMS_REGION_USER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_REGION_USER_HIST set END_DATE_HIST = @curr_date where REGION_USER_ID in (select REGION_USER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_REGION_USER_HIST ([REGION_USER_ID], [REGION_CODE], [USER_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _REGION_USER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [REGION_USER_ID], [REGION_CODE], [USER_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_REGION_USER_H_ID_SEQ]) as [_REGION_USER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SBFLIT_I_S_I_TR] ON PIMS_SUBFILE_INTEREST_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SUBFILE_INTEREST_TYPE ("SUBFILE_INTEREST_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "SUBFILE_INTEREST_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPSTY_I_S_I_TR] ON PIMS_DISPOSITION_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_STATUS_TYPE ("DISPOSITION_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISPOSITION_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PMTITM_I_S_U_TR] ON PIMS_PAYMENT_ITEM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PAYMENT_ITEM_TYPE_CODE = deleted.PAYMENT_ITEM_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PAYMENT_ITEM_TYPE
    set "PAYMENT_ITEM_TYPE_CODE" = inserted."PAYMENT_ITEM_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PAYMENT_ITEM_TYPE
    inner join inserted
    on (PIMS_PAYMENT_ITEM_TYPE.PAYMENT_ITEM_TYPE_CODE = inserted.PAYMENT_ITEM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ROLCLM_A_S_IUD_TR] ON PIMS_ROLE_CLAIM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ROLE_CLAIM_HIST set END_DATE_HIST = @curr_date where ROLE_CLAIM_ID in (select ROLE_CLAIM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ROLE_CLAIM_HIST ([ROLE_CLAIM_ID], [ROLE_ID], [CLAIM_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ROLE_CLAIM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ROLE_CLAIM_ID], [ROLE_ID], [CLAIM_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ROLE_CLAIM_H_ID_SEQ]) as [_ROLE_CLAIM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SPDCLT_I_S_I_TR] ON PIMS_SURPLUS_DECLARATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SURPLUS_DECLARATION_TYPE ("SURPLUS_DECLARATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "SURPLUS_DECLARATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPTYP_I_S_I_TR] ON PIMS_DISPOSITION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_TYPE ("DISPOSITION_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISPOSITION_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERSON_I_S_U_TR] ON PIMS_PERSON INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PERSON_ID = deleted.PERSON_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PERSON
    set "PERSON_ID" = inserted."PERSON_ID",
      "SURNAME" = inserted."SURNAME",
      "FIRST_NAME" = inserted."FIRST_NAME",
      "MIDDLE_NAMES" = inserted."MIDDLE_NAMES",
      "NAME_SUFFIX" = inserted."NAME_SUFFIX",
      "PREFERRED_NAME" = inserted."PREFERRED_NAME",
      "BIRTH_DATE" = inserted."BIRTH_DATE",
      "COMMENT" = inserted."COMMENT",
      "ADDRESS_COMMENT" = inserted."ADDRESS_COMMENT",
      "USE_ORGANIZATION_ADDRESS" = inserted."USE_ORGANIZATION_ADDRESS",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PERSON
    inner join inserted
    on (PIMS_PERSON.PERSON_ID = inserted.PERSON_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ROLE_A_S_IUD_TR] ON PIMS_ROLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ROLE_HIST set END_DATE_HIST = @curr_date where ROLE_ID in (select ROLE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ROLE_HIST ([ROLE_ID], [ROLE_UID], [KEYCLOAK_GROUP_ID], [NAME], [DESCRIPTION], [IS_PUBLIC], [IS_DISABLED], [SORT_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ROLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ROLE_ID], [ROLE_UID], [KEYCLOAK_GROUP_ID], [NAME], [DESCRIPTION], [IS_PUBLIC], [IS_DISABLED], [SORT_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ROLE_H_ID_SEQ]) as [_ROLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SRVPLT_I_S_I_TR] ON PIMS_SURVEY_PLAN_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SURVEY_PLAN_TYPE ("SURVEY_PLAN_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "SURVEY_PLAN_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSTRCT_I_S_I_TR] ON PIMS_DISTRICT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISTRICT ("DISTRICT_CODE",
      "REGION_CODE",
      "DISTRICT_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISTRICT_CODE",
      "REGION_CODE",
      "DISTRICT_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERADD_I_S_U_TR] ON PIMS_PERSON_ADDRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PERSON_ADDRESS_ID = deleted.PERSON_ADDRESS_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PERSON_ADDRESS
    set "PERSON_ADDRESS_ID" = inserted."PERSON_ADDRESS_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE" = inserted."ADDRESS_USAGE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PERSON_ADDRESS
    inner join inserted
    on (PIMS_PERSON_ADDRESS.PERSON_ADDRESS_ID = inserted.PERSON_ADDRESS_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSFLPR_A_S_IUD_TR] ON PIMS_RESEARCH_FILE_PURPOSE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_PURPOSE_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_PURPOSE_ID in (select RESEARCH_FILE_PURPOSE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_PURPOSE_HIST ([RESEARCH_FILE_PURPOSE_ID], [RESEARCH_FILE_ID], [RESEARCH_PURPOSE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_PURPOSE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_PURPOSE_ID], [RESEARCH_FILE_ID], [RESEARCH_PURPOSE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_PURPOSE_H_ID_SEQ]) as [_RESEARCH_FILE_PURPOSE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_TAKE_I_S_I_TR] ON PIMS_TAKE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE ("TAKE_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "TAKE_TYPE_CODE",
      "TAKE_STATUS_TYPE_CODE",
      "TAKE_SITE_CONTAM_TYPE_CODE",
      "AREA_UNIT_TYPE_CODE",
      "LAND_ACT_TYPE_CODE",
      "DESCRIPTION",
      "COMPLETION_DT",
      "IS_NEW_HIGHWAY_DEDICATION",
      "NEW_HIGHWAY_DEDICATION_AREA",
      "IS_ACQUIRED_FOR_INVENTORY",
      "IS_NEW_INTEREST_IN_SRW",
      "STATUTORY_RIGHT_OF_WAY_AREA",
      "SRW_END_DT",
      "IS_NEW_LICENSE_TO_CONSTRUCT",
      "LICENSE_TO_CONSTRUCT_AREA",
      "LTC_END_DT",
      "IS_NEW_LAND_ACT",
      "LAND_ACT_AREA",
      "LAND_ACT_END_DT",
      "IS_THERE_SURPLUS",
      "SURPLUS_AREA",
      "IS_ACTIVE_LEASE",
      "ACTIVE_LEASE_AREA",
      "ACTIVE_LEASE_END_DT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "TAKE_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "TAKE_TYPE_CODE",
      "TAKE_STATUS_TYPE_CODE",
      "TAKE_SITE_CONTAM_TYPE_CODE",
      "AREA_UNIT_TYPE_CODE",
      "LAND_ACT_TYPE_CODE",
      "DESCRIPTION",
      "COMPLETION_DT",
      "IS_NEW_HIGHWAY_DEDICATION",
      "NEW_HIGHWAY_DEDICATION_AREA",
      "IS_ACQUIRED_FOR_INVENTORY",
      "IS_NEW_INTEREST_IN_SRW",
      "STATUTORY_RIGHT_OF_WAY_AREA",
      "SRW_END_DT",
      "IS_NEW_LICENSE_TO_CONSTRUCT",
      "LICENSE_TO_CONSTRUCT_AREA",
      "LTC_END_DT",
      "IS_NEW_LAND_ACT",
      "LAND_ACT_AREA",
      "LAND_ACT_END_DT",
      "IS_THERE_SURPLUS",
      "SURPLUS_AREA",
      "IS_ACTIVE_LEASE",
      "ACTIVE_LEASE_AREA",
      "ACTIVE_LEASE_END_DT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCMNT_I_S_I_TR] ON PIMS_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT ("DOCUMENT_ID",
      "DOCUMENT_TYPE_ID",
      "DOCUMENT_STATUS_TYPE_CODE",
      "FILE_NAME",
      "MAYAN_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "DOCUMENT_EXTERNAL_ID")
    select "DOCUMENT_ID",
      "DOCUMENT_TYPE_ID",
      "DOCUMENT_STATUS_TYPE_CODE",
      "FILE_NAME",
      "MAYAN_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "DOCUMENT_EXTERNAL_ID"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERORG_I_S_U_TR] ON PIMS_PERSON_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PERSON_ORGANIZATION_ID = deleted.PERSON_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PERSON_ORGANIZATION
    set "PERSON_ORGANIZATION_ID" = inserted."PERSON_ORGANIZATION_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PERSON_ORGANIZATION
    inner join inserted
    on (PIMS_PERSON_ORGANIZATION.PERSON_ORGANIZATION_ID = inserted.PERSON_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SCDPHL_A_S_IUD_TR] ON PIMS_SECURITY_DEPOSIT_HOLDER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_HOLDER_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_HOLDER_ID in (select SECURITY_DEPOSIT_HOLDER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_HOLDER_HIST ([SECURITY_DEPOSIT_HOLDER_ID], [SECURITY_DEPOSIT_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_HOLDER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_HOLDER_ID], [SECURITY_DEPOSIT_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER_H_ID_SEQ]) as [_SECURITY_DEPOSIT_HOLDER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_TKCONT_I_S_I_TR] ON PIMS_TAKE_SITE_CONTAM_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE_SITE_CONTAM_TYPE ("TAKE_SITE_CONTAM_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TAKE_SITE_CONTAM_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DCCTSB_I_S_I_TR] ON PIMS_DOCUMENT_CATEGORY_SUBTYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_CATEGORY_SUBTYPE ("DOCUMENT_CATEGORY_SUBTYPE_ID",
      "DOCUMENT_CATEGORY_TYPE_CODE",
      "DOCUMENT_TYPE_ID",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DOCUMENT_CATEGORY_SUBTYPE_ID",
      "DOCUMENT_CATEGORY_TYPE_CODE",
      "DOCUMENT_TYPE_ID",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PPHSTT_I_S_U_TR] ON PIMS_PPH_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PPH_STATUS_TYPE_CODE = deleted.PPH_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PPH_STATUS_TYPE
    set "PPH_STATUS_TYPE_CODE" = inserted."PPH_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PPH_STATUS_TYPE
    inner join inserted
    on (PIMS_PPH_STATUS_TYPE.PPH_STATUS_TYPE_CODE = inserted.PPH_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SCDPRH_A_S_IUD_TR] ON PIMS_SECURITY_DEPOSIT_RETURN_HOLDER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_RETURN_HOLDER_ID in (select SECURITY_DEPOSIT_RETURN_HOLDER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST ([SECURITY_DEPOSIT_RETURN_HOLDER_ID], [SECURITY_DEPOSIT_RETURN_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_RETURN_HOLDER_ID], [SECURITY_DEPOSIT_RETURN_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_H_ID_SEQ]) as [_SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_TKSTST_I_S_I_TR] ON PIMS_TAKE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE_STATUS_TYPE ("TAKE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TAKE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCCAT_I_S_I_TR] ON PIMS_DOCUMENT_CATEGORY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_CATEGORY_TYPE ("DOCUMENT_CATEGORY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DOCUMENT_CATEGORY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRSPRP_I_S_U_TR] ON PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PRF_PROP_RESEARCH_PURPOSE_ID = deleted.PRF_PROP_RESEARCH_PURPOSE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE
    set "PRF_PROP_RESEARCH_PURPOSE_ID" = inserted."PRF_PROP_RESEARCH_PURPOSE_ID",
      "PROPERTY_RESEARCH_FILE_ID" = inserted."PROPERTY_RESEARCH_FILE_ID",
      "PROP_RESEARCH_PURPOSE_TYPE_CODE" = inserted."PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE
    inner join inserted
    on (PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE.PRF_PROP_RESEARCH_PURPOSE_ID = inserted.PRF_PROP_RESEARCH_PURPOSE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SDRTRN_A_S_IUD_TR] ON PIMS_SECURITY_DEPOSIT_RETURN FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_RETURN_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_RETURN_ID in (select SECURITY_DEPOSIT_RETURN_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_RETURN_HIST ([SECURITY_DEPOSIT_RETURN_ID], [SECURITY_DEPOSIT_ID], [TERMINATION_DATE], [CLAIMS_AGAINST], [RETURN_AMOUNT], [RETURN_DATE], [INTEREST_PAID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_RETURN_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_RETURN_ID], [SECURITY_DEPOSIT_ID], [TERMINATION_DATE], [CLAIMS_AGAINST], [RETURN_AMOUNT], [RETURN_DATE], [INTEREST_PAID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_H_ID_SEQ]) as [_SECURITY_DEPOSIT_RETURN_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_TKTYPE_I_S_I_TR] ON PIMS_TAKE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE_TYPE ("TAKE_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TAKE_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCFMT_I_S_I_TR] ON PIMS_DOCUMENT_FORMAT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_FORMAT_TYPE ("DOCUMENT_FORMAT_TYPE_CODE",
      "DESCRIPTION",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DOCUMENT_FORMAT_TYPE_CODE",
      "DESCRIPTION",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRODCT_I_S_U_TR] ON PIMS_PRODUCT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PRODUCT
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "START_DATE" = inserted."START_DATE",
      "COST_ESTIMATE" = inserted."COST_ESTIMATE",
      "COST_ESTIMATE_DATE" = inserted."COST_ESTIMATE_DATE",
      "OBJECTIVE" = inserted."OBJECTIVE",
      "SCOPE" = inserted."SCOPE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PRODUCT
    inner join inserted
    on (PIMS_PRODUCT.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SECDEP_A_S_IUD_TR] ON PIMS_SECURITY_DEPOSIT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_ID in (select SECURITY_DEPOSIT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_HIST ([SECURITY_DEPOSIT_ID], [LEASE_ID], [SECURITY_DEPOSIT_TYPE_CODE], [OTHER_DEPOSIT_TYPE_DESC], [DESCRIPTION], [AMOUNT_PAID], [DEPOSIT_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_ID], [LEASE_ID], [SECURITY_DEPOSIT_TYPE_CODE], [OTHER_DEPOSIT_TYPE_DESC], [DESCRIPTION], [AMOUNT_PAID], [DEPOSIT_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_H_ID_SEQ]) as [_SECURITY_DEPOSIT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_TENNTX_I_S_I_TR] ON PIMS_TENANT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TENANT ("TENANT_ID",
      "CODE",
      "NAME",
      "DESCRIPTION",
      "SETTINGS",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TENANT_ID",
      "CODE",
      "NAME",
      "DESCRIPTION",
      "SETTINGS",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCQUE_I_S_I_TR] ON PIMS_DOCUMENT_QUEUE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_QUEUE ("DOCUMENT_QUEUE_ID",
      "DOCUMENT_ID",
      "DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DATA_SOURCE_TYPE_CODE",
      "PROPERTY_ACTIVITY_DOCUMENT_ID",
      "ACQUISITION_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_DOCUMENT_ID",
      "LEASE_DOCUMENT_ID",
      "DISPOSITION_FILE_DOCUMENT_ID",
      "FILE_NAME",
      "DOCUMENT_EXTERNAL_ID",
      "DOCUMENT_METADATA",
      "DOC_PROCESS_START_DT",
      "DOC_PROCESS_END_DT",
      "DOC_PROCESS_RETRIES",
      "MAYAN_ERROR",
      "DOCUMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DOCUMENT_QUEUE_ID",
      "DOCUMENT_ID",
      "DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DATA_SOURCE_TYPE_CODE",
      "PROPERTY_ACTIVITY_DOCUMENT_ID",
      "ACQUISITION_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_DOCUMENT_ID",
      "LEASE_DOCUMENT_ID",
      "DISPOSITION_FILE_DOCUMENT_ID",
      "FILE_NAME",
      "DOCUMENT_EXTERNAL_ID",
      "DOCUMENT_METADATA",
      "DOC_PROCESS_START_DT",
      "DOC_PROCESS_END_DT",
      "DOC_PROCESS_RETRIES",
      "MAYAN_ERROR",
      "DOCUMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PROJCT_I_S_U_TR] ON PIMS_PROJECT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT
    set "ID" = inserted."ID",
      "PROJECT_STATUS_TYPE_CODE" = inserted."PROJECT_STATUS_TYPE_CODE",
      "BUSINESS_FUNCTION_CODE_ID" = inserted."BUSINESS_FUNCTION_CODE_ID",
      "COST_TYPE_CODE_ID" = inserted."COST_TYPE_CODE_ID",
      "WORK_ACTIVITY_CODE_ID" = inserted."WORK_ACTIVITY_CODE_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT
    inner join inserted
    on (PIMS_PROJECT.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_STAVBL_A_S_IUD_TR] ON PIMS_STATIC_VARIABLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_STATIC_VARIABLE_HIST set END_DATE_HIST = @curr_date where STATIC_VARIABLE_NAME in (select STATIC_VARIABLE_NAME from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_STATIC_VARIABLE_HIST ([STATIC_VARIABLE_NAME], [STATIC_VARIABLE_VALUE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _STATIC_VARIABLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [STATIC_VARIABLE_NAME], [STATIC_VARIABLE_VALUE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_STATIC_VARIABLE_H_ID_SEQ]) as [_STATIC_VARIABLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USER_I_S_I_TR] ON PIMS_USER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_USER ("USER_ID",
      "PERSON_ID",
      "USER_TYPE_CODE",
      "BUSINESS_IDENTIFIER_VALUE",
      "GUID_IDENTIFIER_VALUE",
      "POSITION",
      "NOTE",
      "LAST_LOGIN",
      "APPROVED_BY_ID",
      "ISSUE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "USER_ID",
      "PERSON_ID",
      "USER_TYPE_CODE",
      "BUSINESS_IDENTIFIER_VALUE",
      "GUID_IDENTIFIER_VALUE",
      "POSITION",
      "NOTE",
      "LAST_LOGIN",
      "APPROVED_BY_ID",
      "ISSUE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCQST_I_S_I_TR] ON PIMS_DOCUMENT_QUEUE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_QUEUE_STATUS_TYPE ("DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRJDOC_I_S_U_TR] ON PIMS_PROJECT_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_DOCUMENT_ID = deleted.PROJECT_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_DOCUMENT
    set "PROJECT_DOCUMENT_ID" = inserted."PROJECT_DOCUMENT_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_DOCUMENT
    inner join inserted
    on (PIMS_PROJECT_DOCUMENT.PROJECT_DOCUMENT_ID = inserted.PROJECT_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_TAKE_A_S_IUD_TR] ON PIMS_TAKE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_TAKE_HIST set END_DATE_HIST = @curr_date where TAKE_ID in (select TAKE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_TAKE_HIST ([TAKE_ID], [PROPERTY_ACQUISITION_FILE_ID], [TAKE_TYPE_CODE], [TAKE_STATUS_TYPE_CODE], [TAKE_SITE_CONTAM_TYPE_CODE], [AREA_UNIT_TYPE_CODE], [LAND_ACT_TYPE_CODE], [DESCRIPTION], [COMPLETION_DT], [IS_NEW_HIGHWAY_DEDICATION], [NEW_HIGHWAY_DEDICATION_AREA], [IS_ACQUIRED_FOR_INVENTORY], [IS_NEW_INTEREST_IN_SRW], [STATUTORY_RIGHT_OF_WAY_AREA], [SRW_END_DT], [IS_NEW_LICENSE_TO_CONSTRUCT], [LICENSE_TO_CONSTRUCT_AREA], [LTC_END_DT], [IS_NEW_LAND_ACT], [LAND_ACT_AREA], [LAND_ACT_END_DT], [IS_THERE_SURPLUS], [SURPLUS_AREA], [IS_ACTIVE_LEASE], [ACTIVE_LEASE_AREA], [ACTIVE_LEASE_END_DT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _TAKE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [TAKE_ID], [PROPERTY_ACQUISITION_FILE_ID], [TAKE_TYPE_CODE], [TAKE_STATUS_TYPE_CODE], [TAKE_SITE_CONTAM_TYPE_CODE], [AREA_UNIT_TYPE_CODE], [LAND_ACT_TYPE_CODE], [DESCRIPTION], [COMPLETION_DT], [IS_NEW_HIGHWAY_DEDICATION], [NEW_HIGHWAY_DEDICATION_AREA], [IS_ACQUIRED_FOR_INVENTORY], [IS_NEW_INTEREST_IN_SRW], [STATUTORY_RIGHT_OF_WAY_AREA], [SRW_END_DT], [IS_NEW_LICENSE_TO_CONSTRUCT], [LICENSE_TO_CONSTRUCT_AREA], [LTC_END_DT], [IS_NEW_LAND_ACT], [LAND_ACT_AREA], [LAND_ACT_END_DT], [IS_THERE_SURPLUS], [SURPLUS_AREA], [IS_ACTIVE_LEASE], [ACTIVE_LEASE_AREA], [ACTIVE_LEASE_END_DT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_TAKE_H_ID_SEQ]) as [_TAKE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USRORG_I_S_I_TR] ON PIMS_USER_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_USER_ORGANIZATION ("USER_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "USER_ID",
      "ROLE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "USER_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "USER_ID",
      "ROLE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCSTY_I_S_I_TR] ON PIMS_DOCUMENT_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_STATUS_TYPE ("DOCUMENT_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DOCUMENT_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRJNOT_I_S_U_TR] ON PIMS_PROJECT_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_NOTE_ID = deleted.PROJECT_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_NOTE
    set "PROJECT_NOTE_ID" = inserted."PROJECT_NOTE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_NOTE
    inner join inserted
    on (PIMS_PROJECT_NOTE.PROJECT_NOTE_ID = inserted.PROJECT_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USER_A_S_IUD_TR] ON PIMS_USER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_USER_HIST set END_DATE_HIST = @curr_date where USER_ID in (select USER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_USER_HIST ([USER_ID], [PERSON_ID], [USER_TYPE_CODE], [BUSINESS_IDENTIFIER_VALUE], [GUID_IDENTIFIER_VALUE], [POSITION], [NOTE], [LAST_LOGIN], [APPROVED_BY_ID], [ISSUE_DATE], [EXPIRY_DATE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _USER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ID], [PERSON_ID], [USER_TYPE_CODE], [BUSINESS_IDENTIFIER_VALUE], [GUID_IDENTIFIER_VALUE], [POSITION], [NOTE], [LAST_LOGIN], [APPROVED_BY_ID], [ISSUE_DATE], [EXPIRY_DATE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_USER_H_ID_SEQ]) as [_USER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USERRL_I_S_I_TR] ON PIMS_USER_ROLE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_USER_ROLE ("USER_ROLE_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "USER_ROLE_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCTYP_I_S_I_TR] ON PIMS_DOCUMENT_TYP INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_TYP ("DOCUMENT_TYPE_ID",
      "MAYAN_ID",
      "DOCUMENT_TYPE",
      "DOCUMENT_TYPE_DESCRIPTION",
      "DOCUMENT_TYPE_DEFINITION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DOCUMENT_TYPE_ID",
      "MAYAN_ID",
      "DOCUMENT_TYPE",
      "DOCUMENT_TYPE_DESCRIPTION",
      "DOCUMENT_TYPE_DEFINITION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRJPER_I_S_U_TR] ON PIMS_PROJECT_PERSON INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_PERSON_ID = deleted.PROJECT_PERSON_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_PERSON
    set "PROJECT_PERSON_ID" = inserted."PROJECT_PERSON_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "PROJECT_PERSON_ROLE_TYPE_CODE" = inserted."PROJECT_PERSON_ROLE_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_PERSON
    inner join inserted
    on (PIMS_PROJECT_PERSON.PROJECT_PERSON_ID = inserted.PROJECT_PERSON_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USERRL_A_S_IUD_TR] ON PIMS_USER_ROLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_USER_ROLE_HIST set END_DATE_HIST = @curr_date where USER_ROLE_ID in (select USER_ROLE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_USER_ROLE_HIST ([USER_ROLE_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _USER_ROLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ROLE_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_USER_ROLE_H_ID_SEQ]) as [_USER_ROLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USERTY_I_S_I_TR] ON PIMS_USER_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_USER_TYPE ("USER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "USER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPCIT_I_S_I_TR] ON PIMS_DSP_CHKLST_ITEM_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_CHKLST_ITEM_TYPE ("DSP_CHKLST_ITEM_TYPE_CODE",
      "DSP_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "HINT",
      "IS_REQUIRED",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DSP_CHKLST_ITEM_TYPE_CODE",
      "DSP_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "HINT",
      "IS_REQUIRED",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRLT_I_S_U_TR] ON PIMS_PROJECT_PERSON_ROLE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_PERSON_ROLE_TYPE_CODE = deleted.PROJECT_PERSON_ROLE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_PERSON_ROLE_TYPE
    set "PROJECT_PERSON_ROLE_TYPE_CODE" = inserted."PROJECT_PERSON_ROLE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_PERSON_ROLE_TYPE
    inner join inserted
    on (PIMS_PROJECT_PERSON_ROLE_TYPE.PROJECT_PERSON_ROLE_TYPE_CODE = inserted.PROJECT_PERSON_ROLE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USRORG_A_S_IUD_TR] ON PIMS_USER_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_USER_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where USER_ORGANIZATION_ID in (select USER_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_USER_ORGANIZATION_HIST ([USER_ORGANIZATION_ID], [ORGANIZATION_ID], [USER_ID], [ROLE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _USER_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ORGANIZATION_ID], [ORGANIZATION_ID], [USER_ID], [ROLE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_USER_ORGANIZATION_H_ID_SEQ]) as [_USER_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_VOLUTY_I_S_I_TR] ON PIMS_VOLUME_UNIT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_VOLUME_UNIT_TYPE ("VOLUME_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "VOLUME_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPSCT_I_S_I_TR] ON PIMS_DSP_CHKLST_SECTION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_CHKLST_SECTION_TYPE ("DSP_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DSP_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRJPRD_I_S_U_TR] ON PIMS_PROJECT_PRODUCT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_PRODUCT_ID = deleted.PROJECT_PRODUCT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_PRODUCT
    set "PROJECT_PRODUCT_ID" = inserted."PROJECT_PRODUCT_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_PRODUCT
    inner join inserted
    on (PIMS_PROJECT_PRODUCT.PROJECT_PRODUCT_ID = inserted.PROJECT_PRODUCT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_WRKACT_A_S_IUD_TR] ON PIMS_WORK_ACTIVITY_CODE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_WORK_ACTIVITY_CODE_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_WORK_ACTIVITY_CODE_HIST ([ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _WORK_ACTIVITY_CODE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_WORK_ACTIVITY_CODE_H_ID_SEQ]) as [_WORK_ACTIVITY_CODE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRVOLT_I_S_I_TR] ON PIMS_VOLUMETRIC_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_VOLUMETRIC_TYPE ("VOLUMETRIC_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "VOLUMETRIC_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPFTP_I_S_I_TR] ON PIMS_DSP_FL_TEAM_PROFILE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_FL_TEAM_PROFILE_TYPE ("DSP_FL_TEAM_PROFILE_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DSP_FL_TEAM_PROFILE_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRJSTY_I_S_U_TR] ON PIMS_PROJECT_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_STATUS_TYPE_CODE = deleted.PROJECT_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_STATUS_TYPE
    set "PROJECT_STATUS_TYPE_CODE" = inserted."PROJECT_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_STATUS_TYPE
    inner join inserted
    on (PIMS_PROJECT_STATUS_TYPE.PROJECT_STATUS_TYPE_CODE = inserted.PROJECT_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_XPMTITY_A_S_IUD_TR] ON PIMS_EXPROP_PMT_PMT_ITEM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_EXPROP_PMT_PMT_ITEM_HIST set END_DATE_HIST = @curr_date where EXPROP_PMT_PMT_ITEM_ID in (select EXPROP_PMT_PMT_ITEM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_EXPROP_PMT_PMT_ITEM_HIST ([EXPROP_PMT_PMT_ITEM_ID], [EXPROPRIATION_PAYMENT_ID], [PAYMENT_ITEM_TYPE_CODE], [IS_GST_REQUIRED], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _EXPROP_PMT_PMT_ITEM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [EXPROP_PMT_PMT_ITEM_ID], [EXPROPRIATION_PAYMENT_ID], [PAYMENT_ITEM_TYPE_CODE], [IS_GST_REQUIRED], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_EXPROP_PMT_PMT_ITEM_H_ID_SEQ]) as [_EXPROP_PMT_PMT_ITEM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_WRKACT_I_S_I_TR] ON PIMS_WORK_ACTIVITY_CODE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_WORK_ACTIVITY_CODE ("ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPIBT_I_S_I_TR] ON PIMS_DSP_INITIATING_BRANCH_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_INITIATING_BRANCH_TYPE ("DSP_INITIATING_BRANCH_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DSP_INITIATING_BRANCH_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PACMRQ_I_S_U_TR] ON PIMS_PROP_ACQ_FL_COMP_REQ INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_ACQ_FL_COMP_REQ_ID = deleted.PROP_ACQ_FL_COMP_REQ_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_ACQ_FL_COMP_REQ
    set "PROP_ACQ_FL_COMP_REQ_ID" = inserted."PROP_ACQ_FL_COMP_REQ_ID",
      "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_ACQ_FL_COMP_REQ
    inner join inserted
    on (PIMS_PROP_ACQ_FL_COMP_REQ.PROP_ACQ_FL_COMP_REQ_ID = inserted.PROP_ACQ_FL_COMP_REQ_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_YRFINC_A_S_IUD_TR] ON PIMS_YEARLY_FINANCIAL_CODE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_YEARLY_FINANCIAL_CODE_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_YEARLY_FINANCIAL_CODE_HIST ([ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _YEARLY_FINANCIAL_CODE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [CODE], [DESCRIPTION], [DISPLAY_ORDER], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_YEARLY_FINANCIAL_CODE_H_ID_SEQ]) as [_YEARLY_FINANCIAL_CODE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_YRFINC_I_S_I_TR] ON PIMS_YEARLY_FINANCIAL_CODE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_YEARLY_FINANCIAL_CODE ("ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPPFS_I_S_I_TR] ON PIMS_DSP_PHYS_FILE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_PHYS_FILE_STATUS_TYPE ("DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PAINVP_I_S_U_TR] ON PIMS_PROP_ACT_INVOLVED_PARTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_ACT_INVOLVED_PARTY_ID = deleted.PROP_ACT_INVOLVED_PARTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_ACT_INVOLVED_PARTY
    set "PROP_ACT_INVOLVED_PARTY_ID" = inserted."PROP_ACT_INVOLVED_PARTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_ACT_INVOLVED_PARTY
    inner join inserted
    on (PIMS_PROP_ACT_INVOLVED_PARTY.PROP_ACT_INVOLVED_PARTY_ID = inserted.PROP_ACT_INVOLVED_PARTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPPAG_I_S_I_TR] ON PIMS_DSP_PURCH_AGENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_PURCH_AGENT ("DSP_PURCH_AGENT_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DSP_PURCH_AGENT_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACMC_I_S_U_TR] ON PIMS_PROP_ACT_MIN_CONTACT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_ACT_MIN_CONTACT_ID = deleted.PROP_ACT_MIN_CONTACT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_ACT_MIN_CONTACT
    set "PROP_ACT_MIN_CONTACT_ID" = inserted."PROP_ACT_MIN_CONTACT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_ACT_MIN_CONTACT
    inner join inserted
    on (PIMS_PROP_ACT_MIN_CONTACT.PROP_ACT_MIN_CONTACT_ID = inserted.PROP_ACT_MIN_CONTACT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACRQST_I_S_U_TR] ON PIMS_ACCESS_REQUEST INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACCESS_REQUEST_ID = deleted.ACCESS_REQUEST_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACCESS_REQUEST
    set "ACCESS_REQUEST_ID" = inserted."ACCESS_REQUEST_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "USER_TYPE_CODE" = inserted."USER_TYPE_CODE",
      "ACCESS_REQUEST_STATUS_TYPE_CODE" = inserted."ACCESS_REQUEST_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST
    inner join inserted
    on (PIMS_ACCESS_REQUEST.ACCESS_REQUEST_ID = inserted.ACCESS_REQUEST_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPPSL_I_S_I_TR] ON PIMS_DSP_PURCH_SOLICITOR INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_PURCH_SOLICITOR ("DSP_PURCH_SOLICITOR_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DSP_PURCH_SOLICITOR_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PIHITY_I_S_U_TR] ON PIMS_PROP_INTHLDR_INTEREST_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_INTHLDR_INTEREST_TYPE_ID = deleted.PROP_INTHLDR_INTEREST_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_INTHLDR_INTEREST_TYPE
    set "PROP_INTHLDR_INTEREST_TYPE_ID" = inserted."PROP_INTHLDR_INTEREST_TYPE_ID",
      "PIMS_INTHLDR_PROP_INTEREST_ID" = inserted."PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_INTEREST_TYPE_CODE" = inserted."INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_INTHLDR_INTEREST_TYPE
    inner join inserted
    on (PIMS_PROP_INTHLDR_INTEREST_TYPE.PROP_INTHLDR_INTEREST_TYPE_ID = inserted.PROP_INTHLDR_INTEREST_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACRQOR_I_S_U_TR] ON PIMS_ACCESS_REQUEST_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACCESS_REQUEST_ORGANIZATION_ID = deleted.ACCESS_REQUEST_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACCESS_REQUEST_ORGANIZATION
    set "ACCESS_REQUEST_ORGANIZATION_ID" = inserted."ACCESS_REQUEST_ORGANIZATION_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "ACCESS_REQUEST_ID" = inserted."ACCESS_REQUEST_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST_ORGANIZATION
    inner join inserted
    on (PIMS_ACCESS_REQUEST_ORGANIZATION.ACCESS_REQUEST_ORGANIZATION_ID = inserted.ACCESS_REQUEST_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_XPMTITY_I_S_I_TR] ON PIMS_EXPROP_PMT_PMT_ITEM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_EXPROP_PMT_PMT_ITEM ("EXPROP_PMT_PMT_ITEM_ID",
      "EXPROPRIATION_PAYMENT_ID",
      "PAYMENT_ITEM_TYPE_CODE",
      "IS_GST_REQUIRED",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "EXPROP_PMT_PMT_ITEM_ID",
      "EXPROPRIATION_PAYMENT_ID",
      "PAYMENT_ITEM_TYPE_CODE",
      "IS_GST_REQUIRED",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PLCMRQ_I_S_U_TR] ON PIMS_PROP_LEASE_COMP_REQ INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_LEASE_COMP_REQ_ID = deleted.PROP_LEASE_COMP_REQ_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_LEASE_COMP_REQ
    set "PROP_LEASE_COMP_REQ_ID" = inserted."PROP_LEASE_COMP_REQ_ID",
      "PROPERTY_LEASE_ID" = inserted."PROPERTY_LEASE_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_LEASE_COMP_REQ
    inner join inserted
    on (PIMS_PROP_LEASE_COMP_REQ.PROP_LEASE_COMP_REQ_ID = inserted.PROP_LEASE_COMP_REQ_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ARQSTT_I_S_U_TR] ON PIMS_ACCESS_REQUEST_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACCESS_REQUEST_STATUS_TYPE_CODE = deleted.ACCESS_REQUEST_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACCESS_REQUEST_STATUS_TYPE
    set "ACCESS_REQUEST_STATUS_TYPE_CODE" = inserted."ACCESS_REQUEST_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST_STATUS_TYPE
    inner join inserted
    on (PIMS_ACCESS_REQUEST_STATUS_TYPE.ACCESS_REQUEST_STATUS_TYPE_CODE = inserted.ACCESS_REQUEST_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_EXPPMT_I_S_I_TR] ON PIMS_EXPROPRIATION_PAYMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_EXPROPRIATION_PAYMENT ("EXPROPRIATION_PAYMENT_ID",
      "ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "EXPROPRIATING_AUTHORITY",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "EXPROPRIATION_PAYMENT_ID",
      "ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "EXPROPRIATING_AUTHORITY",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PACSTY_I_S_U_TR] ON PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE = deleted.PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE
    set "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE
    inner join inserted
    on (PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE.PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE = inserted.PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQCIT_I_S_U_TR] ON PIMS_ACQ_CHKLST_ITEM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_CHKLST_ITEM_TYPE_CODE = deleted.ACQ_CHKLST_ITEM_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_CHKLST_ITEM_TYPE
    set "ACQ_CHKLST_ITEM_TYPE_CODE" = inserted."ACQ_CHKLST_ITEM_TYPE_CODE",
      "ACQ_CHKLST_SECTION_TYPE_CODE" = inserted."ACQ_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "HINT" = inserted."HINT",
      "IS_REQUIRED" = inserted."IS_REQUIRED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_CHKLST_ITEM_TYPE
    inner join inserted
    on (PIMS_ACQ_CHKLST_ITEM_TYPE.ACQ_CHKLST_ITEM_TYPE_CODE = inserted.ACQ_CHKLST_ITEM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_FNCTYP_I_S_I_TR] ON PIMS_FENCE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_FENCE_TYPE ("FENCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "FENCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACST_I_S_U_TR] ON PIMS_PROP_MGMT_ACTIVITY_SUBTYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_MGMT_ACTIVITY_SUBTYPE_CODE = deleted.PROP_MGMT_ACTIVITY_SUBTYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_MGMT_ACTIVITY_SUBTYPE
    set "PROP_MGMT_ACTIVITY_SUBTYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_MGMT_ACTIVITY_SUBTYPE
    inner join inserted
    on (PIMS_PROP_MGMT_ACTIVITY_SUBTYPE.PROP_MGMT_ACTIVITY_SUBTYPE_CODE = inserted.PROP_MGMT_ACTIVITY_SUBTYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AQCSCT_I_S_U_TR] ON PIMS_ACQ_CHKLST_SECTION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_CHKLST_SECTION_TYPE_CODE = deleted.ACQ_CHKLST_SECTION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_CHKLST_SECTION_TYPE
    set "ACQ_CHKLST_SECTION_TYPE_CODE" = inserted."ACQ_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_CHKLST_SECTION_TYPE
    inner join inserted
    on (PIMS_ACQ_CHKLST_SECTION_TYPE.ACQ_CHKLST_SECTION_TYPE_CODE = inserted.ACQ_CHKLST_SECTION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_FINACT_I_S_I_TR] ON PIMS_FINANCIAL_ACTIVITY_CODE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_FINANCIAL_ACTIVITY_CODE ("ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ID",
      "CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACTY_I_S_U_TR] ON PIMS_PROP_MGMT_ACTIVITY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_MGMT_ACTIVITY_TYPE_CODE = deleted.PROP_MGMT_ACTIVITY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_MGMT_ACTIVITY_TYPE
    set "PROP_MGMT_ACTIVITY_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_MGMT_ACTIVITY_TYPE
    inner join inserted
    on (PIMS_PROP_MGMT_ACTIVITY_TYPE.PROP_MGMT_ACTIVITY_TYPE_CODE = inserted.PROP_MGMT_ACTIVITY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AQTPPT_I_S_U_TR] ON PIMS_ACQ_FL_TEAM_PROFILE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_FL_TEAM_PROFILE_TYPE_CODE = deleted.ACQ_FL_TEAM_PROFILE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_FL_TEAM_PROFILE_TYPE
    set "ACQ_FL_TEAM_PROFILE_TYPE_CODE" = inserted."ACQ_FL_TEAM_PROFILE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_FL_TEAM_PROFILE_TYPE
    inner join inserted
    on (PIMS_ACQ_FL_TEAM_PROFILE_TYPE.ACQ_FL_TEAM_PROFILE_TYPE_CODE = inserted.ACQ_FL_TEAM_PROFILE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_FRMTYP_I_S_I_TR] ON PIMS_FORM_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_FORM_TYPE ("FORM_TYPE_CODE",
      "DOCUMENT_ID",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "FORM_TYPE_CODE",
      "DOCUMENT_ID",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRAC_I_S_U_TR] ON PIMS_PROP_PROP_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_ACTIVITY_ID = deleted.PROP_PROP_ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_ACTIVITY
    set "PROP_PROP_ACTIVITY_ID" = inserted."PROP_PROP_ACTIVITY_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ACTIVITY
    inner join inserted
    on (PIMS_PROP_PROP_ACTIVITY.PROP_PROP_ACTIVITY_ID = inserted.PROP_PROP_ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQPFS_I_S_U_TR] ON PIMS_ACQ_PHYS_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_PHYS_FILE_STATUS_TYPE_CODE = deleted.ACQ_PHYS_FILE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_PHYS_FILE_STATUS_TYPE
    set "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_PHYS_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_ACQ_PHYS_FILE_STATUS_TYPE.ACQ_PHYS_FILE_STATUS_TYPE_CODE = inserted.ACQ_PHYS_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_H120CT_I_S_I_TR] ON PIMS_H120_CATEGORY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_H120_CATEGORY ("H120_CATEGORY_ID",
      "FINANCIAL_ACTIVITY_ID",
      "WORK_ACTIVITY_ID",
      "COST_TYPE_ID",
      "H120_CATEGORY_NO",
      "DESCRIPTION",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "H120_CATEGORY_ID",
      "FINANCIAL_ACTIVITY_ID",
      "WORK_ACTIVITY_ID",
      "COST_TYPE_ID",
      "H120_CATEGORY_NO",
      "DESCRIPTION",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRAT_I_S_U_TR] ON PIMS_PROP_PROP_ANOMALY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_ANOMALY_TYPE_ID = deleted.PROP_PROP_ANOMALY_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_ANOMALY_TYPE
    set "PROP_PROP_ANOMALY_TYPE_ID" = inserted."PROP_PROP_ANOMALY_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_ANOMALY_TYPE_CODE" = inserted."PROPERTY_ANOMALY_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ANOMALY_TYPE
    inner join inserted
    on (PIMS_PROP_PROP_ANOMALY_TYPE.PROP_PROP_ANOMALY_TYPE_ID = inserted.PROP_PROP_ANOMALY_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQCKI_I_S_U_TR] ON PIMS_ACQUISITION_CHECKLIST_ITEM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_CHECKLIST_ITEM_ID = deleted.ACQUISITION_CHECKLIST_ITEM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_CHECKLIST_ITEM
    set "ACQUISITION_CHECKLIST_ITEM_ID" = inserted."ACQUISITION_CHECKLIST_ITEM_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQ_CHKLST_ITEM_TYPE_CODE" = inserted."ACQ_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_CHECKLIST_ITEM
    inner join inserted
    on (PIMS_ACQUISITION_CHECKLIST_ITEM.ACQUISITION_CHECKLIST_ITEM_ID = inserted.ACQUISITION_CHECKLIST_ITEM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_HFLNUM_I_S_I_TR] ON PIMS_HISTORICAL_FILE_NUMBER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_HISTORICAL_FILE_NUMBER ("HISTORICAL_FILE_NUMBER_ID",
      "PROPERTY_ID",
      "DATA_SOURCE_TYPE_CODE",
      "HISTORICAL_FILE_NUMBER_TYPE_CODE",
      "HISTORICAL_FILE_NUMBER",
      "OTHER_HIST_FILE_NUMBER_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "HISTORICAL_FILE_NUMBER_ID",
      "PROPERTY_ID",
      "DATA_SOURCE_TYPE_CODE",
      "HISTORICAL_FILE_NUMBER_TYPE_CODE",
      "HISTORICAL_FILE_NUMBER",
      "OTHER_HIST_FILE_NUMBER_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRPU_I_S_U_TR] ON PIMS_PROP_PROP_PURPOSE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_PURPOSE_ID = deleted.PROP_PROP_PURPOSE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_PURPOSE
    set "PROP_PROP_PURPOSE_ID" = inserted."PROP_PROP_PURPOSE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_PURPOSE_TYPE_CODE" = inserted."PROPERTY_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_PURPOSE
    inner join inserted
    on (PIMS_PROP_PROP_PURPOSE.PROP_PROP_PURPOSE_ID = inserted.PROP_PROP_PURPOSE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_U_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_ID = deleted.ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE
    set "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID" = inserted."PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "SUBFILE_INTEREST_TYPE_CODE" = inserted."SUBFILE_INTEREST_TYPE_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_NO" = inserted."FILE_NO",
      "FILE_NUM_SUFFIX" = inserted."FILE_NUM_SUFFIX",
      "LEGACY_FILE_NUMBER" = inserted."LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER" = inserted."LEGACY_STAKEHOLDER",
      "FUNDING_OTHER" = inserted."FUNDING_OTHER",
      "ASSIGNED_DATE" = inserted."ASSIGNED_DATE",
      "DELIVERY_DATE" = inserted."DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID" = inserted."PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION" = inserted."TOTAL_ALLOWABLE_COMPENSATION",
      "OTHER_SUBFILE_INTEREST_TYPE" = inserted."OTHER_SUBFILE_INTEREST_TYPE",
      "EST_COMPLETION_DT" = inserted."EST_COMPLETION_DT",
      "POSSESSION_DT" = inserted."POSSESSION_DT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE
    inner join inserted
    on (PIMS_ACQUISITION_FILE.ACQUISITION_FILE_ID = inserted.ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_HFLNMT_I_S_I_TR] ON PIMS_HISTORICAL_FILE_NUMBER_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_HISTORICAL_FILE_NUMBER_TYPE ("HISTORICAL_FILE_NUMBER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "HISTORICAL_FILE_NUMBER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRRT_I_S_U_TR] ON PIMS_PROP_PROP_ROAD_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_ROAD_TYPE_ID = deleted.PROP_PROP_ROAD_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_ROAD_TYPE
    set "PROP_PROP_ROAD_TYPE_ID" = inserted."PROP_PROP_ROAD_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_ROAD_TYPE_CODE" = inserted."PROPERTY_ROAD_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ROAD_TYPE
    inner join inserted
    on (PIMS_PROP_PROP_ROAD_TYPE.PROP_PROP_ROAD_TYPE_ID = inserted.PROP_PROP_ROAD_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQDOC_I_S_U_TR] ON PIMS_ACQUISITION_FILE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_DOCUMENT_ID = deleted.ACQUISITION_FILE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE_DOCUMENT
    set "ACQUISITION_FILE_DOCUMENT_ID" = inserted."ACQUISITION_FILE_DOCUMENT_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE_DOCUMENT
    inner join inserted
    on (PIMS_ACQUISITION_FILE_DOCUMENT.ACQUISITION_FILE_DOCUMENT_ID = inserted.ACQUISITION_FILE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_INSRNC_I_S_I_TR] ON PIMS_INSURANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INSURANCE ("INSURANCE_ID",
      "LEASE_ID",
      "INSURANCE_TYPE_CODE",
      "OTHER_INSURANCE_TYPE",
      "COVERAGE_DESCRIPTION",
      "COVERAGE_LIMIT",
      "IS_INSURANCE_IN_PLACE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "INSURANCE_ID",
      "LEASE_ID",
      "INSURANCE_TYPE_CODE",
      "OTHER_INSURANCE_TYPE",
      "COVERAGE_DESCRIPTION",
      "COVERAGE_LIMIT",
      "IS_INSURANCE_IN_PLACE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRTT_I_S_U_TR] ON PIMS_PROP_PROP_TENURE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_TENURE_TYPE_ID = deleted.PROP_PROP_TENURE_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_TENURE_TYPE
    set "PROP_PROP_TENURE_TYPE_ID" = inserted."PROP_PROP_TENURE_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_TENURE_TYPE_CODE" = inserted."PROPERTY_TENURE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_TENURE_TYPE
    inner join inserted
    on (PIMS_PROP_PROP_TENURE_TYPE.PROP_PROP_TENURE_TYPE_ID = inserted.PROP_PROP_TENURE_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQFRM_I_S_U_TR] ON PIMS_ACQUISITION_FILE_FORM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_FORM_ID = deleted.ACQUISITION_FILE_FORM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE_FORM
    set "ACQUISITION_FILE_FORM_ID" = inserted."ACQUISITION_FILE_FORM_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "FORM_TYPE_CODE" = inserted."FORM_TYPE_CODE",
      "FORM_JSON" = inserted."FORM_JSON",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE_FORM
    inner join inserted
    on (PIMS_ACQUISITION_FILE_FORM.ACQUISITION_FILE_FORM_ID = inserted.ACQUISITION_FILE_FORM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_INSPYT_I_S_I_TR] ON PIMS_INSURANCE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INSURANCE_TYPE ("INSURANCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "INSURANCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RRESPT_I_S_U_TR] ON PIMS_PROP_RESEARCH_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_RESEARCH_PURPOSE_TYPE_CODE = deleted.PROP_RESEARCH_PURPOSE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_RESEARCH_PURPOSE_TYPE
    set "PROP_RESEARCH_PURPOSE_TYPE_CODE" = inserted."PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_RESEARCH_PURPOSE_TYPE
    inner join inserted
    on (PIMS_PROP_RESEARCH_PURPOSE_TYPE.PROP_RESEARCH_PURPOSE_TYPE_CODE = inserted.PROP_RESEARCH_PURPOSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQNOT_I_S_U_TR] ON PIMS_ACQUISITION_FILE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_NOTE_ID = deleted.ACQUISITION_FILE_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE_NOTE
    set "ACQUISITION_FILE_NOTE_ID" = inserted."ACQUISITION_FILE_NOTE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE_NOTE
    inner join inserted
    on (PIMS_ACQUISITION_FILE_NOTE.ACQUISITION_FILE_NOTE_ID = inserted.ACQUISITION_FILE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_INTHLD_I_S_I_TR] ON PIMS_INTEREST_HOLDER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INTEREST_HOLDER ("INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "INTEREST_HOLDER_TYPE_CODE",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "INTEREST_HOLDER_TYPE_CODE",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_U_TR] ON PIMS_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ID = deleted.PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY
    set "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE" = inserted."PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE" = inserted."PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE" = inserted."SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE" = inserted."VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE" = inserted."VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE" = inserted."PPH_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE" = inserted."PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "PID" = inserted."PID",
      "PIN" = inserted."PIN",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "FILE_NUMBER_SUFFIX" = inserted."FILE_NUMBER_SUFFIX",
      "LAND_AREA" = inserted."LAND_AREA",
      "LAND_LEGAL_DESCRIPTION" = inserted."LAND_LEGAL_DESCRIPTION",
      "BOUNDARY" = inserted."BOUNDARY",
      "LOCATION" = inserted."LOCATION",
      "GENERAL_LOCATION" = inserted."GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER" = inserted."SURVEY_PLAN_NUMBER",
      "SURPLUS_DECLARATION_COMMENT" = inserted."SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE" = inserted."SURPLUS_DECLARATION_DATE",
      "NOTES" = inserted."NOTES",
      "MUNICIPAL_ZONING" = inserted."MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL" = inserted."IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT" = inserted."VOLUMETRIC_MEASUREMENT",
      "IS_OWNED" = inserted."IS_OWNED",
      "IS_RETIRED" = inserted."IS_RETIRED",
      "PPH_STATUS_UPDATE_USERID" = inserted."PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP" = inserted."PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID" = inserted."PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT" = inserted."IS_RWY_BELT_DOM_PATENT",
      "ADDITIONAL_DETAILS" = inserted."ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE" = inserted."IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE" = inserted."IS_TAXES_PAYABLE",
      "BAND_NAME" = inserted."BAND_NAME",
      "RESERVE_NAME" = inserted."RESERVE_NAME",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY
    inner join inserted
    on (PIMS_PROPERTY.PROPERTY_ID = inserted.PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQFST_I_S_U_TR] ON PIMS_ACQUISITION_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_STATUS_TYPE_CODE = deleted.ACQUISITION_FILE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE_STATUS_TYPE
    set "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_ACQUISITION_FILE_STATUS_TYPE.ACQUISITION_FILE_STATUS_TYPE_CODE = inserted.ACQUISITION_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_IHINTT_I_S_I_TR] ON PIMS_INTEREST_HOLDER_INTEREST_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INTEREST_HOLDER_INTEREST_TYPE ("INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACQF_I_S_U_TR] ON PIMS_PROPERTY_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACQUISITION_FILE_ID = deleted.PROPERTY_ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACQUISITION_FILE
    set "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_NAME" = inserted."PROPERTY_NAME",
      "LOCATION" = inserted."LOCATION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACQUISITION_FILE
    inner join inserted
    on (PIMS_PROPERTY_ACQUISITION_FILE.PROPERTY_ACQUISITION_FILE_ID = inserted.PROPERTY_ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQNTM_I_S_U_TR] ON PIMS_ACQUISITION_FILE_TEAM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_TEAM_ID = deleted.ACQUISITION_FILE_TEAM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE_TEAM
    set "ACQUISITION_FILE_TEAM_ID" = inserted."ACQUISITION_FILE_TEAM_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "ACQ_FL_TEAM_PROFILE_TYPE_CODE" = inserted."ACQ_FL_TEAM_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE_TEAM
    inner join inserted
    on (PIMS_ACQUISITION_FILE_TEAM.ACQUISITION_FILE_TEAM_ID = inserted.ACQUISITION_FILE_TEAM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_INHLDT_I_S_I_TR] ON PIMS_INTEREST_HOLDER_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INTEREST_HOLDER_TYPE ("INTEREST_HOLDER_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "INTEREST_HOLDER_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPACT_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PIMS_PROPERTY_ACTIVITY_ID = deleted.PIMS_PROPERTY_ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY
    set "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_TYPE_CODE",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID" = inserted."SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID" = inserted."SERVICE_PROVIDER_ORG_ID",
      "REQUEST_ADDED_DT" = inserted."REQUEST_ADDED_DT",
      "COMPLETION_DT" = inserted."COMPLETION_DT",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "REQUEST_SOURCE" = inserted."REQUEST_SOURCE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY.PIMS_PROPERTY_ACTIVITY_ID = inserted.PIMS_PROPERTY_ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQFTY_I_S_U_TR] ON PIMS_ACQUISITION_FUNDING_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FUNDING_TYPE_CODE = deleted.ACQUISITION_FUNDING_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FUNDING_TYPE
    set "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FUNDING_TYPE
    inner join inserted
    on (PIMS_ACQUISITION_FUNDING_TYPE.ACQUISITION_FUNDING_TYPE_CODE = inserted.ACQUISITION_FUNDING_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_IHPRIN_I_S_I_TR] ON PIMS_INTHLDR_PROP_INTEREST INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INTHLDR_PROP_INTEREST ("PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACDO_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACTIVITY_DOCUMENT_ID = deleted.PROPERTY_ACTIVITY_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY_DOCUMENT
    set "PROPERTY_ACTIVITY_DOCUMENT_ID" = inserted."PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY_DOCUMENT
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY_DOCUMENT.PROPERTY_ACTIVITY_DOCUMENT_ID = inserted.PROPERTY_ACTIVITY_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_U_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_OWNER_ID = deleted.ACQUISITION_OWNER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_OWNER
    set "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "IS_PRIMARY_OWNER" = inserted."IS_PRIMARY_OWNER",
      "IS_ORGANIZATION" = inserted."IS_ORGANIZATION",
      "LAST_NAME_AND_CORP_NAME" = inserted."LAST_NAME_AND_CORP_NAME",
      "OTHER_NAME" = inserted."OTHER_NAME",
      "GIVEN_NAME" = inserted."GIVEN_NAME",
      "INCORPORATION_NUMBER" = inserted."INCORPORATION_NUMBER",
      "REGISTRATION_NUMBER" = inserted."REGISTRATION_NUMBER",
      "CONTACT_EMAIL_ADDR" = inserted."CONTACT_EMAIL_ADDR",
      "CONTACT_PHONE_NUM" = inserted."CONTACT_PHONE_NUM",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_OWNER
    inner join inserted
    on (PIMS_ACQUISITION_OWNER.ACQUISITION_OWNER_ID = inserted.ACQUISITION_OWNER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LNDATY_I_S_I_TR] ON PIMS_LAND_ACT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LAND_ACT_TYPE ("LAND_ACT_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LAND_ACT_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACIN_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY_INVOICE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACTIVITY_INVOICE_ID = deleted.PROPERTY_ACTIVITY_INVOICE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY_INVOICE
    set "PROPERTY_ACTIVITY_INVOICE_ID" = inserted."PROPERTY_ACTIVITY_INVOICE_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "INVOICE_DT" = inserted."INVOICE_DT",
      "INVOICE_NUM" = inserted."INVOICE_NUM",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "GST_AMT" = inserted."GST_AMT",
      "PST_AMT" = inserted."PST_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "IS_PST_REQUIRED" = inserted."IS_PST_REQUIRED",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY_INVOICE
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY_INVOICE.PROPERTY_ACTIVITY_INVOICE_ID = inserted.PROPERTY_ACTIVITY_INVOICE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQTYP_I_S_U_TR] ON PIMS_ACQUISITION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_TYPE_CODE = deleted.ACQUISITION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_TYPE
    set "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_TYPE
    inner join inserted
    on (PIMS_ACQUISITION_TYPE.ACQUISITION_TYPE_CODE = inserted.ACQUISITION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LNSRVT_I_S_I_TR] ON PIMS_LAND_SURVEYOR_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LAND_SURVEYOR_TYPE ("LAND_SURVEYOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LAND_SURVEYOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRANOM_I_S_U_TR] ON PIMS_PROPERTY_ANOMALY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ANOMALY_TYPE_CODE = deleted.PROPERTY_ANOMALY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ANOMALY_TYPE
    set "PROPERTY_ANOMALY_TYPE_CODE" = inserted."PROPERTY_ANOMALY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ANOMALY_TYPE
    inner join inserted
    on (PIMS_PROPERTY_ANOMALY_TYPE.PROPERTY_ANOMALY_TYPE_CODE = inserted.PROPERTY_ANOMALY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ADDRSS_I_S_U_TR] ON PIMS_ADDRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ADDRESS_ID = deleted.ADDRESS_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ADDRESS
    set "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROVINCE_STATE_ID" = inserted."PROVINCE_STATE_ID",
      "COUNTRY_ID" = inserted."COUNTRY_ID",
      "STREET_ADDRESS_1" = inserted."STREET_ADDRESS_1",
      "STREET_ADDRESS_2" = inserted."STREET_ADDRESS_2",
      "STREET_ADDRESS_3" = inserted."STREET_ADDRESS_3",
      "MUNICIPALITY_NAME" = inserted."MUNICIPALITY_NAME",
      "POSTAL_CODE" = inserted."POSTAL_CODE",
      "OTHER_COUNTRY" = inserted."OTHER_COUNTRY",
      "LATITUDE" = inserted."LATITUDE",
      "LONGITUDE" = inserted."LONGITUDE",
      "COMMENT" = inserted."COMMENT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ADDRESS
    inner join inserted
    on (PIMS_ADDRESS.ADDRESS_ID = inserted.ADDRESS_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_I_TR] ON PIMS_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE ("LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "PROJECT_ID",
      "PRODUCT_ID",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "TFA_FILE_NUMBER",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "TERMINATION_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CANCELLATION_REASON",
      "TERMINATION_REASON",
      "IS_PUBLIC_BENEFIT",
      "IS_FINANCIAL_GAIN",
      "FEE_DETERMINATION_NOTE",
      "PRIMARY_ARBITRATION_CITY",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "PROJECT_ID",
      "PRODUCT_ID",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "TFA_FILE_NUMBER",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "TERMINATION_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CANCELLATION_REASON",
      "TERMINATION_REASON",
      "IS_PUBLIC_BENEFIT",
      "IS_FINANCIAL_GAIN",
      "FEE_DETERMINATION_NOTE",
      "PRIMARY_ARBITRATION_CITY",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPCNT_I_S_U_TR] ON PIMS_PROPERTY_CONTACT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_CONTACT_ID = deleted.PROPERTY_CONTACT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_CONTACT
    set "PROPERTY_CONTACT_ID" = inserted."PROPERTY_CONTACT_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "PURPOSE" = inserted."PURPOSE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_CONTACT
    inner join inserted
    on (PIMS_PROPERTY_CONTACT.PROPERTY_CONTACT_ID = inserted.PROPERTY_CONTACT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ADUSGT_I_S_U_TR] ON PIMS_ADDRESS_USAGE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ADDRESS_USAGE_TYPE_CODE = deleted.ADDRESS_USAGE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ADDRESS_USAGE_TYPE
    set "ADDRESS_USAGE_TYPE_CODE" = inserted."ADDRESS_USAGE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ADDRESS_USAGE_TYPE
    inner join inserted
    on (PIMS_ADDRESS_USAGE_TYPE.ADDRESS_USAGE_TYPE_CODE = inserted.ADDRESS_USAGE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LCHKLI_I_S_I_TR] ON PIMS_LEASE_CHECKLIST_ITEM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CHECKLIST_ITEM ("LEASE_CHECKLIST_ITEM_ID",
      "LEASE_ID",
      "LEASE_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_CHECKLIST_ITEM_ID",
      "LEASE_ID",
      "LEASE_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PIMPRV_I_S_U_TR] ON PIMS_PROPERTY_IMPROVEMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_IMPROVEMENT_ID = deleted.PROPERTY_IMPROVEMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_IMPROVEMENT
    set "PROPERTY_IMPROVEMENT_ID" = inserted."PROPERTY_IMPROVEMENT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "PROPERTY_IMPROVEMENT_TYPE_CODE" = inserted."PROPERTY_IMPROVEMENT_TYPE_CODE",
      "IMPROVEMENT_DESCRIPTION" = inserted."IMPROVEMENT_DESCRIPTION",
      "STRUCTURE_SIZE" = inserted."STRUCTURE_SIZE",
      "ADDRESS" = inserted."ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_IMPROVEMENT
    inner join inserted
    on (PIMS_PROPERTY_IMPROVEMENT.PROPERTY_IMPROVEMENT_ID = inserted.PROPERTY_IMPROVEMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AGRMNT_I_S_U_TR] ON PIMS_AGREEMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.AGREEMENT_ID = deleted.AGREEMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_AGREEMENT
    set "AGREEMENT_ID" = inserted."AGREEMENT_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "AGREEMENT_TYPE_CODE" = inserted."AGREEMENT_TYPE_CODE",
      "AGREEMENT_STATUS_TYPE_CODE" = inserted."AGREEMENT_STATUS_TYPE_CODE",
      "AGREEMENT_DATE" = inserted."AGREEMENT_DATE",
      "COMPLETION_DATE" = inserted."COMPLETION_DATE",
      "TERMINATION_DATE" = inserted."TERMINATION_DATE",
      "COMMENCEMENT_DATE" = inserted."COMMENCEMENT_DATE",
      "DEPOSIT_AMOUNT" = inserted."DEPOSIT_AMOUNT",
      "NO_LATER_THAN_DAYS" = inserted."NO_LATER_THAN_DAYS",
      "PURCHASE_PRICE" = inserted."PURCHASE_PRICE",
      "LEGAL_SURVEY_PLAN_NUM" = inserted."LEGAL_SURVEY_PLAN_NUM",
      "OFFER_DATE" = inserted."OFFER_DATE",
      "EXPIRY_TS" = inserted."EXPIRY_TS",
      "SIGNED_DATE" = inserted."SIGNED_DATE",
      "INSPECTION_DATE" = inserted."INSPECTION_DATE",
      "EXPROPRIATION_DATE" = inserted."EXPROPRIATION_DATE",
      "POSSESSION_DATE" = inserted."POSSESSION_DATE",
      "CANCELLATION_NOTE" = inserted."CANCELLATION_NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_AGREEMENT
    inner join inserted
    on (PIMS_AGREEMENT.AGREEMENT_ID = inserted.AGREEMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LCKITY_I_S_I_TR] ON PIMS_LEASE_CHKLST_ITEM_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CHKLST_ITEM_TYPE ("LEASE_CHKLST_ITEM_TYPE_CODE",
      "LEASE_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "HINT",
      "IS_REQUIRED",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_CHKLST_ITEM_TYPE_CODE",
      "LEASE_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "HINT",
      "IS_REQUIRED",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PIMPRT_I_S_U_TR] ON PIMS_PROPERTY_IMPROVEMENT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_IMPROVEMENT_TYPE_CODE = deleted.PROPERTY_IMPROVEMENT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_IMPROVEMENT_TYPE
    set "PROPERTY_IMPROVEMENT_TYPE_CODE" = inserted."PROPERTY_IMPROVEMENT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_IMPROVEMENT_TYPE
    inner join inserted
    on (PIMS_PROPERTY_IMPROVEMENT_TYPE.PROPERTY_IMPROVEMENT_TYPE_CODE = inserted.PROPERTY_IMPROVEMENT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AGRSTY_I_S_U_TR] ON PIMS_AGREEMENT_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.AGREEMENT_STATUS_TYPE_CODE = deleted.AGREEMENT_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_AGREEMENT_STATUS_TYPE
    set "AGREEMENT_STATUS_TYPE_CODE" = inserted."AGREEMENT_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_AGREEMENT_STATUS_TYPE
    inner join inserted
    on (PIMS_AGREEMENT_STATUS_TYPE.AGREEMENT_STATUS_TYPE_CODE = inserted.AGREEMENT_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LCKSTY_I_S_I_TR] ON PIMS_LEASE_CHKLST_SECTION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CHKLST_SECTION_TYPE ("LEASE_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PROPLS_I_S_U_TR] ON PIMS_PROPERTY_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_LEASE_ID = deleted.PROPERTY_LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_LEASE
    set "PROPERTY_LEASE_ID" = inserted."PROPERTY_LEASE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "NAME" = inserted."NAME",
      "LEASE_AREA" = inserted."LEASE_AREA",
      "LOCATION" = inserted."LOCATION",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_LEASE
    inner join inserted
    on (PIMS_PROPERTY_LEASE.PROPERTY_LEASE_ID = inserted.PROPERTY_LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AGRTYP_I_S_U_TR] ON PIMS_AGREEMENT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.AGREEMENT_TYPE_CODE = deleted.AGREEMENT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_AGREEMENT_TYPE
    set "AGREEMENT_TYPE_CODE" = inserted."AGREEMENT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_AGREEMENT_TYPE
    inner join inserted
    on (PIMS_AGREEMENT_TYPE.AGREEMENT_TYPE_CODE = inserted.AGREEMENT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LESCON_I_S_I_TR] ON PIMS_LEASE_CONSULTATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CONSULTATION ("LEASE_CONSULTATION_ID",
      "LEASE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE",
      "CONSULTATION_OUTCOME_TYPE_CODE",
      "OTHER_DESCRIPTION",
      "REQUESTED_ON",
      "IS_RESPONSE_RECEIVED",
      "RESPONSE_RECEIVED_DATE",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_CONSULTATION_ID",
      "LEASE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE",
      "CONSULTATION_OUTCOME_TYPE_CODE",
      "OTHER_DESCRIPTION",
      "REQUESTED_ON",
      "IS_RESPONSE_RECEIVED",
      "RESPONSE_RECEIVED_DATE",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PROPOP_I_S_U_TR] ON PIMS_PROPERTY_OPERATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_OPERATION_ID = deleted.PROPERTY_OPERATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_OPERATION
    set "PROPERTY_OPERATION_ID" = inserted."PROPERTY_OPERATION_ID",
      "SOURCE_PROPERTY_ID" = inserted."SOURCE_PROPERTY_ID",
      "DESTINATION_PROPERTY_ID" = inserted."DESTINATION_PROPERTY_ID",
      "PROPERTY_OPERATION_TYPE_CODE" = inserted."PROPERTY_OPERATION_TYPE_CODE",
      "PROPERTY_OPERATION_NO" = inserted."PROPERTY_OPERATION_NO",
      "OPERATION_DT" = inserted."OPERATION_DT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_OPERATION
    inner join inserted
    on (PIMS_PROPERTY_OPERATION.PROPERTY_OPERATION_ID = inserted.PROPERTY_OPERATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ARUNIT_I_S_U_TR] ON PIMS_AREA_UNIT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.AREA_UNIT_TYPE_CODE = deleted.AREA_UNIT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_AREA_UNIT_TYPE
    set "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_AREA_UNIT_TYPE
    inner join inserted
    on (PIMS_AREA_UNIT_TYPE.AREA_UNIT_TYPE_CODE = inserted.AREA_UNIT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LESDOC_I_S_I_TR] ON PIMS_LEASE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_DOCUMENT ("LEASE_DOCUMENT_ID",
      "LEASE_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_DOCUMENT_ID",
      "LEASE_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPOTY_I_S_U_TR] ON PIMS_PROPERTY_OPERATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_OPERATION_TYPE_CODE = deleted.PROPERTY_OPERATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_OPERATION_TYPE
    set "PROPERTY_OPERATION_TYPE_CODE" = inserted."PROPERTY_OPERATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_OPERATION_TYPE
    inner join inserted
    on (PIMS_PROPERTY_OPERATION_TYPE.PROPERTY_OPERATION_TYPE_CODE = inserted.PROPERTY_OPERATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_BIZFCN_I_S_U_TR] ON PIMS_BUSINESS_FUNCTION_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_BUSINESS_FUNCTION_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_BUSINESS_FUNCTION_CODE
    inner join inserted
    on (PIMS_BUSINESS_FUNCTION_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LINITT_I_S_I_TR] ON PIMS_LEASE_INITIATOR_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_INITIATOR_TYPE ("LEASE_INITIATOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_INITIATOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPORG_I_S_U_TR] ON PIMS_PROPERTY_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ORGANIZATION_ID = deleted.PROPERTY_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ORGANIZATION
    set "PROPERTY_ORGANIZATION_ID" = inserted."PROPERTY_ORGANIZATION_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ORGANIZATION
    inner join inserted
    on (PIMS_PROPERTY_ORGANIZATION.PROPERTY_ORGANIZATION_ID = inserted.PROPERTY_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CHRTAC_I_S_U_TR] ON PIMS_CHART_OF_ACCOUNTS_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CHART_OF_ACCOUNTS_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CHART_OF_ACCOUNTS_CODE
    inner join inserted
    on (PIMS_CHART_OF_ACCOUNTS_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LLPURP_I_S_I_TR] ON PIMS_LEASE_LEASE_PURPOSE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_LEASE_PURPOSE ("LEASE_LEASE_PURPOSE_ID",
      "LEASE_ID",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PURPOSE_OTHER_DESC",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_LEASE_PURPOSE_ID",
      "LEASE_ID",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PURPOSE_OTHER_DESC",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPPUR_I_S_U_TR] ON PIMS_PROPERTY_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_PURPOSE_TYPE_CODE = deleted.PROPERTY_PURPOSE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_PURPOSE_TYPE
    set "PROPERTY_PURPOSE_TYPE_CODE" = inserted."PROPERTY_PURPOSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_PURPOSE_TYPE
    inner join inserted
    on (PIMS_PROPERTY_PURPOSE_TYPE.PROPERTY_PURPOSE_TYPE_CODE = inserted.PROPERTY_PURPOSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CHKLIS_I_S_U_TR] ON PIMS_CHKLST_ITEM_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CHKLST_ITEM_STATUS_TYPE_CODE = deleted.CHKLST_ITEM_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CHKLST_ITEM_STATUS_TYPE
    set "CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CHKLST_ITEM_STATUS_TYPE
    inner join inserted
    on (PIMS_CHKLST_ITEM_STATUS_TYPE.CHKLST_ITEM_STATUS_TYPE_CODE = inserted.CHKLST_ITEM_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LELIST_I_S_I_TR] ON PIMS_LEASE_LICENSE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_LICENSE_TYPE ("LEASE_LICENSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_LICENSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRSCRC_I_S_U_TR] ON PIMS_PROPERTY_RESEARCH_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_RESEARCH_FILE_ID = deleted.PROPERTY_RESEARCH_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_RESEARCH_FILE
    set "PROPERTY_RESEARCH_FILE_ID" = inserted."PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "PROPERTY_NAME" = inserted."PROPERTY_NAME",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_LEGAL_OPINION_REQUIRED" = inserted."IS_LEGAL_OPINION_REQUIRED",
      "IS_LEGAL_OPINION_OBTAINED" = inserted."IS_LEGAL_OPINION_OBTAINED",
      "DOCUMENT_REFERENCE" = inserted."DOCUMENT_REFERENCE",
      "RESEARCH_SUMMARY" = inserted."RESEARCH_SUMMARY",
      "LOCATION" = inserted."LOCATION",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_RESEARCH_FILE
    inner join inserted
    on (PIMS_PROPERTY_RESEARCH_FILE.PROPERTY_RESEARCH_FILE_ID = inserted.PROPERTY_RESEARCH_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CLMTYP_I_S_U_TR] ON PIMS_CLAIM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CLAIM_ID = deleted.CLAIM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CLAIM
    set "CLAIM_ID" = inserted."CLAIM_ID",
      "CLAIM_UID" = inserted."CLAIM_UID",
      "KEYCLOAK_ROLE_ID" = inserted."KEYCLOAK_ROLE_ID",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CLAIM
    inner join inserted
    on (PIMS_CLAIM.CLAIM_ID = inserted.CLAIM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LESNOT_I_S_I_TR] ON PIMS_LEASE_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_NOTE ("LEASE_NOTE_ID",
      "LEASE_ID",
      "NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_NOTE_ID",
      "LEASE_ID",
      "NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRROAD_I_S_U_TR] ON PIMS_PROPERTY_ROAD_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ROAD_TYPE_CODE = deleted.PROPERTY_ROAD_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ROAD_TYPE
    set "PROPERTY_ROAD_TYPE_CODE" = inserted."PROPERTY_ROAD_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ROAD_TYPE
    inner join inserted
    on (PIMS_PROPERTY_ROAD_TYPE.PROPERTY_ROAD_TYPE_CODE = inserted.PROPERTY_ROAD_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CRQFIN_I_S_U_TR] ON PIMS_COMP_REQ_FINANCIAL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.COMP_REQ_FINANCIAL_ID = deleted.COMP_REQ_FINANCIAL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COMP_REQ_FINANCIAL
    set "COMP_REQ_FINANCIAL_ID" = inserted."COMP_REQ_FINANCIAL_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "FINANCIAL_ACTIVITY_CODE_ID" = inserted."FINANCIAL_ACTIVITY_CODE_ID",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "TAX_AMT" = inserted."TAX_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "IS_GST_REQUIRED" = inserted."IS_GST_REQUIRED",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COMP_REQ_FINANCIAL
    inner join inserted
    on (PIMS_COMP_REQ_FINANCIAL.COMP_REQ_FINANCIAL_ID = inserted.COMP_REQ_FINANCIAL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPRTY_I_S_I_TR] ON PIMS_LEASE_PAY_RVBL_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PAY_RVBL_TYPE ("LEASE_PAY_RVBL_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PAY_RVBL_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPSTS_I_S_U_TR] ON PIMS_PROPERTY_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_STATUS_TYPE_CODE = deleted.PROPERTY_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_STATUS_TYPE
    set "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_STATUS_TYPE
    inner join inserted
    on (PIMS_PROPERTY_STATUS_TYPE.PROPERTY_STATUS_TYPE_CODE = inserted.PROPERTY_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CMPREQ_I_S_U_TR] ON PIMS_COMPENSATION_REQUISITION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.COMPENSATION_REQUISITION_ID = deleted.COMPENSATION_REQUISITION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COMPENSATION_REQUISITION
    set "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_TEAM_ID" = inserted."ACQUISITION_FILE_TEAM_ID",
      "CHART_OF_ACCOUNTS_ID" = inserted."CHART_OF_ACCOUNTS_ID",
      "RESPONSIBILITY_ID" = inserted."RESPONSIBILITY_ID",
      "YEARLY_FINANCIAL_ID" = inserted."YEARLY_FINANCIAL_ID",
      "ALTERNATE_PROJECT_ID" = inserted."ALTERNATE_PROJECT_ID",
      "LEGACY_PAYEE" = inserted."LEGACY_PAYEE",
      "IS_DRAFT" = inserted."IS_DRAFT",
      "IS_PAYMENT_IN_TRUST" = inserted."IS_PAYMENT_IN_TRUST",
      "GST_NUMBER" = inserted."GST_NUMBER",
      "FISCAL_YEAR" = inserted."FISCAL_YEAR",
      "AGREEMENT_DT" = inserted."AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT" = inserted."EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT" = inserted."EXPROP_VESTING_DT",
      "GENERATION_DT" = inserted."GENERATION_DT",
      "FINALIZED_DATE" = inserted."FINALIZED_DATE",
      "ADV_PMT_SERVED_DT" = inserted."ADV_PMT_SERVED_DT",
      "SPECIAL_INSTRUCTION" = inserted."SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS" = inserted."DETAILED_REMARKS",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COMPENSATION_REQUISITION
    inner join inserted
    on (PIMS_COMPENSATION_REQUISITION.COMPENSATION_REQUISITION_ID = inserted.COMPENSATION_REQUISITION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPYMT_I_S_I_TR] ON PIMS_LEASE_PAYMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PAYMENT ("LEASE_PAYMENT_ID",
      "LEASE_PERIOD_ID",
      "LEASE_PAYMENT_METHOD_TYPE_CODE",
      "LEASE_PAYMENT_STATUS_TYPE_CODE",
      "LEASE_PAYMENT_CATEGORY_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "PAYMENT_RECEIVED_DATE",
      "PAYMENT_AMOUNT_PRE_TAX",
      "PAYMENT_AMOUNT_PST",
      "PAYMENT_AMOUNT_GST",
      "PAYMENT_AMOUNT_TOTAL",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_PAYMENT_ID",
      "LEASE_PERIOD_ID",
      "LEASE_PAYMENT_METHOD_TYPE_CODE",
      "LEASE_PAYMENT_STATUS_TYPE_CODE",
      "LEASE_PAYMENT_CATEGORY_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "PAYMENT_RECEIVED_DATE",
      "PAYMENT_AMOUNT_PRE_TAX",
      "PAYMENT_AMOUNT_PST",
      "PAYMENT_AMOUNT_GST",
      "PAYMENT_AMOUNT_TOTAL",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPTNR_I_S_U_TR] ON PIMS_PROPERTY_TENURE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_TENURE_TYPE_CODE = deleted.PROPERTY_TENURE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_TENURE_TYPE
    set "PROPERTY_TENURE_TYPE_CODE" = inserted."PROPERTY_TENURE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_TENURE_TYPE
    inner join inserted
    on (PIMS_PROPERTY_TENURE_TYPE.PROPERTY_TENURE_TYPE_CODE = inserted.PROPERTY_TENURE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_OUTCMT_I_S_U_TR] ON PIMS_CONSULTATION_OUTCOME_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONSULTATION_OUTCOME_TYPE_CODE = deleted.CONSULTATION_OUTCOME_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONSULTATION_OUTCOME_TYPE
    set "CONSULTATION_OUTCOME_TYPE_CODE" = inserted."CONSULTATION_OUTCOME_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONSULTATION_OUTCOME_TYPE
    inner join inserted
    on (PIMS_CONSULTATION_OUTCOME_TYPE.CONSULTATION_OUTCOME_TYPE_CODE = inserted.CONSULTATION_OUTCOME_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LPCATT_I_S_I_TR] ON PIMS_LEASE_PAYMENT_CATEGORY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PAYMENT_CATEGORY_TYPE ("LEASE_PAYMENT_CATEGORY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PAYMENT_CATEGORY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPTYP_I_S_U_TR] ON PIMS_PROPERTY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_TYPE_CODE = deleted.PROPERTY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_TYPE
    set "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_TYPE
    inner join inserted
    on (PIMS_PROPERTY_TYPE.PROPERTY_TYPE_CODE = inserted.PROPERTY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CONSTY_I_S_U_TR] ON PIMS_CONSULTATION_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONSULTATION_STATUS_TYPE_CODE = deleted.CONSULTATION_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONSULTATION_STATUS_TYPE
    set "CONSULTATION_STATUS_TYPE_CODE" = inserted."CONSULTATION_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONSULTATION_STATUS_TYPE
    inner join inserted
    on (PIMS_CONSULTATION_STATUS_TYPE.CONSULTATION_STATUS_TYPE_CODE = inserted.CONSULTATION_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPMMT_I_S_I_TR] ON PIMS_LEASE_PAYMENT_METHOD_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PAYMENT_METHOD_TYPE ("LEASE_PAYMENT_METHOD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PAYMENT_METHOD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PROVNC_I_S_U_TR] ON PIMS_PROVINCE_STATE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROVINCE_STATE_ID = deleted.PROVINCE_STATE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROVINCE_STATE
    set "PROVINCE_STATE_ID" = inserted."PROVINCE_STATE_ID",
      "COUNTRY_ID" = inserted."COUNTRY_ID",
      "PROVINCE_STATE_CODE" = inserted."PROVINCE_STATE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROVINCE_STATE
    inner join inserted
    on (PIMS_PROVINCE_STATE.PROVINCE_STATE_ID = inserted.PROVINCE_STATE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CONTYP_I_S_U_TR] ON PIMS_CONSULTATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONSULTATION_TYPE_CODE = deleted.CONSULTATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONSULTATION_TYPE
    set "CONSULTATION_TYPE_CODE" = inserted."CONSULTATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "OTHER_DESCRIPTION" = inserted."OTHER_DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONSULTATION_TYPE
    inner join inserted
    on (PIMS_CONSULTATION_TYPE.CONSULTATION_TYPE_CODE = inserted.CONSULTATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LPSTST_I_S_I_TR] ON PIMS_LEASE_PAYMENT_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PAYMENT_STATUS_TYPE ("LEASE_PAYMENT_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PAYMENT_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_REGION_I_S_U_TR] ON PIMS_REGION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.REGION_CODE = deleted.REGION_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_REGION
    set "REGION_CODE" = inserted."REGION_CODE",
      "REGION_NAME" = inserted."REGION_NAME",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_REGION
    inner join inserted
    on (PIMS_REGION.REGION_CODE = inserted.REGION_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CNTMTH_I_S_U_TR] ON PIMS_CONTACT_METHOD INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONTACT_METHOD_ID = deleted.CONTACT_METHOD_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONTACT_METHOD
    set "CONTACT_METHOD_ID" = inserted."CONTACT_METHOD_ID",
      "CONTACT_METHOD_TYPE_CODE" = inserted."CONTACT_METHOD_TYPE_CODE",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONTACT_METHOD_VALUE" = inserted."CONTACT_METHOD_VALUE",
      "IS_PREFERRED_METHOD" = inserted."IS_PREFERRED_METHOD",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONTACT_METHOD
    inner join inserted
    on (PIMS_CONTACT_METHOD.CONTACT_METHOD_ID = inserted.CONTACT_METHOD_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQCKI_A_S_IUD_TR] ON PIMS_ACQUISITION_CHECKLIST_ITEM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_CHECKLIST_ITEM_HIST set END_DATE_HIST = @curr_date where ACQUISITION_CHECKLIST_ITEM_ID in (select ACQUISITION_CHECKLIST_ITEM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_CHECKLIST_ITEM_HIST ([ACQUISITION_CHECKLIST_ITEM_ID], [ACQUISITION_FILE_ID], [ACQ_CHKLST_ITEM_TYPE_CODE], [CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_CHECKLIST_ITEM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_CHECKLIST_ITEM_ID], [ACQUISITION_FILE_ID], [ACQ_CHKLST_ITEM_TYPE_CODE], [CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM_H_ID_SEQ]) as [_ACQUISITION_CHECKLIST_ITEM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPERD_I_S_I_TR] ON PIMS_LEASE_PERIOD INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PERIOD ("LEASE_PERIOD_ID",
      "LEASE_ID",
      "LEASE_PERIOD_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "ADDL_RENT_FREQ",
      "VBL_RENT_FREQ",
      "PERIOD_START_DATE",
      "PERIOD_EXPIRY_DATE",
      "PERIOD_RENEWAL_DATE",
      "PAYMENT_AMOUNT",
      "PAYMENT_DUE_DATE",
      "PAYMENT_NOTE",
      "IS_GST_ELIGIBLE",
      "GST_AMOUNT",
      "IS_PERIOD_EXERCISED",
      "IS_VARIABLE_PAYMENT",
      "IS_FLEXIBLE_DURATION",
      "ADDL_RENT_AGREED_PMT",
      "ADDL_RENT_GST_AMOUNT",
      "IS_ADDL_RENT_SUBJECT_TO_GST",
      "VBL_RENT_AGREED_PMT",
      "VBL_RENT_GST_AMOUNT",
      "IS_VBL_RENT_SUBJECT_TO_GST",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_PERIOD_ID",
      "LEASE_ID",
      "LEASE_PERIOD_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "ADDL_RENT_FREQ",
      "VBL_RENT_FREQ",
      "PERIOD_START_DATE",
      "PERIOD_EXPIRY_DATE",
      "PERIOD_RENEWAL_DATE",
      "PAYMENT_AMOUNT",
      "PAYMENT_DUE_DATE",
      "PAYMENT_NOTE",
      "IS_GST_ELIGIBLE",
      "GST_AMOUNT",
      "IS_PERIOD_EXERCISED",
      "IS_VARIABLE_PAYMENT",
      "IS_FLEXIBLE_DURATION",
      "ADDL_RENT_AGREED_PMT",
      "ADDL_RENT_GST_AMOUNT",
      "IS_ADDL_RENT_SUBJECT_TO_GST",
      "VBL_RENT_AGREED_PMT",
      "VBL_RENT_GST_AMOUNT",
      "IS_VBL_RENT_SUBJECT_TO_GST",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RGNUSR_I_S_U_TR] ON PIMS_REGION_USER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.REGION_USER_ID = deleted.REGION_USER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_REGION_USER
    set "REGION_USER_ID" = inserted."REGION_USER_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "USER_ID" = inserted."USER_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_REGION_USER
    inner join inserted
    on (PIMS_REGION_USER.REGION_USER_ID = inserted.REGION_USER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CNTMTT_I_S_U_TR] ON PIMS_CONTACT_METHOD_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONTACT_METHOD_TYPE_CODE = deleted.CONTACT_METHOD_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONTACT_METHOD_TYPE
    set "CONTACT_METHOD_TYPE_CODE" = inserted."CONTACT_METHOD_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONTACT_METHOD_TYPE
    inner join inserted
    on (PIMS_CONTACT_METHOD_TYPE.CONTACT_METHOD_TYPE_CODE = inserted.CONTACT_METHOD_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQDOC_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_DOCUMENT_ID in (select ACQUISITION_FILE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_DOCUMENT_HIST ([ACQUISITION_FILE_DOCUMENT_ID], [ACQUISITION_FILE_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_DOCUMENT_ID], [ACQUISITION_FILE_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT_H_ID_SEQ]) as [_ACQUISITION_FILE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPRST_I_S_I_TR] ON PIMS_LEASE_PERIOD_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PERIOD_STATUS_TYPE ("LEASE_PERIOD_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PERIOD_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RQSRCT_I_S_U_TR] ON PIMS_REQUEST_SOURCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.REQUEST_SOURCE_TYPE_CODE = deleted.REQUEST_SOURCE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_REQUEST_SOURCE_TYPE
    set "REQUEST_SOURCE_TYPE_CODE" = inserted."REQUEST_SOURCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_REQUEST_SOURCE_TYPE
    inner join inserted
    on (PIMS_REQUEST_SOURCE_TYPE.REQUEST_SOURCE_TYPE_CODE = inserted.REQUEST_SOURCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_COSTYP_I_S_U_TR] ON PIMS_COST_TYPE_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ID = deleted.ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COST_TYPE_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COST_TYPE_CODE
    inner join inserted
    on (PIMS_COST_TYPE_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQFRM_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE_FORM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_FORM_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_FORM_ID in (select ACQUISITION_FILE_FORM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_FORM_HIST ([ACQUISITION_FILE_FORM_ID], [ACQUISITION_FILE_ID], [FORM_TYPE_CODE], [FORM_JSON], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_FORM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_FORM_ID], [ACQUISITION_FILE_ID], [FORM_TYPE_CODE], [FORM_JSON], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_FORM_H_ID_SEQ]) as [_ACQUISITION_FILE_FORM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPMTF_I_S_I_TR] ON PIMS_LEASE_PMT_FREQ_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PMT_FREQ_TYPE ("LEASE_PMT_FREQ_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PMT_FREQ_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RESRCH_I_S_U_TR] ON PIMS_RESEARCH_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_ID = deleted.RESEARCH_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE
    set "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "RESEARCH_FILE_STATUS_TYPE_CODE" = inserted."RESEARCH_FILE_STATUS_TYPE_CODE",
      "REQUEST_SOURCE_TYPE_CODE" = inserted."REQUEST_SOURCE_TYPE_CODE",
      "REQUESTOR_NAME" = inserted."REQUESTOR_NAME",
      "REQUESTOR_ORGANIZATION" = inserted."REQUESTOR_ORGANIZATION",
      "NAME" = inserted."NAME",
      "RFILE_NUMBER" = inserted."RFILE_NUMBER",
      "REQUEST_DATE" = inserted."REQUEST_DATE",
      "ROAD_NAME" = inserted."ROAD_NAME",
      "ROAD_ALIAS" = inserted."ROAD_ALIAS",
      "REQUEST_DESCRIPTION" = inserted."REQUEST_DESCRIPTION",
      "REQUEST_SOURCE_DESCRIPTION" = inserted."REQUEST_SOURCE_DESCRIPTION",
      "RESEARCH_RESULT" = inserted."RESEARCH_RESULT",
      "IS_EXPROPRIATION" = inserted."IS_EXPROPRIATION",
      "EXPROPRIATION_NOTES" = inserted."EXPROPRIATION_NOTES",
      "RESEARCH_COMPLETION_DATE" = inserted."RESEARCH_COMPLETION_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE
    inner join inserted
    on (PIMS_RESEARCH_FILE.RESEARCH_FILE_ID = inserted.RESEARCH_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CNTRY_I_S_U_TR] ON PIMS_COUNTRY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.COUNTRY_ID = deleted.COUNTRY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COUNTRY
    set "COUNTRY_ID" = inserted."COUNTRY_ID",
      "COUNTRY_CODE" = inserted."COUNTRY_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COUNTRY
    inner join inserted
    on (PIMS_COUNTRY.COUNTRY_ID = inserted.COUNTRY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQNFL_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_ID in (select ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_HIST ([ACQUISITION_FILE_ID], [PRNT_ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [SUBFILE_INTEREST_TYPE_CODE], [FILE_NAME], [FILE_NO], [FILE_NUM_SUFFIX], [LEGACY_FILE_NUMBER], [LEGACY_STAKEHOLDER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [PAIMS_ACQUISITION_FILE_ID], [TOTAL_ALLOWABLE_COMPENSATION], [OTHER_SUBFILE_INTEREST_TYPE], [EST_COMPLETION_DT], [POSSESSION_DT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_ID], [PRNT_ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [SUBFILE_INTEREST_TYPE_CODE], [FILE_NAME], [FILE_NO], [FILE_NUM_SUFFIX], [LEGACY_FILE_NUMBER], [LEGACY_STAKEHOLDER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [PAIMS_ACQUISITION_FILE_ID], [TOTAL_ALLOWABLE_COMPENSATION], [OTHER_SUBFILE_INTEREST_TYPE], [EST_COMPLETION_DT], [POSSESSION_DT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_H_ID_SEQ]) as [_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPRGT_I_S_I_TR] ON PIMS_LEASE_PROGRAM_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PROGRAM_TYPE ("LEASE_PROGRAM_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PROGRAM_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RFLDOC_I_S_U_TR] ON PIMS_RESEARCH_FILE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_DOCUMENT_ID = deleted.RESEARCH_FILE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE_DOCUMENT
    set "RESEARCH_FILE_DOCUMENT_ID" = inserted."RESEARCH_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_DOCUMENT
    inner join inserted
    on (PIMS_RESEARCH_FILE_DOCUMENT.RESEARCH_FILE_DOCUMENT_ID = inserted.RESEARCH_FILE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PIDSRT_I_S_U_TR] ON PIMS_DATA_SOURCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DATA_SOURCE_TYPE_CODE = deleted.DATA_SOURCE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DATA_SOURCE_TYPE
    set "DATA_SOURCE_TYPE_CODE" = inserted."DATA_SOURCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DATA_SOURCE_TYPE
    inner join inserted
    on (PIMS_DATA_SOURCE_TYPE.DATA_SOURCE_TYPE_CODE = inserted.DATA_SOURCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQNOT_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_NOTE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_NOTE_ID in (select ACQUISITION_FILE_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_NOTE_HIST ([ACQUISITION_FILE_NOTE_ID], [NOTE_ID], [ACQUISITION_FILE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_NOTE_ID], [NOTE_ID], [ACQUISITION_FILE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_NOTE_H_ID_SEQ]) as [_ACQUISITION_FILE_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LPRPTY_I_S_I_TR] ON PIMS_LEASE_PURPOSE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PURPOSE_TYPE ("LEASE_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RFLNOT_I_S_U_TR] ON PIMS_RESEARCH_FILE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_NOTE_ID = deleted.RESEARCH_FILE_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE_NOTE
    set "RESEARCH_FILE_NOTE_ID" = inserted."RESEARCH_FILE_NOTE_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_NOTE
    inner join inserted
    on (PIMS_RESEARCH_FILE_NOTE.RESEARCH_FILE_NOTE_ID = inserted.RESEARCH_FILE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPAPP_I_S_U_TR] ON PIMS_DISPOSITION_APPRAISAL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_APPRAISAL_ID = deleted.DISPOSITION_APPRAISAL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_APPRAISAL
    set "DISPOSITION_APPRAISAL_ID" = inserted."DISPOSITION_APPRAISAL_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "APPRAISED_AMT" = inserted."APPRAISED_AMT",
      "APPRAISAL_DT" = inserted."APPRAISAL_DT",
      "BCA_VALUE_AMT" = inserted."BCA_VALUE_AMT",
      "BCA_ROLL_YEAR" = inserted."BCA_ROLL_YEAR",
      "LIST_PRICE_AMT" = inserted."LIST_PRICE_AMT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_APPRAISAL
    inner join inserted
    on (PIMS_DISPOSITION_APPRAISAL.DISPOSITION_APPRAISAL_ID = inserted.DISPOSITION_APPRAISAL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQNTM_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE_TEAM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_TEAM_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_TEAM_ID in (select ACQUISITION_FILE_TEAM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_TEAM_HIST ([ACQUISITION_FILE_TEAM_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [ACQ_FL_TEAM_PROFILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_TEAM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_TEAM_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [ACQ_FL_TEAM_PROFILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_TEAM_H_ID_SEQ]) as [_ACQUISITION_FILE_TEAM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSRNWL_I_S_I_TR] ON PIMS_LEASE_RENEWAL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_RENEWAL ("LEASE_RENEWAL_ID",
      "LEASE_ID",
      "COMMENCEMENT_DT",
      "EXPIRY_DT",
      "IS_EXERCISED",
      "RENEWAL_NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_RENEWAL_ID",
      "LEASE_ID",
      "COMMENCEMENT_DT",
      "EXPIRY_DT",
      "IS_EXERCISED",
      "RENEWAL_NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RFLPRJ_I_S_U_TR] ON PIMS_RESEARCH_FILE_PROJECT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_PROJECT_ID = deleted.RESEARCH_FILE_PROJECT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE_PROJECT
    set "RESEARCH_FILE_PROJECT_ID" = inserted."RESEARCH_FILE_PROJECT_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_PROJECT
    inner join inserted
    on (PIMS_RESEARCH_FILE_PROJECT.RESEARCH_FILE_PROJECT_ID = inserted.RESEARCH_FILE_PROJECT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSPCKI_I_S_U_TR] ON PIMS_DISPOSITION_CHECKLIST_ITEM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_CHECKLIST_ITEM_ID = deleted.DISPOSITION_CHECKLIST_ITEM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_CHECKLIST_ITEM
    set "DISPOSITION_CHECKLIST_ITEM_ID" = inserted."DISPOSITION_CHECKLIST_ITEM_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DSP_CHKLST_ITEM_TYPE_CODE" = inserted."DSP_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_CHECKLIST_ITEM
    inner join inserted
    on (PIMS_DISPOSITION_CHECKLIST_ITEM.DISPOSITION_CHECKLIST_ITEM_ID = inserted.DISPOSITION_CHECKLIST_ITEM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQOWN_A_S_IUD_TR] ON PIMS_ACQUISITION_OWNER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_OWNER_HIST set END_DATE_HIST = @curr_date where ACQUISITION_OWNER_ID in (select ACQUISITION_OWNER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_OWNER_HIST ([ACQUISITION_OWNER_ID], [ACQUISITION_FILE_ID], [ADDRESS_ID], [IS_PRIMARY_OWNER], [IS_ORGANIZATION], [LAST_NAME_AND_CORP_NAME], [OTHER_NAME], [GIVEN_NAME], [INCORPORATION_NUMBER], [REGISTRATION_NUMBER], [CONTACT_EMAIL_ADDR], [CONTACT_PHONE_NUM], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_OWNER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_OWNER_ID], [ACQUISITION_FILE_ID], [ADDRESS_ID], [IS_PRIMARY_OWNER], [IS_ORGANIZATION], [LAST_NAME_AND_CORP_NAME], [OTHER_NAME], [GIVEN_NAME], [INCORPORATION_NUMBER], [REGISTRATION_NUMBER], [CONTACT_EMAIL_ADDR], [CONTACT_PHONE_NUM], [EFFECTIVE_DATE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_OWNER_H_ID_SEQ]) as [_ACQUISITION_OWNER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST]
	ADD CONSTRAINT [ACRQST_USER_ROLE_REGION_TUC]
	UNIQUE ([REGION_CODE], [ROLE_ID], [USER_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_HIST]
	ADD CONSTRAINT [PIMS_ACRQST_H_UK]
	UNIQUE ([_ACCESS_REQUEST_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION]
	ADD CONSTRAINT [ACRQOR_ORGANIZATION_ACCESS_REQUEST_TUC]
	UNIQUE ([ORGANIZATION_ID], [ACCESS_REQUEST_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_HIST]
	ADD CONSTRAINT [PIMS_ACRQOR_H_UK]
	UNIQUE ([_ACCESS_REQUEST_ORGANIZATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROJECT]
	ADD CONSTRAINT [PROJCT_DESCRIPTION_CODE_TUC]
	UNIQUE ([DESCRIPTION], [CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM_HIST]
	ADD CONSTRAINT [PIMS_ACQCKI_H_UK]
	UNIQUE ([_ACQUISITION_CHECKLIST_ITEM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT]
	ADD CONSTRAINT [ACQNOT_ACQUISITION_FILE_DOCUMENT_TUC]
	UNIQUE ([DOCUMENT_ID], [ACQUISITION_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_ACQDOC_H_UK]
	UNIQUE ([_ACQUISITION_FILE_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_FORM_HIST]
	ADD CONSTRAINT [PIMS_ACQFRM_H_UK]
	UNIQUE ([_ACQUISITION_FILE_FORM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST]
	ADD CONSTRAINT [PIMS_ACQNFL_H_UK]
	UNIQUE ([_ACQUISITION_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_NOTE]
	ADD CONSTRAINT [ACQNOT_ACQUISITION_FILE_NOTE_TUC]
	UNIQUE ([ACQUISITION_FILE_ID], [NOTE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_NOTE_HIST]
	ADD CONSTRAINT [PIMS_ACQNOT_H_UK]
	UNIQUE ([_ACQUISITION_FILE_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_TEAM]
	ADD CONSTRAINT [ACQNTM_FILE_PROFILE_TUC]
	UNIQUE ([ACQUISITION_FILE_ID], [ACQ_FL_TEAM_PROFILE_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_TEAM_HIST]
	ADD CONSTRAINT [PIMS_ACQNTM_H_UK]
	UNIQUE ([_ACQUISITION_FILE_TEAM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST]
	ADD CONSTRAINT [PIMS_ACQOWN_H_UK]
	UNIQUE ([_ACQUISITION_OWNER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ADDRESS_HIST]
	ADD CONSTRAINT [PIMS_ADDRSS_H_UK]
	UNIQUE ([_ADDRESS_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_AGREEMENT_HIST]
	ADD CONSTRAINT [PIMS_AGRMNT_H_UK]
	UNIQUE ([_AGREEMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_BUSINESS_FUNCTION_CODE_HIST]
	ADD CONSTRAINT [PIMS_BIZFCN_H_UK]
	UNIQUE ([_BUSINESS_FUNCTION_CODE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_CHART_OF_ACCOUNTS_CODE_HIST]
	ADD CONSTRAINT [PIMS_CHRTAC_H_UK]
	UNIQUE ([_CHART_OF_ACCOUNTS_CODE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_CLAIM_HIST]
	ADD CONSTRAINT [PIMS_CLMTYP_H_UK]
	UNIQUE ([_CLAIM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION_HIST]
	ADD CONSTRAINT [PIMS_CMPREQ_H_UK]
	UNIQUE ([_COMPENSATION_REQUISITION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_COMP_REQ_FINANCIAL_HIST]
	ADD CONSTRAINT [PIMS_CRQFIN_H_UK]
	UNIQUE ([_COMP_REQ_FINANCIAL_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_CONTACT_METHOD_HIST]
	ADD CONSTRAINT [PIMS_CNTMTH_H_UK]
	UNIQUE ([_CONTACT_METHOD_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_COST_TYPE_CODE_HIST]
	ADD CONSTRAINT [PIMS_COSTYP_H_UK]
	UNIQUE ([_COST_TYPE_CODE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_APPRAISAL_HIST]
	ADD CONSTRAINT [PIMS_DSPAPP_H_UK]
	UNIQUE ([_DISPOSITION_APPRAISAL_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM_HIST]
	ADD CONSTRAINT [PIMS_DSPCKI_H_UK]
	UNIQUE ([_DISPOSITION_CHECKLIST_ITEM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT]
	ADD CONSTRAINT [DSPDOC_DISPOSITION_DOCUMENT_TUC]
	UNIQUE ([DISPOSITION_FILE_ID], [DOCUMENT_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_DSPDOC_H_UK]
	UNIQUE ([_DISPOSITION_FILE_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_HIST]
	ADD CONSTRAINT [PIMS_DISPFL_H_UK]
	UNIQUE ([_DISPOSITION_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_NOTE]
	ADD CONSTRAINT [DSPNOT_DISPOSITION_NOTE_TUC]
	UNIQUE ([DISPOSITION_FILE_ID], [NOTE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_NOTE_HIST]
	ADD CONSTRAINT [PIMS_DSPNOT_H_UK]
	UNIQUE ([_DISPOSITION_FILE_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY]
	ADD CONSTRAINT [DSPPRP_DISPOSITION_PROPERTY_TUC]
	UNIQUE ([PROPERTY_ID], [DISPOSITION_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY_HIST]
	ADD CONSTRAINT [PIMS_DSPPRP_H_UK]
	UNIQUE ([_DISPOSITION_FILE_PROPERTY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM]
	ADD CONSTRAINT [DSPFTM_DSP_FILE_PROFILE_TUC]
	UNIQUE ([DISPOSITION_FILE_ID], [DSP_FL_TEAM_PROFILE_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM_HIST]
	ADD CONSTRAINT [PIMS_DSPFTM_H_UK]
	UNIQUE ([_DISPOSITION_FILE_TEAM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_OFFER_HIST]
	ADD CONSTRAINT [PIMS_DSPOFR_H_UK]
	UNIQUE ([_DISPOSITION_OFFER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_PURCHASER_HIST]
	ADD CONSTRAINT [PIMS_DSPPUR_H_UK]
	UNIQUE ([_DISPOSITION_PURCHASER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_SALE_HIST]
	ADD CONSTRAINT [PIMS_DSPSAL_H_UK]
	UNIQUE ([_DISPOSITION_SALE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_CATEGORY_SUBTYPE]
	ADD CONSTRAINT [DCCTSB_DOCUMENT_CATEGORY_SUBTYPE_TUC]
	UNIQUE ([DOCUMENT_TYPE_ID], [DOCUMENT_CATEGORY_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_DOCMNT_H_UK]
	UNIQUE ([_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
	ADD CONSTRAINT [LESDOC_LEASE_DOCUMENT_TUC]
	UNIQUE ([DOCUMENT_ID], [LEASE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]
	ADD CONSTRAINT [RFLDOC_RESEARCH_FILE_DOCUMENT_TUC]
	UNIQUE ([DOCUMENT_ID], [RESEARCH_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE_HIST]
	ADD CONSTRAINT [PIMS_DOCQUE_H_UK]
	UNIQUE ([_DOCUMENT_QUEUE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP_HIST]
	ADD CONSTRAINT [PIMS_DOCTYP_H_UK]
	UNIQUE ([_DOCUMENT_TYP_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT_HIST]
	ADD CONSTRAINT [PIMS_DSPPAG_H_UK]
	UNIQUE ([_DSP_PURCH_AGENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR_HIST]
	ADD CONSTRAINT [PIMS_DSPPSL_H_UK]
	UNIQUE ([_DSP_PURCH_SOLICITOR_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT_HIST]
	ADD CONSTRAINT [PIMS_EXPPMT_H_UK]
	UNIQUE ([_EXPROPRIATION_PAYMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_EXPROP_PMT_PMT_ITEM]
	ADD CONSTRAINT [XPMTITY_EXPROP_PMT_PMT_TYPE_TUC]
	UNIQUE ([PAYMENT_ITEM_TYPE_CODE], [EXPROPRIATION_PAYMENT_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_EXPROP_PMT_PMT_ITEM_HIST]
	ADD CONSTRAINT [PIMS_XPMTIT_H_UK]
	UNIQUE ([_EXPROP_PMT_PMT_ITEM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE_HIST]
	ADD CONSTRAINT [PIMS_FINACT_H_UK]
	UNIQUE ([_FINANCIAL_ACTIVITY_CODE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_H120_CATEGORY_HIST]
	ADD CONSTRAINT [PIMS_H120CT_H_UK]
	UNIQUE ([_H120_CATEGORY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_HISTORICAL_FILE_NUMBER_HIST]
	ADD CONSTRAINT [PIMS_HFLNUM_H_UK]
	UNIQUE ([_HISTORICAL_FILE_NUMBER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_INSURANCE_HIST]
	ADD CONSTRAINT [PIMS_INSRNC_H_UK]
	UNIQUE ([_INSURANCE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER_HIST]
	ADD CONSTRAINT [PIMS_INTHLD_H_UK]
	UNIQUE ([_INTEREST_HOLDER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]
	ADD CONSTRAINT [PRACQF_PROP_ACQ_TUC]
	UNIQUE ([PROPERTY_ID], [ACQUISITION_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST_HIST]
	ADD CONSTRAINT [PIMS_IHPRIN_H_UK]
	UNIQUE ([_INTHLDR_PROP_INTEREST_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_CHECKLIST_ITEM_HIST]
	ADD CONSTRAINT [PIMS_LCHKLI_H_UK]
	UNIQUE ([_LEASE_CHECKLIST_ITEM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST]
	ADD CONSTRAINT [PIMS_LESCON_H_UK]
	UNIQUE ([_LEASE_CONSULTATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_LESDOC_H_UK]
	UNIQUE ([_LEASE_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_HIST]
	ADD CONSTRAINT [PIMS_LEASE_H_UK]
	UNIQUE ([_LEASE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_LEASE_PURPOSE_HIST]
	ADD CONSTRAINT [PIMS_LLPURP_H_UK]
	UNIQUE ([_LEASE_LEASE_PURPOSE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
	ADD CONSTRAINT [LESNOT_LEASE_NOTE_TUC]
	UNIQUE ([NOTE_ID], [LEASE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_NOTE_HIST]
	ADD CONSTRAINT [PIMS_LESNOT_H_UK]
	UNIQUE ([_LEASE_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT_HIST]
	ADD CONSTRAINT [PIMS_LSPYMT_H_UK]
	UNIQUE ([_LEASE_PAYMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_HIST]
	ADD CONSTRAINT [PIMS_LSPERD_H_UK]
	UNIQUE ([_LEASE_PERIOD_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_RENEWAL_HIST]
	ADD CONSTRAINT [PIMS_LSRNWL_H_UK]
	UNIQUE ([_LEASE_RENEWAL_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER]
	ADD CONSTRAINT [LSTKHL_LEASE_PERSON_ORG_TUC]
	UNIQUE ([ORGANIZATION_ID], [PERSON_ID], [LEASE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST]
	ADD CONSTRAINT [PIMS_LSKCRQ_H_UK]
	UNIQUE ([_LEASE_STAKEHOLDER_COMP_REQ_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_HIST]
	ADD CONSTRAINT [PIMS_LSTKHL_H_UK]
	UNIQUE ([_LEASE_STAKEHOLDER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_NOTE_HIST]
	ADD CONSTRAINT [PIMS_NOTE_H_UK]
	UNIQUE ([_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION_ADDRESS]
	ADD CONSTRAINT [ORGADD_UNQ_ADDR_TYPE_TUC]
	UNIQUE ([ORGANIZATION_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION_ADDRESS_HIST]
	ADD CONSTRAINT [PIMS_ORGADD_H_UK]
	UNIQUE ([_ORGANIZATION_ADDRESS_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION_HIST]
	ADD CONSTRAINT [PIMS_ORG_H_UK]
	UNIQUE ([_ORGANIZATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PERSON_ADDRESS]
	ADD CONSTRAINT [PERADD_UNQ_ADDR_TYPE_TUC]
	UNIQUE ([PERSON_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PERSON_ADDRESS_HIST]
	ADD CONSTRAINT [PIMS_PERADD_H_UK]
	UNIQUE ([_PERSON_ADDRESS_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PERSON_HIST]
	ADD CONSTRAINT [PIMS_PERSON_H_UK]
	UNIQUE ([_PERSON_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PERSON_ORGANIZATION]
	ADD CONSTRAINT [PERORG_PERSON_ORGANIZATION_TUC]
	UNIQUE ([ORGANIZATION_ID], [PERSON_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PERSON_ORGANIZATION_HIST]
	ADD CONSTRAINT [PIMS_PERORG_H_UK]
	UNIQUE ([_PERSON_ORGANIZATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE]
	ADD CONSTRAINT [PRSCRC_RSRCH_FILE_PROP_TUC]
	UNIQUE ([RESEARCH_FILE_ID], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]
	ADD CONSTRAINT [PRSPRP_PROP_PURPOSE_TUC]
	UNIQUE ([PROP_RESEARCH_PURPOSE_TYPE_CODE], [PROPERTY_RESEARCH_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PRODUCT_HIST]
	ADD CONSTRAINT [PIMS_PRODCT_H_UK]
	UNIQUE ([_PRODUCT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROJECT_DOCUMENT]
	ADD CONSTRAINT [PRJDOC_PROJECT_DOCUMENT_TUC]
	UNIQUE ([DOCUMENT_ID], [PROJECT_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROJECT_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_PRJDOC_H_UK]
	UNIQUE ([_PROJECT_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROJECT_HIST]
	ADD CONSTRAINT [PIMS_PROJCT_H_UK]
	UNIQUE ([_PROJECT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROJECT_NOTE]
	ADD CONSTRAINT [PRJNOT_PROJECT_NOTE_TUC]
	UNIQUE ([NOTE_ID], [PROJECT_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROJECT_NOTE_HIST]
	ADD CONSTRAINT [PIMS_PRJNOT_H_UK]
	UNIQUE ([_PROJECT_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROJECT_PERSON]
	ADD CONSTRAINT [PRJPER_PROJECT_PERSON_TUC]
	UNIQUE ([PERSON_ID], [PROJECT_ID], [PROJECT_PERSON_ROLE_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROJECT_PERSON_HIST]
	ADD CONSTRAINT [PIMS_PRJPER_H_UK]
	UNIQUE ([_PROJECT_PERSON_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROJECT_PRODUCT_HIST]
	ADD CONSTRAINT [PIMS_PRJPRD_H_UK]
	UNIQUE ([_PROJECT_PRODUCT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_HIST]
	ADD CONSTRAINT [PIMS_PRACQF_H_UK]
	UNIQUE ([_PROPERTY_ACQUISITION_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_PRACDO_H_UK]
	UNIQUE ([_PROPERTY_ACTIVITY_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
	ADD CONSTRAINT [PIMS_PRPACT_H_UK]
	UNIQUE ([_PROPERTY_ACTIVITY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE_HIST]
	ADD CONSTRAINT [PIMS_PRACIN_H_UK]
	UNIQUE ([_PROPERTY_ACTIVITY_INVOICE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT_HIST]
	ADD CONSTRAINT [PIMS_PRPCNT_H_UK]
	UNIQUE ([_PROPERTY_CONTACT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_HIST]
	ADD CONSTRAINT [PIMS_PRPRTY_H_UK]
	UNIQUE ([_PROPERTY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	ADD CONSTRAINT [PIMPRV_LEASE_IMPROVEMENT_TUC]
	UNIQUE ([LEASE_ID], [PROPERTY_IMPROVEMENT_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT_HIST]
	ADD CONSTRAINT [PIMS_PIMPRV_H_UK]
	UNIQUE ([_PROPERTY_IMPROVEMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	ADD CONSTRAINT [PROPLS_PROPERTY_LEASE_TUC]
	UNIQUE ([LEASE_ID], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE_HIST]
	ADD CONSTRAINT [PIMS_PROPLS_H_UK]
	UNIQUE ([_PROPERTY_LEASE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_OPERATION_HIST]
	ADD CONSTRAINT [PIMS_PROPOP_H_UK]
	UNIQUE ([_PROPERTY_OPERATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION]
	ADD CONSTRAINT [PRPORG_PROPERTY_ORGANIZATION_TUC]
	UNIQUE ([PROPERTY_ID], [ORGANIZATION_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION_HIST]
	ADD CONSTRAINT [PIMS_PRPORG_H_UK]
	UNIQUE ([_PROPERTY_ORGANIZATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE_HIST]
	ADD CONSTRAINT [PIMS_PRSCRC_H_UK]
	UNIQUE ([_PROPERTY_RESEARCH_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROP_ACQ_FL_COMP_REQ]
	ADD CONSTRAINT [PACMRQ_PROP_COMPREQ_TUC]
	UNIQUE ([PROPERTY_ACQUISITION_FILE_ID], [COMPENSATION_REQUISITION_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROP_ACQ_FL_COMP_REQ_HIST]
	ADD CONSTRAINT [PIMS_PACMRQ_H_UK]
	UNIQUE ([_PROP_ACQ_FL_COMP_REQ_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY_HIST]
	ADD CONSTRAINT [PIMS_PAINVP_H_UK]
	UNIQUE ([_PROP_ACT_INVOLVED_PARTY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT_HIST]
	ADD CONSTRAINT [PIMS_PRACMC_H_UK]
	UNIQUE ([_PROP_ACT_MIN_CONTACT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROP_LEASE_COMP_REQ_HIST]
	ADD CONSTRAINT [PIMS_PLCMRQ_H_UK]
	UNIQUE ([_PROP_LEASE_COMP_REQ_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY_HIST]
	ADD CONSTRAINT [PIMS_PRPRAC_H_UK]
	UNIQUE ([_PROP_PROP_ACTIVITY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]
	ADD CONSTRAINT [PRPRAT_PROP_ANOMALY_TYPE_TUC]
	UNIQUE ([PROPERTY_ANOMALY_TYPE_CODE], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_PURPOSE_HIST]
	ADD CONSTRAINT [PIMS_PRPRPU_H_UK]
	UNIQUE ([_PROP_PROP_PURPOSE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYPE]
	ADD CONSTRAINT [PRPRRT_PROP_ROAD_TYPE_TUC]
	UNIQUE ([PROPERTY_ROAD_TYPE_CODE], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYPE]
	ADD CONSTRAINT [PRPRTT_PROP_PROP_TENURE_TUC]
	UNIQUE ([PROPERTY_TENURE_TYPE_CODE], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_REGION_USER]
	ADD CONSTRAINT [RGNUSR_REGION_USER_TUC]
	UNIQUE ([USER_ID], [REGION_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_REGION_USER_HIST]
	ADD CONSTRAINT [PIMS_RGNUSR_H_UK]
	UNIQUE ([_REGION_USER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_RFLDOC_H_UK]
	UNIQUE ([_RESEARCH_FILE_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_HIST]
	ADD CONSTRAINT [PIMS_RESRCH_H_UK]
	UNIQUE ([_RESEARCH_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]
	ADD CONSTRAINT [RFLNOT_RSRCH_FILE_NOTE_TUC]
	UNIQUE ([NOTE_ID], [RESEARCH_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE_HIST]
	ADD CONSTRAINT [PIMS_RFLNOT_H_UK]
	UNIQUE ([_RESEARCH_FILE_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PROJECT]
	ADD CONSTRAINT [RFLPRJ_RESEARCH_FILE_PROJECT_TUC]
	UNIQUE ([PROJECT_ID], [RESEARCH_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PROJECT_HIST]
	ADD CONSTRAINT [PIMS_RFLPRJ_H_UK]
	UNIQUE ([_RESEARCH_FILE_PROJECT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE]
	ADD CONSTRAINT [RSFLPR_RSRCH_FL_RSRCH_FL_PURP_TUC]
	UNIQUE ([RESEARCH_PURPOSE_TYPE_CODE], [RESEARCH_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE_HIST]
	ADD CONSTRAINT [PIMS_RSFLPR_H_UK]
	UNIQUE ([_RESEARCH_FILE_PURPOSE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_RESPONSIBILITY_CODE_HIST]
	ADD CONSTRAINT [PIMS_RESPCD_H_UK]
	UNIQUE ([_RESPONSIBILITY_CODE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ROLE_CLAIM]
	ADD CONSTRAINT [ROLCLM_ROLE_CLAIM_TUC]
	UNIQUE ([ROLE_ID], [CLAIM_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ROLE_CLAIM_HIST]
	ADD CONSTRAINT [PIMS_ROLCLM_H_UK]
	UNIQUE ([_ROLE_CLAIM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ROLE_HIST]
	ADD CONSTRAINT [PIMS_ROLE_H_UK]
	UNIQUE ([_ROLE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HIST]
	ADD CONSTRAINT [PIMS_SECDEP_H_UK]
	UNIQUE ([_SECURITY_DEPOSIT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	ADD CONSTRAINT [SCDPHL_SECURITY_DEPOSIT_ID_TUC]
	UNIQUE ([SECURITY_DEPOSIT_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER_HIST]
	ADD CONSTRAINT [PIMS_SCDPHL_H_UK]
	UNIQUE ([_SECURITY_DEPOSIT_HOLDER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HIST]
	ADD CONSTRAINT [PIMS_SDRTRN_H_UK]
	UNIQUE ([_SECURITY_DEPOSIT_RETURN_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	ADD CONSTRAINT [SCDPRH_SECURITY_DEPOSIT_RETURN_ID_TUC]
	UNIQUE ([SECURITY_DEPOSIT_RETURN_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST]
	ADD CONSTRAINT [PIMS_SCDPRH_H_UK]
	UNIQUE ([_SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_STATIC_VARIABLE_HIST]
	ADD CONSTRAINT [PIMS_STAVBL_H_UK]
	UNIQUE ([_STATIC_VARIABLE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_TAKE_HIST]
	ADD CONSTRAINT [PIMS_TAKE_H_UK]
	UNIQUE ([_TAKE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_USER_HIST]
	ADD CONSTRAINT [PIMS_USER_H_UK]
	UNIQUE ([_USER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION]
	ADD CONSTRAINT [USRORG_USER_ROLE_ORGANIZATION_TUC]
	UNIQUE ([ORGANIZATION_ID], [USER_ID], [ROLE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION_HIST]
	ADD CONSTRAINT [PIMS_USRORG_H_UK]
	UNIQUE ([_USER_ORGANIZATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_USER_ROLE]
	ADD CONSTRAINT [USERRL_USER_ROLE_TUC]
	UNIQUE ([USER_ID], [ROLE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_USER_ROLE_HIST]
	ADD CONSTRAINT [PIMS_USERRL_H_UK]
	UNIQUE ([_USER_ROLE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_WORK_ACTIVITY_CODE_HIST]
	ADD CONSTRAINT [PIMS_WRKACT_H_UK]
	UNIQUE ([_WORK_ACTIVITY_CODE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_YEARLY_FINANCIAL_CODE_HIST]
	ADD CONSTRAINT [PIMS_YRFINC_H_UK]
	UNIQUE ([_YEARLY_FINANCIAL_CODE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE] ADD CONSTRAINT [ACQNFL_SUBFILE_INTEREST_TYPE_CODE_TCC] 
    CHECK ((PRNT_ACQUISITION_FILE_ID IS NOT NULL AND SUBFILE_INTEREST_TYPE_CODE IS NOT NULL) OR (PRNT_ACQUISITION_FILE_ID IS NULL AND SUBFILE_INTEREST_TYPE_CODE IS NULL))
GO  

ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	ADD CONSTRAINT [INTHLD_PERSON_ORGANIZATION_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO

ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT]
	ADD CONSTRAINT [DSPPAG_%column%_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO

ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR]
	ADD CONSTRAINT [DSPPSL_%column%_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_PURCHASER]
	ADD CONSTRAINT [DSPPUR_%column%_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO

ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT]
	ADD CONSTRAINT [FORM8_PERSON_ORGANIZATION_TCC] CHECK ([ACQUISITION_OWNER_ID] IS NULL AND [INTEREST_HOLDER_ID] IS NOT NULL OR [ACQUISITION_OWNER_ID] IS NOT NULL AND [INTEREST_HOLDER_ID] IS NULL)
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	ADD CONSTRAINT [SCDPHL_ONE_HOLDER_ONLY_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	ADD CONSTRAINT [SCDPRH_ONE_HOLDER_ONLY_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO

ALTER TABLE [dbo].[PIMS_USER]
	ADD CONSTRAINT [PIM_USERTY_PIM_USER_FK]
	FOREIGN KEY([USER_TYPE_CODE])
	REFERENCES [dbo].[PIMS_USER_TYPE]([USER_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_USER]
	ADD CONSTRAINT [PIM_PERSON_PIM_USER_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST]
	ADD CONSTRAINT [PIM_USERTY_PIM_ACRQST_FK]
	FOREIGN KEY([USER_TYPE_CODE])
	REFERENCES [dbo].[PIMS_USER_TYPE]([USER_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST]
	ADD CONSTRAINT [PIM_USER_PIM_ACRQST_FK]
	FOREIGN KEY([USER_ID])
	REFERENCES [dbo].[PIMS_USER]([USER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST]
	ADD CONSTRAINT [PIM_ROLE_PIM_ACRQST_FK]
	FOREIGN KEY([ROLE_ID])
	REFERENCES [dbo].[PIMS_ROLE]([ROLE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST]
	ADD CONSTRAINT [PIM_REGION_PIM_ACRQST_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST]
	ADD CONSTRAINT [PIM_ARQSTT_PIM_ACRQST_FK]
	FOREIGN KEY([ACCESS_REQUEST_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACCESS_REQUEST_STATUS_TYPE]([ACCESS_REQUEST_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISTRICT]
	ADD CONSTRAINT [PIM_REGION_PIM_DSTRCT_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION]
	ADD CONSTRAINT [PIM_REGION_PIM_ORG_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION]
	ADD CONSTRAINT [PIM_ORGTYP_PIM_ORG_FK]
	FOREIGN KEY([ORGANIZATION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ORGANIZATION_TYPE]([ORGANIZATION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION]
	ADD CONSTRAINT [PIM_ORGIDT_PIM_ORG_FK]
	FOREIGN KEY([ORG_IDENTIFIER_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ORG_IDENTIFIER_TYPE]([ORG_IDENTIFIER_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION]
	ADD CONSTRAINT [PIM_ORG_PIM_PRNT_ORG_FK]
	FOREIGN KEY([PRNT_ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION]
	ADD CONSTRAINT [PIM_DSTRCT_PIM_ORG_FK]
	FOREIGN KEY([DISTRICT_CODE])
	REFERENCES [dbo].[PIMS_DISTRICT]([DISTRICT_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION]
	ADD CONSTRAINT [PIM_ORG_PIM_ACRQOR_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION]
	ADD CONSTRAINT [PIM_ACRQST_PIM_ACRQOR_FK]
	FOREIGN KEY([ACCESS_REQUEST_ID])
	REFERENCES [dbo].[PIMS_ACCESS_REQUEST]([ACCESS_REQUEST_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQ_CHKLST_ITEM_TYPE]
	ADD CONSTRAINT [PIM_AQCSCT_PIM_ACQCIT_FK]
	FOREIGN KEY([ACQ_CHKLST_SECTION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQ_CHKLST_SECTION_TYPE]([ACQ_CHKLST_SECTION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROJECT]
	ADD CONSTRAINT [PIM_WRKACT_PIM_PROJCT_FK]
	FOREIGN KEY([WORK_ACTIVITY_CODE_ID])
	REFERENCES [dbo].[PIMS_WORK_ACTIVITY_CODE]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROJECT]
	ADD CONSTRAINT [PIM_REGION_PIM_PROJCT_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROJECT]
	ADD CONSTRAINT [PIM_PRJSTS_PIM_PROJCT_FK]
	FOREIGN KEY([PROJECT_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROJECT_STATUS_TYPE]([PROJECT_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROJECT]
	ADD CONSTRAINT [PIM_COSTYP_PIM_PROJCT_FK]
	FOREIGN KEY([COST_TYPE_CODE_ID])
	REFERENCES [dbo].[PIMS_COST_TYPE_CODE]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROJECT]
	ADD CONSTRAINT [PIM_BIZFCN_PIM_PROJCT_FK]
	FOREIGN KEY([BUSINESS_FUNCTION_CODE_ID])
	REFERENCES [dbo].[PIMS_BUSINESS_FUNCTION_CODE]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_SBFLIT_PIM_ACQNFL_FK]
	FOREIGN KEY([SUBFILE_INTEREST_TYPE_CODE])
	REFERENCES [dbo].[PIMS_SUBFILE_INTEREST_TYPE]([SUBFILE_INTEREST_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_REGION_PIM_ACQNFL_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_PROJCT_PIM_ACQNFL_FK]
	FOREIGN KEY([PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_PRODCT_PIM_ACQNFL_FK]
	FOREIGN KEY([PRODUCT_ID])
	REFERENCES [dbo].[PIMS_PRODUCT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQTYP_PIM_ACQNFL_FK]
	FOREIGN KEY([ACQUISITION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQUISITION_TYPE]([ACQUISITION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQPFS_PIM_ACQNFL_FK]
	FOREIGN KEY([ACQ_PHYS_FILE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQ_PHYS_FILE_STATUS_TYPE]([ACQ_PHYS_FILE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQNFL_FK]
	FOREIGN KEY([PRNT_ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQFTY_PIM_ACQNFL_FK]
	FOREIGN KEY([ACQUISITION_FUNDING_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQUISITION_FUNDING_TYPE]([ACQUISITION_FUNDING_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQFST_PIM_ACQNFL_FK]
	FOREIGN KEY([ACQUISITION_FILE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE_STATUS_TYPE]([ACQUISITION_FILE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM]
	ADD CONSTRAINT [PIM_CHKLIS_PIM_ACQCKI_FK]
	FOREIGN KEY([CHKLST_ITEM_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CHKLST_ITEM_STATUS_TYPE]([CHKLST_ITEM_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQCKI_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM]
	ADD CONSTRAINT [PIM_ACQCIT_PIM_ACQCKI_FK]
	FOREIGN KEY([ACQ_CHKLST_ITEM_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQ_CHKLST_ITEM_TYPE]([ACQ_CHKLST_ITEM_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCTYP_PIM_DOCMNT_FK]
	FOREIGN KEY([DOCUMENT_TYPE_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT_TYP]([DOCUMENT_TYPE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCSTY_PIM_DOCMNT_FK]
	FOREIGN KEY([DOCUMENT_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DOCUMENT_STATUS_TYPE]([DOCUMENT_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_ACQDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQDOC_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_FORM_TYPE]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_FRMTYP_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_FORM]
	ADD CONSTRAINT [PIM_FRMTYP_PIM_ACQFRM_FK]
	FOREIGN KEY([FORM_TYPE_CODE])
	REFERENCES [dbo].[PIMS_FORM_TYPE]([FORM_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_FORM]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQFRM_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_NOTE]
	ADD CONSTRAINT [PIM_NOTE_PIM_ACQNOT_FK]
	FOREIGN KEY([NOTE_ID])
	REFERENCES [dbo].[PIMS_NOTE]([NOTE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_NOTE]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQNOT_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_TEAM]
	ADD CONSTRAINT [PIM_PERSON_PIM_ACQPER_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_TEAM]
	ADD CONSTRAINT [PIM_PERSON_PIM_ACQNTM_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_TEAM]
	ADD CONSTRAINT [PIM_ORG_PIM_ACQNTM_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_TEAM]
	ADD CONSTRAINT [PIM_AQFPPT_PIM_ACQPER_FK]
	FOREIGN KEY([ACQ_FL_TEAM_PROFILE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQ_FL_TEAM_PROFILE_TYPE]([ACQ_FL_TEAM_PROFILE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_TEAM]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQPER_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROVINCE_STATE]
	ADD CONSTRAINT [PIM_CNTRY_PIM_PROVNC_FK]
	FOREIGN KEY([COUNTRY_ID])
	REFERENCES [dbo].[PIMS_COUNTRY]([COUNTRY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ADDRESS]
	ADD CONSTRAINT [PIM_REGION_PIM_ADDRSS_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ADDRESS]
	ADD CONSTRAINT [PIM_PROVNC_PIM_ADDRSS_FK]
	FOREIGN KEY([PROVINCE_STATE_ID])
	REFERENCES [dbo].[PIMS_PROVINCE_STATE]([PROVINCE_STATE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ADDRESS]
	ADD CONSTRAINT [PIM_DSTRCT_PIM_ADDRSS_FK]
	FOREIGN KEY([DISTRICT_CODE])
	REFERENCES [dbo].[PIMS_DISTRICT]([DISTRICT_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ADDRESS]
	ADD CONSTRAINT [PIM_CNTRY_PIM_ADDRSS_FK]
	FOREIGN KEY([COUNTRY_ID])
	REFERENCES [dbo].[PIMS_COUNTRY]([COUNTRY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER]
	ADD CONSTRAINT [PIM_ADDRSS_PIM_ACQOWN_FK]
	FOREIGN KEY([ADDRESS_ID])
	REFERENCES [dbo].[PIMS_ADDRESS]([ADDRESS_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQOWN_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_AGREEMENT]
	ADD CONSTRAINT [PIM_AGRTYP_PIM_AGRMNT_FK]
	FOREIGN KEY([AGREEMENT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_AGREEMENT_TYPE]([AGREEMENT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_AGREEMENT]
	ADD CONSTRAINT [PIM_AGRSTY_PIM_AGRMNT_FK]
	FOREIGN KEY([AGREEMENT_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_AGREEMENT_STATUS_TYPE]([AGREEMENT_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_AGREEMENT]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_AGRMNT_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	ADD CONSTRAINT [PIM_PERSON_PIM_INTHLD_PRIMARY_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	ADD CONSTRAINT [PIM_PERSON_PIM_INTHLD_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	ADD CONSTRAINT [PIM_ORG_PIM_INTHLD_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	ADD CONSTRAINT [PIM_INHLDT_PIM_INTHLD_FK]
	FOREIGN KEY([INTEREST_HOLDER_TYPE_CODE])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER_TYPE]([INTEREST_HOLDER_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_INTHLD_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_REGION_PIM_LEASE_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_PROJCT_PIM_LEASE_FK]
	FOREIGN KEY([PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_PRODCT_PIM_LEASE_FK]
	FOREIGN KEY([PRODUCT_ID])
	REFERENCES [dbo].[PIMS_PRODUCT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LSSTYP_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_STATUS_TYPE]([LEASE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LSPRTY_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_PAY_RVBL_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PAY_RVBL_TYPE]([LEASE_PAY_RVBL_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LSPRGT_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_PROGRAM_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PROGRAM_TYPE]([LEASE_PROGRAM_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LRESPT_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_RESPONSIBILITY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_RESPONSIBILITY_TYPE]([LEASE_RESPONSIBILITY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LINITT_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_INITIATOR_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_INITIATOR_TYPE]([LEASE_INITIATOR_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LELIST_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_LICENSE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_LICENSE_TYPE]([LEASE_LICENSE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	ADD CONSTRAINT [PIM_YRFINC_PIM_CMPREQ_FK]
	FOREIGN KEY([YEARLY_FINANCIAL_ID])
	REFERENCES [dbo].[PIMS_YEARLY_FINANCIAL_CODE]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	ADD CONSTRAINT [PIM_RESPCD_PIM_CMPREQ_FK]
	FOREIGN KEY([RESPONSIBILITY_ID])
	REFERENCES [dbo].[PIMS_RESPONSIBILITY_CODE]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	ADD CONSTRAINT [PIM_PROJCT_PIM_CMPREQ_FK]
	FOREIGN KEY([ALTERNATE_PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	ADD CONSTRAINT [PIM_LEASE_PIM_CMPREQ_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	ADD CONSTRAINT [PIM_INTHLD_PIM_CMPREQ_FK]
	FOREIGN KEY([INTEREST_HOLDER_ID])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER]([INTEREST_HOLDER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	ADD CONSTRAINT [PIM_CHRTAC_PIM_CMPREQ_FK]
	FOREIGN KEY([CHART_OF_ACCOUNTS_ID])
	REFERENCES [dbo].[PIMS_CHART_OF_ACCOUNTS_CODE]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	ADD CONSTRAINT [PIM_ACQPER_PIM_CMPREQ_FK]
	FOREIGN KEY([ACQUISITION_FILE_TEAM_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE_TEAM]([ACQUISITION_FILE_TEAM_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	ADD CONSTRAINT [PIM_ACQOWN_PIM_CMPREQ_FK]
	FOREIGN KEY([ACQUISITION_OWNER_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_OWNER]([ACQUISITION_OWNER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_CMPREQ_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_COMP_REQ_FINANCIAL]
	ADD CONSTRAINT [PIM_FINACT_PIM_CRH120_FK]
	FOREIGN KEY([FINANCIAL_ACTIVITY_CODE_ID])
	REFERENCES [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_COMP_REQ_FINANCIAL]
	ADD CONSTRAINT [PIM_CMPREQ_PIM_CRH120_FK]
	FOREIGN KEY([COMPENSATION_REQUISITION_ID])
	REFERENCES [dbo].[PIMS_COMPENSATION_REQUISITION]([COMPENSATION_REQUISITION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_CONTACT_METHOD]
	ADD CONSTRAINT [PIM_PERSON_PIM_CNTMTH_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_CONTACT_METHOD]
	ADD CONSTRAINT [PIM_ORG_PIM_CNTMTH_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_CONTACT_METHOD]
	ADD CONSTRAINT [PIM_CNTMTT_PIM_CNTMTH_FK]
	FOREIGN KEY([CONTACT_METHOD_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CONTACT_METHOD_TYPE]([CONTACT_METHOD_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_REGION_PIM_DISPFL_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_PROJCT_PIM_DISPFL_FK]
	FOREIGN KEY([PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_PRODCT_PIM_DISPFL_FK]
	FOREIGN KEY([PRODUCT_ID])
	REFERENCES [dbo].[PIMS_PRODUCT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_DSPTYP_PIM_DISPFL_FK]
	FOREIGN KEY([DISPOSITION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DISPOSITION_TYPE]([DISPOSITION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_DSPSTY_PIM_DISPFL_FK]
	FOREIGN KEY([DISPOSITION_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DISPOSITION_STATUS_TYPE]([DISPOSITION_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_DSPPFS_PIM_DISPFL_FK]
	FOREIGN KEY([DSP_PHYS_FILE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DSP_PHYS_FILE_STATUS_TYPE]([DSP_PHYS_FILE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_DSPIDT_PIM_DISPFL_FK]
	FOREIGN KEY([DISPOSITION_INITIATING_DOC_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DISPOSITION_INITIATING_DOC_TYPE]([DISPOSITION_INITIATING_DOC_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_DSPIBT_PIM_DISPFL_FK]
	FOREIGN KEY([DSP_INITIATING_BRANCH_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DSP_INITIATING_BRANCH_TYPE]([DSP_INITIATING_BRANCH_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_DSPFTY_PIM_DISPFL_FK]
	FOREIGN KEY([DISPOSITION_FUNDING_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DISPOSITION_FUNDING_TYPE]([DISPOSITION_FUNDING_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_DSPFST_PIM_DISPFL_FK]
	FOREIGN KEY([DISPOSITION_FILE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE_STATUS_TYPE]([DISPOSITION_FILE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_APPRAISAL]
	ADD CONSTRAINT [PIM_DISPFL_PIM_DSPAPP_FK]
	FOREIGN KEY([DISPOSITION_FILE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DSP_CHKLST_ITEM_TYPE]
	ADD CONSTRAINT [PIM_DSPSCT_PIM_DSPCIT_FK]
	FOREIGN KEY([DSP_CHKLST_SECTION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DSP_CHKLST_SECTION_TYPE]([DSP_CHKLST_SECTION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]
	ADD CONSTRAINT [PIM_DSPCIT_PIM_DSPCKI_FK]
	FOREIGN KEY([DSP_CHKLST_ITEM_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DSP_CHKLST_ITEM_TYPE]([DSP_CHKLST_ITEM_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]
	ADD CONSTRAINT [PIM_DISPFL_PIM_DSPCKI_FK]
	FOREIGN KEY([DISPOSITION_FILE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM]
	ADD CONSTRAINT [PIM_CHKLIS_PIM_DSPCKI_FK]
	FOREIGN KEY([CHKLST_ITEM_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CHKLST_ITEM_STATUS_TYPE]([CHKLST_ITEM_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_DSPDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_DISPFL_PIM_DSPDOC_FK]
	FOREIGN KEY([DISPOSITION_FILE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_NOTE]
	ADD CONSTRAINT [PIM_NOTE_PIM_DSPNOT_FK]
	FOREIGN KEY([NOTE_ID])
	REFERENCES [dbo].[PIMS_NOTE]([NOTE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_NOTE]
	ADD CONSTRAINT [PIM_DISPFL_PIM_DSPNOT_FK]
	FOREIGN KEY([DISPOSITION_FILE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_VOLUTY_PIM_PRPRTY_FK]
	FOREIGN KEY([VOLUME_UNIT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_VOLUME_UNIT_TYPE]([VOLUME_UNIT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_SPDCLT_PIM_PRPRTY_FK]
	FOREIGN KEY([SURPLUS_DECLARATION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_SURPLUS_DECLARATION_TYPE]([SURPLUS_DECLARATION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_REGION_PIM_PRPRTY_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_PRVOLT_PIM_PRPRTY_FK]
	FOREIGN KEY([VOLUMETRIC_TYPE_CODE])
	REFERENCES [dbo].[PIMS_VOLUMETRIC_TYPE]([VOLUMETRIC_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_PRPTYP_PIM_PRPRTY_FK]
	FOREIGN KEY([PROPERTY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_TYPE]([PROPERTY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_PRPSTS_PIM_PRPRTY_FK]
	FOREIGN KEY([PROPERTY_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_STATUS_TYPE]([PROPERTY_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_PPHSTT_PIM_PRPRTY_FK]
	FOREIGN KEY([PPH_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PPH_STATUS_TYPE]([PPH_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_PIDSRT_PIM_PRPRTY_FK]
	FOREIGN KEY([PROPERTY_DATA_SOURCE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DATA_SOURCE_TYPE]([DATA_SOURCE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_DSTRCT_PIM_PRPRTY_FK]
	FOREIGN KEY([DISTRICT_CODE])
	REFERENCES [dbo].[PIMS_DISTRICT]([DISTRICT_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_ARUNIT_PIM_PRPRTY_FK]
	FOREIGN KEY([PROPERTY_AREA_UNIT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_AREA_UNIT_TYPE]([AREA_UNIT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_ADDRSS_PIM_PRPRTY_FK]
	FOREIGN KEY([ADDRESS_ID])
	REFERENCES [dbo].[PIMS_ADDRESS]([ADDRESS_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_DSPPRP_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY]
	ADD CONSTRAINT [PIM_DISPFL_PIM_DSPPRP_FK]
	FOREIGN KEY([DISPOSITION_FILE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM]
	ADD CONSTRAINT [PIM_PERSON_PIM_DSPFTM_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM]
	ADD CONSTRAINT [PIM_PERSON_PIM_DSPFTM_CONTACT_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM]
	ADD CONSTRAINT [PIM_ORG_PIM_DSPFTM_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM]
	ADD CONSTRAINT [PIM_DSPFTP_PIM_DSPFTM_FK]
	FOREIGN KEY([DSP_FL_TEAM_PROFILE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DSP_FL_TEAM_PROFILE_TYPE]([DSP_FL_TEAM_PROFILE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM]
	ADD CONSTRAINT [PIM_DISPFL_PIM_DSPFTM_FK]
	FOREIGN KEY([DISPOSITION_FILE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_OFFER]
	ADD CONSTRAINT [PIM_DSPOFT_PIM_DSPOFR_FK]
	FOREIGN KEY([DISPOSITION_OFFER_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DISPOSITION_OFFER_STATUS_TYPE]([DISPOSITION_OFFER_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_OFFER]
	ADD CONSTRAINT [PIM_DISPFL_PIM_DSPOFR_FK]
	FOREIGN KEY([DISPOSITION_FILE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT]
	ADD CONSTRAINT [PIM_PERSON_PIM_DSPPAG_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT]
	ADD CONSTRAINT [PIM_PERSON_PIM_DSPPAG_CONTACT_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT]
	ADD CONSTRAINT [PIM_ORG_PIM_DSPPAG_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR]
	ADD CONSTRAINT [PIM_PERSON_PIM_DSPPSL_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR]
	ADD CONSTRAINT [PIM_PERSON_PIM_DSPPSL_CONTACT_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR]
	ADD CONSTRAINT [PIM_ORG_PIM_DSPPSL_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_SALE]
	ADD CONSTRAINT [PIM_DSPPSL_PIM_DSPSAL_FK]
	FOREIGN KEY([DSP_PURCH_SOLICITOR_ID])
	REFERENCES [dbo].[PIMS_DSP_PURCH_SOLICITOR]([DSP_PURCH_SOLICITOR_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_SALE]
	ADD CONSTRAINT [PIM_DSPPAG_PIM_DSPSAL_FK]
	FOREIGN KEY([DSP_PURCH_AGENT_ID])
	REFERENCES [dbo].[PIMS_DSP_PURCH_AGENT]([DSP_PURCH_AGENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_SALE]
	ADD CONSTRAINT [PIM_DISPFL_PIM_DSPSAL_FK]
	FOREIGN KEY([DISPOSITION_FILE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE]([DISPOSITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_PURCHASER]
	ADD CONSTRAINT [PIM_PERSON_PIM_DSPPUR_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_PURCHASER]
	ADD CONSTRAINT [PIM_PERSON_PIM_DSPPUR_CONTACT_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_PURCHASER]
	ADD CONSTRAINT [PIM_ORG_PIM_DSPPUR_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISPOSITION_PURCHASER]
	ADD CONSTRAINT [PIM_DSPSAL_PIM_DSPPUR_FK]
	FOREIGN KEY([DISPOSITION_SALE_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_SALE]([DISPOSITION_SALE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_CATEGORY_SUBTYPE]
	ADD CONSTRAINT [PIM_DOCTYP_PIM_DCCTSB_FK]
	FOREIGN KEY([DOCUMENT_TYPE_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT_TYP]([DOCUMENT_TYPE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_CATEGORY_SUBTYPE]
	ADD CONSTRAINT [PIM_DOCCAT_PIM_DCCTSB_FK]
	FOREIGN KEY([DOCUMENT_CATEGORY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DOCUMENT_CATEGORY_TYPE]([DOCUMENT_CATEGORY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
	ADD CONSTRAINT [PIM_LEASE_PIM_LESDOC_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_LESDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_MGMT_ACTIVITY_SUBTYPE]
	ADD CONSTRAINT [PIM_PRACTY_PIM_PRACST_FK]
	FOREIGN KEY([PROP_MGMT_ACTIVITY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_MGMT_ACTIVITY_TYPE]([PROP_MGMT_ACTIVITY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_PRACTY_PIM_PRPACT_FK]
	FOREIGN KEY([PROP_MGMT_ACTIVITY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_MGMT_ACTIVITY_TYPE]([PROP_MGMT_ACTIVITY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_PRACST_PIM_PRPACT_FK]
	FOREIGN KEY([PROP_MGMT_ACTIVITY_SUBTYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_MGMT_ACTIVITY_SUBTYPE]([PROP_MGMT_ACTIVITY_SUBTYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRPACT_FK]
	FOREIGN KEY([SERVICE_PROVIDER_PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_PACSTY_PIM_PRPACT_FK]
	FOREIGN KEY([PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE]([PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_ORG_PIM_PRPACT_FK]
	FOREIGN KEY([SERVICE_PROVIDER_ORG_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRACDO_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_PRACDO_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_RSRCHS_PIM_RESRCH_FK]
	FOREIGN KEY([RESEARCH_FILE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE_STATUS_TYPE]([RESEARCH_FILE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_RQSRCT_PIM_RESRCH_FK]
	FOREIGN KEY([REQUEST_SOURCE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_REQUEST_SOURCE_TYPE]([REQUEST_SOURCE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_PERSON_PIM_RESRCH_FK]
	FOREIGN KEY([REQUESTOR_NAME])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_ORG_PIM_RESRCH_FK]
	FOREIGN KEY([REQUESTOR_ORGANIZATION])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_RESRCH_PIM_RFLDOC_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_RFLDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD CONSTRAINT [PIM_RFLDOC_PIM_DOCQUE_FK]
	FOREIGN KEY([RESEARCH_FILE_DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]([RESEARCH_FILE_DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD CONSTRAINT [PIM_PRACDO_PIM_DOCQUE_FK]
	FOREIGN KEY([PROPERTY_ACTIVITY_DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]([PROPERTY_ACTIVITY_DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD CONSTRAINT [PIM_PIDSRT_PIM_DOCQUE_FK]
	FOREIGN KEY([DATA_SOURCE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DATA_SOURCE_TYPE]([DATA_SOURCE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD CONSTRAINT [PIM_LESDOC_PIM_DOCQUE_FK]
	FOREIGN KEY([LEASE_DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_LEASE_DOCUMENT]([LEASE_DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD CONSTRAINT [PIM_DSPDOC_PIM_DOCQUE_FK]
	FOREIGN KEY([DISPOSITION_FILE_DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT]([DISPOSITION_FILE_DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD CONSTRAINT [PIM_DOCQST_PIM_DOCQUE_FK]
	FOREIGN KEY([DOCUMENT_QUEUE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DOCUMENT_QUEUE_STATUS_TYPE]([DOCUMENT_QUEUE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_DOCQUE_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD CONSTRAINT [PIM_ACQDOC_PIM_DOCQUE_FK]
	FOREIGN KEY([ACQUISITION_FILE_DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT]([ACQUISITION_FILE_DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT]
	ADD CONSTRAINT [PIM_ORG_PIM_FORM8_FK]
	FOREIGN KEY([EXPROPRIATING_AUTHORITY])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT]
	ADD CONSTRAINT [PIM_INTHLD_PIM_FORM8_FK]
	FOREIGN KEY([INTEREST_HOLDER_ID])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER]([INTEREST_HOLDER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT]
	ADD CONSTRAINT [PIM_ACQOWN_PIM_FORM8_FK]
	FOREIGN KEY([ACQUISITION_OWNER_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_OWNER]([ACQUISITION_OWNER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_FORM8_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_EXPROP_PMT_PMT_ITEM]
	ADD CONSTRAINT [PIM_PMTITM_PIM_XPMTITY_FK]
	FOREIGN KEY([PAYMENT_ITEM_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PAYMENT_ITEM_TYPE]([PAYMENT_ITEM_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_EXPROP_PMT_PMT_ITEM]
	ADD CONSTRAINT [PIM_EXPPMT_PIM_XPMTITY_FK]
	FOREIGN KEY([EXPROPRIATION_PAYMENT_ID])
	REFERENCES [dbo].[PIMS_EXPROPRIATION_PAYMENT]([EXPROPRIATION_PAYMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_H120_CATEGORY]
	ADD CONSTRAINT [PIM_WRKACT_PIM_H120CT_FK]
	FOREIGN KEY([WORK_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_WORK_ACTIVITY_CODE]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_H120_CATEGORY]
	ADD CONSTRAINT [PIM_FINACT_PIM_H120CT_FK]
	FOREIGN KEY([FINANCIAL_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_H120_CATEGORY]
	ADD CONSTRAINT [PIM_COSTYP_PIM_H120CT_FK]
	FOREIGN KEY([COST_TYPE_ID])
	REFERENCES [dbo].[PIMS_COST_TYPE_CODE]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_HISTORICAL_FILE_NUMBER]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_HFLNUM_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_HISTORICAL_FILE_NUMBER]
	ADD CONSTRAINT [PIM_PIDSRT_PIM_HFLNUM_FK]
	FOREIGN KEY([DATA_SOURCE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DATA_SOURCE_TYPE]([DATA_SOURCE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_HISTORICAL_FILE_NUMBER]
	ADD CONSTRAINT [PIM_HFLNMT_PIM_HFLNUM_FK]
	FOREIGN KEY([HISTORICAL_FILE_NUMBER_TYPE_CODE])
	REFERENCES [dbo].[PIMS_HISTORICAL_FILE_NUMBER_TYPE]([HISTORICAL_FILE_NUMBER_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_INSURANCE]
	ADD CONSTRAINT [PIM_LEASE_PIM_INSRNC_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_INSURANCE]
	ADD CONSTRAINT [PIM_INSPYT_PIM_INSRNC_FK]
	FOREIGN KEY([INSURANCE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_INSURANCE_TYPE]([INSURANCE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRACQF_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_PRACQF_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	ADD CONSTRAINT [PIM_PRACQF_PIM_IHPRIN_FK]
	FOREIGN KEY([PROPERTY_ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]([PROPERTY_ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	ADD CONSTRAINT [PIM_INTHLD_PIM_IHPRIN_FK]
	FOREIGN KEY([INTEREST_HOLDER_ID])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER]([INTEREST_HOLDER_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_CHKLST_ITEM_TYPE]
	ADD CONSTRAINT [PIM_LCKSTY_PIM_LCKITY_FK]
	FOREIGN KEY([LEASE_CHKLST_SECTION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_CHKLST_SECTION_TYPE]([LEASE_CHKLST_SECTION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_CHECKLIST_ITEM]
	ADD CONSTRAINT [PIM_LEASE_PIM_LCHKLI_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_CHECKLIST_ITEM]
	ADD CONSTRAINT [PIM_LCKITY_PIM_LCHKLI_FK]
	FOREIGN KEY([LEASE_CHKLST_ITEM_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_CHKLST_ITEM_TYPE]([LEASE_CHKLST_ITEM_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_CHECKLIST_ITEM]
	ADD CONSTRAINT [PIM_LCISTY_PIM_LCHKLI_FK]
	FOREIGN KEY([CHKLST_ITEM_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CHKLST_ITEM_STATUS_TYPE]([CHKLST_ITEM_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_PERSON_PIM_LESCON_ORGCON_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_PERSON_PIM_LESCON_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_OUTCMT_PIM_LESCON_FK]
	FOREIGN KEY([CONSULTATION_OUTCOME_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CONSULTATION_OUTCOME_TYPE]([CONSULTATION_OUTCOME_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_ORG_PIM_LESCON_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_LEASE_PIM_LESCON_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_CONTYP_PIM_LESCON_FK]
	FOREIGN KEY([CONSULTATION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CONSULTATION_TYPE]([CONSULTATION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_CONSTY_PIM_LESCON_FK]
	FOREIGN KEY([CONSULTATION_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CONSULTATION_STATUS_TYPE]([CONSULTATION_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_LEASE_PURPOSE]
	ADD CONSTRAINT [PIM_LPRPTY_PIM_LLPURP_FK]
	FOREIGN KEY([LEASE_PURPOSE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PURPOSE_TYPE]([LEASE_PURPOSE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_LEASE_PURPOSE]
	ADD CONSTRAINT [PIM_LEASE_PIM_LLPURP_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
	ADD CONSTRAINT [PIM_NOTE_PIM_LESNOT_FK]
	FOREIGN KEY([NOTE_ID])
	REFERENCES [dbo].[PIMS_NOTE]([NOTE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
	ADD CONSTRAINT [PIM_LEASE_PIM_LESNOT_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	ADD CONSTRAINT [PIM_LTRMST_PIM_LSTERM_FK]
	FOREIGN KEY([LEASE_PERIOD_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE]([LEASE_PERIOD_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	ADD CONSTRAINT [PIM_LSPMTF_VBL_RENT_FREQ_FK]
	FOREIGN KEY([VBL_RENT_FREQ])
	REFERENCES [dbo].[PIMS_LEASE_PMT_FREQ_TYPE]([LEASE_PMT_FREQ_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	ADD CONSTRAINT [PIM_LSPMTF_PIM_LSTERM_FK]
	FOREIGN KEY([LEASE_PMT_FREQ_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PMT_FREQ_TYPE]([LEASE_PMT_FREQ_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	ADD CONSTRAINT [PIM_LSPMTF_ADDL_RENT_FREQ_FK]
	FOREIGN KEY([ADDL_RENT_FREQ])
	REFERENCES [dbo].[PIMS_LEASE_PMT_FREQ_TYPE]([LEASE_PMT_FREQ_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_PERIOD]
	ADD CONSTRAINT [PIM_LEASE_PIM_LSTERM_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT]
	ADD CONSTRAINT [PIM_LSTERM_PIM_LSPYMT_FK]
	FOREIGN KEY([LEASE_PERIOD_ID])
	REFERENCES [dbo].[PIMS_LEASE_PERIOD]([LEASE_PERIOD_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT]
	ADD CONSTRAINT [PIM_LSPMTF_PIM_LSPYMT_FK]
	FOREIGN KEY([LEASE_PMT_FREQ_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PMT_FREQ_TYPE]([LEASE_PMT_FREQ_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT]
	ADD CONSTRAINT [PIM_LSPMMT_PIM_LSPYMT_FK]
	FOREIGN KEY([LEASE_PAYMENT_METHOD_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PAYMENT_METHOD_TYPE]([LEASE_PAYMENT_METHOD_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT]
	ADD CONSTRAINT [PIM_LPSTST_PIM_LSPYMT_FK]
	FOREIGN KEY([LEASE_PAYMENT_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PAYMENT_STATUS_TYPE]([LEASE_PAYMENT_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT]
	ADD CONSTRAINT [PIM_LPCATT_PIM_LSPYMT_FK]
	FOREIGN KEY([LEASE_PAYMENT_CATEGORY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PAYMENT_CATEGORY_TYPE]([LEASE_PAYMENT_CATEGORY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_RENEWAL]
	ADD CONSTRAINT [PIM_LEASE_PIM_LSRNWL_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER]
	ADD CONSTRAINT [PIM_TENTYP_PIM_TENANT_FK]
	FOREIGN KEY([LEASE_STAKEHOLDER_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_STAKEHOLDER_TYPE]([LEASE_STAKEHOLDER_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER]
	ADD CONSTRAINT [PIM_PERSON_PIM_TENANT_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRIMARY_CONTACT_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER]
	ADD CONSTRAINT [PIM_ORG_PIM_TENANT_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER]
	ADD CONSTRAINT [PIM_LSSRTY_PIM_TENANT_FK]
	FOREIGN KEY([LESSOR_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LESSOR_TYPE]([LESSOR_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER]
	ADD CONSTRAINT [PIM_LEASE_PIM_TENANT_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ]
	ADD CONSTRAINT [PIM_LSTKHL_PIM_LSKCRQ_FK]
	FOREIGN KEY([LEASE_STAKEHOLDER_ID])
	REFERENCES [dbo].[PIMS_LEASE_STAKEHOLDER]([LEASE_STAKEHOLDER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ]
	ADD CONSTRAINT [PIM_CMPREQ_PIM_LSKCRQ_FK]
	FOREIGN KEY([COMPENSATION_REQUISITION_ID])
	REFERENCES [dbo].[PIMS_COMPENSATION_REQUISITION]([COMPENSATION_REQUISITION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION_ADDRESS]
	ADD CONSTRAINT [PIM_ORG_PIM_ORGADD_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION_ADDRESS]
	ADD CONSTRAINT [PIM_ADUSGT_PIM_ORGADD_FK]
	FOREIGN KEY([ADDRESS_USAGE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ADDRESS_USAGE_TYPE]([ADDRESS_USAGE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION_ADDRESS]
	ADD CONSTRAINT [PIM_ADDRSS_PIM_ORGADD_FK]
	FOREIGN KEY([ADDRESS_ID])
	REFERENCES [dbo].[PIMS_ADDRESS]([ADDRESS_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PERSON_ADDRESS]
	ADD CONSTRAINT [PIM_PERSON_PIM_PERADD_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PERSON_ADDRESS]
	ADD CONSTRAINT [PIM_ADUSGT_PIM_PERADD_FK]
	FOREIGN KEY([ADDRESS_USAGE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ADDRESS_USAGE_TYPE]([ADDRESS_USAGE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PERSON_ADDRESS]
	ADD CONSTRAINT [PIM_ADDRSS_PIM_PERADD_FK]
	FOREIGN KEY([ADDRESS_ID])
	REFERENCES [dbo].[PIMS_ADDRESS]([ADDRESS_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PERSON_ORGANIZATION]
	ADD CONSTRAINT [PIM_PERSON_PIM_PERORG_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PERSON_ORGANIZATION]
	ADD CONSTRAINT [PIM_ORG_PIM_PERORG_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_RESRCH_PIM_PRSCRC_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRSCRC_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]
	ADD CONSTRAINT [PIM_RRESPT_PIM_PRSPRP_FK]
	FOREIGN KEY([PROP_RESEARCH_PURPOSE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_RESEARCH_PURPOSE_TYPE]([PROP_RESEARCH_PURPOSE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]
	ADD CONSTRAINT [PIM_PRSCRC_PIM_PRSPRP_FK]
	FOREIGN KEY([PROPERTY_RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_RESEARCH_FILE]([PROPERTY_RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROJECT_DOCUMENT]
	ADD CONSTRAINT [PIM_PROJCT_PIM_PRJDOC_FK]
	FOREIGN KEY([PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROJECT_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_PRJDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROJECT_NOTE]
	ADD CONSTRAINT [PIM_PROJCT_PIM_PRJNOT_FK]
	FOREIGN KEY([PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROJECT_NOTE]
	ADD CONSTRAINT [PIM_NOTE_PIM_PRJNOT_FK]
	FOREIGN KEY([NOTE_ID])
	REFERENCES [dbo].[PIMS_NOTE]([NOTE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROJECT_PERSON]
	ADD CONSTRAINT [PIM_PRPRLT_PIM_PRJPER_FK]
	FOREIGN KEY([PROJECT_PERSON_ROLE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROJECT_PERSON_ROLE_TYPE]([PROJECT_PERSON_ROLE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROJECT_PERSON]
	ADD CONSTRAINT [PIM_PROJCT_PIM_PRJPER_FK]
	FOREIGN KEY([PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROJECT_PERSON]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRJPER_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROJECT_PRODUCT]
	ADD CONSTRAINT [PIM_PROJCT_PIM_PRJPRD_FK]
	FOREIGN KEY([PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROJECT_PRODUCT]
	ADD CONSTRAINT [PIM_PRODCT_PIM_PRJPRD_FK]
	FOREIGN KEY([PRODUCT_ID])
	REFERENCES [dbo].[PIMS_PRODUCT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRACIN_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPCNT_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRPCNT_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRM_PRPCNT_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT]
	ADD CONSTRAINT [PIM_ORG_PIM_PRPCNT_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	ADD CONSTRAINT [PIM_PIMPRT_PIM_PIMPRV_FK]
	FOREIGN KEY([PROPERTY_IMPROVEMENT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_IMPROVEMENT_TYPE]([PROPERTY_IMPROVEMENT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	ADD CONSTRAINT [PIM_LEASE_PIM_PIMPRV_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PROPLS_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	ADD CONSTRAINT [PIM_LEASE_PIM_PROPLS_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	ADD CONSTRAINT [PIM_ARUNIT_PIM_PROPLS_FK]
	FOREIGN KEY([AREA_UNIT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_AREA_UNIT_TYPE]([AREA_UNIT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_OPERATION]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PROPOP_SRC_FK]
	FOREIGN KEY([SOURCE_PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_OPERATION]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PROPOP_DST_FK]
	FOREIGN KEY([DESTINATION_PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_OPERATION]
	ADD CONSTRAINT [PIM_PRPOTY_PIM_PROPOP_FK]
	FOREIGN KEY([PROPERTY_OPERATION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_OPERATION_TYPE]([PROPERTY_OPERATION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPORG_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION]
	ADD CONSTRAINT [PIM_ORG_PIM_PRPORG_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_ACQ_FL_COMP_REQ]
	ADD CONSTRAINT [PIM_PRACQF_PIM_PACMRQ_FK]
	FOREIGN KEY([PROPERTY_ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]([PROPERTY_ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_ACQ_FL_COMP_REQ]
	ADD CONSTRAINT [PIM_CMPREQ_PIM_PACMRQ_FK]
	FOREIGN KEY([COMPENSATION_REQUISITION_ID])
	REFERENCES [dbo].[PIMS_COMPENSATION_REQUISITION]([COMPENSATION_REQUISITION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PAINVP_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	ADD CONSTRAINT [PIM_PERSON_PIM_PAINVP_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	ADD CONSTRAINT [PIM_ORG_PIM_PAINVP_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRACMC_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRACMC_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]
	ADD CONSTRAINT [PIM_IHPRIN_PIM_PIHITY_FK]
	FOREIGN KEY([PIMS_INTHLDR_PROP_INTEREST_ID])
	REFERENCES [dbo].[PIMS_INTHLDR_PROP_INTEREST]([PIMS_INTHLDR_PROP_INTEREST_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]
	ADD CONSTRAINT [PIM_IHINTT_PIM_PIHITY_FK]
	FOREIGN KEY([INTEREST_HOLDER_INTEREST_TYPE_CODE])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER_INTEREST_TYPE]([INTEREST_HOLDER_INTEREST_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_LEASE_COMP_REQ]
	ADD CONSTRAINT [PIM_PROPLS_PIM_PLCMRQ_FK]
	FOREIGN KEY([PROPERTY_LEASE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_LEASE]([PROPERTY_LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_LEASE_COMP_REQ]
	ADD CONSTRAINT [PIM_CMPREQ_PIM_PLCMRQ_FK]
	FOREIGN KEY([COMPENSATION_REQUISITION_ID])
	REFERENCES [dbo].[PIMS_COMPENSATION_REQUISITION]([COMPENSATION_REQUISITION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRAC_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRPRAC_FK]
	FOREIGN KEY([PIMS_PROPERTY_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY]([PIMS_PROPERTY_ACTIVITY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRAT_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]
	ADD CONSTRAINT [PIM_PRANOM_PIM_PRPRAT_FK]
	FOREIGN KEY([PROPERTY_ANOMALY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_ANOMALY_TYPE]([PROPERTY_ANOMALY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_PURPOSE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRPU_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_PURPOSE]
	ADD CONSTRAINT [PIM_PRPPUR_PIM_PRPRPU_FK]
	FOREIGN KEY([PROPERTY_PURPOSE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_PURPOSE_TYPE]([PROPERTY_PURPOSE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYPE]
	ADD CONSTRAINT [PIM_PRROAD_PIM_PRPRRT_FK]
	FOREIGN KEY([PROPERTY_ROAD_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_ROAD_TYPE]([PROPERTY_ROAD_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYPE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRRT_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYPE]
	ADD CONSTRAINT [PIM_PRPTNR_PIM_PRPRTT_FK]
	FOREIGN KEY([PROPERTY_TENURE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_TENURE_TYPE]([PROPERTY_TENURE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYPE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRTT_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_REGION_USER]
	ADD CONSTRAINT [PIM_USER_PIM_RGNUSR_FK]
	FOREIGN KEY([USER_ID])
	REFERENCES [dbo].[PIMS_USER]([USER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_REGION_USER]
	ADD CONSTRAINT [PIM_REGION_PIM_RGNUSR_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]
	ADD CONSTRAINT [PIM_RESRCH_PIM_RFLNOT_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]
	ADD CONSTRAINT [PIM_NOTE_PIM_RFLNOT_FK]
	FOREIGN KEY([NOTE_ID])
	REFERENCES [dbo].[PIMS_NOTE]([NOTE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PROJECT]
	ADD CONSTRAINT [PIM_RESRCH_PIM_RFLPRJ_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PROJECT]
	ADD CONSTRAINT [PIM_PROJCT_PIM_RFLPRJ_FK]
	FOREIGN KEY([PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE]
	ADD CONSTRAINT [PIM_RSHPRT_PIM_RSFLPR_FK]
	FOREIGN KEY([RESEARCH_PURPOSE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_RESEARCH_PURPOSE_TYPE]([RESEARCH_PURPOSE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE]
	ADD CONSTRAINT [PIM_RESRCH_PIM_RSFLPR_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ROLE_CLAIM]
	ADD CONSTRAINT [PIM_ROLE_PIM_ROLCLM_FK]
	FOREIGN KEY([ROLE_ID])
	REFERENCES [dbo].[PIMS_ROLE]([ROLE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ROLE_CLAIM]
	ADD CONSTRAINT [PIM_CLMTYP_PIM_ROLCLM_FK]
	FOREIGN KEY([CLAIM_ID])
	REFERENCES [dbo].[PIMS_CLAIM]([CLAIM_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
	ADD CONSTRAINT [PIM_SECDPT_PIM_SECDEP_FK]
	FOREIGN KEY([SECURITY_DEPOSIT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_SECURITY_DEPOSIT_TYPE]([SECURITY_DEPOSIT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
	ADD CONSTRAINT [PIM_LEASE_PIM_SECDEP_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	ADD CONSTRAINT [PIM_SECDEP_PIM_SCDPHL_FK]
	FOREIGN KEY([SECURITY_DEPOSIT_ID])
	REFERENCES [dbo].[PIMS_SECURITY_DEPOSIT]([SECURITY_DEPOSIT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	ADD CONSTRAINT [PIM_PERSON_PIM_SCDPHL_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	ADD CONSTRAINT [PIM_ORG_PIM_SCDPHL_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
	ADD CONSTRAINT [PIM_SECDEP_PIM_SDRTRN_FK]
	FOREIGN KEY([SECURITY_DEPOSIT_ID])
	REFERENCES [dbo].[PIMS_SECURITY_DEPOSIT]([SECURITY_DEPOSIT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	ADD CONSTRAINT [PIM_SDRTRN_PIM_SCDPRH_FK]
	FOREIGN KEY([SECURITY_DEPOSIT_RETURN_ID])
	REFERENCES [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]([SECURITY_DEPOSIT_RETURN_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	ADD CONSTRAINT [PIM_PERSON_PIM_SCDPRH_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	ADD CONSTRAINT [PIM_ORG_PIM_SCDPRH_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_TAKE]
	ADD CONSTRAINT [PIM_TKTYPE_PIM_TAKE_FK]
	FOREIGN KEY([TAKE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_TAKE_TYPE]([TAKE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_TAKE]
	ADD CONSTRAINT [PIM_TKSTST_PIM_TAKE_FK]
	FOREIGN KEY([TAKE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_TAKE_STATUS_TYPE]([TAKE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_TAKE]
	ADD CONSTRAINT [PIM_TKCONT_PIM_TAKE_FK]
	FOREIGN KEY([TAKE_SITE_CONTAM_TYPE_CODE])
	REFERENCES [dbo].[PIMS_TAKE_SITE_CONTAM_TYPE]([TAKE_SITE_CONTAM_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_TAKE]
	ADD CONSTRAINT [PIM_PRACQF_PIM_TAKE_FK]
	FOREIGN KEY([PROPERTY_ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]([PROPERTY_ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_TAKE]
	ADD CONSTRAINT [PIM_LNDATY_PIM_TAKE_FK]
	FOREIGN KEY([LAND_ACT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LAND_ACT_TYPE]([LAND_ACT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_TAKE]
	ADD CONSTRAINT [PIM_ARUNIT_PIM_TAKE_FK]
	FOREIGN KEY([AREA_UNIT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_AREA_UNIT_TYPE]([AREA_UNIT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION]
	ADD CONSTRAINT [PIM_USER_PIM_USRORG_FK]
	FOREIGN KEY([USER_ID])
	REFERENCES [dbo].[PIMS_USER]([USER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION]
	ADD CONSTRAINT [PIM_ROLE_PIM_USRORG_FK]
	FOREIGN KEY([ROLE_ID])
	REFERENCES [dbo].[PIMS_ROLE]([ROLE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION]
	ADD CONSTRAINT [PIM_ORG_PIM_USRORG_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_USER_ROLE]
	ADD CONSTRAINT [PIM_USER_PIM_USERRL_FK]
	FOREIGN KEY([USER_ID])
	REFERENCES [dbo].[PIMS_USER]([USER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_USER_ROLE]
	ADD CONSTRAINT [PIM_ROLE_PIM_USERRL_FK]
	FOREIGN KEY([ROLE_ID])
	REFERENCES [dbo].[PIMS_ROLE]([ROLE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

