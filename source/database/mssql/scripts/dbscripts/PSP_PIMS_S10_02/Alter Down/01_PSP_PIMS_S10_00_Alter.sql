-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Fri Sep 03 17:12:13 PDT 2021
-- Execute this script on:
-- 		PIMS_S10_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PIMS_S09_01/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_WFLMDT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_WFLMDT_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_WFLMDT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_WFLMDT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_WFLMDT_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_WFLMDT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_WFLMDL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_WFLMDL_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_WFLMDL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_WFLMDL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_WFLMDL_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_WFLMDL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_WFLMDL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_WFLMDL_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_WFLMDL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TSKTAM_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TSKTAM_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_TSKTAM_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TSKTAM_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TSKTAM_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_TSKTAM_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ROLCLM_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ROLCLM_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_ROLCLM_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ROLCLM_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ROLCLM_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_ROLCLM_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ROLCLM_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ROLCLM_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_ROLCLM_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_REGION_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_REGION_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_REGION_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_REGION_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_REGION_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_REGION_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ADDRSS_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ADDRSS_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_ADDRSS_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_USERRL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_USERRL_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_USERRL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_USERRL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_USERRL_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_USERRL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_USERRL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_USERRL_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_USERRL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_USER_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_USER_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_USER_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TSKTMT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TSKTMT_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_TSKTMT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TSKTMT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TSKTMT_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_TSKTMT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACRQOR_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACRQOR_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_ACRQOR_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TSKTAM_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_TSKTAM_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_TSKTAM_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TASK_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TASK_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_TASK_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TASK_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TASK_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_TASK_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TASK_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_TASK_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_TASK_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ROLE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ROLE_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_ROLE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ROLE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ROLE_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_ROLE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ROLE_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ROLE_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_ROLE_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRSF_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRSF_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPRSF_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRSF_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRSF_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPRSF_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRSF_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPRSF_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPRSF_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ORG_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ORG_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_ORG_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ORG_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ORG_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_ORG_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ORG_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ORG_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_ORG_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSTYPE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSTYPE_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSTYPE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSTYPE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSTYPE_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSTYPE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSSTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSSTYP_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSSTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSSTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSSTYP_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSSTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSSTSY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSSTSY_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSSTSY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSSTSY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSSTSY_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSSTSY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPRTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSPRTY_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSPRTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPRTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSPRTY_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSPRTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPRST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSPRST_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSPRST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPRST_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSPRST_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSPRST_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPRGT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSPRGT_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSPRGT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPRGT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSPRGT_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSPRGT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPMTF_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSPMTF_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSPMTF_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPMTF_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSPMTF_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSPMTF_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACRQST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACRQST_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_ACRQST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACRQST_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACRQST_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_ACRQST_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACRQST_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACRQST_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_ACRQST_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJPRP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRJPRP_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRJPRP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJPRP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRJPRP_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRJPRP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJPRP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRJPRP_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRJPRP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTVTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTVTY_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_ACTVTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTVTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTVTY_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_ACTVTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTVTY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACTVTY_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_ACTVTY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTMDL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTMDL_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_ACTMDL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTMDL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTMDL_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_ACTMDL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTMDL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACTMDL_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_ACTMDL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CLMTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CLMTYP_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_CLMTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CLMTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_CLMTYP_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_CLMTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CLMTYP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_CLMTYP_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_CLMTYP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ARUNIT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ARUNIT_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_ARUNIT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ARUNIT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ARUNIT_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_ARUNIT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_USRORG_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_USRORG_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_USRORG_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_USRORG_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_USRORG_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_USRORG_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_USRORG_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_USRORG_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_USRORG_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJNT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROJNT_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PROJNT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJNT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PROJNT_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PROJNT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJNT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PROJNT_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_PROJNT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPRTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPRTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPRTY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TSKTMP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TSKTMP_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_TSKTMP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TSKTMP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TSKTMP_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_TSKTMP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TSKTMP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_TSKTMP_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_TSKTMP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACRQOR_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACRQOR_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_ACRQOR_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACRQOR_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACRQOR_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_ACRQOR_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPACT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPACT_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPACT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPACT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPACT_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPACT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPACT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPACT_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPACT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROVNC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROVNC_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PROVNC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROVNC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PROVNC_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PROVNC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJCT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROJCT_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PROJCT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJCT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PROJCT_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PROJCT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJCT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PROJCT_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_PROJCT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRJTYP_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRJTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRJTYP_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRJTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJSTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRJSTY_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRJSTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJSTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRJSTY_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRJSTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJRSK_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRJRSK_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRJRSK_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJRSK_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRJRSK_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRJRSK_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRWKMD_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRWKMD_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRWKMD_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRWKMD_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRWKMD_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRWKMD_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRWKMD_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRWKMD_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRWKMD_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRSVFT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRSVFT_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRSVFT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRSVFT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRSVFT_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRSVFT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CNTMTT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CNTMTT_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_CNTMTT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CNTMTT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_CNTMTT_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_CNTMTT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PERSON_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PERSON_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PERSON_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PERSON_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PERSON_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PERSON_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PERSON_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PERSON_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_PERSON_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPSVC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPSVC_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPSVC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPSVC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPSVC_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPSVC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPSVC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPSVC_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPSVC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPSTS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPSTS_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPSTS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPSTS_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPSTS_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPSTS_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPORG_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPORG_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPORG_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPORG_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPORG_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPORG_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPORG_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPORG_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPORG_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CNTMTH_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CNTMTH_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_CNTMTH_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CNTMTH_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_CNTMTH_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_CNTMTH_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CNTMTH_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_CNTMTH_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_CNTMTH_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PERORG_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PERORG_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PERORG_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PERORG_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PERORG_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PERORG_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PERORG_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PERORG_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_PERORG_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ORGTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ORGTYP_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_ORGTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ORGTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ORGTYP_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_ORGTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ORGIDT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ORGIDT_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_ORGIDT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ORGIDT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ORGIDT_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_ORGIDT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROPLS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROPLS_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PROPLS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROPLS_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PROPLS_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PROPLS_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROPLS_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PROPLS_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_PROPLS_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJTR_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROJTR_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PROJTR_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJTR_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PROJTR_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PROJTR_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT [PIM_ORG_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSPMTF_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSPMTF_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT [PIM_LSPMTF_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_LEASE_PM_CONTACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_LEASE_PM_CONTACT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT [PIM_PERSON_PIM_LEASE_PM_CONTACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSPRTY_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSPRTY_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT [PIM_LSPRTY_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSPRGT_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSPRGT_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT [PIM_LSPRGT_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSPRST_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSPRST_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT [PIM_LSPRST_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_LEASE_TENANT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_LEASE_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT [PIM_PERSON_PIM_LEASE_TENANT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSSTSY_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSSTSY_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT [PIM_LSSTSY_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PROPLS_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PROPLS_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	DROP CONSTRAINT [PIM_PRPRTY_PIM_PROPLS_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_PROPLS_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_PROPLS_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	DROP CONSTRAINT [PIM_LEASE_PIM_PROPLS_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_LSACTV_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_LSACTV_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY]
	DROP CONSTRAINT [PIM_LEASE_PIM_LSACTV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSTYPE_PIM_LSACTV_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSTYPE_PIM_LSACTV_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY]
	DROP CONSTRAINT [PIM_LSTYPE_PIM_LSACTV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSACPR_PIM_LSACTV_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSACPR_PIM_LSACTV_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY]
	DROP CONSTRAINT [PIM_LSACPR_PIM_LSACTV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSSTYP_PIM_LSACTV_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSSTYP_PIM_LSACTV_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY]
	DROP CONSTRAINT [PIM_LSSTYP_PIM_LSACTV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSACPR_PIM_EXPAMT_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSACPR_PIM_EXPAMT_FK'
GO
ALTER TABLE [dbo].[PIMS_EXPECTED_AMOUNT]
	DROP CONSTRAINT [PIM_LSACPR_PIM_EXPAMT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_EXPAMT_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_EXPAMT_FK'
GO
ALTER TABLE [dbo].[PIMS_EXPECTED_AMOUNT]
	DROP CONSTRAINT [PIM_LEASE_PIM_EXPAMT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROPLS_PROPERTY_ID_IDX
PRINT N'Drop index dbo.PROPLS_PROPERTY_ID_IDX'
GO
DROP INDEX [dbo].[PIMS_PROPERTY_LEASE].[PROPLS_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROPLS_LEASE_ID_IDX
PRINT N'Drop index dbo.PROPLS_LEASE_ID_IDX'
GO
DROP INDEX [dbo].[PIMS_PROPERTY_LEASE].[PROPLS_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSACTV_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSACTV_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSACTV_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSACTV_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSACTV_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSACTV_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSACTV_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LSACTV_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSACTV_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSACPR_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSACPR_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSACPR_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSACPR_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSACPR_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSACPR_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSACPR_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LSACPR_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_LSACPR_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSACTV_LEASE_TYPE_CODE_IDX
PRINT N'Drop index dbo.LSACTV_LEASE_TYPE_CODE_IDX'
GO
DROP INDEX [dbo].[PIMS_LEASE_ACTIVITY].[LSACTV_LEASE_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSACTV_LEASE_SUBTYPE_CODE_IDX
PRINT N'Drop index dbo.LSACTV_LEASE_SUBTYPE_CODE_IDX'
GO
DROP INDEX [dbo].[PIMS_LEASE_ACTIVITY].[LSACTV_LEASE_SUBTYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSACTV_LEASE_ID_IDX
PRINT N'Drop index dbo.LSACTV_LEASE_ID_IDX'
GO
DROP INDEX [dbo].[PIMS_LEASE_ACTIVITY].[LSACTV_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSACTV_LEASE_ACTIVITY_PERIOD_ID_IDX
PRINT N'Drop index dbo.LSACTV_LEASE_ACTIVITY_PERIOD_ID_IDX'
GO
DROP INDEX [dbo].[PIMS_LEASE_ACTIVITY].[LSACTV_LEASE_ACTIVITY_PERIOD_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_EXPAMT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_EXPAMT_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_EXPAMT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_EXPAMT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_EXPAMT_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_EXPAMT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_EXPAMT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_EXPAMT_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_EXPAMT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.EXPAMT_LEASE_ID_IDX
PRINT N'Drop index dbo.EXPAMT_LEASE_ID_IDX'
GO
DROP INDEX [dbo].[PIMS_EXPECTED_AMOUNT].[EXPAMT_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.EXPAMT_LEASE_ACTIVITY_PERIOD_ID_IDX
PRINT N'Drop index dbo.EXPAMT_LEASE_ACTIVITY_PERIOD_ID_IDX'
GO
DROP INDEX [dbo].[PIMS_EXPECTED_AMOUNT].[EXPAMT_LEASE_ACTIVITY_PERIOD_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_LEASE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_LEASE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_LEASE_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_TENANT_ID_IDX
PRINT N'Drop index dbo.LEASE_TENANT_ID_IDX'
GO
DROP INDEX [dbo].[PIMS_LEASE].[LEASE_TENANT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_PROPERTY_MANAGER_ID_IDX
PRINT N'Drop index dbo.LEASE_PROPERTY_MANAGER_ID_IDX'
GO
DROP INDEX [dbo].[PIMS_LEASE].[LEASE_PROPERTY_MANAGER_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_PROP_MGMT_ORG_ID_IDX
PRINT N'Drop index dbo.LEASE_PROP_MGMT_ORG_ID_IDX'
GO
DROP INDEX [dbo].[PIMS_LEASE].[LEASE_PROP_MGMT_ORG_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_LEASE_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.LEASE_LEASE_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX [dbo].[PIMS_LEASE].[LEASE_LEASE_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_LEASE_PURPOSE_TYPE_CODE_IDX
PRINT N'Drop index dbo.LEASE_LEASE_PURPOSE_TYPE_CODE_IDX'
GO
DROP INDEX [dbo].[PIMS_LEASE].[LEASE_LEASE_PURPOSE_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_LEASE_PURPOSE_SUBTYPE_CODE_IDX
PRINT N'Drop index dbo.LEASE_LEASE_PURPOSE_SUBTYPE_CODE_IDX'
GO
DROP INDEX [dbo].[PIMS_LEASE].[LEASE_LEASE_PURPOSE_SUBTYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_LEASE_PROGRAM_TYPE_CODE_IDX
PRINT N'Drop index dbo.LEASE_LEASE_PROGRAM_TYPE_CODE_IDX'
GO
DROP INDEX [dbo].[PIMS_LEASE].[LEASE_LEASE_PROGRAM_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_LEASE_PMT_FREQ_TYPE_CODE_IDX
PRINT N'Drop index dbo.LEASE_LEASE_PMT_FREQ_TYPE_CODE_IDX'
GO
DROP INDEX [dbo].[PIMS_LEASE].[LEASE_LEASE_PMT_FREQ_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPEVL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPEVL_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPEVL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPEVL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPEVL_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPEVL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPEVL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPEVL_A_S_IUD_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPEVL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPTYP_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPTYP_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPTNR_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPTNR_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPTNR_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPTNR_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPTNR_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPTNR_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPCLT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPCLT_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPCLT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPCLT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPCLT_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PRPCLT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PIDSRT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PIDSRT_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_PIDSRT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PIDSRT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PIDSRT_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_PIDSRT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ADDRSS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ADDRSS_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_ADDRSS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ADDRSS_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ADDRSS_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_ADDRSS_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ARQSTT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ARQSTT_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_ARQSTT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ARQSTT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ARQSTT_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_ARQSTT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_USER_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_USER_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_USER_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_USER_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_USER_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_USER_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSTRCT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSTRCT_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_DSTRCT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSTRCT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DSTRCT_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_DSTRCT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CNTRY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CNTRY_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_CNTRY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CNTRY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_CNTRY_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_CNTRY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ADUSGT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ADUSGT_I_S_U_TR'
GO
DROP TRIGGER [dbo].[PIMS_ADUSGT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ADUSGT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ADUSGT_I_S_I_TR'
GO
DROP TRIGGER [dbo].[PIMS_ADUSGT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
DROP VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ACRQOR_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ACRQOR_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_HIST]
	DROP CONSTRAINT [PIMS_ACRQOR_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ACRQOR_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ACRQOR_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_HIST]
	DROP CONSTRAINT [PIMS_ACRQOR_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PROJCT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PROJCT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_HIST]
	DROP CONSTRAINT [PIMS_PROJCT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PROJCT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PROJCT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_HIST]
	DROP CONSTRAINT [PIMS_PROJCT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ROLE_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ROLE_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ROLE_HIST]
	DROP CONSTRAINT [PIMS_ROLE_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ROLE_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ROLE_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ROLE_HIST]
	DROP CONSTRAINT [PIMS_ROLE_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRPRTY_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRPRTY_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_HIST]
	DROP CONSTRAINT [PIMS_PRPRTY_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRPRTY_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRPRTY_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_HIST]
	DROP CONSTRAINT [PIMS_PRPRTY_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRWKMD_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRWKMD_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_HIST]
	DROP CONSTRAINT [PIMS_PRWKMD_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRWKMD_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRWKMD_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_HIST]
	DROP CONSTRAINT [PIMS_PRWKMD_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRPACT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRPACT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
	DROP CONSTRAINT [PIMS_PRPACT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRPACT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRPACT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
	DROP CONSTRAINT [PIMS_PRPACT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_USRORG_H_UK
PRINT N'Drop unique constraint dbo.PIMS_USRORG_H_UK'
GO
ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION_HIST]
	DROP CONSTRAINT [PIMS_USRORG_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_USRORG_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_USRORG_H_PK'
GO
ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION_HIST]
	DROP CONSTRAINT [PIMS_USRORG_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PERSON_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PERSON_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PERSON_HIST]
	DROP CONSTRAINT [PIMS_PERSON_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PERSON_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PERSON_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PERSON_HIST]
	DROP CONSTRAINT [PIMS_PERSON_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_CLMTYP_H_UK
PRINT N'Drop unique constraint dbo.PIMS_CLMTYP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_CLAIM_HIST]
	DROP CONSTRAINT [PIMS_CLMTYP_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_CLMTYP_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_CLMTYP_H_PK'
GO
ALTER TABLE [dbo].[PIMS_CLAIM_HIST]
	DROP CONSTRAINT [PIMS_CLMTYP_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRJPRP_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRJPRP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PROPERTY_HIST]
	DROP CONSTRAINT [PIMS_PRJPRP_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRJPRP_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRJPRP_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PROPERTY_HIST]
	DROP CONSTRAINT [PIMS_PRJPRP_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ADDRSS_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ADDRSS_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ADDRESS_HIST]
	DROP CONSTRAINT [PIMS_ADDRSS_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ADDRSS_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ADDRSS_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ADDRESS_HIST]
	DROP CONSTRAINT [PIMS_ADDRSS_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ACTMDL_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ACTMDL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_MODEL_HIST]
	DROP CONSTRAINT [PIMS_ACTMDL_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ACTMDL_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ACTMDL_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_MODEL_HIST]
	DROP CONSTRAINT [PIMS_ACTMDL_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_TSKTMP_H_UK
PRINT N'Drop unique constraint dbo.PIMS_TSKTMP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_HIST]
	DROP CONSTRAINT [PIMS_TSKTMP_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_TSKTMP_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_TSKTMP_H_PK'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_HIST]
	DROP CONSTRAINT [PIMS_TSKTMP_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ROLCLM_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ROLCLM_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ROLE_CLAIM_HIST]
	DROP CONSTRAINT [PIMS_ROLCLM_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ROLCLM_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ROLCLM_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ROLE_CLAIM_HIST]
	DROP CONSTRAINT [PIMS_ROLCLM_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_TASK_H_UK
PRINT N'Drop unique constraint dbo.PIMS_TASK_H_UK'
GO
ALTER TABLE [dbo].[PIMS_TASK_HIST]
	DROP CONSTRAINT [PIMS_TASK_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_TASK_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_TASK_H_PK'
GO
ALTER TABLE [dbo].[PIMS_TASK_HIST]
	DROP CONSTRAINT [PIMS_TASK_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_TSKTAM_H_UK
PRINT N'Drop unique constraint dbo.PIMS_TSKTAM_H_UK'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST]
	DROP CONSTRAINT [PIMS_TSKTAM_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_TSKTAM_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_TSKTAM_H_PK'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST]
	DROP CONSTRAINT [PIMS_TSKTAM_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_WFLMDL_H_UK
PRINT N'Drop unique constraint dbo.PIMS_WFLMDL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_WORKFLOW_MODEL_HIST]
	DROP CONSTRAINT [PIMS_WFLMDL_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_WFLMDL_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_WFLMDL_H_PK'
GO
ALTER TABLE [dbo].[PIMS_WORKFLOW_MODEL_HIST]
	DROP CONSTRAINT [PIMS_WFLMDL_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_USERRL_H_UK
PRINT N'Drop unique constraint dbo.PIMS_USERRL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_USER_ROLE_HIST]
	DROP CONSTRAINT [PIMS_USERRL_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_USERRL_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_USERRL_H_PK'
GO
ALTER TABLE [dbo].[PIMS_USER_ROLE_HIST]
	DROP CONSTRAINT [PIMS_USERRL_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRPORG_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRPORG_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION_HIST]
	DROP CONSTRAINT [PIMS_PRPORG_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRPORG_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRPORG_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION_HIST]
	DROP CONSTRAINT [PIMS_PRPORG_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PROJNT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PROJNT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_NOTE_HIST]
	DROP CONSTRAINT [PIMS_PROJNT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PROJNT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PROJNT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_NOTE_HIST]
	DROP CONSTRAINT [PIMS_PROJNT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ACTVTY_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ACTVTY_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_HIST]
	DROP CONSTRAINT [PIMS_ACTVTY_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ACTVTY_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ACTVTY_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_HIST]
	DROP CONSTRAINT [PIMS_ACTVTY_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_CNTMTH_H_UK
PRINT N'Drop unique constraint dbo.PIMS_CNTMTH_H_UK'
GO
ALTER TABLE [dbo].[PIMS_CONTACT_METHOD_HIST]
	DROP CONSTRAINT [PIMS_CNTMTH_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_CNTMTH_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_CNTMTH_H_PK'
GO
ALTER TABLE [dbo].[PIMS_CONTACT_METHOD_HIST]
	DROP CONSTRAINT [PIMS_CNTMTH_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRPRSF_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRPRSF_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST]
	DROP CONSTRAINT [PIMS_PRPRSF_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRPRSF_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRPRSF_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST]
	DROP CONSTRAINT [PIMS_PRPRSF_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_USER_H_UK
PRINT N'Drop unique constraint dbo.PIMS_USER_H_UK'
GO
ALTER TABLE [dbo].[PIMS_USER_HIST]
	DROP CONSTRAINT [PIMS_USER_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_USER_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_USER_H_PK'
GO
ALTER TABLE [dbo].[PIMS_USER_HIST]
	DROP CONSTRAINT [PIMS_USER_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRPEVL_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRPEVL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_EVALUATION_HIST]
	DROP CONSTRAINT [PIMS_PRPEVL_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRPEVL_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRPEVL_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_EVALUATION_HIST]
	DROP CONSTRAINT [PIMS_PRPEVL_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ORG_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ORG_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ORGANIZATION_HIST]
	DROP CONSTRAINT [PIMS_ORG_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ORG_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ORG_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ORGANIZATION_HIST]
	DROP CONSTRAINT [PIMS_ORG_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRPSVC_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRPSVC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_SERVICE_FILE_HIST]
	DROP CONSTRAINT [PIMS_PRPSVC_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRPSVC_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRPSVC_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_SERVICE_FILE_HIST]
	DROP CONSTRAINT [PIMS_PRPSVC_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PERORG_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PERORG_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PERSON_ORGANIZATION_HIST]
	DROP CONSTRAINT [PIMS_PERORG_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PERORG_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PERORG_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PERSON_ORGANIZATION_HIST]
	DROP CONSTRAINT [PIMS_PERORG_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LEASE_PK
PRINT N'Drop primary key constraint dbo.LEASE_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT [LEASE_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE
PRINT N'Drop table dbo.PIMS_LEASE'
GO
DROP TABLE [dbo].[PIMS_LEASE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ACRQST_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ACRQST_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_HIST]
	DROP CONSTRAINT [PIMS_ACRQST_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ACRQST_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ACRQST_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_HIST]
	DROP CONSTRAINT [PIMS_ACRQST_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PROPLS_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PROPLS_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE_HIST]
	DROP CONSTRAINT [PIMS_PROPLS_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PROPLS_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PROPLS_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE_HIST]
	DROP CONSTRAINT [PIMS_PROPLS_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PROPLS_PK
PRINT N'Drop primary key constraint dbo.PROPLS_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	DROP CONSTRAINT [PROPLS_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROPERTY_LEASE
PRINT N'Drop table dbo.PIMS_PROPERTY_LEASE'
GO
DROP TABLE [dbo].[PIMS_PROPERTY_LEASE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_LSACTV_H_UK
PRINT N'Drop unique constraint dbo.PIMS_LSACTV_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_HIST]
	DROP CONSTRAINT [PIMS_LSACTV_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_LSACTV_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_LSACTV_H_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_HIST]
	DROP CONSTRAINT [PIMS_LSACTV_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_LSACPR_H_UK
PRINT N'Drop unique constraint dbo.PIMS_LSACPR_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_PERIOD_HIST]
	DROP CONSTRAINT [PIMS_LSACPR_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_LSACPR_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_LSACPR_H_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_PERIOD_HIST]
	DROP CONSTRAINT [PIMS_LSACPR_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSACTV_PK
PRINT N'Drop primary key constraint dbo.LSACTV_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY]
	DROP CONSTRAINT [LSACTV_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_ACTIVITY
PRINT N'Drop table dbo.PIMS_LEASE_ACTIVITY'
GO
DROP TABLE [dbo].[PIMS_LEASE_ACTIVITY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSTYPE_PK
PRINT N'Drop primary key constraint dbo.LSTYPE_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TYPE]
	DROP CONSTRAINT [LSTYPE_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSSTYP_PK
PRINT N'Drop primary key constraint dbo.LSSTYP_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_SUBTYPE]
	DROP CONSTRAINT [LSSTYP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_EXPAMT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_EXPAMT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_EXPECTED_AMOUNT_HIST]
	DROP CONSTRAINT [PIMS_EXPAMT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_EXPAMT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_EXPAMT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_EXPECTED_AMOUNT_HIST]
	DROP CONSTRAINT [PIMS_EXPAMT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.EXPAMT_PK
PRINT N'Drop primary key constraint dbo.EXPAMT_PK'
GO
ALTER TABLE [dbo].[PIMS_EXPECTED_AMOUNT]
	DROP CONSTRAINT [EXPAMT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_EXPECTED_AMOUNT
PRINT N'Drop table dbo.PIMS_EXPECTED_AMOUNT'
GO
DROP TABLE [dbo].[PIMS_EXPECTED_AMOUNT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSACPR_PK
PRINT N'Drop primary key constraint dbo.LSACPR_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_PERIOD]
	DROP CONSTRAINT [LSACPR_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_LEASE_H_UK
PRINT N'Drop unique constraint dbo.PIMS_LEASE_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_HIST]
	DROP CONSTRAINT [PIMS_LEASE_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_LEASE_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_LEASE_H_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_HIST]
	DROP CONSTRAINT [PIMS_LEASE_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSPRST_PK
PRINT N'Drop primary key constraint dbo.LSPRST_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PURPOSE_SUBTYPE]
	DROP CONSTRAINT [LSPRST_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSPMTF_PK
PRINT N'Drop primary key constraint dbo.LSPMTF_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PMT_FREQ_TYPE]
	DROP CONSTRAINT [LSPMTF_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSPRTY_PK
PRINT N'Drop primary key constraint dbo.LSPRTY_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PURPOSE_TYPE]
	DROP CONSTRAINT [LSPRTY_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSSTSY_PK
PRINT N'Drop primary key constraint dbo.LSSTSY_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STATUS_TYPE]
	DROP CONSTRAINT [LSSTSY_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSPRGT_PK
PRINT N'Drop primary key constraint dbo.LSPRGT_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PROGRAM_TYPE]
	DROP CONSTRAINT [LSPRGT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop procedure dbo.pims_error_handling
PRINT N'Drop procedure dbo.pims_error_handling'
GO
DROP PROCEDURE [dbo].[pims_error_handling]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_L_FILE_NO_SEQ
PRINT N'Drop sequence dbo.PIMS_L_FILE_NO_SEQ'
GO
DROP SEQUENCE [dbo].[PIMS_L_FILE_NO_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create procedure dbo.pims_error_handling
PRINT N'Create procedure dbo.pims_error_handling'
GO
/* ---------------------------------------------------------------------- */
/* Add procedures                                                         */
/* ---------------------------------------------------------------------- */

/* ---------------------------------------------------------------------- */
/* Add procedures                                                         */
/* ---------------------------------------------------------------------- */

-- ............................................................................................


-- --------------------------------------------------------------------------------------------
-- Create procedure [dbo].[pims_error_handling]
-- --------------------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pims_error_handling] AS
  begin
    DECLARE @errmsg   nvarchar(2048),
      @severity tinyint,
      @state    tinyint,
      @errno    int,
      @proc     sysname,
      @lineno   int

    SELECT @errmsg = error_message(), @severity = error_severity(),
      @state  = error_state(), @errno = error_number(),
      @proc   = error_procedure(), @lineno = error_line()

    IF @errmsg NOT LIKE '***%'
      BEGIN
        SELECT @errmsg = '*** ' + coalesce(quotename(@proc), '<dynamic SQL>') +
          ', Line ' + ltrim(str(@lineno)) + '. Errno ' +
          ltrim(str(@errno)) + ': ' + @errmsg
      END

    RAISERROR('%s', @severity, @state, @errmsg)
  end
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_ACCESS_REQUEST_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_ACCESS_REQUEST_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_ACCESS_REQUEST_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_ACCESS_REQUEST_HIST
PRINT N'Rebuild table dbo.PIMS_ACCESS_REQUEST_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813783]  ( 
	[_ACCESS_REQUEST_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACCESS_REQUEST_H_ID_SEQ]),
	[ACCESS_REQUEST_ID]              	bigint NOT NULL,
	[ACCESS_REQUEST_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[ROLE_ID]                        	bigint NULL,
	[USER_ID]                        	bigint NOT NULL,
	PRIMARY KEY CLUSTERED([_ACCESS_REQUEST_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813783]([_ACCESS_REQUEST_HIST_ID], [ACCESS_REQUEST_ID], [ACCESS_REQUEST_STATUS_TYPE_CODE], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [ROLE_ID], [USER_ID]) 
	SELECT [_ACCESS_REQUEST_HIST_ID], [ACCESS_REQUEST_ID], [ACCESS_REQUEST_STATUS_TYPE_CODE], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [ROLE_ID], [USER_ID] 
	FROM [dbo].[PIMS_ACCESS_REQUEST_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_ACCESS_REQUEST_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813783]', N'PIMS_ACCESS_REQUEST_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_AR1_H_UK
PRINT N'Create unique constraint dbo.PIMS_AR1_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_HIST]
	ADD UNIQUE ([_ACCESS_REQUEST_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_PERSON_ORGANIZATION_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_PERSON_ORGANIZATION_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_PERSON_ORGANIZATION_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PERSON_ORGANIZATION_HIST
PRINT N'Rebuild table dbo.PIMS_PERSON_ORGANIZATION_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813784]  ( 
	[_PERSON_ORGANIZATION_HIST_ID]  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PERSON_ORGANIZATION_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[IS_DISABLED]                   	bit NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PERSON_ID]                     	bigint NULL,
	[PERSON_ORGANIZATION_ID]        	bigint NOT NULL,
	PRIMARY KEY CLUSTERED([_PERSON_ORGANIZATION_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813784]([_PERSON_ORGANIZATION_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [ORGANIZATION_ID], [PERSON_ID], [PERSON_ORGANIZATION_ID]) 
	SELECT [_PERSON_ORGANIZATION_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [ORGANIZATION_ID], [PERSON_ID], [PERSON_ORGANIZATION_ID] 
	FROM [dbo].[PIMS_PERSON_ORGANIZATION_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_PERSON_ORGANIZATION_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813784]', N'PIMS_PERSON_ORGANIZATION_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PO10_H_UK
PRINT N'Create unique constraint dbo.PIMS_PO10_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PERSON_ORGANIZATION_HIST]
	ADD UNIQUE ([_PERSON_ORGANIZATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_PROPERTY_SERVICE_FILE_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_PROPERTY_SERVICE_FILE_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_PROPERTY_SERVICE_FILE_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROPERTY_SERVICE_FILE_HIST
PRINT N'Rebuild table dbo.PIMS_PROPERTY_SERVICE_FILE_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813785]  ( 
	[_PROPERTY_SERVICE_FILE_HIST_ID] 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_SERVICE_FILE_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[PROPERTY_SERVICE_FILE_ID]       	bigint NOT NULL,
	[PROPERTY_SERVICE_FILE_TYPE_CODE]	nvarchar(20) NOT NULL,
	PRIMARY KEY CLUSTERED([_PROPERTY_SERVICE_FILE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813785]([_PROPERTY_SERVICE_FILE_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [PROPERTY_SERVICE_FILE_ID], [PROPERTY_SERVICE_FILE_TYPE_CODE]) 
	SELECT [_PROPERTY_SERVICE_FILE_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [PROPERTY_SERVICE_FILE_ID], [PROPERTY_SERVICE_FILE_TYPE_CODE] 
	FROM [dbo].[PIMS_PROPERTY_SERVICE_FILE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_PROPERTY_SERVICE_FILE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813785]', N'PIMS_PROPERTY_SERVICE_FILE_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PSF20_H_UK
PRINT N'Create unique constraint dbo.PIMS_PSF20_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_SERVICE_FILE_HIST]
	ADD UNIQUE ([_PROPERTY_SERVICE_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_ORGANIZATION_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_ORGANIZATION_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_ORGANIZATION_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_ORGANIZATION_HIST
PRINT N'Rebuild table dbo.PIMS_ORGANIZATION_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813786]  ( 
	[_ORGANIZATION_HIST_ID]         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ORGANIZATION_H_ID_SEQ]),
	[ADDRESS_ID]                    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[DISTRICT_CODE]                 	smallint NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[ORG_IDENTIFIER_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[ORGANIZATION_IDENTIFIER]       	nvarchar(100) NULL,
	[ORGANIZATION_NAME]             	nvarchar(200) NOT NULL,
	[ORGANIZATION_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[PRNT_ORGANIZATION_ID]          	bigint NULL,
	[REGION_CODE]                   	smallint NULL,
	[WEBSITE]                       	nvarchar(200) NULL,
	PRIMARY KEY CLUSTERED([_ORGANIZATION_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813786]([_ORGANIZATION_HIST_ID], [ADDRESS_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DISTRICT_CODE], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [ORG_IDENTIFIER_TYPE_CODE], [ORGANIZATION_ID], [ORGANIZATION_IDENTIFIER], [ORGANIZATION_NAME], [ORGANIZATION_TYPE_CODE], [PRNT_ORGANIZATION_ID], [REGION_CODE], [WEBSITE]) 
	SELECT [_ORGANIZATION_HIST_ID], [ADDRESS_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DISTRICT_CODE], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [ORG_IDENTIFIER_TYPE_CODE], [ORGANIZATION_ID], [ORGANIZATION_IDENTIFIER], [ORGANIZATION_NAME], [ORGANIZATION_TYPE_CODE], [PRNT_ORGANIZATION_ID], [REGION_CODE], [WEBSITE] 
	FROM [dbo].[PIMS_ORGANIZATION_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_ORGANIZATION_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813786]', N'PIMS_ORGANIZATION_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_O8_H_UK
PRINT N'Create unique constraint dbo.PIMS_O8_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ORGANIZATION_HIST]
	ADD UNIQUE ([_ORGANIZATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_PROPERTY_EVALUATION_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_PROPERTY_EVALUATION_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_PROPERTY_EVALUATION_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROPERTY_EVALUATION_HIST
PRINT N'Rebuild table dbo.PIMS_PROPERTY_EVALUATION_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813787]  ( 
	[_PROPERTY_EVALUATION_HIST_ID]  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_EVALUATION_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[EVALUATION_DATE]               	date NOT NULL,
	[KEY]                           	int NOT NULL,
	[NOTE]                          	nvarchar(1000) NULL,
	[PROPERTY_EVALUATION_ID]        	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[VALUE]                         	money NOT NULL,
	PRIMARY KEY CLUSTERED([_PROPERTY_EVALUATION_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813787]([_PROPERTY_EVALUATION_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [EVALUATION_DATE], [KEY], [NOTE], [PROPERTY_EVALUATION_ID], [PROPERTY_ID], [VALUE]) 
	SELECT [_PROPERTY_EVALUATION_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [EVALUATION_DATE], [KEY], [NOTE], [PROPERTY_EVALUATION_ID], [PROPERTY_ID], [VALUE] 
	FROM [dbo].[PIMS_PROPERTY_EVALUATION_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_PROPERTY_EVALUATION_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813787]', N'PIMS_PROPERTY_EVALUATION_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PE17_H_UK
PRINT N'Create unique constraint dbo.PIMS_PE17_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_EVALUATION_HIST]
	ADD UNIQUE ([_PROPERTY_EVALUATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_USER_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_USER_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_USER_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_USER_HIST
PRINT N'Rebuild table dbo.PIMS_USER_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813788]  ( 
	[_USER_HIST_ID]                 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_USER_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APPROVED_BY_ID]                	nvarchar(30) NULL,
	[BUSINESS_IDENTIFIER_VALUE]     	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[EXPIRY_DATE]                   	datetime NULL,
	[GUID_IDENTIFIER_VALUE]         	uniqueidentifier NULL,
	[IS_DISABLED]                   	bit NULL,
	[ISSUE_DATE]                    	datetime NOT NULL,
	[LAST_LOGIN]                    	datetime NULL,
	[NOTE]                          	nvarchar(1000) NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[POSITION]                      	nvarchar(100) NULL,
	[USER_ID]                       	bigint NOT NULL,
	PRIMARY KEY CLUSTERED([_USER_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813788]([_USER_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [APPROVED_BY_ID], [BUSINESS_IDENTIFIER_VALUE], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [EXPIRY_DATE], [GUID_IDENTIFIER_VALUE], [IS_DISABLED], [ISSUE_DATE], [LAST_LOGIN], [NOTE], [PERSON_ID], [POSITION], [USER_ID]) 
	SELECT [_USER_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [APPROVED_BY_ID], [BUSINESS_IDENTIFIER_VALUE], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [EXPIRY_DATE], [GUID_IDENTIFIER_VALUE], [IS_DISABLED], [ISSUE_DATE], [LAST_LOGIN], [NOTE], [PERSON_ID], [POSITION], [USER_ID] 
	FROM [dbo].[PIMS_USER_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_USER_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813788]', N'PIMS_USER_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_U26_H_UK
PRINT N'Create unique constraint dbo.PIMS_U26_H_UK'
GO
ALTER TABLE [dbo].[PIMS_USER_HIST]
	ADD UNIQUE ([_USER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_PROPERTY_PROPERTY_SERVICE_FILE_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_PROPERTY_PROPERTY_SERVICE_FILE_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST
PRINT N'Rebuild table dbo.PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813789]  ( 
	[_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_PROPERTY_SERVICE_FILE_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]                   	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                   	uniqueidentifier NULL,
	[APP_CREATE_USERID]                      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]                 	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]             	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]                    	datetime NOT NULL,
	[DB_CREATE_USERID]                       	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]                  	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]                    	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                          	datetime NULL,
	[IS_DISABLED]                            	bit NULL,
	[PROPERTY_ID]                            	bigint NOT NULL,
	[PROPERTY_PROPERTY_SERVICE_FILE_ID]      	bigint NOT NULL,
	[PROPERTY_SERVICE_FILE_ID]               	bigint NOT NULL,
	PRIMARY KEY CLUSTERED([_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813789]([_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [PROPERTY_ID], [PROPERTY_PROPERTY_SERVICE_FILE_ID], [PROPERTY_SERVICE_FILE_ID]) 
	SELECT [_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [PROPERTY_ID], [PROPERTY_PROPERTY_SERVICE_FILE_ID], [PROPERTY_SERVICE_FILE_ID] 
	FROM [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813789]', N'PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PPSF19_H_UK
PRINT N'Create unique constraint dbo.PIMS_PPSF19_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST]
	ADD UNIQUE ([_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_CONTACT_METHOD_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_CONTACT_METHOD_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_CONTACT_METHOD_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_CONTACT_METHOD_HIST
PRINT N'Rebuild table dbo.PIMS_CONTACT_METHOD_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813790]  ( 
	[_CONTACT_METHOD_HIST_ID]       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_CONTACT_METHOD_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[CONTACT_METHOD_ID]             	bigint NOT NULL,
	[CONTACT_METHOD_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[CONTACT_METHOD_VALUE]          	nvarchar(200) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[IS_PREFERRED_METHOD]           	bit NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PERSON_ID]                     	bigint NULL,
	PRIMARY KEY CLUSTERED([_CONTACT_METHOD_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813790]([_CONTACT_METHOD_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [CONTACT_METHOD_ID], [CONTACT_METHOD_TYPE_CODE], [CONTACT_METHOD_VALUE], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_PREFERRED_METHOD], [ORGANIZATION_ID], [PERSON_ID]) 
	SELECT [_CONTACT_METHOD_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [CONTACT_METHOD_ID], [CONTACT_METHOD_TYPE_CODE], [CONTACT_METHOD_VALUE], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_PREFERRED_METHOD], [ORGANIZATION_ID], [PERSON_ID] 
	FROM [dbo].[PIMS_CONTACT_METHOD_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_CONTACT_METHOD_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813790]', N'PIMS_CONTACT_METHOD_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_CM7_H_UK
PRINT N'Create unique constraint dbo.PIMS_CM7_H_UK'
GO
ALTER TABLE [dbo].[PIMS_CONTACT_METHOD_HIST]
	ADD UNIQUE ([_CONTACT_METHOD_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_ACTIVITY_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_ACTIVITY_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_ACTIVITY_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_ACTIVITY_HIST
PRINT N'Rebuild table dbo.PIMS_ACTIVITY_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813791]  ( 
	[_ACTIVITY_HIST_ID]             	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_H_ID_SEQ]),
	[ACTIVITY_ID]                   	bigint NOT NULL,
	[ACTIVITY_MODEL_ID]             	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROJECT_ID]                    	bigint NULL,
	[WORKFLOW_ID]                   	bigint NULL,
	PRIMARY KEY CLUSTERED([_ACTIVITY_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813791]([_ACTIVITY_HIST_ID], [ACTIVITY_ID], [ACTIVITY_MODEL_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [PROJECT_ID], [WORKFLOW_ID]) 
	SELECT [_ACTIVITY_HIST_ID], [ACTIVITY_ID], [ACTIVITY_MODEL_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [PROJECT_ID], [WORKFLOW_ID] 
	FROM [dbo].[PIMS_ACTIVITY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_ACTIVITY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813791]', N'PIMS_ACTIVITY_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_A3_H_UK
PRINT N'Create unique constraint dbo.PIMS_A3_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_HIST]
	ADD UNIQUE ([_ACTIVITY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_PROJECT_NOTE_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_PROJECT_NOTE_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_PROJECT_NOTE_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROJECT_NOTE_HIST
PRINT N'Rebuild table dbo.PIMS_PROJECT_NOTE_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813792]  ( 
	[_PROJECT_NOTE_HIST_ID]         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_NOTE_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROJECT_ID]                    	bigint NOT NULL,
	[PROJECT_NOTE_ID]               	bigint NOT NULL,
	PRIMARY KEY CLUSTERED([_PROJECT_NOTE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813792]([_PROJECT_NOTE_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [PROJECT_ID], [PROJECT_NOTE_ID]) 
	SELECT [_PROJECT_NOTE_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [PROJECT_ID], [PROJECT_NOTE_ID] 
	FROM [dbo].[PIMS_PROJECT_NOTE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_PROJECT_NOTE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813792]', N'PIMS_PROJECT_NOTE_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PN12_H_UK
PRINT N'Create unique constraint dbo.PIMS_PN12_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_NOTE_HIST]
	ADD UNIQUE ([_PROJECT_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROPERTY_ORGANIZATION_HIST
PRINT N'Rebuild table dbo.PIMS_PROPERTY_ORGANIZATION_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813793]  ( 
	[_PROPERTY_ORGANIZATION_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[IS_DISABLED]                   	bit NULL,
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_ORGANIZATION_ID]      	bigint NOT NULL,
	PRIMARY KEY CLUSTERED([_PROPERTY_ORGANIZATION_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813793]([_PROPERTY_ORGANIZATION_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [ORGANIZATION_ID], [PROPERTY_ID], [PROPERTY_ORGANIZATION_ID]) 
	SELECT [_PROPERTY_ORGANIZATION_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [ORGANIZATION_ID], [PROPERTY_ID], [PROPERTY_ORGANIZATION_ID] 
	FROM [dbo].[PIMS_PROPERTY_ORGANIZATION_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813793]', N'PIMS_PROPERTY_ORGANIZATION_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PO18_H_UK
PRINT N'Create unique constraint dbo.PIMS_PO18_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION_HIST]
	ADD UNIQUE ([_PROPERTY_ORGANIZATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_USER_ROLE_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_USER_ROLE_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_USER_ROLE_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_USER_ROLE_HIST
PRINT N'Rebuild table dbo.PIMS_USER_ROLE_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813794]  ( 
	[_USER_ROLE_HIST_ID]            	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_USER_ROLE_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[IS_DISABLED]                   	bit NULL,
	[ROLE_ID]                       	bigint NOT NULL,
	[USER_ID]                       	bigint NOT NULL,
	[USER_ROLE_ID]                  	bigint NOT NULL,
	PRIMARY KEY CLUSTERED([_USER_ROLE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813794]([_USER_ROLE_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [ROLE_ID], [USER_ID], [USER_ROLE_ID]) 
	SELECT [_USER_ROLE_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [ROLE_ID], [USER_ID], [USER_ROLE_ID] 
	FROM [dbo].[PIMS_USER_ROLE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_USER_ROLE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813794]', N'PIMS_USER_ROLE_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_UR28_H_UK
PRINT N'Create unique constraint dbo.PIMS_UR28_H_UK'
GO
ALTER TABLE [dbo].[PIMS_USER_ROLE_HIST]
	ADD UNIQUE ([_USER_ROLE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_WORKFLOW_MODEL_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_WORKFLOW_MODEL_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_WORKFLOW_MODEL_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_WORKFLOW_MODEL_HIST
PRINT N'Rebuild table dbo.PIMS_WORKFLOW_MODEL_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813795]  ( 
	[_WORKFLOW_MODEL_HIST_ID]       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_WORKFLOW_MODEL_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[WORKFLOW_MODEL_ID]             	bigint NOT NULL,
	[WORKFLOW_MODEL_TYPE_CODE]      	nvarchar(20) NOT NULL,
	PRIMARY KEY CLUSTERED([_WORKFLOW_MODEL_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813795]([_WORKFLOW_MODEL_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [WORKFLOW_MODEL_ID], [WORKFLOW_MODEL_TYPE_CODE]) 
	SELECT [_WORKFLOW_MODEL_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [WORKFLOW_MODEL_ID], [WORKFLOW_MODEL_TYPE_CODE] 
	FROM [dbo].[PIMS_WORKFLOW_MODEL_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_WORKFLOW_MODEL_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813795]', N'PIMS_WORKFLOW_MODEL_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_WM29_H_UK
PRINT N'Create unique constraint dbo.PIMS_WM29_H_UK'
GO
ALTER TABLE [dbo].[PIMS_WORKFLOW_MODEL_HIST]
	ADD UNIQUE ([_WORKFLOW_MODEL_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST
PRINT N'Rebuild table dbo.PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813796]  ( 
	[_TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_H_ID_SEQ]),
	[ACTIVITY_MODEL_ID]                    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]                 	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]            	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                 	uniqueidentifier NULL,
	[APP_CREATE_USERID]                    	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]               	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]           	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]                  	datetime NOT NULL,
	[DB_CREATE_USERID]                     	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]                	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]                  	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                        	datetime NULL,
	[IMPLEMENTATION_ORDER]                 	smallint NOT NULL,
	[IS_DISABLED]                          	bit NULL,
	[IS_MANDATORY]                         	bit NOT NULL,
	[TASK_TEMPLATE_ACTIVITY_MODEL_ID]      	bigint NOT NULL,
	[TASK_TEMPLATE_ID]                     	bigint NOT NULL,
	PRIMARY KEY CLUSTERED([_TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813796]([_TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID], [ACTIVITY_MODEL_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IMPLEMENTATION_ORDER], [IS_DISABLED], [IS_MANDATORY], [TASK_TEMPLATE_ACTIVITY_MODEL_ID], [TASK_TEMPLATE_ID]) 
	SELECT [_TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID], [ACTIVITY_MODEL_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IMPLEMENTATION_ORDER], [IS_DISABLED], [IS_MANDATORY], [TASK_TEMPLATE_ACTIVITY_MODEL_ID], [TASK_TEMPLATE_ID] 
	FROM [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813796]', N'PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_TTAM25_H_UK
PRINT N'Create unique constraint dbo.PIMS_TTAM25_H_UK'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST]
	ADD UNIQUE ([_TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_TASK_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_TASK_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_TASK_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_TASK_HIST
PRINT N'Rebuild table dbo.PIMS_TASK_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813797]  ( 
	[_TASK_HIST_ID]                 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_TASK_H_ID_SEQ]),
	[ACTIVITY_ID]                   	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[TASK_ID]                       	bigint NOT NULL,
	[TASK_TEMPLATE_ID]              	bigint NOT NULL,
	[USER_ID]                       	bigint NOT NULL,
	PRIMARY KEY CLUSTERED([_TASK_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813797]([_TASK_HIST_ID], [ACTIVITY_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [TASK_ID], [TASK_TEMPLATE_ID], [USER_ID]) 
	SELECT [_TASK_HIST_ID], [ACTIVITY_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [TASK_ID], [TASK_TEMPLATE_ID], [USER_ID] 
	FROM [dbo].[PIMS_TASK_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_TASK_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813797]', N'PIMS_TASK_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_T23_H_UK
PRINT N'Create unique constraint dbo.PIMS_T23_H_UK'
GO
ALTER TABLE [dbo].[PIMS_TASK_HIST]
	ADD UNIQUE ([_TASK_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_ROLE_CLAIM_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_ROLE_CLAIM_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_ROLE_CLAIM_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_ROLE_CLAIM_HIST
PRINT N'Rebuild table dbo.PIMS_ROLE_CLAIM_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813798]  ( 
	[_ROLE_CLAIM_HIST_ID]           	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ROLE_CLAIM_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CLAIM_ID]                      	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[IS_DISABLED]                   	bit NULL,
	[ROLE_CLAIM_ID]                 	bigint NOT NULL,
	[ROLE_ID]                       	bigint NOT NULL,
	PRIMARY KEY CLUSTERED([_ROLE_CLAIM_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813798]([_ROLE_CLAIM_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CLAIM_ID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [ROLE_CLAIM_ID], [ROLE_ID]) 
	SELECT [_ROLE_CLAIM_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CLAIM_ID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [ROLE_CLAIM_ID], [ROLE_ID] 
	FROM [dbo].[PIMS_ROLE_CLAIM_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_ROLE_CLAIM_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813798]', N'PIMS_ROLE_CLAIM_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_RC22_H_UK
PRINT N'Create unique constraint dbo.PIMS_RC22_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ROLE_CLAIM_HIST]
	ADD UNIQUE ([_ROLE_CLAIM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_TASK_TEMPLATE_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_TASK_TEMPLATE_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_TASK_TEMPLATE_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_TASK_TEMPLATE_HIST
PRINT N'Rebuild table dbo.PIMS_TASK_TEMPLATE_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813799]  ( 
	[_TASK_TEMPLATE_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_TASK_TEMPLATE_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[TASK_TEMPLATE_ID]              	bigint NOT NULL,
	[TASK_TEMPLATE_TYPE_CODE]       	nvarchar(40) NOT NULL,
	PRIMARY KEY CLUSTERED([_TASK_TEMPLATE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813799]([_TASK_TEMPLATE_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [TASK_TEMPLATE_ID], [TASK_TEMPLATE_TYPE_CODE]) 
	SELECT [_TASK_TEMPLATE_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [TASK_TEMPLATE_ID], [TASK_TEMPLATE_TYPE_CODE] 
	FROM [dbo].[PIMS_TASK_TEMPLATE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_TASK_TEMPLATE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813799]', N'PIMS_TASK_TEMPLATE_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_TT24_H_UK
PRINT N'Create unique constraint dbo.PIMS_TT24_H_UK'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_HIST]
	ADD UNIQUE ([_TASK_TEMPLATE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_ACTIVITY_MODEL_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_ACTIVITY_MODEL_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_ACTIVITY_MODEL_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_ACTIVITY_MODEL_HIST
PRINT N'Rebuild table dbo.PIMS_ACTIVITY_MODEL_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813800]  ( 
	[_ACTIVITY_MODEL_HIST_ID]       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_MODEL_H_ID_SEQ]),
	[ACTIVITY_MODEL_ID]             	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	PRIMARY KEY CLUSTERED([_ACTIVITY_MODEL_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813800]([_ACTIVITY_MODEL_HIST_ID], [ACTIVITY_MODEL_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DESCRIPTION], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED]) 
	SELECT [_ACTIVITY_MODEL_HIST_ID], [ACTIVITY_MODEL_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DESCRIPTION], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED] 
	FROM [dbo].[PIMS_ACTIVITY_MODEL_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_ACTIVITY_MODEL_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813800]', N'PIMS_ACTIVITY_MODEL_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_AM4_H_UK
PRINT N'Create unique constraint dbo.PIMS_AM4_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_MODEL_HIST]
	ADD UNIQUE ([_ACTIVITY_MODEL_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_ADDRESS_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_ADDRESS_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_ADDRESS_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_ADDRESS_HIST
PRINT N'Rebuild table dbo.PIMS_ADDRESS_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813801]  ( 
	[_ADDRESS_HIST_ID]              	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ADDRESS_H_ID_SEQ]),
	[ADDRESS_ID]                    	bigint NOT NULL,
	[ADDRESS_USAGE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[COUNTRY_ID]                    	smallint NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[DISTRICT_CODE]                 	smallint NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LATITUDE]                      	numeric(18,0) NULL,
	[LONGITUDE]                     	numeric(18,0) NULL,
	[MUNICIPALITY_NAME]             	nvarchar(200) NULL,
	[POSTAL_CODE]                   	nvarchar(20) NULL,
	[PROVINCE_STATE_ID]             	smallint NOT NULL,
	[REGION_CODE]                   	smallint NULL,
	[STREET_ADDRESS_1]              	nvarchar(200) NULL,
	[STREET_ADDRESS_2]              	nvarchar(200) NULL,
	[STREET_ADDRESS_3]              	nvarchar(200) NULL,
	PRIMARY KEY CLUSTERED([_ADDRESS_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813801]([_ADDRESS_HIST_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [COUNTRY_ID], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DISTRICT_CODE], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [LATITUDE], [LONGITUDE], [MUNICIPALITY_NAME], [POSTAL_CODE], [PROVINCE_STATE_ID], [REGION_CODE], [STREET_ADDRESS_1], [STREET_ADDRESS_2], [STREET_ADDRESS_3]) 
	SELECT [_ADDRESS_HIST_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [COUNTRY_ID], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DISTRICT_CODE], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [LATITUDE], [LONGITUDE], [MUNICIPALITY_NAME], [POSTAL_CODE], [PROVINCE_STATE_ID], [REGION_CODE], [STREET_ADDRESS_1], [STREET_ADDRESS_2], [STREET_ADDRESS_3] 
	FROM [dbo].[PIMS_ADDRESS_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_ADDRESS_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813801]', N'PIMS_ADDRESS_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_A5_H_UK
PRINT N'Create unique constraint dbo.PIMS_A5_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ADDRESS_HIST]
	ADD UNIQUE ([_ADDRESS_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_PROJECT_PROPERTY_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_PROJECT_PROPERTY_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_PROJECT_PROPERTY_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROJECT_PROPERTY_HIST
PRINT N'Rebuild table dbo.PIMS_PROJECT_PROPERTY_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813802]  ( 
	[_PROJECT_PROPERTY_HIST_ID]     	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_PROPERTY_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[IS_DISABLED]                   	bit NULL,
	[PROJECT_ID]                    	bigint NOT NULL,
	[PROJECT_PROPERTY_ID]           	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	PRIMARY KEY CLUSTERED([_PROJECT_PROPERTY_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813802]([_PROJECT_PROPERTY_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [PROJECT_ID], [PROJECT_PROPERTY_ID], [PROPERTY_ID]) 
	SELECT [_PROJECT_PROPERTY_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [PROJECT_ID], [PROJECT_PROPERTY_ID], [PROPERTY_ID] 
	FROM [dbo].[PIMS_PROJECT_PROPERTY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_PROJECT_PROPERTY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813802]', N'PIMS_PROJECT_PROPERTY_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PP13_H_UK
PRINT N'Create unique constraint dbo.PIMS_PP13_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PROPERTY_HIST]
	ADD UNIQUE ([_PROJECT_PROPERTY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_CLAIM_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_CLAIM_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_CLAIM_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_CLAIM_HIST
PRINT N'Rebuild table dbo.PIMS_CLAIM_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813803]  ( 
	[_CLAIM_HIST_ID]                	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_CLAIM_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CLAIM_ID]                      	bigint NOT NULL,
	[CLAIM_UID]                     	uniqueidentifier NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[DESCRIPTION]                   	nvarchar(500) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[KEYCLOAK_ROLE_ID]              	uniqueidentifier NULL,
	[NAME]                          	nvarchar(100) NOT NULL,
	PRIMARY KEY CLUSTERED([_CLAIM_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813803]([_CLAIM_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CLAIM_ID], [CLAIM_UID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DESCRIPTION], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [KEYCLOAK_ROLE_ID], [NAME]) 
	SELECT [_CLAIM_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CLAIM_ID], [CLAIM_UID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DESCRIPTION], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [KEYCLOAK_ROLE_ID], [NAME] 
	FROM [dbo].[PIMS_CLAIM_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_CLAIM_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813803]', N'PIMS_CLAIM_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_C6_H_UK
PRINT N'Create unique constraint dbo.PIMS_C6_H_UK'
GO
ALTER TABLE [dbo].[PIMS_CLAIM_HIST]
	ADD UNIQUE ([_CLAIM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_PERSON_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_PERSON_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_PERSON_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PERSON_HIST
PRINT N'Rebuild table dbo.PIMS_PERSON_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813804]  ( 
	[_PERSON_HIST_ID]               	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PERSON_H_ID_SEQ]),
	[ADDRESS_ID]                    	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[BIRTH_DATE]                    	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[FIRST_NAME]                    	nvarchar(50) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[MIDDLE_NAMES]                  	nvarchar(200) NULL,
	[NAME_SUFFIX]                   	nvarchar(50) NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[SURNAME]                       	nvarchar(50) NOT NULL,
	PRIMARY KEY CLUSTERED([_PERSON_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813804]([_PERSON_HIST_ID], [ADDRESS_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [BIRTH_DATE], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [FIRST_NAME], [IS_DISABLED], [MIDDLE_NAMES], [NAME_SUFFIX], [PERSON_ID], [SURNAME]) 
	SELECT [_PERSON_HIST_ID], [ADDRESS_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [BIRTH_DATE], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [FIRST_NAME], [IS_DISABLED], [MIDDLE_NAMES], [NAME_SUFFIX], [PERSON_ID], [SURNAME] 
	FROM [dbo].[PIMS_PERSON_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_PERSON_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813804]', N'PIMS_PERSON_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_P9_H_UK
PRINT N'Create unique constraint dbo.PIMS_P9_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PERSON_HIST]
	ADD UNIQUE ([_PERSON_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_USER_ORGANIZATION_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_USER_ORGANIZATION_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_USER_ORGANIZATION_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_USER_ORGANIZATION_HIST
PRINT N'Rebuild table dbo.PIMS_USER_ORGANIZATION_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813805]  ( 
	[_USER_ORGANIZATION_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_USER_ORGANIZATION_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[IS_DISABLED]                   	bit NULL,
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[ROLE_ID]                       	bigint NOT NULL,
	[USER_ID]                       	bigint NOT NULL,
	[USER_ORGANIZATION_ID]          	bigint NOT NULL,
	PRIMARY KEY CLUSTERED([_USER_ORGANIZATION_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813805]([_USER_ORGANIZATION_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [ORGANIZATION_ID], [ROLE_ID], [USER_ID], [USER_ORGANIZATION_ID]) 
	SELECT [_USER_ORGANIZATION_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [ORGANIZATION_ID], [ROLE_ID], [USER_ID], [USER_ORGANIZATION_ID] 
	FROM [dbo].[PIMS_USER_ORGANIZATION_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_USER_ORGANIZATION_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813805]', N'PIMS_USER_ORGANIZATION_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_UO27_H_UK
PRINT N'Create unique constraint dbo.PIMS_UO27_H_UK'
GO
ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION_HIST]
	ADD UNIQUE ([_USER_ORGANIZATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_PROPERTY_ACTIVITY_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_PROPERTY_ACTIVITY_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROPERTY_ACTIVITY_HIST
PRINT N'Rebuild table dbo.PIMS_PROPERTY_ACTIVITY_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813806]  ( 
	[_PROPERTY_ACTIVITY_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]),
	[ACTIVITY_ID]                   	bigint NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[IS_DISABLED]                   	bit NULL,
	[PROPERTY_ACTIVITY_ID]          	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NULL,
	PRIMARY KEY CLUSTERED([_PROPERTY_ACTIVITY_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813806]([_PROPERTY_ACTIVITY_HIST_ID], [ACTIVITY_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [PROPERTY_ACTIVITY_ID], [PROPERTY_ID]) 
	SELECT [_PROPERTY_ACTIVITY_HIST_ID], [ACTIVITY_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [PROPERTY_ACTIVITY_ID], [PROPERTY_ID] 
	FROM [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813806]', N'PIMS_PROPERTY_ACTIVITY_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PA16_H_UK
PRINT N'Create unique constraint dbo.PIMS_PA16_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
	ADD UNIQUE ([_PROPERTY_ACTIVITY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_PROJECT_WORKFLOW_MODEL_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_PROJECT_WORKFLOW_MODEL_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROJECT_WORKFLOW_MODEL_HIST
PRINT N'Rebuild table dbo.PIMS_PROJECT_WORKFLOW_MODEL_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813807]  ( 
	[_PROJECT_WORKFLOW_MODEL_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_WORKFLOW_MODEL_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[IS_DISABLED]                    	bit NULL,
	[PROJECT_ID]                     	bigint NOT NULL,
	[PROJECT_WORKFLOW_MODEL_ID]      	bigint NOT NULL,
	[WORKFLOW_MODEL_ID]              	bigint NOT NULL,
	PRIMARY KEY CLUSTERED([_PROJECT_WORKFLOW_MODEL_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813807]([_PROJECT_WORKFLOW_MODEL_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [PROJECT_ID], [PROJECT_WORKFLOW_MODEL_ID], [WORKFLOW_MODEL_ID]) 
	SELECT [_PROJECT_WORKFLOW_MODEL_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [PROJECT_ID], [PROJECT_WORKFLOW_MODEL_ID], [WORKFLOW_MODEL_ID] 
	FROM [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813807]', N'PIMS_PROJECT_WORKFLOW_MODEL_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PWM14_H_UK
PRINT N'Create unique constraint dbo.PIMS_PWM14_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_HIST]
	ADD UNIQUE ([_PROJECT_WORKFLOW_MODEL_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_PROPERTY_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_PROPERTY_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_PROPERTY_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROPERTY_HIST
PRINT N'Rebuild table dbo.PIMS_PROPERTY_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813808]  ( 
	[_PROPERTY_HIST_ID]                  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_H_ID_SEQ]),
	[ADDRESS_ID]                         	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	[DESCRIPTION]                        	nvarchar(2000) NULL,
	[DISTRICT_CODE]                      	smallint NOT NULL,
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[ENCUMBRANCE_REASON]                 	nvarchar(500) NULL,
	[END_DATE_HIST]                      	datetime NULL,
	[IS_OWNED]                           	bit NOT NULL,
	[IS_PROPERTY_OF_INTEREST]            	bit NOT NULL,
	[IS_SENSITIVE]                       	bit NOT NULL,
	[IS_VISIBLE_TO_OTHER_AGENCIES]       	bit NOT NULL,
	[LAND_AREA]                          	real NOT NULL,
	[NAME]                               	nvarchar(250) NULL,
	[PID]                                	int NOT NULL,
	[PIN]                                	int NULL,
	[PROPERTY_AREA_UNIT_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[PROPERTY_CLASSIFICATION_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[PROPERTY_DATA_SOURCE_EFFECTIVE_DATE]	date NOT NULL,
	[PROPERTY_DATA_SOURCE_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[PROPERTY_ID]                        	bigint NOT NULL,
	[PROPERTY_STATUS_TYPE_CODE]          	nvarchar(20) NOT NULL,
	[PROPERTY_TENURE_TYPE_CODE]          	nvarchar(20) NOT NULL,
	[PROPERTY_TYPE_CODE]                 	nvarchar(20) NOT NULL,
	[REGION_CODE]                        	smallint NOT NULL,
	[ZONING]                             	nvarchar(50) NULL,
	[ZONING_POTENTIAL]                   	nvarchar(50) NULL,
	PRIMARY KEY CLUSTERED([_PROPERTY_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813808]([_PROPERTY_HIST_ID], [ADDRESS_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DESCRIPTION], [DISTRICT_CODE], [EFFECTIVE_DATE_HIST], [ENCUMBRANCE_REASON], [END_DATE_HIST], [IS_OWNED], [IS_PROPERTY_OF_INTEREST], [IS_SENSITIVE], [IS_VISIBLE_TO_OTHER_AGENCIES], [LAND_AREA], [NAME], [PID], [PIN], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_ID], [PROPERTY_STATUS_TYPE_CODE], [PROPERTY_TENURE_TYPE_CODE], [PROPERTY_TYPE_CODE], [REGION_CODE], [ZONING], [ZONING_POTENTIAL]) 
	SELECT [_PROPERTY_HIST_ID], [ADDRESS_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DESCRIPTION], [DISTRICT_CODE], [EFFECTIVE_DATE_HIST], [ENCUMBRANCE_REASON], [END_DATE_HIST], [IS_OWNED], [IS_PROPERTY_OF_INTEREST], [IS_SENSITIVE], [IS_VISIBLE_TO_OTHER_AGENCIES], [LAND_AREA], [NAME], [PID], [PIN], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_ID], [PROPERTY_STATUS_TYPE_CODE], [PROPERTY_TENURE_TYPE_CODE], [PROPERTY_TYPE_CODE], [REGION_CODE], [ZONING], [ZONING_POTENTIAL] 
	FROM [dbo].[PIMS_PROPERTY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_PROPERTY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813808]', N'PIMS_PROPERTY_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_P15_H_UK
PRINT N'Create unique constraint dbo.PIMS_P15_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_HIST]
	ADD UNIQUE ([_PROPERTY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_ROLE_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_ROLE_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_ROLE_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_ROLE_HIST
PRINT N'Rebuild table dbo.PIMS_ROLE_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813809]  ( 
	[_ROLE_HIST_ID]                 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ROLE_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[DESCRIPTION]                   	nvarchar(500) NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[IS_PUBLIC]                     	bit NOT NULL,
	[KEYCLOAK_GROUP_ID]             	uniqueidentifier NULL,
	[NAME]                          	nvarchar(100) NOT NULL,
	[ROLE_ID]                       	bigint NOT NULL,
	[ROLE_UID]                      	uniqueidentifier NOT NULL,
	[SORT_ORDER]                    	int NOT NULL,
	PRIMARY KEY CLUSTERED([_ROLE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813809]([_ROLE_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DESCRIPTION], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [IS_PUBLIC], [KEYCLOAK_GROUP_ID], [NAME], [ROLE_ID], [ROLE_UID], [SORT_ORDER]) 
	SELECT [_ROLE_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [DESCRIPTION], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [IS_PUBLIC], [KEYCLOAK_GROUP_ID], [NAME], [ROLE_ID], [ROLE_UID], [SORT_ORDER] 
	FROM [dbo].[PIMS_ROLE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_ROLE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813809]', N'PIMS_ROLE_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_R21_H_UK
PRINT N'Create unique constraint dbo.PIMS_R21_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ROLE_HIST]
	ADD UNIQUE ([_ROLE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_PROJECT_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_PROJECT_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_PROJECT_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROJECT_HIST
PRINT N'Rebuild table dbo.PIMS_PROJECT_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813810]  ( 
	[_PROJECT_HIST_ID]              	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_H_ID_SEQ]),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROJECT_ID]                    	bigint NOT NULL,
	[PROJECT_RISK_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[PROJECT_STATUS_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[PROJECT_TIER_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[PROJECT_TYPE_CODE]             	nvarchar(20) NOT NULL,
	PRIMARY KEY CLUSTERED([_PROJECT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813810]([_PROJECT_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [PROJECT_ID], [PROJECT_RISK_TYPE_CODE], [PROJECT_STATUS_TYPE_CODE], [PROJECT_TIER_TYPE_CODE], [PROJECT_TYPE_CODE]) 
	SELECT [_PROJECT_HIST_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [PROJECT_ID], [PROJECT_RISK_TYPE_CODE], [PROJECT_STATUS_TYPE_CODE], [PROJECT_TIER_TYPE_CODE], [PROJECT_TYPE_CODE] 
	FROM [dbo].[PIMS_PROJECT_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_PROJECT_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813810]', N'PIMS_PROJECT_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_P11_H_UK
PRINT N'Create unique constraint dbo.PIMS_P11_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_HIST]
	ADD UNIQUE ([_PROJECT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter sequence dbo.PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ
PRINT N'Alter sequence dbo.PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ'
GO
ALTER SEQUENCE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ]
	RESTART WITH 0
	MINVALUE 0
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_ACCESS_REQUEST_ORGANIZATION_HIST
PRINT N'Rebuild table dbo.PIMS_ACCESS_REQUEST_ORGANIZATION_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1630713813811]  ( 
	[_ACCESS_REQUEST_ORGANIZATION_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ]),
	[ACCESS_REQUEST_ID]                   	bigint NOT NULL,
	[ACCESS_REQUEST_ORGANIZATION_ID]      	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]           	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                	uniqueidentifier NULL,
	[APP_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]          	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]                 	datetime NOT NULL,
	[DB_CREATE_USERID]                    	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]               	nvarchar(30) NOT NULL,
	[EFFECTIVE_DATE_HIST]                 	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                       	datetime NULL,
	[IS_DISABLED]                         	bit NULL,
	[ORGANIZATION_ID]                     	bigint NULL,
	PRIMARY KEY CLUSTERED([_ACCESS_REQUEST_ORGANIZATION_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1630713813811]([_ACCESS_REQUEST_ORGANIZATION_HIST_ID], [ACCESS_REQUEST_ID], [ACCESS_REQUEST_ORGANIZATION_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [ORGANIZATION_ID]) 
	SELECT [_ACCESS_REQUEST_ORGANIZATION_HIST_ID], [ACCESS_REQUEST_ID], [ACCESS_REQUEST_ORGANIZATION_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [IS_DISABLED], [ORGANIZATION_ID] 
	FROM [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1630713813811]', N'PIMS_ACCESS_REQUEST_ORGANIZATION_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ARO2_H_UK
PRINT N'Create unique constraint dbo.PIMS_ARO2_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_HIST]
	ADD UNIQUE ([_ACCESS_REQUEST_ORGANIZATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Create view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_VW] AS
SELECT PROP.PROPERTY_ID              
     , PROP.PID                
     , PROP.PIN                   
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , PROP.PROPERTY_CLASSIFICATION_TYPE_CODE
     , PROP.PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.NAME
     , PROP.DESCRIPTION
     , PROP.ADDRESS_ID                 
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.ENCUMBRANCE_REASON
     , PROP.IS_SENSITIVE
     , PROP.IS_OWNED
     , PROP.IS_PROPERTY_OF_INTEREST
     , PROP.IS_VISIBLE_TO_OTHER_AGENCIES
     , PROP.ZONING,ZONING_POTENTIAL
FROM   PIMS_PROPERTY       PROP                                                    INNER JOIN
       PIMS_ADDRESS        ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        INNER JOIN
       PIMS_PROVINCE_STATE PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID INNER JOIN
       PIMS_COUNTRY        CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PST36_I_S_U_TR
PRINT N'Create trigger dbo.PST36_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PST36_I_S_U_TR] ON PIMS_PROPERTY_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_STATUS_TYPE_CODE = deleted.PROPERTY_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_STATUS_TYPE
    set "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_STATUS_TYPE
    inner join inserted
    on (PIMS_PROPERTY_STATUS_TYPE.PROPERTY_STATUS_TYPE_CODE = inserted.PROPERTY_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.AM5_I_S_U_TR
PRINT N'Create trigger dbo.AM5_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[AM5_I_S_U_TR] ON PIMS_ACTIVITY_MODEL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_MODEL_ID = deleted.ACTIVITY_MODEL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_MODEL
    set "ACTIVITY_MODEL_ID" = inserted."ACTIVITY_MODEL_ID",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_MODEL
    inner join inserted
    on (PIMS_ACTIVITY_MODEL.ACTIVITY_MODEL_ID = inserted.ACTIVITY_MODEL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.P19_I_S_I_TR
PRINT N'Create trigger dbo.P19_I_S_I_TR'
GO
/* ---------------------------------------------------------------------- */
/* Add triggers                                                           */
/* ---------------------------------------------------------------------- */

CREATE TRIGGER [dbo].[P19_I_S_I_TR] ON PIMS_PROJECT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROJECT ("PROJECT_ID",
      "PROJECT_TYPE_CODE",
      "PROJECT_STATUS_TYPE_CODE",
      "PROJECT_RISK_TYPE_CODE",
      "PROJECT_TIER_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROJECT_ID",
      "PROJECT_TYPE_CODE",
      "PROJECT_STATUS_TYPE_CODE",
      "PROJECT_RISK_TYPE_CODE",
      "PROJECT_TIER_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PWM26_I_S_I_TR
PRINT N'Create trigger dbo.PWM26_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PWM26_I_S_I_TR] ON PIMS_PROJECT_WORKFLOW_MODEL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROJECT_WORKFLOW_MODEL ("PROJECT_WORKFLOW_MODEL_ID",
      "PROJECT_ID",
      "WORKFLOW_MODEL_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROJECT_WORKFLOW_MODEL_ID",
      "PROJECT_ID",
      "WORKFLOW_MODEL_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.AR1_I_S_U_TR
PRINT N'Create trigger dbo.AR1_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[AR1_I_S_U_TR] ON PIMS_ACCESS_REQUEST INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACCESS_REQUEST_ID = deleted.ACCESS_REQUEST_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACCESS_REQUEST
    set "ACCESS_REQUEST_ID" = inserted."ACCESS_REQUEST_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "ACCESS_REQUEST_STATUS_TYPE_CODE" = inserted."ACCESS_REQUEST_STATUS_TYPE_CODE",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST
    inner join inserted
    on (PIMS_ACCESS_REQUEST.ACCESS_REQUEST_ID = inserted.ACCESS_REQUEST_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PO32_I_S_U_TR
PRINT N'Create trigger dbo.PO32_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PO32_I_S_U_TR] ON PIMS_PROPERTY_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ORGANIZATION_ID = deleted.PROPERTY_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ORGANIZATION
    set "PROPERTY_ORGANIZATION_ID" = inserted."PROPERTY_ORGANIZATION_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "IS_DISABLED" = inserted."IS_DISABLED"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ORGANIZATION
    inner join inserted
    on (PIMS_PROPERTY_ORGANIZATION.PROPERTY_ORGANIZATION_ID = inserted.PROPERTY_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.A6_I_S_I_TR
PRINT N'Create trigger dbo.A6_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[A6_I_S_I_TR] ON PIMS_ADDRESS INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ADDRESS ("ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "STREET_ADDRESS_1",
      "STREET_ADDRESS_2",
      "STREET_ADDRESS_3",
      "MUNICIPALITY_NAME",
      "POSTAL_CODE",
      "LATITUDE",
      "LONGITUDE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "STREET_ADDRESS_1",
      "STREET_ADDRESS_2",
      "STREET_ADDRESS_3",
      "MUNICIPALITY_NAME",
      "POSTAL_CODE",
      "LATITUDE",
      "LONGITUDE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.AR1_A_S_IUD_TR
PRINT N'Create trigger dbo.AR1_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[AR1_A_S_IUD_TR] ON PIMS_ACCESS_REQUEST FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACCESS_REQUEST_HIST set END_DATE_HIST = @curr_date where ACCESS_REQUEST_ID in (select ACCESS_REQUEST_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACCESS_REQUEST_HIST ([ACCESS_REQUEST_ID], [USER_ID], [ROLE_ID], [ACCESS_REQUEST_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACCESS_REQUEST_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACCESS_REQUEST_ID], [USER_ID], [ROLE_ID], [ACCESS_REQUEST_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACCESS_REQUEST_H_ID_SEQ]) as [_ACCESS_REQUEST_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.AUT8_I_S_I_TR
PRINT N'Create trigger dbo.AUT8_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[AUT8_I_S_I_TR] ON PIMS_AREA_UNIT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_AREA_UNIT_TYPE ("AREA_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "AREA_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.TT44_I_S_U_TR
PRINT N'Create trigger dbo.TT44_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[TT44_I_S_U_TR] ON PIMS_TASK_TEMPLATE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TASK_TEMPLATE_ID = deleted.TASK_TEMPLATE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TASK_TEMPLATE
    set "TASK_TEMPLATE_ID" = inserted."TASK_TEMPLATE_ID",
      "TASK_TEMPLATE_TYPE_CODE" = inserted."TASK_TEMPLATE_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TASK_TEMPLATE
    inner join inserted
    on (PIMS_TASK_TEMPLATE.TASK_TEMPLATE_ID = inserted.TASK_TEMPLATE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PE31_I_S_I_TR
PRINT N'Create trigger dbo.PE31_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PE31_I_S_I_TR] ON PIMS_PROPERTY_EVALUATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_EVALUATION ("PROPERTY_EVALUATION_ID",
      "PROPERTY_ID",
      "EVALUATION_DATE",
      "KEY",
      "VALUE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_EVALUATION_ID",
      "PROPERTY_ID",
      "EVALUATION_DATE",
      "KEY",
      "VALUE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PO10_A_S_IUD_TR
PRINT N'Create trigger dbo.PO10_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PO10_A_S_IUD_TR] ON PIMS_PERSON_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PERSON_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where PERSON_ORGANIZATION_ID in (select PERSON_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PERSON_ORGANIZATION_HIST ([PERSON_ORGANIZATION_ID], [PERSON_ID], [ORGANIZATION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PERSON_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PERSON_ORGANIZATION_ID], [PERSON_ID], [ORGANIZATION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PERSON_ORGANIZATION_H_ID_SEQ]) as [_PERSON_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PSF20_A_S_IUD_TR
PRINT N'Create trigger dbo.PSF20_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PSF20_A_S_IUD_TR] ON PIMS_PROPERTY_SERVICE_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_SERVICE_FILE_HIST set END_DATE_HIST = @curr_date where PROPERTY_SERVICE_FILE_ID in (select PROPERTY_SERVICE_FILE_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_SERVICE_FILE_HIST ([PROPERTY_SERVICE_FILE_ID], [PROPERTY_SERVICE_FILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_SERVICE_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_SERVICE_FILE_ID], [PROPERTY_SERVICE_FILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_SERVICE_FILE_H_ID_SEQ]) as [_PROPERTY_SERVICE_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.O8_A_S_IUD_TR
PRINT N'Create trigger dbo.O8_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[O8_A_S_IUD_TR] ON PIMS_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where ORGANIZATION_ID in (select ORGANIZATION_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ORGANIZATION_HIST ([ORGANIZATION_ID], [PRNT_ORGANIZATION_ID], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [ORGANIZATION_TYPE_CODE], [ORG_IDENTIFIER_TYPE_CODE], [ORGANIZATION_IDENTIFIER], [ORGANIZATION_NAME], [WEBSITE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ORGANIZATION_ID], [PRNT_ORGANIZATION_ID], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [ORGANIZATION_TYPE_CODE], [ORG_IDENTIFIER_TYPE_CODE], [ORGANIZATION_IDENTIFIER], [ORGANIZATION_NAME], [WEBSITE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ORGANIZATION_H_ID_SEQ]) as [_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PE17_A_S_IUD_TR
PRINT N'Create trigger dbo.PE17_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PE17_A_S_IUD_TR] ON PIMS_PROPERTY_EVALUATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_EVALUATION_HIST set END_DATE_HIST = @curr_date where PROPERTY_EVALUATION_ID in (select PROPERTY_EVALUATION_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_EVALUATION_HIST ([PROPERTY_EVALUATION_ID], [PROPERTY_ID], [EVALUATION_DATE], [KEY], [VALUE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_EVALUATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_EVALUATION_ID], [PROPERTY_ID], [EVALUATION_DATE], [KEY], [VALUE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_EVALUATION_H_ID_SEQ]) as [_PROPERTY_EVALUATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.U26_A_S_IUD_TR
PRINT N'Create trigger dbo.U26_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[U26_A_S_IUD_TR] ON PIMS_USER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_USER_HIST set END_DATE_HIST = @curr_date where USER_ID in (select USER_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_USER_HIST ([USER_ID], [PERSON_ID], [BUSINESS_IDENTIFIER_VALUE], [GUID_IDENTIFIER_VALUE], [POSITION], [NOTE], [LAST_LOGIN], [APPROVED_BY_ID], [ISSUE_DATE], [EXPIRY_DATE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _USER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ID], [PERSON_ID], [BUSINESS_IDENTIFIER_VALUE], [GUID_IDENTIFIER_VALUE], [POSITION], [NOTE], [LAST_LOGIN], [APPROVED_BY_ID], [ISSUE_DATE], [EXPIRY_DATE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_USER_H_ID_SEQ]) as [_USER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.C12_I_S_I_TR
PRINT N'Create trigger dbo.C12_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[C12_I_S_I_TR] ON PIMS_COUNTRY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_COUNTRY ("COUNTRY_ID",
      "COUNTRY_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "COUNTRY_ID",
      "COUNTRY_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.AUT7_I_S_U_TR
PRINT N'Create trigger dbo.AUT7_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[AUT7_I_S_U_TR] ON PIMS_ADDRESS_USAGE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ADDRESS_USAGE_TYPE_CODE = deleted.ADDRESS_USAGE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ADDRESS_USAGE_TYPE
    set "ADDRESS_USAGE_TYPE_CODE" = inserted."ADDRESS_USAGE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ADDRESS_USAGE_TYPE
    inner join inserted
    on (PIMS_ADDRESS_USAGE_TYPE.ADDRESS_USAGE_TYPE_CODE = inserted.ADDRESS_USAGE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PWM26_I_S_U_TR
PRINT N'Create trigger dbo.PWM26_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PWM26_I_S_U_TR] ON PIMS_PROJECT_WORKFLOW_MODEL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_WORKFLOW_MODEL_ID = deleted.PROJECT_WORKFLOW_MODEL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_WORKFLOW_MODEL
    set "PROJECT_WORKFLOW_MODEL_ID" = inserted."PROJECT_WORKFLOW_MODEL_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "WORKFLOW_MODEL_ID" = inserted."WORKFLOW_MODEL_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_WORKFLOW_MODEL
    inner join inserted
    on (PIMS_PROJECT_WORKFLOW_MODEL.PROJECT_WORKFLOW_MODEL_ID = inserted.PROJECT_WORKFLOW_MODEL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PPSF19_A_S_IUD_TR
PRINT N'Create trigger dbo.PPSF19_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PPSF19_A_S_IUD_TR] ON PIMS_PROPERTY_PROPERTY_SERVICE_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST set END_DATE_HIST = @curr_date where PROPERTY_PROPERTY_SERVICE_FILE_ID in (select PROPERTY_PROPERTY_SERVICE_FILE_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST ([PROPERTY_PROPERTY_SERVICE_FILE_ID], [PROPERTY_ID], [PROPERTY_SERVICE_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_PROPERTY_SERVICE_FILE_ID], [PROPERTY_ID], [PROPERTY_SERVICE_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_H_ID_SEQ]) as [_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.CM7_A_S_IUD_TR
PRINT N'Create trigger dbo.CM7_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[CM7_A_S_IUD_TR] ON PIMS_CONTACT_METHOD FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_CONTACT_METHOD_HIST set END_DATE_HIST = @curr_date where CONTACT_METHOD_ID in (select CONTACT_METHOD_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_CONTACT_METHOD_HIST ([CONTACT_METHOD_ID], [CONTACT_METHOD_TYPE_CODE], [PERSON_ID], [ORGANIZATION_ID], [CONTACT_METHOD_VALUE], [IS_PREFERRED_METHOD], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _CONTACT_METHOD_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [CONTACT_METHOD_ID], [CONTACT_METHOD_TYPE_CODE], [PERSON_ID], [ORGANIZATION_ID], [CONTACT_METHOD_VALUE], [IS_PREFERRED_METHOD], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_CONTACT_METHOD_H_ID_SEQ]) as [_CONTACT_METHOD_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.UO48_I_S_I_TR
PRINT N'Create trigger dbo.UO48_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[UO48_I_S_I_TR] ON PIMS_USER_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_USER_ORGANIZATION ("USER_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "USER_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PST23_I_S_U_TR
PRINT N'Create trigger dbo.PST23_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PST23_I_S_U_TR] ON PIMS_PROJECT_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_STATUS_TYPE_CODE = deleted.PROJECT_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_STATUS_TYPE
    set "PROJECT_STATUS_TYPE_CODE" = inserted."PROJECT_STATUS_TYPE_CODE",
      "CODE_GROUP" = inserted."CODE_GROUP",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "TEXT" = inserted."TEXT",
      "IS_MILESTONE" = inserted."IS_MILESTONE",
      "IS_TERMINAL" = inserted."IS_TERMINAL",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_STATUS_TYPE
    inner join inserted
    on (PIMS_PROJECT_STATUS_TYPE.PROJECT_STATUS_TYPE_CODE = inserted.PROJECT_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.T43_I_S_U_TR
PRINT N'Create trigger dbo.T43_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[T43_I_S_U_TR] ON PIMS_TASK INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TASK_ID = deleted.TASK_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TASK
    set "TASK_ID" = inserted."TASK_ID",
      "TASK_TEMPLATE_ID" = inserted."TASK_TEMPLATE_ID",
      "ACTIVITY_ID" = inserted."ACTIVITY_ID",
      "USER_ID" = inserted."USER_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TASK
    inner join inserted
    on (PIMS_TASK.TASK_ID = inserted.TASK_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.OT16_I_S_U_TR
PRINT N'Create trigger dbo.OT16_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[OT16_I_S_U_TR] ON PIMS_ORGANIZATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORGANIZATION_TYPE_CODE = deleted.ORGANIZATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORGANIZATION_TYPE
    set "ORGANIZATION_TYPE_CODE" = inserted."ORGANIZATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION_TYPE
    inner join inserted
    on (PIMS_ORGANIZATION_TYPE.ORGANIZATION_TYPE_CODE = inserted.ORGANIZATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PTT24_I_S_I_TR
PRINT N'Create trigger dbo.PTT24_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PTT24_I_S_I_TR] ON PIMS_PROJECT_TIER_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROJECT_TIER_TYPE ("PROJECT_TIER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_TIER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.P17_I_S_I_TR
PRINT N'Create trigger dbo.P17_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[P17_I_S_I_TR] ON PIMS_PERSON INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PERSON ("PERSON_ID",
      "ADDRESS_ID",
      "SURNAME",
      "FIRST_NAME",
      "MIDDLE_NAMES",
      "NAME_SUFFIX",
      "BIRTH_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PERSON_ID",
      "ADDRESS_ID",
      "SURNAME",
      "FIRST_NAME",
      "MIDDLE_NAMES",
      "NAME_SUFFIX",
      "BIRTH_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PS39_I_S_I_TR
PRINT N'Create trigger dbo.PS39_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PS39_I_S_I_TR] ON PIMS_PROVINCE_STATE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROVINCE_STATE ("PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "PROVINCE_STATE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "PROVINCE_STATE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.A3_A_S_IUD_TR
PRINT N'Create trigger dbo.A3_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[A3_A_S_IUD_TR] ON PIMS_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_HIST set END_DATE_HIST = @curr_date where ACTIVITY_ID in (select ACTIVITY_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_HIST ([ACTIVITY_ID], [PROJECT_ID], [WORKFLOW_ID], [ACTIVITY_MODEL_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_ID], [PROJECT_ID], [WORKFLOW_ID], [ACTIVITY_MODEL_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_H_ID_SEQ]) as [_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.ARST3_I_S_I_TR
PRINT N'Create trigger dbo.ARST3_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[ARST3_I_S_I_TR] ON PIMS_ACCESS_REQUEST_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ACCESS_REQUEST_STATUS_TYPE ("ACCESS_REQUEST_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.OIT14_I_S_I_TR
PRINT N'Create trigger dbo.OIT14_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[OIT14_I_S_I_TR] ON PIMS_ORG_IDENTIFIER_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ORG_IDENTIFIER_TYPE ("ORG_IDENTIFIER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ORG_IDENTIFIER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.AR1_I_S_I_TR
PRINT N'Create trigger dbo.AR1_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[AR1_I_S_I_TR] ON PIMS_ACCESS_REQUEST INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ACCESS_REQUEST ("ACCESS_REQUEST_ID",
      "USER_ID",
      "ROLE_ID",
      "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACCESS_REQUEST_ID",
      "USER_ID",
      "ROLE_ID",
      "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PN12_A_S_IUD_TR
PRINT N'Create trigger dbo.PN12_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PN12_A_S_IUD_TR] ON PIMS_PROJECT_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_NOTE_HIST set END_DATE_HIST = @curr_date where PROJECT_NOTE_ID in (select PROJECT_NOTE_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_NOTE_HIST ([PROJECT_NOTE_ID], [PROJECT_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_NOTE_ID], [PROJECT_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_NOTE_H_ID_SEQ]) as [_PROJECT_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.AM5_I_S_I_TR
PRINT N'Create trigger dbo.AM5_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[AM5_I_S_I_TR] ON PIMS_ACTIVITY_MODEL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ACTIVITY_MODEL ("ACTIVITY_MODEL_ID",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_MODEL_ID",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PTT37_I_S_I_TR
PRINT N'Create trigger dbo.PTT37_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PTT37_I_S_I_TR] ON PIMS_PROPERTY_TENURE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_TENURE_TYPE ("PROPERTY_TENURE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_TENURE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PP21_I_S_I_TR
PRINT N'Create trigger dbo.PP21_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PP21_I_S_I_TR] ON PIMS_PROJECT_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROJECT_PROPERTY ("PROJECT_PROPERTY_ID",
      "PROJECT_ID",
      "PROPERTY_ID",
      "IS_DISABLED",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_PROPERTY_ID",
      "PROJECT_ID",
      "PROPERTY_ID",
      "IS_DISABLED",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PO32_I_S_I_TR
PRINT N'Create trigger dbo.PO32_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PO32_I_S_I_TR] ON PIMS_PROPERTY_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_ORGANIZATION ("PROPERTY_ORGANIZATION_ID",
      "PROPERTY_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "IS_DISABLED")
    select "PROPERTY_ORGANIZATION_ID",
      "PROPERTY_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "IS_DISABLED"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PRT22_I_S_I_TR
PRINT N'Create trigger dbo.PRT22_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PRT22_I_S_I_TR] ON PIMS_PROJECT_RISK_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROJECT_RISK_TYPE ("PROJECT_RISK_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_RISK_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.R40_I_S_I_TR
PRINT N'Create trigger dbo.R40_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[R40_I_S_I_TR] ON PIMS_REGION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_REGION ("REGION_CODE",
      "REGION_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "REGION_CODE",
      "REGION_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.P19_I_S_U_TR
PRINT N'Create trigger dbo.P19_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[P19_I_S_U_TR] ON PIMS_PROJECT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_ID = deleted.PROJECT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT
    set "PROJECT_ID" = inserted."PROJECT_ID",
      "PROJECT_TYPE_CODE" = inserted."PROJECT_TYPE_CODE",
      "PROJECT_STATUS_TYPE_CODE" = inserted."PROJECT_STATUS_TYPE_CODE",
      "PROJECT_RISK_TYPE_CODE" = inserted."PROJECT_RISK_TYPE_CODE",
      "PROJECT_TIER_TYPE_CODE" = inserted."PROJECT_TIER_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT
    inner join inserted
    on (PIMS_PROJECT.PROJECT_ID = inserted.PROJECT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PCT29_I_S_I_TR
PRINT N'Create trigger dbo.PCT29_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PCT29_I_S_I_TR] ON PIMS_PROPERTY_CLASSIFICATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_CLASSIFICATION_TYPE ("PROPERTY_CLASSIFICATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PO18_A_S_IUD_TR
PRINT N'Create trigger dbo.PO18_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PO18_A_S_IUD_TR] ON PIMS_PROPERTY_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where PROPERTY_ORGANIZATION_ID in (select PROPERTY_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ORGANIZATION_HIST ([PROPERTY_ORGANIZATION_ID], [PROPERTY_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED], _PROPERTY_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ORGANIZATION_ID], [PROPERTY_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED], (next value for [dbo].[PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ]) as [_PROPERTY_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.A4_I_S_I_TR
PRINT N'Create trigger dbo.A4_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[A4_I_S_I_TR] ON PIMS_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ACTIVITY ("ACTIVITY_ID",
      "PROJECT_ID",
      "WORKFLOW_ID",
      "ACTIVITY_MODEL_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_ID",
      "PROJECT_ID",
      "WORKFLOW_ID",
      "ACTIVITY_MODEL_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.WM50_I_S_U_TR
PRINT N'Create trigger dbo.WM50_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[WM50_I_S_U_TR] ON PIMS_WORKFLOW_MODEL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.WORKFLOW_MODEL_ID = deleted.WORKFLOW_MODEL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_WORKFLOW_MODEL
    set "WORKFLOW_MODEL_ID" = inserted."WORKFLOW_MODEL_ID",
      "WORKFLOW_MODEL_TYPE_CODE" = inserted."WORKFLOW_MODEL_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_WORKFLOW_MODEL
    inner join inserted
    on (PIMS_WORKFLOW_MODEL.WORKFLOW_MODEL_ID = inserted.WORKFLOW_MODEL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.TTAM45_I_S_I_TR
PRINT N'Create trigger dbo.TTAM45_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[TTAM45_I_S_I_TR] ON PIMS_TASK_TEMPLATE_ACTIVITY_MODEL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_TASK_TEMPLATE_ACTIVITY_MODEL ("TASK_TEMPLATE_ACTIVITY_MODEL_ID",
      "TASK_TEMPLATE_ID",
      "ACTIVITY_MODEL_ID",
      "IS_MANDATORY",
      "IMPLEMENTATION_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "TASK_TEMPLATE_ACTIVITY_MODEL_ID",
      "TASK_TEMPLATE_ID",
      "ACTIVITY_MODEL_ID",
      "IS_MANDATORY",
      "IMPLEMENTATION_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.UR28_A_S_IUD_TR
PRINT N'Create trigger dbo.UR28_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[UR28_A_S_IUD_TR] ON PIMS_USER_ROLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_USER_ROLE_HIST set END_DATE_HIST = @curr_date where USER_ROLE_ID in (select USER_ROLE_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_USER_ROLE_HIST ([USER_ROLE_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _USER_ROLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ROLE_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_USER_ROLE_H_ID_SEQ]) as [_USER_ROLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PT25_I_S_I_TR
PRINT N'Create trigger dbo.PT25_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PT25_I_S_I_TR] ON PIMS_PROJECT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROJECT_TYPE ("PROJECT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.TT44_I_S_I_TR
PRINT N'Create trigger dbo.TT44_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[TT44_I_S_I_TR] ON PIMS_TASK_TEMPLATE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_TASK_TEMPLATE ("TASK_TEMPLATE_ID",
      "TASK_TEMPLATE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "TASK_TEMPLATE_ID",
      "TASK_TEMPLATE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PSF34_I_S_I_TR
PRINT N'Create trigger dbo.PSF34_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PSF34_I_S_I_TR] ON PIMS_PROPERTY_SERVICE_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_SERVICE_FILE ("PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_SERVICE_FILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_SERVICE_FILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.RC42_I_S_U_TR
PRINT N'Create trigger dbo.RC42_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[RC42_I_S_U_TR] ON PIMS_ROLE_CLAIM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ROLE_CLAIM_ID = deleted.ROLE_CLAIM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ROLE_CLAIM
    set "ROLE_CLAIM_ID" = inserted."ROLE_CLAIM_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "CLAIM_ID" = inserted."CLAIM_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ROLE_CLAIM
    inner join inserted
    on (PIMS_ROLE_CLAIM.ROLE_CLAIM_ID = inserted.ROLE_CLAIM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.C12_I_S_U_TR
PRINT N'Create trigger dbo.C12_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[C12_I_S_U_TR] ON PIMS_COUNTRY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.COUNTRY_ID = deleted.COUNTRY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COUNTRY
    set "COUNTRY_ID" = inserted."COUNTRY_ID",
      "COUNTRY_CODE" = inserted."COUNTRY_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COUNTRY
    inner join inserted
    on (PIMS_COUNTRY.COUNTRY_ID = inserted.COUNTRY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.WM29_A_S_IUD_TR
PRINT N'Create trigger dbo.WM29_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[WM29_A_S_IUD_TR] ON PIMS_WORKFLOW_MODEL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_WORKFLOW_MODEL_HIST set END_DATE_HIST = @curr_date where WORKFLOW_MODEL_ID in (select WORKFLOW_MODEL_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_WORKFLOW_MODEL_HIST ([WORKFLOW_MODEL_ID], [WORKFLOW_MODEL_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _WORKFLOW_MODEL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [WORKFLOW_MODEL_ID], [WORKFLOW_MODEL_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_WORKFLOW_MODEL_H_ID_SEQ]) as [_WORKFLOW_MODEL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.T43_I_S_I_TR
PRINT N'Create trigger dbo.T43_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[T43_I_S_I_TR] ON PIMS_TASK INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_TASK ("TASK_ID",
      "TASK_TEMPLATE_ID",
      "ACTIVITY_ID",
      "USER_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "TASK_ID",
      "TASK_TEMPLATE_ID",
      "ACTIVITY_ID",
      "USER_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PRT22_I_S_U_TR
PRINT N'Create trigger dbo.PRT22_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PRT22_I_S_U_TR] ON PIMS_PROJECT_RISK_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_RISK_TYPE_CODE = deleted.PROJECT_RISK_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_RISK_TYPE
    set "PROJECT_RISK_TYPE_CODE" = inserted."PROJECT_RISK_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_RISK_TYPE
    inner join inserted
    on (PIMS_PROJECT_RISK_TYPE.PROJECT_RISK_TYPE_CODE = inserted.PROJECT_RISK_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.R40_I_S_U_TR
PRINT N'Create trigger dbo.R40_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[R40_I_S_U_TR] ON PIMS_REGION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.REGION_CODE = deleted.REGION_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_REGION
    set "REGION_CODE" = inserted."REGION_CODE",
      "REGION_NAME" = inserted."REGION_NAME",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_REGION
    inner join inserted
    on (PIMS_REGION.REGION_CODE = inserted.REGION_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PPSF33_I_S_I_TR
PRINT N'Create trigger dbo.PPSF33_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PPSF33_I_S_I_TR] ON PIMS_PROPERTY_PROPERTY_SERVICE_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_PROPERTY_SERVICE_FILE ("PROPERTY_PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_SERVICE_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_SERVICE_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.WM50_I_S_I_TR
PRINT N'Create trigger dbo.WM50_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[WM50_I_S_I_TR] ON PIMS_WORKFLOW_MODEL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_WORKFLOW_MODEL ("WORKFLOW_MODEL_ID",
      "WORKFLOW_MODEL_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "WORKFLOW_MODEL_ID",
      "WORKFLOW_MODEL_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PST23_I_S_I_TR
PRINT N'Create trigger dbo.PST23_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PST23_I_S_I_TR] ON PIMS_PROJECT_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROJECT_STATUS_TYPE ("PROJECT_STATUS_TYPE_CODE",
      "CODE_GROUP",
      "DESCRIPTION",
      "TEXT",
      "IS_MILESTONE",
      "IS_TERMINAL",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_STATUS_TYPE_CODE",
      "CODE_GROUP",
      "DESCRIPTION",
      "TEXT",
      "IS_MILESTONE",
      "IS_TERMINAL",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.C9_I_S_I_TR
PRINT N'Create trigger dbo.C9_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[C9_I_S_I_TR] ON PIMS_CLAIM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_CLAIM ("CLAIM_ID",
      "CLAIM_UID",
      "KEYCLOAK_ROLE_ID",
      "NAME",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "CLAIM_ID",
      "CLAIM_UID",
      "KEYCLOAK_ROLE_ID",
      "NAME",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.UR49_I_S_I_TR
PRINT N'Create trigger dbo.UR49_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[UR49_I_S_I_TR] ON PIMS_USER_ROLE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_USER_ROLE ("USER_ROLE_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "USER_ROLE_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.P27_I_S_I_TR
PRINT N'Create trigger dbo.P27_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[P27_I_S_I_TR] ON PIMS_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY ("PROPERTY_ID",
      "PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_TENURE_TYPE_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME",
      "DESCRIPTION",
      "PID",
      "PIN",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "ENCUMBRANCE_REASON",
      "IS_OWNED",
      "IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE",
      "ZONING",
      "ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ID",
      "PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_TENURE_TYPE_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME",
      "DESCRIPTION",
      "PID",
      "PIN",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "ENCUMBRANCE_REASON",
      "IS_OWNED",
      "IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE",
      "ZONING",
      "ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.TTAM25_A_S_IUD_TR
PRINT N'Create trigger dbo.TTAM25_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[TTAM25_A_S_IUD_TR] ON PIMS_TASK_TEMPLATE_ACTIVITY_MODEL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST set END_DATE_HIST = @curr_date where TASK_TEMPLATE_ACTIVITY_MODEL_ID in (select TASK_TEMPLATE_ACTIVITY_MODEL_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST ([TASK_TEMPLATE_ACTIVITY_MODEL_ID], [TASK_TEMPLATE_ID], [ACTIVITY_MODEL_ID], [IS_MANDATORY], [IMPLEMENTATION_ORDER], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [TASK_TEMPLATE_ACTIVITY_MODEL_ID], [TASK_TEMPLATE_ID], [ACTIVITY_MODEL_ID], [IS_MANDATORY], [IMPLEMENTATION_ORDER], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_H_ID_SEQ]) as [_TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.D13_I_S_I_TR
PRINT N'Create trigger dbo.D13_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[D13_I_S_I_TR] ON PIMS_DISTRICT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_DISTRICT ("DISTRICT_CODE",
      "REGION_CODE",
      "DISTRICT_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISTRICT_CODE",
      "REGION_CODE",
      "DISTRICT_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PST36_I_S_I_TR
PRINT N'Create trigger dbo.PST36_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PST36_I_S_I_TR] ON PIMS_PROPERTY_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_STATUS_TYPE ("PROPERTY_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.UO48_I_S_U_TR
PRINT N'Create trigger dbo.UO48_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[UO48_I_S_U_TR] ON PIMS_USER_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.USER_ORGANIZATION_ID = deleted.USER_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_USER_ORGANIZATION
    set "USER_ORGANIZATION_ID" = inserted."USER_ORGANIZATION_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER_ORGANIZATION
    inner join inserted
    on (PIMS_USER_ORGANIZATION.USER_ORGANIZATION_ID = inserted.USER_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PO18_I_S_U_TR
PRINT N'Create trigger dbo.PO18_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PO18_I_S_U_TR] ON PIMS_PERSON_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PERSON_ORGANIZATION_ID = deleted.PERSON_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PERSON_ORGANIZATION
    set "PERSON_ORGANIZATION_ID" = inserted."PERSON_ORGANIZATION_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PERSON_ORGANIZATION
    inner join inserted
    on (PIMS_PERSON_ORGANIZATION.PERSON_ORGANIZATION_ID = inserted.PERSON_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.T23_A_S_IUD_TR
PRINT N'Create trigger dbo.T23_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[T23_A_S_IUD_TR] ON PIMS_TASK FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_TASK_HIST set END_DATE_HIST = @curr_date where TASK_ID in (select TASK_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_TASK_HIST ([TASK_ID], [TASK_TEMPLATE_ID], [ACTIVITY_ID], [USER_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _TASK_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [TASK_ID], [TASK_TEMPLATE_ID], [ACTIVITY_ID], [USER_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_TASK_H_ID_SEQ]) as [_TASK_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.RC22_A_S_IUD_TR
PRINT N'Create trigger dbo.RC22_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[RC22_A_S_IUD_TR] ON PIMS_ROLE_CLAIM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ROLE_CLAIM_HIST set END_DATE_HIST = @curr_date where ROLE_CLAIM_ID in (select ROLE_CLAIM_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ROLE_CLAIM_HIST ([ROLE_CLAIM_ID], [ROLE_ID], [CLAIM_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ROLE_CLAIM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ROLE_CLAIM_ID], [ROLE_ID], [CLAIM_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ROLE_CLAIM_H_ID_SEQ]) as [_ROLE_CLAIM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.TT24_A_S_IUD_TR
PRINT N'Create trigger dbo.TT24_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[TT24_A_S_IUD_TR] ON PIMS_TASK_TEMPLATE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_TASK_TEMPLATE_HIST set END_DATE_HIST = @curr_date where TASK_TEMPLATE_ID in (select TASK_TEMPLATE_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_TASK_TEMPLATE_HIST ([TASK_TEMPLATE_ID], [TASK_TEMPLATE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _TASK_TEMPLATE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [TASK_TEMPLATE_ID], [TASK_TEMPLATE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_TASK_TEMPLATE_H_ID_SEQ]) as [_TASK_TEMPLATE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.OIT14_I_S_U_TR
PRINT N'Create trigger dbo.OIT14_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[OIT14_I_S_U_TR] ON PIMS_ORG_IDENTIFIER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORG_IDENTIFIER_TYPE_CODE = deleted.ORG_IDENTIFIER_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORG_IDENTIFIER_TYPE
    set "ORG_IDENTIFIER_TYPE_CODE" = inserted."ORG_IDENTIFIER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORG_IDENTIFIER_TYPE
    inner join inserted
    on (PIMS_ORG_IDENTIFIER_TYPE.ORG_IDENTIFIER_TYPE_CODE = inserted.ORG_IDENTIFIER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.O15_I_S_I_TR
PRINT N'Create trigger dbo.O15_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[O15_I_S_I_TR] ON PIMS_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ORGANIZATION ("ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME",
      "WEBSITE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME",
      "WEBSITE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PP21_I_S_U_TR
PRINT N'Create trigger dbo.PP21_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PP21_I_S_U_TR] ON PIMS_PROJECT_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_PROPERTY_ID = deleted.PROJECT_PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_PROPERTY
    set "PROJECT_PROPERTY_ID" = inserted."PROJECT_PROPERTY_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_PROPERTY
    inner join inserted
    on (PIMS_PROJECT_PROPERTY.PROJECT_PROPERTY_ID = inserted.PROJECT_PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PT38_I_S_I_TR
PRINT N'Create trigger dbo.PT38_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PT38_I_S_I_TR] ON PIMS_PROPERTY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_TYPE ("PROPERTY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.AM4_A_S_IUD_TR
PRINT N'Create trigger dbo.AM4_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[AM4_A_S_IUD_TR] ON PIMS_ACTIVITY_MODEL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_MODEL_HIST set END_DATE_HIST = @curr_date where ACTIVITY_MODEL_ID in (select ACTIVITY_MODEL_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_MODEL_HIST ([ACTIVITY_MODEL_ID], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_MODEL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_MODEL_ID], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_MODEL_H_ID_SEQ]) as [_ACTIVITY_MODEL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PSF34_I_S_U_TR
PRINT N'Create trigger dbo.PSF34_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PSF34_I_S_U_TR] ON PIMS_PROPERTY_SERVICE_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_SERVICE_FILE_ID = deleted.PROPERTY_SERVICE_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_SERVICE_FILE
    set "PROPERTY_SERVICE_FILE_ID" = inserted."PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_SERVICE_FILE_TYPE_CODE" = inserted."PROPERTY_SERVICE_FILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_SERVICE_FILE
    inner join inserted
    on (PIMS_PROPERTY_SERVICE_FILE.PROPERTY_SERVICE_FILE_ID = inserted.PROPERTY_SERVICE_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.A5_A_S_IUD_TR
PRINT N'Create trigger dbo.A5_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[A5_A_S_IUD_TR] ON PIMS_ADDRESS FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ADDRESS_HIST set END_DATE_HIST = @curr_date where ADDRESS_ID in (select ADDRESS_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ADDRESS_HIST ([ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [REGION_CODE], [DISTRICT_CODE], [PROVINCE_STATE_ID], [COUNTRY_ID], [STREET_ADDRESS_1], [STREET_ADDRESS_2], [STREET_ADDRESS_3], [MUNICIPALITY_NAME], [POSTAL_CODE], [LATITUDE], [LONGITUDE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ADDRESS_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [REGION_CODE], [DISTRICT_CODE], [PROVINCE_STATE_ID], [COUNTRY_ID], [STREET_ADDRESS_1], [STREET_ADDRESS_2], [STREET_ADDRESS_3], [MUNICIPALITY_NAME], [POSTAL_CODE], [LATITUDE], [LONGITUDE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ADDRESS_H_ID_SEQ]) as [_ADDRESS_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.A4_I_S_U_TR
PRINT N'Create trigger dbo.A4_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[A4_I_S_U_TR] ON PIMS_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_ID = deleted.ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY
    set "ACTIVITY_ID" = inserted."ACTIVITY_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "WORKFLOW_ID" = inserted."WORKFLOW_ID",
      "ACTIVITY_MODEL_ID" = inserted."ACTIVITY_MODEL_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY
    inner join inserted
    on (PIMS_ACTIVITY.ACTIVITY_ID = inserted.ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.CMT11_I_S_I_TR
PRINT N'Create trigger dbo.CMT11_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[CMT11_I_S_I_TR] ON PIMS_CONTACT_METHOD_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_CONTACT_METHOD_TYPE ("CONTACT_METHOD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "CONTACT_METHOD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.ARST3_I_S_U_TR
PRINT N'Create trigger dbo.ARST3_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[ARST3_I_S_U_TR] ON PIMS_ACCESS_REQUEST_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACCESS_REQUEST_STATUS_TYPE_CODE = deleted.ACCESS_REQUEST_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACCESS_REQUEST_STATUS_TYPE
    set "ACCESS_REQUEST_STATUS_TYPE_CODE" = inserted."ACCESS_REQUEST_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST_STATUS_TYPE
    inner join inserted
    on (PIMS_ACCESS_REQUEST_STATUS_TYPE.ACCESS_REQUEST_STATUS_TYPE_CODE = inserted.ACCESS_REQUEST_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PA28_I_S_I_TR
PRINT N'Create trigger dbo.PA28_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PA28_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_ACTIVITY ("PROPERTY_ACTIVITY_ID",
      "ACTIVITY_ID",
      "PROPERTY_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACTIVITY_ID",
      "ACTIVITY_ID",
      "PROPERTY_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PCT29_I_S_U_TR
PRINT N'Create trigger dbo.PCT29_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PCT29_I_S_U_TR] ON PIMS_PROPERTY_CLASSIFICATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_CLASSIFICATION_TYPE_CODE = deleted.PROPERTY_CLASSIFICATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_CLASSIFICATION_TYPE
    set "PROPERTY_CLASSIFICATION_TYPE_CODE" = inserted."PROPERTY_CLASSIFICATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_CLASSIFICATION_TYPE
    inner join inserted
    on (PIMS_PROPERTY_CLASSIFICATION_TYPE.PROPERTY_CLASSIFICATION_TYPE_CODE = inserted.PROPERTY_CLASSIFICATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PT25_I_S_U_TR
PRINT N'Create trigger dbo.PT25_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PT25_I_S_U_TR] ON PIMS_PROJECT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_TYPE_CODE = deleted.PROJECT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_TYPE
    set "PROJECT_TYPE_CODE" = inserted."PROJECT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_TYPE
    inner join inserted
    on (PIMS_PROJECT_TYPE.PROJECT_TYPE_CODE = inserted.PROJECT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PN20_I_S_U_TR
PRINT N'Create trigger dbo.PN20_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PN20_I_S_U_TR] ON PIMS_PROJECT_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_NOTE_ID = deleted.PROJECT_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_NOTE
    set "PROJECT_NOTE_ID" = inserted."PROJECT_NOTE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_NOTE
    inner join inserted
    on (PIMS_PROJECT_NOTE.PROJECT_NOTE_ID = inserted.PROJECT_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.RC42_I_S_I_TR
PRINT N'Create trigger dbo.RC42_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[RC42_I_S_I_TR] ON PIMS_ROLE_CLAIM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ROLE_CLAIM ("ROLE_CLAIM_ID",
      "ROLE_ID",
      "CLAIM_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ROLE_CLAIM_ID",
      "ROLE_ID",
      "CLAIM_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.D13_I_S_U_TR
PRINT N'Create trigger dbo.D13_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[D13_I_S_U_TR] ON PIMS_DISTRICT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISTRICT_CODE = deleted.DISTRICT_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISTRICT
    set "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_NAME" = inserted."DISTRICT_NAME",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISTRICT
    inner join inserted
    on (PIMS_DISTRICT.DISTRICT_CODE = inserted.DISTRICT_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.TTAM45_I_S_U_TR
PRINT N'Create trigger dbo.TTAM45_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[TTAM45_I_S_U_TR] ON PIMS_TASK_TEMPLATE_ACTIVITY_MODEL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TASK_TEMPLATE_ACTIVITY_MODEL_ID = deleted.TASK_TEMPLATE_ACTIVITY_MODEL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TASK_TEMPLATE_ACTIVITY_MODEL
    set "TASK_TEMPLATE_ACTIVITY_MODEL_ID" = inserted."TASK_TEMPLATE_ACTIVITY_MODEL_ID",
      "TASK_TEMPLATE_ID" = inserted."TASK_TEMPLATE_ID",
      "ACTIVITY_MODEL_ID" = inserted."ACTIVITY_MODEL_ID",
      "IS_MANDATORY" = inserted."IS_MANDATORY",
      "IMPLEMENTATION_ORDER" = inserted."IMPLEMENTATION_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TASK_TEMPLATE_ACTIVITY_MODEL
    inner join inserted
    on (PIMS_TASK_TEMPLATE_ACTIVITY_MODEL.TASK_TEMPLATE_ACTIVITY_MODEL_ID = inserted.TASK_TEMPLATE_ACTIVITY_MODEL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.ARO2_I_S_I_TR
PRINT N'Create trigger dbo.ARO2_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[ARO2_I_S_I_TR] ON PIMS_ACCESS_REQUEST_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ACCESS_REQUEST_ORGANIZATION ("ACCESS_REQUEST_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "ACCESS_REQUEST_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACCESS_REQUEST_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "ACCESS_REQUEST_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.CM10_I_S_U_TR
PRINT N'Create trigger dbo.CM10_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[CM10_I_S_U_TR] ON PIMS_CONTACT_METHOD INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONTACT_METHOD_ID = deleted.CONTACT_METHOD_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONTACT_METHOD
    set "CONTACT_METHOD_ID" = inserted."CONTACT_METHOD_ID",
      "CONTACT_METHOD_TYPE_CODE" = inserted."CONTACT_METHOD_TYPE_CODE",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONTACT_METHOD_VALUE" = inserted."CONTACT_METHOD_VALUE",
      "IS_PREFERRED_METHOD" = inserted."IS_PREFERRED_METHOD",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONTACT_METHOD
    inner join inserted
    on (PIMS_CONTACT_METHOD.CONTACT_METHOD_ID = inserted.CONTACT_METHOD_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PSFT35_I_S_U_TR
PRINT N'Create trigger dbo.PSFT35_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PSFT35_I_S_U_TR] ON PIMS_PROPERTY_SERVICE_FILE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_SERVICE_FILE_TYPE_CODE = deleted.PROPERTY_SERVICE_FILE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_SERVICE_FILE_TYPE
    set "PROPERTY_SERVICE_FILE_TYPE_CODE" = inserted."PROPERTY_SERVICE_FILE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_SERVICE_FILE_TYPE
    inner join inserted
    on (PIMS_PROPERTY_SERVICE_FILE_TYPE.PROPERTY_SERVICE_FILE_TYPE_CODE = inserted.PROPERTY_SERVICE_FILE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PP13_A_S_IUD_TR
PRINT N'Create trigger dbo.PP13_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PP13_A_S_IUD_TR] ON PIMS_PROJECT_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_PROPERTY_HIST set END_DATE_HIST = @curr_date where PROJECT_PROPERTY_ID in (select PROJECT_PROPERTY_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_PROPERTY_HIST ([PROJECT_PROPERTY_ID], [PROJECT_ID], [PROPERTY_ID], [IS_DISABLED], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_PROPERTY_ID], [PROJECT_ID], [PROPERTY_ID], [IS_DISABLED], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_PROPERTY_H_ID_SEQ]) as [_PROJECT_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.C9_I_S_U_TR
PRINT N'Create trigger dbo.C9_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[C9_I_S_U_TR] ON PIMS_CLAIM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CLAIM_ID = deleted.CLAIM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CLAIM
    set "CLAIM_ID" = inserted."CLAIM_ID",
      "CLAIM_UID" = inserted."CLAIM_UID",
      "KEYCLOAK_ROLE_ID" = inserted."KEYCLOAK_ROLE_ID",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CLAIM
    inner join inserted
    on (PIMS_CLAIM.CLAIM_ID = inserted.CLAIM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PPSF33_I_S_U_TR
PRINT N'Create trigger dbo.PPSF33_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PPSF33_I_S_U_TR] ON PIMS_PROPERTY_PROPERTY_SERVICE_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_PROPERTY_SERVICE_FILE_ID = deleted.PROPERTY_PROPERTY_SERVICE_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_PROPERTY_SERVICE_FILE
    set "PROPERTY_PROPERTY_SERVICE_FILE_ID" = inserted."PROPERTY_PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_SERVICE_FILE_ID" = inserted."PROPERTY_SERVICE_FILE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_PROPERTY_SERVICE_FILE
    inner join inserted
    on (PIMS_PROPERTY_PROPERTY_SERVICE_FILE.PROPERTY_PROPERTY_SERVICE_FILE_ID = inserted.PROPERTY_PROPERTY_SERVICE_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PT38_I_S_U_TR
PRINT N'Create trigger dbo.PT38_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PT38_I_S_U_TR] ON PIMS_PROPERTY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_TYPE_CODE = deleted.PROPERTY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_TYPE
    set "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_TYPE
    inner join inserted
    on (PIMS_PROPERTY_TYPE.PROPERTY_TYPE_CODE = inserted.PROPERTY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.UR49_I_S_U_TR
PRINT N'Create trigger dbo.UR49_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[UR49_I_S_U_TR] ON PIMS_USER_ROLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.USER_ROLE_ID = deleted.USER_ROLE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_USER_ROLE
    set "USER_ROLE_ID" = inserted."USER_ROLE_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER_ROLE
    inner join inserted
    on (PIMS_USER_ROLE.USER_ROLE_ID = inserted.USER_ROLE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.R41_I_S_U_TR
PRINT N'Create trigger dbo.R41_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[R41_I_S_U_TR] ON PIMS_ROLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ROLE_ID = deleted.ROLE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ROLE
    set "ROLE_ID" = inserted."ROLE_ID",
      "ROLE_UID" = inserted."ROLE_UID",
      "KEYCLOAK_GROUP_ID" = inserted."KEYCLOAK_GROUP_ID",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_PUBLIC" = inserted."IS_PUBLIC",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "SORT_ORDER" = inserted."SORT_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ROLE
    inner join inserted
    on (PIMS_ROLE.ROLE_ID = inserted.ROLE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PO18_I_S_I_TR
PRINT N'Create trigger dbo.PO18_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PO18_I_S_I_TR] ON PIMS_PERSON_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PERSON_ORGANIZATION ("PERSON_ORGANIZATION_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PERSON_ORGANIZATION_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.WMT51_I_S_I_TR
PRINT N'Create trigger dbo.WMT51_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[WMT51_I_S_I_TR] ON PIMS_WORKFLOW_MODEL_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_WORKFLOW_MODEL_TYPE ("WORKFLOW_MODEL_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "WORKFLOW_MODEL_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PDST30_I_S_U_TR
PRINT N'Create trigger dbo.PDST30_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PDST30_I_S_U_TR] ON PIMS_PROPERTY_DATA_SOURCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_DATA_SOURCE_TYPE_CODE = deleted.PROPERTY_DATA_SOURCE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_DATA_SOURCE_TYPE
    set "PROPERTY_DATA_SOURCE_TYPE_CODE" = inserted."PROPERTY_DATA_SOURCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_DATA_SOURCE_TYPE
    inner join inserted
    on (PIMS_PROPERTY_DATA_SOURCE_TYPE.PROPERTY_DATA_SOURCE_TYPE_CODE = inserted.PROPERTY_DATA_SOURCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.C6_A_S_IUD_TR
PRINT N'Create trigger dbo.C6_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[C6_A_S_IUD_TR] ON PIMS_CLAIM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_CLAIM_HIST set END_DATE_HIST = @curr_date where CLAIM_ID in (select CLAIM_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_CLAIM_HIST ([CLAIM_ID], [CLAIM_UID], [KEYCLOAK_ROLE_ID], [NAME], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _CLAIM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [CLAIM_ID], [CLAIM_UID], [KEYCLOAK_ROLE_ID], [NAME], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_CLAIM_H_ID_SEQ]) as [_CLAIM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PS39_I_S_U_TR
PRINT N'Create trigger dbo.PS39_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PS39_I_S_U_TR] ON PIMS_PROVINCE_STATE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROVINCE_STATE_ID = deleted.PROVINCE_STATE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROVINCE_STATE
    set "PROVINCE_STATE_ID" = inserted."PROVINCE_STATE_ID",
      "COUNTRY_ID" = inserted."COUNTRY_ID",
      "PROVINCE_STATE_CODE" = inserted."PROVINCE_STATE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROVINCE_STATE
    inner join inserted
    on (PIMS_PROVINCE_STATE.PROVINCE_STATE_ID = inserted.PROVINCE_STATE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.AUT8_I_S_U_TR
PRINT N'Create trigger dbo.AUT8_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[AUT8_I_S_U_TR] ON PIMS_AREA_UNIT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.AREA_UNIT_TYPE_CODE = deleted.AREA_UNIT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_AREA_UNIT_TYPE
    set "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_AREA_UNIT_TYPE
    inner join inserted
    on (PIMS_AREA_UNIT_TYPE.AREA_UNIT_TYPE_CODE = inserted.AREA_UNIT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.P9_A_S_IUD_TR
PRINT N'Create trigger dbo.P9_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[P9_A_S_IUD_TR] ON PIMS_PERSON FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PERSON_HIST set END_DATE_HIST = @curr_date where PERSON_ID in (select PERSON_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PERSON_HIST ([PERSON_ID], [ADDRESS_ID], [SURNAME], [FIRST_NAME], [MIDDLE_NAMES], [NAME_SUFFIX], [BIRTH_DATE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PERSON_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PERSON_ID], [ADDRESS_ID], [SURNAME], [FIRST_NAME], [MIDDLE_NAMES], [NAME_SUFFIX], [BIRTH_DATE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PERSON_H_ID_SEQ]) as [_PERSON_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.TTT46_I_S_I_TR
PRINT N'Create trigger dbo.TTT46_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[TTT46_I_S_I_TR] ON PIMS_TASK_TEMPLATE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_TASK_TEMPLATE_TYPE ("TASK_TEMPLATE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TASK_TEMPLATE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.P27_I_S_U_TR
PRINT N'Create trigger dbo.P27_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[P27_I_S_U_TR] ON PIMS_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ID = deleted.PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY
    set "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE" = inserted."PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROPERTY_TENURE_TYPE_CODE" = inserted."PROPERTY_TENURE_TYPE_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE" = inserted."PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE" = inserted."PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE" = inserted."PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "PID" = inserted."PID",
      "PIN" = inserted."PIN",
      "LAND_AREA" = inserted."LAND_AREA",
      "LAND_LEGAL_DESCRIPTION" = inserted."LAND_LEGAL_DESCRIPTION",
      "BOUNDARY" = inserted."BOUNDARY",
      "LOCATION" = inserted."LOCATION",
      "ENCUMBRANCE_REASON" = inserted."ENCUMBRANCE_REASON",
      "IS_OWNED" = inserted."IS_OWNED",
      "IS_PROPERTY_OF_INTEREST" = inserted."IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES" = inserted."IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE" = inserted."IS_SENSITIVE",
      "ZONING" = inserted."ZONING",
      "ZONING_POTENTIAL" = inserted."ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY
    inner join inserted
    on (PIMS_PROPERTY.PROPERTY_ID = inserted.PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.A6_I_S_U_TR
PRINT N'Create trigger dbo.A6_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[A6_I_S_U_TR] ON PIMS_ADDRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ADDRESS_ID = deleted.ADDRESS_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ADDRESS
    set "ADDRESS_ID" = inserted."ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE" = inserted."ADDRESS_USAGE_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROVINCE_STATE_ID" = inserted."PROVINCE_STATE_ID",
      "COUNTRY_ID" = inserted."COUNTRY_ID",
      "STREET_ADDRESS_1" = inserted."STREET_ADDRESS_1",
      "STREET_ADDRESS_2" = inserted."STREET_ADDRESS_2",
      "STREET_ADDRESS_3" = inserted."STREET_ADDRESS_3",
      "MUNICIPALITY_NAME" = inserted."MUNICIPALITY_NAME",
      "POSTAL_CODE" = inserted."POSTAL_CODE",
      "LATITUDE" = inserted."LATITUDE",
      "LONGITUDE" = inserted."LONGITUDE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ADDRESS
    inner join inserted
    on (PIMS_ADDRESS.ADDRESS_ID = inserted.ADDRESS_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PA28_I_S_U_TR
PRINT N'Create trigger dbo.PA28_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PA28_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACTIVITY_ID = deleted.PROPERTY_ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY
    set "PROPERTY_ACTIVITY_ID" = inserted."PROPERTY_ACTIVITY_ID",
      "ACTIVITY_ID" = inserted."ACTIVITY_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY.PROPERTY_ACTIVITY_ID = inserted.PROPERTY_ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.UO27_A_S_IUD_TR
PRINT N'Create trigger dbo.UO27_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[UO27_A_S_IUD_TR] ON PIMS_USER_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_USER_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where USER_ORGANIZATION_ID in (select USER_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_USER_ORGANIZATION_HIST ([USER_ORGANIZATION_ID], [ORGANIZATION_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _USER_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ORGANIZATION_ID], [ORGANIZATION_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_USER_ORGANIZATION_H_ID_SEQ]) as [_USER_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PE31_I_S_U_TR
PRINT N'Create trigger dbo.PE31_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PE31_I_S_U_TR] ON PIMS_PROPERTY_EVALUATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_EVALUATION_ID = deleted.PROPERTY_EVALUATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_EVALUATION
    set "PROPERTY_EVALUATION_ID" = inserted."PROPERTY_EVALUATION_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "EVALUATION_DATE" = inserted."EVALUATION_DATE",
      "KEY" = inserted."KEY",
      "VALUE" = inserted."VALUE",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_EVALUATION
    inner join inserted
    on (PIMS_PROPERTY_EVALUATION.PROPERTY_EVALUATION_ID = inserted.PROPERTY_EVALUATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.CMT11_I_S_U_TR
PRINT N'Create trigger dbo.CMT11_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[CMT11_I_S_U_TR] ON PIMS_CONTACT_METHOD_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONTACT_METHOD_TYPE_CODE = deleted.CONTACT_METHOD_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONTACT_METHOD_TYPE
    set "CONTACT_METHOD_TYPE_CODE" = inserted."CONTACT_METHOD_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONTACT_METHOD_TYPE
    inner join inserted
    on (PIMS_CONTACT_METHOD_TYPE.CONTACT_METHOD_TYPE_CODE = inserted.CONTACT_METHOD_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.U47_I_S_U_TR
PRINT N'Create trigger dbo.U47_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[U47_I_S_U_TR] ON PIMS_USER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.USER_ID = deleted.USER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_USER
    set "USER_ID" = inserted."USER_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "BUSINESS_IDENTIFIER_VALUE" = inserted."BUSINESS_IDENTIFIER_VALUE",
      "GUID_IDENTIFIER_VALUE" = inserted."GUID_IDENTIFIER_VALUE",
      "POSITION" = inserted."POSITION",
      "NOTE" = inserted."NOTE",
      "LAST_LOGIN" = inserted."LAST_LOGIN",
      "APPROVED_BY_ID" = inserted."APPROVED_BY_ID",
      "ISSUE_DATE" = inserted."ISSUE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER
    inner join inserted
    on (PIMS_USER.USER_ID = inserted.USER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PA16_A_S_IUD_TR
PRINT N'Create trigger dbo.PA16_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PA16_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACTIVITY_ID in (select PROPERTY_ACTIVITY_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_HIST ([PROPERTY_ACTIVITY_ID], [ACTIVITY_ID], [PROPERTY_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACTIVITY_ID], [ACTIVITY_ID], [PROPERTY_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.U47_I_S_I_TR
PRINT N'Create trigger dbo.U47_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[U47_I_S_I_TR] ON PIMS_USER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_USER ("USER_ID",
      "PERSON_ID",
      "BUSINESS_IDENTIFIER_VALUE",
      "GUID_IDENTIFIER_VALUE",
      "POSITION",
      "NOTE",
      "LAST_LOGIN",
      "APPROVED_BY_ID",
      "ISSUE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "USER_ID",
      "PERSON_ID",
      "BUSINESS_IDENTIFIER_VALUE",
      "GUID_IDENTIFIER_VALUE",
      "POSITION",
      "NOTE",
      "LAST_LOGIN",
      "APPROVED_BY_ID",
      "ISSUE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PDST30_I_S_I_TR
PRINT N'Create trigger dbo.PDST30_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PDST30_I_S_I_TR] ON PIMS_PROPERTY_DATA_SOURCE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_DATA_SOURCE_TYPE ("PROPERTY_DATA_SOURCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.AUT7_I_S_I_TR
PRINT N'Create trigger dbo.AUT7_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[AUT7_I_S_I_TR] ON PIMS_ADDRESS_USAGE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ADDRESS_USAGE_TYPE ("ADDRESS_USAGE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ADDRESS_USAGE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.P17_I_S_U_TR
PRINT N'Create trigger dbo.P17_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[P17_I_S_U_TR] ON PIMS_PERSON INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PERSON_ID = deleted.PERSON_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PERSON
    set "PERSON_ID" = inserted."PERSON_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "SURNAME" = inserted."SURNAME",
      "FIRST_NAME" = inserted."FIRST_NAME",
      "MIDDLE_NAMES" = inserted."MIDDLE_NAMES",
      "NAME_SUFFIX" = inserted."NAME_SUFFIX",
      "BIRTH_DATE" = inserted."BIRTH_DATE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PERSON
    inner join inserted
    on (PIMS_PERSON.PERSON_ID = inserted.PERSON_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PWM14_A_S_IUD_TR
PRINT N'Create trigger dbo.PWM14_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PWM14_A_S_IUD_TR] ON PIMS_PROJECT_WORKFLOW_MODEL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_WORKFLOW_MODEL_HIST set END_DATE_HIST = @curr_date where PROJECT_WORKFLOW_MODEL_ID in (select PROJECT_WORKFLOW_MODEL_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_WORKFLOW_MODEL_HIST ([PROJECT_WORKFLOW_MODEL_ID], [PROJECT_ID], [WORKFLOW_MODEL_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_WORKFLOW_MODEL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_WORKFLOW_MODEL_ID], [PROJECT_ID], [WORKFLOW_MODEL_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_H_ID_SEQ]) as [_PROJECT_WORKFLOW_MODEL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.ARO2_I_S_U_TR
PRINT N'Create trigger dbo.ARO2_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[ARO2_I_S_U_TR] ON PIMS_ACCESS_REQUEST_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACCESS_REQUEST_ORGANIZATION_ID = deleted.ACCESS_REQUEST_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACCESS_REQUEST_ORGANIZATION
    set "ACCESS_REQUEST_ORGANIZATION_ID" = inserted."ACCESS_REQUEST_ORGANIZATION_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "ACCESS_REQUEST_ID" = inserted."ACCESS_REQUEST_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST_ORGANIZATION
    inner join inserted
    on (PIMS_ACCESS_REQUEST_ORGANIZATION.ACCESS_REQUEST_ORGANIZATION_ID = inserted.ACCESS_REQUEST_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.P15_A_S_IUD_TR
PRINT N'Create trigger dbo.P15_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[P15_A_S_IUD_TR] ON PIMS_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_HIST set END_DATE_HIST = @curr_date where PROPERTY_ID in (select PROPERTY_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_HIST ([PROPERTY_ID], [PROPERTY_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_TENURE_TYPE_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [NAME], [DESCRIPTION], [PID], [PIN], [LAND_AREA], [ENCUMBRANCE_REASON], [IS_OWNED], [IS_PROPERTY_OF_INTEREST], [IS_VISIBLE_TO_OTHER_AGENCIES], [IS_SENSITIVE], [ZONING], [ZONING_POTENTIAL], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ID], [PROPERTY_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_TENURE_TYPE_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [NAME], [DESCRIPTION], [PID], [PIN], [LAND_AREA], [ENCUMBRANCE_REASON], [IS_OWNED], [IS_PROPERTY_OF_INTEREST], [IS_VISIBLE_TO_OTHER_AGENCIES], [IS_SENSITIVE], [ZONING], [ZONING_POTENTIAL], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_H_ID_SEQ]) as [_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PN20_I_S_I_TR
PRINT N'Create trigger dbo.PN20_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PN20_I_S_I_TR] ON PIMS_PROJECT_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROJECT_NOTE ("PROJECT_NOTE_ID",
      "PROJECT_ID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_NOTE_ID",
      "PROJECT_ID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PSFT35_I_S_I_TR
PRINT N'Create trigger dbo.PSFT35_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PSFT35_I_S_I_TR] ON PIMS_PROPERTY_SERVICE_FILE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_PROPERTY_SERVICE_FILE_TYPE ("PROPERTY_SERVICE_FILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_SERVICE_FILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.R41_I_S_I_TR
PRINT N'Create trigger dbo.R41_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[R41_I_S_I_TR] ON PIMS_ROLE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ROLE ("ROLE_ID",
      "ROLE_UID",
      "KEYCLOAK_GROUP_ID",
      "NAME",
      "DESCRIPTION",
      "IS_PUBLIC",
      "IS_DISABLED",
      "SORT_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ROLE_ID",
      "ROLE_UID",
      "KEYCLOAK_GROUP_ID",
      "NAME",
      "DESCRIPTION",
      "IS_PUBLIC",
      "IS_DISABLED",
      "SORT_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PTT37_I_S_U_TR
PRINT N'Create trigger dbo.PTT37_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PTT37_I_S_U_TR] ON PIMS_PROPERTY_TENURE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_TENURE_TYPE_CODE = deleted.PROPERTY_TENURE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_TENURE_TYPE
    set "PROPERTY_TENURE_TYPE_CODE" = inserted."PROPERTY_TENURE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_TENURE_TYPE
    inner join inserted
    on (PIMS_PROPERTY_TENURE_TYPE.PROPERTY_TENURE_TYPE_CODE = inserted.PROPERTY_TENURE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.O15_I_S_U_TR
PRINT N'Create trigger dbo.O15_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[O15_I_S_U_TR] ON PIMS_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORGANIZATION_ID = deleted.ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORGANIZATION
    set "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID" = inserted."PRNT_ORGANIZATION_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE" = inserted."ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE" = inserted."ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER" = inserted."ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME" = inserted."ORGANIZATION_NAME",
      "WEBSITE" = inserted."WEBSITE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION
    inner join inserted
    on (PIMS_ORGANIZATION.ORGANIZATION_ID = inserted.ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.TTT46_I_S_U_TR
PRINT N'Create trigger dbo.TTT46_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[TTT46_I_S_U_TR] ON PIMS_TASK_TEMPLATE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TASK_TEMPLATE_TYPE_CODE = deleted.TASK_TEMPLATE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TASK_TEMPLATE_TYPE
    set "TASK_TEMPLATE_TYPE_CODE" = inserted."TASK_TEMPLATE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TASK_TEMPLATE_TYPE
    inner join inserted
    on (PIMS_TASK_TEMPLATE_TYPE.TASK_TEMPLATE_TYPE_CODE = inserted.TASK_TEMPLATE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.R21_A_S_IUD_TR
PRINT N'Create trigger dbo.R21_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[R21_A_S_IUD_TR] ON PIMS_ROLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ROLE_HIST set END_DATE_HIST = @curr_date where ROLE_ID in (select ROLE_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ROLE_HIST ([ROLE_ID], [ROLE_UID], [KEYCLOAK_GROUP_ID], [NAME], [DESCRIPTION], [IS_PUBLIC], [IS_DISABLED], [SORT_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ROLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ROLE_ID], [ROLE_UID], [KEYCLOAK_GROUP_ID], [NAME], [DESCRIPTION], [IS_PUBLIC], [IS_DISABLED], [SORT_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ROLE_H_ID_SEQ]) as [_ROLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.WMT51_I_S_U_TR
PRINT N'Create trigger dbo.WMT51_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[WMT51_I_S_U_TR] ON PIMS_WORKFLOW_MODEL_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.WORKFLOW_MODEL_TYPE_CODE = deleted.WORKFLOW_MODEL_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_WORKFLOW_MODEL_TYPE
    set "WORKFLOW_MODEL_TYPE_CODE" = inserted."WORKFLOW_MODEL_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_WORKFLOW_MODEL_TYPE
    inner join inserted
    on (PIMS_WORKFLOW_MODEL_TYPE.WORKFLOW_MODEL_TYPE_CODE = inserted.WORKFLOW_MODEL_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.P11_A_S_IUD_TR
PRINT N'Create trigger dbo.P11_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[P11_A_S_IUD_TR] ON PIMS_PROJECT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_HIST set END_DATE_HIST = @curr_date where PROJECT_ID in (select PROJECT_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_HIST ([PROJECT_ID], [PROJECT_TYPE_CODE], [PROJECT_STATUS_TYPE_CODE], [PROJECT_RISK_TYPE_CODE], [PROJECT_TIER_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_ID], [PROJECT_TYPE_CODE], [PROJECT_STATUS_TYPE_CODE], [PROJECT_RISK_TYPE_CODE], [PROJECT_TIER_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_H_ID_SEQ]) as [_PROJECT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.ARO2_A_S_IUD_TR
PRINT N'Create trigger dbo.ARO2_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[ARO2_A_S_IUD_TR] ON PIMS_ACCESS_REQUEST_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACCESS_REQUEST_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where ACCESS_REQUEST_ORGANIZATION_ID in (select ACCESS_REQUEST_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;

  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACCESS_REQUEST_ORGANIZATION_HIST ([ACCESS_REQUEST_ORGANIZATION_ID], [ORGANIZATION_ID], [ACCESS_REQUEST_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACCESS_REQUEST_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACCESS_REQUEST_ORGANIZATION_ID], [ORGANIZATION_ID], [ACCESS_REQUEST_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ]) as [_ACCESS_REQUEST_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.CM10_I_S_I_TR
PRINT N'Create trigger dbo.CM10_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[CM10_I_S_I_TR] ON PIMS_CONTACT_METHOD INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_CONTACT_METHOD ("CONTACT_METHOD_ID",
      "CONTACT_METHOD_TYPE_CODE",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONTACT_METHOD_VALUE",
      "IS_PREFERRED_METHOD",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "CONTACT_METHOD_ID",
      "CONTACT_METHOD_TYPE_CODE",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONTACT_METHOD_VALUE",
      "IS_PREFERRED_METHOD",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PTT24_I_S_U_TR
PRINT N'Create trigger dbo.PTT24_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PTT24_I_S_U_TR] ON PIMS_PROJECT_TIER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted)
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_TIER_TYPE_CODE = deleted.PROJECT_TIER_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_TIER_TYPE
    set "PROJECT_TIER_TYPE_CODE" = inserted."PROJECT_TIER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_TIER_TYPE
    inner join inserted
    on (PIMS_PROJECT_TIER_TYPE.PROJECT_TIER_TYPE_CODE = inserted.PROJECT_TIER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.OT16_I_S_I_TR
PRINT N'Create trigger dbo.OT16_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[OT16_I_S_I_TR] ON PIMS_ORGANIZATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted)
    RETURN;


  insert into PIMS_ORGANIZATION_TYPE ("ORGANIZATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ORGANIZATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROPERTY_LEASE_HIST
PRINT N'Drop table dbo.PIMS_PROPERTY_LEASE_HIST'
GO
DROP TABLE [dbo].[PIMS_PROPERTY_LEASE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROPERTY_LEASE_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROPERTY_LEASE_H_ID_SEQ'
GO
DROP SEQUENCE [dbo].[PIMS_PROPERTY_LEASE_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROPERTY_LEASE_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROPERTY_LEASE_ID_SEQ'
GO
DROP SEQUENCE [dbo].[PIMS_PROPERTY_LEASE_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_ACTIVITY_HIST
PRINT N'Drop table dbo.PIMS_LEASE_ACTIVITY_HIST'
GO
DROP TABLE [dbo].[PIMS_LEASE_ACTIVITY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_LEASE_ACTIVITY_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_LEASE_ACTIVITY_H_ID_SEQ'
GO
DROP SEQUENCE [dbo].[PIMS_LEASE_ACTIVITY_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_ACTIVITY_PERIOD_HIST
PRINT N'Drop table dbo.PIMS_LEASE_ACTIVITY_PERIOD_HIST'
GO
DROP TABLE [dbo].[PIMS_LEASE_ACTIVITY_PERIOD_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_LEASE_ACTIVITY_PERIOD_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_LEASE_ACTIVITY_PERIOD_H_ID_SEQ'
GO
DROP SEQUENCE [dbo].[PIMS_LEASE_ACTIVITY_PERIOD_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_TYPE
PRINT N'Drop table dbo.PIMS_LEASE_TYPE'
GO
DROP TABLE [dbo].[PIMS_LEASE_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_LEASE_ACTIVITY_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_LEASE_ACTIVITY_ID_SEQ'
GO
DROP SEQUENCE [dbo].[PIMS_LEASE_ACTIVITY_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_SUBTYPE
PRINT N'Drop table dbo.PIMS_LEASE_SUBTYPE'
GO
DROP TABLE [dbo].[PIMS_LEASE_SUBTYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_EXPECTED_AMOUNT_HIST
PRINT N'Drop table dbo.PIMS_EXPECTED_AMOUNT_HIST'
GO
DROP TABLE [dbo].[PIMS_EXPECTED_AMOUNT_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_EXPECTED_AMOUNT_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_EXPECTED_AMOUNT_H_ID_SEQ'
GO
DROP SEQUENCE [dbo].[PIMS_EXPECTED_AMOUNT_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_EXPECTED_AMOUNT_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_EXPECTED_AMOUNT_ID_SEQ'
GO
DROP SEQUENCE [dbo].[PIMS_EXPECTED_AMOUNT_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_ACTIVITY_PERIOD
PRINT N'Drop table dbo.PIMS_LEASE_ACTIVITY_PERIOD'
GO
DROP TABLE [dbo].[PIMS_LEASE_ACTIVITY_PERIOD]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_LEASE_ACTIVITY_PERIOD_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_LEASE_ACTIVITY_PERIOD_ID_SEQ'
GO
DROP SEQUENCE [dbo].[PIMS_LEASE_ACTIVITY_PERIOD_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_HIST
PRINT N'Drop table dbo.PIMS_LEASE_HIST'
GO
DROP TABLE [dbo].[PIMS_LEASE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_LEASE_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_LEASE_H_ID_SEQ'
GO
DROP SEQUENCE [dbo].[PIMS_LEASE_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_PURPOSE_SUBTYPE
PRINT N'Drop table dbo.PIMS_LEASE_PURPOSE_SUBTYPE'
GO
DROP TABLE [dbo].[PIMS_LEASE_PURPOSE_SUBTYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_PMT_FREQ_TYPE
PRINT N'Drop table dbo.PIMS_LEASE_PMT_FREQ_TYPE'
GO
DROP TABLE [dbo].[PIMS_LEASE_PMT_FREQ_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_PURPOSE_TYPE
PRINT N'Drop table dbo.PIMS_LEASE_PURPOSE_TYPE'
GO
DROP TABLE [dbo].[PIMS_LEASE_PURPOSE_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_STATUS_TYPE
PRINT N'Drop table dbo.PIMS_LEASE_STATUS_TYPE'
GO
DROP TABLE [dbo].[PIMS_LEASE_STATUS_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_PROGRAM_TYPE
PRINT N'Drop table dbo.PIMS_LEASE_PROGRAM_TYPE'
GO
DROP TABLE [dbo].[PIMS_LEASE_PROGRAM_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_LEASE_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_LEASE_ID_SEQ'
GO
DROP SEQUENCE [dbo].[PIMS_LEASE_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
