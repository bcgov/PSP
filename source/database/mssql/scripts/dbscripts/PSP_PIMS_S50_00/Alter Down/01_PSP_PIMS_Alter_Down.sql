-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Thu Mar 16 17:19:05 PDT 2023
-- Execute this script on:
-- 		PSP_PIMS_S50_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S49_02/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJPER_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRJPER_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJPER_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJPER_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRJPER_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJPER_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJPER_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRJPER_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJPER_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_PRJPER_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_PRJPER_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PERSON]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_PRJPER_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPRLT_PIM_PRJPER_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPRLT_PIM_PRJPER_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PERSON]
	DROP CONSTRAINT IF EXISTS [PIM_PRPRLT_PIM_PRJPER_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PROJCT_PIM_PRJPER_FK
PRINT N'Drop foreign key constraint dbo.PIM_PROJCT_PIM_PRJPER_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PERSON]
	DROP CONSTRAINT IF EXISTS [PIM_PROJCT_PIM_PRJPER_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK
PRINT N'Drop foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [PIM_CONSTY_PIM_LESCON_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_FRMTYP_PIM_ACQFRM_FK
PRINT N'Drop foreign key constraint dbo.PIM_FRMTYP_PIM_ACQFRM_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_FORM]
	DROP CONSTRAINT IF EXISTS [PIM_FRMTYP_PIM_ACQFRM_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_ACQFRM_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_ACQFRM_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_FORM]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_ACQFRM_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCMNT_PIM_FRMTYP_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCMNT_PIM_FRMTYP_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_TYPE]
	DROP CONSTRAINT IF EXISTS [PIM_DOCMNT_PIM_FRMTYP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRJPER_PROJECT_PERSON_ROLE_TYPE_CODE_IDX
PRINT N'Drop index dbo.PRJPER_PROJECT_PERSON_ROLE_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT_PERSON].[PRJPER_PROJECT_PERSON_ROLE_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRJPER_PROJECT_ID_IDX
PRINT N'Drop index dbo.PRJPER_PROJECT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT_PERSON].[PRJPER_PROJECT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRJPER_PERSON_ID_IDX
PRINT N'Drop index dbo.PRJPER_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT_PERSON].[PRJPER_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRLT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRLT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRLT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRLT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRLT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRLT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQOWN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQOWN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQOWN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TAKE_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_TAKE_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TAKE_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TAKE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TAKE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TAKE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CONTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_CONTYP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CONTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESCON_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LESCON_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESCON_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESCON_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LESCON_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESCON_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESCON_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LESCON_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESCON_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_CONSULTATION].[LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQOWN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQOWN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQOWN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TAKE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TAKE_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TAKE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRODCT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRODCT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRODCT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CONTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CONTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CONTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQOWN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQOWN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQOWN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQOWN_LAST_NAME_OR_CORP_NAME_1_IDX
PRINT N'Drop index dbo.ACQOWN_LAST_NAME_OR_CORP_NAME_1_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER].[ACQOWN_LAST_NAME_OR_CORP_NAME_1_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQFRM_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQFRM_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQFRM_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQFRM_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQFRM_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQFRM_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQFRM_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQFRM_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQFRM_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQFRM_FORM_TYPE_CODE_IDX
PRINT N'Drop index dbo.ACQFRM_FORM_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_FILE_FORM].[ACQFRM_FORM_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQFRM_ACQUISITION_FILE_ID_IDX
PRINT N'Drop index dbo.ACQFRM_ACQUISITION_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_FILE_FORM].[ACQFRM_ACQUISITION_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FRMTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_FRMTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FRMTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FRMTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_FRMTYP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FRMTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique index dbo.PRODCT_CODE_DESC_UK_IDX
PRINT N'Drop unique index dbo.PRODCT_CODE_DESC_UK_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PRODUCT].[PRODCT_CODE_DESC_UK_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRJPER_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRJPER_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PERSON_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRJPER_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRJPER_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRJPER_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PERSON_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRJPER_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PRJPER_PROJECT_PERSON_TUC
PRINT N'Drop unique constraint dbo.PRJPER_PROJECT_PERSON_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PERSON]
	DROP CONSTRAINT IF EXISTS [PRJPER_PROJECT_PERSON_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRJPER_PK
PRINT N'Drop primary key constraint dbo.PRJPER_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PERSON]
	DROP CONSTRAINT IF EXISTS [PRJPER_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT_PERSON
PRINT N'Drop table dbo.PIMS_PROJECT_PERSON'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT_PERSON]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRPRLT_PK
PRINT N'Drop primary key constraint dbo.PRPRLT_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PERSON_ROLE_TYPE]
	DROP CONSTRAINT IF EXISTS [PRPRLT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_CONTACT_MGR_VW
PRINT N'Drop view dbo.PIMS_CONTACT_MGR_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_CONTACT_MGR_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ACQFRM_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ACQFRM_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_FORM_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACQFRM_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ACQFRM_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ACQFRM_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_FORM_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACQFRM_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.ACQFRM_PK
PRINT N'Drop primary key constraint dbo.ACQFRM_PK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_FORM]
	DROP CONSTRAINT IF EXISTS [ACQFRM_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACQUISITION_FILE_FORM
PRINT N'Drop table dbo.PIMS_ACQUISITION_FILE_FORM'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACQUISITION_FILE_FORM]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.FRMTYP_PK
PRINT N'Drop primary key constraint dbo.FRMTYP_PK'
GO
ALTER TABLE [dbo].[PIMS_FORM_TYPE]
	DROP CONSTRAINT IF EXISTS [FRMTYP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_FORM_TYPE
PRINT N'Drop table dbo.PIMS_FORM_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_FORM_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_FORM_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_FORM_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_FORM_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_CONSULTATION_TYPE
PRINT N'Alter table dbo.PIMS_CONSULTATION_TYPE'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE]
	ADD [CONSULTATION_STATUS_TYPE_CODE] varchar(20) NOT NULL DEFAULT 'UNKNOWN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PRODUCT
PRINT N'Alter table dbo.PIMS_PRODUCT'
GO
ALTER TABLE [dbo].[PIMS_PRODUCT]
	DROP COLUMN IF EXISTS [CODE_DESC_UPPER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_OWNER
PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER'
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Entity containing information regarding an acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_ACQUISITION_OWNER.LAST_NAME_AND_CORP_NAME' , N'LAST_NAME_OR_CORP_NAME_1', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
UPDATE [dbo].[PIMS_ACQUISITION_OWNER] SET [LAST_NAME_OR_CORP_NAME_1] = ('<Empty>') WHERE [LAST_NAME_OR_CORP_NAME_1] IS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER] ALTER COLUMN [LAST_NAME_OR_CORP_NAME_1] nvarchar(300) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_ACQUISITION_OWNER.OTHER_NAME' , N'LAST_NAME_OR_CORP_NAME_2', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Optional.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'LAST_NAME_OR_CORP_NAME_2'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER]
	DROP CONSTRAINT IF EXISTS [ACQOWN_IS_ORGANIZATION_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER]
	DROP COLUMN IF EXISTS [IS_ORGANIZATION], [REGISTRATION_NUMBER], [CONTACT_EMAIL_ADDR], [CONTACT_PHONE_NUM]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_OWNER_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_ACQUISITION_OWNER_HIST.LAST_NAME_AND_CORP_NAME' , N'LAST_NAME_OR_CORP_NAME_1', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
UPDATE [dbo].[PIMS_ACQUISITION_OWNER_HIST] SET [LAST_NAME_OR_CORP_NAME_1] = '<Empty>' WHERE [LAST_NAME_OR_CORP_NAME_1] IS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST] ALTER COLUMN [LAST_NAME_OR_CORP_NAME_1] nvarchar(300) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_ACQUISITION_OWNER_HIST' 
                   AND col.NAME = 'LAST_NAME_OR_CORP_NAME_1')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST] ADD DEFAULT '<Empty>' FOR [LAST_NAME_OR_CORP_NAME_1]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_ACQUISITION_OWNER_HIST.OTHER_NAME' , N'LAST_NAME_OR_CORP_NAME_2', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_ACQUISITION_OWNER_HIST' 
                   AND col.NAME = 'IS_ORGANIZATION')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST]
	DROP COLUMN IF EXISTS [IS_ORGANIZATION], [REGISTRATION_NUMBER], [CONTACT_EMAIL_ADDR], [CONTACT_PHONE_NUM]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PRODUCT_HIST
PRINT N'Alter table dbo.PIMS_PRODUCT_HIST'
GO
ALTER TABLE [dbo].[PIMS_PRODUCT_HIST]
	DROP COLUMN IF EXISTS [CODE_DESC_UPPER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE
PRINT N'Alter table dbo.PIMS_TAKE'
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE.IS_LAND_ACT' , N'IS_SECTION_16', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE] DROP CONSTRAINT IF EXISTS [TAKE_IS_LAND_ACT_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE] ADD CONSTRAINT [TAKE_IS_SECTION_16_DEF] DEFAULT (CONVERT([bit],(0))) FOR [IS_SECTION_16]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE.LAND_ACT_AREA' , N'SECTION_16_AREA', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE.LAND_ACT_END_DT' , N'SECTION_16_END_DT', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE.IS_SURPLUS' , N'IS_SURPLUS_SEVERANCE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE] DROP CONSTRAINT IF EXISTS [TAKE_IS_SURPLUS_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE] ADD CONSTRAINT [TAKE_IS_SURPLUS_SEVERANCE_DEF] DEFAULT (CONVERT([bit],(0))) FOR [IS_SURPLUS_SEVERANCE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE.SURPLUS_AREA' , N'SURPLUS_SEVERANCE_AREA', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE]
	ADD [SRW_END_DT] date NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'End date of the statutory right-of-way.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'SRW_END_DT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE]
	DROP COLUMN IF EXISTS [LAND_ACT_DESCRIPTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CONSULTATION
PRINT N'Alter table dbo.PIMS_LEASE_CONSULTATION'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [LESCON_CONSULTATION_STATUS_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP COLUMN IF EXISTS [CONSULTATION_STATUS_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_LEASE_CONSULTATION_HIST' 
                   AND col.NAME = 'CONSULTATION_STATUS_TYPE_CODE')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CONSULTATION_HIST
PRINT N'Alter table dbo.PIMS_LEASE_CONSULTATION_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST]
	DROP COLUMN IF EXISTS [CONSULTATION_STATUS_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE_HIST
PRINT N'Alter table dbo.PIMS_TAKE_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE_HIST.IS_LAND_ACT' , N'IS_SECTION_16', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_TAKE_HIST' 
                   AND col.NAME = 'IS_SECTION_16')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_TAKE_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TABLE [dbo].[PIMS_TAKE_HIST] ADD DEFAULT CONVERT([bit],(0)) FOR [IS_SECTION_16]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE_HIST.LAND_ACT_AREA' , N'SECTION_16_AREA', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE_HIST.LAND_ACT_END_DT' , N'SECTION_16_END_DT', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE_HIST.IS_SURPLUS' , N'IS_SURPLUS_SEVERANCE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_TAKE_HIST' 
                   AND col.NAME = 'IS_SURPLUS_SEVERANCE')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_TAKE_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TABLE [dbo].[PIMS_TAKE_HIST] ADD DEFAULT CONVERT([bit],(0)) FOR [IS_SURPLUS_SEVERANCE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_TAKE_HIST.SURPLUS_AREA' , N'SURPLUS_SEVERANCE_AREA', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE_HIST]
	ADD [SRW_END_DT] date NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE_HIST]
	DROP COLUMN IF EXISTS [LAND_ACT_DESCRIPTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_CONTACT_MGR_VW
PRINT N'Create view dbo.PIMS_CONTACT_MGR_VW'
GO
CREATE VIEW [dbo].[PIMS_CONTACT_MGR_VW] AS
  SELECT CONCAT('P', PER.PERSON_ID)                                                                              AS ID
       , PER.PERSON_ID
       , ORG.ORGANIZATION_ID                                                                                     AS ORGANIZATION_ID                
       , PER.IS_DISABLED
       , TRIM(CONCAT_WS(' ', NULLIF(PER.FIRST_NAME, ''), NULLIF(PER.MIDDLE_NAMES, ''), NULLIF(PER.SURNAME, ''))) AS SUMMARY
       , PER.SURNAME
       , PER.FIRST_NAME
       , PER.MIDDLE_NAMES
       , ORG.ORGANIZATION_NAME                                                                                   AS ORGANIZATION_NAME
       , PAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1                                                                                    AS MAILING_ADDRESS
       , ADR.MUNICIPALITY_NAME
       , PRV.PROVINCE_STATE_CODE                                                                                 AS PROVINCE_STATE
       , COALESCE(PVW.WORK_EMAIL, PVW.PERSONAL_EMAIL)                                                            AS EMAIL_ADDRESS
  FROM   PIMS_PERSON              PER                                                         LEFT JOIN
         PIMS_PERSON_ADDRESS      PAD ON PAD.PERSON_ID                = PER.PERSON_ID   
                                     AND PAD.ADDRESS_USAGE_TYPE_CODE  = 'MAILING'             LEFT JOIN
         PIMS_ADDRESS             ADR ON ADR.ADDRESS_ID               = PAD.ADDRESS_ID        LEFT JOIN 
         PIMS_PROVINCE_STATE      PRV ON PRV.PROVINCE_STATE_ID        = ADR.PROVINCE_STATE_ID LEFT JOIN
         PIMS_PERSON_CONTACT_VW   PVW ON PVW.PERSON_ID                = PER.PERSON_ID         LEFT JOIN
         (SELECT   PERSON_ID
                 , MAX(ORGANIZATION_ID) AS ORGANIZATION_ID 
          FROM     PIMS_PERSON_ORGANIZATION
          GROUP BY PERSON_ID)     POR ON POR.PERSON_ID                = PER.PERSON_ID         LEFT JOIN
         PIMS_ORGANIZATION        ORG ON ORG.ORGANIZATION_ID          = POR.ORGANIZATION_ID 
  UNION
  SELECT CONCAT('O', ORG.ORGANIZATION_ID)
       , NULL
       , ORG.ORGANIZATION_ID
       , ORG.IS_DISABLED
       , ORG.ORGANIZATION_NAME
       , NULL
       , NULL                            
       , NULL                                                        
       , ORG.ORGANIZATION_NAME
       , OAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1
       , ADR.MUNICIPALITY_NAME                     
       , PRV.PROVINCE_STATE_CODE
       , CON.CONTACT_METHOD_VALUE 
  FROM   PIMS_ORGANIZATION         ORG                                                         LEFT JOIN 
         PIMS_ORGANIZATION_ADDRESS OAD ON OAD.ORGANIZATION_ID          = ORG.ORGANIZATION_ID
                                      AND OAD.ADDRESS_USAGE_TYPE_CODE  = 'MAILING'             LEFT JOIN
         PIMS_ADDRESS              ADR ON ADR.ADDRESS_ID               = OAD.ADDRESS_ID        LEFT JOIN 
         PIMS_PROVINCE_STATE       PRV ON PRV.PROVINCE_STATE_ID        = ADR.PROVINCE_STATE_ID LEFT JOIN
         PIMS_CONTACT_METHOD       CON ON CON.ORGANIZATION_ID          = ORG.ORGANIZATION_ID
                                      AND CON.CONTACT_METHOD_TYPE_CODE = 'WORKEMAIL'                                


GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.CONTYP_CONSULTATION_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.CONTYP_CONSULTATION_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [CONTYP_CONSULTATION_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_CONSULTATION_TYPE]([CONSULTATION_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique index dbo.PRODCT_CODE_DESC_UK_IDX
PRINT N'Create unique index dbo.PRODCT_CODE_DESC_UK_IDX'
GO
CREATE UNIQUE NONCLUSTERED INDEX [PRODCT_CODE_DESC_UK_IDX]
	ON [dbo].[PIMS_PRODUCT]([CODE], [DESCRIPTION])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQOWN_LAST_NAME_OR_CORP_NAME_1_IDX
PRINT N'Create index dbo.ACQOWN_LAST_NAME_OR_CORP_NAME_1_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQOWN_LAST_NAME_OR_CORP_NAME_1_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER]([LAST_NAME_OR_CORP_NAME_1])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_A_S_IUD_TR] ON PIMS_ACQUISITION_OWNER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_OWNER_HIST set END_DATE_HIST = @curr_date where ACQUISITION_OWNER_ID in (select ACQUISITION_OWNER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_OWNER_HIST ([ACQUISITION_OWNER_ID], [ACQUISITION_FILE_ID], [ADDRESS_ID], [LAST_NAME_OR_CORP_NAME_1], [LAST_NAME_OR_CORP_NAME_2], [GIVEN_NAME], [INCORPORATION_NUMBER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_OWNER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_OWNER_ID], [ACQUISITION_FILE_ID], [ADDRESS_ID], [LAST_NAME_OR_CORP_NAME_1], [LAST_NAME_OR_CORP_NAME_2], [GIVEN_NAME], [INCORPORATION_NUMBER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_OWNER_H_ID_SEQ]) as [_ACQUISITION_OWNER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CONTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CONTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CONTYP_I_S_U_TR] ON PIMS_CONSULTATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONSULTATION_TYPE_CODE = deleted.CONSULTATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONSULTATION_TYPE
    set "CONSULTATION_TYPE_CODE" = inserted."CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE" = inserted."CONSULTATION_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "OTHER_DESCRIPTION" = inserted."OTHER_DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONSULTATION_TYPE
    inner join inserted
    on (PIMS_CONSULTATION_TYPE.CONSULTATION_TYPE_CODE = inserted.CONSULTATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRODCT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRODCT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRODCT_A_S_IUD_TR] ON PIMS_PRODUCT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PRODUCT_HIST set END_DATE_HIST = @curr_date where ID in (select ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PRODUCT_HIST ([ID], [PARENT_PROJECT_ID], [CODE], [DESCRIPTION], [START_DATE], [COST_ESTIMATE], [COST_ESTIMATE_DATE], [OBJECTIVE], [SCOPE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PRODUCT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ID], [PARENT_PROJECT_ID], [CODE], [DESCRIPTION], [START_DATE], [COST_ESTIMATE], [COST_ESTIMATE_DATE], [OBJECTIVE], [SCOPE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PRODUCT_H_ID_SEQ]) as [_PRODUCT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TAKE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_TAKE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TAKE_I_S_I_TR] ON PIMS_TAKE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE ("TAKE_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "TAKE_TYPE_CODE",
      "TAKE_STATUS_TYPE_CODE",
      "TAKE_SITE_CONTAM_TYPE_CODE",
      "AREA_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_NEW_RIGHT_OF_WAY",
      "NEW_RIGHT_OF_WAY_AREA",
      "IS_STATUTORY_RIGHT_OF_WAY",
      "STATUTORY_RIGHT_OF_WAY_AREA",
      "SRW_END_DT",
      "IS_LICENSE_TO_CONSTRUCT",
      "LICENSE_TO_CONSTRUCT_AREA",
      "LTC_END_DT",
      "IS_SECTION_16",
      "SECTION_16_AREA",
      "SECTION_16_END_DT",
      "IS_SURPLUS_SEVERANCE",
      "SURPLUS_SEVERANCE_AREA",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "TAKE_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "TAKE_TYPE_CODE",
      "TAKE_STATUS_TYPE_CODE",
      "TAKE_SITE_CONTAM_TYPE_CODE",
      "AREA_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_NEW_RIGHT_OF_WAY",
      "NEW_RIGHT_OF_WAY_AREA",
      "IS_STATUTORY_RIGHT_OF_WAY",
      "STATUTORY_RIGHT_OF_WAY_AREA",
      "SRW_END_DT",
      "IS_LICENSE_TO_CONSTRUCT",
      "LICENSE_TO_CONSTRUCT_AREA",
      "LTC_END_DT",
      "IS_SECTION_16",
      "SECTION_16_AREA",
      "SECTION_16_END_DT",
      "IS_SURPLUS_SEVERANCE",
      "SURPLUS_SEVERANCE_AREA",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_I_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_OWNER ("ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID",
      "ADDRESS_ID",
      "LAST_NAME_OR_CORP_NAME_1",
      "LAST_NAME_OR_CORP_NAME_2",
      "GIVEN_NAME",
      "INCORPORATION_NUMBER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID",
      "ADDRESS_ID",
      "LAST_NAME_OR_CORP_NAME_1",
      "LAST_NAME_OR_CORP_NAME_2",
      "GIVEN_NAME",
      "INCORPORATION_NUMBER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESCON_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LESCON_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESCON_A_S_IUD_TR] ON PIMS_LEASE_CONSULTATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_CONSULTATION_HIST set END_DATE_HIST = @curr_date where LEASE_CONSULTATION_ID in (select LEASE_CONSULTATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_CONSULTATION_HIST ([LEASE_CONSULTATION_ID], [LEASE_ID], [CONSULTATION_TYPE_CODE], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED], _LEASE_CONSULTATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_CONSULTATION_ID], [LEASE_ID], [CONSULTATION_TYPE_CODE], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED], (next value for [dbo].[PIMS_LEASE_CONSULTATION_H_ID_SEQ]) as [_LEASE_CONSULTATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESCON_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LESCON_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESCON_I_S_U_TR] ON PIMS_LEASE_CONSULTATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CONSULTATION_ID = deleted.LEASE_CONSULTATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CONSULTATION
    set "LEASE_CONSULTATION_ID" = inserted."LEASE_CONSULTATION_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "CONSULTATION_TYPE_CODE" = inserted."CONSULTATION_TYPE_CODE",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "IS_DISABLED" = inserted."IS_DISABLED"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CONSULTATION
    inner join inserted
    on (PIMS_LEASE_CONSULTATION.LEASE_CONSULTATION_ID = inserted.LEASE_CONSULTATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESCON_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LESCON_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESCON_I_S_I_TR] ON PIMS_LEASE_CONSULTATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CONSULTATION ("LEASE_CONSULTATION_ID",
      "LEASE_ID",
      "CONSULTATION_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER",
      "IS_DISABLED")
    select "LEASE_CONSULTATION_ID",
      "LEASE_ID",
      "CONSULTATION_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER",
      "IS_DISABLED"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CONTYP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_CONTYP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CONTYP_I_S_I_TR] ON PIMS_CONSULTATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CONSULTATION_TYPE ("CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "OTHER_DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "OTHER_DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TAKE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TAKE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TAKE_I_S_U_TR] ON PIMS_TAKE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_ID = deleted.TAKE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE
    set "TAKE_ID" = inserted."TAKE_ID",
      "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "TAKE_TYPE_CODE" = inserted."TAKE_TYPE_CODE",
      "TAKE_STATUS_TYPE_CODE" = inserted."TAKE_STATUS_TYPE_CODE",
      "TAKE_SITE_CONTAM_TYPE_CODE" = inserted."TAKE_SITE_CONTAM_TYPE_CODE",
      "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_NEW_RIGHT_OF_WAY" = inserted."IS_NEW_RIGHT_OF_WAY",
      "NEW_RIGHT_OF_WAY_AREA" = inserted."NEW_RIGHT_OF_WAY_AREA",
      "IS_STATUTORY_RIGHT_OF_WAY" = inserted."IS_STATUTORY_RIGHT_OF_WAY",
      "STATUTORY_RIGHT_OF_WAY_AREA" = inserted."STATUTORY_RIGHT_OF_WAY_AREA",
      "SRW_END_DT" = inserted."SRW_END_DT",
      "IS_LICENSE_TO_CONSTRUCT" = inserted."IS_LICENSE_TO_CONSTRUCT",
      "LICENSE_TO_CONSTRUCT_AREA" = inserted."LICENSE_TO_CONSTRUCT_AREA",
      "LTC_END_DT" = inserted."LTC_END_DT",
      "IS_SECTION_16" = inserted."IS_SECTION_16",
      "SECTION_16_AREA" = inserted."SECTION_16_AREA",
      "SECTION_16_END_DT" = inserted."SECTION_16_END_DT",
      "IS_SURPLUS_SEVERANCE" = inserted."IS_SURPLUS_SEVERANCE",
      "SURPLUS_SEVERANCE_AREA" = inserted."SURPLUS_SEVERANCE_AREA",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE
    inner join inserted
    on (PIMS_TAKE.TAKE_ID = inserted.TAKE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TAKE_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_TAKE_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TAKE_A_S_IUD_TR] ON PIMS_TAKE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_TAKE_HIST set END_DATE_HIST = @curr_date where TAKE_ID in (select TAKE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_TAKE_HIST ([TAKE_ID], [PROPERTY_ACQUISITION_FILE_ID], [TAKE_TYPE_CODE], [TAKE_STATUS_TYPE_CODE], [TAKE_SITE_CONTAM_TYPE_CODE], [AREA_UNIT_TYPE_CODE], [DESCRIPTION], [IS_NEW_RIGHT_OF_WAY], [NEW_RIGHT_OF_WAY_AREA], [IS_STATUTORY_RIGHT_OF_WAY], [STATUTORY_RIGHT_OF_WAY_AREA], [SRW_END_DT], [IS_LICENSE_TO_CONSTRUCT], [LICENSE_TO_CONSTRUCT_AREA], [LTC_END_DT], [IS_SECTION_16], [SECTION_16_AREA], [SECTION_16_END_DT], [IS_SURPLUS_SEVERANCE], [SURPLUS_SEVERANCE_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _TAKE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [TAKE_ID], [PROPERTY_ACQUISITION_FILE_ID], [TAKE_TYPE_CODE], [TAKE_STATUS_TYPE_CODE], [TAKE_SITE_CONTAM_TYPE_CODE], [AREA_UNIT_TYPE_CODE], [DESCRIPTION], [IS_NEW_RIGHT_OF_WAY], [NEW_RIGHT_OF_WAY_AREA], [IS_STATUTORY_RIGHT_OF_WAY], [STATUTORY_RIGHT_OF_WAY_AREA], [SRW_END_DT], [IS_LICENSE_TO_CONSTRUCT], [LICENSE_TO_CONSTRUCT_AREA], [LTC_END_DT], [IS_SECTION_16], [SECTION_16_AREA], [SECTION_16_END_DT], [IS_SURPLUS_SEVERANCE], [SURPLUS_SEVERANCE_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_TAKE_H_ID_SEQ]) as [_TAKE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_U_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_OWNER_ID = deleted.ACQUISITION_OWNER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_OWNER
    set "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "LAST_NAME_OR_CORP_NAME_1" = inserted."LAST_NAME_OR_CORP_NAME_1",
      "LAST_NAME_OR_CORP_NAME_2" = inserted."LAST_NAME_OR_CORP_NAME_2",
      "GIVEN_NAME" = inserted."GIVEN_NAME",
      "INCORPORATION_NUMBER" = inserted."INCORPORATION_NUMBER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_OWNER
    inner join inserted
    on (PIMS_ACQUISITION_OWNER.ACQUISITION_OWNER_ID = inserted.ACQUISITION_OWNER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CONSTY_PIM_CONTYP_FK
PRINT N'Create foreign key constraint dbo.PIM_CONSTY_PIM_CONTYP_FK'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE]
	ADD CONSTRAINT [PIM_CONSTY_PIM_CONTYP_FK]
	FOREIGN KEY([CONSULTATION_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CONSULTATION_STATUS_TYPE]([CONSULTATION_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT_PERSON_HIST
PRINT N'Drop table dbo.PIMS_PROJECT_PERSON_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT_PERSON_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROJECT_PERSON_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROJECT_PERSON_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROJECT_PERSON_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROJECT_PERSON_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROJECT_PERSON_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROJECT_PERSON_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT_PERSON_ROLE_TYPE
PRINT N'Drop table dbo.PIMS_PROJECT_PERSON_ROLE_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT_PERSON_ROLE_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACQUISITION_FILE_FORM_HIST
PRINT N'Drop table dbo.PIMS_ACQUISITION_FILE_FORM_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACQUISITION_FILE_FORM_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACQUISITION_FILE_FORM_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACQUISITION_FILE_FORM_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACQUISITION_FILE_FORM_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACQUISITION_FILE_FORM_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACQUISITION_FILE_FORM_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACQUISITION_FILE_FORM_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
