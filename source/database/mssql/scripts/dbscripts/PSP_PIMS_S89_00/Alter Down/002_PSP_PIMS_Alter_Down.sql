-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Fri Sep 06 12:33:44 PDT 2024
-- Execute this script on:
-- 		PSP_PIMS_S89.00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S88.00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESCON_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LESCON_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESCON_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESCON_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LESCON_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESCON_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESCON_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LESCON_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESCON_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_OUTCMT_PIM_LESCON_FK
PRINT N'Drop foreign key constraint dbo.PIM_OUTCMT_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [PIM_OUTCMT_PIM_LESCON_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LESCON_CONSULTATION_OUTCOME_TYPE_CODE_IDX
PRINT N'Drop index dbo.LESCON_CONSULTATION_OUTCOME_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_CONSULTATION].[LESCON_CONSULTATION_OUTCOME_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_OUTCMT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_OUTCMT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_OUTCMT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_OUTCMT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_OUTCMT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_OUTCMT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RFLNOT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RFLNOT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RFLNOT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.OUTCMT_PK
PRINT N'Drop primary key constraint dbo.OUTCMT_PK'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_OUTCOME_TYPE]
	DROP CONSTRAINT IF EXISTS [OUTCMT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.RFLNOT_PK
PRINT N'Drop primary key constraint dbo.RFLNOT_PK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]
	DROP CONSTRAINT IF EXISTS [RFLNOT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_BOUNDARY_LITE_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_BOUNDARY_LITE_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_PROPERTY_BOUNDARY_LITE_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_LOCATION_LITE_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_LOCATION_LITE_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_PROPERTY_LOCATION_LITE_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_NOTE
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_NOTE'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE]
	ADD CONSTRAINT [RFLNOT_PK]
	PRIMARY KEY CLUSTERED ([RESEARCH_FILE_NOTE_ID], [RESEARCH_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CONSULTATION
PRINT N'Alter table dbo.PIMS_LEASE_CONSULTATION'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [LESCON_CONSULTATION_OUTCOME_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP COLUMN IF EXISTS [CONSULTATION_OUTCOME_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CONSULTATION_HIST
PRINT N'Alter table dbo.PIMS_LEASE_CONSULTATION_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST]
	DROP COLUMN IF EXISTS [CONSULTATION_OUTCOME_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLNOT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RFLNOT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RFLNOT_I_S_U_TR] ON PIMS_RESEARCH_FILE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_ID = deleted.RESEARCH_FILE_ID and inserted.RESEARCH_FILE_NOTE_ID = deleted.RESEARCH_FILE_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE_NOTE
    set "RESEARCH_FILE_NOTE_ID" = inserted."RESEARCH_FILE_NOTE_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_NOTE
    inner join inserted
    on (PIMS_RESEARCH_FILE_NOTE.RESEARCH_FILE_ID = inserted.RESEARCH_FILE_ID and PIMS_RESEARCH_FILE_NOTE.RESEARCH_FILE_NOTE_ID = inserted.RESEARCH_FILE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESCON_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LESCON_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESCON_A_S_IUD_TR] ON PIMS_LEASE_CONSULTATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_CONSULTATION_HIST set END_DATE_HIST = @curr_date where LEASE_CONSULTATION_ID in (select LEASE_CONSULTATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_CONSULTATION_HIST ([LEASE_CONSULTATION_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [CONSULTATION_TYPE_CODE], [CONSULTATION_STATUS_TYPE_CODE], [OTHER_DESCRIPTION], [REQUESTED_ON], [IS_RESPONSE_RECEIVED], [RESPONSE_RECEIVED_DATE], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_CONSULTATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_CONSULTATION_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [CONSULTATION_TYPE_CODE], [CONSULTATION_STATUS_TYPE_CODE], [OTHER_DESCRIPTION], [REQUESTED_ON], [IS_RESPONSE_RECEIVED], [RESPONSE_RECEIVED_DATE], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_CONSULTATION_H_ID_SEQ]) as [_LEASE_CONSULTATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESCON_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LESCON_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESCON_I_S_U_TR] ON PIMS_LEASE_CONSULTATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CONSULTATION_ID = deleted.LEASE_CONSULTATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CONSULTATION
    set "LEASE_CONSULTATION_ID" = inserted."LEASE_CONSULTATION_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "CONSULTATION_TYPE_CODE" = inserted."CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE" = inserted."CONSULTATION_STATUS_TYPE_CODE",
      "OTHER_DESCRIPTION" = inserted."OTHER_DESCRIPTION",
      "REQUESTED_ON" = inserted."REQUESTED_ON",
      "IS_RESPONSE_RECEIVED" = inserted."IS_RESPONSE_RECEIVED",
      "RESPONSE_RECEIVED_DATE" = inserted."RESPONSE_RECEIVED_DATE",
      "COMMENT" = inserted."COMMENT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CONSULTATION
    inner join inserted
    on (PIMS_LEASE_CONSULTATION.LEASE_CONSULTATION_ID = inserted.LEASE_CONSULTATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESCON_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LESCON_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESCON_I_S_I_TR] ON PIMS_LEASE_CONSULTATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CONSULTATION ("LEASE_CONSULTATION_ID",
      "LEASE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE",
      "OTHER_DESCRIPTION",
      "REQUESTED_ON",
      "IS_RESPONSE_RECEIVED",
      "RESPONSE_RECEIVED_DATE",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_CONSULTATION_ID",
      "LEASE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE",
      "OTHER_DESCRIPTION",
      "REQUESTED_ON",
      "IS_RESPONSE_RECEIVED",
      "RESPONSE_RECEIVED_DATE",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_CONSULTATION_OUTCOME_TYPE
PRINT N'Drop table dbo.PIMS_CONSULTATION_OUTCOME_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_CONSULTATION_OUTCOME_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
