-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Thu Nov 07 15:53:21 PST 2024
-- Execute this script on:
-- 		PSP_PIMS_S92_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S93_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RFLPRJ_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RFLPRJ_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RFLPRJ_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRAC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRAC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRAC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PACMRQ_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PACMRQ_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PACMRQ_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPSAL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPSAL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPSAL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SCDPHL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_SCDPHL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SCDPHL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQCIT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQCIT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQCIT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ROLCLM_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ROLCLM_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ROLCLM_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INTHLD_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_INTHLD_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INTHLD_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRLT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRLT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRLT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PERSON_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PERSON_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PERSON_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRROAD_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRROAD_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRROAD_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPIBT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPIBT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPIBT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TENNTX_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TENNTX_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TENNTX_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_USER_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_USER_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_USER_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FNCTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_FNCTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FNCTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FRMTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_FRMTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FRMTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPORG_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPORG_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPORG_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LTRTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LTRTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LTRTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPSTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPSTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPSTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPERD_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSPERD_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSPERD_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACDO_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRACDO_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACDO_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQOWN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQOWN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQOWN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_YRFINC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_YRFINC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_YRFINC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_STKHLT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_STKHLT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_STKHLT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LNDATY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LNDATY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LNDATY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPRP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPPRP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPRP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJPER_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRJPER_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJPER_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ARUNIT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ARUNIT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ARUNIT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INSRNC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_INSRNC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INSRNC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQDOC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQDOC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQDOC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPPUR_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPPUR_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPPUR_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PIMPRV_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PIMPRV_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PIMPRV_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SRVPLT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_SRVPLT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SRVPLT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRODCT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRODCT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRODCT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_COSTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_COSTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_COSTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCMNT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCMNT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCMNT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TKCONT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TKCONT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TKCONT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRVOLT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRVOLT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRVOLT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJPRD_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRJPRD_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJPRD_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPOTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPOTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPOTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRACTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPDOC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DSPDOC_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPDOC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPRST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSPRST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSPRST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQTPPT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AQTPPT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQTPPT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSTRCT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSTRCT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSTRCT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LPSTST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LPSTST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LPSTST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LCKSTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LCKSTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LCKSTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TAKE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TAKE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TAKE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRAT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRAT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRAT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PIDSRT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PIDSRT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PIDSRT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ARQSTT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ARQSTT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ARQSTT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LPRPTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LPRPTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LPRPTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQFRM_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQFRM_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQFRM_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_BIZFCN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_BIZFCN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_BIZFCN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPDOC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPDOC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPDOC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCQUE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCQUE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCQUE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SCDPRH_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_SCDPRH_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SCDPRH_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRRT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRRT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRRT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNTM_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQNTM_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNTM_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPDOC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DSPDOC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPDOC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LINITT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LINITT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LINITT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPOFR_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPOFR_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPOFR_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSSRTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSSRTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSSRTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INHLDT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_INHLDT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INHLDT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQCSCT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AQCSCT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQCSCT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_VOLUTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_VOLUTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_VOLUTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RFLDOC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RFLDOC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RFLDOC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPSCT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPSCT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPSCT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LPCATT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LPCATT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LPCATT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPFTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPFTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPFTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRACST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJPRD_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRJPRD_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJPRD_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_REGION_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_REGION_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_REGION_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ORGTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ORGTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ORGTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RGNUSR_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RGNUSR_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RGNUSR_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCFMT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCFMT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCFMT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJCT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROJCT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROJCT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ADUSGT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ADUSGT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ADUSGT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CNTRY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CNTRY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CNTRY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRSCRC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRSCRC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRSCRC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPYMT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSPYMT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSPYMT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RSFLPR_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RSFLPR_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RSFLPR_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCQUE_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DOCQUE_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCQUE_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_WRKACT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_WRKACT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_WRKACT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPMTF_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSPMTF_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSPMTF_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPRTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSPRTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSPRTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_XPMTITY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_XPMTITY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_XPMTITY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRSPRP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRSPRP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRSPRP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PPHSTT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PPHSTT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PPHSTT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPTNR_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPTNR_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPTNR_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPCIT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPCIT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPCIT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RQSRCT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RQSRCT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RQSRCT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DCCTSB_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DCCTSB_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DCCTSB_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_USRORG_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_USRORG_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_USRORG_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SECDPT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_SECDPT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SECDPT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACIN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRACIN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACIN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACQF_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRACQF_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACQF_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPREQ_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CMPREQ_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPREQ_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_EXPPMT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_EXPPMT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_EXPPMT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SPDCLT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_SPDCLT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SPDCLT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CHKLIS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CHKLIS_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CHKLIS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJSTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRJSTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJSTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PAINVP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PAINVP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PAINVP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AGRMNT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AGRMNT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AGRMNT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ROLE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ROLE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ROLE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ORGIDT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ORGIDT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ORGIDT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESNOT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LESNOT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESNOT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LRESPT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LRESPT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LRESPT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESCON_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LESCON_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESCON_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_HFLNUM_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_HFLNUM_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_HFLNUM_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CHRTAC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CHRTAC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CHRTAC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRAT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRAT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRAT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQCKI_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQCKI_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQCKI_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RESRCH_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RESRCH_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RESRCH_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LCHKLI_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LCHKLI_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LCHKLI_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRPU_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRPU_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRPU_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CNTMTH_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CNTMTH_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CNTMTH_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCQST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCQST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCQST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROPLS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROPLS_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROPLS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CRQFIN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CRQFIN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CRQFIN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_H120CT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_H120CT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_H120CT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AGRSTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AGRSTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AGRSTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RRESPT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RRESPT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RRESPT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPFTM_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPFTM_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPFTM_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPFS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPPFS_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPFS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPSTS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPSTS_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPSTS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPNOT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPNOT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPNOT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSKCRQ_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSKCRQ_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSKCRQ_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ORGADD_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ORGADD_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ORGADD_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ORG_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ORG_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ORG_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPAPP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPAPP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPAPP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCCAT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCCAT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCCAT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TKTYPE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TKTYPE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TKTYPE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPFTP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPFTP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPFTP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PERADD_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PERADD_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PERADD_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RFLNOT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RFLNOT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RFLNOT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_NOTE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_NOTE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_NOTE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SDRTRN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_SDRTRN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SDRTRN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LNSRVT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LNSRVT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LNSRVT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PERORG_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PERORG_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PERORG_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LCKITY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LCKITY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LCKITY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCQUE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DOCQUE_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCQUE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_STAVBL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_STAVBL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_STAVBL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PIHITY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PIHITY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PIHITY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJPRD_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRJPRD_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJPRD_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CNTMTT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CNTMTT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CNTMTT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_USERRL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_USERRL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_USERRL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRACMC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRACMC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRACMC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PMTITM_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PMTITM_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PMTITM_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJNOT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRJNOT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJNOT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPCNT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPCNT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPCNT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_HFLNMT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_HFLNMT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_HFLNMT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RESPCD_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RESPCD_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RESPCD_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INSPYT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_INSPYT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INSPYT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQFST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQFST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQFST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROPOP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROPOP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROPOP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPOFT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPOFT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPOFT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPACT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPACT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPACT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPUR_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPPUR_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPUR_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPCKI_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPCKI_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPCKI_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CONTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CONTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CONTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJDOC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRJDOC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJDOC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSSTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSSTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSSTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AGRTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AGRTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AGRTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_OUTCMT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_OUTCMT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_OUTCMT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LELIST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LELIST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LELIST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RSRCHS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RSRCHS_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RSRCHS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRANOM_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRANOM_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRANOM_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQPFS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQPFS_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQPFS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPAG_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPPAG_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPAG_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSRNWL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSRNWL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSRNWL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSTKHL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSTKHL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSTKHL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPMMT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSPMMT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSPMMT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESDOC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LESDOC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESDOC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPSL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPPSL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPSL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PIMPRT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PIMPRT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PIMPRT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PLCMRQ_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PLCMRQ_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PLCMRQ_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_IHINTT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_IHINTT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_IHINTT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TKSTST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TKSTST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TKSTST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ADDRSS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ADDRSS_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ADDRSS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_IHPRIN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_IHPRIN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_IHPRIN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPFST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPFST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPFST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACRQOR_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACRQOR_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACRQOR_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PACSTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PACSTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PACSTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SBFLIT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_SBFLIT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SBFLIT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CONSTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CONSTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CONSTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROVNC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROVNC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROVNC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DISPFL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DISPFL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DISPFL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQFTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQFTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQFTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RSHPRT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RSHPRT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RSHPRT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FINACT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_FINACT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FINACT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACRQST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACRQST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACRQST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CLMTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CLMTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CLMTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPIDT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPIDT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPIDT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SECDEP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_SECDEP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SECDEP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNOT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQNOT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNOT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSPRGT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSPRGT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSPRGT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_USERTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_USERTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_USERTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LLPURP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LLPURP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LLPURP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCSTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCSTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCSTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_PHYS_FILE_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_ACQ_PHYS_FILE_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ACQ_PHYS_FILE_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FUNDING_TYPE
PRINT N'Alter table dbo.PIMS_ACQUISITION_FUNDING_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FUNDING_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_TYPE
PRINT N'Alter table dbo.PIMS_ACQUISITION_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PRODUCT
PRINT N'Alter table dbo.PIMS_PRODUCT'
GO
ALTER TABLE [dbo].[PIMS_PRODUCT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_BUSINESS_FUNCTION_CODE
PRINT N'Alter table dbo.PIMS_BUSINESS_FUNCTION_CODE'
GO
ALTER TABLE [dbo].[PIMS_BUSINESS_FUNCTION_CODE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COST_TYPE_CODE
PRINT N'Alter table dbo.PIMS_COST_TYPE_CODE'
GO
ALTER TABLE [dbo].[PIMS_COST_TYPE_CODE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_PROJECT_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_REGION
PRINT N'Alter table dbo.PIMS_REGION'
GO
ALTER TABLE [dbo].[PIMS_REGION] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_WORK_ACTIVITY_CODE
PRINT N'Alter table dbo.PIMS_WORK_ACTIVITY_CODE'
GO
ALTER TABLE [dbo].[PIMS_WORK_ACTIVITY_CODE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT
PRINT N'Alter table dbo.PIMS_PROJECT'
GO
ALTER TABLE [dbo].[PIMS_PROJECT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_SUBFILE_INTEREST_TYPE
PRINT N'Alter table dbo.PIMS_SUBFILE_INTEREST_TYPE'
GO
ALTER TABLE [dbo].[PIMS_SUBFILE_INTEREST_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_DOCUMENT_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_TYP
PRINT N'Alter table dbo.PIMS_DOCUMENT_TYP'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT
PRINT N'Alter table dbo.PIMS_DOCUMENT'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_DOCUMENT
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_DOCUMENT'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DATA_SOURCE_TYPE
PRINT N'Alter table dbo.PIMS_DATA_SOURCE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_DATA_SOURCE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FUNDING_TYPE
PRINT N'Alter table dbo.PIMS_DISPOSITION_FUNDING_TYPE'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FUNDING_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_INITIATING_DOC_TYPE
PRINT N'Alter table dbo.PIMS_DISPOSITION_INITIATING_DOC_TYPE'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_INITIATING_DOC_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_DISPOSITION_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_TYPE
PRINT N'Alter table dbo.PIMS_DISPOSITION_TYPE'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DSP_INITIATING_BRANCH_TYPE
PRINT N'Alter table dbo.PIMS_DSP_INITIATING_BRANCH_TYPE'
GO
ALTER TABLE [dbo].[PIMS_DSP_INITIATING_BRANCH_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DSP_PHYS_FILE_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_DSP_PHYS_FILE_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_DSP_PHYS_FILE_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE_DOCUMENT
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE_DOCUMENT'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_QUEUE_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_DOCUMENT_QUEUE_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_INITIATOR_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_INITIATOR_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_INITIATOR_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_LICENSE_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_LICENSE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_LICENSE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PAY_RVBL_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_PAY_RVBL_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAY_RVBL_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PROGRAM_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_PROGRAM_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PROGRAM_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_RESPONSIBILITY_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_RESPONSIBILITY_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_RESPONSIBILITY_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE
PRINT N'Alter table dbo.PIMS_LEASE'
GO
ALTER TABLE [dbo].[PIMS_LEASE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_DOCUMENT
PRINT N'Alter table dbo.PIMS_LEASE_DOCUMENT'
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISTRICT
PRINT N'Alter table dbo.PIMS_DISTRICT'
GO
ALTER TABLE [dbo].[PIMS_DISTRICT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ORG_IDENTIFIER_TYPE
PRINT N'Alter table dbo.PIMS_ORG_IDENTIFIER_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ORG_IDENTIFIER_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ORGANIZATION_TYPE
PRINT N'Alter table dbo.PIMS_ORGANIZATION_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ORGANIZATION_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ORGANIZATION
PRINT N'Alter table dbo.PIMS_ORGANIZATION'
GO
ALTER TABLE [dbo].[PIMS_ORGANIZATION] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PERSON
PRINT N'Alter table dbo.PIMS_PERSON'
GO
ALTER TABLE [dbo].[PIMS_PERSON] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_MGMT_ACTIVITY_TYPE
PRINT N'Alter table dbo.PIMS_PROP_MGMT_ACTIVITY_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROP_MGMT_ACTIVITY_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_MGMT_ACTIVITY_SUBTYPE
PRINT N'Alter table dbo.PIMS_PROP_MGMT_ACTIVITY_SUBTYPE'
GO
ALTER TABLE [dbo].[PIMS_PROP_MGMT_ACTIVITY_SUBTYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACTIVITY
PRINT N'Alter table dbo.PIMS_PROPERTY_ACTIVITY'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT
PRINT N'Alter table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_REQUEST_SOURCE_TYPE
PRINT N'Alter table dbo.PIMS_REQUEST_SOURCE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_REQUEST_SOURCE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_DOCUMENT
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_DOCUMENT'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_QUEUE
PRINT N'Alter table dbo.PIMS_DOCUMENT_QUEUE'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD [PROPERTY_ACTIVITY_DOCUMENT_ID] bigint NULL, 
	[ACQUISITION_FILE_DOCUMENT_ID] bigint NULL, 
	[RESEARCH_FILE_DOCUMENT_ID] bigint NULL, 
	[LEASE_DOCUMENT_ID] bigint NULL, 
	[DISPOSITION_FILE_DOCUMENT_ID] bigint NULL, 
	[DOCUMENT_METADATA] nvarchar(4000) NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_PROPERTY_ACTIVITY_DOCUMENT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_ACTIVITY_DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQUISITION_FILE_DOCUMENT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FILE_DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_RESEARCH_FILE_DOCUMENT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'RESEARCH_FILE_DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_DOCUMENT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'LEASE_DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_DISPOSITION_FILE_DOCUMENT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DISPOSITION_FILE_DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Used to store JSON-encoded metadata that needs to be added to the document during upload.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_QUEUE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_METADATA'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PURPOSE_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_PURPOSE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PURPOSE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_LEASE_PURPOSE
PRINT N'Alter table dbo.PIMS_LEASE_LEASE_PURPOSE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_LEASE_PURPOSE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_USER_TYPE
PRINT N'Alter table dbo.PIMS_USER_TYPE'
GO
ALTER TABLE [dbo].[PIMS_USER_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_NOTE
PRINT N'Alter table dbo.PIMS_NOTE'
GO
ALTER TABLE [dbo].[PIMS_NOTE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_NOTE
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_NOTE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_NOTE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_SECURITY_DEPOSIT_TYPE
PRINT N'Alter table dbo.PIMS_SECURITY_DEPOSIT_TYPE'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_SECURITY_DEPOSIT
PRINT N'Alter table dbo.PIMS_SECURITY_DEPOSIT'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_CLAIM
PRINT N'Alter table dbo.PIMS_CLAIM'
GO
ALTER TABLE [dbo].[PIMS_CLAIM] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACCESS_REQUEST_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_ACCESS_REQUEST_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ROLE
PRINT N'Alter table dbo.PIMS_ROLE'
GO
ALTER TABLE [dbo].[PIMS_ROLE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_USER
PRINT N'Alter table dbo.PIMS_USER'
GO
ALTER TABLE [dbo].[PIMS_USER] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACCESS_REQUEST
PRINT N'Alter table dbo.PIMS_ACCESS_REQUEST'
GO
ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_FINANCIAL_ACTIVITY_CODE
PRINT N'Alter table dbo.PIMS_FINANCIAL_ACTIVITY_CODE'
GO
ALTER TABLE [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_PURPOSE_TYPE
PRINT N'Alter table dbo.PIMS_RESEARCH_PURPOSE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_PURPOSE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COUNTRY
PRINT N'Alter table dbo.PIMS_COUNTRY'
GO
ALTER TABLE [dbo].[PIMS_COUNTRY] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROVINCE_STATE
PRINT N'Alter table dbo.PIMS_PROVINCE_STATE'
GO
ALTER TABLE [dbo].[PIMS_PROVINCE_STATE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_CONSULTATION_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_CONSULTATION_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACCESS_REQUEST_ORGANIZATION
PRINT N'Alter table dbo.PIMS_ACCESS_REQUEST_ORGANIZATION'
GO
ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTEREST_HOLDER_TYPE
PRINT N'Alter table dbo.PIMS_INTEREST_HOLDER_TYPE'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTEREST_HOLDER
PRINT N'Alter table dbo.PIMS_INTEREST_HOLDER'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ADDRESS
PRINT N'Alter table dbo.PIMS_ADDRESS'
GO
ALTER TABLE [dbo].[PIMS_ADDRESS] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_AREA_UNIT_TYPE
PRINT N'Alter table dbo.PIMS_AREA_UNIT_TYPE'
GO
ALTER TABLE [dbo].[PIMS_AREA_UNIT_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PPH_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_PPH_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PPH_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_PROPERTY_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_TYPE
PRINT N'Alter table dbo.PIMS_PROPERTY_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_SURPLUS_DECLARATION_TYPE
PRINT N'Alter table dbo.PIMS_SURPLUS_DECLARATION_TYPE'
GO
ALTER TABLE [dbo].[PIMS_SURPLUS_DECLARATION_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_VOLUME_UNIT_TYPE
PRINT N'Alter table dbo.PIMS_VOLUME_UNIT_TYPE'
GO
ALTER TABLE [dbo].[PIMS_VOLUME_UNIT_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_VOLUMETRIC_TYPE
PRINT N'Alter table dbo.PIMS_VOLUMETRIC_TYPE'
GO
ALTER TABLE [dbo].[PIMS_VOLUMETRIC_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY
PRINT N'Alter table dbo.PIMS_PROPERTY'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACQUISITION_FILE
PRINT N'Alter table dbo.PIMS_PROPERTY_ACQUISITION_FILE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTHLDR_PROP_INTEREST
PRINT N'Alter table dbo.PIMS_INTHLDR_PROP_INTEREST'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_TAKE_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_TAKE_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTEREST_HOLDER_INTEREST_TYPE
PRINT N'Alter table dbo.PIMS_INTEREST_HOLDER_INTEREST_TYPE'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER_INTEREST_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_FL_TEAM_PROFILE_TYPE
PRINT N'Alter table dbo.PIMS_ACQ_FL_TEAM_PROFILE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ACQ_FL_TEAM_PROFILE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_TEAM
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_TEAM'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_TEAM] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_OWNER
PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_CHART_OF_ACCOUNTS_CODE
PRINT N'Alter table dbo.PIMS_CHART_OF_ACCOUNTS_CODE'
GO
ALTER TABLE [dbo].[PIMS_CHART_OF_ACCOUNTS_CODE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESPONSIBILITY_CODE
PRINT N'Alter table dbo.PIMS_RESPONSIBILITY_CODE'
GO
ALTER TABLE [dbo].[PIMS_RESPONSIBILITY_CODE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_YEARLY_FINANCIAL_CODE
PRINT N'Alter table dbo.PIMS_YEARLY_FINANCIAL_CODE'
GO
ALTER TABLE [dbo].[PIMS_YEARLY_FINANCIAL_CODE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COMPENSATION_REQUISITION
PRINT N'Alter table dbo.PIMS_COMPENSATION_REQUISITION'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_LEASE
PRINT N'Alter table dbo.PIMS_PROPERTY_LEASE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_LEASE_COMP_REQ
PRINT N'Alter table dbo.PIMS_PROP_LEASE_COMP_REQ'
GO
ALTER TABLE [dbo].[PIMS_PROP_LEASE_COMP_REQ] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_IMPROVEMENT_TYPE
PRINT N'Alter table dbo.PIMS_PROPERTY_IMPROVEMENT_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DSP_PURCH_SOLICITOR
PRINT N'Alter table dbo.PIMS_DSP_PURCH_SOLICITOR'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PAYMENT_METHOD_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_PAYMENT_METHOD_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT_METHOD_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_STAKEHOLDER_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_STAKEHOLDER_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LESSOR_TYPE
PRINT N'Alter table dbo.PIMS_LESSOR_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LESSOR_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_STAKEHOLDER
PRINT N'Alter table dbo.PIMS_LEASE_STAKEHOLDER'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_RENEWAL
PRINT N'Alter table dbo.PIMS_LEASE_RENEWAL'
GO
ALTER TABLE [dbo].[PIMS_LEASE_RENEWAL] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DSP_PURCH_AGENT
PRINT N'Alter table dbo.PIMS_DSP_PURCH_AGENT'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ANOMALY_TYPE
PRINT N'Alter table dbo.PIMS_PROPERTY_ANOMALY_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ANOMALY_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_CONSULTATION_OUTCOME_TYPE
PRINT N'Alter table dbo.PIMS_CONSULTATION_OUTCOME_TYPE'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_OUTCOME_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_AGREEMENT_TYPE
PRINT N'Alter table dbo.PIMS_AGREEMENT_TYPE'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT_DOCUMENT
PRINT N'Alter table dbo.PIMS_PROJECT_DOCUMENT'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_DOCUMENT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_CONSULTATION_TYPE
PRINT N'Alter table dbo.PIMS_CONSULTATION_TYPE'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_CHKLST_ITEM_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_CHKLST_ITEM_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_CHKLST_ITEM_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DSP_CHKLST_SECTION_TYPE
PRINT N'Alter table dbo.PIMS_DSP_CHKLST_SECTION_TYPE'
GO
ALTER TABLE [dbo].[PIMS_DSP_CHKLST_SECTION_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DSP_CHKLST_ITEM_TYPE
PRINT N'Alter table dbo.PIMS_DSP_CHKLST_ITEM_TYPE'
GO
ALTER TABLE [dbo].[PIMS_DSP_CHKLST_ITEM_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_CHECKLIST_ITEM
PRINT N'Alter table dbo.PIMS_DISPOSITION_CHECKLIST_ITEM'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_SALE
PRINT N'Alter table dbo.PIMS_DISPOSITION_SALE'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_SALE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_PURCHASER
PRINT N'Alter table dbo.PIMS_DISPOSITION_PURCHASER'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_PURCHASER] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_OFFER_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_DISPOSITION_OFFER_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_OFFER_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_OPERATION_TYPE
PRINT N'Alter table dbo.PIMS_PROPERTY_OPERATION_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_OPERATION_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_OPERATION
PRINT N'Alter table dbo.PIMS_PROPERTY_OPERATION'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_OPERATION] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_TENURE_TYPE
PRINT N'Alter table dbo.PIMS_PROPERTY_TENURE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_TENURE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_PROP_TENURE_TYPE
PRINT N'Alter table dbo.PIMS_PROP_PROP_TENURE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INSURANCE_TYPE
PRINT N'Alter table dbo.PIMS_INSURANCE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_INSURANCE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_HISTORICAL_FILE_NUMBER_TYPE
PRINT N'Alter table dbo.PIMS_HISTORICAL_FILE_NUMBER_TYPE'
GO
ALTER TABLE [dbo].[PIMS_HISTORICAL_FILE_NUMBER_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_CONTACT
PRINT N'Alter table dbo.PIMS_PROPERTY_CONTACT'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT_NOTE
PRINT N'Alter table dbo.PIMS_PROJECT_NOTE'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_NOTE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PAYMENT_ITEM_TYPE
PRINT N'Alter table dbo.PIMS_PAYMENT_ITEM_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PAYMENT_ITEM_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_ACT_MIN_CONTACT
PRINT N'Alter table dbo.PIMS_PROP_ACT_MIN_CONTACT'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_USER_ROLE
PRINT N'Alter table dbo.PIMS_USER_ROLE'
GO
ALTER TABLE [dbo].[PIMS_USER_ROLE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_CONTACT_METHOD_TYPE
PRINT N'Alter table dbo.PIMS_CONTACT_METHOD_TYPE'
GO
ALTER TABLE [dbo].[PIMS_CONTACT_METHOD_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT_PRODUCT
PRINT N'Alter table dbo.PIMS_PROJECT_PRODUCT'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PRODUCT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT_PRODUCT_HIST
PRINT N'Alter table dbo.PIMS_PROJECT_PRODUCT_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PRODUCT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_INTHLDR_INTEREST_TYPE
PRINT N'Alter table dbo.PIMS_PROP_INTHLDR_INTEREST_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_STATIC_VARIABLE
PRINT N'Alter table dbo.PIMS_STATIC_VARIABLE'
GO
ALTER TABLE [dbo].[PIMS_STATIC_VARIABLE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CHKLST_SECTION_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_CHKLST_SECTION_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CHKLST_SECTION_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CHKLST_ITEM_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_CHKLST_ITEM_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CHKLST_ITEM_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PERSON_ORGANIZATION
PRINT N'Alter table dbo.PIMS_PERSON_ORGANIZATION'
GO
ALTER TABLE [dbo].[PIMS_PERSON_ORGANIZATION] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LAND_SURVEYOR_TYPE
PRINT N'Alter table dbo.PIMS_LAND_SURVEYOR_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LAND_SURVEYOR_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_SECURITY_DEPOSIT_RETURN
PRINT N'Alter table dbo.PIMS_SECURITY_DEPOSIT_RETURN'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_NOTE
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_NOTE'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ADDRESS_USAGE_TYPE
PRINT N'Alter table dbo.PIMS_ADDRESS_USAGE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ADDRESS_USAGE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PERSON_ADDRESS
PRINT N'Alter table dbo.PIMS_PERSON_ADDRESS'
GO
ALTER TABLE [dbo].[PIMS_PERSON_ADDRESS] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DSP_FL_TEAM_PROFILE_TYPE
PRINT N'Alter table dbo.PIMS_DSP_FL_TEAM_PROFILE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_DSP_FL_TEAM_PROFILE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE_TYPE
PRINT N'Alter table dbo.PIMS_TAKE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_TAKE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_CATEGORY_TYPE
PRINT N'Alter table dbo.PIMS_DOCUMENT_CATEGORY_TYPE'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_CATEGORY_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_APPRAISAL
PRINT N'Alter table dbo.PIMS_DISPOSITION_APPRAISAL'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_APPRAISAL] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ORGANIZATION_ADDRESS
PRINT N'Alter table dbo.PIMS_ORGANIZATION_ADDRESS'
GO
ALTER TABLE [dbo].[PIMS_ORGANIZATION_ADDRESS] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_STAKEHOLDER_COMP_REQ
PRINT N'Alter table dbo.PIMS_LEASE_STAKEHOLDER_COMP_REQ'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE_NOTE
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE_NOTE'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_NOTE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE_TEAM
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE_TEAM'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_RESEARCH_PURPOSE_TYPE
PRINT N'Alter table dbo.PIMS_PROP_RESEARCH_PURPOSE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROP_RESEARCH_PURPOSE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_AGREEMENT_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_AGREEMENT_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_H120_CATEGORY
PRINT N'Alter table dbo.PIMS_H120_CATEGORY'
GO
ALTER TABLE [dbo].[PIMS_H120_CATEGORY] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COMP_REQ_FINANCIAL
PRINT N'Alter table dbo.PIMS_COMP_REQ_FINANCIAL'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_FINANCIAL] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_CONTACT_METHOD
PRINT N'Alter table dbo.PIMS_CONTACT_METHOD'
GO
ALTER TABLE [dbo].[PIMS_CONTACT_METHOD] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_PURPOSE_TYPE
PRINT N'Alter table dbo.PIMS_PROPERTY_PURPOSE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_PURPOSE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_PROP_PURPOSE
PRINT N'Alter table dbo.PIMS_PROP_PROP_PURPOSE'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_PURPOSE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CHECKLIST_ITEM
PRINT N'Alter table dbo.PIMS_LEASE_CHECKLIST_ITEM'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CHECKLIST_ITEM] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_CHKLST_SECTION_TYPE
PRINT N'Alter table dbo.PIMS_ACQ_CHKLST_SECTION_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ACQ_CHKLST_SECTION_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_CHKLST_ITEM_TYPE
PRINT N'Alter table dbo.PIMS_ACQ_CHKLST_ITEM_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ACQ_CHKLST_ITEM_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_CHECKLIST_ITEM
PRINT N'Alter table dbo.PIMS_ACQUISITION_CHECKLIST_ITEM'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_PROP_ANOMALY_TYPE
PRINT N'Alter table dbo.PIMS_PROP_PROP_ANOMALY_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_HISTORICAL_FILE_NUMBER
PRINT N'Alter table dbo.PIMS_HISTORICAL_FILE_NUMBER'
GO
ALTER TABLE [dbo].[PIMS_HISTORICAL_FILE_NUMBER] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CONSULTATION
PRINT N'Alter table dbo.PIMS_LEASE_CONSULTATION'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_NOTE
PRINT N'Alter table dbo.PIMS_LEASE_NOTE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_AGREEMENT
PRINT N'Alter table dbo.PIMS_AGREEMENT'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_ACT_INVOLVED_PARTY
PRINT N'Alter table dbo.PIMS_PROP_ACT_INVOLVED_PARTY'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_EXPROPRIATION_PAYMENT
PRINT N'Alter table dbo.PIMS_EXPROPRIATION_PAYMENT'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACTIVITY_INVOICE
PRINT N'Alter table dbo.PIMS_PROPERTY_ACTIVITY_INVOICE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_USER_ORGANIZATION
PRINT N'Alter table dbo.PIMS_USER_ORGANIZATION'
GO
ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_CATEGORY_SUBTYPE
PRINT N'Alter table dbo.PIMS_DOCUMENT_CATEGORY_SUBTYPE'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_CATEGORY_SUBTYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_RESEARCH_FILE
PRINT N'Alter table dbo.PIMS_PROPERTY_RESEARCH_FILE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE
PRINT N'Alter table dbo.PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_EXPROP_PMT_PMT_ITEM
PRINT N'Alter table dbo.PIMS_EXPROP_PMT_PMT_ITEM'
GO
ALTER TABLE [dbo].[PIMS_EXPROP_PMT_PMT_ITEM] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PMT_FREQ_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_PMT_FREQ_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PMT_FREQ_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_QUEUE_HIST
PRINT N'Alter table dbo.PIMS_DOCUMENT_QUEUE_HIST'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE_HIST]
	ADD [PROPERTY_ACTIVITY_DOCUMENT_ID] bigint NULL, 
	[ACQUISITION_FILE_DOCUMENT_ID] bigint NULL, 
	[RESEARCH_FILE_DOCUMENT_ID] bigint NULL, 
	[LEASE_DOCUMENT_ID] bigint NULL, 
	[DISPOSITION_FILE_DOCUMENT_ID] bigint NULL, 
	[DOCUMENT_METADATA] nvarchar(4000) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_PURPOSE
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_PURPOSE'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PAYMENT_CATEGORY_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_PAYMENT_CATEGORY_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT_CATEGORY_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PAYMENT_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_PAYMENT_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PERIOD_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_LEASE_PERIOD_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_STATUS_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PERIOD
PRINT N'Alter table dbo.PIMS_LEASE_PERIOD'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PAYMENT
PRINT N'Alter table dbo.PIMS_LEASE_PAYMENT'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_FORMAT_TYPE
PRINT N'Alter table dbo.PIMS_DOCUMENT_FORMAT_TYPE'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_FORMAT_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_REGION_USER
PRINT N'Alter table dbo.PIMS_REGION_USER'
GO
ALTER TABLE [dbo].[PIMS_REGION_USER] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_OFFER
PRINT N'Alter table dbo.PIMS_DISPOSITION_OFFER'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_OFFER] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ROAD_TYPE
PRINT N'Alter table dbo.PIMS_PROPERTY_ROAD_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ROAD_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_PROP_ROAD_TYPE
PRINT N'Alter table dbo.PIMS_PROP_PROP_ROAD_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_SECURITY_DEPOSIT_RETURN_HOLDER
PRINT N'Alter table dbo.PIMS_SECURITY_DEPOSIT_RETURN_HOLDER'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_FORM_TYPE
PRINT N'Alter table dbo.PIMS_FORM_TYPE'
GO
ALTER TABLE [dbo].[PIMS_FORM_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_FORM
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_FORM'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_FORM] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LAND_ACT_TYPE
PRINT N'Alter table dbo.PIMS_LAND_ACT_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LAND_ACT_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE_SITE_CONTAM_TYPE
PRINT N'Alter table dbo.PIMS_TAKE_SITE_CONTAM_TYPE'
GO
ALTER TABLE [dbo].[PIMS_TAKE_SITE_CONTAM_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE
PRINT N'Alter table dbo.PIMS_TAKE'
GO
ALTER TABLE [dbo].[PIMS_TAKE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE_DOCUMENT_HIST
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE_DOCUMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_SURVEY_PLAN_TYPE
PRINT N'Alter table dbo.PIMS_SURVEY_PLAN_TYPE'
GO
ALTER TABLE [dbo].[PIMS_SURVEY_PLAN_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_IMPROVEMENT
PRINT N'Alter table dbo.PIMS_PROPERTY_IMPROVEMENT'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INSURANCE
PRINT N'Alter table dbo.PIMS_INSURANCE'
GO
ALTER TABLE [dbo].[PIMS_INSURANCE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT_PERSON_ROLE_TYPE
PRINT N'Alter table dbo.PIMS_PROJECT_PERSON_ROLE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PERSON_ROLE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT_PERSON
PRINT N'Alter table dbo.PIMS_PROJECT_PERSON'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PERSON] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE_PROPERTY
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE_PROPERTY'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LETTER_TYPE
PRINT N'Alter table dbo.PIMS_LETTER_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LETTER_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ORGANIZATION
PRINT N'Alter table dbo.PIMS_PROPERTY_ORGANIZATION'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_FENCE_TYPE
PRINT N'Alter table dbo.PIMS_FENCE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_FENCE_TYPE] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TENANT
PRINT N'Alter table dbo.PIMS_TENANT'
GO
ALTER TABLE [dbo].[PIMS_TENANT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ROLE_CLAIM
PRINT N'Alter table dbo.PIMS_ROLE_CLAIM'
GO
ALTER TABLE [dbo].[PIMS_ROLE_CLAIM] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_SECURITY_DEPOSIT_HOLDER
PRINT N'Alter table dbo.PIMS_SECURITY_DEPOSIT_HOLDER'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_ACQ_FL_COMP_REQ
PRINT N'Alter table dbo.PIMS_PROP_ACQ_FL_COMP_REQ'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACQ_FL_COMP_REQ] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_PROP_ACTIVITY
PRINT N'Alter table dbo.PIMS_PROP_PROP_ACTIVITY'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_PROJECT
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_PROJECT'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PROJECT] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_USER_ROLE_HIST
PRINT N'Alter table dbo.PIMS_USER_ROLE_HIST'
GO
ALTER TABLE [dbo].[PIMS_USER_ROLE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTEREST_HOLDER_HIST
PRINT N'Alter table dbo.PIMS_INTEREST_HOLDER_HIST'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_FINANCIAL_ACTIVITY_CODE_HIST
PRINT N'Alter table dbo.PIMS_FINANCIAL_ACTIVITY_CODE_HIST'
GO
ALTER TABLE [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_OPERATION_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_OPERATION_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_OPERATION_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_RESEARCH_FILE_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_RESEARCH_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_OWNER_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE_HIST
PRINT N'Alter table dbo.PIMS_TAKE_HIST'
GO
ALTER TABLE [dbo].[PIMS_TAKE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_RENEWAL_HIST
PRINT N'Alter table dbo.PIMS_LEASE_RENEWAL_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_RENEWAL_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_SECURITY_DEPOSIT_HIST
PRINT N'Alter table dbo.PIMS_SECURITY_DEPOSIT_HIST'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_USER_HIST
PRINT N'Alter table dbo.PIMS_USER_HIST'
GO
ALTER TABLE [dbo].[PIMS_USER_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PAYMENT_HIST
PRINT N'Alter table dbo.PIMS_LEASE_PAYMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_YEARLY_FINANCIAL_CODE_HIST
PRINT N'Alter table dbo.PIMS_YEARLY_FINANCIAL_CODE_HIST'
GO
ALTER TABLE [dbo].[PIMS_YEARLY_FINANCIAL_CODE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_TEAM_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_TEAM_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_TEAM_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_PROP_PURPOSE_HIST
PRINT N'Alter table dbo.PIMS_PROP_PROP_PURPOSE_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_PURPOSE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_APPRAISAL_HIST
PRINT N'Alter table dbo.PIMS_DISPOSITION_APPRAISAL_HIST'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_APPRAISAL_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ORGANIZATION_HIST
PRINT N'Alter table dbo.PIMS_ORGANIZATION_HIST'
GO
ALTER TABLE [dbo].[PIMS_ORGANIZATION_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTHLDR_PROP_INTEREST_HIST
PRINT N'Alter table dbo.PIMS_INTHLDR_PROP_INTEREST_HIST'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_PROP_ACTIVITY_HIST
PRINT N'Alter table dbo.PIMS_PROP_PROP_ACTIVITY_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ACTIVITY_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_NOTE_HIST
PRINT N'Alter table dbo.PIMS_LEASE_NOTE_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INSURANCE_HIST
PRINT N'Alter table dbo.PIMS_INSURANCE_HIST'
GO
ALTER TABLE [dbo].[PIMS_INSURANCE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_ACT_MIN_CONTACT_HIST
PRINT N'Alter table dbo.PIMS_PROP_ACT_MIN_CONTACT_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_FORM_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_FORM_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_FORM_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_AGREEMENT_HIST
PRINT N'Alter table dbo.PIMS_AGREEMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_STAKEHOLDER_HIST
PRINT N'Alter table dbo.PIMS_LEASE_STAKEHOLDER_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ROLE_HIST
PRINT N'Alter table dbo.PIMS_ROLE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ROLE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_OFFER_HIST
PRINT N'Alter table dbo.PIMS_DISPOSITION_OFFER_HIST'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_OFFER_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE_NOTE_HIST
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE_NOTE_HIST'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_NOTE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_IMPROVEMENT_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_IMPROVEMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_PERIOD_HIST
PRINT N'Alter table dbo.PIMS_LEASE_PERIOD_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_PERIOD_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PERSON_ORGANIZATION_HIST
PRINT N'Alter table dbo.PIMS_PERSON_ORGANIZATION_HIST'
GO
ALTER TABLE [dbo].[PIMS_PERSON_ORGANIZATION_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_DOCUMENT_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_DOCUMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_HIST
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST
PRINT N'Alter table dbo.PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_SALE_HIST
PRINT N'Alter table dbo.PIMS_DISPOSITION_SALE_HIST'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_SALE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT_NOTE_HIST
PRINT N'Alter table dbo.PIMS_PROJECT_NOTE_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_NOTE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_WORK_ACTIVITY_CODE_HIST
PRINT N'Alter table dbo.PIMS_WORK_ACTIVITY_CODE_HIST'
GO
ALTER TABLE [dbo].[PIMS_WORK_ACTIVITY_CODE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PERSON_HIST
PRINT N'Alter table dbo.PIMS_PERSON_HIST'
GO
ALTER TABLE [dbo].[PIMS_PERSON_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ROLE_CLAIM_HIST
PRINT N'Alter table dbo.PIMS_ROLE_CLAIM_HIST'
GO
ALTER TABLE [dbo].[PIMS_ROLE_CLAIM_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACTIVITY_INVOICE_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_ACTIVITY_INVOICE_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_PURPOSE_HIST
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_PURPOSE_HIST'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_HIST
PRINT N'Alter table dbo.PIMS_LEASE_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PRODUCT_HIST
PRINT N'Alter table dbo.PIMS_PRODUCT_HIST'
GO
ALTER TABLE [dbo].[PIMS_PRODUCT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_BUSINESS_FUNCTION_CODE_HIST
PRINT N'Alter table dbo.PIMS_BUSINESS_FUNCTION_CODE_HIST'
GO
ALTER TABLE [dbo].[PIMS_BUSINESS_FUNCTION_CODE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_USER_ORGANIZATION_HIST
PRINT N'Alter table dbo.PIMS_USER_ORGANIZATION_HIST'
GO
ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ADDRESS_HIST
PRINT N'Alter table dbo.PIMS_ADDRESS_HIST'
GO
ALTER TABLE [dbo].[PIMS_ADDRESS_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_TYP_HIST
PRINT N'Alter table dbo.PIMS_DOCUMENT_TYP_HIST'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COMPENSATION_REQUISITION_HIST
PRINT N'Alter table dbo.PIMS_COMPENSATION_REQUISITION_HIST'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESPONSIBILITY_CODE_HIST
PRINT N'Alter table dbo.PIMS_RESPONSIBILITY_CODE_HIST'
GO
ALTER TABLE [dbo].[PIMS_RESPONSIBILITY_CODE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT_HIST
PRINT N'Alter table dbo.PIMS_PROJECT_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_CLAIM_HIST
PRINT N'Alter table dbo.PIMS_CLAIM_HIST'
GO
ALTER TABLE [dbo].[PIMS_CLAIM_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_DOCUMENT_HIST
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_DOCUMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DSP_PURCH_AGENT_HIST
PRINT N'Alter table dbo.PIMS_DSP_PURCH_AGENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_PROJECT_HIST
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_PROJECT_HIST'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PROJECT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_REGION_USER_HIST
PRINT N'Alter table dbo.PIMS_REGION_USER_HIST'
GO
ALTER TABLE [dbo].[PIMS_REGION_USER_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_EXPROP_PMT_PMT_ITEM_HIST
PRINT N'Alter table dbo.PIMS_EXPROP_PMT_PMT_ITEM_HIST'
GO
ALTER TABLE [dbo].[PIMS_EXPROP_PMT_PMT_ITEM_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_CONTACT_METHOD_HIST
PRINT N'Alter table dbo.PIMS_CONTACT_METHOD_HIST'
GO
ALTER TABLE [dbo].[PIMS_CONTACT_METHOD_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_CONTACT_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_CONTACT_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE_PROPERTY_HIST
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE_PROPERTY_HIST'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_PURCHASER_HIST
PRINT N'Alter table dbo.PIMS_DISPOSITION_PURCHASER_HIST'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_PURCHASER_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CONSULTATION_HIST
PRINT N'Alter table dbo.PIMS_LEASE_CONSULTATION_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_SECURITY_DEPOSIT_RETURN_HIST
PRINT N'Alter table dbo.PIMS_SECURITY_DEPOSIT_RETURN_HIST'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_EXPROPRIATION_PAYMENT_HIST
PRINT N'Alter table dbo.PIMS_EXPROPRIATION_PAYMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_NOTE_HIST
PRINT N'Alter table dbo.PIMS_NOTE_HIST'
GO
ALTER TABLE [dbo].[PIMS_NOTE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DSP_PURCH_SOLICITOR_HIST
PRINT N'Alter table dbo.PIMS_DSP_PURCH_SOLICITOR_HIST'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_LEASE_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_LEASE_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_HISTORICAL_FILE_NUMBER_HIST
PRINT N'Alter table dbo.PIMS_HISTORICAL_FILE_NUMBER_HIST'
GO
ALTER TABLE [dbo].[PIMS_HISTORICAL_FILE_NUMBER_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_NOTE_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_NOTE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_NOTE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACQUISITION_FILE_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_ACQUISITION_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_LEASE_COMP_REQ_HIST
PRINT N'Alter table dbo.PIMS_PROP_LEASE_COMP_REQ_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROP_LEASE_COMP_REQ_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_STATIC_VARIABLE_HIST
PRINT N'Alter table dbo.PIMS_STATIC_VARIABLE_HIST'
GO
ALTER TABLE [dbo].[PIMS_STATIC_VARIABLE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACTIVITY_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_ACTIVITY_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COST_TYPE_CODE_HIST
PRINT N'Alter table dbo.PIMS_COST_TYPE_CODE_HIST'
GO
ALTER TABLE [dbo].[PIMS_COST_TYPE_CODE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ORGANIZATION_ADDRESS_HIST
PRINT N'Alter table dbo.PIMS_ORGANIZATION_ADDRESS_HIST'
GO
ALTER TABLE [dbo].[PIMS_ORGANIZATION_ADDRESS_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACCESS_REQUEST_ORGANIZATION_HIST
PRINT N'Alter table dbo.PIMS_ACCESS_REQUEST_ORGANIZATION_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE_TEAM_HIST
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE_TEAM_HIST'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_TEAM_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_ACQ_FL_COMP_REQ_HIST
PRINT N'Alter table dbo.PIMS_PROP_ACQ_FL_COMP_REQ_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACQ_FL_COMP_REQ_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_H120_CATEGORY_HIST
PRINT N'Alter table dbo.PIMS_H120_CATEGORY_HIST'
GO
ALTER TABLE [dbo].[PIMS_H120_CATEGORY_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_DOCUMENT_HIST
PRINT N'Alter table dbo.PIMS_LEASE_DOCUMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PERSON_ADDRESS_HIST
PRINT N'Alter table dbo.PIMS_PERSON_ADDRESS_HIST'
GO
ALTER TABLE [dbo].[PIMS_PERSON_ADDRESS_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_CHART_OF_ACCOUNTS_CODE_HIST
PRINT N'Alter table dbo.PIMS_CHART_OF_ACCOUNTS_CODE_HIST'
GO
ALTER TABLE [dbo].[PIMS_CHART_OF_ACCOUNTS_CODE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE_HIST
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_CHECKLIST_ITEM_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_CHECKLIST_ITEM_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_CHECKLIST_ITEM_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST
PRINT N'Alter table dbo.PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACCESS_REQUEST_HIST
PRINT N'Alter table dbo.PIMS_ACCESS_REQUEST_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT_DOCUMENT_HIST
PRINT N'Alter table dbo.PIMS_PROJECT_DOCUMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_DOCUMENT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CHECKLIST_ITEM_HIST
PRINT N'Alter table dbo.PIMS_LEASE_CHECKLIST_ITEM_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CHECKLIST_ITEM_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_LEASE_PURPOSE_HIST
PRINT N'Alter table dbo.PIMS_LEASE_LEASE_PURPOSE_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_LEASE_PURPOSE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_SECURITY_DEPOSIT_HOLDER_HIST
PRINT N'Alter table dbo.PIMS_SECURITY_DEPOSIT_HOLDER_HIST'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_HIST
PRINT N'Alter table dbo.PIMS_DOCUMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT_PERSON_HIST
PRINT N'Alter table dbo.PIMS_PROJECT_PERSON_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PERSON_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COMP_REQ_FINANCIAL_HIST
PRINT N'Alter table dbo.PIMS_COMP_REQ_FINANCIAL_HIST'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_FINANCIAL_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ORGANIZATION_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_ORGANIZATION_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_RESEARCH_FILE_NOTE_HIST
PRINT N'Alter table dbo.PIMS_RESEARCH_FILE_NOTE_HIST'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_NOTE_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_CHECKLIST_ITEM_HIST
PRINT N'Alter table dbo.PIMS_DISPOSITION_CHECKLIST_ITEM_HIST'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_CHECKLIST_ITEM_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROP_ACT_INVOLVED_PARTY_HIST
PRINT N'Alter table dbo.PIMS_PROP_ACT_INVOLVED_PARTY_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY_HIST] ALTER COLUMN [CONCURRENCY_CONTROL_NUMBER] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DOCQUE_ACQUISITION_FILE_DOCUMENT_ID_IDX
PRINT N'Create index dbo.DOCQUE_ACQUISITION_FILE_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DOCQUE_ACQUISITION_FILE_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DOCUMENT_QUEUE]([ACQUISITION_FILE_DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DOCQUE_DISPOSITION_FILE_DOCUMENT_ID_IDX
PRINT N'Create index dbo.DOCQUE_DISPOSITION_FILE_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DOCQUE_DISPOSITION_FILE_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DOCUMENT_QUEUE]([DISPOSITION_FILE_DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DOCQUE_RESEARCH_FILE_DOCUMENT_ID_IDX
PRINT N'Create index dbo.DOCQUE_RESEARCH_FILE_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DOCQUE_RESEARCH_FILE_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DOCUMENT_QUEUE]([RESEARCH_FILE_DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DOCQUE_PROPERTY_ACTIVITY_DOCUMENT_ID_IDX
PRINT N'Create index dbo.DOCQUE_PROPERTY_ACTIVITY_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DOCQUE_PROPERTY_ACTIVITY_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DOCUMENT_QUEUE]([PROPERTY_ACTIVITY_DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DOCQUE_LEASE_DOCUMENT_ID_IDX
PRINT N'Create index dbo.DOCQUE_LEASE_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DOCQUE_LEASE_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DOCUMENT_QUEUE]([LEASE_DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCSTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCSTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCSTY_I_S_U_TR] ON PIMS_DOCUMENT_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DOCUMENT_STATUS_TYPE
    set "DOCUMENT_STATUS_TYPE_CODE" = inserted."DOCUMENT_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_STATUS_TYPE
    inner join inserted
    on (PIMS_DOCUMENT_STATUS_TYPE.DOCUMENT_STATUS_TYPE_CODE = inserted.DOCUMENT_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LLPURP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LLPURP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LLPURP_I_S_U_TR] ON PIMS_LEASE_LEASE_PURPOSE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_LEASE_PURPOSE
    set "LEASE_LEASE_PURPOSE_ID" = inserted."LEASE_LEASE_PURPOSE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_PURPOSE_TYPE_CODE" = inserted."LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PURPOSE_OTHER_DESC" = inserted."LEASE_PURPOSE_OTHER_DESC",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_LEASE_PURPOSE
    inner join inserted
    on (PIMS_LEASE_LEASE_PURPOSE.LEASE_LEASE_PURPOSE_ID = inserted.LEASE_LEASE_PURPOSE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_USERTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_USERTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_USERTY_I_S_U_TR] ON PIMS_USER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_USER_TYPE
    set "USER_TYPE_CODE" = inserted."USER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER_TYPE
    inner join inserted
    on (PIMS_USER_TYPE.USER_TYPE_CODE = inserted.USER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSPRGT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSPRGT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSPRGT_I_S_U_TR] ON PIMS_LEASE_PROGRAM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_PROGRAM_TYPE
    set "LEASE_PROGRAM_TYPE_CODE" = inserted."LEASE_PROGRAM_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PROGRAM_TYPE
    inner join inserted
    on (PIMS_LEASE_PROGRAM_TYPE.LEASE_PROGRAM_TYPE_CODE = inserted.LEASE_PROGRAM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNOT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQNOT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNOT_I_S_U_TR] ON PIMS_ACQUISITION_FILE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACQUISITION_FILE_NOTE
    set "ACQUISITION_FILE_NOTE_ID" = inserted."ACQUISITION_FILE_NOTE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE_NOTE
    inner join inserted
    on (PIMS_ACQUISITION_FILE_NOTE.ACQUISITION_FILE_NOTE_ID = inserted.ACQUISITION_FILE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SECDEP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_SECDEP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SECDEP_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_SECURITY_DEPOSIT
    set "SECURITY_DEPOSIT_ID" = inserted."SECURITY_DEPOSIT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE" = inserted."SECURITY_DEPOSIT_TYPE_CODE",
      "OTHER_DEPOSIT_TYPE_DESC" = inserted."OTHER_DEPOSIT_TYPE_DESC",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "AMOUNT_PAID" = inserted."AMOUNT_PAID",
      "DEPOSIT_DATE" = inserted."DEPOSIT_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT.SECURITY_DEPOSIT_ID = inserted.SECURITY_DEPOSIT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPIDT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPIDT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPIDT_I_S_U_TR] ON PIMS_DISPOSITION_INITIATING_DOC_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISPOSITION_INITIATING_DOC_TYPE
    set "DISPOSITION_INITIATING_DOC_TYPE_CODE" = inserted."DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_INITIATING_DOC_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_INITIATING_DOC_TYPE.DISPOSITION_INITIATING_DOC_TYPE_CODE = inserted.DISPOSITION_INITIATING_DOC_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CLMTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CLMTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CLMTYP_I_S_U_TR] ON PIMS_CLAIM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_CLAIM
    set "CLAIM_ID" = inserted."CLAIM_ID",
      "CLAIM_UID" = inserted."CLAIM_UID",
      "KEYCLOAK_ROLE_ID" = inserted."KEYCLOAK_ROLE_ID",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CLAIM
    inner join inserted
    on (PIMS_CLAIM.CLAIM_ID = inserted.CLAIM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACRQST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACRQST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACRQST_I_S_U_TR] ON PIMS_ACCESS_REQUEST INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACCESS_REQUEST
    set "ACCESS_REQUEST_ID" = inserted."ACCESS_REQUEST_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "USER_TYPE_CODE" = inserted."USER_TYPE_CODE",
      "ACCESS_REQUEST_STATUS_TYPE_CODE" = inserted."ACCESS_REQUEST_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST
    inner join inserted
    on (PIMS_ACCESS_REQUEST.ACCESS_REQUEST_ID = inserted.ACCESS_REQUEST_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_FINACT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_FINACT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_FINACT_I_S_U_TR] ON PIMS_FINANCIAL_ACTIVITY_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_FINANCIAL_ACTIVITY_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_FINANCIAL_ACTIVITY_CODE
    inner join inserted
    on (PIMS_FINANCIAL_ACTIVITY_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSHPRT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RSHPRT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSHPRT_I_S_U_TR] ON PIMS_RESEARCH_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_RESEARCH_PURPOSE_TYPE
    set "RESEARCH_PURPOSE_TYPE_CODE" = inserted."RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_PURPOSE_TYPE
    inner join inserted
    on (PIMS_RESEARCH_PURPOSE_TYPE.RESEARCH_PURPOSE_TYPE_CODE = inserted.RESEARCH_PURPOSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQFTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQFTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQFTY_I_S_U_TR] ON PIMS_ACQUISITION_FUNDING_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACQUISITION_FUNDING_TYPE
    set "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FUNDING_TYPE
    inner join inserted
    on (PIMS_ACQUISITION_FUNDING_TYPE.ACQUISITION_FUNDING_TYPE_CODE = inserted.ACQUISITION_FUNDING_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DISPFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DISPFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DISPFL_I_S_U_TR] ON PIMS_DISPOSITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISPOSITION_FILE
    set "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DISPOSITION_STATUS_TYPE_CODE" = inserted."DISPOSITION_STATUS_TYPE_CODE",
      "DISPOSITION_FILE_STATUS_TYPE_CODE" = inserted."DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DISPOSITION_TYPE_CODE" = inserted."DISPOSITION_TYPE_CODE",
      "DISPOSITION_FUNDING_TYPE_CODE" = inserted."DISPOSITION_FUNDING_TYPE_CODE",
      "DISPOSITION_INITIATING_DOC_TYPE_CODE" = inserted."DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DSP_PHYS_FILE_STATUS_TYPE_CODE" = inserted."DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DSP_INITIATING_BRANCH_TYPE_CODE" = inserted."DSP_INITIATING_BRANCH_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_REFERENCE" = inserted."FILE_REFERENCE",
      "OTHER_DISPOSITION_TYPE" = inserted."OTHER_DISPOSITION_TYPE",
      "OTHER_INITIATING_DOC_TYPE" = inserted."OTHER_INITIATING_DOC_TYPE",
      "ASSIGNED_DT" = inserted."ASSIGNED_DT",
      "COMPLETED_DT" = inserted."COMPLETED_DT",
      "INITIATING_DOCUMENT_DT" = inserted."INITIATING_DOCUMENT_DT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE
    inner join inserted
    on (PIMS_DISPOSITION_FILE.DISPOSITION_FILE_ID = inserted.DISPOSITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCTYP_I_S_U_TR] ON PIMS_DOCUMENT_TYP INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DOCUMENT_TYP
    set "DOCUMENT_TYPE_ID" = inserted."DOCUMENT_TYPE_ID",
      "MAYAN_ID" = inserted."MAYAN_ID",
      "DOCUMENT_TYPE" = inserted."DOCUMENT_TYPE",
      "DOCUMENT_TYPE_DESCRIPTION" = inserted."DOCUMENT_TYPE_DESCRIPTION",
      "DOCUMENT_TYPE_DEFINITION" = inserted."DOCUMENT_TYPE_DEFINITION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_TYP
    inner join inserted
    on (PIMS_DOCUMENT_TYP.DOCUMENT_TYPE_ID = inserted.DOCUMENT_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PROVNC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PROVNC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PROVNC_I_S_U_TR] ON PIMS_PROVINCE_STATE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROVINCE_STATE
    set "PROVINCE_STATE_ID" = inserted."PROVINCE_STATE_ID",
      "COUNTRY_ID" = inserted."COUNTRY_ID",
      "PROVINCE_STATE_CODE" = inserted."PROVINCE_STATE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROVINCE_STATE
    inner join inserted
    on (PIMS_PROVINCE_STATE.PROVINCE_STATE_ID = inserted.PROVINCE_STATE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CONSTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CONSTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CONSTY_I_S_U_TR] ON PIMS_CONSULTATION_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_CONSULTATION_STATUS_TYPE
    set "CONSULTATION_STATUS_TYPE_CODE" = inserted."CONSULTATION_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONSULTATION_STATUS_TYPE
    inner join inserted
    on (PIMS_CONSULTATION_STATUS_TYPE.CONSULTATION_STATUS_TYPE_CODE = inserted.CONSULTATION_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SBFLIT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_SBFLIT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SBFLIT_I_S_U_TR] ON PIMS_SUBFILE_INTEREST_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_SUBFILE_INTEREST_TYPE
    set "SUBFILE_INTEREST_TYPE_CODE" = inserted."SUBFILE_INTEREST_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SUBFILE_INTEREST_TYPE
    inner join inserted
    on (PIMS_SUBFILE_INTEREST_TYPE.SUBFILE_INTEREST_TYPE_CODE = inserted.SUBFILE_INTEREST_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PACSTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PACSTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PACSTY_I_S_U_TR] ON PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE
    set "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE
    inner join inserted
    on (PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE.PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE = inserted.PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACRQOR_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACRQOR_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACRQOR_I_S_U_TR] ON PIMS_ACCESS_REQUEST_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACCESS_REQUEST_ORGANIZATION
    set "ACCESS_REQUEST_ORGANIZATION_ID" = inserted."ACCESS_REQUEST_ORGANIZATION_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "ACCESS_REQUEST_ID" = inserted."ACCESS_REQUEST_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST_ORGANIZATION
    inner join inserted
    on (PIMS_ACCESS_REQUEST_ORGANIZATION.ACCESS_REQUEST_ORGANIZATION_ID = inserted.ACCESS_REQUEST_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPFST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPFST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPFST_I_S_U_TR] ON PIMS_DISPOSITION_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISPOSITION_FILE_STATUS_TYPE
    set "DISPOSITION_FILE_STATUS_TYPE_CODE" = inserted."DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_FILE_STATUS_TYPE.DISPOSITION_FILE_STATUS_TYPE_CODE = inserted.DISPOSITION_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_IHPRIN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_IHPRIN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_IHPRIN_I_S_U_TR] ON PIMS_INTHLDR_PROP_INTEREST INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_INTHLDR_PROP_INTEREST
    set "PIMS_INTHLDR_PROP_INTEREST_ID" = inserted."PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INTHLDR_PROP_INTEREST
    inner join inserted
    on (PIMS_INTHLDR_PROP_INTEREST.PIMS_INTHLDR_PROP_INTEREST_ID = inserted.PIMS_INTHLDR_PROP_INTEREST_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ADDRSS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ADDRSS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ADDRSS_I_S_U_TR] ON PIMS_ADDRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ADDRESS
    set "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROVINCE_STATE_ID" = inserted."PROVINCE_STATE_ID",
      "COUNTRY_ID" = inserted."COUNTRY_ID",
      "STREET_ADDRESS_1" = inserted."STREET_ADDRESS_1",
      "STREET_ADDRESS_2" = inserted."STREET_ADDRESS_2",
      "STREET_ADDRESS_3" = inserted."STREET_ADDRESS_3",
      "MUNICIPALITY_NAME" = inserted."MUNICIPALITY_NAME",
      "POSTAL_CODE" = inserted."POSTAL_CODE",
      "OTHER_COUNTRY" = inserted."OTHER_COUNTRY",
      "LATITUDE" = inserted."LATITUDE",
      "LONGITUDE" = inserted."LONGITUDE",
      "COMMENT" = inserted."COMMENT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ADDRESS
    inner join inserted
    on (PIMS_ADDRESS.ADDRESS_ID = inserted.ADDRESS_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKSTST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TKSTST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKSTST_I_S_U_TR] ON PIMS_TAKE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_TAKE_STATUS_TYPE
    set "TAKE_STATUS_TYPE_CODE" = inserted."TAKE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE_STATUS_TYPE
    inner join inserted
    on (PIMS_TAKE_STATUS_TYPE.TAKE_STATUS_TYPE_CODE = inserted.TAKE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_IHINTT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_IHINTT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_IHINTT_I_S_U_TR] ON PIMS_INTEREST_HOLDER_INTEREST_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_INTEREST_HOLDER_INTEREST_TYPE
    set "INTEREST_HOLDER_INTEREST_TYPE_CODE" = inserted."INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INTEREST_HOLDER_INTEREST_TYPE
    inner join inserted
    on (PIMS_INTEREST_HOLDER_INTEREST_TYPE.INTEREST_HOLDER_INTEREST_TYPE_CODE = inserted.INTEREST_HOLDER_INTEREST_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PLCMRQ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PLCMRQ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PLCMRQ_I_S_U_TR] ON PIMS_PROP_LEASE_COMP_REQ INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROP_LEASE_COMP_REQ
    set "PROP_LEASE_COMP_REQ_ID" = inserted."PROP_LEASE_COMP_REQ_ID",
      "PROPERTY_LEASE_ID" = inserted."PROPERTY_LEASE_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_LEASE_COMP_REQ
    inner join inserted
    on (PIMS_PROP_LEASE_COMP_REQ.PROP_LEASE_COMP_REQ_ID = inserted.PROP_LEASE_COMP_REQ_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PIMPRT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PIMPRT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PIMPRT_I_S_U_TR] ON PIMS_PROPERTY_IMPROVEMENT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_IMPROVEMENT_TYPE
    set "PROPERTY_IMPROVEMENT_TYPE_CODE" = inserted."PROPERTY_IMPROVEMENT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_IMPROVEMENT_TYPE
    inner join inserted
    on (PIMS_PROPERTY_IMPROVEMENT_TYPE.PROPERTY_IMPROVEMENT_TYPE_CODE = inserted.PROPERTY_IMPROVEMENT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPSL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPPSL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPSL_I_S_U_TR] ON PIMS_DSP_PURCH_SOLICITOR INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DSP_PURCH_SOLICITOR
    set "DSP_PURCH_SOLICITOR_ID" = inserted."DSP_PURCH_SOLICITOR_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_PURCH_SOLICITOR
    inner join inserted
    on (PIMS_DSP_PURCH_SOLICITOR.DSP_PURCH_SOLICITOR_ID = inserted.DSP_PURCH_SOLICITOR_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LESDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESDOC_I_S_U_TR] ON PIMS_LEASE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_DOCUMENT
    set "LEASE_DOCUMENT_ID" = inserted."LEASE_DOCUMENT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_DOCUMENT
    inner join inserted
    on (PIMS_LEASE_DOCUMENT.LEASE_DOCUMENT_ID = inserted.LEASE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSPMMT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSPMMT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSPMMT_I_S_U_TR] ON PIMS_LEASE_PAYMENT_METHOD_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_PAYMENT_METHOD_TYPE
    set "LEASE_PAYMENT_METHOD_TYPE_CODE" = inserted."LEASE_PAYMENT_METHOD_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAYMENT_METHOD_TYPE
    inner join inserted
    on (PIMS_LEASE_PAYMENT_METHOD_TYPE.LEASE_PAYMENT_METHOD_TYPE_CODE = inserted.LEASE_PAYMENT_METHOD_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSTKHL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSTKHL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSTKHL_I_S_U_TR] ON PIMS_LEASE_STAKEHOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_STAKEHOLDER
    set "LEASE_STAKEHOLDER_ID" = inserted."LEASE_STAKEHOLDER_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "LESSOR_TYPE_CODE" = inserted."LESSOR_TYPE_CODE",
      "LEASE_STAKEHOLDER_TYPE_CODE" = inserted."LEASE_STAKEHOLDER_TYPE_CODE",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_STAKEHOLDER
    inner join inserted
    on (PIMS_LEASE_STAKEHOLDER.LEASE_STAKEHOLDER_ID = inserted.LEASE_STAKEHOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSRNWL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSRNWL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSRNWL_I_S_U_TR] ON PIMS_LEASE_RENEWAL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_RENEWAL
    set "LEASE_RENEWAL_ID" = inserted."LEASE_RENEWAL_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "COMMENCEMENT_DT" = inserted."COMMENCEMENT_DT",
      "EXPIRY_DT" = inserted."EXPIRY_DT",
      "IS_EXERCISED" = inserted."IS_EXERCISED",
      "RENEWAL_NOTE" = inserted."RENEWAL_NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_RENEWAL
    inner join inserted
    on (PIMS_LEASE_RENEWAL.LEASE_RENEWAL_ID = inserted.LEASE_RENEWAL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPAG_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPPAG_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPAG_I_S_U_TR] ON PIMS_DSP_PURCH_AGENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DSP_PURCH_AGENT
    set "DSP_PURCH_AGENT_ID" = inserted."DSP_PURCH_AGENT_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_PURCH_AGENT
    inner join inserted
    on (PIMS_DSP_PURCH_AGENT.DSP_PURCH_AGENT_ID = inserted.DSP_PURCH_AGENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPTYP_I_S_U_TR] ON PIMS_DISPOSITION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISPOSITION_TYPE
    set "DISPOSITION_TYPE_CODE" = inserted."DISPOSITION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_TYPE.DISPOSITION_TYPE_CODE = inserted.DISPOSITION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPFS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQPFS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPFS_I_S_U_TR] ON PIMS_ACQ_PHYS_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACQ_PHYS_FILE_STATUS_TYPE
    set "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_PHYS_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_ACQ_PHYS_FILE_STATUS_TYPE.ACQ_PHYS_FILE_STATUS_TYPE_CODE = inserted.ACQ_PHYS_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRANOM_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRANOM_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRANOM_I_S_U_TR] ON PIMS_PROPERTY_ANOMALY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_ANOMALY_TYPE
    set "PROPERTY_ANOMALY_TYPE_CODE" = inserted."PROPERTY_ANOMALY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ANOMALY_TYPE
    inner join inserted
    on (PIMS_PROPERTY_ANOMALY_TYPE.PROPERTY_ANOMALY_TYPE_CODE = inserted.PROPERTY_ANOMALY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSRCHS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RSRCHS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSRCHS_I_S_U_TR] ON PIMS_RESEARCH_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_RESEARCH_FILE_STATUS_TYPE
    set "RESEARCH_FILE_STATUS_TYPE_CODE" = inserted."RESEARCH_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_RESEARCH_FILE_STATUS_TYPE.RESEARCH_FILE_STATUS_TYPE_CODE = inserted.RESEARCH_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LELIST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LELIST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LELIST_I_S_U_TR] ON PIMS_LEASE_LICENSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_LICENSE_TYPE
    set "LEASE_LICENSE_TYPE_CODE" = inserted."LEASE_LICENSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_LICENSE_TYPE
    inner join inserted
    on (PIMS_LEASE_LICENSE_TYPE.LEASE_LICENSE_TYPE_CODE = inserted.LEASE_LICENSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_OUTCMT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_OUTCMT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_OUTCMT_I_S_U_TR] ON PIMS_CONSULTATION_OUTCOME_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_CONSULTATION_OUTCOME_TYPE
    set "CONSULTATION_OUTCOME_TYPE_CODE" = inserted."CONSULTATION_OUTCOME_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONSULTATION_OUTCOME_TYPE
    inner join inserted
    on (PIMS_CONSULTATION_OUTCOME_TYPE.CONSULTATION_OUTCOME_TYPE_CODE = inserted.CONSULTATION_OUTCOME_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AGRTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AGRTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AGRTYP_I_S_U_TR] ON PIMS_AGREEMENT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_AGREEMENT_TYPE
    set "AGREEMENT_TYPE_CODE" = inserted."AGREEMENT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_AGREEMENT_TYPE
    inner join inserted
    on (PIMS_AGREEMENT_TYPE.AGREEMENT_TYPE_CODE = inserted.AGREEMENT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSSTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSSTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSSTYP_I_S_U_TR] ON PIMS_LEASE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_STATUS_TYPE
    set "LEASE_STATUS_TYPE_CODE" = inserted."LEASE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_STATUS_TYPE.LEASE_STATUS_TYPE_CODE = inserted.LEASE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRJDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJDOC_I_S_U_TR] ON PIMS_PROJECT_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROJECT_DOCUMENT
    set "PROJECT_DOCUMENT_ID" = inserted."PROJECT_DOCUMENT_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_DOCUMENT
    inner join inserted
    on (PIMS_PROJECT_DOCUMENT.PROJECT_DOCUMENT_ID = inserted.PROJECT_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CONTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CONTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CONTYP_I_S_U_TR] ON PIMS_CONSULTATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_CONSULTATION_TYPE
    set "CONSULTATION_TYPE_CODE" = inserted."CONSULTATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "OTHER_DESCRIPTION" = inserted."OTHER_DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONSULTATION_TYPE
    inner join inserted
    on (PIMS_CONSULTATION_TYPE.CONSULTATION_TYPE_CODE = inserted.CONSULTATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCKI_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPCKI_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCKI_I_S_U_TR] ON PIMS_DISPOSITION_CHECKLIST_ITEM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISPOSITION_CHECKLIST_ITEM
    set "DISPOSITION_CHECKLIST_ITEM_ID" = inserted."DISPOSITION_CHECKLIST_ITEM_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DSP_CHKLST_ITEM_TYPE_CODE" = inserted."DSP_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_CHECKLIST_ITEM
    inner join inserted
    on (PIMS_DISPOSITION_CHECKLIST_ITEM.DISPOSITION_CHECKLIST_ITEM_ID = inserted.DISPOSITION_CHECKLIST_ITEM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPUR_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPPUR_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPUR_I_S_U_TR] ON PIMS_DISPOSITION_PURCHASER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISPOSITION_PURCHASER
    set "DISPOSITION_PURCHASER_ID" = inserted."DISPOSITION_PURCHASER_ID",
      "DISPOSITION_SALE_ID" = inserted."DISPOSITION_SALE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_PURCHASER
    inner join inserted
    on (PIMS_DISPOSITION_PURCHASER.DISPOSITION_PURCHASER_ID = inserted.DISPOSITION_PURCHASER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPACT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPACT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPACT_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_ACTIVITY
    set "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_TYPE_CODE",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID" = inserted."SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID" = inserted."SERVICE_PROVIDER_ORG_ID",
      "REQUEST_ADDED_DT" = inserted."REQUEST_ADDED_DT",
      "COMPLETION_DT" = inserted."COMPLETION_DT",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "REQUEST_SOURCE" = inserted."REQUEST_SOURCE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY.PIMS_PROPERTY_ACTIVITY_ID = inserted.PIMS_PROPERTY_ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPOFT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPOFT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPOFT_I_S_U_TR] ON PIMS_DISPOSITION_OFFER_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISPOSITION_OFFER_STATUS_TYPE
    set "DISPOSITION_OFFER_STATUS_TYPE_CODE" = inserted."DISPOSITION_OFFER_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_OFFER_STATUS_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_OFFER_STATUS_TYPE.DISPOSITION_OFFER_STATUS_TYPE_CODE = inserted.DISPOSITION_OFFER_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PROPOP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PROPOP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PROPOP_I_S_U_TR] ON PIMS_PROPERTY_OPERATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_OPERATION
    set "PROPERTY_OPERATION_ID" = inserted."PROPERTY_OPERATION_ID",
      "SOURCE_PROPERTY_ID" = inserted."SOURCE_PROPERTY_ID",
      "DESTINATION_PROPERTY_ID" = inserted."DESTINATION_PROPERTY_ID",
      "PROPERTY_OPERATION_TYPE_CODE" = inserted."PROPERTY_OPERATION_TYPE_CODE",
      "PROPERTY_OPERATION_NO" = inserted."PROPERTY_OPERATION_NO",
      "OPERATION_DT" = inserted."OPERATION_DT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_OPERATION
    inner join inserted
    on (PIMS_PROPERTY_OPERATION.PROPERTY_OPERATION_ID = inserted.PROPERTY_OPERATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRTT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTT_I_S_U_TR] ON PIMS_PROP_PROP_TENURE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROP_PROP_TENURE_TYPE
    set "PROP_PROP_TENURE_TYPE_ID" = inserted."PROP_PROP_TENURE_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_TENURE_TYPE_CODE" = inserted."PROPERTY_TENURE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_TENURE_TYPE
    inner join inserted
    on (PIMS_PROP_PROP_TENURE_TYPE.PROP_PROP_TENURE_TYPE_ID = inserted.PROP_PROP_TENURE_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQFST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQFST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQFST_I_S_U_TR] ON PIMS_ACQUISITION_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACQUISITION_FILE_STATUS_TYPE
    set "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_ACQUISITION_FILE_STATUS_TYPE.ACQUISITION_FILE_STATUS_TYPE_CODE = inserted.ACQUISITION_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_U_TR] ON PIMS_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE
    set "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE" = inserted."LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE" = inserted."LEASE_LICENSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE" = inserted."LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE" = inserted."LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE" = inserted."LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE" = inserted."LEASE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "L_FILE_NO" = inserted."L_FILE_NO",
      "TFA_FILE_NO" = inserted."TFA_FILE_NO",
      "TFA_FILE_NUMBER" = inserted."TFA_FILE_NUMBER",
      "PS_FILE_NO" = inserted."PS_FILE_NO",
      "LEASE_DESCRIPTION" = inserted."LEASE_DESCRIPTION",
      "LEASE_NOTES" = inserted."LEASE_NOTES",
      "MOTI_CONTACT" = inserted."MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE" = inserted."DOCUMENTATION_REFERENCE",
      "RETURN_NOTES" = inserted."RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE" = inserted."OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE" = inserted."OTHER_LEASE_LICENSE_TYPE",
      "ORIG_START_DATE" = inserted."ORIG_START_DATE",
      "ORIG_EXPIRY_DATE" = inserted."ORIG_EXPIRY_DATE",
      "TERMINATION_DATE" = inserted."TERMINATION_DATE",
      "LEASE_AMOUNT" = inserted."LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE" = inserted."RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE" = inserted."INSPECTION_DATE",
      "INSPECTION_NOTES" = inserted."INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA" = inserted."IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG" = inserted."IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT" = inserted."IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED" = inserted."IS_EXPIRED",
      "HAS_PHYSICAL_FILE" = inserted."HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE" = inserted."HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE" = inserted."HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE" = inserted."HAS_DIGITAL_LICENSE",
      "CANCELLATION_REASON" = inserted."CANCELLATION_REASON",
      "TERMINATION_REASON" = inserted."TERMINATION_REASON",
      "IS_PUBLIC_BENEFIT" = inserted."IS_PUBLIC_BENEFIT",
      "IS_FINANCIAL_GAIN" = inserted."IS_FINANCIAL_GAIN",
      "FEE_DETERMINATION_NOTE" = inserted."FEE_DETERMINATION_NOTE",
      "PRIMARY_ARBITRATION_CITY" = inserted."PRIMARY_ARBITRATION_CITY",
      "TOTAL_ALLOWABLE_COMPENSATION" = inserted."TOTAL_ALLOWABLE_COMPENSATION",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE
    inner join inserted
    on (PIMS_LEASE.LEASE_ID = inserted.LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INSPYT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_INSPYT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INSPYT_I_S_U_TR] ON PIMS_INSURANCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_INSURANCE_TYPE
    set "INSURANCE_TYPE_CODE" = inserted."INSURANCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INSURANCE_TYPE
    inner join inserted
    on (PIMS_INSURANCE_TYPE.INSURANCE_TYPE_CODE = inserted.INSURANCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RESPCD_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RESPCD_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RESPCD_I_S_U_TR] ON PIMS_RESPONSIBILITY_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_RESPONSIBILITY_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESPONSIBILITY_CODE
    inner join inserted
    on (PIMS_RESPONSIBILITY_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_HFLNMT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_HFLNMT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_HFLNMT_I_S_U_TR] ON PIMS_HISTORICAL_FILE_NUMBER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_HISTORICAL_FILE_NUMBER_TYPE
    set "HISTORICAL_FILE_NUMBER_TYPE_CODE" = inserted."HISTORICAL_FILE_NUMBER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_HISTORICAL_FILE_NUMBER_TYPE
    inner join inserted
    on (PIMS_HISTORICAL_FILE_NUMBER_TYPE.HISTORICAL_FILE_NUMBER_TYPE_CODE = inserted.HISTORICAL_FILE_NUMBER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPCNT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPCNT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPCNT_I_S_U_TR] ON PIMS_PROPERTY_CONTACT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_CONTACT
    set "PROPERTY_CONTACT_ID" = inserted."PROPERTY_CONTACT_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "PURPOSE" = inserted."PURPOSE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_CONTACT
    inner join inserted
    on (PIMS_PROPERTY_CONTACT.PROPERTY_CONTACT_ID = inserted.PROPERTY_CONTACT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJNOT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRJNOT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJNOT_I_S_U_TR] ON PIMS_PROJECT_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROJECT_NOTE
    set "PROJECT_NOTE_ID" = inserted."PROJECT_NOTE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_NOTE
    inner join inserted
    on (PIMS_PROJECT_NOTE.PROJECT_NOTE_ID = inserted.PROJECT_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PMTITM_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PMTITM_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PMTITM_I_S_U_TR] ON PIMS_PAYMENT_ITEM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PAYMENT_ITEM_TYPE
    set "PAYMENT_ITEM_TYPE_CODE" = inserted."PAYMENT_ITEM_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PAYMENT_ITEM_TYPE
    inner join inserted
    on (PIMS_PAYMENT_ITEM_TYPE.PAYMENT_ITEM_TYPE_CODE = inserted.PAYMENT_ITEM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACMC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACMC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACMC_I_S_U_TR] ON PIMS_PROP_ACT_MIN_CONTACT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROP_ACT_MIN_CONTACT
    set "PROP_ACT_MIN_CONTACT_ID" = inserted."PROP_ACT_MIN_CONTACT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_ACT_MIN_CONTACT
    inner join inserted
    on (PIMS_PROP_ACT_MIN_CONTACT.PROP_ACT_MIN_CONTACT_ID = inserted.PROP_ACT_MIN_CONTACT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_USERRL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_USERRL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_USERRL_I_S_U_TR] ON PIMS_USER_ROLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_USER_ROLE
    set "USER_ROLE_ID" = inserted."USER_ROLE_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER_ROLE
    inner join inserted
    on (PIMS_USER_ROLE.USER_ROLE_ID = inserted.USER_ROLE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CNTMTT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CNTMTT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CNTMTT_I_S_U_TR] ON PIMS_CONTACT_METHOD_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_CONTACT_METHOD_TYPE
    set "CONTACT_METHOD_TYPE_CODE" = inserted."CONTACT_METHOD_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONTACT_METHOD_TYPE
    inner join inserted
    on (PIMS_CONTACT_METHOD_TYPE.CONTACT_METHOD_TYPE_CODE = inserted.CONTACT_METHOD_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJPRD_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRJPRD_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJPRD_A_S_IUD_TR] ON PIMS_PROJECT_PRODUCT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_PRODUCT_HIST set END_DATE_HIST = @curr_date where PROJECT_PRODUCT_ID in (select PROJECT_PRODUCT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_PRODUCT_HIST ([PROJECT_PRODUCT_ID], [PROJECT_ID], [PRODUCT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_PRODUCT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_PRODUCT_ID], [PROJECT_ID], [PRODUCT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_PRODUCT_H_ID_SEQ]) as [_PROJECT_PRODUCT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PIHITY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PIHITY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PIHITY_I_S_U_TR] ON PIMS_PROP_INTHLDR_INTEREST_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROP_INTHLDR_INTEREST_TYPE
    set "PROP_INTHLDR_INTEREST_TYPE_ID" = inserted."PROP_INTHLDR_INTEREST_TYPE_ID",
      "PIMS_INTHLDR_PROP_INTEREST_ID" = inserted."PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_INTEREST_TYPE_CODE" = inserted."INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_INTHLDR_INTEREST_TYPE
    inner join inserted
    on (PIMS_PROP_INTHLDR_INTEREST_TYPE.PROP_INTHLDR_INTEREST_TYPE_ID = inserted.PROP_INTHLDR_INTEREST_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_STAVBL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_STAVBL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_STAVBL_I_S_U_TR] ON PIMS_STATIC_VARIABLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_STATIC_VARIABLE
    set "STATIC_VARIABLE_NAME" = inserted."STATIC_VARIABLE_NAME",
      "STATIC_VARIABLE_VALUE" = inserted."STATIC_VARIABLE_VALUE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_STATIC_VARIABLE
    inner join inserted
    on (PIMS_STATIC_VARIABLE.STATIC_VARIABLE_NAME = inserted.STATIC_VARIABLE_NAME);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCQUE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DOCQUE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCQUE_I_S_I_TR] ON PIMS_DOCUMENT_QUEUE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_QUEUE ("DOCUMENT_QUEUE_ID",
      "DOCUMENT_ID",
      "DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DATA_SOURCE_TYPE_CODE",
      "PROPERTY_ACTIVITY_DOCUMENT_ID",
      "ACQUISITION_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_DOCUMENT_ID",
      "LEASE_DOCUMENT_ID",
      "DISPOSITION_FILE_DOCUMENT_ID",
      "DOCUMENT_EXTERNAL_ID",
      "DOCUMENT_METADATA",
      "DOC_PROCESS_START_DT",
      "DOC_PROCESS_END_DT",
      "DOC_PROCESS_RETRIES",
      "MAYAN_ERROR",
      "DOCUMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DOCUMENT_QUEUE_ID",
      "DOCUMENT_ID",
      "DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DATA_SOURCE_TYPE_CODE",
      "PROPERTY_ACTIVITY_DOCUMENT_ID",
      "ACQUISITION_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_DOCUMENT_ID",
      "LEASE_DOCUMENT_ID",
      "DISPOSITION_FILE_DOCUMENT_ID",
      "DOCUMENT_EXTERNAL_ID",
      "DOCUMENT_METADATA",
      "DOC_PROCESS_START_DT",
      "DOC_PROCESS_END_DT",
      "DOC_PROCESS_RETRIES",
      "MAYAN_ERROR",
      "DOCUMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCKITY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LCKITY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCKITY_I_S_U_TR] ON PIMS_LEASE_CHKLST_ITEM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_CHKLST_ITEM_TYPE
    set "LEASE_CHKLST_ITEM_TYPE_CODE" = inserted."LEASE_CHKLST_ITEM_TYPE_CODE",
      "LEASE_CHKLST_SECTION_TYPE_CODE" = inserted."LEASE_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "HINT" = inserted."HINT",
      "IS_REQUIRED" = inserted."IS_REQUIRED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CHKLST_ITEM_TYPE
    inner join inserted
    on (PIMS_LEASE_CHKLST_ITEM_TYPE.LEASE_CHKLST_ITEM_TYPE_CODE = inserted.LEASE_CHKLST_ITEM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PERORG_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PERORG_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PERORG_I_S_U_TR] ON PIMS_PERSON_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PERSON_ORGANIZATION
    set "PERSON_ORGANIZATION_ID" = inserted."PERSON_ORGANIZATION_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PERSON_ORGANIZATION
    inner join inserted
    on (PIMS_PERSON_ORGANIZATION.PERSON_ORGANIZATION_ID = inserted.PERSON_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LNSRVT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LNSRVT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LNSRVT_I_S_U_TR] ON PIMS_LAND_SURVEYOR_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LAND_SURVEYOR_TYPE
    set "LAND_SURVEYOR_TYPE_CODE" = inserted."LAND_SURVEYOR_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LAND_SURVEYOR_TYPE
    inner join inserted
    on (PIMS_LAND_SURVEYOR_TYPE.LAND_SURVEYOR_TYPE_CODE = inserted.LAND_SURVEYOR_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SDRTRN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_SDRTRN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SDRTRN_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT_RETURN INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_SECURITY_DEPOSIT_RETURN
    set "SECURITY_DEPOSIT_RETURN_ID" = inserted."SECURITY_DEPOSIT_RETURN_ID",
      "SECURITY_DEPOSIT_ID" = inserted."SECURITY_DEPOSIT_ID",
      "TERMINATION_DATE" = inserted."TERMINATION_DATE",
      "CLAIMS_AGAINST" = inserted."CLAIMS_AGAINST",
      "RETURN_AMOUNT" = inserted."RETURN_AMOUNT",
      "RETURN_DATE" = inserted."RETURN_DATE",
      "INTEREST_PAID" = inserted."INTEREST_PAID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_RETURN
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_RETURN.SECURITY_DEPOSIT_RETURN_ID = inserted.SECURITY_DEPOSIT_RETURN_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_NOTE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_NOTE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_NOTE_I_S_U_TR] ON PIMS_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_NOTE
    set "NOTE_ID" = inserted."NOTE_ID",
      "NOTE_TXT" = inserted."NOTE_TXT",
      "IS_SYSTEM_GENERATED" = inserted."IS_SYSTEM_GENERATED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_NOTE
    inner join inserted
    on (PIMS_NOTE.NOTE_ID = inserted.NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLNOT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RFLNOT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RFLNOT_I_S_U_TR] ON PIMS_RESEARCH_FILE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_RESEARCH_FILE_NOTE
    set "RESEARCH_FILE_NOTE_ID" = inserted."RESEARCH_FILE_NOTE_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_NOTE
    inner join inserted
    on (PIMS_RESEARCH_FILE_NOTE.RESEARCH_FILE_NOTE_ID = inserted.RESEARCH_FILE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PERADD_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PERADD_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PERADD_I_S_U_TR] ON PIMS_PERSON_ADDRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PERSON_ADDRESS
    set "PERSON_ADDRESS_ID" = inserted."PERSON_ADDRESS_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE" = inserted."ADDRESS_USAGE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PERSON_ADDRESS
    inner join inserted
    on (PIMS_PERSON_ADDRESS.PERSON_ADDRESS_ID = inserted.PERSON_ADDRESS_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPFTP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPFTP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPFTP_I_S_U_TR] ON PIMS_DSP_FL_TEAM_PROFILE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DSP_FL_TEAM_PROFILE_TYPE
    set "DSP_FL_TEAM_PROFILE_TYPE_CODE" = inserted."DSP_FL_TEAM_PROFILE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_FL_TEAM_PROFILE_TYPE
    inner join inserted
    on (PIMS_DSP_FL_TEAM_PROFILE_TYPE.DSP_FL_TEAM_PROFILE_TYPE_CODE = inserted.DSP_FL_TEAM_PROFILE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKTYPE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TKTYPE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKTYPE_I_S_U_TR] ON PIMS_TAKE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_TAKE_TYPE
    set "TAKE_TYPE_CODE" = inserted."TAKE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE_TYPE
    inner join inserted
    on (PIMS_TAKE_TYPE.TAKE_TYPE_CODE = inserted.TAKE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCCAT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCCAT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCCAT_I_S_U_TR] ON PIMS_DOCUMENT_CATEGORY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DOCUMENT_CATEGORY_TYPE
    set "DOCUMENT_CATEGORY_TYPE_CODE" = inserted."DOCUMENT_CATEGORY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_CATEGORY_TYPE
    inner join inserted
    on (PIMS_DOCUMENT_CATEGORY_TYPE.DOCUMENT_CATEGORY_TYPE_CODE = inserted.DOCUMENT_CATEGORY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPAPP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPAPP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPAPP_I_S_U_TR] ON PIMS_DISPOSITION_APPRAISAL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISPOSITION_APPRAISAL
    set "DISPOSITION_APPRAISAL_ID" = inserted."DISPOSITION_APPRAISAL_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "APPRAISED_AMT" = inserted."APPRAISED_AMT",
      "APPRAISAL_DT" = inserted."APPRAISAL_DT",
      "BCA_VALUE_AMT" = inserted."BCA_VALUE_AMT",
      "BCA_ROLL_YEAR" = inserted."BCA_ROLL_YEAR",
      "LIST_PRICE_AMT" = inserted."LIST_PRICE_AMT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_APPRAISAL
    inner join inserted
    on (PIMS_DISPOSITION_APPRAISAL.DISPOSITION_APPRAISAL_ID = inserted.DISPOSITION_APPRAISAL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ORG_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ORG_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ORG_I_S_U_TR] ON PIMS_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ORGANIZATION
    set "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID" = inserted."PRNT_ORGANIZATION_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE" = inserted."ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE" = inserted."ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER" = inserted."ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME" = inserted."ORGANIZATION_NAME",
      "ORGANIZATION_ALIAS" = inserted."ORGANIZATION_ALIAS",
      "INCORPORATION_NUMBER" = inserted."INCORPORATION_NUMBER",
      "WEBSITE" = inserted."WEBSITE",
      "COMMENT" = inserted."COMMENT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION
    inner join inserted
    on (PIMS_ORGANIZATION.ORGANIZATION_ID = inserted.ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ORGADD_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ORGADD_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ORGADD_I_S_U_TR] ON PIMS_ORGANIZATION_ADDRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ORGANIZATION_ADDRESS
    set "ORGANIZATION_ADDRESS_ID" = inserted."ORGANIZATION_ADDRESS_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE" = inserted."ADDRESS_USAGE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION_ADDRESS
    inner join inserted
    on (PIMS_ORGANIZATION_ADDRESS.ORGANIZATION_ADDRESS_ID = inserted.ORGANIZATION_ADDRESS_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQTYP_I_S_U_TR] ON PIMS_ACQUISITION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACQUISITION_TYPE
    set "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_TYPE
    inner join inserted
    on (PIMS_ACQUISITION_TYPE.ACQUISITION_TYPE_CODE = inserted.ACQUISITION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSKCRQ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSKCRQ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSKCRQ_I_S_U_TR] ON PIMS_LEASE_STAKEHOLDER_COMP_REQ INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_STAKEHOLDER_COMP_REQ
    set "LEASE_STAKEHOLDER_COMP_REQ_ID" = inserted."LEASE_STAKEHOLDER_COMP_REQ_ID",
      "LEASE_STAKEHOLDER_ID" = inserted."LEASE_STAKEHOLDER_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_STAKEHOLDER_COMP_REQ
    inner join inserted
    on (PIMS_LEASE_STAKEHOLDER_COMP_REQ.LEASE_STAKEHOLDER_COMP_REQ_ID = inserted.LEASE_STAKEHOLDER_COMP_REQ_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPNOT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPNOT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPNOT_I_S_U_TR] ON PIMS_DISPOSITION_FILE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISPOSITION_FILE_NOTE
    set "DISPOSITION_FILE_NOTE_ID" = inserted."DISPOSITION_FILE_NOTE_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_NOTE
    inner join inserted
    on (PIMS_DISPOSITION_FILE_NOTE.DISPOSITION_FILE_NOTE_ID = inserted.DISPOSITION_FILE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPSTS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPSTS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPSTS_I_S_U_TR] ON PIMS_PROPERTY_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_STATUS_TYPE
    set "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_STATUS_TYPE
    inner join inserted
    on (PIMS_PROPERTY_STATUS_TYPE.PROPERTY_STATUS_TYPE_CODE = inserted.PROPERTY_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPFS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPPFS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPFS_I_S_U_TR] ON PIMS_DSP_PHYS_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DSP_PHYS_FILE_STATUS_TYPE
    set "DSP_PHYS_FILE_STATUS_TYPE_CODE" = inserted."DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_PHYS_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_DSP_PHYS_FILE_STATUS_TYPE.DSP_PHYS_FILE_STATUS_TYPE_CODE = inserted.DSP_PHYS_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPFTM_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPFTM_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPFTM_I_S_U_TR] ON PIMS_DISPOSITION_FILE_TEAM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISPOSITION_FILE_TEAM
    set "DISPOSITION_FILE_TEAM_ID" = inserted."DISPOSITION_FILE_TEAM_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "DSP_FL_TEAM_PROFILE_TYPE_CODE" = inserted."DSP_FL_TEAM_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_TEAM
    inner join inserted
    on (PIMS_DISPOSITION_FILE_TEAM.DISPOSITION_FILE_TEAM_ID = inserted.DISPOSITION_FILE_TEAM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RRESPT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RRESPT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RRESPT_I_S_U_TR] ON PIMS_PROP_RESEARCH_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROP_RESEARCH_PURPOSE_TYPE
    set "PROP_RESEARCH_PURPOSE_TYPE_CODE" = inserted."PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_RESEARCH_PURPOSE_TYPE
    inner join inserted
    on (PIMS_PROP_RESEARCH_PURPOSE_TYPE.PROP_RESEARCH_PURPOSE_TYPE_CODE = inserted.PROP_RESEARCH_PURPOSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AGRSTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AGRSTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AGRSTY_I_S_U_TR] ON PIMS_AGREEMENT_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_AGREEMENT_STATUS_TYPE
    set "AGREEMENT_STATUS_TYPE_CODE" = inserted."AGREEMENT_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_AGREEMENT_STATUS_TYPE
    inner join inserted
    on (PIMS_AGREEMENT_STATUS_TYPE.AGREEMENT_STATUS_TYPE_CODE = inserted.AGREEMENT_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_H120CT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_H120CT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_H120CT_I_S_U_TR] ON PIMS_H120_CATEGORY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_H120_CATEGORY
    set "H120_CATEGORY_ID" = inserted."H120_CATEGORY_ID",
      "FINANCIAL_ACTIVITY_ID" = inserted."FINANCIAL_ACTIVITY_ID",
      "WORK_ACTIVITY_ID" = inserted."WORK_ACTIVITY_ID",
      "COST_TYPE_ID" = inserted."COST_TYPE_ID",
      "H120_CATEGORY_NO" = inserted."H120_CATEGORY_NO",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_H120_CATEGORY
    inner join inserted
    on (PIMS_H120_CATEGORY.H120_CATEGORY_ID = inserted.H120_CATEGORY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CRQFIN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CRQFIN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CRQFIN_I_S_U_TR] ON PIMS_COMP_REQ_FINANCIAL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_COMP_REQ_FINANCIAL
    set "COMP_REQ_FINANCIAL_ID" = inserted."COMP_REQ_FINANCIAL_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "FINANCIAL_ACTIVITY_CODE_ID" = inserted."FINANCIAL_ACTIVITY_CODE_ID",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "TAX_AMT" = inserted."TAX_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "IS_GST_REQUIRED" = inserted."IS_GST_REQUIRED",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COMP_REQ_FINANCIAL
    inner join inserted
    on (PIMS_COMP_REQ_FINANCIAL.COMP_REQ_FINANCIAL_ID = inserted.COMP_REQ_FINANCIAL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PROPLS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PROPLS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PROPLS_I_S_U_TR] ON PIMS_PROPERTY_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_LEASE
    set "PROPERTY_LEASE_ID" = inserted."PROPERTY_LEASE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "NAME" = inserted."NAME",
      "LEASE_AREA" = inserted."LEASE_AREA",
      "LOCATION" = inserted."LOCATION",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_LEASE
    inner join inserted
    on (PIMS_PROPERTY_LEASE.PROPERTY_LEASE_ID = inserted.PROPERTY_LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCQST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCQST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCQST_I_S_U_TR] ON PIMS_DOCUMENT_QUEUE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DOCUMENT_QUEUE_STATUS_TYPE
    set "DOCUMENT_QUEUE_STATUS_TYPE_CODE" = inserted."DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_QUEUE_STATUS_TYPE
    inner join inserted
    on (PIMS_DOCUMENT_QUEUE_STATUS_TYPE.DOCUMENT_QUEUE_STATUS_TYPE_CODE = inserted.DOCUMENT_QUEUE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CNTMTH_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CNTMTH_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CNTMTH_I_S_U_TR] ON PIMS_CONTACT_METHOD INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_CONTACT_METHOD
    set "CONTACT_METHOD_ID" = inserted."CONTACT_METHOD_ID",
      "CONTACT_METHOD_TYPE_CODE" = inserted."CONTACT_METHOD_TYPE_CODE",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONTACT_METHOD_VALUE" = inserted."CONTACT_METHOD_VALUE",
      "IS_PREFERRED_METHOD" = inserted."IS_PREFERRED_METHOD",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONTACT_METHOD
    inner join inserted
    on (PIMS_CONTACT_METHOD.CONTACT_METHOD_ID = inserted.CONTACT_METHOD_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRPU_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRPU_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRPU_I_S_U_TR] ON PIMS_PROP_PROP_PURPOSE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROP_PROP_PURPOSE
    set "PROP_PROP_PURPOSE_ID" = inserted."PROP_PROP_PURPOSE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_PURPOSE_TYPE_CODE" = inserted."PROPERTY_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_PURPOSE
    inner join inserted
    on (PIMS_PROP_PROP_PURPOSE.PROP_PROP_PURPOSE_ID = inserted.PROP_PROP_PURPOSE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCHKLI_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LCHKLI_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCHKLI_I_S_U_TR] ON PIMS_LEASE_CHECKLIST_ITEM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_CHECKLIST_ITEM
    set "LEASE_CHECKLIST_ITEM_ID" = inserted."LEASE_CHECKLIST_ITEM_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_CHKLST_ITEM_TYPE_CODE" = inserted."LEASE_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CHECKLIST_ITEM
    inner join inserted
    on (PIMS_LEASE_CHECKLIST_ITEM.LEASE_CHECKLIST_ITEM_ID = inserted.LEASE_CHECKLIST_ITEM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RESRCH_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RESRCH_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RESRCH_I_S_U_TR] ON PIMS_RESEARCH_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_RESEARCH_FILE
    set "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "RESEARCH_FILE_STATUS_TYPE_CODE" = inserted."RESEARCH_FILE_STATUS_TYPE_CODE",
      "REQUEST_SOURCE_TYPE_CODE" = inserted."REQUEST_SOURCE_TYPE_CODE",
      "REQUESTOR_NAME" = inserted."REQUESTOR_NAME",
      "REQUESTOR_ORGANIZATION" = inserted."REQUESTOR_ORGANIZATION",
      "NAME" = inserted."NAME",
      "RFILE_NUMBER" = inserted."RFILE_NUMBER",
      "REQUEST_DATE" = inserted."REQUEST_DATE",
      "ROAD_NAME" = inserted."ROAD_NAME",
      "ROAD_ALIAS" = inserted."ROAD_ALIAS",
      "REQUEST_DESCRIPTION" = inserted."REQUEST_DESCRIPTION",
      "REQUEST_SOURCE_DESCRIPTION" = inserted."REQUEST_SOURCE_DESCRIPTION",
      "RESEARCH_RESULT" = inserted."RESEARCH_RESULT",
      "IS_EXPROPRIATION" = inserted."IS_EXPROPRIATION",
      "EXPROPRIATION_NOTES" = inserted."EXPROPRIATION_NOTES",
      "RESEARCH_COMPLETION_DATE" = inserted."RESEARCH_COMPLETION_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE
    inner join inserted
    on (PIMS_RESEARCH_FILE.RESEARCH_FILE_ID = inserted.RESEARCH_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQCKI_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQCKI_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQCKI_I_S_U_TR] ON PIMS_ACQUISITION_CHECKLIST_ITEM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACQUISITION_CHECKLIST_ITEM
    set "ACQUISITION_CHECKLIST_ITEM_ID" = inserted."ACQUISITION_CHECKLIST_ITEM_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQ_CHKLST_ITEM_TYPE_CODE" = inserted."ACQ_CHKLST_ITEM_TYPE_CODE",
      "CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_CHECKLIST_ITEM
    inner join inserted
    on (PIMS_ACQUISITION_CHECKLIST_ITEM.ACQUISITION_CHECKLIST_ITEM_ID = inserted.ACQUISITION_CHECKLIST_ITEM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRAT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAT_I_S_U_TR] ON PIMS_PROP_PROP_ANOMALY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROP_PROP_ANOMALY_TYPE
    set "PROP_PROP_ANOMALY_TYPE_ID" = inserted."PROP_PROP_ANOMALY_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_ANOMALY_TYPE_CODE" = inserted."PROPERTY_ANOMALY_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ANOMALY_TYPE
    inner join inserted
    on (PIMS_PROP_PROP_ANOMALY_TYPE.PROP_PROP_ANOMALY_TYPE_ID = inserted.PROP_PROP_ANOMALY_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CHRTAC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CHRTAC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CHRTAC_I_S_U_TR] ON PIMS_CHART_OF_ACCOUNTS_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_CHART_OF_ACCOUNTS_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CHART_OF_ACCOUNTS_CODE
    inner join inserted
    on (PIMS_CHART_OF_ACCOUNTS_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_HFLNUM_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_HFLNUM_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_HFLNUM_I_S_U_TR] ON PIMS_HISTORICAL_FILE_NUMBER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_HISTORICAL_FILE_NUMBER
    set "HISTORICAL_FILE_NUMBER_ID" = inserted."HISTORICAL_FILE_NUMBER_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "DATA_SOURCE_TYPE_CODE" = inserted."DATA_SOURCE_TYPE_CODE",
      "HISTORICAL_FILE_NUMBER_TYPE_CODE" = inserted."HISTORICAL_FILE_NUMBER_TYPE_CODE",
      "HISTORICAL_FILE_NUMBER" = inserted."HISTORICAL_FILE_NUMBER",
      "OTHER_HIST_FILE_NUMBER_TYPE_CODE" = inserted."OTHER_HIST_FILE_NUMBER_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_HISTORICAL_FILE_NUMBER
    inner join inserted
    on (PIMS_HISTORICAL_FILE_NUMBER.HISTORICAL_FILE_NUMBER_ID = inserted.HISTORICAL_FILE_NUMBER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESCON_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LESCON_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESCON_I_S_U_TR] ON PIMS_LEASE_CONSULTATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_CONSULTATION
    set "LEASE_CONSULTATION_ID" = inserted."LEASE_CONSULTATION_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "CONSULTATION_TYPE_CODE" = inserted."CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE" = inserted."CONSULTATION_STATUS_TYPE_CODE",
      "CONSULTATION_OUTCOME_TYPE_CODE" = inserted."CONSULTATION_OUTCOME_TYPE_CODE",
      "OTHER_DESCRIPTION" = inserted."OTHER_DESCRIPTION",
      "REQUESTED_ON" = inserted."REQUESTED_ON",
      "IS_RESPONSE_RECEIVED" = inserted."IS_RESPONSE_RECEIVED",
      "RESPONSE_RECEIVED_DATE" = inserted."RESPONSE_RECEIVED_DATE",
      "COMMENT" = inserted."COMMENT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CONSULTATION
    inner join inserted
    on (PIMS_LEASE_CONSULTATION.LEASE_CONSULTATION_ID = inserted.LEASE_CONSULTATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LRESPT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LRESPT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LRESPT_I_S_U_TR] ON PIMS_LEASE_RESPONSIBILITY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_RESPONSIBILITY_TYPE
    set "LEASE_RESPONSIBILITY_TYPE_CODE" = inserted."LEASE_RESPONSIBILITY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_RESPONSIBILITY_TYPE
    inner join inserted
    on (PIMS_LEASE_RESPONSIBILITY_TYPE.LEASE_RESPONSIBILITY_TYPE_CODE = inserted.LEASE_RESPONSIBILITY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESNOT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LESNOT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESNOT_I_S_U_TR] ON PIMS_LEASE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_NOTE
    set "LEASE_NOTE_ID" = inserted."LEASE_NOTE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_NOTE
    inner join inserted
    on (PIMS_LEASE_NOTE.LEASE_NOTE_ID = inserted.LEASE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ORGIDT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ORGIDT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ORGIDT_I_S_U_TR] ON PIMS_ORG_IDENTIFIER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ORG_IDENTIFIER_TYPE
    set "ORG_IDENTIFIER_TYPE_CODE" = inserted."ORG_IDENTIFIER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORG_IDENTIFIER_TYPE
    inner join inserted
    on (PIMS_ORG_IDENTIFIER_TYPE.ORG_IDENTIFIER_TYPE_CODE = inserted.ORG_IDENTIFIER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ROLE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ROLE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ROLE_I_S_U_TR] ON PIMS_ROLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ROLE
    set "ROLE_ID" = inserted."ROLE_ID",
      "ROLE_UID" = inserted."ROLE_UID",
      "KEYCLOAK_GROUP_ID" = inserted."KEYCLOAK_GROUP_ID",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_PUBLIC" = inserted."IS_PUBLIC",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "SORT_ORDER" = inserted."SORT_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ROLE
    inner join inserted
    on (PIMS_ROLE.ROLE_ID = inserted.ROLE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AGRMNT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AGRMNT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AGRMNT_I_S_U_TR] ON PIMS_AGREEMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_AGREEMENT
    set "AGREEMENT_ID" = inserted."AGREEMENT_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "AGREEMENT_TYPE_CODE" = inserted."AGREEMENT_TYPE_CODE",
      "AGREEMENT_STATUS_TYPE_CODE" = inserted."AGREEMENT_STATUS_TYPE_CODE",
      "AGREEMENT_DATE" = inserted."AGREEMENT_DATE",
      "COMPLETION_DATE" = inserted."COMPLETION_DATE",
      "TERMINATION_DATE" = inserted."TERMINATION_DATE",
      "COMMENCEMENT_DATE" = inserted."COMMENCEMENT_DATE",
      "DEPOSIT_AMOUNT" = inserted."DEPOSIT_AMOUNT",
      "NO_LATER_THAN_DAYS" = inserted."NO_LATER_THAN_DAYS",
      "PURCHASE_PRICE" = inserted."PURCHASE_PRICE",
      "LEGAL_SURVEY_PLAN_NUM" = inserted."LEGAL_SURVEY_PLAN_NUM",
      "OFFER_DATE" = inserted."OFFER_DATE",
      "EXPIRY_TS" = inserted."EXPIRY_TS",
      "SIGNED_DATE" = inserted."SIGNED_DATE",
      "INSPECTION_DATE" = inserted."INSPECTION_DATE",
      "EXPROPRIATION_DATE" = inserted."EXPROPRIATION_DATE",
      "POSSESSION_DATE" = inserted."POSSESSION_DATE",
      "CANCELLATION_NOTE" = inserted."CANCELLATION_NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_AGREEMENT
    inner join inserted
    on (PIMS_AGREEMENT.AGREEMENT_ID = inserted.AGREEMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PAINVP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PAINVP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PAINVP_I_S_U_TR] ON PIMS_PROP_ACT_INVOLVED_PARTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROP_ACT_INVOLVED_PARTY
    set "PROP_ACT_INVOLVED_PARTY_ID" = inserted."PROP_ACT_INVOLVED_PARTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_ACT_INVOLVED_PARTY
    inner join inserted
    on (PIMS_PROP_ACT_INVOLVED_PARTY.PROP_ACT_INVOLVED_PARTY_ID = inserted.PROP_ACT_INVOLVED_PARTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJSTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRJSTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJSTY_I_S_U_TR] ON PIMS_PROJECT_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROJECT_STATUS_TYPE
    set "PROJECT_STATUS_TYPE_CODE" = inserted."PROJECT_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_STATUS_TYPE
    inner join inserted
    on (PIMS_PROJECT_STATUS_TYPE.PROJECT_STATUS_TYPE_CODE = inserted.PROJECT_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CHKLIS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CHKLIS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CHKLIS_I_S_U_TR] ON PIMS_CHKLST_ITEM_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_CHKLST_ITEM_STATUS_TYPE
    set "CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CHKLST_ITEM_STATUS_TYPE
    inner join inserted
    on (PIMS_CHKLST_ITEM_STATUS_TYPE.CHKLST_ITEM_STATUS_TYPE_CODE = inserted.CHKLST_ITEM_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SPDCLT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_SPDCLT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SPDCLT_I_S_U_TR] ON PIMS_SURPLUS_DECLARATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_SURPLUS_DECLARATION_TYPE
    set "SURPLUS_DECLARATION_TYPE_CODE" = inserted."SURPLUS_DECLARATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SURPLUS_DECLARATION_TYPE
    inner join inserted
    on (PIMS_SURPLUS_DECLARATION_TYPE.SURPLUS_DECLARATION_TYPE_CODE = inserted.SURPLUS_DECLARATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_EXPPMT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_EXPPMT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_EXPPMT_I_S_U_TR] ON PIMS_EXPROPRIATION_PAYMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_EXPROPRIATION_PAYMENT
    set "EXPROPRIATION_PAYMENT_ID" = inserted."EXPROPRIATION_PAYMENT_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "EXPROPRIATING_AUTHORITY" = inserted."EXPROPRIATING_AUTHORITY",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_EXPROPRIATION_PAYMENT
    inner join inserted
    on (PIMS_EXPROPRIATION_PAYMENT.EXPROPRIATION_PAYMENT_ID = inserted.EXPROPRIATION_PAYMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CMPREQ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CMPREQ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CMPREQ_I_S_U_TR] ON PIMS_COMPENSATION_REQUISITION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_COMPENSATION_REQUISITION
    set "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_TEAM_ID" = inserted."ACQUISITION_FILE_TEAM_ID",
      "CHART_OF_ACCOUNTS_ID" = inserted."CHART_OF_ACCOUNTS_ID",
      "RESPONSIBILITY_ID" = inserted."RESPONSIBILITY_ID",
      "YEARLY_FINANCIAL_ID" = inserted."YEARLY_FINANCIAL_ID",
      "ALTERNATE_PROJECT_ID" = inserted."ALTERNATE_PROJECT_ID",
      "LEGACY_PAYEE" = inserted."LEGACY_PAYEE",
      "IS_DRAFT" = inserted."IS_DRAFT",
      "IS_PAYMENT_IN_TRUST" = inserted."IS_PAYMENT_IN_TRUST",
      "GST_NUMBER" = inserted."GST_NUMBER",
      "FISCAL_YEAR" = inserted."FISCAL_YEAR",
      "AGREEMENT_DT" = inserted."AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT" = inserted."EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT" = inserted."EXPROP_VESTING_DT",
      "GENERATION_DT" = inserted."GENERATION_DT",
      "FINALIZED_DATE" = inserted."FINALIZED_DATE",
      "ADV_PMT_SERVED_DT" = inserted."ADV_PMT_SERVED_DT",
      "SPECIAL_INSTRUCTION" = inserted."SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS" = inserted."DETAILED_REMARKS",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COMPENSATION_REQUISITION
    inner join inserted
    on (PIMS_COMPENSATION_REQUISITION.COMPENSATION_REQUISITION_ID = inserted.COMPENSATION_REQUISITION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACQF_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACQF_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACQF_I_S_U_TR] ON PIMS_PROPERTY_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_ACQUISITION_FILE
    set "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_NAME" = inserted."PROPERTY_NAME",
      "LOCATION" = inserted."LOCATION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACQUISITION_FILE
    inner join inserted
    on (PIMS_PROPERTY_ACQUISITION_FILE.PROPERTY_ACQUISITION_FILE_ID = inserted.PROPERTY_ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACIN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACIN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACIN_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY_INVOICE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_ACTIVITY_INVOICE
    set "PROPERTY_ACTIVITY_INVOICE_ID" = inserted."PROPERTY_ACTIVITY_INVOICE_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "INVOICE_DT" = inserted."INVOICE_DT",
      "INVOICE_NUM" = inserted."INVOICE_NUM",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "GST_AMT" = inserted."GST_AMT",
      "PST_AMT" = inserted."PST_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "IS_PST_REQUIRED" = inserted."IS_PST_REQUIRED",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY_INVOICE
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY_INVOICE.PROPERTY_ACTIVITY_INVOICE_ID = inserted.PROPERTY_ACTIVITY_INVOICE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SECDPT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_SECDPT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SECDPT_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_SECURITY_DEPOSIT_TYPE
    set "SECURITY_DEPOSIT_TYPE_CODE" = inserted."SECURITY_DEPOSIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_TYPE
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_TYPE.SECURITY_DEPOSIT_TYPE_CODE = inserted.SECURITY_DEPOSIT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_USRORG_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_USRORG_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_USRORG_I_S_U_TR] ON PIMS_USER_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_USER_ORGANIZATION
    set "USER_ORGANIZATION_ID" = inserted."USER_ORGANIZATION_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER_ORGANIZATION
    inner join inserted
    on (PIMS_USER_ORGANIZATION.USER_ORGANIZATION_ID = inserted.USER_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DCCTSB_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DCCTSB_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DCCTSB_I_S_U_TR] ON PIMS_DOCUMENT_CATEGORY_SUBTYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DOCUMENT_CATEGORY_SUBTYPE
    set "DOCUMENT_CATEGORY_SUBTYPE_ID" = inserted."DOCUMENT_CATEGORY_SUBTYPE_ID",
      "DOCUMENT_CATEGORY_TYPE_CODE" = inserted."DOCUMENT_CATEGORY_TYPE_CODE",
      "DOCUMENT_TYPE_ID" = inserted."DOCUMENT_TYPE_ID",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_CATEGORY_SUBTYPE
    inner join inserted
    on (PIMS_DOCUMENT_CATEGORY_SUBTYPE.DOCUMENT_CATEGORY_SUBTYPE_ID = inserted.DOCUMENT_CATEGORY_SUBTYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RQSRCT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RQSRCT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RQSRCT_I_S_U_TR] ON PIMS_REQUEST_SOURCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_REQUEST_SOURCE_TYPE
    set "REQUEST_SOURCE_TYPE_CODE" = inserted."REQUEST_SOURCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_REQUEST_SOURCE_TYPE
    inner join inserted
    on (PIMS_REQUEST_SOURCE_TYPE.REQUEST_SOURCE_TYPE_CODE = inserted.REQUEST_SOURCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPCIT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPCIT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPCIT_I_S_U_TR] ON PIMS_DSP_CHKLST_ITEM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DSP_CHKLST_ITEM_TYPE
    set "DSP_CHKLST_ITEM_TYPE_CODE" = inserted."DSP_CHKLST_ITEM_TYPE_CODE",
      "DSP_CHKLST_SECTION_TYPE_CODE" = inserted."DSP_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "HINT" = inserted."HINT",
      "IS_REQUIRED" = inserted."IS_REQUIRED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_CHKLST_ITEM_TYPE
    inner join inserted
    on (PIMS_DSP_CHKLST_ITEM_TYPE.DSP_CHKLST_ITEM_TYPE_CODE = inserted.DSP_CHKLST_ITEM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPTNR_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPTNR_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPTNR_I_S_U_TR] ON PIMS_PROPERTY_TENURE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_TENURE_TYPE
    set "PROPERTY_TENURE_TYPE_CODE" = inserted."PROPERTY_TENURE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_TENURE_TYPE
    inner join inserted
    on (PIMS_PROPERTY_TENURE_TYPE.PROPERTY_TENURE_TYPE_CODE = inserted.PROPERTY_TENURE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PPHSTT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PPHSTT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PPHSTT_I_S_U_TR] ON PIMS_PPH_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PPH_STATUS_TYPE
    set "PPH_STATUS_TYPE_CODE" = inserted."PPH_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PPH_STATUS_TYPE
    inner join inserted
    on (PIMS_PPH_STATUS_TYPE.PPH_STATUS_TYPE_CODE = inserted.PPH_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRSPRP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRSPRP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRSPRP_I_S_U_TR] ON PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE
    set "PRF_PROP_RESEARCH_PURPOSE_ID" = inserted."PRF_PROP_RESEARCH_PURPOSE_ID",
      "PROPERTY_RESEARCH_FILE_ID" = inserted."PROPERTY_RESEARCH_FILE_ID",
      "PROP_RESEARCH_PURPOSE_TYPE_CODE" = inserted."PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE
    inner join inserted
    on (PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE.PRF_PROP_RESEARCH_PURPOSE_ID = inserted.PRF_PROP_RESEARCH_PURPOSE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_XPMTITY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_XPMTITY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_XPMTITY_I_S_U_TR] ON PIMS_EXPROP_PMT_PMT_ITEM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_EXPROP_PMT_PMT_ITEM
    set "EXPROP_PMT_PMT_ITEM_ID" = inserted."EXPROP_PMT_PMT_ITEM_ID",
      "EXPROPRIATION_PAYMENT_ID" = inserted."EXPROPRIATION_PAYMENT_ID",
      "PAYMENT_ITEM_TYPE_CODE" = inserted."PAYMENT_ITEM_TYPE_CODE",
      "IS_GST_REQUIRED" = inserted."IS_GST_REQUIRED",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "TAX_AMT" = inserted."TAX_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_EXPROP_PMT_PMT_ITEM
    inner join inserted
    on (PIMS_EXPROP_PMT_PMT_ITEM.EXPROP_PMT_PMT_ITEM_ID = inserted.EXPROP_PMT_PMT_ITEM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSPRTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSPRTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSPRTY_I_S_U_TR] ON PIMS_LEASE_PAY_RVBL_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_PAY_RVBL_TYPE
    set "LEASE_PAY_RVBL_TYPE_CODE" = inserted."LEASE_PAY_RVBL_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAY_RVBL_TYPE
    inner join inserted
    on (PIMS_LEASE_PAY_RVBL_TYPE.LEASE_PAY_RVBL_TYPE_CODE = inserted.LEASE_PAY_RVBL_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSPMTF_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSPMTF_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSPMTF_I_S_U_TR] ON PIMS_LEASE_PMT_FREQ_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_PMT_FREQ_TYPE
    set "LEASE_PMT_FREQ_TYPE_CODE" = inserted."LEASE_PMT_FREQ_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PMT_FREQ_TYPE
    inner join inserted
    on (PIMS_LEASE_PMT_FREQ_TYPE.LEASE_PMT_FREQ_TYPE_CODE = inserted.LEASE_PMT_FREQ_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_WRKACT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_WRKACT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_WRKACT_I_S_U_TR] ON PIMS_WORK_ACTIVITY_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_WORK_ACTIVITY_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_WORK_ACTIVITY_CODE
    inner join inserted
    on (PIMS_WORK_ACTIVITY_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCQUE_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DOCQUE_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCQUE_A_S_IUD_TR] ON PIMS_DOCUMENT_QUEUE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DOCUMENT_QUEUE_HIST set END_DATE_HIST = @curr_date where DOCUMENT_QUEUE_ID in (select DOCUMENT_QUEUE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DOCUMENT_QUEUE_HIST ([DOCUMENT_QUEUE_ID], [DOCUMENT_ID], [DOCUMENT_QUEUE_STATUS_TYPE_CODE], [DATA_SOURCE_TYPE_CODE], [PROPERTY_ACTIVITY_DOCUMENT_ID], [ACQUISITION_FILE_DOCUMENT_ID], [RESEARCH_FILE_DOCUMENT_ID], [LEASE_DOCUMENT_ID], [DISPOSITION_FILE_DOCUMENT_ID], [DOCUMENT_EXTERNAL_ID], [DOCUMENT_METADATA], [DOC_PROCESS_START_DT], [DOC_PROCESS_END_DT], [DOC_PROCESS_RETRIES], [MAYAN_ERROR], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DOCUMENT_QUEUE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DOCUMENT_QUEUE_ID], [DOCUMENT_ID], [DOCUMENT_QUEUE_STATUS_TYPE_CODE], [DATA_SOURCE_TYPE_CODE], [PROPERTY_ACTIVITY_DOCUMENT_ID], [ACQUISITION_FILE_DOCUMENT_ID], [RESEARCH_FILE_DOCUMENT_ID], [LEASE_DOCUMENT_ID], [DISPOSITION_FILE_DOCUMENT_ID], [DOCUMENT_EXTERNAL_ID], [DOCUMENT_METADATA], [DOC_PROCESS_START_DT], [DOC_PROCESS_END_DT], [DOC_PROCESS_RETRIES], [MAYAN_ERROR], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DOCUMENT_QUEUE_H_ID_SEQ]) as [_DOCUMENT_QUEUE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSFLPR_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RSFLPR_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSFLPR_I_S_U_TR] ON PIMS_RESEARCH_FILE_PURPOSE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_RESEARCH_FILE_PURPOSE
    set "RESEARCH_FILE_PURPOSE_ID" = inserted."RESEARCH_FILE_PURPOSE_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "RESEARCH_PURPOSE_TYPE_CODE" = inserted."RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_PURPOSE
    inner join inserted
    on (PIMS_RESEARCH_FILE_PURPOSE.RESEARCH_FILE_PURPOSE_ID = inserted.RESEARCH_FILE_PURPOSE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSPYMT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSPYMT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSPYMT_I_S_U_TR] ON PIMS_LEASE_PAYMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_PAYMENT
    set "LEASE_PAYMENT_ID" = inserted."LEASE_PAYMENT_ID",
      "LEASE_PERIOD_ID" = inserted."LEASE_PERIOD_ID",
      "LEASE_PAYMENT_METHOD_TYPE_CODE" = inserted."LEASE_PAYMENT_METHOD_TYPE_CODE",
      "LEASE_PAYMENT_STATUS_TYPE_CODE" = inserted."LEASE_PAYMENT_STATUS_TYPE_CODE",
      "LEASE_PAYMENT_CATEGORY_TYPE_CODE" = inserted."LEASE_PAYMENT_CATEGORY_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE" = inserted."LEASE_PMT_FREQ_TYPE_CODE",
      "PAYMENT_RECEIVED_DATE" = inserted."PAYMENT_RECEIVED_DATE",
      "PAYMENT_AMOUNT_PRE_TAX" = inserted."PAYMENT_AMOUNT_PRE_TAX",
      "PAYMENT_AMOUNT_PST" = inserted."PAYMENT_AMOUNT_PST",
      "PAYMENT_AMOUNT_GST" = inserted."PAYMENT_AMOUNT_GST",
      "PAYMENT_AMOUNT_TOTAL" = inserted."PAYMENT_AMOUNT_TOTAL",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAYMENT
    inner join inserted
    on (PIMS_LEASE_PAYMENT.LEASE_PAYMENT_ID = inserted.LEASE_PAYMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRSCRC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRSCRC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRSCRC_I_S_U_TR] ON PIMS_PROPERTY_RESEARCH_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_RESEARCH_FILE
    set "PROPERTY_RESEARCH_FILE_ID" = inserted."PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "PROPERTY_NAME" = inserted."PROPERTY_NAME",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_LEGAL_OPINION_REQUIRED" = inserted."IS_LEGAL_OPINION_REQUIRED",
      "IS_LEGAL_OPINION_OBTAINED" = inserted."IS_LEGAL_OPINION_OBTAINED",
      "DOCUMENT_REFERENCE" = inserted."DOCUMENT_REFERENCE",
      "RESEARCH_SUMMARY" = inserted."RESEARCH_SUMMARY",
      "LOCATION" = inserted."LOCATION",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_RESEARCH_FILE
    inner join inserted
    on (PIMS_PROPERTY_RESEARCH_FILE.PROPERTY_RESEARCH_FILE_ID = inserted.PROPERTY_RESEARCH_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CNTRY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CNTRY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CNTRY_I_S_U_TR] ON PIMS_COUNTRY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_COUNTRY
    set "COUNTRY_ID" = inserted."COUNTRY_ID",
      "COUNTRY_CODE" = inserted."COUNTRY_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COUNTRY
    inner join inserted
    on (PIMS_COUNTRY.COUNTRY_ID = inserted.COUNTRY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ADUSGT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ADUSGT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ADUSGT_I_S_U_TR] ON PIMS_ADDRESS_USAGE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ADDRESS_USAGE_TYPE
    set "ADDRESS_USAGE_TYPE_CODE" = inserted."ADDRESS_USAGE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ADDRESS_USAGE_TYPE
    inner join inserted
    on (PIMS_ADDRESS_USAGE_TYPE.ADDRESS_USAGE_TYPE_CODE = inserted.ADDRESS_USAGE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PROJCT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PROJCT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PROJCT_I_S_U_TR] ON PIMS_PROJECT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROJECT
    set "ID" = inserted."ID",
      "PROJECT_STATUS_TYPE_CODE" = inserted."PROJECT_STATUS_TYPE_CODE",
      "BUSINESS_FUNCTION_CODE_ID" = inserted."BUSINESS_FUNCTION_CODE_ID",
      "COST_TYPE_CODE_ID" = inserted."COST_TYPE_CODE_ID",
      "WORK_ACTIVITY_CODE_ID" = inserted."WORK_ACTIVITY_CODE_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT
    inner join inserted
    on (PIMS_PROJECT.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCFMT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCFMT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCFMT_I_S_U_TR] ON PIMS_DOCUMENT_FORMAT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DOCUMENT_FORMAT_TYPE
    set "DOCUMENT_FORMAT_TYPE_CODE" = inserted."DOCUMENT_FORMAT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_FORMAT_TYPE
    inner join inserted
    on (PIMS_DOCUMENT_FORMAT_TYPE.DOCUMENT_FORMAT_TYPE_CODE = inserted.DOCUMENT_FORMAT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RGNUSR_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RGNUSR_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RGNUSR_I_S_U_TR] ON PIMS_REGION_USER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_REGION_USER
    set "REGION_USER_ID" = inserted."REGION_USER_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "USER_ID" = inserted."USER_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_REGION_USER
    inner join inserted
    on (PIMS_REGION_USER.REGION_USER_ID = inserted.REGION_USER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ORGTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ORGTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ORGTYP_I_S_U_TR] ON PIMS_ORGANIZATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ORGANIZATION_TYPE
    set "ORGANIZATION_TYPE_CODE" = inserted."ORGANIZATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION_TYPE
    inner join inserted
    on (PIMS_ORGANIZATION_TYPE.ORGANIZATION_TYPE_CODE = inserted.ORGANIZATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_REGION_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_REGION_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_REGION_I_S_U_TR] ON PIMS_REGION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_REGION
    set "REGION_CODE" = inserted."REGION_CODE",
      "REGION_NAME" = inserted."REGION_NAME",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_REGION
    inner join inserted
    on (PIMS_REGION.REGION_CODE = inserted.REGION_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJPRD_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRJPRD_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJPRD_I_S_I_TR] ON PIMS_PROJECT_PRODUCT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_PRODUCT ("PROJECT_PRODUCT_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID")
    select "PROJECT_PRODUCT_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACST_I_S_U_TR] ON PIMS_PROP_MGMT_ACTIVITY_SUBTYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROP_MGMT_ACTIVITY_SUBTYPE
    set "PROP_MGMT_ACTIVITY_SUBTYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_MGMT_ACTIVITY_SUBTYPE
    inner join inserted
    on (PIMS_PROP_MGMT_ACTIVITY_SUBTYPE.PROP_MGMT_ACTIVITY_SUBTYPE_CODE = inserted.PROP_MGMT_ACTIVITY_SUBTYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPFTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPFTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPFTY_I_S_U_TR] ON PIMS_DISPOSITION_FUNDING_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISPOSITION_FUNDING_TYPE
    set "DISPOSITION_FUNDING_TYPE_CODE" = inserted."DISPOSITION_FUNDING_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FUNDING_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_FUNDING_TYPE.DISPOSITION_FUNDING_TYPE_CODE = inserted.DISPOSITION_FUNDING_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LPCATT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LPCATT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LPCATT_I_S_U_TR] ON PIMS_LEASE_PAYMENT_CATEGORY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_PAYMENT_CATEGORY_TYPE
    set "LEASE_PAYMENT_CATEGORY_TYPE_CODE" = inserted."LEASE_PAYMENT_CATEGORY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAYMENT_CATEGORY_TYPE
    inner join inserted
    on (PIMS_LEASE_PAYMENT_CATEGORY_TYPE.LEASE_PAYMENT_CATEGORY_TYPE_CODE = inserted.LEASE_PAYMENT_CATEGORY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPSCT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPSCT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPSCT_I_S_U_TR] ON PIMS_DSP_CHKLST_SECTION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DSP_CHKLST_SECTION_TYPE
    set "DSP_CHKLST_SECTION_TYPE_CODE" = inserted."DSP_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_CHKLST_SECTION_TYPE
    inner join inserted
    on (PIMS_DSP_CHKLST_SECTION_TYPE.DSP_CHKLST_SECTION_TYPE_CODE = inserted.DSP_CHKLST_SECTION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RFLDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RFLDOC_I_S_U_TR] ON PIMS_RESEARCH_FILE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_RESEARCH_FILE_DOCUMENT
    set "RESEARCH_FILE_DOCUMENT_ID" = inserted."RESEARCH_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_DOCUMENT
    inner join inserted
    on (PIMS_RESEARCH_FILE_DOCUMENT.RESEARCH_FILE_DOCUMENT_ID = inserted.RESEARCH_FILE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_VOLUTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_VOLUTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_VOLUTY_I_S_U_TR] ON PIMS_VOLUME_UNIT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_VOLUME_UNIT_TYPE
    set "VOLUME_UNIT_TYPE_CODE" = inserted."VOLUME_UNIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_VOLUME_UNIT_TYPE
    inner join inserted
    on (PIMS_VOLUME_UNIT_TYPE.VOLUME_UNIT_TYPE_CODE = inserted.VOLUME_UNIT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQCSCT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AQCSCT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQCSCT_I_S_U_TR] ON PIMS_ACQ_CHKLST_SECTION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACQ_CHKLST_SECTION_TYPE
    set "ACQ_CHKLST_SECTION_TYPE_CODE" = inserted."ACQ_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_CHKLST_SECTION_TYPE
    inner join inserted
    on (PIMS_ACQ_CHKLST_SECTION_TYPE.ACQ_CHKLST_SECTION_TYPE_CODE = inserted.ACQ_CHKLST_SECTION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INHLDT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_INHLDT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INHLDT_I_S_U_TR] ON PIMS_INTEREST_HOLDER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_INTEREST_HOLDER_TYPE
    set "INTEREST_HOLDER_TYPE_CODE" = inserted."INTEREST_HOLDER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INTEREST_HOLDER_TYPE
    inner join inserted
    on (PIMS_INTEREST_HOLDER_TYPE.INTEREST_HOLDER_TYPE_CODE = inserted.INTEREST_HOLDER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSSRTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSSRTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSSRTY_I_S_U_TR] ON PIMS_LESSOR_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LESSOR_TYPE
    set "LESSOR_TYPE_CODE" = inserted."LESSOR_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LESSOR_TYPE
    inner join inserted
    on (PIMS_LESSOR_TYPE.LESSOR_TYPE_CODE = inserted.LESSOR_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPOFR_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPOFR_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPOFR_I_S_U_TR] ON PIMS_DISPOSITION_OFFER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISPOSITION_OFFER
    set "DISPOSITION_OFFER_ID" = inserted."DISPOSITION_OFFER_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DISPOSITION_OFFER_STATUS_TYPE_CODE" = inserted."DISPOSITION_OFFER_STATUS_TYPE_CODE",
      "OFFER_NAME" = inserted."OFFER_NAME",
      "OFFER_DT" = inserted."OFFER_DT",
      "OFFER_EXPIRY_DT" = inserted."OFFER_EXPIRY_DT",
      "OFFER_AMT" = inserted."OFFER_AMT",
      "OFFER_NOTE" = inserted."OFFER_NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_OFFER
    inner join inserted
    on (PIMS_DISPOSITION_OFFER.DISPOSITION_OFFER_ID = inserted.DISPOSITION_OFFER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_U_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACQUISITION_FILE
    set "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PRNT_ACQUISITION_FILE_ID" = inserted."PRNT_ACQUISITION_FILE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "SUBFILE_INTEREST_TYPE_CODE" = inserted."SUBFILE_INTEREST_TYPE_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_NO" = inserted."FILE_NO",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "LEGACY_FILE_NUMBER" = inserted."LEGACY_FILE_NUMBER",
      "LEGACY_STAKEHOLDER" = inserted."LEGACY_STAKEHOLDER",
      "FUNDING_OTHER" = inserted."FUNDING_OTHER",
      "ASSIGNED_DATE" = inserted."ASSIGNED_DATE",
      "DELIVERY_DATE" = inserted."DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID" = inserted."PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION" = inserted."TOTAL_ALLOWABLE_COMPENSATION",
      "OTHER_SUBFILE_INTEREST_TYPE" = inserted."OTHER_SUBFILE_INTEREST_TYPE",
      "EST_COMPLETION_DT" = inserted."EST_COMPLETION_DT",
      "POSSESSION_DT" = inserted."POSSESSION_DT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE
    inner join inserted
    on (PIMS_ACQUISITION_FILE.ACQUISITION_FILE_ID = inserted.ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LINITT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LINITT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LINITT_I_S_U_TR] ON PIMS_LEASE_INITIATOR_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_INITIATOR_TYPE
    set "LEASE_INITIATOR_TYPE_CODE" = inserted."LEASE_INITIATOR_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_INITIATOR_TYPE
    inner join inserted
    on (PIMS_LEASE_INITIATOR_TYPE.LEASE_INITIATOR_TYPE_CODE = inserted.LEASE_INITIATOR_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPDOC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPDOC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPDOC_I_S_I_TR] ON PIMS_DISPOSITION_FILE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE_DOCUMENT ("DISPOSITION_FILE_DOCUMENT_ID",
      "DISPOSITION_FILE_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID")
    select "DISPOSITION_FILE_DOCUMENT_ID",
      "DISPOSITION_FILE_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNTM_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQNTM_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNTM_I_S_U_TR] ON PIMS_ACQUISITION_FILE_TEAM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACQUISITION_FILE_TEAM
    set "ACQUISITION_FILE_TEAM_ID" = inserted."ACQUISITION_FILE_TEAM_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "ACQ_FL_TEAM_PROFILE_TYPE_CODE" = inserted."ACQ_FL_TEAM_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE_TEAM
    inner join inserted
    on (PIMS_ACQUISITION_FILE_TEAM.ACQUISITION_FILE_TEAM_ID = inserted.ACQUISITION_FILE_TEAM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRRT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRRT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRRT_I_S_U_TR] ON PIMS_PROP_PROP_ROAD_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROP_PROP_ROAD_TYPE
    set "PROP_PROP_ROAD_TYPE_ID" = inserted."PROP_PROP_ROAD_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_ROAD_TYPE_CODE" = inserted."PROPERTY_ROAD_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ROAD_TYPE
    inner join inserted
    on (PIMS_PROP_PROP_ROAD_TYPE.PROP_PROP_ROAD_TYPE_ID = inserted.PROP_PROP_ROAD_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SCDPRH_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_SCDPRH_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SCDPRH_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT_RETURN_HOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_SECURITY_DEPOSIT_RETURN_HOLDER
    set "SECURITY_DEPOSIT_RETURN_HOLDER_ID" = inserted."SECURITY_DEPOSIT_RETURN_HOLDER_ID",
      "SECURITY_DEPOSIT_RETURN_ID" = inserted."SECURITY_DEPOSIT_RETURN_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_RETURN_HOLDER
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_RETURN_HOLDER.SECURITY_DEPOSIT_RETURN_HOLDER_ID = inserted.SECURITY_DEPOSIT_RETURN_HOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCQUE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCQUE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCQUE_I_S_U_TR] ON PIMS_DOCUMENT_QUEUE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DOCUMENT_QUEUE
    set "DOCUMENT_QUEUE_ID" = inserted."DOCUMENT_QUEUE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "DOCUMENT_QUEUE_STATUS_TYPE_CODE" = inserted."DOCUMENT_QUEUE_STATUS_TYPE_CODE",
      "DATA_SOURCE_TYPE_CODE" = inserted."DATA_SOURCE_TYPE_CODE",
      "PROPERTY_ACTIVITY_DOCUMENT_ID" = inserted."PROPERTY_ACTIVITY_DOCUMENT_ID",
      "ACQUISITION_FILE_DOCUMENT_ID" = inserted."ACQUISITION_FILE_DOCUMENT_ID",
      "RESEARCH_FILE_DOCUMENT_ID" = inserted."RESEARCH_FILE_DOCUMENT_ID",
      "LEASE_DOCUMENT_ID" = inserted."LEASE_DOCUMENT_ID",
      "DISPOSITION_FILE_DOCUMENT_ID" = inserted."DISPOSITION_FILE_DOCUMENT_ID",
      "DOCUMENT_EXTERNAL_ID" = inserted."DOCUMENT_EXTERNAL_ID",
      "DOCUMENT_METADATA" = inserted."DOCUMENT_METADATA",
      "DOC_PROCESS_START_DT" = inserted."DOC_PROCESS_START_DT",
      "DOC_PROCESS_END_DT" = inserted."DOC_PROCESS_END_DT",
      "DOC_PROCESS_RETRIES" = inserted."DOC_PROCESS_RETRIES",
      "MAYAN_ERROR" = inserted."MAYAN_ERROR",
      "DOCUMENT" = inserted."DOCUMENT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_QUEUE
    inner join inserted
    on (PIMS_DOCUMENT_QUEUE.DOCUMENT_QUEUE_ID = inserted.DOCUMENT_QUEUE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPDOC_I_S_U_TR] ON PIMS_DISPOSITION_FILE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISPOSITION_FILE_DOCUMENT
    set "DISPOSITION_FILE_DOCUMENT_ID" = inserted."DISPOSITION_FILE_DOCUMENT_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_DOCUMENT
    inner join inserted
    on (PIMS_DISPOSITION_FILE_DOCUMENT.DISPOSITION_FILE_DOCUMENT_ID = inserted.DISPOSITION_FILE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_BIZFCN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_BIZFCN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_BIZFCN_I_S_U_TR] ON PIMS_BUSINESS_FUNCTION_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_BUSINESS_FUNCTION_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_BUSINESS_FUNCTION_CODE
    inner join inserted
    on (PIMS_BUSINESS_FUNCTION_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQFRM_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQFRM_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQFRM_I_S_U_TR] ON PIMS_ACQUISITION_FILE_FORM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACQUISITION_FILE_FORM
    set "ACQUISITION_FILE_FORM_ID" = inserted."ACQUISITION_FILE_FORM_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "FORM_TYPE_CODE" = inserted."FORM_TYPE_CODE",
      "FORM_JSON" = inserted."FORM_JSON",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE_FORM
    inner join inserted
    on (PIMS_ACQUISITION_FILE_FORM.ACQUISITION_FILE_FORM_ID = inserted.ACQUISITION_FILE_FORM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LPRPTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LPRPTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LPRPTY_I_S_U_TR] ON PIMS_LEASE_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_PURPOSE_TYPE
    set "LEASE_PURPOSE_TYPE_CODE" = inserted."LEASE_PURPOSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PURPOSE_TYPE
    inner join inserted
    on (PIMS_LEASE_PURPOSE_TYPE.LEASE_PURPOSE_TYPE_CODE = inserted.LEASE_PURPOSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ARQSTT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ARQSTT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ARQSTT_I_S_U_TR] ON PIMS_ACCESS_REQUEST_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACCESS_REQUEST_STATUS_TYPE
    set "ACCESS_REQUEST_STATUS_TYPE_CODE" = inserted."ACCESS_REQUEST_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST_STATUS_TYPE
    inner join inserted
    on (PIMS_ACCESS_REQUEST_STATUS_TYPE.ACCESS_REQUEST_STATUS_TYPE_CODE = inserted.ACCESS_REQUEST_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PIDSRT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PIDSRT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PIDSRT_I_S_U_TR] ON PIMS_DATA_SOURCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DATA_SOURCE_TYPE
    set "DATA_SOURCE_TYPE_CODE" = inserted."DATA_SOURCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DATA_SOURCE_TYPE
    inner join inserted
    on (PIMS_DATA_SOURCE_TYPE.DATA_SOURCE_TYPE_CODE = inserted.DATA_SOURCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPRAT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAT_I_S_I_TR] ON PIMS_PROP_PROP_ANOMALY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_ANOMALY_TYPE ("PROP_PROP_ANOMALY_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ANOMALY_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID")
    select "PROP_PROP_ANOMALY_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ANOMALY_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TAKE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TAKE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TAKE_I_S_U_TR] ON PIMS_TAKE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_TAKE
    set "TAKE_ID" = inserted."TAKE_ID",
      "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "TAKE_TYPE_CODE" = inserted."TAKE_TYPE_CODE",
      "TAKE_STATUS_TYPE_CODE" = inserted."TAKE_STATUS_TYPE_CODE",
      "TAKE_SITE_CONTAM_TYPE_CODE" = inserted."TAKE_SITE_CONTAM_TYPE_CODE",
      "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "LAND_ACT_TYPE_CODE" = inserted."LAND_ACT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "COMPLETION_DT" = inserted."COMPLETION_DT",
      "IS_NEW_HIGHWAY_DEDICATION" = inserted."IS_NEW_HIGHWAY_DEDICATION",
      "NEW_HIGHWAY_DEDICATION_AREA" = inserted."NEW_HIGHWAY_DEDICATION_AREA",
      "IS_ACQUIRED_FOR_INVENTORY" = inserted."IS_ACQUIRED_FOR_INVENTORY",
      "IS_NEW_INTEREST_IN_SRW" = inserted."IS_NEW_INTEREST_IN_SRW",
      "STATUTORY_RIGHT_OF_WAY_AREA" = inserted."STATUTORY_RIGHT_OF_WAY_AREA",
      "SRW_END_DT" = inserted."SRW_END_DT",
      "IS_NEW_LICENSE_TO_CONSTRUCT" = inserted."IS_NEW_LICENSE_TO_CONSTRUCT",
      "LICENSE_TO_CONSTRUCT_AREA" = inserted."LICENSE_TO_CONSTRUCT_AREA",
      "LTC_END_DT" = inserted."LTC_END_DT",
      "IS_NEW_LAND_ACT" = inserted."IS_NEW_LAND_ACT",
      "LAND_ACT_AREA" = inserted."LAND_ACT_AREA",
      "LAND_ACT_END_DT" = inserted."LAND_ACT_END_DT",
      "IS_THERE_SURPLUS" = inserted."IS_THERE_SURPLUS",
      "SURPLUS_AREA" = inserted."SURPLUS_AREA",
      "IS_ACTIVE_LEASE" = inserted."IS_ACTIVE_LEASE",
      "ACTIVE_LEASE_AREA" = inserted."ACTIVE_LEASE_AREA",
      "ACTIVE_LEASE_END_DT" = inserted."ACTIVE_LEASE_END_DT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE
    inner join inserted
    on (PIMS_TAKE.TAKE_ID = inserted.TAKE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCKSTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LCKSTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCKSTY_I_S_U_TR] ON PIMS_LEASE_CHKLST_SECTION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_CHKLST_SECTION_TYPE
    set "LEASE_CHKLST_SECTION_TYPE_CODE" = inserted."LEASE_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CHKLST_SECTION_TYPE
    inner join inserted
    on (PIMS_LEASE_CHKLST_SECTION_TYPE.LEASE_CHKLST_SECTION_TYPE_CODE = inserted.LEASE_CHKLST_SECTION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LPSTST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LPSTST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LPSTST_I_S_U_TR] ON PIMS_LEASE_PAYMENT_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_PAYMENT_STATUS_TYPE
    set "LEASE_PAYMENT_STATUS_TYPE_CODE" = inserted."LEASE_PAYMENT_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAYMENT_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_PAYMENT_STATUS_TYPE.LEASE_PAYMENT_STATUS_TYPE_CODE = inserted.LEASE_PAYMENT_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSTRCT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSTRCT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSTRCT_I_S_U_TR] ON PIMS_DISTRICT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISTRICT
    set "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_NAME" = inserted."DISTRICT_NAME",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISTRICT
    inner join inserted
    on (PIMS_DISTRICT.DISTRICT_CODE = inserted.DISTRICT_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQTPPT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AQTPPT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQTPPT_I_S_U_TR] ON PIMS_ACQ_FL_TEAM_PROFILE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACQ_FL_TEAM_PROFILE_TYPE
    set "ACQ_FL_TEAM_PROFILE_TYPE_CODE" = inserted."ACQ_FL_TEAM_PROFILE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_FL_TEAM_PROFILE_TYPE
    inner join inserted
    on (PIMS_ACQ_FL_TEAM_PROFILE_TYPE.ACQ_FL_TEAM_PROFILE_TYPE_CODE = inserted.ACQ_FL_TEAM_PROFILE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSPRST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSPRST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSPRST_I_S_U_TR] ON PIMS_LEASE_PERIOD_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_PERIOD_STATUS_TYPE
    set "LEASE_PERIOD_STATUS_TYPE_CODE" = inserted."LEASE_PERIOD_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PERIOD_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_PERIOD_STATUS_TYPE.LEASE_PERIOD_STATUS_TYPE_CODE = inserted.LEASE_PERIOD_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPDOC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPDOC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPDOC_A_S_IUD_TR] ON PIMS_DISPOSITION_FILE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_FILE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where DISPOSITION_FILE_DOCUMENT_ID in (select DISPOSITION_FILE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_FILE_DOCUMENT_HIST ([DISPOSITION_FILE_DOCUMENT_ID], [DISPOSITION_FILE_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_FILE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_FILE_DOCUMENT_ID], [DISPOSITION_FILE_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT_H_ID_SEQ]) as [_DISPOSITION_FILE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACTY_I_S_U_TR] ON PIMS_PROP_MGMT_ACTIVITY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROP_MGMT_ACTIVITY_TYPE
    set "PROP_MGMT_ACTIVITY_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_MGMT_ACTIVITY_TYPE
    inner join inserted
    on (PIMS_PROP_MGMT_ACTIVITY_TYPE.PROP_MGMT_ACTIVITY_TYPE_CODE = inserted.PROP_MGMT_ACTIVITY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPOTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPOTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPOTY_I_S_U_TR] ON PIMS_PROPERTY_OPERATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_OPERATION_TYPE
    set "PROPERTY_OPERATION_TYPE_CODE" = inserted."PROPERTY_OPERATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_OPERATION_TYPE
    inner join inserted
    on (PIMS_PROPERTY_OPERATION_TYPE.PROPERTY_OPERATION_TYPE_CODE = inserted.PROPERTY_OPERATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJPRD_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRJPRD_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJPRD_I_S_U_TR] ON PIMS_PROJECT_PRODUCT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROJECT_PRODUCT
    set "PROJECT_PRODUCT_ID" = inserted."PROJECT_PRODUCT_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_PRODUCT
    inner join inserted
    on (PIMS_PROJECT_PRODUCT.PROJECT_PRODUCT_ID = inserted.PROJECT_PRODUCT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRVOLT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRVOLT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRVOLT_I_S_U_TR] ON PIMS_VOLUMETRIC_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_VOLUMETRIC_TYPE
    set "VOLUMETRIC_TYPE_CODE" = inserted."VOLUMETRIC_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_VOLUMETRIC_TYPE
    inner join inserted
    on (PIMS_VOLUMETRIC_TYPE.VOLUMETRIC_TYPE_CODE = inserted.VOLUMETRIC_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKCONT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TKCONT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKCONT_I_S_U_TR] ON PIMS_TAKE_SITE_CONTAM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_TAKE_SITE_CONTAM_TYPE
    set "TAKE_SITE_CONTAM_TYPE_CODE" = inserted."TAKE_SITE_CONTAM_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE_SITE_CONTAM_TYPE
    inner join inserted
    on (PIMS_TAKE_SITE_CONTAM_TYPE.TAKE_SITE_CONTAM_TYPE_CODE = inserted.TAKE_SITE_CONTAM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCMNT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCMNT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCMNT_I_S_U_TR] ON PIMS_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DOCUMENT
    set "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "DOCUMENT_TYPE_ID" = inserted."DOCUMENT_TYPE_ID",
      "DOCUMENT_STATUS_TYPE_CODE" = inserted."DOCUMENT_STATUS_TYPE_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "MAYAN_ID" = inserted."MAYAN_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "DOCUMENT_EXTERNAL_ID" = inserted."DOCUMENT_EXTERNAL_ID"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT
    inner join inserted
    on (PIMS_DOCUMENT.DOCUMENT_ID = inserted.DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_COSTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_COSTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_COSTYP_I_S_U_TR] ON PIMS_COST_TYPE_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_COST_TYPE_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COST_TYPE_CODE
    inner join inserted
    on (PIMS_COST_TYPE_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRODCT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRODCT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRODCT_I_S_U_TR] ON PIMS_PRODUCT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PRODUCT
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "START_DATE" = inserted."START_DATE",
      "COST_ESTIMATE" = inserted."COST_ESTIMATE",
      "COST_ESTIMATE_DATE" = inserted."COST_ESTIMATE_DATE",
      "OBJECTIVE" = inserted."OBJECTIVE",
      "SCOPE" = inserted."SCOPE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PRODUCT
    inner join inserted
    on (PIMS_PRODUCT.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SRVPLT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_SRVPLT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SRVPLT_I_S_U_TR] ON PIMS_SURVEY_PLAN_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_SURVEY_PLAN_TYPE
    set "SURVEY_PLAN_TYPE_CODE" = inserted."SURVEY_PLAN_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SURVEY_PLAN_TYPE
    inner join inserted
    on (PIMS_SURVEY_PLAN_TYPE.SURVEY_PLAN_TYPE_CODE = inserted.SURVEY_PLAN_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PIMPRV_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PIMPRV_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PIMPRV_I_S_U_TR] ON PIMS_PROPERTY_IMPROVEMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_IMPROVEMENT
    set "PROPERTY_IMPROVEMENT_ID" = inserted."PROPERTY_IMPROVEMENT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "PROPERTY_IMPROVEMENT_TYPE_CODE" = inserted."PROPERTY_IMPROVEMENT_TYPE_CODE",
      "IMPROVEMENT_DESCRIPTION" = inserted."IMPROVEMENT_DESCRIPTION",
      "STRUCTURE_SIZE" = inserted."STRUCTURE_SIZE",
      "ADDRESS" = inserted."ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_IMPROVEMENT
    inner join inserted
    on (PIMS_PROPERTY_IMPROVEMENT.PROPERTY_IMPROVEMENT_ID = inserted.PROPERTY_IMPROVEMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPPUR_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPPUR_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPPUR_I_S_U_TR] ON PIMS_PROPERTY_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_PURPOSE_TYPE
    set "PROPERTY_PURPOSE_TYPE_CODE" = inserted."PROPERTY_PURPOSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_PURPOSE_TYPE
    inner join inserted
    on (PIMS_PROPERTY_PURPOSE_TYPE.PROPERTY_PURPOSE_TYPE_CODE = inserted.PROPERTY_PURPOSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQDOC_I_S_U_TR] ON PIMS_ACQUISITION_FILE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACQUISITION_FILE_DOCUMENT
    set "ACQUISITION_FILE_DOCUMENT_ID" = inserted."ACQUISITION_FILE_DOCUMENT_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE_DOCUMENT
    inner join inserted
    on (PIMS_ACQUISITION_FILE_DOCUMENT.ACQUISITION_FILE_DOCUMENT_ID = inserted.ACQUISITION_FILE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INSRNC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_INSRNC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INSRNC_I_S_U_TR] ON PIMS_INSURANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_INSURANCE
    set "INSURANCE_ID" = inserted."INSURANCE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "INSURANCE_TYPE_CODE" = inserted."INSURANCE_TYPE_CODE",
      "OTHER_INSURANCE_TYPE" = inserted."OTHER_INSURANCE_TYPE",
      "COVERAGE_DESCRIPTION" = inserted."COVERAGE_DESCRIPTION",
      "COVERAGE_LIMIT" = inserted."COVERAGE_LIMIT",
      "IS_INSURANCE_IN_PLACE" = inserted."IS_INSURANCE_IN_PLACE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INSURANCE
    inner join inserted
    on (PIMS_INSURANCE.INSURANCE_ID = inserted.INSURANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ARUNIT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ARUNIT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ARUNIT_I_S_U_TR] ON PIMS_AREA_UNIT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_AREA_UNIT_TYPE
    set "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_AREA_UNIT_TYPE
    inner join inserted
    on (PIMS_AREA_UNIT_TYPE.AREA_UNIT_TYPE_CODE = inserted.AREA_UNIT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJPER_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRJPER_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJPER_I_S_U_TR] ON PIMS_PROJECT_PERSON INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROJECT_PERSON
    set "PROJECT_PERSON_ID" = inserted."PROJECT_PERSON_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "PROJECT_PERSON_ROLE_TYPE_CODE" = inserted."PROJECT_PERSON_ROLE_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_PERSON
    inner join inserted
    on (PIMS_PROJECT_PERSON.PROJECT_PERSON_ID = inserted.PROJECT_PERSON_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPRP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPPRP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPRP_I_S_U_TR] ON PIMS_DISPOSITION_FILE_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISPOSITION_FILE_PROPERTY
    set "DISPOSITION_FILE_PROPERTY_ID" = inserted."DISPOSITION_FILE_PROPERTY_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_NAME" = inserted."PROPERTY_NAME",
      "LOCATION" = inserted."LOCATION",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_PROPERTY
    inner join inserted
    on (PIMS_DISPOSITION_FILE_PROPERTY.DISPOSITION_FILE_PROPERTY_ID = inserted.DISPOSITION_FILE_PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LNDATY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LNDATY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LNDATY_I_S_U_TR] ON PIMS_LAND_ACT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LAND_ACT_TYPE
    set "LAND_ACT_TYPE_CODE" = inserted."LAND_ACT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LAND_ACT_TYPE
    inner join inserted
    on (PIMS_LAND_ACT_TYPE.LAND_ACT_TYPE_CODE = inserted.LAND_ACT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_STKHLT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_STKHLT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_STKHLT_I_S_U_TR] ON PIMS_LEASE_STAKEHOLDER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_STAKEHOLDER_TYPE
    set "LEASE_STAKEHOLDER_TYPE_CODE" = inserted."LEASE_STAKEHOLDER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_PAYABLE_RELATED" = inserted."IS_PAYABLE_RELATED",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_STAKEHOLDER_TYPE
    inner join inserted
    on (PIMS_LEASE_STAKEHOLDER_TYPE.LEASE_STAKEHOLDER_TYPE_CODE = inserted.LEASE_STAKEHOLDER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_YRFINC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_YRFINC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_YRFINC_I_S_U_TR] ON PIMS_YEARLY_FINANCIAL_CODE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_YEARLY_FINANCIAL_CODE
    set "ID" = inserted."ID",
      "CODE" = inserted."CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_YEARLY_FINANCIAL_CODE
    inner join inserted
    on (PIMS_YEARLY_FINANCIAL_CODE.ID = inserted.ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_U_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACQUISITION_OWNER
    set "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "IS_PRIMARY_OWNER" = inserted."IS_PRIMARY_OWNER",
      "IS_ORGANIZATION" = inserted."IS_ORGANIZATION",
      "LAST_NAME_AND_CORP_NAME" = inserted."LAST_NAME_AND_CORP_NAME",
      "OTHER_NAME" = inserted."OTHER_NAME",
      "GIVEN_NAME" = inserted."GIVEN_NAME",
      "INCORPORATION_NUMBER" = inserted."INCORPORATION_NUMBER",
      "REGISTRATION_NUMBER" = inserted."REGISTRATION_NUMBER",
      "CONTACT_EMAIL_ADDR" = inserted."CONTACT_EMAIL_ADDR",
      "CONTACT_PHONE_NUM" = inserted."CONTACT_PHONE_NUM",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_OWNER
    inner join inserted
    on (PIMS_ACQUISITION_OWNER.ACQUISITION_OWNER_ID = inserted.ACQUISITION_OWNER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACDO_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACDO_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACDO_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_ACTIVITY_DOCUMENT
    set "PROPERTY_ACTIVITY_DOCUMENT_ID" = inserted."PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY_DOCUMENT
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY_DOCUMENT.PROPERTY_ACTIVITY_DOCUMENT_ID = inserted.PROPERTY_ACTIVITY_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSPERD_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSPERD_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSPERD_I_S_U_TR] ON PIMS_LEASE_PERIOD INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LEASE_PERIOD
    set "LEASE_PERIOD_ID" = inserted."LEASE_PERIOD_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_PERIOD_STATUS_TYPE_CODE" = inserted."LEASE_PERIOD_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE" = inserted."LEASE_PMT_FREQ_TYPE_CODE",
      "ADDL_RENT_FREQ" = inserted."ADDL_RENT_FREQ",
      "VBL_RENT_FREQ" = inserted."VBL_RENT_FREQ",
      "PERIOD_START_DATE" = inserted."PERIOD_START_DATE",
      "PERIOD_EXPIRY_DATE" = inserted."PERIOD_EXPIRY_DATE",
      "PERIOD_RENEWAL_DATE" = inserted."PERIOD_RENEWAL_DATE",
      "PAYMENT_AMOUNT" = inserted."PAYMENT_AMOUNT",
      "PAYMENT_DUE_DATE" = inserted."PAYMENT_DUE_DATE",
      "PAYMENT_NOTE" = inserted."PAYMENT_NOTE",
      "IS_GST_ELIGIBLE" = inserted."IS_GST_ELIGIBLE",
      "GST_AMOUNT" = inserted."GST_AMOUNT",
      "IS_PERIOD_EXERCISED" = inserted."IS_PERIOD_EXERCISED",
      "IS_VARIABLE_PAYMENT" = inserted."IS_VARIABLE_PAYMENT",
      "IS_FLEXIBLE_DURATION" = inserted."IS_FLEXIBLE_DURATION",
      "ADDL_RENT_AGREED_PMT" = inserted."ADDL_RENT_AGREED_PMT",
      "ADDL_RENT_GST_AMOUNT" = inserted."ADDL_RENT_GST_AMOUNT",
      "IS_ADDL_RENT_SUBJECT_TO_GST" = inserted."IS_ADDL_RENT_SUBJECT_TO_GST",
      "VBL_RENT_AGREED_PMT" = inserted."VBL_RENT_AGREED_PMT",
      "VBL_RENT_GST_AMOUNT" = inserted."VBL_RENT_GST_AMOUNT",
      "IS_VBL_RENT_SUBJECT_TO_GST" = inserted."IS_VBL_RENT_SUBJECT_TO_GST",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PERIOD
    inner join inserted
    on (PIMS_LEASE_PERIOD.LEASE_PERIOD_ID = inserted.LEASE_PERIOD_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPSTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPSTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPSTY_I_S_U_TR] ON PIMS_DISPOSITION_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISPOSITION_STATUS_TYPE
    set "DISPOSITION_STATUS_TYPE_CODE" = inserted."DISPOSITION_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_STATUS_TYPE
    inner join inserted
    on (PIMS_DISPOSITION_STATUS_TYPE.DISPOSITION_STATUS_TYPE_CODE = inserted.DISPOSITION_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LTRTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LTRTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LTRTYP_I_S_U_TR] ON PIMS_LETTER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_LETTER_TYPE
    set "LETTER_TYPE_CODE" = inserted."LETTER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LETTER_TYPE
    inner join inserted
    on (PIMS_LETTER_TYPE.LETTER_TYPE_CODE = inserted.LETTER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPORG_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPORG_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPORG_I_S_U_TR] ON PIMS_PROPERTY_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_ORGANIZATION
    set "PROPERTY_ORGANIZATION_ID" = inserted."PROPERTY_ORGANIZATION_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ORGANIZATION
    inner join inserted
    on (PIMS_PROPERTY_ORGANIZATION.PROPERTY_ORGANIZATION_ID = inserted.PROPERTY_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_FRMTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_FRMTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_FRMTYP_I_S_U_TR] ON PIMS_FORM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_FORM_TYPE
    set "FORM_TYPE_CODE" = inserted."FORM_TYPE_CODE",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_FORM_TYPE
    inner join inserted
    on (PIMS_FORM_TYPE.FORM_TYPE_CODE = inserted.FORM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_FNCTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_FNCTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_FNCTYP_I_S_U_TR] ON PIMS_FENCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_FENCE_TYPE
    set "FENCE_TYPE_CODE" = inserted."FENCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_FENCE_TYPE
    inner join inserted
    on (PIMS_FENCE_TYPE.FENCE_TYPE_CODE = inserted.FENCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_USER_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_USER_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_USER_I_S_U_TR] ON PIMS_USER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_USER
    set "USER_ID" = inserted."USER_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "USER_TYPE_CODE" = inserted."USER_TYPE_CODE",
      "BUSINESS_IDENTIFIER_VALUE" = inserted."BUSINESS_IDENTIFIER_VALUE",
      "GUID_IDENTIFIER_VALUE" = inserted."GUID_IDENTIFIER_VALUE",
      "POSITION" = inserted."POSITION",
      "NOTE" = inserted."NOTE",
      "LAST_LOGIN" = inserted."LAST_LOGIN",
      "APPROVED_BY_ID" = inserted."APPROVED_BY_ID",
      "ISSUE_DATE" = inserted."ISSUE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER
    inner join inserted
    on (PIMS_USER.USER_ID = inserted.USER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TENNTX_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TENNTX_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TENNTX_I_S_U_TR] ON PIMS_TENANT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_TENANT
    set "TENANT_ID" = inserted."TENANT_ID",
      "CODE" = inserted."CODE",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "SETTINGS" = inserted."SETTINGS",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TENANT
    inner join inserted
    on (PIMS_TENANT.TENANT_ID = inserted.TENANT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPIBT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPIBT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPIBT_I_S_U_TR] ON PIMS_DSP_INITIATING_BRANCH_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DSP_INITIATING_BRANCH_TYPE
    set "DSP_INITIATING_BRANCH_TYPE_CODE" = inserted."DSP_INITIATING_BRANCH_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_INITIATING_BRANCH_TYPE
    inner join inserted
    on (PIMS_DSP_INITIATING_BRANCH_TYPE.DSP_INITIATING_BRANCH_TYPE_CODE = inserted.DSP_INITIATING_BRANCH_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRROAD_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRROAD_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRROAD_I_S_U_TR] ON PIMS_PROPERTY_ROAD_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_ROAD_TYPE
    set "PROPERTY_ROAD_TYPE_CODE" = inserted."PROPERTY_ROAD_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ROAD_TYPE
    inner join inserted
    on (PIMS_PROPERTY_ROAD_TYPE.PROPERTY_ROAD_TYPE_CODE = inserted.PROPERTY_ROAD_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PERSON_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PERSON_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PERSON_I_S_U_TR] ON PIMS_PERSON INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PERSON
    set "PERSON_ID" = inserted."PERSON_ID",
      "SURNAME" = inserted."SURNAME",
      "FIRST_NAME" = inserted."FIRST_NAME",
      "MIDDLE_NAMES" = inserted."MIDDLE_NAMES",
      "NAME_SUFFIX" = inserted."NAME_SUFFIX",
      "PREFERRED_NAME" = inserted."PREFERRED_NAME",
      "BIRTH_DATE" = inserted."BIRTH_DATE",
      "COMMENT" = inserted."COMMENT",
      "ADDRESS_COMMENT" = inserted."ADDRESS_COMMENT",
      "USE_ORGANIZATION_ADDRESS" = inserted."USE_ORGANIZATION_ADDRESS",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PERSON
    inner join inserted
    on (PIMS_PERSON.PERSON_ID = inserted.PERSON_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_U_TR] ON PIMS_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY
    set "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE" = inserted."PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE" = inserted."PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE" = inserted."SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE" = inserted."VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE" = inserted."VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE" = inserted."PPH_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE" = inserted."PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "PID" = inserted."PID",
      "PIN" = inserted."PIN",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "FILE_NUMBER_SUFFIX" = inserted."FILE_NUMBER_SUFFIX",
      "LAND_AREA" = inserted."LAND_AREA",
      "LAND_LEGAL_DESCRIPTION" = inserted."LAND_LEGAL_DESCRIPTION",
      "BOUNDARY" = inserted."BOUNDARY",
      "LOCATION" = inserted."LOCATION",
      "GENERAL_LOCATION" = inserted."GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER" = inserted."SURVEY_PLAN_NUMBER",
      "SURPLUS_DECLARATION_COMMENT" = inserted."SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE" = inserted."SURPLUS_DECLARATION_DATE",
      "NOTES" = inserted."NOTES",
      "MUNICIPAL_ZONING" = inserted."MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL" = inserted."IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT" = inserted."VOLUMETRIC_MEASUREMENT",
      "IS_OWNED" = inserted."IS_OWNED",
      "IS_RETIRED" = inserted."IS_RETIRED",
      "PPH_STATUS_UPDATE_USERID" = inserted."PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP" = inserted."PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID" = inserted."PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT" = inserted."IS_RWY_BELT_DOM_PATENT",
      "ADDITIONAL_DETAILS" = inserted."ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE" = inserted."IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE" = inserted."IS_TAXES_PAYABLE",
      "BAND_NAME" = inserted."BAND_NAME",
      "RESERVE_NAME" = inserted."RESERVE_NAME",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY
    inner join inserted
    on (PIMS_PROPERTY.PROPERTY_ID = inserted.PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRLT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRLT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRLT_I_S_U_TR] ON PIMS_PROJECT_PERSON_ROLE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROJECT_PERSON_ROLE_TYPE
    set "PROJECT_PERSON_ROLE_TYPE_CODE" = inserted."PROJECT_PERSON_ROLE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_PERSON_ROLE_TYPE
    inner join inserted
    on (PIMS_PROJECT_PERSON_ROLE_TYPE.PROJECT_PERSON_ROLE_TYPE_CODE = inserted.PROJECT_PERSON_ROLE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INTHLD_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_INTHLD_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INTHLD_I_S_U_TR] ON PIMS_INTEREST_HOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_INTEREST_HOLDER
    set "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "INTEREST_HOLDER_TYPE_CODE" = inserted."INTEREST_HOLDER_TYPE_CODE",
      "COMMENT" = inserted."COMMENT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INTEREST_HOLDER
    inner join inserted
    on (PIMS_INTEREST_HOLDER.INTEREST_HOLDER_ID = inserted.INTEREST_HOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ROLCLM_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ROLCLM_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ROLCLM_I_S_U_TR] ON PIMS_ROLE_CLAIM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ROLE_CLAIM
    set "ROLE_CLAIM_ID" = inserted."ROLE_CLAIM_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "CLAIM_ID" = inserted."CLAIM_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ROLE_CLAIM
    inner join inserted
    on (PIMS_ROLE_CLAIM.ROLE_CLAIM_ID = inserted.ROLE_CLAIM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQCIT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQCIT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQCIT_I_S_U_TR] ON PIMS_ACQ_CHKLST_ITEM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_ACQ_CHKLST_ITEM_TYPE
    set "ACQ_CHKLST_ITEM_TYPE_CODE" = inserted."ACQ_CHKLST_ITEM_TYPE_CODE",
      "ACQ_CHKLST_SECTION_TYPE_CODE" = inserted."ACQ_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "HINT" = inserted."HINT",
      "IS_REQUIRED" = inserted."IS_REQUIRED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_CHKLST_ITEM_TYPE
    inner join inserted
    on (PIMS_ACQ_CHKLST_ITEM_TYPE.ACQ_CHKLST_ITEM_TYPE_CODE = inserted.ACQ_CHKLST_ITEM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SCDPHL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_SCDPHL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SCDPHL_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT_HOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_SECURITY_DEPOSIT_HOLDER
    set "SECURITY_DEPOSIT_HOLDER_ID" = inserted."SECURITY_DEPOSIT_HOLDER_ID",
      "SECURITY_DEPOSIT_ID" = inserted."SECURITY_DEPOSIT_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_HOLDER
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_HOLDER.SECURITY_DEPOSIT_HOLDER_ID = inserted.SECURITY_DEPOSIT_HOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPSAL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPSAL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPSAL_I_S_U_TR] ON PIMS_DISPOSITION_SALE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_DISPOSITION_SALE
    set "DISPOSITION_SALE_ID" = inserted."DISPOSITION_SALE_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DSP_PURCH_AGENT_ID" = inserted."DSP_PURCH_AGENT_ID",
      "DSP_PURCH_SOLICITOR_ID" = inserted."DSP_PURCH_SOLICITOR_ID",
      "FINAL_CONDITION_REMOVAL_DT" = inserted."FINAL_CONDITION_REMOVAL_DT",
      "SALE_COMPLETION_DT" = inserted."SALE_COMPLETION_DT",
      "SALE_FISCAL_YEAR" = inserted."SALE_FISCAL_YEAR",
      "SALE_FINAL_AMT" = inserted."SALE_FINAL_AMT",
      "REALTOR_COMMISSION_AMT" = inserted."REALTOR_COMMISSION_AMT",
      "IS_GST_REQUIRED" = inserted."IS_GST_REQUIRED",
      "GST_COLLECTED_AMT" = inserted."GST_COLLECTED_AMT",
      "NET_BOOK_AMT" = inserted."NET_BOOK_AMT",
      "TOTAL_COST_AMT" = inserted."TOTAL_COST_AMT",
      "SPP_AMT" = inserted."SPP_AMT",
      "REMEDIATION_AMT" = inserted."REMEDIATION_AMT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_SALE
    inner join inserted
    on (PIMS_DISPOSITION_SALE.DISPOSITION_SALE_ID = inserted.DISPOSITION_SALE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PACMRQ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PACMRQ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PACMRQ_I_S_U_TR] ON PIMS_PROP_ACQ_FL_COMP_REQ INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROP_ACQ_FL_COMP_REQ
    set "PROP_ACQ_FL_COMP_REQ_ID" = inserted."PROP_ACQ_FL_COMP_REQ_ID",
      "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_ACQ_FL_COMP_REQ
    inner join inserted
    on (PIMS_PROP_ACQ_FL_COMP_REQ.PROP_ACQ_FL_COMP_REQ_ID = inserted.PROP_ACQ_FL_COMP_REQ_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPTYP_I_S_U_TR] ON PIMS_PROPERTY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROPERTY_TYPE
    set "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_TYPE
    inner join inserted
    on (PIMS_PROPERTY_TYPE.PROPERTY_TYPE_CODE = inserted.PROPERTY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRAC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRAC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRAC_I_S_U_TR] ON PIMS_PROP_PROP_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_PROP_PROP_ACTIVITY
    set "PROP_PROP_ACTIVITY_ID" = inserted."PROP_PROP_ACTIVITY_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ACTIVITY
    inner join inserted
    on (PIMS_PROP_PROP_ACTIVITY.PROP_PROP_ACTIVITY_ID = inserted.PROP_PROP_ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLPRJ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RFLPRJ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RFLPRJ_I_S_U_TR] ON PIMS_RESEARCH_FILE_PROJECT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- update statement
  update PIMS_RESEARCH_FILE_PROJECT
    set "RESEARCH_FILE_PROJECT_ID" = inserted."RESEARCH_FILE_PROJECT_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_PROJECT
    inner join inserted
    on (PIMS_RESEARCH_FILE_PROJECT.RESEARCH_FILE_PROJECT_ID = inserted.RESEARCH_FILE_PROJECT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LESDOC_PIM_DOCQUE_FK
PRINT N'Create foreign key constraint dbo.PIM_LESDOC_PIM_DOCQUE_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD CONSTRAINT [PIM_LESDOC_PIM_DOCQUE_FK]
	FOREIGN KEY([LEASE_DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_LEASE_DOCUMENT]([LEASE_DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPDOC_PIM_DOCQUE_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPDOC_PIM_DOCQUE_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD CONSTRAINT [PIM_DSPDOC_PIM_DOCQUE_FK]
	FOREIGN KEY([DISPOSITION_FILE_DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DISPOSITION_FILE_DOCUMENT]([DISPOSITION_FILE_DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRACDO_PIM_DOCQUE_FK
PRINT N'Create foreign key constraint dbo.PIM_PRACDO_PIM_DOCQUE_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD CONSTRAINT [PIM_PRACDO_PIM_DOCQUE_FK]
	FOREIGN KEY([PROPERTY_ACTIVITY_DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]([PROPERTY_ACTIVITY_DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_RFLDOC_PIM_DOCQUE_FK
PRINT N'Create foreign key constraint dbo.PIM_RFLDOC_PIM_DOCQUE_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD CONSTRAINT [PIM_RFLDOC_PIM_DOCQUE_FK]
	FOREIGN KEY([RESEARCH_FILE_DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]([RESEARCH_FILE_DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQDOC_PIM_DOCQUE_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQDOC_PIM_DOCQUE_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_QUEUE]
	ADD CONSTRAINT [PIM_ACQDOC_PIM_DOCQUE_FK]
	FOREIGN KEY([ACQUISITION_FILE_DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT]([ACQUISITION_FILE_DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
