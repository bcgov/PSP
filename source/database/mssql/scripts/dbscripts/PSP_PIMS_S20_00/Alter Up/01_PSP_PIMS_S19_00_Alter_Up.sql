-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Fri Jan 28 12:21:54 PST 2022
-- Execute this script on:
-- 		PIMS_19_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PIMS_20_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_CONTACT_MGR_VW
PRINT N'Drop view dbo.PIMS_CONTACT_MGR_VW'
GO
DROP VIEW [dbo].[PIMS_CONTACT_MGR_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
DROP VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_STATIC_VARIABLE
PRINT N'Alter table dbo.PIMS_STATIC_VARIABLE'
GO
ALTER TABLE [dbo].[PIMS_STATIC_VARIABLE]
	ADD [APP_CREATE_TIMESTAMP] datetime NOT NULL CONSTRAINT [STAVBL_APP_CREATE_TIMESTAMP_DEF] DEFAULT (getutcdate()), 
	[APP_CREATE_USERID] nvarchar(30) NOT NULL CONSTRAINT [STAVBL_APP_CREATE_USERID_DEF] DEFAULT (user_name()), 
	[APP_CREATE_USER_GUID] uniqueidentifier NULL, 
	[APP_CREATE_USER_DIRECTORY] nvarchar(30) NOT NULL CONSTRAINT [STAVBL_APP_CREATE_USER_DIRECTORY_DEF] DEFAULT (user_name()), 
	[APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL CONSTRAINT [STAVBL_APP_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT (getutcdate()), 
	[APP_LAST_UPDATE_USERID] nvarchar(30) NOT NULL CONSTRAINT [STAVBL_APP_LAST_UPDATE_USERID_DEF] DEFAULT (user_name()), 
	[APP_LAST_UPDATE_USER_GUID] uniqueidentifier NULL, 
	[APP_LAST_UPDATE_USER_DIRECTORY] nvarchar(30) NOT NULL CONSTRAINT [STAVBL_APP_LAST_UPDATE_USER_DIRECTORY_DEF] DEFAULT (user_name())
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Create view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , PROP.PROPERTY_CLASSIFICATION_TYPE_CODE
     , PROP.PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.NAME
     , PROP.DESCRIPTION
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.ENCUMBRANCE_REASON
     , PROP.IS_SENSITIVE
     , PROP.IS_OWNED
     , PROP.IS_PROPERTY_OF_INTEREST
     , PROP.IS_VISIBLE_TO_OTHER_AGENCIES
     , PROP.ZONING,ZONING_POTENTIAL
FROM   PIMS_PROPERTY       PROP                                                    INNER JOIN
       PIMS_ADDRESS        ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        INNER JOIN
       PIMS_PROVINCE_STATE PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID INNER JOIN
       PIMS_COUNTRY        CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
WHERE  PROP.BOUNDARY IS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_STATIC_VARIABLE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_STATIC_VARIABLE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_STATIC_VARIABLE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_STATIC_VARIABLE_HIST
PRINT N'Create table dbo.PIMS_STATIC_VARIABLE_HIST'
GO
CREATE TABLE [dbo].[PIMS_STATIC_VARIABLE_HIST]  ( 
	[_STATIC_VARIABLE_HIST_ID]      	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_STATIC_VARIABLE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[STATIC_VARIABLE_NAME]          	nvarchar(100) NOT NULL,
	[STATIC_VARIABLE_VALUE]         	nvarchar(100) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_STAVBL_H_PK] PRIMARY KEY CLUSTERED([_STATIC_VARIABLE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_STAVBL_H_UK
PRINT N'Create unique constraint dbo.PIMS_STAVBL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_STATIC_VARIABLE_HIST]
	ADD CONSTRAINT [PIMS_STAVBL_H_UK]
	UNIQUE ([_STATIC_VARIABLE_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PERSON_CONTACT_VW
PRINT N'Create view dbo.PIMS_PERSON_CONTACT_VW'
GO
CREATE VIEW [dbo].[PIMS_PERSON_CONTACT_VW] AS
SELECT DISTINCT PERSON_ID
     , (SELECT TOP 1 CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'FAX'
           AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD DESC) AS FAX
     , (SELECT TOP 1 CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'PERSMOBIL'
           AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD DESC) AS PERSONAL_MOBILE
     , (SELECT TOP 1 CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'PERSPHONE'
           AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD DESC) AS PERSONAL_PHONE
     , (SELECT TOP 1 CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'WORKMOBIL'
           AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD DESC) AS WORK_MOBILE
     , (SELECT TOP 1 CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'WORKPHONE'
           AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD DESC) AS WORK_PHONE
     , (SELECT TOP 1 CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'WORKEMAIL'
           AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD DESC) AS WORK_EMAIL
     , (SELECT TOP 1 CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'PERSEMAIL'
           AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD DESC) AS PERSONAL_EMAIL
FROM   PIMS_CONTACT_METHOD TMP
WHERE  ORGANIZATION_ID IS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_CONTACT_MGR_VW
PRINT N'Create view dbo.PIMS_CONTACT_MGR_VW'
GO
CREATE VIEW [dbo].[PIMS_CONTACT_MGR_VW] AS
  SELECT CONCAT('P', PER.PERSON_ID)                                          AS ID
       , PER.PERSON_ID
       , NULL                                                                AS ORGANIZATION_ID
       , PER.IS_DISABLED
       , TRIM(CONCAT_WS(' ', PER.FIRST_NAME, PER.MIDDLE_NAMES, PER.SURNAME)) AS SUMMARY
       , PER.SURNAME
       , PER.FIRST_NAME
       , PER.MIDDLE_NAMES
       , NULL                                                                AS ORGANIZATION_NAME
       , PAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1                                                AS MAILING_ADDRESS
       , ADR.MUNICIPALITY_NAME
       , PRV.PROVINCE_STATE_CODE                                             AS PROVINCE_STATE
       , COALESCE(PVW.WORK_EMAIL, PVW.PERSONAL_EMAIL)                        AS EMAIL_ADDRESS
  FROM   PIMS_PERSON            PER                                                         LEFT JOIN
         PIMS_PERSON_ADDRESS    PAD ON PAD.PERSON_ID                = PER.PERSON_ID   
                                   AND PAD.ADDRESS_USAGE_TYPE_CODE  = 'MAILING'             LEFT JOIN
         PIMS_ADDRESS           ADR ON ADR.ADDRESS_ID               = PAD.ADDRESS_ID        LEFT JOIN 
         PIMS_PROVINCE_STATE    PRV ON PRV.PROVINCE_STATE_ID        = ADR.PROVINCE_STATE_ID LEFT JOIN
         PIMS_PERSON_CONTACT_VW PVW ON PVW.PERSON_ID                = PER.PERSON_ID
  UNION
  SELECT CONCAT('O', ORG.ORGANIZATION_ID)
       , NULL
       , ORG.ORGANIZATION_ID
       , ORG.IS_DISABLED
       , ORG.ORGANIZATION_NAME
       , NULL
       , NULL
       , NULL                                                        
       , ORG.ORGANIZATION_NAME
       , OAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1
       , ADR.MUNICIPALITY_NAME                     
       , PRV.PROVINCE_STATE_CODE
       , CON.CONTACT_METHOD_VALUE 
  FROM   PIMS_ORGANIZATION         ORG                                                         LEFT JOIN 
         PIMS_ORGANIZATION_ADDRESS OAD ON OAD.ORGANIZATION_ID          = ORG.ORGANIZATION_ID
                                      AND OAD.ADDRESS_USAGE_TYPE_CODE  = 'MAILING'             LEFT JOIN
         PIMS_ADDRESS              ADR ON ADR.ADDRESS_ID               = OAD.ADDRESS_ID        LEFT JOIN 
         PIMS_PROVINCE_STATE       PRV ON PRV.PROVINCE_STATE_ID        = ADR.PROVINCE_STATE_ID LEFT JOIN
         PIMS_CONTACT_METHOD       CON ON CON.ORGANIZATION_ID          = ORG.ORGANIZATION_ID
                                      AND CON.CONTACT_METHOD_TYPE_CODE = 'WORKEMAIL'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_STAVBL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_STAVBL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_STAVBL_A_S_IUD_TR] ON PIMS_STATIC_VARIABLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_STATIC_VARIABLE_HIST set END_DATE_HIST = @curr_date where STATIC_VARIABLE_NAME in (select STATIC_VARIABLE_NAME from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_STATIC_VARIABLE_HIST ([STATIC_VARIABLE_NAME], [STATIC_VARIABLE_VALUE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _STATIC_VARIABLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [STATIC_VARIABLE_NAME], [STATIC_VARIABLE_VALUE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_STATIC_VARIABLE_H_ID_SEQ]) as [_STATIC_VARIABLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
