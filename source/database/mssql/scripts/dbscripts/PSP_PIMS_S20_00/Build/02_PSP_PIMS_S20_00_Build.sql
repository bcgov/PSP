/*
Script generated by Aqua Data Studio 22.1.1 on Jan-27-2022 04:32:20 PM
Database: PIMS_20_00
Schema: dbo
Objects: DATATYPE, DEFAULT, RULE, SEQUENCE, TABLE, VIEW, SYNONYM, PROCEDURE, FUNCTION, INDEX, TRIGGER, DATABASETRIGGER, DATABASE_AUDIT_SPEC
*/
CREATE SEQUENCE "dbo"."PIMS_ACCESS_REQUEST_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ACCESS_REQUEST_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ACCESS_REQUEST_ORGANIZATION_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ACTIVITY_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ACTIVITY_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ACTIVITY_MODEL_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ACTIVITY_MODEL_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ACTIVITY_MODEL_TASK_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ACTIVITY_SERVICE_FILE_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ACTIVITY_TASK_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ADDRESS_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ADDRESS_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ASSET_EVALUATION_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_BUILDING_CONSTRUCTION_TYPE_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_BUILDING_EVALUATION_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_BUILDING_FISCAL_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_BUILDING_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_BUILDING_OCCUPANT_TYPE_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_BUILDING_PREDOMINATE_USE_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_CLAIM_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_CLAIM_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_CONTACT_METHOD_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_CONTACT_METHOD_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_INSURANCE_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_INSURANCE_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_L_FILE_NO_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_LEASE_ACTIVITY_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_LEASE_ACTIVITY_PERIOD_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_LEASE_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_LEASE_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_LEASE_PAYMENT_FORECAST_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_LEASE_PAYMENT_FORECAST_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_LEASE_PAYMENT_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_LEASE_PAYMENT_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_LEASE_PAYMENT_PERIOD_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_LEASE_PAYMENT_PERIOD_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_LEASE_TENANT_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_LEASE_TENANT_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_LEASE_TERM_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_LEASE_TERM_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ORGANIZATION_ADDRESS_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ORGANIZATION_ADDRESS_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ORGANIZATION_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ORGANIZATION_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PERSON_ADDRESS_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PERSON_ADDRESS_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PERSON_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PERSON_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PERSON_ORGANIZATION_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PERSON_ORGANIZATION_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROJECT_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROJECT_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROJECT_NOTE_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROJECT_NOTE_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROJECT_NUMBER_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROJECT_ORGANIZATION_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROJECT_PROPERTY_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROJECT_PROPERTY_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROJECT_WORKFLOW_MODEL_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROJECT_WORKFLOW_MODEL_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_ACTIVITY_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_ACTIVITY_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_EVALUATION_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_EVALUATION_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_IMPROVEMENT_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_IMPROVEMENT_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_LEASE_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_LEASE_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_ORGANIZATION_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_PROPERTY_SERVICE_FILE_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_PROPERTY_SERVICE_FILE_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_SERVICE_FILE_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_SERVICE_FILE_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_STRUCTURE_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_TAX_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_PROPERTY_TAX_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ROLE_CLAIM_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ROLE_CLAIM_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ROLE_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_ROLE_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_SECURITY_DEPOSIT_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_SECURITY_DEPOSIT_HOLDER_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_SECURITY_DEPOSIT_HOLDER_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_SECURITY_DEPOSIT_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_SECURITY_DEPOSIT_RETURN_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_SECURITY_DEPOSIT_RETURN_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_STATIC_VARIABLE_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_STRUCTURE_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_TASK_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_TASK_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_TASK_TEMPLATE_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_TASK_TEMPLATE_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_TENANT_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_USER_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_USER_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_USER_ORGANIZATION_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_USER_ORGANIZATION_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_USER_ROLE_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_USER_ROLE_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_USER_TASK_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_WORKFLOW_MODEL_H_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE "dbo"."PIMS_WORKFLOW_MODEL_ID_SEQ"
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE TABLE "dbo"."PIMSX_TableDefinitions"  ( 
	"TABLE_NAME"   	nvarchar(255) NULL,
	"TABLE_ALIAS"  	nvarchar(255) NULL,
	"HIST_REQUIRED"	nvarchar(1) NULL,
	"DESCRIPTION"  	nvarchar(max) NULL 
	)
GO

CREATE TABLE "dbo"."PIMS_ACCESS_REQUEST_STATUS_TYPE"  ( 
	"ACCESS_REQUEST_STATUS_TYPE_CODE"	nvarchar(20) NOT NULL,
	"DESCRIPTION"                    	nvarchar(200) NOT NULL,
	"IS_DISABLED"                    	bit NOT NULL CONSTRAINT "ARQSTT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"                  	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"     	bigint NOT NULL CONSTRAINT "ARQSTT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"            	datetime NOT NULL CONSTRAINT "ARQSTT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"               	nvarchar(30) NOT NULL CONSTRAINT "ARQSTT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "ARQSTT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "ARQSTT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "ARQSTT_PK" PRIMARY KEY CLUSTERED("ACCESS_REQUEST_STATUS_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_ROLE"  ( 
	"ROLE_ID"                       	bigint NOT NULL CONSTRAINT "ROLE_ROLE_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_ROLE_ID_SEQ]),
	"ROLE_UID"                      	uniqueidentifier NOT NULL,
	"KEYCLOAK_GROUP_ID"             	uniqueidentifier NULL,
	"NAME"                          	nvarchar(100) NOT NULL,
	"DESCRIPTION"                   	nvarchar(500) NULL,
	"IS_PUBLIC"                     	bit NOT NULL CONSTRAINT "ROLE_IS_PUBLIC_DEF"  DEFAULT (CONVERT([bit],(0))),
	"IS_DISABLED"                   	bit NOT NULL CONSTRAINT "ROLE_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"SORT_ORDER"                    	int NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "ROLE_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "ROLE_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "ROLE_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "ROLE_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "ROLE_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "ROLE_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "ROLE_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "ROLE_PK" PRIMARY KEY CLUSTERED("ROLE_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PERSON"  ( 
	"PERSON_ID"                     	bigint NOT NULL CONSTRAINT "PERSON_PERSON_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_PERSON_ID_SEQ]),
	"SURNAME"                       	nvarchar(50) NOT NULL,
	"FIRST_NAME"                    	nvarchar(50) NOT NULL,
	"MIDDLE_NAMES"                  	nvarchar(200) NULL,
	"NAME_SUFFIX"                   	nvarchar(50) NULL,
	"PREFERRED_NAME"                	nvarchar(200) NULL,
	"BIRTH_DATE"                    	date NULL,
	"COMMENT"                       	nvarchar(2000) NULL,
	"ADDRESS_COMMENT"               	nvarchar(2000) NULL,
	"IS_DISABLED"                   	bit NOT NULL CONSTRAINT "PERSON_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "PERSON_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "PERSON_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "PERSON_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "PERSON_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "PERSON_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "PERSON_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "PERSON_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PERSON_PK" PRIMARY KEY CLUSTERED("PERSON_ID")
)
GO

CREATE TABLE "dbo"."PIMS_USER"  ( 
	"USER_ID"                       	bigint NOT NULL CONSTRAINT "USER_USER_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_USER_ID_SEQ]),
	"PERSON_ID"                     	bigint NOT NULL,
	"BUSINESS_IDENTIFIER_VALUE"     	nvarchar(30) NOT NULL,
	"GUID_IDENTIFIER_VALUE"         	uniqueidentifier NULL,
	"POSITION"                      	nvarchar(100) NULL,
	"NOTE"                          	nvarchar(1000) NULL,
	"LAST_LOGIN"                    	datetime NULL,
	"APPROVED_BY_ID"                	nvarchar(30) NULL,
	"ISSUE_DATE"                    	datetime NOT NULL,
	"EXPIRY_DATE"                   	datetime NULL,
	"IS_DISABLED"                   	bit NULL CONSTRAINT "USER_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "USER_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "USER_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "USER_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "USER_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "USER_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "USER_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "USER_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "USER_PK" PRIMARY KEY CLUSTERED("USER_ID")
)
GO

CREATE TABLE "dbo"."PIMS_ACCESS_REQUEST"  ( 
	"ACCESS_REQUEST_ID"              	bigint NOT NULL CONSTRAINT "ACRQST_ACCESS_REQUEST_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_ACCESS_REQUEST_ID_SEQ]),
	"USER_ID"                        	bigint NOT NULL,
	"ROLE_ID"                        	bigint NULL,
	"ACCESS_REQUEST_STATUS_TYPE_CODE"	nvarchar(20) NOT NULL,
	"NOTE"                           	nvarchar(max) NULL,
	"CONCURRENCY_CONTROL_NUMBER"     	bigint NOT NULL CONSTRAINT "ACRQST_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "ACRQST_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"           	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"      	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "ACRQST_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"      	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY" 	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"            	datetime NOT NULL CONSTRAINT "ACRQST_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"               	nvarchar(30) NOT NULL CONSTRAINT "ACRQST_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "ACRQST_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "ACRQST_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "ACRQST_PK" PRIMARY KEY CLUSTERED("ACCESS_REQUEST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_ACCESS_REQUEST_HIST"  ( 
	"_ACCESS_REQUEST_HIST_ID"        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACCESS_REQUEST_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"            	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                  	datetime NULL,
	"ACCESS_REQUEST_ID"              	bigint NOT NULL,
	"USER_ID"                        	bigint NOT NULL,
	"ROLE_ID"                        	bigint NULL,
	"ACCESS_REQUEST_STATUS_TYPE_CODE"	nvarchar(20) NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"     	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"APP_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"           	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"      	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"      	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY" 	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"            	datetime NOT NULL,
	"DB_CREATE_USERID"               	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"       	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"          	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_ACRQST_H_PK" PRIMARY KEY CLUSTERED("_ACCESS_REQUEST_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_REGION"  ( 
	"REGION_CODE"               	smallint NOT NULL,
	"REGION_NAME"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "REGION_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "REGION_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "REGION_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "REGION_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "REGION_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "REGION_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "REGION_PK" PRIMARY KEY CLUSTERED("REGION_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_DISTRICT"  ( 
	"DISTRICT_CODE"             	smallint NOT NULL,
	"REGION_CODE"               	smallint NOT NULL,
	"DISTRICT_NAME"             	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "DSTRCT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "DSTRCT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "DSTRCT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "DSTRCT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "DSTRCT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "DSTRCT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "DSTRCT_PK" PRIMARY KEY CLUSTERED("DISTRICT_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_ORG_IDENTIFIER_TYPE"  ( 
	"ORG_IDENTIFIER_TYPE_CODE"  	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "ORGIDT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "ORGIDT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "ORGIDT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "ORGIDT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "ORGIDT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "ORGIDT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "ORGIDT_PK" PRIMARY KEY CLUSTERED("ORG_IDENTIFIER_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_ORGANIZATION_TYPE"  ( 
	"ORGANIZATION_TYPE_CODE"    	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "ORGTYP_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "ORGTYP_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "ORGTYP_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "ORGTYP_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "ORGTYP_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "ORGTYP_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "ORGTYP_PK" PRIMARY KEY CLUSTERED("ORGANIZATION_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_ORGANIZATION"  ( 
	"ORGANIZATION_ID"               	bigint NOT NULL CONSTRAINT "ORG_ORGANIZATION_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_ORGANIZATION_ID_SEQ]),
	"PRNT_ORGANIZATION_ID"          	bigint NULL,
	"REGION_CODE"                   	smallint NULL,
	"DISTRICT_CODE"                 	smallint NULL,
	"ORGANIZATION_TYPE_CODE"        	nvarchar(20) NOT NULL,
	"ORG_IDENTIFIER_TYPE_CODE"      	nvarchar(20) NOT NULL,
	"ORGANIZATION_IDENTIFIER"       	nvarchar(100) NULL,
	"ORGANIZATION_NAME"             	nvarchar(200) NOT NULL,
	"ORGANIZATION_ALIAS"            	nvarchar(200) NULL,
	"INCORPORATION_NUMBER"          	nvarchar(50) NULL,
	"WEBSITE"                       	nvarchar(200) NULL,
	"COMMENT"                       	nvarchar(2000) NULL,
	"IS_DISABLED"                   	bit NOT NULL CONSTRAINT "ORG_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "ORG_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "ORG_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "ORG_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "ORG_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "ORG_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "ORG_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "ORG_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "ORG_PK" PRIMARY KEY CLUSTERED("ORGANIZATION_ID")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Incorporation number of the orgnization' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ORGANIZATION', 
	@level2type = N'Column', @level2name = N'INCORPORATION_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Information related to an organization identified in the PSP system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ORGANIZATION'
GO

CREATE TABLE "dbo"."PIMS_ACCESS_REQUEST_ORGANIZATION"  ( 
	"ACCESS_REQUEST_ORGANIZATION_ID"	bigint NOT NULL CONSTRAINT "ACRQOR_ACCESS_REQUEST_ORGANIZATION_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_ACCESS_REQUEST_ORGANIZATION_ID_SEQ]),
	"ORGANIZATION_ID"               	bigint NULL,
	"ACCESS_REQUEST_ID"             	bigint NOT NULL,
	"IS_DISABLED"                   	bit NULL CONSTRAINT "ACRQOR_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "ACRQOR_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "ACRQOR_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "ACRQOR_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "ACRQOR_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "ACRQOR_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "ACRQOR_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "ACRQOR_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "ACRQOR_PK" PRIMARY KEY CLUSTERED("ACCESS_REQUEST_ORGANIZATION_ID")
)
GO

CREATE TABLE "dbo"."PIMS_ACCESS_REQUEST_ORGANIZATION_HIST"  ( 
	"_ACCESS_REQUEST_ORGANIZATION_HIST_ID"	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"                 	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                       	datetime NULL,
	"ACCESS_REQUEST_ORGANIZATION_ID"      	bigint NOT NULL,
	"ORGANIZATION_ID"                     	bigint NULL,
	"ACCESS_REQUEST_ID"                   	bigint NOT NULL,
	"IS_DISABLED"                         	bit NULL,
	"CONCURRENCY_CONTROL_NUMBER"          	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"                	datetime NOT NULL,
	"APP_CREATE_USERID"                   	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"                	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"           	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"           	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"              	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"           	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"      	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"                 	datetime NOT NULL,
	"DB_CREATE_USERID"                    	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"            	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"               	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_ACRQOR_H_PK" PRIMARY KEY CLUSTERED("_ACCESS_REQUEST_ORGANIZATION_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_ACTIVITY_MODEL"  ( 
	"ACTIVITY_MODEL_ID"             	bigint NOT NULL CONSTRAINT "ACTMDL_ACTIVITY_MODEL_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_MODEL_ID_SEQ]),
	"DESCRIPTION"                   	nvarchar(200) NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL CONSTRAINT "ACTMDL_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "ACTMDL_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "ACTMDL_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "ACTMDL_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "ACTMDL_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "ACTMDL_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "ACTMDL_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "ACTMDL_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "ACTMDL_PK" PRIMARY KEY CLUSTERED("ACTIVITY_MODEL_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROJECT_RISK_TYPE"  ( 
	"PROJECT_RISK_TYPE_CODE"    	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "PRJRSK_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "PRJRSK_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "PRJRSK_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "PRJRSK_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "PRJRSK_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "PRJRSK_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PRJRSK_PK" PRIMARY KEY CLUSTERED("PROJECT_RISK_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_PROJECT_STATUS_TYPE"  ( 
	"PROJECT_STATUS_TYPE_CODE"  	nvarchar(20) NOT NULL,
	"CODE_GROUP"                	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"TEXT"                      	nvarchar(1000) NOT NULL,
	"IS_MILESTONE"              	bit NOT NULL CONSTRAINT "PRJSTY_IS_MILESTONE_DEF"  DEFAULT (CONVERT([bit],(0))),
	"IS_TERMINAL"               	bit NOT NULL CONSTRAINT "PRJSTY_IS_TERMINAL_DEF"  DEFAULT (CONVERT([bit],(0))),
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "PRJSTY_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "PRJSTY_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "PRJSTY_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "PRJSTY_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "PRJSTY_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "PRJSTY_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PRJSTY_PK" PRIMARY KEY CLUSTERED("PROJECT_STATUS_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_PROJECT_TIER_TYPE"  ( 
	"PROJECT_TIER_TYPE_CODE"    	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "PROJTR_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "PROJTR_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "PROJTR_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "PROJTR_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "PROJTR_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "PROJTR_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PROJTR_PK" PRIMARY KEY CLUSTERED("PROJECT_TIER_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_PROJECT_TYPE"  ( 
	"PROJECT_TYPE_CODE"         	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "PRJTYP_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "PRJTYP_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "PRJTYP_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "PRJTYP_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "PRJTYP_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "PRJTYP_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PRJTYP_PK" PRIMARY KEY CLUSTERED("PROJECT_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_PROJECT"  ( 
	"PROJECT_ID"                    	bigint NOT NULL CONSTRAINT "PROJCT_PROJECT_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_ID_SEQ]),
	"PROJECT_TYPE_CODE"             	nvarchar(20) NOT NULL,
	"PROJECT_STATUS_TYPE_CODE"      	nvarchar(20) NOT NULL,
	"PROJECT_RISK_TYPE_CODE"        	nvarchar(20) NOT NULL,
	"PROJECT_TIER_TYPE_CODE"        	nvarchar(20) NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "PROJCT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "PROJCT_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "PROJCT_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "PROJCT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "PROJCT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "PROJCT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "PROJCT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PROJCT_PK" PRIMARY KEY CLUSTERED("PROJECT_ID")
)
GO

CREATE TABLE "dbo"."PIMS_WORKFLOW_MODEL_TYPE"  ( 
	"WORKFLOW_MODEL_TYPE_CODE"  	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "WFLMDT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "WFLMDT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "WFLMDT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "WFLMDT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "WFLMDT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "WFLMDT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "WFLMDT_PK" PRIMARY KEY CLUSTERED("WORKFLOW_MODEL_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_WORKFLOW_MODEL"  ( 
	"WORKFLOW_MODEL_ID"             	bigint NOT NULL CONSTRAINT "WFLMDL_WORKFLOW_MODEL_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_WORKFLOW_MODEL_ID_SEQ]),
	"WORKFLOW_MODEL_TYPE_CODE"      	nvarchar(20) NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL CONSTRAINT "WFLMDL_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "WFLMDL_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "WFLMDL_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "WFLMDL_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "WFLMDL_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "WFLMDL_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "WFLMDL_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "WFLMDL_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "WFLMDL_PK" PRIMARY KEY CLUSTERED("WORKFLOW_MODEL_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROJECT_WORKFLOW_MODEL"  ( 
	"PROJECT_WORKFLOW_MODEL_ID"     	bigint NOT NULL CONSTRAINT "PRWKMD_PROJECT_WORKFLOW_MODEL_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_WORKFLOW_MODEL_ID_SEQ]),
	"PROJECT_ID"                    	bigint NOT NULL,
	"WORKFLOW_MODEL_ID"             	bigint NOT NULL,
	"IS_DISABLED"                   	bit NULL CONSTRAINT "PRWKMD_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "PRWKMD_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "PRWKMD_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "PRWKMD_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "PRWKMD_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "PRWKMD_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "PRWKMD_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "PRWKMD_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PRWKMD_PK" PRIMARY KEY CLUSTERED("PROJECT_WORKFLOW_MODEL_ID")
)
GO

CREATE TABLE "dbo"."PIMS_ACTIVITY"  ( 
	"ACTIVITY_ID"                   	bigint NOT NULL CONSTRAINT "ACTVTY_ACTIVITY_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_ID_SEQ]),
	"PROJECT_ID"                    	bigint NULL,
	"WORKFLOW_ID"                   	bigint NULL,
	"ACTIVITY_MODEL_ID"             	bigint NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "ACTVTY_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "ACTVTY_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "ACTVTY_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "ACTVTY_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "ACTVTY_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "ACTVTY_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "ACTVTY_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "ACTVTY_PK" PRIMARY KEY CLUSTERED("ACTIVITY_ID")
)
GO

CREATE TABLE "dbo"."PIMS_ACTIVITY_HIST"  ( 
	"_ACTIVITY_HIST_ID"             	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"ACTIVITY_ID"                   	bigint NOT NULL,
	"PROJECT_ID"                    	bigint NULL,
	"WORKFLOW_ID"                   	bigint NULL,
	"ACTIVITY_MODEL_ID"             	bigint NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_ACTVTY_H_PK" PRIMARY KEY CLUSTERED("_ACTIVITY_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_ACTIVITY_MODEL_HIST"  ( 
	"_ACTIVITY_MODEL_HIST_ID"       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_MODEL_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"ACTIVITY_MODEL_ID"             	bigint NOT NULL,
	"DESCRIPTION"                   	nvarchar(200) NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_ACTMDL_H_PK" PRIMARY KEY CLUSTERED("_ACTIVITY_MODEL_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_COUNTRY"  ( 
	"COUNTRY_ID"                	smallint NOT NULL,
	"COUNTRY_CODE"              	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "CNTRY_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "CNTRY_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "CNTRY_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "CNTRY_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "CNTRY_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "CNTRY_PK" PRIMARY KEY CLUSTERED("COUNTRY_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROVINCE_STATE"  ( 
	"PROVINCE_STATE_ID"         	smallint NOT NULL,
	"COUNTRY_ID"                	smallint NOT NULL,
	"PROVINCE_STATE_CODE"       	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "PROVNC_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "PROVNC_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "PROVNC_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "PROVNC_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "PROVNC_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "PROVNC_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PROVNC_PK" PRIMARY KEY CLUSTERED("PROVINCE_STATE_ID")
)
GO

CREATE TABLE "dbo"."PIMS_ADDRESS"  ( 
	"ADDRESS_ID"                    	bigint NOT NULL CONSTRAINT "ADDRSS_ADDRESS_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_ADDRESS_ID_SEQ]),
	"REGION_CODE"                   	smallint NULL,
	"DISTRICT_CODE"                 	smallint NULL,
	"PROVINCE_STATE_ID"             	smallint NOT NULL,
	"COUNTRY_ID"                    	smallint NULL,
	"STREET_ADDRESS_1"              	nvarchar(200) NULL,
	"STREET_ADDRESS_2"              	nvarchar(200) NULL,
	"STREET_ADDRESS_3"              	nvarchar(200) NULL,
	"MUNICIPALITY_NAME"             	nvarchar(200) NULL,
	"POSTAL_CODE"                   	nvarchar(20) NULL,
	"OTHER_COUNTRY"                 	nvarchar(200) NULL,
	"LATITUDE"                      	numeric(8,6) NULL,
	"LONGITUDE"                     	numeric(9,6) NULL,
	"COMMENT"                       	nvarchar(2000) NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "ADDRSS_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "ADDRSS_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "ADDRSS_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "ADDRSS_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "ADDRSS_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "ADDRSS_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "ADDRSS_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "ADDRSS_PK" PRIMARY KEY CLUSTERED("ADDRESS_ID")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Other country not listed in drop-down list' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ADDRESS', 
	@level2type = N'Column', @level2name = N'OTHER_COUNTRY'
GO

CREATE TABLE "dbo"."PIMS_ADDRESS_HIST"  ( 
	"_ADDRESS_HIST_ID"              	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ADDRESS_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"ADDRESS_ID"                    	bigint NOT NULL,
	"REGION_CODE"                   	smallint NULL,
	"DISTRICT_CODE"                 	smallint NULL,
	"PROVINCE_STATE_ID"             	smallint NOT NULL,
	"COUNTRY_ID"                    	smallint NULL,
	"STREET_ADDRESS_1"              	nvarchar(200) NULL,
	"STREET_ADDRESS_2"              	nvarchar(200) NULL,
	"STREET_ADDRESS_3"              	nvarchar(200) NULL,
	"MUNICIPALITY_NAME"             	nvarchar(200) NULL,
	"POSTAL_CODE"                   	nvarchar(20) NULL,
	"OTHER_COUNTRY"                 	nvarchar(200) NULL,
	"LATITUDE"                      	numeric(18,0) NULL,
	"LONGITUDE"                     	numeric(18,0) NULL,
	"COMMENT"                       	nvarchar(2000) NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_ADDRSS_H_PK" PRIMARY KEY CLUSTERED("_ADDRESS_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_ADDRESS_USAGE_TYPE"  ( 
	"ADDRESS_USAGE_TYPE_CODE"   	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "ADUSGT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "ADUSGT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "ADUSGT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "ADUSGT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "ADUSGT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "ADUSGT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "ADUSGT_PK" PRIMARY KEY CLUSTERED("ADDRESS_USAGE_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_AREA_UNIT_TYPE"  ( 
	"AREA_UNIT_TYPE_CODE"       	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "ARUNIT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "ARUNIT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "ARUNIT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "ARUNIT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "ARUNIT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "ARUNIT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "ARUNIT_PK" PRIMARY KEY CLUSTERED("AREA_UNIT_TYPE_CODE")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The area unit used for measuring Properties.  The units must be in metric: square metres or hectares.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AREA_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'AREA_UNIT_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Translation of the code value into a description that can be displayed to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AREA_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is still active or is now disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AREA_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Order in which to display the code values, if required.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AREA_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The area unit used for measuring Properties.  The units must be in metric: square metres or hectares.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AREA_UNIT_TYPE'
GO

CREATE TABLE "dbo"."PIMS_CLAIM"  ( 
	"CLAIM_ID"                      	bigint NOT NULL CONSTRAINT "CLMTYP_CLAIM_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_CLAIM_ID_SEQ]),
	"CLAIM_UID"                     	uniqueidentifier NOT NULL,
	"KEYCLOAK_ROLE_ID"              	uniqueidentifier NULL,
	"NAME"                          	nvarchar(100) NOT NULL,
	"DESCRIPTION"                   	nvarchar(500) NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL CONSTRAINT "CLMTYP_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "CLMTYP_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "CLMTYP_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "CLMTYP_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "CLMTYP_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "CLMTYP_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "CLMTYP_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "CLMTYP_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "CLMTYP_PK" PRIMARY KEY CLUSTERED("CLAIM_ID")
)
GO

CREATE TABLE "dbo"."PIMS_CLAIM_HIST"  ( 
	"_CLAIM_HIST_ID"                	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_CLAIM_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"CLAIM_ID"                      	bigint NOT NULL,
	"CLAIM_UID"                     	uniqueidentifier NOT NULL,
	"KEYCLOAK_ROLE_ID"              	uniqueidentifier NULL,
	"NAME"                          	nvarchar(100) NOT NULL,
	"DESCRIPTION"                   	nvarchar(500) NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_CLMTYP_H_PK" PRIMARY KEY CLUSTERED("_CLAIM_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_CONTACT_METHOD_TYPE"  ( 
	"CONTACT_METHOD_TYPE_CODE"  	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "CNTMTT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "CNTMTT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "CNTMTT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "CNTMTT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "CNTMTT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "CNTMTT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "CNTMTT_PK" PRIMARY KEY CLUSTERED("CONTACT_METHOD_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_CONTACT_METHOD"  ( 
	"CONTACT_METHOD_ID"             	bigint NOT NULL CONSTRAINT "CNTMTH_CONTACT_METHOD_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_CONTACT_METHOD_ID_SEQ]),
	"CONTACT_METHOD_TYPE_CODE"      	nvarchar(20) NOT NULL,
	"PERSON_ID"                     	bigint NULL,
	"ORGANIZATION_ID"               	bigint NULL,
	"CONTACT_METHOD_VALUE"          	nvarchar(200) NOT NULL,
	"IS_PREFERRED_METHOD"           	bit NULL CONSTRAINT "CNTMTH_IS_PREFERRED_METHOD_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "CNTMTH_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "CNTMTH_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "CNTMTH_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "CNTMTH_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "CNTMTH_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "CNTMTH_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "CNTMTH_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "CNTMTH_PK" PRIMARY KEY CLUSTERED("CONTACT_METHOD_ID")
)
GO

CREATE TABLE "dbo"."PIMS_CONTACT_METHOD_HIST"  ( 
	"_CONTACT_METHOD_HIST_ID"       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_CONTACT_METHOD_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"CONTACT_METHOD_ID"             	bigint NOT NULL,
	"CONTACT_METHOD_TYPE_CODE"      	nvarchar(20) NOT NULL,
	"PERSON_ID"                     	bigint NULL,
	"ORGANIZATION_ID"               	bigint NULL,
	"CONTACT_METHOD_VALUE"          	nvarchar(200) NOT NULL,
	"IS_PREFERRED_METHOD"           	bit NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_CNTMTH_H_PK" PRIMARY KEY CLUSTERED("_CONTACT_METHOD_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_DATA_SOURCE_TYPE"  ( 
	"DATA_SOURCE_TYPE_CODE"     	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "PIDSRT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "PIDSRT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "PIDSRT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "PIDSRT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "PIDSRT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "PIDSRT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PIDSRT_PK" PRIMARY KEY CLUSTERED("DATA_SOURCE_TYPE_CODE")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code val;ue of the source system of the data (PAIMS, LIS, etc.)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DATA_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'DATA_SOURCE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the source system of the data (PAIMS, LIS, etc.)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DATA_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is still in use' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DATA_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the default display order of the descriptions' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DATA_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the source system of the data (PAIMS, LIS, etc.)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DATA_SOURCE_TYPE'
GO

CREATE TABLE "dbo"."PIMS_INSURANCE_TYPE"  ( 
	"INSURANCE_TYPE_CODE"       	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "INSPYT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "INSPYT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "INSPYT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "INSPYT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "INSPYT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "INSPYT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "INSPYT_PK" PRIMARY KEY CLUSTERED("INSURANCE_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_LEASE_CATEGORY_TYPE"  ( 
	"LEASE_CATEGORY_TYPE_CODE"  	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "LSCATT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "LSCATT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "LSCATT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "LSCATT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "LSCATT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "LSCATT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "LSCATT_PK" PRIMARY KEY CLUSTERED("LEASE_CATEGORY_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_LEASE_INITIATOR_TYPE"  ( 
	"LEASE_INITIATOR_TYPE_CODE" 	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "LINITT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "LINITT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "LINITT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "LINITT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "LINITT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "LINITT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "LINITT_PK" PRIMARY KEY CLUSTERED("LEASE_INITIATOR_TYPE_CODE")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the initiator of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_INITIATOR_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_INITIATOR_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the initiator of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_INITIATOR_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the initiator of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_INITIATOR_TYPE'
GO

CREATE TABLE "dbo"."PIMS_LEASE_LICENSE_TYPE"  ( 
	"LEASE_LICENSE_TYPE_CODE"   	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "LELIST_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "LELIST_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "LELIST_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "LELIST_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "LELIST_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "LELIST_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "LELIST_PK" PRIMARY KEY CLUSTERED("LEASE_LICENSE_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_LEASE_PAY_RVBL_TYPE"  ( 
	"LEASE_PAY_RVBL_TYPE_CODE"  	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "LSPRTY_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "LSPRTY_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "LSPRTY_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "LSPRTY_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "LSPRTY_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "LSPRTY_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "LSPRTY_PK" PRIMARY KEY CLUSTERED("LEASE_PAY_RVBL_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_LEASE_PROGRAM_TYPE"  ( 
	"LEASE_PROGRAM_TYPE_CODE"   	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "LSPRGT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "LSPRGT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "LSPRGT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "LSPRGT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "LSPRGT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "LSPRGT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "LSPRGT_PK" PRIMARY KEY CLUSTERED("LEASE_PROGRAM_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_LEASE_PURPOSE_TYPE"  ( 
	"LEASE_PURPOSE_TYPE_CODE"   	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "LPRPTY_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "LPRPTY_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "LPRPTY_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "LPRPTY_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "LPRPTY_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "LPRPTY_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "LPRPTY_PK" PRIMARY KEY CLUSTERED("LEASE_PURPOSE_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_LEASE_RESPONSIBILITY_TYPE"  ( 
	"LEASE_RESPONSIBILITY_TYPE_CODE"	nvarchar(20) NOT NULL,
	"DESCRIPTION"                   	nvarchar(200) NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL CONSTRAINT "LRESPT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"                 	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "LRESPT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "LRESPT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "LRESPT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "LRESPT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "LRESPT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "LRESPT_PK" PRIMARY KEY CLUSTERED("LEASE_RESPONSIBILITY_TYPE_CODE")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the organization responsible for this lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_RESPONSIBILITY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the organization responsible for this lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes which organization is responsible for this lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RESPONSIBILITY_TYPE'
GO

CREATE TABLE "dbo"."PIMS_LEASE_STATUS_TYPE"  ( 
	"LEASE_STATUS_TYPE_CODE"    	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "LSSTYP_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "LSSTYP_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "LSSTYP_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "LSSTYP_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "LSSTYP_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "LSSTYP_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "LSSTYP_PK" PRIMARY KEY CLUSTERED("LEASE_STATUS_TYPE_CODE")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the status of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the status of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the status of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STATUS_TYPE'
GO

CREATE TABLE "dbo"."PIMS_LEASE"  ( 
	"LEASE_ID"                      	bigint NOT NULL CONSTRAINT "LEASE_LEASE_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_ID_SEQ]),
	"LEASE_PAY_RVBL_TYPE_CODE"      	nvarchar(20) NOT NULL,
	"LEASE_LICENSE_TYPE_CODE"       	nvarchar(20) NOT NULL,
	"LEASE_CATEGORY_TYPE_CODE"      	nvarchar(20) NULL,
	"LEASE_PURPOSE_TYPE_CODE"       	nvarchar(20) NOT NULL,
	"LEASE_PROGRAM_TYPE_CODE"       	nvarchar(20) NOT NULL,
	"LEASE_INITIATOR_TYPE_CODE"     	nvarchar(20) NOT NULL,
	"LEASE_RESPONSIBILITY_TYPE_CODE"	nvarchar(20) NULL,
	"LEASE_STATUS_TYPE_CODE"        	nvarchar(20) NOT NULL,
	"REGION_CODE"                   	smallint NULL,
	"L_FILE_NO"                     	nvarchar(50) NULL,
	"TFA_FILE_NO"                   	int NULL,
	"PS_FILE_NO"                    	nvarchar(50) NULL,
	"LEASE_DESCRIPTION"             	nvarchar(max) NULL,
	"LEASE_CATEGORY_OTHER_DESC"     	nvarchar(200) NULL,
	"LEASE_PURPOSE_OTHER_DESC"      	nvarchar(200) NULL,
	"LEASE_NOTES"                   	nvarchar(max) NULL,
	"MOTI_CONTACT"                  	nvarchar(200) NULL,
	"DOCUMENTATION_REFERENCE"       	nvarchar(500) NULL,
	"RETURN_NOTES"                  	nvarchar(max) NULL,
	"OTHER_LEASE_PROGRAM_TYPE"      	nvarchar(200) NULL,
	"OTHER_LEASE_LICENSE_TYPE"      	nvarchar(200) NULL,
	"OTHER_LEASE_PURPOSE_TYPE"      	nvarchar(200) NULL,
	"ORIG_START_DATE"               	datetime NOT NULL,
	"ORIG_EXPIRY_DATE"              	datetime NULL,
	"LEASE_AMOUNT"                  	money NULL,
	"RESPONSIBILITY_EFFECTIVE_DATE" 	datetime NULL,
	"INSPECTION_DATE"               	datetime NULL,
	"INSPECTION_NOTES"              	nvarchar(max) NULL,
	"IS_SUBJECT_TO_RTA"             	bit NULL CONSTRAINT "LEASE_IS_SUBJECT_TO_RTA_DEF"  DEFAULT (CONVERT([bit],(0))),
	"IS_COMM_BLDG"                  	bit NULL CONSTRAINT "LEASE_IS_COMM_BLDG_DEF"  DEFAULT (CONVERT([bit],(0))),
	"IS_OTHER_IMPROVEMENT"          	bit NULL CONSTRAINT "LEASE_IS_OTHER_IMPROVEMENT_DEF"  DEFAULT (CONVERT([bit],(0))),
	"IS_EXPIRED"                    	bit NOT NULL CONSTRAINT "LEASE_EXPIRED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"HAS_PHYSICAL_FILE"             	bit NOT NULL CONSTRAINT "LEASE_HAS_PHYSICAL_FILE_DEF"  DEFAULT (CONVERT([bit],(0))),
	"HAS_DIGITAL_FILE"              	bit NOT NULL CONSTRAINT "LEASE_HAS_DIGITAL_FILE_DEF"  DEFAULT (CONVERT([bit],(0))),
	"HAS_PHYSICIAL_LICENSE"         	bit NOT NULL CONSTRAINT "LEASE_HAS_PHYSICIAL_LICENSE_DEF"  DEFAULT (CONVERT([bit],(0))),
	"HAS_DIGITAL_LICENSE"           	bit NOT NULL CONSTRAINT "LEASE_HAS_DIGITAL_LICENSE_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "LEASE_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "LEASE_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL CONSTRAINT "LEASE_APP_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL CONSTRAINT "LEASE_APP_CREATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "LEASE_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL CONSTRAINT "LEASE_APP_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL CONSTRAINT "LEASE_APP_LAST_UPDATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "LEASE_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "LEASE_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "LEASE_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "LEASE_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "LEASE_PK" PRIMARY KEY CLUSTERED("LEASE_ID")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'MoTI region associated with the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'REGION_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated identifying lease/licence number' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'L_FILE_NO'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Sourced from t_fileMain.TFA_File_Number' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'TFA_FILE_NO'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Sourced from t_fileSubOverrideData.PSFile_No' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'PS_FILE_NO'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Manually etered lease description, not the legal description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User-specified lease category description not included in standard set of lease purposes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_CATEGORY_OTHER_DESC'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User-specified lease purpose description not included in standard set of lease purposes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_PURPOSE_OTHER_DESC'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes accompanying lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_NOTES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Contact of the MoTI person associated with the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'MOTI_CONTACT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Location of documents pertianing to the lease/license' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'DOCUMENTATION_REFERENCE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes accompanying lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'RETURN_NOTES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of a non-standard lease program type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'OTHER_LEASE_PROGRAM_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of a non-standard lease/license type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'OTHER_LEASE_LICENSE_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of a non-standard lease purpose type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'OTHER_LEASE_PURPOSE_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Original start date of the lease/license' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'ORIG_START_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Original expiry date of the lease/license' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'ORIG_EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Lease/licence amount' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date current responsibility came into effect for this lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'RESPONSIBILITY_EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Inspection date' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'INSPECTION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes accompanying inspection' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'INSPECTION_NOTES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is subject the Residential Tenancy Act' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_SUBJECT_TO_RTA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is a commercial building' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_COMM_BLDG'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is improvement of another description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_OTHER_IMPROVEMENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Incidcator that lease/license has expired' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_EXPIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicator that phyical file exists' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'HAS_PHYSICAL_FILE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicator that digital file exists' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'HAS_DIGITAL_FILE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicator that physical license exists' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'HAS_PHYSICIAL_LICENSE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicator that digital license exists' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'HAS_DIGITAL_LICENSE'
GO

CREATE TABLE "dbo"."PIMS_INSURANCE"  ( 
	"INSURANCE_ID"                  	bigint NOT NULL CONSTRAINT "INSRNC_INSURANCE_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_INSURANCE_ID_SEQ]),
	"LEASE_ID"                      	bigint NOT NULL,
	"INSURANCE_TYPE_CODE"           	nvarchar(20) NOT NULL,
	"OTHER_INSURANCE_TYPE"          	nvarchar(200) NULL,
	"COVERAGE_DESCRIPTION"          	nvarchar(2000) NULL,
	"COVERAGE_LIMIT"                	money NULL CONSTRAINT "INSRNC_COVERAGE_LIMIT_DEF"  DEFAULT (CONVERT([bit],(0))),
	"IS_INSURANCE_IN_PLACE"         	bit NULL CONSTRAINT "INSRNC_IS_INSURANCE_IN_PLACE_DEF"  DEFAULT (CONVERT([bit],(0))),
	"EXPIRY_DATE"                   	date NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "INSRNC_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "INSRNC_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL CONSTRAINT "INSRNC_APP_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL CONSTRAINT "INSRNC_APP_CREATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "INSRNC_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL CONSTRAINT "INSRNC_APP_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL CONSTRAINT "INSRNC_APP_LAST_UPDATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "INSRNC_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "INSRNC_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "INSRNC_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "INSRNC_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "INSRNC_PK" PRIMARY KEY CLUSTERED("INSURANCE_ID")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the non-standard insurance coverage type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'OTHER_INSURANCE_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the insurance coverage' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'COVERAGE_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Monetary limit of the insurance coverage' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'COVERAGE_LIMIT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicator that digital license exists' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'IS_INSURANCE_IN_PLACE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the insurance expires' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO

CREATE TABLE "dbo"."PIMS_INSURANCE_HIST"  ( 
	"_INSURANCE_HIST_ID"            	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_INSURANCE_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"INSURANCE_ID"                  	bigint NOT NULL,
	"LEASE_ID"                      	bigint NOT NULL,
	"INSURANCE_TYPE_CODE"           	nvarchar(20) NOT NULL,
	"OTHER_INSURANCE_TYPE"          	nvarchar(200) NULL,
	"COVERAGE_DESCRIPTION"          	nvarchar(2000) NULL,
	"COVERAGE_LIMIT"                	money NULL,
	"IS_INSURANCE_IN_PLACE"         	bit NULL,
	"EXPIRY_DATE"                   	date NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_INSRNC_H_PK" PRIMARY KEY CLUSTERED("_INSURANCE_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_LEASE_HIST"  ( 
	"_LEASE_HIST_ID"                	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"LEASE_ID"                      	bigint NOT NULL,
	"LEASE_PAY_RVBL_TYPE_CODE"      	nvarchar(20) NOT NULL,
	"LEASE_LICENSE_TYPE_CODE"       	nvarchar(20) NOT NULL,
	"LEASE_CATEGORY_TYPE_CODE"      	nvarchar(20) NULL,
	"LEASE_PURPOSE_TYPE_CODE"       	nvarchar(20) NOT NULL,
	"LEASE_PROGRAM_TYPE_CODE"       	nvarchar(20) NOT NULL,
	"LEASE_INITIATOR_TYPE_CODE"     	nvarchar(20) NOT NULL,
	"LEASE_RESPONSIBILITY_TYPE_CODE"	nvarchar(20) NULL,
	"LEASE_STATUS_TYPE_CODE"        	nvarchar(20) NOT NULL,
	"REGION_CODE"                   	smallint NULL,
	"L_FILE_NO"                     	nvarchar(50) NULL,
	"TFA_FILE_NO"                   	int NULL,
	"PS_FILE_NO"                    	nvarchar(50) NULL,
	"LEASE_CATEGORY_OTHER_DESC"     	nvarchar(200) NULL,
	"LEASE_PURPOSE_OTHER_DESC"      	nvarchar(200) NULL,
	"MOTI_CONTACT"                  	nvarchar(200) NULL,
	"DOCUMENTATION_REFERENCE"       	nvarchar(500) NULL,
	"OTHER_LEASE_PROGRAM_TYPE"      	nvarchar(200) NULL,
	"OTHER_LEASE_LICENSE_TYPE"      	nvarchar(200) NULL,
	"OTHER_LEASE_PURPOSE_TYPE"      	nvarchar(200) NULL,
	"ORIG_START_DATE"               	datetime NOT NULL,
	"ORIG_EXPIRY_DATE"              	datetime NULL,
	"LEASE_AMOUNT"                  	money NULL,
	"RESPONSIBILITY_EFFECTIVE_DATE" 	datetime NULL,
	"INSPECTION_DATE"               	datetime NULL,
	"IS_SUBJECT_TO_RTA"             	bit NULL,
	"IS_COMM_BLDG"                  	bit NULL,
	"IS_OTHER_IMPROVEMENT"          	bit NULL,
	"IS_EXPIRED"                    	bit NOT NULL,
	"HAS_PHYSICAL_FILE"             	bit NOT NULL,
	"HAS_DIGITAL_FILE"              	bit NOT NULL,
	"HAS_PHYSICIAL_LICENSE"         	bit NOT NULL,
	"HAS_DIGITAL_LICENSE"           	bit NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_LEASE_H_PK" PRIMARY KEY CLUSTERED("_LEASE_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_LEASE_PAYMENT_METHOD_TYPE"  ( 
	"LEASE_PAYMENT_METHOD_TYPE_CODE"	nvarchar(20) NOT NULL,
	"DESCRIPTION"                   	nvarchar(200) NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL CONSTRAINT "LSPMMT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"                 	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "LSPMMT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "LSPMMT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "LSPMMT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "LSPMMT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "LSPMMT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "LSPMMT_PK" PRIMARY KEY CLUSTERED("LEASE_PAYMENT_METHOD_TYPE_CODE")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment method type code' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_METHOD_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_PAYMENT_METHOD_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment method type description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_METHOD_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this code disabled?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_METHOD_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the descriptions' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_METHOD_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO

CREATE TABLE "dbo"."PIMS_LEASE_PAYMENT_STATUS_TYPE"  ( 
	"LEASE_PAYMENT_STATUS_TYPE_CODE"	nvarchar(20) NOT NULL,
	"DESCRIPTION"                   	nvarchar(200) NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL CONSTRAINT "LPSTST_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"                 	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "LPSTST_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "LPSTST_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "LPSTST_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "LPSTST_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "LPSTST_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "LPSTST_PK" PRIMARY KEY CLUSTERED("LEASE_PAYMENT_STATUS_TYPE_CODE")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment status type code' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_PAYMENT_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment status type description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this code disabled?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the descriptions' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the status of forecast payments' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_STATUS_TYPE'
GO

CREATE TABLE "dbo"."PIMS_LEASE_PMT_FREQ_TYPE"  ( 
	"LEASE_PMT_FREQ_TYPE_CODE"  	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "LSPMTF_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "LSPMTF_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "LSPMTF_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "LSPMTF_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "LSPMTF_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "LSPMTF_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "LSPMTF_PK" PRIMARY KEY CLUSTERED("LEASE_PMT_FREQ_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_LEASE_TERM_STATUS_TYPE"  ( 
	"LEASE_TERM_STATUS_TYPE_CODE"	nvarchar(20) NOT NULL,
	"DESCRIPTION"                	nvarchar(200) NOT NULL,
	"IS_DISABLED"                	bit NOT NULL CONSTRAINT "LTRMST_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"              	int NULL,
	"CONCURRENCY_CONTROL_NUMBER" 	bigint NOT NULL CONSTRAINT "LTRMST_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"        	datetime NOT NULL CONSTRAINT "LTRMST_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"           	nvarchar(30) NOT NULL CONSTRAINT "LTRMST_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"   	datetime NOT NULL CONSTRAINT "LTRMST_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"      	nvarchar(30) NOT NULL CONSTRAINT "LTRMST_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "LTRMST_PK" PRIMARY KEY CLUSTERED("LEASE_TERM_STATUS_TYPE_CODE")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the status of the lease term' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_TERM_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the status of the lease term' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the status of the lease term' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM_STATUS_TYPE'
GO

CREATE TABLE "dbo"."PIMS_LEASE_TERM"  ( 
	"LEASE_TERM_ID"                 	bigint NOT NULL CONSTRAINT "LSTERM_LEASE_TERM_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_TERM_ID_SEQ]),
	"LEASE_ID"                      	bigint NOT NULL,
	"LEASE_TERM_STATUS_TYPE_CODE"   	nvarchar(20) NULL,
	"LEASE_PMT_FREQ_TYPE_CODE"      	nvarchar(20) NULL,
	"TERM_START_DATE"               	datetime NOT NULL,
	"TERM_EXPIRY_DATE"              	datetime NULL,
	"TERM_RENEWAL_DATE"             	datetime NULL,
	"PAYMENT AMOUNT"                	money NULL,
	"PAYMENT_DUE_DATE"              	nvarchar(200) NULL,
	"PAYMENT_NOTE"                  	nvarchar(2000) NULL,
	"IS_GST_ELIGIBLE"               	bit NULL,
	"GST_AMOUNT"                    	money NULL,
	"IS_TERM_EXERCISED"             	bit NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "LSTERM_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "LSTERM_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL CONSTRAINT "LSTERM_APP_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL CONSTRAINT "LSTERM_APP_CREATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "LSTERM_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL CONSTRAINT "LSTERM_APP_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL CONSTRAINT "LSTERM_APP_LAST_UPDATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "LSTERM_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "LSTERM_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "LSTERM_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "LSTERM_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "LSTERM_PK" PRIMARY KEY CLUSTERED("LEASE_TERM_ID")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to payment frequency values' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'LEASE_PMT_FREQ_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Start date of the current term of the lease/licence' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'TERM_START_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Expiry date of the current term of the lease/licence' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'TERM_EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Renewal date of the current term of the lease/licence' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'TERM_RENEWAL_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Agreed-to payment amount (exclusive of GST)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'PAYMENT AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Anecdotal description of payment due date (e.g. 1st of month, end of month)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'PAYMENT_DUE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes regarding payment status for the lease term' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'PAYMENT_NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is the lease subject to GST?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'IS_GST_ELIGIBLE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Calculated/entered GST portion of the payment.  Can be overridden by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'GST_AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Has the lease term been exercised?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'IS_TERM_EXERCISED'
GO

CREATE TABLE "dbo"."PIMS_LEASE_PAYMENT"  ( 
	"LEASE_PAYMENT_ID"              	bigint NOT NULL CONSTRAINT "LSPYMT_LEASE_PAYMENT_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_PAYMENT_ID_SEQ]),
	"LEASE_TERM_ID"                 	bigint NOT NULL,
	"LEASE_PAYMENT_METHOD_TYPE_CODE"	nvarchar(20) NOT NULL,
	"LEASE_PAYMENT_STATUS_TYPE_CODE"	nvarchar(20) NULL,
	"PAYMENT_RECEIVED_DATE"         	datetime NOT NULL,
	"PAYMENT_AMOUNT_PRE_TAX"        	money NOT NULL,
	"PAYMENT_AMOUNT_PST"            	money NULL,
	"PAYMENT_AMOUNT_GST"            	money NULL,
	"PAYMENT_AMOUNT_TOTAL"          	money NOT NULL,
	"NOTE"                          	nvarchar(2000) NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "LSPYMT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "LSPYMT_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL CONSTRAINT "LSPYMT_APP_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL CONSTRAINT "LSPYMT_APP_CREATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "LSPYMT_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL CONSTRAINT "LSPYMT_APP_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL CONSTRAINT "LSPYMT_APP_LAST_UPDATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "LSPYMT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "LSPYMT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "LSPYMT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "LSPYMT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "LSPYMT_PK" PRIMARY KEY CLUSTERED("LEASE_PAYMENT_ID")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the payment was received or sent' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'PAYMENT_RECEIVED_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Principal amount of the payment before applicable taxes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'PAYMENT_AMOUNT_PRE_TAX'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'PST owing on payment if applicable' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'PAYMENT_AMOUNT_PST'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST owing on payment if applicable' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'PAYMENT_AMOUNT_GST'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Total amount of payment including principal plus all applicable taxes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'PAYMENT_AMOUNT_TOTAL'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes regarding this payment' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'NOTE'
GO

CREATE TABLE "dbo"."PIMS_LEASE_PAYMENT_HIST"  ( 
	"_LEASE_PAYMENT_HIST_ID"        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_PAYMENT_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"LEASE_PAYMENT_ID"              	bigint NOT NULL,
	"LEASE_TERM_ID"                 	bigint NOT NULL,
	"LEASE_PAYMENT_METHOD_TYPE_CODE"	nvarchar(20) NOT NULL,
	"LEASE_PAYMENT_STATUS_TYPE_CODE"	nvarchar(20) NULL,
	"PAYMENT_RECEIVED_DATE"         	datetime NOT NULL,
	"PAYMENT_AMOUNT_PRE_TAX"        	money NOT NULL,
	"PAYMENT_AMOUNT_PST"            	money NULL,
	"PAYMENT_AMOUNT_GST"            	money NULL,
	"PAYMENT_AMOUNT_TOTAL"          	money NOT NULL,
	"NOTE"                          	nvarchar(2000) NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_LSPYMT_H_PK" PRIMARY KEY CLUSTERED("_LEASE_PAYMENT_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_LESSOR_TYPE"  ( 
	"LESSOR_TYPE_CODE"          	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "LSSRTY_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "LSSRTY_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "LSSRTY_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "LSSRTY_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "LSSRTY_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "LSSRTY_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "LSSRTY_PK" PRIMARY KEY CLUSTERED("LESSOR_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_LEASE_TENANT"  ( 
	"LEASE_TENANT_ID"               	bigint NOT NULL CONSTRAINT "TENANT_LEASE_TENANT_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_TENANT_ID_SEQ]),
	"LEASE_ID"                      	bigint NOT NULL,
	"PERSON_ID"                     	bigint NULL,
	"ORGANIZATION_ID"               	bigint NULL,
	"LESSOR_TYPE_CODE"              	nvarchar(20) NOT NULL,
	"NOTE"                          	nvarchar(2000) NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "TENANT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "TENANT_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL CONSTRAINT "TENANT_APP_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL CONSTRAINT "TENANT_APP_CREATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "TENANT_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL CONSTRAINT "TENANT_APP_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL CONSTRAINT "TENANT_APP_LAST_UPDATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "TENANT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "TENANT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "TENANT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "TENANT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "TENANT_PK" PRIMARY KEY CLUSTERED("LEASE_TENANT_ID")
)
GO

CREATE TABLE "dbo"."PIMS_LEASE_TENANT_HIST"  ( 
	"_LEASE_TENANT_HIST_ID"         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_TENANT_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"LEASE_TENANT_ID"               	bigint NOT NULL,
	"LEASE_ID"                      	bigint NOT NULL,
	"PERSON_ID"                     	bigint NULL,
	"ORGANIZATION_ID"               	bigint NULL,
	"LESSOR_TYPE_CODE"              	nvarchar(20) NOT NULL,
	"NOTE"                          	nvarchar(2000) NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_TENANT_H_PK" PRIMARY KEY CLUSTERED("_LEASE_TENANT_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_LEASE_TERM_HIST"  ( 
	"_LEASE_TERM_HIST_ID"           	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_TERM_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"LEASE_TERM_ID"                 	bigint NOT NULL,
	"LEASE_ID"                      	bigint NOT NULL,
	"LEASE_TERM_STATUS_TYPE_CODE"   	nvarchar(20) NULL,
	"LEASE_PMT_FREQ_TYPE_CODE"      	nvarchar(20) NULL,
	"TERM_START_DATE"               	datetime NOT NULL,
	"TERM_EXPIRY_DATE"              	datetime NULL,
	"TERM_RENEWAL_DATE"             	datetime NULL,
	"PAYMENT AMOUNT"                	money NULL,
	"PAYMENT_DUE_DATE"              	nvarchar(200) NULL,
	"PAYMENT_NOTE"                  	nvarchar(2000) NULL,
	"IS_GST_ELIGIBLE"               	bit NULL,
	"GST_AMOUNT"                    	money NULL,
	"IS_TERM_EXERCISED"             	bit NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_LSTERM_H_PK" PRIMARY KEY CLUSTERED("_LEASE_TERM_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_ORGANIZATION_ADDRESS"  ( 
	"ORGANIZATION_ADDRESS_ID"       	bigint NOT NULL CONSTRAINT "ORGADD_ORGANIZATION_ADDRESS_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_ORGANIZATION_ADDRESS_ID_SEQ]),
	"ORGANIZATION_ID"               	bigint NOT NULL,
	"ADDRESS_ID"                    	bigint NOT NULL,
	"ADDRESS_USAGE_TYPE_CODE"       	nvarchar(20) NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL CONSTRAINT "ORGADD_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "ORGADD_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "ORGADD_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "ORGADD_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "ORGADD_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "ORGADD_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "ORGADD_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "ORGADD_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "ORGADD_PK" PRIMARY KEY CLUSTERED("ORGANIZATION_ADDRESS_ID")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'An associative entity to define multiple addresses for a person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ORGANIZATION_ADDRESS'
GO

CREATE TABLE "dbo"."PIMS_ORGANIZATION_ADDRESS_HIST"  ( 
	"_ORGANIZATION_ADDRESS_HIST_ID" 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ORGANIZATION_ADDRESS_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"ORGANIZATION_ADDRESS_ID"       	bigint NOT NULL,
	"ORGANIZATION_ID"               	bigint NOT NULL,
	"ADDRESS_ID"                    	bigint NOT NULL,
	"ADDRESS_USAGE_TYPE_CODE"       	nvarchar(20) NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_ORGADD_H_PK" PRIMARY KEY CLUSTERED("_ORGANIZATION_ADDRESS_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_ORGANIZATION_HIST"  ( 
	"_ORGANIZATION_HIST_ID"         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ORGANIZATION_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"ORGANIZATION_ID"               	bigint NOT NULL,
	"PRNT_ORGANIZATION_ID"          	bigint NULL,
	"REGION_CODE"                   	smallint NULL,
	"DISTRICT_CODE"                 	smallint NULL,
	"ORGANIZATION_TYPE_CODE"        	nvarchar(20) NOT NULL,
	"ORG_IDENTIFIER_TYPE_CODE"      	nvarchar(20) NOT NULL,
	"ORGANIZATION_IDENTIFIER"       	nvarchar(100) NULL,
	"ORGANIZATION_NAME"             	nvarchar(200) NOT NULL,
	"ORGANIZATION_ALIAS"            	nvarchar(200) NULL,
	"INCORPORATION_NUMBER"          	nvarchar(50) NULL,
	"WEBSITE"                       	nvarchar(200) NULL,
	"COMMENT"                       	nvarchar(2000) NULL,
	"IS_DISABLED"                   	bit NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_ORG_H_PK" PRIMARY KEY CLUSTERED("_ORGANIZATION_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PERSON_ADDRESS"  ( 
	"PERSON_ADDRESS_ID"             	bigint NOT NULL CONSTRAINT "PERADD_PERSON_ADDRESS_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_PERSON_ADDRESS_ID_SEQ]),
	"PERSON_ID"                     	bigint NOT NULL,
	"ADDRESS_ID"                    	bigint NOT NULL,
	"ADDRESS_USAGE_TYPE_CODE"       	nvarchar(20) NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL CONSTRAINT "PERADD_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "PERADD_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "PERADD_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "PERADD_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "PERADD_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "PERADD_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "PERADD_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "PERADD_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PERADD_PK" PRIMARY KEY CLUSTERED("PERSON_ADDRESS_ID")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'An associative entity to define multiple addresses for a person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PERSON_ADDRESS'
GO

CREATE TABLE "dbo"."PIMS_PERSON_ADDRESS_HIST"  ( 
	"_PERSON_ADDRESS_HIST_ID"       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PERSON_ADDRESS_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"PERSON_ADDRESS_ID"             	bigint NOT NULL,
	"PERSON_ID"                     	bigint NOT NULL,
	"ADDRESS_ID"                    	bigint NOT NULL,
	"ADDRESS_USAGE_TYPE_CODE"       	nvarchar(20) NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_PERADD_H_PK" PRIMARY KEY CLUSTERED("_PERSON_ADDRESS_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PERSON_HIST"  ( 
	"_PERSON_HIST_ID"               	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PERSON_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"PERSON_ID"                     	bigint NOT NULL,
	"SURNAME"                       	nvarchar(50) NOT NULL,
	"FIRST_NAME"                    	nvarchar(50) NOT NULL,
	"MIDDLE_NAMES"                  	nvarchar(200) NULL,
	"NAME_SUFFIX"                   	nvarchar(50) NULL,
	"PREFERRED_NAME"                	nvarchar(200) NULL,
	"BIRTH_DATE"                    	date NULL,
	"COMMENT"                       	nvarchar(2000) NULL,
	"ADDRESS_COMMENT"               	nvarchar(2000) NULL,
	"IS_DISABLED"                   	bit NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_PERSON_H_PK" PRIMARY KEY CLUSTERED("_PERSON_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PERSON_ORGANIZATION"  ( 
	"PERSON_ORGANIZATION_ID"        	bigint NOT NULL CONSTRAINT "PERORG_PERSON_ORGANIZATION_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_PERSON_ORGANIZATION_ID_SEQ]),
	"PERSON_ID"                     	bigint NULL,
	"ORGANIZATION_ID"               	bigint NULL,
	"IS_DISABLED"                   	bit NULL CONSTRAINT "PERORG_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "PERORG_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "PERORG_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "PERORG_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "PERORG_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "PERORG_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "PERORG_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "PERORG_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PERORG_PK" PRIMARY KEY CLUSTERED("PERSON_ORGANIZATION_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PERSON_ORGANIZATION_HIST"  ( 
	"_PERSON_ORGANIZATION_HIST_ID"  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PERSON_ORGANIZATION_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"PERSON_ORGANIZATION_ID"        	bigint NOT NULL,
	"PERSON_ID"                     	bigint NULL,
	"ORGANIZATION_ID"               	bigint NULL,
	"IS_DISABLED"                   	bit NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_PERORG_H_PK" PRIMARY KEY CLUSTERED("_PERSON_ORGANIZATION_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROJECT_HIST"  ( 
	"_PROJECT_HIST_ID"              	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"PROJECT_ID"                    	bigint NOT NULL,
	"PROJECT_TYPE_CODE"             	nvarchar(20) NOT NULL,
	"PROJECT_STATUS_TYPE_CODE"      	nvarchar(20) NOT NULL,
	"PROJECT_RISK_TYPE_CODE"        	nvarchar(20) NOT NULL,
	"PROJECT_TIER_TYPE_CODE"        	nvarchar(20) NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_PROJCT_H_PK" PRIMARY KEY CLUSTERED("_PROJECT_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROJECT_NOTE"  ( 
	"PROJECT_NOTE_ID"               	bigint NOT NULL CONSTRAINT "PROJNT_PROJECT_NOTE_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_NOTE_ID_SEQ]),
	"PROJECT_ID"                    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "PROJNT_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "PROJNT_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "PROJNT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "PROJNT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "PROJNT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "PROJNT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "PROJNT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PROJNT_PK" PRIMARY KEY CLUSTERED("PROJECT_NOTE_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROJECT_NOTE_HIST"  ( 
	"_PROJECT_NOTE_HIST_ID"         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_NOTE_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"PROJECT_NOTE_ID"               	bigint NOT NULL,
	"PROJECT_ID"                    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_PROJNT_H_PK" PRIMARY KEY CLUSTERED("_PROJECT_NOTE_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_CLASSIFICATION_TYPE"  ( 
	"PROPERTY_CLASSIFICATION_TYPE_CODE"	nvarchar(20) NOT NULL,
	"DESCRIPTION"                      	nvarchar(200) NOT NULL,
	"IS_DISABLED"                      	bit NOT NULL CONSTRAINT "PRPCLT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"                    	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"       	bigint NOT NULL CONSTRAINT "PRPCLT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"              	datetime NOT NULL CONSTRAINT "PRPCLT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"                 	nvarchar(30) NOT NULL CONSTRAINT "PRPCLT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"         	datetime NOT NULL CONSTRAINT "PRPCLT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"            	nvarchar(30) NOT NULL CONSTRAINT "PRPCLT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PRPCLT_PK" PRIMARY KEY CLUSTERED("PROPERTY_CLASSIFICATION_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_STATUS_TYPE"  ( 
	"PROPERTY_STATUS_TYPE_CODE" 	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "PRPSTS_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "PRPSTS_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "PRPSTS_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "PRPSTS_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "PRPSTS_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "PRPSTS_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PRPSTS_PK" PRIMARY KEY CLUSTERED("PROPERTY_STATUS_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_TENURE_TYPE"  ( 
	"PROPERTY_TENURE_TYPE_CODE" 	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "PRPTNR_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "PRPTNR_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "PRPTNR_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "PRPTNR_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "PRPTNR_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "PRPTNR_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PRPTNR_PK" PRIMARY KEY CLUSTERED("PROPERTY_TENURE_TYPE_CODE")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code table to store property tenure codes. Tenure is defined as : "The act, right, manner or term of holding something(as a landed property)" In this case, tenure is required on Properties to indicate MoTI''s legal tenure on the property. The land parcel' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_TENURE_TYPE'
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_TYPE"  ( 
	"PROPERTY_TYPE_CODE"        	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "PRPTYP_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "PRPTYP_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "PRPTYP_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "PRPTYP_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "PRPTYP_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "PRPTYP_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PRPTYP_PK" PRIMARY KEY CLUSTERED("PROPERTY_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_SURPLUS_DECLARATION_TYPE"  ( 
	"SURPLUS_DECLARATION_TYPE_CODE"	nvarchar(20) NOT NULL,
	"DESCRIPTION"                  	nvarchar(200) NOT NULL,
	"IS_DISABLED"                  	bit NOT NULL CONSTRAINT "SPDCLT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"                	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"   	bigint NOT NULL CONSTRAINT "SPDCLT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "SPDCLT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"             	nvarchar(30) NOT NULL CONSTRAINT "SPDCLT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "SPDCLT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL CONSTRAINT "SPDCLT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "SPDCLT_PK" PRIMARY KEY CLUSTERED("SURPLUS_DECLARATION_TYPE_CODE")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the surplus property type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURPLUS_DECLARATION_TYPE', 
	@level2type = N'Column', @level2name = N'SURPLUS_DECLARATION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code description of the surplus property type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURPLUS_DECLARATION_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates that the code value is disabled' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURPLUS_DECLARATION_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the surplus property type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURPLUS_DECLARATION_TYPE'
GO

CREATE TABLE "dbo"."PIMS_PROPERTY"  ( 
	"PROPERTY_ID"                        	bigint NOT NULL CONSTRAINT "PRPRTY_PROPERTY_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ID_SEQ]),
	"PROPERTY_MANAGER_ID"                	bigint NULL,
	"PROP_MGMT_ORG_ID"                   	bigint NULL,
	"PROPERTY_TYPE_CODE"                 	nvarchar(20) NOT NULL,
	"PROPERTY_CLASSIFICATION_TYPE_CODE"  	nvarchar(20) NOT NULL,
	"ADDRESS_ID"                         	bigint NOT NULL,
	"REGION_CODE"                        	smallint NOT NULL,
	"DISTRICT_CODE"                      	smallint NOT NULL,
	"PROPERTY_TENURE_TYPE_CODE"          	nvarchar(20) NOT NULL,
	"PROPERTY_AREA_UNIT_TYPE_CODE"       	nvarchar(20) NOT NULL,
	"PROPERTY_STATUS_TYPE_CODE"          	nvarchar(20) NOT NULL,
	"SURPLUS_DECLARATION_TYPE_CODE"      	nvarchar(20) NOT NULL,
	"PROPERTY_DATA_SOURCE_TYPE_CODE"     	nvarchar(20) NOT NULL,
	"PROPERTY_DATA_SOURCE_EFFECTIVE_DATE"	date NOT NULL,
	"NAME"                               	nvarchar(250) NULL,
	"DESCRIPTION"                        	nvarchar(2000) NULL,
	"PID"                                	int NULL,
	"PIN"                                	int NULL,
	"LAND_AREA"                          	real NULL,
	"LAND_LEGAL_DESCRIPTION"             	nvarchar(max) NULL,
	"BOUNDARY"                           	"sys"."geometry" NULL,
	"LOCATION"                           	"sys"."geometry" NULL,
	"ENCUMBRANCE_REASON"                 	nvarchar(500) NULL,
	"SURPLUS_DECLARATION_COMMENT"        	nvarchar(2000) NULL,
	"SURPLUS_DECLARATION_DATE"           	datetime NULL,
	"IS_OWNED"                           	bit NOT NULL CONSTRAINT "PRPRTY_IS_OWNED_DEF"  DEFAULT (CONVERT([bit],(1))),
	"IS_PROPERTY_OF_INTEREST"            	bit NOT NULL CONSTRAINT "PRPRTY_IS_PROPERTY_OF_INTEREST_DEF"  DEFAULT (CONVERT([bit],(0))),
	"IS_VISIBLE_TO_OTHER_AGENCIES"       	bit NOT NULL CONSTRAINT "PRPRTY_IS_VISIBLE_TO_OTHER_AGENCIES_DEF"  DEFAULT (CONVERT([bit],(0))),
	"IS_SENSITIVE"                       	bit NOT NULL CONSTRAINT "PRPRTY_IS_SENSITIVE_DEF"  DEFAULT (CONVERT([bit],(0))),
	"ZONING"                             	nvarchar(50) NULL,
	"ZONING_POTENTIAL"                   	nvarchar(50) NULL,
	"CONCURRENCY_CONTROL_NUMBER"         	bigint NOT NULL CONSTRAINT "PRPRTY_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"               	datetime NOT NULL CONSTRAINT "PRPRTY_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"                  	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"               	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"          	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "PRPRTY_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"                	datetime NOT NULL CONSTRAINT "PRPRTY_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"                   	nvarchar(30) NOT NULL CONSTRAINT "PRPRTY_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "PRPRTY_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "PRPRTY_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PRPRTY_PK" PRIMARY KEY CLUSTERED("PROPERTY_ID")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the property was officially registered' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PROPERTY_DATA_SOURCE_EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property name' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property ID' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property number' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PIN'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Area occupied by property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'LAND_AREA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Legal description of property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'LAND_LEGAL_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Spatial bundary of land' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'BOUNDARY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Geospatial location (pin) of property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'LOCATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'reason for property encumbreance' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'ENCUMBRANCE_REASON'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Comment regarding the surplus declaration' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'SURPLUS_DECLARATION_COMMENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the property was declared surplus' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'SURPLUS_DECLARATION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is the property currently owned?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_OWNED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this a property of interest to the Ministry?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_PROPERTY_OF_INTEREST'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is the property visible to other agencies?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_VISIBLE_TO_OTHER_AGENCIES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this a sensitive property?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_SENSITIVE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Current property zoning' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'ZONING'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Potential property zoning' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'ZONING_POTENTIAL'
GO

CREATE TABLE "dbo"."PIMS_PROJECT_PROPERTY"  ( 
	"PROJECT_PROPERTY_ID"           	bigint NOT NULL CONSTRAINT "PRJPRP_PROJECT_PROPERTY_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_PROPERTY_ID_SEQ]),
	"PROJECT_ID"                    	bigint NOT NULL,
	"PROPERTY_ID"                   	bigint NOT NULL,
	"IS_DISABLED"                   	bit NULL CONSTRAINT "PRJPRP_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "PRJPRP_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "PRJPRP_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "PRJPRP_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "PRJPRP_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "PRJPRP_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "PRJPRP_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "PRJPRP_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PRJPRP_PK" PRIMARY KEY CLUSTERED("PROJECT_PROPERTY_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROJECT_PROPERTY_HIST"  ( 
	"_PROJECT_PROPERTY_HIST_ID"     	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_PROPERTY_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"PROJECT_PROPERTY_ID"           	bigint NOT NULL,
	"PROJECT_ID"                    	bigint NOT NULL,
	"PROPERTY_ID"                   	bigint NOT NULL,
	"IS_DISABLED"                   	bit NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_PRJPRP_H_PK" PRIMARY KEY CLUSTERED("_PROJECT_PROPERTY_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROJECT_WORKFLOW_MODEL_HIST"  ( 
	"_PROJECT_WORKFLOW_MODEL_HIST_ID"	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_WORKFLOW_MODEL_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"            	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                  	datetime NULL,
	"PROJECT_WORKFLOW_MODEL_ID"      	bigint NOT NULL,
	"PROJECT_ID"                     	bigint NOT NULL,
	"WORKFLOW_MODEL_ID"              	bigint NOT NULL,
	"IS_DISABLED"                    	bit NULL,
	"CONCURRENCY_CONTROL_NUMBER"     	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"APP_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"           	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"      	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"      	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY" 	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"            	datetime NOT NULL,
	"DB_CREATE_USERID"               	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"       	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"          	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_PRWKMD_H_PK" PRIMARY KEY CLUSTERED("_PROJECT_WORKFLOW_MODEL_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_ACTIVITY"  ( 
	"PROPERTY_ACTIVITY_ID"          	bigint NOT NULL CONSTRAINT "PRPACT_PROPERTY_ACTIVITY_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_ID_SEQ]),
	"ACTIVITY_ID"                   	bigint NULL,
	"PROPERTY_ID"                   	bigint NULL,
	"IS_DISABLED"                   	bit NULL CONSTRAINT "PRPACT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "PRPACT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "PRPACT_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "PRPACT_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "PRPACT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "PRPACT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "PRPACT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "PRPACT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PRPACT_PK" PRIMARY KEY CLUSTERED("PROPERTY_ACTIVITY_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_ACTIVITY_HIST"  ( 
	"_PROPERTY_ACTIVITY_HIST_ID"    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"PROPERTY_ACTIVITY_ID"          	bigint NOT NULL,
	"ACTIVITY_ID"                   	bigint NULL,
	"PROPERTY_ID"                   	bigint NULL,
	"IS_DISABLED"                   	bit NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_PRPACT_H_PK" PRIMARY KEY CLUSTERED("_PROPERTY_ACTIVITY_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_EVALUATION"  ( 
	"PROPERTY_EVALUATION_ID"        	bigint NOT NULL CONSTRAINT "PRPEVL_PROPERTY_EVALUATION_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_EVALUATION_ID_SEQ]),
	"PROPERTY_ID"                   	bigint NOT NULL,
	"EVALUATION_DATE"               	date NOT NULL,
	"KEY"                           	int NOT NULL,
	"VALUE"                         	money NOT NULL,
	"NOTE"                          	nvarchar(1000) NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "PRPEVL_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "PRPEVL_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "PRPEVL_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "PRPEVL_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "PRPEVL_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "PRPEVL_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "PRPEVL_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PRPEVL_PK" PRIMARY KEY CLUSTERED("PROPERTY_EVALUATION_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_EVALUATION_HIST"  ( 
	"_PROPERTY_EVALUATION_HIST_ID"  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_EVALUATION_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"PROPERTY_EVALUATION_ID"        	bigint NOT NULL,
	"PROPERTY_ID"                   	bigint NOT NULL,
	"EVALUATION_DATE"               	date NOT NULL,
	"KEY"                           	int NOT NULL,
	"VALUE"                         	money NOT NULL,
	"NOTE"                          	nvarchar(1000) NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_PRPEVL_H_PK" PRIMARY KEY CLUSTERED("_PROPERTY_EVALUATION_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_HIST"  ( 
	"_PROPERTY_HIST_ID"                  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"                	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                      	datetime NULL,
	"PROPERTY_ID"                        	bigint NOT NULL,
	"PROPERTY_MANAGER_ID"                	bigint NULL,
	"PROP_MGMT_ORG_ID"                   	bigint NULL,
	"PROPERTY_TYPE_CODE"                 	nvarchar(20) NOT NULL,
	"PROPERTY_CLASSIFICATION_TYPE_CODE"  	nvarchar(20) NOT NULL,
	"ADDRESS_ID"                         	bigint NOT NULL,
	"REGION_CODE"                        	smallint NOT NULL,
	"DISTRICT_CODE"                      	smallint NOT NULL,
	"PROPERTY_TENURE_TYPE_CODE"          	nvarchar(20) NOT NULL,
	"PROPERTY_AREA_UNIT_TYPE_CODE"       	nvarchar(20) NOT NULL,
	"PROPERTY_STATUS_TYPE_CODE"          	nvarchar(20) NOT NULL,
	"SURPLUS_DECLARATION_TYPE_CODE"      	nvarchar(20) NOT NULL,
	"PROPERTY_DATA_SOURCE_TYPE_CODE"     	nvarchar(20) NOT NULL,
	"PROPERTY_DATA_SOURCE_EFFECTIVE_DATE"	date NOT NULL,
	"NAME"                               	nvarchar(250) NULL,
	"DESCRIPTION"                        	nvarchar(2000) NULL,
	"PID"                                	int NULL,
	"PIN"                                	int NULL,
	"LAND_AREA"                          	real NULL,
	"ENCUMBRANCE_REASON"                 	nvarchar(500) NULL,
	"SURPLUS_DECLARATION_COMMENT"        	nvarchar(2000) NULL,
	"SURPLUS_DECLARATION_DATE"           	datetime NULL,
	"IS_OWNED"                           	bit NOT NULL,
	"IS_PROPERTY_OF_INTEREST"            	bit NOT NULL,
	"IS_VISIBLE_TO_OTHER_AGENCIES"       	bit NOT NULL,
	"IS_SENSITIVE"                       	bit NOT NULL,
	"ZONING"                             	nvarchar(50) NULL,
	"ZONING_POTENTIAL"                   	nvarchar(50) NULL,
	"CONCURRENCY_CONTROL_NUMBER"         	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"               	datetime NOT NULL,
	"APP_CREATE_USERID"                  	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"               	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"          	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"                	datetime NOT NULL,
	"DB_CREATE_USERID"                   	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"              	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_PRPRTY_H_PK" PRIMARY KEY CLUSTERED("_PROPERTY_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_IMPROVEMENT_TYPE"  ( 
	"PROPERTY_IMPROVEMENT_TYPE_CODE"	nvarchar(20) NOT NULL,
	"DESCRIPTION"                   	nvarchar(200) NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL CONSTRAINT "PIMPRT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"                 	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "PIMPRT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "PIMPRT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "PIMPRT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "PIMPRT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "PIMPRT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PIMPRT_PK" PRIMARY KEY CLUSTERED("PROPERTY_IMPROVEMENT_TYPE_CODE")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the types of improvements made to a property during the lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'PROPERTY_IMPROVEMENT_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code description of the types of improvements made to a property during the lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the types of improvements made to a property during the lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT_TYPE'
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_IMPROVEMENT"  ( 
	"PROPERTY_IMPROVEMENT_ID"       	bigint NOT NULL CONSTRAINT "PIMPRV_PROPERTY_IMPROVEMENT_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_IMPROVEMENT_ID_SEQ]),
	"LEASE_ID"                      	bigint NOT NULL,
	"PROPERTY_IMPROVEMENT_TYPE_CODE"	nvarchar(20) NOT NULL,
	"IMPROVEMENT_DESCRIPTION"       	nvarchar(2000) NULL,
	"STRUCTURE_SIZE"                	nvarchar(2000) NULL,
	"ADDRESS"                       	nvarchar(2000) NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "PIMPRV_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "PIMPRV_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL CONSTRAINT "PIMPRV_APP_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL CONSTRAINT "PIMPRV_APP_CREATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "PIMPRV_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL CONSTRAINT "PIMPRV_APP_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL CONSTRAINT "PIMPRV_APP_LAST_UPDATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "PIMPRV_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "PIMPRV_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "PIMPRV_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "PIMPRV_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PIMPRV_PK" PRIMARY KEY CLUSTERED("PROPERTY_IMPROVEMENT_ID")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the improvements' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT', 
	@level2type = N'Column', @level2name = N'IMPROVEMENT_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Size of the structure (house, building, bridge, etc,)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT', 
	@level2type = N'Column', @level2name = N'STRUCTURE_SIZE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Addresses affected' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT', 
	@level2type = N'Column', @level2name = N'ADDRESS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of property improvements associated with the lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT'
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_IMPROVEMENT_HIST"  ( 
	"_PROPERTY_IMPROVEMENT_HIST_ID" 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_IMPROVEMENT_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"PROPERTY_IMPROVEMENT_ID"       	bigint NOT NULL,
	"LEASE_ID"                      	bigint NOT NULL,
	"PROPERTY_IMPROVEMENT_TYPE_CODE"	nvarchar(20) NOT NULL,
	"IMPROVEMENT_DESCRIPTION"       	nvarchar(2000) NULL,
	"STRUCTURE_SIZE"                	nvarchar(2000) NULL,
	"ADDRESS"                       	nvarchar(2000) NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_PIMPRV_H_PK" PRIMARY KEY CLUSTERED("_PROPERTY_IMPROVEMENT_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_LEASE"  ( 
	"PROPERTY_LEASE_ID"             	bigint NOT NULL CONSTRAINT "PROPLS_PROPERTY_LEASE_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_LEASE_ID_SEQ]),
	"PROPERTY_ID"                   	bigint NOT NULL,
	"LEASE_ID"                      	bigint NOT NULL,
	"AREA_UNIT_TYPE_CODE"           	nvarchar(20) NULL,
	"LEASE_AREA"                    	real NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "PROPLS_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "PROPLS_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL CONSTRAINT "PROPLS_APP_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL CONSTRAINT "PROPLS_APP_CREATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "PROPLS_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL CONSTRAINT "PROPLS_APP_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL CONSTRAINT "PROPLS_APP_LAST_UPDATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "PROPLS_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "PROPLS_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "PROPLS_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "PROPLS_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PROPLS_PK" PRIMARY KEY CLUSTERED("PROPERTY_LEASE_ID")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Leased area measurement' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_AREA'
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_LEASE_HIST"  ( 
	"_PROPERTY_LEASE_HIST_ID"       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_LEASE_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"PROPERTY_LEASE_ID"             	bigint NOT NULL,
	"PROPERTY_ID"                   	bigint NOT NULL,
	"LEASE_ID"                      	bigint NOT NULL,
	"AREA_UNIT_TYPE_CODE"           	nvarchar(20) NULL,
	"LEASE_AREA"                    	real NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_PROPLS_H_PK" PRIMARY KEY CLUSTERED("_PROPERTY_LEASE_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_ORGANIZATION"  ( 
	"PROPERTY_ORGANIZATION_ID"      	bigint NOT NULL CONSTRAINT "PRPORG_PROPERTY_ORGANIZATION_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ORGANIZATION_ID_SEQ]),
	"PROPERTY_ID"                   	bigint NOT NULL,
	"ORGANIZATION_ID"               	bigint NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "PRPORG_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "PRPORG_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "PRPORG_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "PRPORG_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "PRPORG_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "PRPORG_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "PRPORG_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	"IS_DISABLED"                   	bit NULL CONSTRAINT "PRPORG_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	CONSTRAINT "PRPORG_PK" PRIMARY KEY CLUSTERED("PROPERTY_ORGANIZATION_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_ORGANIZATION_HIST"  ( 
	"_PROPERTY_ORGANIZATION_HIST_ID"	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"PROPERTY_ORGANIZATION_ID"      	bigint NOT NULL,
	"PROPERTY_ID"                   	bigint NOT NULL,
	"ORGANIZATION_ID"               	bigint NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	"IS_DISABLED"                   	bit NULL,
	CONSTRAINT "PIMS_PRPORG_H_PK" PRIMARY KEY CLUSTERED("_PROPERTY_ORGANIZATION_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_SERVICE_FILE_TYPE"  ( 
	"PROPERTY_SERVICE_FILE_TYPE_CODE"	nvarchar(20) NOT NULL,
	"DESCRIPTION"                    	nvarchar(200) NOT NULL,
	"IS_DISABLED"                    	bit NOT NULL CONSTRAINT "PRSVFT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"                  	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"     	bigint NOT NULL CONSTRAINT "PRSVFT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"            	datetime NOT NULL CONSTRAINT "PRSVFT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"               	nvarchar(30) NOT NULL CONSTRAINT "PRSVFT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "PRSVFT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "PRSVFT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PRSVFT_PK" PRIMARY KEY CLUSTERED("PROPERTY_SERVICE_FILE_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_SERVICE_FILE"  ( 
	"PROPERTY_SERVICE_FILE_ID"       	bigint NOT NULL CONSTRAINT "PRPSVC_PROPERTY_SERVICE_FILE_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_SERVICE_FILE_ID_SEQ]),
	"PROPERTY_SERVICE_FILE_TYPE_CODE"	nvarchar(20) NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"     	bigint NOT NULL CONSTRAINT "PRPSVC_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "PRPSVC_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"           	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"      	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "PRPSVC_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"      	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY" 	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"            	datetime NOT NULL CONSTRAINT "PRPSVC_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"               	nvarchar(30) NOT NULL CONSTRAINT "PRPSVC_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "PRPSVC_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "PRPSVC_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PRPSVC_PK" PRIMARY KEY CLUSTERED("PROPERTY_SERVICE_FILE_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_PROPERTY_SERVICE_FILE"  ( 
	"PROPERTY_PROPERTY_SERVICE_FILE_ID"	bigint NOT NULL CONSTRAINT "PRPRSF_PROPERTY_PROPERTY_SERVICE_FILE_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_PROPERTY_SERVICE_FILE_ID_SEQ]),
	"PROPERTY_ID"                      	bigint NOT NULL,
	"PROPERTY_SERVICE_FILE_ID"         	bigint NOT NULL,
	"IS_DISABLED"                      	bit NULL CONSTRAINT "PRPRSF_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"       	bigint NOT NULL CONSTRAINT "PRPRSF_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"             	datetime NOT NULL CONSTRAINT "PRPRSF_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"                	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"             	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"        	datetime NOT NULL CONSTRAINT "PRPRSF_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"           	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"        	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"   	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"              	datetime NOT NULL CONSTRAINT "PRPRSF_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"                 	nvarchar(30) NOT NULL CONSTRAINT "PRPRSF_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"         	datetime NOT NULL CONSTRAINT "PRPRSF_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"            	nvarchar(30) NOT NULL CONSTRAINT "PRPRSF_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PRPRSF_PK" PRIMARY KEY CLUSTERED("PROPERTY_PROPERTY_SERVICE_FILE_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST"  ( 
	"_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID"	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_PROPERTY_SERVICE_FILE_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"                    	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                          	datetime NULL,
	"PROPERTY_PROPERTY_SERVICE_FILE_ID"      	bigint NOT NULL,
	"PROPERTY_ID"                            	bigint NOT NULL,
	"PROPERTY_SERVICE_FILE_ID"               	bigint NOT NULL,
	"IS_DISABLED"                            	bit NULL,
	"CONCURRENCY_CONTROL_NUMBER"             	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"                   	datetime NOT NULL,
	"APP_CREATE_USERID"                      	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"                   	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"              	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"              	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"                 	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"              	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"         	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"                    	datetime NOT NULL,
	"DB_CREATE_USERID"                       	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"               	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"                  	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_PRPRSF_H_PK" PRIMARY KEY CLUSTERED("_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_SERVICE_FILE_HIST"  ( 
	"_PROPERTY_SERVICE_FILE_HIST_ID" 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_SERVICE_FILE_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"            	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                  	datetime NULL,
	"PROPERTY_SERVICE_FILE_ID"       	bigint NOT NULL,
	"PROPERTY_SERVICE_FILE_TYPE_CODE"	nvarchar(20) NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"     	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"APP_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"           	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"      	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"      	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY" 	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"            	datetime NOT NULL,
	"DB_CREATE_USERID"               	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"       	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"          	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_PRPSVC_H_PK" PRIMARY KEY CLUSTERED("_PROPERTY_SERVICE_FILE_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_TAX_REMIT_TYPE"  ( 
	"PROPERTY_TAX_REMIT_TYPE_CODE"	nvarchar(20) NOT NULL,
	"DESCRIPTION"                 	nvarchar(200) NOT NULL,
	"IS_DISABLED"                 	bit NOT NULL CONSTRAINT "PTRMTT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"               	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"  	bigint NOT NULL CONSTRAINT "PTRMTT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"         	datetime NOT NULL CONSTRAINT "PTRMTT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"            	nvarchar(30) NOT NULL CONSTRAINT "PTRMTT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"    	datetime NOT NULL CONSTRAINT "PTRMTT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"       	nvarchar(30) NOT NULL CONSTRAINT "PTRMTT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PTRMTT_PK" PRIMARY KEY CLUSTERED("PROPERTY_TAX_REMIT_TYPE_CODE")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of property tax remittance types' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_TAX_REMIT_TYPE', 
	@level2type = N'Column', @level2name = N'PROPERTY_TAX_REMIT_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code description of property tax remittance types' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_TAX_REMIT_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this code value disabled?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_TAX_REMIT_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of property tax remittance types' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_TAX_REMIT_TYPE'
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_TAX"  ( 
	"PROPERTY_TAX_ID"               	bigint NOT NULL CONSTRAINT "PRPTAX_PROPERTY_TAX_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_TAX_ID_SEQ]),
	"PROPERTY_ID"                   	bigint NOT NULL,
	"PROPERTY_TAX_REMIT_TYPE_CODE"  	nvarchar(20) NOT NULL,
	"TAX_FOLIO_NO"                  	nvarchar(50) NOT NULL,
	"PAYMENT_AMOUNT"                	money NOT NULL,
	"LAST_PAYMENT_DATE"             	datetime NULL,
	"PAYMENT_NOTES"                 	money NULL,
	"BCTFA_NOTIFICATION_DATE"       	datetime NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "PRPTAX_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "PRPTAX_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL CONSTRAINT "PRPTAX_APP_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL CONSTRAINT "PRPTAX_APP_CREATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "PRPTAX_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL CONSTRAINT "PRPTAX_APP_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL CONSTRAINT "PRPTAX_APP_LAST_UPDATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "PRPTAX_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "PRPTAX_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "PRPTAX_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "PRPTAX_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "PRPTAX_PK" PRIMARY KEY CLUSTERED("PROPERTY_TAX_ID")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property tax folio number' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_TAX', 
	@level2type = N'Column', @level2name = N'TAX_FOLIO_NO'
GO

CREATE TABLE "dbo"."PIMS_PROPERTY_TAX_HIST"  ( 
	"_PROPERTY_TAX_HIST_ID"         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_TAX_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"PROPERTY_TAX_ID"               	bigint NOT NULL,
	"PROPERTY_ID"                   	bigint NOT NULL,
	"PROPERTY_TAX_REMIT_TYPE_CODE"  	nvarchar(20) NOT NULL,
	"TAX_FOLIO_NO"                  	nvarchar(50) NOT NULL,
	"PAYMENT_AMOUNT"                	money NOT NULL,
	"LAST_PAYMENT_DATE"             	datetime NULL,
	"PAYMENT_NOTES"                 	money NULL,
	"BCTFA_NOTIFICATION_DATE"       	datetime NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_PRPTAX_H_PK" PRIMARY KEY CLUSTERED("_PROPERTY_TAX_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_ROLE_CLAIM"  ( 
	"ROLE_CLAIM_ID"                 	bigint NOT NULL CONSTRAINT "ROLCLM_ROLE_CLAIM_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_ROLE_CLAIM_ID_SEQ]),
	"ROLE_ID"                       	bigint NOT NULL,
	"CLAIM_ID"                      	bigint NOT NULL,
	"IS_DISABLED"                   	bit NULL CONSTRAINT "ROLCLM_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "ROLCLM_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "ROLCLM_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "ROLCLM_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "ROLCLM_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "ROLCLM_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "ROLCLM_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "ROLCLM_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "ROLCLM_PK" PRIMARY KEY CLUSTERED("ROLE_CLAIM_ID")
)
GO

CREATE TABLE "dbo"."PIMS_ROLE_CLAIM_HIST"  ( 
	"_ROLE_CLAIM_HIST_ID"           	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ROLE_CLAIM_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"ROLE_CLAIM_ID"                 	bigint NOT NULL,
	"ROLE_ID"                       	bigint NOT NULL,
	"CLAIM_ID"                      	bigint NOT NULL,
	"IS_DISABLED"                   	bit NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_ROLCLM_H_PK" PRIMARY KEY CLUSTERED("_ROLE_CLAIM_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_ROLE_HIST"  ( 
	"_ROLE_HIST_ID"                 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ROLE_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"ROLE_ID"                       	bigint NOT NULL,
	"ROLE_UID"                      	uniqueidentifier NOT NULL,
	"KEYCLOAK_GROUP_ID"             	uniqueidentifier NULL,
	"NAME"                          	nvarchar(100) NOT NULL,
	"DESCRIPTION"                   	nvarchar(500) NULL,
	"IS_PUBLIC"                     	bit NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL,
	"SORT_ORDER"                    	int NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_ROLE_H_PK" PRIMARY KEY CLUSTERED("_ROLE_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_SECURITY_DEPOSIT_TYPE"  ( 
	"SECURITY_DEPOSIT_TYPE_CODE"	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "SECDPT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "SECDPT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "SECDPT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "SECDPT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "SECDPT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "SECDPT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "SECDPT_PK" PRIMARY KEY CLUSTERED("SECURITY_DEPOSIT_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_SECURITY_DEPOSIT"  ( 
	"SECURITY_DEPOSIT_ID"           	bigint NOT NULL CONSTRAINT "SECDEP_SECURITY_DEPOSIT_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_ID_SEQ]),
	"LEASE_ID"                      	bigint NOT NULL,
	"SECURITY_DEPOSIT_TYPE_CODE"    	nvarchar(20) NOT NULL,
	"OTHER_DEPOSIT_TYPE_DESC"       	nvarchar(200) NULL,
	"DESCRIPTION"                   	nvarchar(2000) NOT NULL,
	"AMOUNT_PAID"                   	money NOT NULL,
	"DEPOSIT_DATE"                  	date NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "SECDEP_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "SECDEP_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL CONSTRAINT "SECDEP_APP_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL CONSTRAINT "SECDEP_APP_CREATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "SECDEP_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL CONSTRAINT "SECDEP_APP_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL CONSTRAINT "SECDEP_APP_LAST_UPDATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "SECDEP_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "SECDEP_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "SECDEP_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "SECDEP_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "SECDEP_PK" PRIMARY KEY CLUSTERED("SECURITY_DEPOSIT_ID")
)
GO

CREATE TABLE "dbo"."PIMS_SECURITY_DEPOSIT_HIST"  ( 
	"_SECURITY_DEPOSIT_HIST_ID"     	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"SECURITY_DEPOSIT_ID"           	bigint NOT NULL,
	"LEASE_ID"                      	bigint NOT NULL,
	"SECURITY_DEPOSIT_TYPE_CODE"    	nvarchar(20) NOT NULL,
	"OTHER_DEPOSIT_TYPE_DESC"       	nvarchar(200) NULL,
	"DESCRIPTION"                   	nvarchar(2000) NOT NULL,
	"AMOUNT_PAID"                   	money NOT NULL,
	"DEPOSIT_DATE"                  	date NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_SECDEP_H_PK" PRIMARY KEY CLUSTERED("_SECURITY_DEPOSIT_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_SECURITY_DEPOSIT_HOLDER"  ( 
	"SECURITY_DEPOSIT_HOLDER_ID"    	bigint NOT NULL CONSTRAINT "SCDPHL_SECURITY_DEPOSIT_HOLDER_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_HOLDER_ID_SEQ]),
	"SECURITY_DEPOSIT_ID"           	bigint NOT NULL,
	"PERSON_ID"                     	bigint NULL,
	"ORGANIZATION_ID"               	bigint NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "SCDPHL_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "SCDPHL_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL CONSTRAINT "SCDPHL_APP_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL CONSTRAINT "SCDPHL_APP_CREATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "SCDPHL_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL CONSTRAINT "SCDPHL_APP_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL CONSTRAINT "SCDPHL_APP_LAST_UPDATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "SCDPHL_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "SCDPHL_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "SCDPHL_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "SCDPHL_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "SCDPHL_PK" PRIMARY KEY CLUSTERED("SECURITY_DEPOSIT_HOLDER_ID")
)
GO

CREATE TABLE "dbo"."PIMS_SECURITY_DEPOSIT_HOLDER_HIST"  ( 
	"_SECURITY_DEPOSIT_HOLDER_HIST_ID"	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_HOLDER_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"             	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                   	datetime NULL,
	"SECURITY_DEPOSIT_HOLDER_ID"      	bigint NOT NULL,
	"SECURITY_DEPOSIT_ID"             	bigint NOT NULL,
	"PERSON_ID"                       	bigint NULL,
	"ORGANIZATION_ID"                 	bigint NULL,
	"CONCURRENCY_CONTROL_NUMBER"      	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"            	datetime NOT NULL,
	"APP_CREATE_USERID"               	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"            	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"       	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"       	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"          	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"       	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"  	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"             	datetime NOT NULL,
	"DB_CREATE_USERID"                	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"        	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"           	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_SCDPHL_H_PK" PRIMARY KEY CLUSTERED("_SECURITY_DEPOSIT_HOLDER_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_SECURITY_DEPOSIT_RETURN"  ( 
	"SECURITY_DEPOSIT_RETURN_ID"    	bigint NOT NULL CONSTRAINT "SDRTRN_SECURITY_DEPOSIT_RETURN_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_RETURN_ID_SEQ]),
	"LEASE_ID"                      	bigint NOT NULL,
	"SECURITY_DEPOSIT_TYPE_CODE"    	nvarchar(20) NOT NULL,
	"SECURITY_DEPOSIT_ID"           	bigint NULL,
	"TERMINATION_DATE"              	datetime NOT NULL,
	"CLAIMS_AGAINST"                	money NULL,
	"RETURN_AMOUNT"                 	money NOT NULL,
	"RETURN_DATE"                   	datetime NOT NULL,
	"PAYEE_NAME"                    	nvarchar(100) NOT NULL,
	"PAYEE_ADDRESS"                 	nvarchar(500) NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "SDRTRN_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "SDRTRN_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL CONSTRAINT "SDRTRN_APP_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL CONSTRAINT "SDRTRN_APP_CREATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "SDRTRN_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL CONSTRAINT "SDRTRN_APP_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL CONSTRAINT "SDRTRN_APP_LAST_UPDATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "SDRTRN_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "SDRTRN_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "SDRTRN_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "SDRTRN_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "SDRTRN_PK" PRIMARY KEY CLUSTERED("SECURITY_DEPOSIT_RETURN_ID")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the lease/license was terminated or surrendered' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'TERMINATION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Amount of claims against the deposit' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'CLAIMS_AGAINST'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Amount returned minus claims' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'RETURN_AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of deposit return' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'RETURN_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of cheque recipient' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'PAYEE_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Address of cheque recipient' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'PAYEE_ADDRESS'
GO

CREATE TABLE "dbo"."PIMS_SECURITY_DEPOSIT_RETURN_HIST"  ( 
	"_SECURITY_DEPOSIT_RETURN_HIST_ID"	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_RETURN_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"             	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                   	datetime NULL,
	"SECURITY_DEPOSIT_RETURN_ID"      	bigint NOT NULL,
	"LEASE_ID"                        	bigint NOT NULL,
	"SECURITY_DEPOSIT_TYPE_CODE"      	nvarchar(20) NOT NULL,
	"SECURITY_DEPOSIT_ID"             	bigint NULL,
	"TERMINATION_DATE"                	datetime NOT NULL,
	"CLAIMS_AGAINST"                  	money NULL,
	"RETURN_AMOUNT"                   	money NOT NULL,
	"RETURN_DATE"                     	datetime NOT NULL,
	"PAYEE_NAME"                      	nvarchar(100) NOT NULL,
	"PAYEE_ADDRESS"                   	nvarchar(500) NULL,
	"CONCURRENCY_CONTROL_NUMBER"      	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"            	datetime NOT NULL,
	"APP_CREATE_USERID"               	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"            	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"       	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"       	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"          	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"       	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"  	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"             	datetime NOT NULL,
	"DB_CREATE_USERID"                	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"        	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"           	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_SDRTRN_H_PK" PRIMARY KEY CLUSTERED("_SECURITY_DEPOSIT_RETURN_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_SECURITY_DEPOSIT_RETURN_HOLDER"  ( 
	"SECURITY_DEPOSIT_RETURN_HOLDER_ID"	bigint NOT NULL CONSTRAINT "SCDPRH_SECURITY_DEPOSIT_RETURN_HOLDER_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_ID_SEQ]),
	"SECURITY_DEPOSIT_RETURN_ID"       	bigint NOT NULL,
	"PERSON_ID"                        	bigint NULL,
	"ORGANIZATION_ID"                  	bigint NULL,
	"CONCURRENCY_CONTROL_NUMBER"       	bigint NOT NULL CONSTRAINT "SCDPRH_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"             	datetime NOT NULL CONSTRAINT "SCDPRH_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"                	nvarchar(30) NOT NULL CONSTRAINT "SCDPRH_APP_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_CREATE_USER_GUID"             	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"        	nvarchar(30) NOT NULL CONSTRAINT "SCDPRH_APP_CREATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_USER_GUID"        	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USERID"           	nvarchar(30) NOT NULL CONSTRAINT "SCDPRH_APP_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_TIMESTAMP"        	datetime NOT NULL CONSTRAINT "SCDPRH_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USER_DIRECTORY"   	nvarchar(30) NOT NULL CONSTRAINT "SCDPRH_APP_LAST_UPDATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"DB_CREATE_TIMESTAMP"              	datetime NOT NULL CONSTRAINT "SCDPRH_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"                 	nvarchar(30) NOT NULL CONSTRAINT "SCDPRH_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"         	datetime NOT NULL CONSTRAINT "SCDPRH_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"            	nvarchar(30) NOT NULL CONSTRAINT "SCDPRH_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "SCDPRH_PK" PRIMARY KEY CLUSTERED("SECURITY_DEPOSIT_RETURN_HOLDER_ID")
)
GO

CREATE TABLE "dbo"."PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST"  ( 
	"_SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID"	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"                    	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                          	datetime NULL,
	"SECURITY_DEPOSIT_RETURN_HOLDER_ID"      	bigint NOT NULL,
	"SECURITY_DEPOSIT_RETURN_ID"             	bigint NOT NULL,
	"PERSON_ID"                              	bigint NULL,
	"ORGANIZATION_ID"                        	bigint NULL,
	"CONCURRENCY_CONTROL_NUMBER"             	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"                   	datetime NOT NULL,
	"APP_CREATE_USERID"                      	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"                   	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"              	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"              	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USERID"                 	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"              	datetime NOT NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"         	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"                    	datetime NOT NULL,
	"DB_CREATE_USERID"                       	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"               	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"                  	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_SCDPRH_H_PK" PRIMARY KEY CLUSTERED("_SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_STATIC_VARIABLE"  ( 
	"STATIC_VARIABLE_NAME"          	nvarchar(100) NOT NULL,
	"STATIC_VARIABLE_VALUE"         	nvarchar(100) NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "STAVBL_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "STAVBL_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL CONSTRAINT "STAVBL_APP_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL CONSTRAINT "STAVBL_APP_CREATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "STAVBL_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL CONSTRAINT "STAVBL_APP_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL CONSTRAINT "STAVBL_APP_LAST_UPDATE_USER_DIRECTORY_DEF"  DEFAULT (user_name()),
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "STAVBL_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "STAVBL_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "STAVBL_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "STAVBL_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "STAVBL_PK" PRIMARY KEY CLUSTERED("STATIC_VARIABLE_NAME")
)
GO

CREATE TABLE "dbo"."PIMS_STATIC_VARIABLE_HIST"  ( 
	"_STATIC_VARIABLE_HIST_ID"      	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_STATIC_VARIABLE_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"STATIC_VARIABLE_NAME"          	nvarchar(100) NOT NULL,
	"STATIC_VARIABLE_VALUE"         	nvarchar(100) NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_STAVBL_H_PK" PRIMARY KEY CLUSTERED("_STATIC_VARIABLE_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_TASK_TEMPLATE_TYPE"  ( 
	"TASK_TEMPLATE_TYPE_CODE"   	nvarchar(20) NOT NULL,
	"DESCRIPTION"               	nvarchar(200) NOT NULL,
	"IS_DISABLED"               	bit NOT NULL CONSTRAINT "TSKTMT_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"DISPLAY_ORDER"             	int NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "TSKTMT_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "TSKTMT_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "TSKTMT_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "TSKTMT_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "TSKTMT_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "TSKTMT_PK" PRIMARY KEY CLUSTERED("TASK_TEMPLATE_TYPE_CODE")
)
GO

CREATE TABLE "dbo"."PIMS_TASK_TEMPLATE"  ( 
	"TASK_TEMPLATE_ID"              	bigint NOT NULL CONSTRAINT "TSKTMP_TASK_TEMPLATE_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_TASK_TEMPLATE_ID_SEQ]),
	"TASK_TEMPLATE_TYPE_CODE"       	nvarchar(20) NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL CONSTRAINT "TSKTMP_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "TSKTMP_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "TSKTMP_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "TSKTMP_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "TSKTMP_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "TSKTMP_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "TSKTMP_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "TSKTMP_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "TSKTMP_PK" PRIMARY KEY CLUSTERED("TASK_TEMPLATE_ID")
)
GO

CREATE TABLE "dbo"."PIMS_TASK"  ( 
	"TASK_ID"                       	bigint NOT NULL CONSTRAINT "TASK_TASK_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_TASK_ID_SEQ]),
	"TASK_TEMPLATE_ID"              	bigint NOT NULL,
	"ACTIVITY_ID"                   	bigint NULL,
	"USER_ID"                       	bigint NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "TASK_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "TASK_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "TASK_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "TASK_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "TASK_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "TASK_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "TASK_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "TASK_PK" PRIMARY KEY CLUSTERED("TASK_ID")
)
GO

CREATE TABLE "dbo"."PIMS_TASK_HIST"  ( 
	"_TASK_HIST_ID"                 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_TASK_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"TASK_ID"                       	bigint NOT NULL,
	"TASK_TEMPLATE_ID"              	bigint NOT NULL,
	"ACTIVITY_ID"                   	bigint NULL,
	"USER_ID"                       	bigint NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_TASK_H_PK" PRIMARY KEY CLUSTERED("_TASK_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_TASK_TEMPLATE_ACTIVITY_MODEL"  ( 
	"TASK_TEMPLATE_ACTIVITY_MODEL_ID"	bigint NOT NULL CONSTRAINT "TSKTAM_TASK_TEMPLATE_ACTIVITY_MODEL_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_ID_SEQ]),
	"TASK_TEMPLATE_ID"               	bigint NOT NULL,
	"ACTIVITY_MODEL_ID"              	bigint NOT NULL,
	"IS_MANDATORY"                   	bit NOT NULL CONSTRAINT "TSKTAM_IS_MANDATORY_DEF"  DEFAULT (CONVERT([bit],(1))),
	"IMPLEMENTATION_ORDER"           	smallint NOT NULL CONSTRAINT "TSKTAM_IMPLEMENTATION_ORDER_DEF"  DEFAULT ((0)),
	"IS_DISABLED"                    	bit NULL CONSTRAINT "TSKTAM_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"     	bigint NOT NULL CONSTRAINT "TSKTAM_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "TSKTAM_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"           	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"      	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "TSKTAM_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"      	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY" 	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"            	datetime NOT NULL CONSTRAINT "TSKTAM_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"               	nvarchar(30) NOT NULL CONSTRAINT "TSKTAM_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "TSKTAM_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "TSKTAM_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "TSKTAM_PK" PRIMARY KEY CLUSTERED("TASK_TEMPLATE_ACTIVITY_MODEL_ID")
)
GO

CREATE TABLE "dbo"."PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST"  ( 
	"_TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID"	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"                  	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                        	datetime NULL,
	"TASK_TEMPLATE_ACTIVITY_MODEL_ID"      	bigint NOT NULL,
	"TASK_TEMPLATE_ID"                     	bigint NOT NULL,
	"ACTIVITY_MODEL_ID"                    	bigint NOT NULL,
	"IS_MANDATORY"                         	bit NOT NULL,
	"IMPLEMENTATION_ORDER"                 	smallint NOT NULL,
	"IS_DISABLED"                          	bit NULL,
	"CONCURRENCY_CONTROL_NUMBER"           	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"                 	datetime NOT NULL,
	"APP_CREATE_USERID"                    	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"                 	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"            	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"            	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"               	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"            	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"       	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"                  	datetime NOT NULL,
	"DB_CREATE_USERID"                     	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"             	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"                	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_TSKTAM_H_PK" PRIMARY KEY CLUSTERED("_TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_TASK_TEMPLATE_HIST"  ( 
	"_TASK_TEMPLATE_HIST_ID"        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_TASK_TEMPLATE_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"TASK_TEMPLATE_ID"              	bigint NOT NULL,
	"TASK_TEMPLATE_TYPE_CODE"       	nvarchar(20) NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_TSKTMP_H_PK" PRIMARY KEY CLUSTERED("_TASK_TEMPLATE_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_TENANT"  ( 
	"TENANT_ID"                 	bigint NOT NULL CONSTRAINT "TENNTX_TENANT_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_TENANT_ID_SEQ]),
	"CODE"                      	nvarchar(6) NOT NULL,
	"NAME"                      	nvarchar(150) NOT NULL,
	"DESCRIPTION"               	nvarchar(500) NULL,
	"SETTINGS"                  	nvarchar(2000) NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"	bigint NOT NULL CONSTRAINT "TENNTX_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"DB_CREATE_TIMESTAMP"       	datetime NOT NULL CONSTRAINT "TENNTX_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"          	nvarchar(30) NOT NULL CONSTRAINT "TENNTX_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"  	datetime NOT NULL CONSTRAINT "TENNTX_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"     	nvarchar(30) NOT NULL CONSTRAINT "TENNTX_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "TENNTX_PK" PRIMARY KEY CLUSTERED("TENANT_ID")
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Auto-sequenced unique key value' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT', 
	@level2type = N'Column', @level2name = N'TENANT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for entry' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the entry for display purposes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT', 
	@level2type = N'Column', @level2name = N'NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the entry for display purposes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Serialized JSON value for the configuration' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT', 
	@level2type = N'Column', @level2name = N'SETTINGS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Deprecated table to support legacy CITZ-PIMS application code.  This table will be removed once the code dependency is removed from the system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT'
GO

CREATE TABLE "dbo"."PIMS_USER_HIST"  ( 
	"_USER_HIST_ID"                 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_USER_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"USER_ID"                       	bigint NOT NULL,
	"PERSON_ID"                     	bigint NOT NULL,
	"BUSINESS_IDENTIFIER_VALUE"     	nvarchar(30) NOT NULL,
	"GUID_IDENTIFIER_VALUE"         	uniqueidentifier NULL,
	"POSITION"                      	nvarchar(100) NULL,
	"NOTE"                          	nvarchar(1000) NULL,
	"LAST_LOGIN"                    	datetime NULL,
	"APPROVED_BY_ID"                	nvarchar(30) NULL,
	"ISSUE_DATE"                    	datetime NOT NULL,
	"EXPIRY_DATE"                   	datetime NULL,
	"IS_DISABLED"                   	bit NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_USER_H_PK" PRIMARY KEY CLUSTERED("_USER_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_USER_ORGANIZATION"  ( 
	"USER_ORGANIZATION_ID"          	bigint NOT NULL CONSTRAINT "USRORG_USER_ORGANIZATION_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_USER_ORGANIZATION_ID_SEQ]),
	"ORGANIZATION_ID"               	bigint NOT NULL,
	"USER_ID"                       	bigint NOT NULL,
	"ROLE_ID"                       	bigint NOT NULL,
	"IS_DISABLED"                   	bit NULL CONSTRAINT "USRORG_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "USRORG_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "USRORG_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "USRORG_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "USRORG_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "USRORG_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "USRORG_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "USRORG_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "USRORG_PK" PRIMARY KEY CLUSTERED("USER_ORGANIZATION_ID")
)
GO

CREATE TABLE "dbo"."PIMS_USER_ORGANIZATION_HIST"  ( 
	"_USER_ORGANIZATION_HIST_ID"    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_USER_ORGANIZATION_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"USER_ORGANIZATION_ID"          	bigint NOT NULL,
	"ORGANIZATION_ID"               	bigint NOT NULL,
	"USER_ID"                       	bigint NOT NULL,
	"ROLE_ID"                       	bigint NOT NULL,
	"IS_DISABLED"                   	bit NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_USRORG_H_PK" PRIMARY KEY CLUSTERED("_USER_ORGANIZATION_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_USER_ROLE"  ( 
	"USER_ROLE_ID"                  	bigint NOT NULL CONSTRAINT "USERRL_USER_ROLE_ID_DEF"  DEFAULT (NEXT VALUE FOR [PIMS_USER_ROLE_ID_SEQ]),
	"USER_ID"                       	bigint NOT NULL,
	"ROLE_ID"                       	bigint NOT NULL,
	"IS_DISABLED"                   	bit NULL CONSTRAINT "USERRL_IS_DISABLED_DEF"  DEFAULT (CONVERT([bit],(0))),
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL CONSTRAINT "USERRL_CONCURRENCY_CONTROL_NUMBER_DEF"  DEFAULT ((1)),
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL CONSTRAINT "USERRL_APP_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL CONSTRAINT "USERRL_APP_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL CONSTRAINT "USERRL_DB_CREATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL CONSTRAINT "USERRL_DB_CREATE_USERID_DEF"  DEFAULT (user_name()),
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL CONSTRAINT "USERRL_DB_LAST_UPDATE_TIMESTAMP_DEF"  DEFAULT (getutcdate()),
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL CONSTRAINT "USERRL_DB_LAST_UPDATE_USERID_DEF"  DEFAULT (user_name()),
	CONSTRAINT "USERRL_PK" PRIMARY KEY CLUSTERED("USER_ROLE_ID")
)
GO

CREATE TABLE "dbo"."PIMS_USER_ROLE_HIST"  ( 
	"_USER_ROLE_HIST_ID"            	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_USER_ROLE_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"USER_ROLE_ID"                  	bigint NOT NULL,
	"USER_ID"                       	bigint NOT NULL,
	"ROLE_ID"                       	bigint NOT NULL,
	"IS_DISABLED"                   	bit NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_USERRL_H_PK" PRIMARY KEY CLUSTERED("_USER_ROLE_HIST_ID")
)
GO

CREATE TABLE "dbo"."PIMS_WORKFLOW_MODEL_HIST"  ( 
	"_WORKFLOW_MODEL_HIST_ID"       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_WORKFLOW_MODEL_H_ID_SEQ]),
	"EFFECTIVE_DATE_HIST"           	datetime NOT NULL DEFAULT (getutcdate()),
	"END_DATE_HIST"                 	datetime NULL,
	"WORKFLOW_MODEL_ID"             	bigint NOT NULL,
	"WORKFLOW_MODEL_TYPE_CODE"      	nvarchar(20) NOT NULL,
	"IS_DISABLED"                   	bit NOT NULL,
	"CONCURRENCY_CONTROL_NUMBER"    	bigint NOT NULL,
	"APP_CREATE_TIMESTAMP"          	datetime NOT NULL,
	"APP_CREATE_USERID"             	nvarchar(30) NOT NULL,
	"APP_CREATE_USER_GUID"          	uniqueidentifier NULL,
	"APP_CREATE_USER_DIRECTORY"     	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_TIMESTAMP"     	datetime NOT NULL,
	"APP_LAST_UPDATE_USERID"        	nvarchar(30) NOT NULL,
	"APP_LAST_UPDATE_USER_GUID"     	uniqueidentifier NULL,
	"APP_LAST_UPDATE_USER_DIRECTORY"	nvarchar(30) NOT NULL,
	"DB_CREATE_TIMESTAMP"           	datetime NOT NULL,
	"DB_CREATE_USERID"              	nvarchar(30) NOT NULL,
	"DB_LAST_UPDATE_TIMESTAMP"      	datetime NOT NULL,
	"DB_LAST_UPDATE_USERID"         	nvarchar(30) NOT NULL,
	CONSTRAINT "PIMS_WFLMDL_H_PK" PRIMARY KEY CLUSTERED("_WORKFLOW_MODEL_HIST_ID")
)
GO

CREATE TABLE "dbo"."__EFMigrationsHistory"  ( 
	"MigrationId"   	nvarchar(150) NOT NULL,
	"ProductVersion"	nvarchar(32) NULL,
	CONSTRAINT "MIGHIS_PK" PRIMARY KEY CLUSTERED("MigrationId")
)
GO

CREATE VIEW "dbo"."PIMS_PERSON_CONTACT_VW" AS
SELECT DISTINCT PERSON_ID
     , (SELECT TOP 1 CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'FAX'
           AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD DESC) AS FAX
     , (SELECT TOP 1 CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'PERSMOBIL'
           AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD DESC) AS PERSONAL_MOBILE
     , (SELECT TOP 1 CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'PERSPHONE'
           AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD DESC) AS PERSONAL_PHONE
     , (SELECT TOP 1 CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'WORKMOBIL'
           AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD DESC) AS WORK_MOBILE
     , (SELECT TOP 1 CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'WORKPHONE'
           AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD DESC) AS WORK_PHONE
     , (SELECT TOP 1 CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'WORKEMAIL'
           AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD DESC) AS WORK_EMAIL
     , (SELECT TOP 1 CONTACT_METHOD_VALUE
        FROM   PIMS_CONTACT_METHOD
        WHERE  CONTACT_METHOD_TYPE_CODE = 'PERSEMAIL'
           AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD DESC) AS PERSONAL_EMAIL
FROM   PIMS_CONTACT_METHOD TMP
WHERE  ORGANIZATION_ID IS NULL
GO

CREATE VIEW "dbo"."PIMS_CONTACT_MGR_VW" AS
  SELECT CONCAT('P', PER.PERSON_ID)                                          AS ID
       , PER.PERSON_ID
       , NULL                                                                AS ORGANIZATION_ID
       , PER.IS_DISABLED
       , TRIM(CONCAT_WS(' ', PER.FIRST_NAME, PER.MIDDLE_NAMES, PER.SURNAME)) AS SUMMARY
       , PER.SURNAME
       , PER.FIRST_NAME
       , PER.MIDDLE_NAMES
       , NULL                                                                AS ORGANIZATION_NAME
       , PAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1                                                AS MAILING_ADDRESS
       , ADR.MUNICIPALITY_NAME
       , PRV.PROVINCE_STATE_CODE                                             AS PROVINCE_STATE
       , COALESCE(PVW.WORK_EMAIL, PVW.PERSONAL_EMAIL)                        AS EMAIL_ADDRESS
  FROM   PIMS_PERSON            PER                                                         LEFT JOIN
         PIMS_PERSON_ADDRESS    PAD ON PAD.PERSON_ID                = PER.PERSON_ID   
                                   AND PAD.ADDRESS_USAGE_TYPE_CODE  = 'MAILING'             LEFT JOIN
         PIMS_ADDRESS           ADR ON ADR.ADDRESS_ID               = PAD.ADDRESS_ID        LEFT JOIN 
         PIMS_PROVINCE_STATE    PRV ON PRV.PROVINCE_STATE_ID        = ADR.PROVINCE_STATE_ID LEFT JOIN
         PIMS_PERSON_CONTACT_VW PVW ON PVW.PERSON_ID                = PER.PERSON_ID
  UNION
  SELECT CONCAT('O', ORG.ORGANIZATION_ID)
       , NULL
       , ORG.ORGANIZATION_ID
       , ORG.IS_DISABLED
       , ORG.ORGANIZATION_NAME
       , NULL
       , NULL
       , NULL                                                        
       , ORG.ORGANIZATION_NAME
       , OAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1
       , ADR.MUNICIPALITY_NAME                     
       , PRV.PROVINCE_STATE_CODE
       , CON.CONTACT_METHOD_VALUE 
  FROM   PIMS_ORGANIZATION         ORG                                                         LEFT JOIN 
         PIMS_ORGANIZATION_ADDRESS OAD ON OAD.ORGANIZATION_ID          = ORG.ORGANIZATION_ID
                                      AND OAD.ADDRESS_USAGE_TYPE_CODE  = 'MAILING'             LEFT JOIN
         PIMS_ADDRESS              ADR ON ADR.ADDRESS_ID               = OAD.ADDRESS_ID        LEFT JOIN 
         PIMS_PROVINCE_STATE       PRV ON PRV.PROVINCE_STATE_ID        = ADR.PROVINCE_STATE_ID LEFT JOIN
         PIMS_CONTACT_METHOD       CON ON CON.ORGANIZATION_ID          = ORG.ORGANIZATION_ID
                                      AND CON.CONTACT_METHOD_TYPE_CODE = 'WORKEMAIL'
GO

CREATE VIEW "dbo"."PIMS_PROPERTY_BOUNDARY_VW" AS
SELECT PROP.PROPERTY_ID
     , PROP.PID
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , PROP.PROPERTY_CLASSIFICATION_TYPE_CODE
     , PROP.PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.NAME
     , PROP.DESCRIPTION
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.ENCUMBRANCE_REASON
     , PROP.IS_SENSITIVE
     , PROP.IS_OWNED
     , PROP.IS_PROPERTY_OF_INTEREST
     , PROP.IS_VISIBLE_TO_OTHER_AGENCIES
     , PROP.ZONING,ZONING_POTENTIAL
FROM   PIMS_PROPERTY       PROP                                                    INNER JOIN
       PIMS_ADDRESS        ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        INNER JOIN
       PIMS_PROVINCE_STATE PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID INNER JOIN
       PIMS_COUNTRY        CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
WHERE  PROP.BOUNDARY IS NOT NULL
GO

CREATE VIEW "dbo"."PIMS_PROPERTY_LOCATION_VW" AS
SELECT PROP.PROPERTY_ID              
     , PROP.PID
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN                   
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , PROP.PROPERTY_CLASSIFICATION_TYPE_CODE
     , PROP.PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE      
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.NAME
     , PROP.DESCRIPTION
     , PROP.ADDRESS_ID                 
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.LOCATION AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.ENCUMBRANCE_REASON                                      
     , PROP.IS_SENSITIVE
     , PROP.IS_OWNED
     , PROP.IS_PROPERTY_OF_INTEREST
     , PROP.IS_VISIBLE_TO_OTHER_AGENCIES
     , PROP.ZONING,ZONING_POTENTIAL
FROM   PIMS_PROPERTY       PROP                                                    INNER JOIN
       PIMS_ADDRESS        ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        INNER JOIN
       PIMS_PROVINCE_STATE PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID INNER JOIN
       PIMS_COUNTRY        CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
WHERE  PROP.LOCATION IS NOT NULL
GO

-- ............................................................................................


-- --------------------------------------------------------------------------------------------
-- Create procedure pims_error_handling 
-- --------------------------------------------------------------------------------------------
CREATE PROCEDURE "dbo"."pims_error_handling" AS 
  begin
    DECLARE @errmsg   nvarchar(2048),
      @severity tinyint,
      @state    tinyint,
      @errno    int,
      @proc     sysname,
      @lineno   int
           
    SELECT @errmsg = error_message(), @severity = error_severity(),
      @state  = error_state(), @errno = error_number(),
      @proc   = error_procedure(), @lineno = error_line()

    IF @errmsg NOT LIKE '***%'
      BEGIN
        SELECT @errmsg = '*** ' + coalesce(quotename(@proc), '<dynamic SQL>') + 
          ', Line ' + ltrim(str(@lineno)) + '. Errno ' + 
          ltrim(str(@errno)) + ': ' + @errmsg
      END

    RAISERROR('%s', @severity, @state, @errmsg)
  end
GO

-- --------------------------------------------------------------------------------------------
-- Create function pims_ColumnExists 
-- --------------------------------------------------------------------------------------------
CREATE FUNCTION "dbo"."pims_ColumnExists"(@TableName varchar(100), @ColumnName varchar(100))
RETURNS nvarchar(1) 
AS
BEGIN
  DECLARE @Result nvarchar(1);
  
  IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = @TableName AND COLUMN_NAME = @ColumnName)
    SET @Result = 'Y'
  ELSE
    SET @Result = 'N'

  IF @TableName LIKE '%HIST'
    SET @Result = 'N'
 
 RETURN @Result;
END
GO

CREATE NONCLUSTERED INDEX "ACRQOR_ACCESS_REQUEST_ID_IDX"
	ON "dbo"."PIMS_ACCESS_REQUEST_ORGANIZATION"("ACCESS_REQUEST_ID")
GO

CREATE NONCLUSTERED INDEX "ACRQOR_ORGANIZATION_ID_IDX"
	ON "dbo"."PIMS_ACCESS_REQUEST_ORGANIZATION"("ORGANIZATION_ID")
GO

CREATE NONCLUSTERED INDEX "ACRQST_ACCESS_REQUEST_STATUS_TYPE_CODE_IDX"
	ON "dbo"."PIMS_ACCESS_REQUEST"("ACCESS_REQUEST_STATUS_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "ACRQST_ROLE_ID_IDX"
	ON "dbo"."PIMS_ACCESS_REQUEST"("ROLE_ID")
GO

CREATE NONCLUSTERED INDEX "ACRQST_USER_ID_IDX"
	ON "dbo"."PIMS_ACCESS_REQUEST"("USER_ID")
GO

CREATE NONCLUSTERED INDEX "ACTVTY_ACTIVITY_MODEL_ID_IDX"
	ON "dbo"."PIMS_ACTIVITY"("ACTIVITY_MODEL_ID")
GO

CREATE NONCLUSTERED INDEX "ACTVTY_PROJECT_ID_IDX"
	ON "dbo"."PIMS_ACTIVITY"("PROJECT_ID")
GO

CREATE NONCLUSTERED INDEX "ACTVTY_WORKFLOW_ID_IDX"
	ON "dbo"."PIMS_ACTIVITY"("WORKFLOW_ID")
GO

CREATE NONCLUSTERED INDEX "ADDRSS_COUNTRY_ID_IDX"
	ON "dbo"."PIMS_ADDRESS"("COUNTRY_ID")
GO

CREATE NONCLUSTERED INDEX "ADDRSS_DISTRICT_CODE_IDX"
	ON "dbo"."PIMS_ADDRESS"("DISTRICT_CODE")
GO

CREATE NONCLUSTERED INDEX "ADDRSS_PROVINCE_STATE_ID_IDX"
	ON "dbo"."PIMS_ADDRESS"("PROVINCE_STATE_ID")
GO

CREATE NONCLUSTERED INDEX "ADDRSS_REGION_CODE_IDX"
	ON "dbo"."PIMS_ADDRESS"("REGION_CODE")
GO

CREATE NONCLUSTERED INDEX "CLMTYP_CLAIM_UID_IDX"
	ON "dbo"."PIMS_CLAIM"("CLAIM_UID")
GO

CREATE NONCLUSTERED INDEX "CLMTYP_KEYCLOAK_ROLE_ID_IDX"
	ON "dbo"."PIMS_CLAIM"("KEYCLOAK_ROLE_ID")
GO

CREATE NONCLUSTERED INDEX "CNTMTH_CONTACT_METHOD_TYPE_CODE_IDX"
	ON "dbo"."PIMS_CONTACT_METHOD"("CONTACT_METHOD_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "CNTMTH_ORGANIZATION_ID_IDX"
	ON "dbo"."PIMS_CONTACT_METHOD"("ORGANIZATION_ID")
GO

CREATE NONCLUSTERED INDEX "CNTMTH_PERSON_ID_IDX"
	ON "dbo"."PIMS_CONTACT_METHOD"("PERSON_ID")
GO

CREATE NONCLUSTERED INDEX "DSTRCT_REGION_CODE_IDX"
	ON "dbo"."PIMS_DISTRICT"("REGION_CODE")
GO

CREATE NONCLUSTERED INDEX "INSRNC_INSURANCE_TYPE_CODE_IDX"
	ON "dbo"."PIMS_INSURANCE"("INSURANCE_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "INSRNC_LEASE_ID_IDX"
	ON "dbo"."PIMS_INSURANCE"("LEASE_ID")
GO

CREATE NONCLUSTERED INDEX "LEASE_LEASE_CATEGORY_TYPE_CODE_IDX"
	ON "dbo"."PIMS_LEASE"("LEASE_CATEGORY_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "LEASE_LEASE_INITIATOR_TYPE_CODE_IDX"
	ON "dbo"."PIMS_LEASE"("LEASE_INITIATOR_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "LEASE_LEASE_LICENSE_TYPE_CODE_IDX"
	ON "dbo"."PIMS_LEASE"("LEASE_LICENSE_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "LEASE_LEASE_PAY_RVBL_TYPE_CODE_IDX"
	ON "dbo"."PIMS_LEASE"("LEASE_PAY_RVBL_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "LEASE_LEASE_PROGRAM_TYPE_CODE_IDX"
	ON "dbo"."PIMS_LEASE"("LEASE_PROGRAM_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "LEASE_LEASE_PURPOSE_TYPE_CODE_IDX"
	ON "dbo"."PIMS_LEASE"("LEASE_PURPOSE_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "LEASE_LEASE_RESPONSIBILITY_TYPE_CODE_IDX"
	ON "dbo"."PIMS_LEASE"("LEASE_RESPONSIBILITY_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "LEASE_LEASE_STATUS_TYPE_CODE_IDX"
	ON "dbo"."PIMS_LEASE"("LEASE_STATUS_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "LEASE_L_FILE_NO_IDX"
	ON "dbo"."PIMS_LEASE"("L_FILE_NO")
GO

CREATE NONCLUSTERED INDEX "LEASE_PS_FILE_NO_IDX"
	ON "dbo"."PIMS_LEASE"("PS_FILE_NO")
GO

CREATE NONCLUSTERED INDEX "LEASE_REGION_CODE_IDX"
	ON "dbo"."PIMS_LEASE"("REGION_CODE")
GO

CREATE NONCLUSTERED INDEX "LEASE_TFA_FILE_NO_IDX"
	ON "dbo"."PIMS_LEASE"("TFA_FILE_NO")
GO

CREATE NONCLUSTERED INDEX "LSPYMT_LEASE_PAYMENT_METHOD_TYPE_CODE_IDX"
	ON "dbo"."PIMS_LEASE_PAYMENT"("LEASE_PAYMENT_METHOD_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "LSPYMT_LEASE_TERM_ID_IDX"
	ON "dbo"."PIMS_LEASE_PAYMENT"("LEASE_TERM_ID")
GO

CREATE NONCLUSTERED INDEX "LSTERM_LEASE_ID_IDX"
	ON "dbo"."PIMS_LEASE_TERM"("LEASE_ID")
GO

CREATE NONCLUSTERED INDEX "LSTERM_LEASE_PMT_FREQ_TYPE_CODE_IDX"
	ON "dbo"."PIMS_LEASE_TERM"("LEASE_PMT_FREQ_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "LSTERM_LEASE_TERM_STATUS_TYPE_CODE_IDX"
	ON "dbo"."PIMS_LEASE_TERM"("LEASE_TERM_STATUS_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "ORGADD_ADDRESS_ID_IDX"
	ON "dbo"."PIMS_ORGANIZATION_ADDRESS"("ADDRESS_ID")
GO

CREATE NONCLUSTERED INDEX "ORGADD_ADDRESS_USAGE_TYPE_CODE_IDX"
	ON "dbo"."PIMS_ORGANIZATION_ADDRESS"("ADDRESS_USAGE_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "ORGADD_ORGANIZATION_ID_IDX"
	ON "dbo"."PIMS_ORGANIZATION_ADDRESS"("ORGANIZATION_ID")
GO

CREATE NONCLUSTERED INDEX "ORG_DISTRICT_CODE_IDX"
	ON "dbo"."PIMS_ORGANIZATION"("DISTRICT_CODE")
GO

CREATE NONCLUSTERED INDEX "ORG_ORGANIZATION_TYPE_CODE_IDX"
	ON "dbo"."PIMS_ORGANIZATION"("ORGANIZATION_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "ORG_ORG_IDENTIFIER_TYPE_CODE_IDX"
	ON "dbo"."PIMS_ORGANIZATION"("ORG_IDENTIFIER_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "ORG_PRNT_ORGANIZATION_ID_IDX"
	ON "dbo"."PIMS_ORGANIZATION"("PRNT_ORGANIZATION_ID")
GO

CREATE NONCLUSTERED INDEX "ORG_REGION_CODE_IDX"
	ON "dbo"."PIMS_ORGANIZATION"("REGION_CODE")
GO

CREATE NONCLUSTERED INDEX "PERADD_ADDRESS_ID_IDX"
	ON "dbo"."PIMS_PERSON_ADDRESS"("ADDRESS_ID")
GO

CREATE NONCLUSTERED INDEX "PERADD_ADDRESS_USAGE_TYPE_CODE_IDX"
	ON "dbo"."PIMS_PERSON_ADDRESS"("ADDRESS_USAGE_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "PERADD_PERSON_ID_IDX"
	ON "dbo"."PIMS_PERSON_ADDRESS"("PERSON_ID")
GO

CREATE NONCLUSTERED INDEX "PERORG_ORGANIZATION_ID_IDX"
	ON "dbo"."PIMS_PERSON_ORGANIZATION"("ORGANIZATION_ID")
GO

CREATE NONCLUSTERED INDEX "PERORG_PERSON_ID_IDX"
	ON "dbo"."PIMS_PERSON_ORGANIZATION"("PERSON_ID")
GO

CREATE NONCLUSTERED INDEX "PIMPRV_PROPERTY_IMPROVEMENT_TYPE_CODE_IDX"
	ON "dbo"."PIMS_PROPERTY_IMPROVEMENT"("PROPERTY_IMPROVEMENT_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "PIMPRV_PROPERTY_LEASE_ID_IDX"
	ON "dbo"."PIMS_PROPERTY_IMPROVEMENT"("LEASE_ID")
GO

CREATE NONCLUSTERED INDEX "PRJPRP_PROJECT_ID_IDX"
	ON "dbo"."PIMS_PROJECT_PROPERTY"("PROJECT_ID")
GO

CREATE NONCLUSTERED INDEX "PRJPRP_PROPERTY_ID_IDX"
	ON "dbo"."PIMS_PROJECT_PROPERTY"("PROPERTY_ID")
GO

CREATE NONCLUSTERED INDEX "PROJCT_PROJECT_RISK_TYPE_CODE_IDX"
	ON "dbo"."PIMS_PROJECT"("PROJECT_RISK_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "PROJCT_PROJECT_STATUS_TYPE_CODE_IDX"
	ON "dbo"."PIMS_PROJECT"("PROJECT_STATUS_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "PROJCT_PROJECT_TIER_TYPE_CODE_IDX"
	ON "dbo"."PIMS_PROJECT"("PROJECT_TIER_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "PROJCT_PROJECT_TYPE_CODE_IDX"
	ON "dbo"."PIMS_PROJECT"("PROJECT_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "PROJNT_PROJECT_ID_IDX"
	ON "dbo"."PIMS_PROJECT_NOTE"("PROJECT_ID")
GO

CREATE NONCLUSTERED INDEX "PROPLS_LEASE_ID_IDX"
	ON "dbo"."PIMS_PROPERTY_LEASE"("LEASE_ID")
GO

CREATE NONCLUSTERED INDEX "PROPLS_PROPERTY_ID_IDX"
	ON "dbo"."PIMS_PROPERTY_LEASE"("PROPERTY_ID")
GO

CREATE NONCLUSTERED INDEX "PROVNC_COUNTRY_ID_IDX"
	ON "dbo"."PIMS_PROVINCE_STATE"("COUNTRY_ID")
GO

CREATE NONCLUSTERED INDEX "PRPACT_ACTIVITY_ID_IDX"
	ON "dbo"."PIMS_PROPERTY_ACTIVITY"("ACTIVITY_ID")
GO

CREATE NONCLUSTERED INDEX "PRPACT_PROPERTY_ID_IDX"
	ON "dbo"."PIMS_PROPERTY_ACTIVITY"("PROPERTY_ID")
GO

CREATE NONCLUSTERED INDEX "PRPEVL_PROPERTY_ID_IDX"
	ON "dbo"."PIMS_PROPERTY_EVALUATION"("PROPERTY_ID")
GO

CREATE NONCLUSTERED INDEX "PRPORG_ORGANIZATION_ID_IDX"
	ON "dbo"."PIMS_PROPERTY_ORGANIZATION"("ORGANIZATION_ID")
GO

CREATE NONCLUSTERED INDEX "PRPORG_PROPERTY_ID_IDX"
	ON "dbo"."PIMS_PROPERTY_ORGANIZATION"("PROPERTY_ID")
GO

CREATE NONCLUSTERED INDEX "PRPRSF_PROPERTY_ID_IDX"
	ON "dbo"."PIMS_PROPERTY_PROPERTY_SERVICE_FILE"("PROPERTY_ID")
GO

CREATE NONCLUSTERED INDEX "PRPRSF_PROPERTY_SERVICE_FILE_ID_IDX"
	ON "dbo"."PIMS_PROPERTY_PROPERTY_SERVICE_FILE"("PROPERTY_SERVICE_FILE_ID")
GO

CREATE NONCLUSTERED INDEX "PRPRTY_ADDRESS_ID_IDX"
	ON "dbo"."PIMS_PROPERTY"("ADDRESS_ID")
GO

CREATE NONCLUSTERED INDEX "PRPRTY_DISTRICT_CODE_IDX"
	ON "dbo"."PIMS_PROPERTY"("DISTRICT_CODE")
GO

CREATE NONCLUSTERED INDEX "PRPRTY_PROPERTY_AREA_UNIT_TYPE_CODE_IDX"
	ON "dbo"."PIMS_PROPERTY"("PROPERTY_AREA_UNIT_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "PRPRTY_PROPERTY_CLASSIFICATION_TYPE_CODE_IDX"
	ON "dbo"."PIMS_PROPERTY"("PROPERTY_CLASSIFICATION_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "PRPRTY_PROPERTY_DATA_SOURCE_TYPE_CODE_IDX"
	ON "dbo"."PIMS_PROPERTY"("PROPERTY_DATA_SOURCE_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "PRPRTY_PROPERTY_MANAGER_ID_IDX"
	ON "dbo"."PIMS_PROPERTY"("PROPERTY_MANAGER_ID")
GO

CREATE NONCLUSTERED INDEX "PRPRTY_PROPERTY_STATUS_TYPE_CODE_IDX"
	ON "dbo"."PIMS_PROPERTY"("PROPERTY_STATUS_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "PRPRTY_PROPERTY_TENURE_TYPE_CODE_IDX"
	ON "dbo"."PIMS_PROPERTY"("PROPERTY_TENURE_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "PRPRTY_PROPERTY_TYPE_CODE_IDX"
	ON "dbo"."PIMS_PROPERTY"("PROPERTY_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "PRPRTY_PROP_MGMT_ORG_ID_IDX"
	ON "dbo"."PIMS_PROPERTY"("PROP_MGMT_ORG_ID")
GO

CREATE NONCLUSTERED INDEX "PRPRTY_REGION_CODE_IDX"
	ON "dbo"."PIMS_PROPERTY"("REGION_CODE")
GO

CREATE NONCLUSTERED INDEX "PRPRTY_SURPLUS_DECLARATION_TYPE_CODE_IDX"
	ON "dbo"."PIMS_PROPERTY"("SURPLUS_DECLARATION_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "PRPSVC_PROPERTY_SERVICE_FILE_TYPE_CODE_IDX"
	ON "dbo"."PIMS_PROPERTY_SERVICE_FILE"("PROPERTY_SERVICE_FILE_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "PRPTAX_PROPERTY_ID_IDX"
	ON "dbo"."PIMS_PROPERTY_TAX"("PROPERTY_ID")
GO

CREATE NONCLUSTERED INDEX "PRPTAX_PROPERTY_TAX_REMIT_TYPE_CODE_IDX"
	ON "dbo"."PIMS_PROPERTY_TAX"("PROPERTY_TAX_REMIT_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "PRWKMD_PROJECT_ID_IDX"
	ON "dbo"."PIMS_PROJECT_WORKFLOW_MODEL"("PROJECT_ID")
GO

CREATE NONCLUSTERED INDEX "PRWKMD_WORKFLOW_MODEL_ID_IDX"
	ON "dbo"."PIMS_PROJECT_WORKFLOW_MODEL"("WORKFLOW_MODEL_ID")
GO

CREATE NONCLUSTERED INDEX "ROLCLM_CLAIM_ID_IDX"
	ON "dbo"."PIMS_ROLE_CLAIM"("CLAIM_ID")
GO

CREATE NONCLUSTERED INDEX "ROLCLM_ROLE_ID_IDX"
	ON "dbo"."PIMS_ROLE_CLAIM"("ROLE_ID")
GO

CREATE NONCLUSTERED INDEX "ROLE_KEYCLOAK_GROUP_ID_IDX"
	ON "dbo"."PIMS_ROLE"("KEYCLOAK_GROUP_ID")
GO

CREATE NONCLUSTERED INDEX "ROLE_ROLE_UID_IDX"
	ON "dbo"."PIMS_ROLE"("ROLE_UID")
GO

CREATE NONCLUSTERED INDEX "SCDPHL_ORGANIZATION_ID_IDX"
	ON "dbo"."PIMS_SECURITY_DEPOSIT_HOLDER"("ORGANIZATION_ID")
GO

CREATE NONCLUSTERED INDEX "SCDPHL_PERSON_ID_IDX"
	ON "dbo"."PIMS_SECURITY_DEPOSIT_HOLDER"("PERSON_ID")
GO

CREATE NONCLUSTERED INDEX "SCDPHL_SECURITY_DEPOSIT_ID_IDX"
	ON "dbo"."PIMS_SECURITY_DEPOSIT_HOLDER"("SECURITY_DEPOSIT_ID")
GO

CREATE NONCLUSTERED INDEX "SCDPRH_ORGANIZATION_ID_IDX"
	ON "dbo"."PIMS_SECURITY_DEPOSIT_RETURN_HOLDER"("ORGANIZATION_ID")
GO

CREATE NONCLUSTERED INDEX "SCDPRH_PERSON_ID_IDX"
	ON "dbo"."PIMS_SECURITY_DEPOSIT_RETURN_HOLDER"("PERSON_ID")
GO

CREATE NONCLUSTERED INDEX "SCDPRH_SECURITY_DEPOSIT_RETURN_ID_IDX"
	ON "dbo"."PIMS_SECURITY_DEPOSIT_RETURN_HOLDER"("SECURITY_DEPOSIT_RETURN_ID")
GO

CREATE NONCLUSTERED INDEX "SDRTRN_LEASE_ID_IDX"
	ON "dbo"."PIMS_SECURITY_DEPOSIT_RETURN"("LEASE_ID")
GO

CREATE NONCLUSTERED INDEX "SDRTRN_SECURITY_DEPOSIT_ID_IDX"
	ON "dbo"."PIMS_SECURITY_DEPOSIT_RETURN"("SECURITY_DEPOSIT_ID")
GO

CREATE NONCLUSTERED INDEX "SDRTRN_SECURITY_DEPOSIT_TYPE_CODE_IDX"
	ON "dbo"."PIMS_SECURITY_DEPOSIT_RETURN"("SECURITY_DEPOSIT_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "SECDEP_LEASE_ID_IDX"
	ON "dbo"."PIMS_SECURITY_DEPOSIT"("LEASE_ID")
GO

CREATE NONCLUSTERED INDEX "SECDEP_SECURITY_DEPOSIT_TYPE_CODE_IDX"
	ON "dbo"."PIMS_SECURITY_DEPOSIT"("SECURITY_DEPOSIT_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "TASK_ACTIVITY_ID_IDX"
	ON "dbo"."PIMS_TASK"("ACTIVITY_ID")
GO

CREATE NONCLUSTERED INDEX "TASK_TASK_TEMPLATE_ID_IDX"
	ON "dbo"."PIMS_TASK"("TASK_TEMPLATE_ID")
GO

CREATE NONCLUSTERED INDEX "TASK_USER_ID_IDX"
	ON "dbo"."PIMS_TASK"("USER_ID")
GO

CREATE NONCLUSTERED INDEX "TENANT_LEASE_ID_IDX"
	ON "dbo"."PIMS_LEASE_TENANT"("LEASE_ID")
GO

CREATE NONCLUSTERED INDEX "TENANT_LESSOR_TYPE_CODE_IDX"
	ON "dbo"."PIMS_LEASE_TENANT"("LESSOR_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "TENANT_ORGANIZATION_ID_IDX"
	ON "dbo"."PIMS_LEASE_TENANT"("ORGANIZATION_ID")
GO

CREATE NONCLUSTERED INDEX "TENANT_PERSON_ID_IDX"
	ON "dbo"."PIMS_LEASE_TENANT"("PERSON_ID")
GO

CREATE NONCLUSTERED INDEX "TSKTAM_ACTIVITY_MODEL_ID_IDX"
	ON "dbo"."PIMS_TASK_TEMPLATE_ACTIVITY_MODEL"("ACTIVITY_MODEL_ID")
GO

CREATE NONCLUSTERED INDEX "TSKTAM_TASK_TEMPLATE_ID_IDX"
	ON "dbo"."PIMS_TASK_TEMPLATE_ACTIVITY_MODEL"("TASK_TEMPLATE_ID")
GO

CREATE NONCLUSTERED INDEX "TSKTMP_TASK_TEMPLATE_TYPE_CODE_IDX"
	ON "dbo"."PIMS_TASK_TEMPLATE"("TASK_TEMPLATE_TYPE_CODE")
GO

CREATE NONCLUSTERED INDEX "USERRL_ROLE_ID_IDX"
	ON "dbo"."PIMS_USER_ROLE"("ROLE_ID")
GO

CREATE NONCLUSTERED INDEX "USERRL_USER_ID_IDX"
	ON "dbo"."PIMS_USER_ROLE"("USER_ID")
GO

CREATE NONCLUSTERED INDEX "USER_BUSINESS_IDENTIFIER_VALUE_IDX"
	ON "dbo"."PIMS_USER"("BUSINESS_IDENTIFIER_VALUE")
GO

CREATE NONCLUSTERED INDEX "USER_GUID_IDENTIFIER_VALUE_IDX"
	ON "dbo"."PIMS_USER"("GUID_IDENTIFIER_VALUE")
GO

CREATE NONCLUSTERED INDEX "USER_PERSON_ID_IDX"
	ON "dbo"."PIMS_USER"("PERSON_ID")
GO

CREATE NONCLUSTERED INDEX "USRORG_ORGANIZATION_ID_IDX"
	ON "dbo"."PIMS_USER_ORGANIZATION"("ORGANIZATION_ID")
GO

CREATE NONCLUSTERED INDEX "USRORG_ROLE_ID_IDX"
	ON "dbo"."PIMS_USER_ORGANIZATION"("ROLE_ID")
GO

CREATE NONCLUSTERED INDEX "USRORG_USER_ID_IDX"
	ON "dbo"."PIMS_USER_ORGANIZATION"("USER_ID")
GO

CREATE NONCLUSTERED INDEX "WFLMDL_WORKFLOW_MODEL_TYPE_CODE_IDX"
	ON "dbo"."PIMS_WORKFLOW_MODEL"("WORKFLOW_MODEL_TYPE_CODE")
GO

CREATE TRIGGER "dbo"."PIMS_PROJTR_I_S_I_TR" ON PIMS_PROJECT_TIER_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_TIER_TYPE ("PROJECT_TIER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_TIER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_USER_A_S_IUD_TR" ON PIMS_USER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_USER_HIST set END_DATE_HIST = @curr_date where USER_ID in (select USER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_USER_HIST ([USER_ID], [PERSON_ID], [BUSINESS_IDENTIFIER_VALUE], [GUID_IDENTIFIER_VALUE], [POSITION], [NOTE], [LAST_LOGIN], [APPROVED_BY_ID], [ISSUE_DATE], [EXPIRY_DATE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _USER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ID], [PERSON_ID], [BUSINESS_IDENTIFIER_VALUE], [GUID_IDENTIFIER_VALUE], [POSITION], [NOTE], [LAST_LOGIN], [APPROVED_BY_ID], [ISSUE_DATE], [EXPIRY_DATE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_USER_H_ID_SEQ]) as [_USER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRJTYP_I_S_I_TR" ON PIMS_PROJECT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_TYPE ("PROJECT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_USERRL_A_S_IUD_TR" ON PIMS_USER_ROLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_USER_ROLE_HIST set END_DATE_HIST = @curr_date where USER_ROLE_ID in (select USER_ROLE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_USER_ROLE_HIST ([USER_ROLE_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _USER_ROLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ROLE_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_USER_ROLE_H_ID_SEQ]) as [_USER_ROLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRWKMD_I_S_I_TR" ON PIMS_PROJECT_WORKFLOW_MODEL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_WORKFLOW_MODEL ("PROJECT_WORKFLOW_MODEL_ID",
      "PROJECT_ID",
      "WORKFLOW_MODEL_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROJECT_WORKFLOW_MODEL_ID",
      "PROJECT_ID",
      "WORKFLOW_MODEL_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_USRORG_A_S_IUD_TR" ON PIMS_USER_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_USER_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where USER_ORGANIZATION_ID in (select USER_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_USER_ORGANIZATION_HIST ([USER_ORGANIZATION_ID], [ORGANIZATION_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _USER_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ORGANIZATION_ID], [ORGANIZATION_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_USER_ORGANIZATION_H_ID_SEQ]) as [_USER_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPRTY_I_S_I_TR" ON PIMS_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY ("PROPERTY_ID",
      "PROPERTY_MANAGER_ID",
      "PROP_MGMT_ORG_ID",
      "PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_TENURE_TYPE_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME",
      "DESCRIPTION",
      "PID",
      "PIN",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "IS_OWNED",
      "IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE",
      "ZONING",
      "ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ID",
      "PROPERTY_MANAGER_ID",
      "PROP_MGMT_ORG_ID",
      "PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_TENURE_TYPE_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME",
      "DESCRIPTION",
      "PID",
      "PIN",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "IS_OWNED",
      "IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE",
      "ZONING",
      "ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_WFLMDL_A_S_IUD_TR" ON PIMS_WORKFLOW_MODEL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_WORKFLOW_MODEL_HIST set END_DATE_HIST = @curr_date where WORKFLOW_MODEL_ID in (select WORKFLOW_MODEL_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_WORKFLOW_MODEL_HIST ([WORKFLOW_MODEL_ID], [WORKFLOW_MODEL_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _WORKFLOW_MODEL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [WORKFLOW_MODEL_ID], [WORKFLOW_MODEL_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_WORKFLOW_MODEL_H_ID_SEQ]) as [_WORKFLOW_MODEL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPACT_I_S_I_TR" ON PIMS_PROPERTY_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY ("PROPERTY_ACTIVITY_ID",
      "ACTIVITY_ID",
      "PROPERTY_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACTIVITY_ID",
      "ACTIVITY_ID",
      "PROPERTY_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPCLT_I_S_I_TR" ON PIMS_PROPERTY_CLASSIFICATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_CLASSIFICATION_TYPE ("PROPERTY_CLASSIFICATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ACRQST_I_S_U_TR" ON PIMS_ACCESS_REQUEST INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACCESS_REQUEST_ID = deleted.ACCESS_REQUEST_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACCESS_REQUEST
    set "ACCESS_REQUEST_ID" = inserted."ACCESS_REQUEST_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "ACCESS_REQUEST_STATUS_TYPE_CODE" = inserted."ACCESS_REQUEST_STATUS_TYPE_CODE",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST
    inner join inserted
    on (PIMS_ACCESS_REQUEST.ACCESS_REQUEST_ID = inserted.ACCESS_REQUEST_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPEVL_I_S_I_TR" ON PIMS_PROPERTY_EVALUATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_EVALUATION ("PROPERTY_EVALUATION_ID",
      "PROPERTY_ID",
      "EVALUATION_DATE",
      "KEY",
      "VALUE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_EVALUATION_ID",
      "PROPERTY_ID",
      "EVALUATION_DATE",
      "KEY",
      "VALUE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ACRQOR_I_S_U_TR" ON PIMS_ACCESS_REQUEST_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACCESS_REQUEST_ORGANIZATION_ID = deleted.ACCESS_REQUEST_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACCESS_REQUEST_ORGANIZATION
    set "ACCESS_REQUEST_ORGANIZATION_ID" = inserted."ACCESS_REQUEST_ORGANIZATION_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "ACCESS_REQUEST_ID" = inserted."ACCESS_REQUEST_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST_ORGANIZATION
    inner join inserted
    on (PIMS_ACCESS_REQUEST_ORGANIZATION.ACCESS_REQUEST_ORGANIZATION_ID = inserted.ACCESS_REQUEST_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PIMPRV_I_S_I_TR" ON PIMS_PROPERTY_IMPROVEMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_IMPROVEMENT ("PROPERTY_IMPROVEMENT_ID",
      "LEASE_ID",
      "PROPERTY_IMPROVEMENT_TYPE_CODE",
      "IMPROVEMENT_DESCRIPTION",
      "STRUCTURE_SIZE",
      "ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_IMPROVEMENT_ID",
      "LEASE_ID",
      "PROPERTY_IMPROVEMENT_TYPE_CODE",
      "IMPROVEMENT_DESCRIPTION",
      "STRUCTURE_SIZE",
      "ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ARQSTT_I_S_U_TR" ON PIMS_ACCESS_REQUEST_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACCESS_REQUEST_STATUS_TYPE_CODE = deleted.ACCESS_REQUEST_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACCESS_REQUEST_STATUS_TYPE
    set "ACCESS_REQUEST_STATUS_TYPE_CODE" = inserted."ACCESS_REQUEST_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST_STATUS_TYPE
    inner join inserted
    on (PIMS_ACCESS_REQUEST_STATUS_TYPE.ACCESS_REQUEST_STATUS_TYPE_CODE = inserted.ACCESS_REQUEST_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PIMPRT_I_S_I_TR" ON PIMS_PROPERTY_IMPROVEMENT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_IMPROVEMENT_TYPE ("PROPERTY_IMPROVEMENT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_IMPROVEMENT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ACTVTY_I_S_U_TR" ON PIMS_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_ID = deleted.ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY
    set "ACTIVITY_ID" = inserted."ACTIVITY_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "WORKFLOW_ID" = inserted."WORKFLOW_ID",
      "ACTIVITY_MODEL_ID" = inserted."ACTIVITY_MODEL_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY
    inner join inserted
    on (PIMS_ACTIVITY.ACTIVITY_ID = inserted.ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PROPLS_I_S_I_TR" ON PIMS_PROPERTY_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_LEASE ("PROPERTY_LEASE_ID",
      "PROPERTY_ID",
      "LEASE_ID",
      "AREA_UNIT_TYPE_CODE",
      "LEASE_AREA",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_LEASE_ID",
      "PROPERTY_ID",
      "LEASE_ID",
      "AREA_UNIT_TYPE_CODE",
      "LEASE_AREA",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ACTMDL_I_S_U_TR" ON PIMS_ACTIVITY_MODEL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_MODEL_ID = deleted.ACTIVITY_MODEL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_MODEL
    set "ACTIVITY_MODEL_ID" = inserted."ACTIVITY_MODEL_ID",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_MODEL
    inner join inserted
    on (PIMS_ACTIVITY_MODEL.ACTIVITY_MODEL_ID = inserted.ACTIVITY_MODEL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPORG_I_S_I_TR" ON PIMS_PROPERTY_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ORGANIZATION ("PROPERTY_ORGANIZATION_ID",
      "PROPERTY_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "IS_DISABLED")
    select "PROPERTY_ORGANIZATION_ID",
      "PROPERTY_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "IS_DISABLED"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ADDRSS_I_S_U_TR" ON PIMS_ADDRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ADDRESS_ID = deleted.ADDRESS_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ADDRESS
    set "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROVINCE_STATE_ID" = inserted."PROVINCE_STATE_ID",
      "COUNTRY_ID" = inserted."COUNTRY_ID",
      "STREET_ADDRESS_1" = inserted."STREET_ADDRESS_1",
      "STREET_ADDRESS_2" = inserted."STREET_ADDRESS_2",
      "STREET_ADDRESS_3" = inserted."STREET_ADDRESS_3",
      "MUNICIPALITY_NAME" = inserted."MUNICIPALITY_NAME",
      "POSTAL_CODE" = inserted."POSTAL_CODE",
      "OTHER_COUNTRY" = inserted."OTHER_COUNTRY",
      "LATITUDE" = inserted."LATITUDE",
      "LONGITUDE" = inserted."LONGITUDE",
      "COMMENT" = inserted."COMMENT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ADDRESS
    inner join inserted
    on (PIMS_ADDRESS.ADDRESS_ID = inserted.ADDRESS_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPRSF_I_S_I_TR" ON PIMS_PROPERTY_PROPERTY_SERVICE_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_PROPERTY_SERVICE_FILE ("PROPERTY_PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_SERVICE_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_SERVICE_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ADUSGT_I_S_U_TR" ON PIMS_ADDRESS_USAGE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ADDRESS_USAGE_TYPE_CODE = deleted.ADDRESS_USAGE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ADDRESS_USAGE_TYPE
    set "ADDRESS_USAGE_TYPE_CODE" = inserted."ADDRESS_USAGE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ADDRESS_USAGE_TYPE
    inner join inserted
    on (PIMS_ADDRESS_USAGE_TYPE.ADDRESS_USAGE_TYPE_CODE = inserted.ADDRESS_USAGE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPSVC_I_S_I_TR" ON PIMS_PROPERTY_SERVICE_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_SERVICE_FILE ("PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_SERVICE_FILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_SERVICE_FILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ARUNIT_I_S_U_TR" ON PIMS_AREA_UNIT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.AREA_UNIT_TYPE_CODE = deleted.AREA_UNIT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_AREA_UNIT_TYPE
    set "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_AREA_UNIT_TYPE
    inner join inserted
    on (PIMS_AREA_UNIT_TYPE.AREA_UNIT_TYPE_CODE = inserted.AREA_UNIT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRSVFT_I_S_I_TR" ON PIMS_PROPERTY_SERVICE_FILE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_SERVICE_FILE_TYPE ("PROPERTY_SERVICE_FILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_SERVICE_FILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_CLMTYP_I_S_U_TR" ON PIMS_CLAIM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CLAIM_ID = deleted.CLAIM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CLAIM
    set "CLAIM_ID" = inserted."CLAIM_ID",
      "CLAIM_UID" = inserted."CLAIM_UID",
      "KEYCLOAK_ROLE_ID" = inserted."KEYCLOAK_ROLE_ID",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CLAIM
    inner join inserted
    on (PIMS_CLAIM.CLAIM_ID = inserted.CLAIM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPSTS_I_S_I_TR" ON PIMS_PROPERTY_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_STATUS_TYPE ("PROPERTY_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_CNTMTH_I_S_U_TR" ON PIMS_CONTACT_METHOD INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONTACT_METHOD_ID = deleted.CONTACT_METHOD_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONTACT_METHOD
    set "CONTACT_METHOD_ID" = inserted."CONTACT_METHOD_ID",
      "CONTACT_METHOD_TYPE_CODE" = inserted."CONTACT_METHOD_TYPE_CODE",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONTACT_METHOD_VALUE" = inserted."CONTACT_METHOD_VALUE",
      "IS_PREFERRED_METHOD" = inserted."IS_PREFERRED_METHOD",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONTACT_METHOD
    inner join inserted
    on (PIMS_CONTACT_METHOD.CONTACT_METHOD_ID = inserted.CONTACT_METHOD_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPTAX_I_S_I_TR" ON PIMS_PROPERTY_TAX INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_TAX ("PROPERTY_TAX_ID",
      "PROPERTY_ID",
      "PROPERTY_TAX_REMIT_TYPE_CODE",
      "TAX_FOLIO_NO",
      "PAYMENT_AMOUNT",
      "LAST_PAYMENT_DATE",
      "PAYMENT_NOTES",
      "BCTFA_NOTIFICATION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_TAX_ID",
      "PROPERTY_ID",
      "PROPERTY_TAX_REMIT_TYPE_CODE",
      "TAX_FOLIO_NO",
      "PAYMENT_AMOUNT",
      "LAST_PAYMENT_DATE",
      "PAYMENT_NOTES",
      "BCTFA_NOTIFICATION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_CNTMTT_I_S_U_TR" ON PIMS_CONTACT_METHOD_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONTACT_METHOD_TYPE_CODE = deleted.CONTACT_METHOD_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONTACT_METHOD_TYPE
    set "CONTACT_METHOD_TYPE_CODE" = inserted."CONTACT_METHOD_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONTACT_METHOD_TYPE
    inner join inserted
    on (PIMS_CONTACT_METHOD_TYPE.CONTACT_METHOD_TYPE_CODE = inserted.CONTACT_METHOD_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PTRMTT_I_S_I_TR" ON PIMS_PROPERTY_TAX_REMIT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_TAX_REMIT_TYPE ("PROPERTY_TAX_REMIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_TAX_REMIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_CNTRY_I_S_U_TR" ON PIMS_COUNTRY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.COUNTRY_ID = deleted.COUNTRY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COUNTRY
    set "COUNTRY_ID" = inserted."COUNTRY_ID",
      "COUNTRY_CODE" = inserted."COUNTRY_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COUNTRY
    inner join inserted
    on (PIMS_COUNTRY.COUNTRY_ID = inserted.COUNTRY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPTNR_I_S_I_TR" ON PIMS_PROPERTY_TENURE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_TENURE_TYPE ("PROPERTY_TENURE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_TENURE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PIDSRT_I_S_U_TR" ON PIMS_DATA_SOURCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DATA_SOURCE_TYPE_CODE = deleted.DATA_SOURCE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DATA_SOURCE_TYPE
    set "DATA_SOURCE_TYPE_CODE" = inserted."DATA_SOURCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DATA_SOURCE_TYPE
    inner join inserted
    on (PIMS_DATA_SOURCE_TYPE.DATA_SOURCE_TYPE_CODE = inserted.DATA_SOURCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPTYP_I_S_I_TR" ON PIMS_PROPERTY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_TYPE ("PROPERTY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_DSTRCT_I_S_U_TR" ON PIMS_DISTRICT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISTRICT_CODE = deleted.DISTRICT_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISTRICT
    set "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_NAME" = inserted."DISTRICT_NAME",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISTRICT
    inner join inserted
    on (PIMS_DISTRICT.DISTRICT_CODE = inserted.DISTRICT_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PROVNC_I_S_I_TR" ON PIMS_PROVINCE_STATE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROVINCE_STATE ("PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "PROVINCE_STATE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "PROVINCE_STATE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_INSRNC_I_S_U_TR" ON PIMS_INSURANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.INSURANCE_ID = deleted.INSURANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INSURANCE
    set "INSURANCE_ID" = inserted."INSURANCE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "INSURANCE_TYPE_CODE" = inserted."INSURANCE_TYPE_CODE",
      "OTHER_INSURANCE_TYPE" = inserted."OTHER_INSURANCE_TYPE",
      "COVERAGE_DESCRIPTION" = inserted."COVERAGE_DESCRIPTION",
      "COVERAGE_LIMIT" = inserted."COVERAGE_LIMIT",
      "IS_INSURANCE_IN_PLACE" = inserted."IS_INSURANCE_IN_PLACE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INSURANCE
    inner join inserted
    on (PIMS_INSURANCE.INSURANCE_ID = inserted.INSURANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_REGION_I_S_I_TR" ON PIMS_REGION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_REGION ("REGION_CODE",
      "REGION_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "REGION_CODE",
      "REGION_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_INSPYT_I_S_U_TR" ON PIMS_INSURANCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.INSURANCE_TYPE_CODE = deleted.INSURANCE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INSURANCE_TYPE
    set "INSURANCE_TYPE_CODE" = inserted."INSURANCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INSURANCE_TYPE
    inner join inserted
    on (PIMS_INSURANCE_TYPE.INSURANCE_TYPE_CODE = inserted.INSURANCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ROLE_I_S_I_TR" ON PIMS_ROLE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ROLE ("ROLE_ID",
      "ROLE_UID",
      "KEYCLOAK_GROUP_ID",
      "NAME",
      "DESCRIPTION",
      "IS_PUBLIC",
      "IS_DISABLED",
      "SORT_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ROLE_ID",
      "ROLE_UID",
      "KEYCLOAK_GROUP_ID",
      "NAME",
      "DESCRIPTION",
      "IS_PUBLIC",
      "IS_DISABLED",
      "SORT_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LEASE_I_S_U_TR" ON PIMS_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_ID = deleted.LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE
    set "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE" = inserted."LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE" = inserted."LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE" = inserted."LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE" = inserted."LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE" = inserted."LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE" = inserted."LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE" = inserted."LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE" = inserted."LEASE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "L_FILE_NO" = inserted."L_FILE_NO",
      "TFA_FILE_NO" = inserted."TFA_FILE_NO",
      "PS_FILE_NO" = inserted."PS_FILE_NO",
      "LEASE_DESCRIPTION" = inserted."LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC" = inserted."LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC" = inserted."LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES" = inserted."LEASE_NOTES",
      "MOTI_CONTACT" = inserted."MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE" = inserted."DOCUMENTATION_REFERENCE",
      "RETURN_NOTES" = inserted."RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE" = inserted."OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE" = inserted."OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE" = inserted."OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE" = inserted."ORIG_START_DATE",
      "ORIG_EXPIRY_DATE" = inserted."ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT" = inserted."LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE" = inserted."RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE" = inserted."INSPECTION_DATE",
      "INSPECTION_NOTES" = inserted."INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA" = inserted."IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG" = inserted."IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT" = inserted."IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED" = inserted."IS_EXPIRED",
      "HAS_PHYSICAL_FILE" = inserted."HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE" = inserted."HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE" = inserted."HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE" = inserted."HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE
    inner join inserted
    on (PIMS_LEASE.LEASE_ID = inserted.LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ROLCLM_I_S_I_TR" ON PIMS_ROLE_CLAIM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ROLE_CLAIM ("ROLE_CLAIM_ID",
      "ROLE_ID",
      "CLAIM_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ROLE_CLAIM_ID",
      "ROLE_ID",
      "CLAIM_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSCATT_I_S_U_TR" ON PIMS_LEASE_CATEGORY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CATEGORY_TYPE_CODE = deleted.LEASE_CATEGORY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CATEGORY_TYPE
    set "LEASE_CATEGORY_TYPE_CODE" = inserted."LEASE_CATEGORY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CATEGORY_TYPE
    inner join inserted
    on (PIMS_LEASE_CATEGORY_TYPE.LEASE_CATEGORY_TYPE_CODE = inserted.LEASE_CATEGORY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_SECDEP_I_S_I_TR" ON PIMS_SECURITY_DEPOSIT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT ("SECURITY_DEPOSIT_ID",
      "LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE",
      "OTHER_DEPOSIT_TYPE_DESC",
      "DESCRIPTION",
      "AMOUNT_PAID",
      "DEPOSIT_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_ID",
      "LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE",
      "OTHER_DEPOSIT_TYPE_DESC",
      "DESCRIPTION",
      "AMOUNT_PAID",
      "DEPOSIT_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LINITT_I_S_U_TR" ON PIMS_LEASE_INITIATOR_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_INITIATOR_TYPE_CODE = deleted.LEASE_INITIATOR_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_INITIATOR_TYPE
    set "LEASE_INITIATOR_TYPE_CODE" = inserted."LEASE_INITIATOR_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_INITIATOR_TYPE
    inner join inserted
    on (PIMS_LEASE_INITIATOR_TYPE.LEASE_INITIATOR_TYPE_CODE = inserted.LEASE_INITIATOR_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_SCDPHL_I_S_I_TR" ON PIMS_SECURITY_DEPOSIT_HOLDER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT_HOLDER ("SECURITY_DEPOSIT_HOLDER_ID",
      "SECURITY_DEPOSIT_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_HOLDER_ID",
      "SECURITY_DEPOSIT_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LELIST_I_S_U_TR" ON PIMS_LEASE_LICENSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_LICENSE_TYPE_CODE = deleted.LEASE_LICENSE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_LICENSE_TYPE
    set "LEASE_LICENSE_TYPE_CODE" = inserted."LEASE_LICENSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_LICENSE_TYPE
    inner join inserted
    on (PIMS_LEASE_LICENSE_TYPE.LEASE_LICENSE_TYPE_CODE = inserted.LEASE_LICENSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_SDRTRN_I_S_I_TR" ON PIMS_SECURITY_DEPOSIT_RETURN INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT_RETURN ("SECURITY_DEPOSIT_RETURN_ID",
      "LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE",
      "SECURITY_DEPOSIT_ID",
      "TERMINATION_DATE",
      "CLAIMS_AGAINST",
      "RETURN_AMOUNT",
      "RETURN_DATE",
      "PAYEE_NAME",
      "PAYEE_ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_RETURN_ID",
      "LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE",
      "SECURITY_DEPOSIT_ID",
      "TERMINATION_DATE",
      "CLAIMS_AGAINST",
      "RETURN_AMOUNT",
      "RETURN_DATE",
      "PAYEE_NAME",
      "PAYEE_ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSPRTY_I_S_U_TR" ON PIMS_LEASE_PAY_RVBL_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PAY_RVBL_TYPE_CODE = deleted.LEASE_PAY_RVBL_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PAY_RVBL_TYPE
    set "LEASE_PAY_RVBL_TYPE_CODE" = inserted."LEASE_PAY_RVBL_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAY_RVBL_TYPE
    inner join inserted
    on (PIMS_LEASE_PAY_RVBL_TYPE.LEASE_PAY_RVBL_TYPE_CODE = inserted.LEASE_PAY_RVBL_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_SCDPRH_I_S_I_TR" ON PIMS_SECURITY_DEPOSIT_RETURN_HOLDER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT_RETURN_HOLDER ("SECURITY_DEPOSIT_RETURN_HOLDER_ID",
      "SECURITY_DEPOSIT_RETURN_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_RETURN_HOLDER_ID",
      "SECURITY_DEPOSIT_RETURN_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSPYMT_I_S_U_TR" ON PIMS_LEASE_PAYMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PAYMENT_ID = deleted.LEASE_PAYMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PAYMENT
    set "LEASE_PAYMENT_ID" = inserted."LEASE_PAYMENT_ID",
      "LEASE_TERM_ID" = inserted."LEASE_TERM_ID",
      "LEASE_PAYMENT_METHOD_TYPE_CODE" = inserted."LEASE_PAYMENT_METHOD_TYPE_CODE",
      "LEASE_PAYMENT_STATUS_TYPE_CODE" = inserted."LEASE_PAYMENT_STATUS_TYPE_CODE",
      "PAYMENT_RECEIVED_DATE" = inserted."PAYMENT_RECEIVED_DATE",
      "PAYMENT_AMOUNT_PRE_TAX" = inserted."PAYMENT_AMOUNT_PRE_TAX",
      "PAYMENT_AMOUNT_PST" = inserted."PAYMENT_AMOUNT_PST",
      "PAYMENT_AMOUNT_GST" = inserted."PAYMENT_AMOUNT_GST",
      "PAYMENT_AMOUNT_TOTAL" = inserted."PAYMENT_AMOUNT_TOTAL",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAYMENT
    inner join inserted
    on (PIMS_LEASE_PAYMENT.LEASE_PAYMENT_ID = inserted.LEASE_PAYMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_SECDPT_I_S_I_TR" ON PIMS_SECURITY_DEPOSIT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT_TYPE ("SECURITY_DEPOSIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "SECURITY_DEPOSIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSPMMT_I_S_U_TR" ON PIMS_LEASE_PAYMENT_METHOD_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PAYMENT_METHOD_TYPE_CODE = deleted.LEASE_PAYMENT_METHOD_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PAYMENT_METHOD_TYPE
    set "LEASE_PAYMENT_METHOD_TYPE_CODE" = inserted."LEASE_PAYMENT_METHOD_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAYMENT_METHOD_TYPE
    inner join inserted
    on (PIMS_LEASE_PAYMENT_METHOD_TYPE.LEASE_PAYMENT_METHOD_TYPE_CODE = inserted.LEASE_PAYMENT_METHOD_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_SPDCLT_I_S_I_TR" ON PIMS_SURPLUS_DECLARATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SURPLUS_DECLARATION_TYPE ("SURPLUS_DECLARATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "SURPLUS_DECLARATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LPSTST_I_S_U_TR" ON PIMS_LEASE_PAYMENT_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PAYMENT_STATUS_TYPE_CODE = deleted.LEASE_PAYMENT_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PAYMENT_STATUS_TYPE
    set "LEASE_PAYMENT_STATUS_TYPE_CODE" = inserted."LEASE_PAYMENT_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAYMENT_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_PAYMENT_STATUS_TYPE.LEASE_PAYMENT_STATUS_TYPE_CODE = inserted.LEASE_PAYMENT_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_TASK_I_S_I_TR" ON PIMS_TASK INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TASK ("TASK_ID",
      "TASK_TEMPLATE_ID",
      "ACTIVITY_ID",
      "USER_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "TASK_ID",
      "TASK_TEMPLATE_ID",
      "ACTIVITY_ID",
      "USER_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSPMTF_I_S_U_TR" ON PIMS_LEASE_PMT_FREQ_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PMT_FREQ_TYPE_CODE = deleted.LEASE_PMT_FREQ_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PMT_FREQ_TYPE
    set "LEASE_PMT_FREQ_TYPE_CODE" = inserted."LEASE_PMT_FREQ_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PMT_FREQ_TYPE
    inner join inserted
    on (PIMS_LEASE_PMT_FREQ_TYPE.LEASE_PMT_FREQ_TYPE_CODE = inserted.LEASE_PMT_FREQ_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_TSKTMP_I_S_I_TR" ON PIMS_TASK_TEMPLATE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TASK_TEMPLATE ("TASK_TEMPLATE_ID",
      "TASK_TEMPLATE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "TASK_TEMPLATE_ID",
      "TASK_TEMPLATE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSPRGT_I_S_U_TR" ON PIMS_LEASE_PROGRAM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PROGRAM_TYPE_CODE = deleted.LEASE_PROGRAM_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PROGRAM_TYPE
    set "LEASE_PROGRAM_TYPE_CODE" = inserted."LEASE_PROGRAM_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PROGRAM_TYPE
    inner join inserted
    on (PIMS_LEASE_PROGRAM_TYPE.LEASE_PROGRAM_TYPE_CODE = inserted.LEASE_PROGRAM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_TSKTAM_I_S_I_TR" ON PIMS_TASK_TEMPLATE_ACTIVITY_MODEL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TASK_TEMPLATE_ACTIVITY_MODEL ("TASK_TEMPLATE_ACTIVITY_MODEL_ID",
      "TASK_TEMPLATE_ID",
      "ACTIVITY_MODEL_ID",
      "IS_MANDATORY",
      "IMPLEMENTATION_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "TASK_TEMPLATE_ACTIVITY_MODEL_ID",
      "TASK_TEMPLATE_ID",
      "ACTIVITY_MODEL_ID",
      "IS_MANDATORY",
      "IMPLEMENTATION_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LPRPTY_I_S_U_TR" ON PIMS_LEASE_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PURPOSE_TYPE_CODE = deleted.LEASE_PURPOSE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PURPOSE_TYPE
    set "LEASE_PURPOSE_TYPE_CODE" = inserted."LEASE_PURPOSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PURPOSE_TYPE
    inner join inserted
    on (PIMS_LEASE_PURPOSE_TYPE.LEASE_PURPOSE_TYPE_CODE = inserted.LEASE_PURPOSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_TSKTMT_I_S_I_TR" ON PIMS_TASK_TEMPLATE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TASK_TEMPLATE_TYPE ("TASK_TEMPLATE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TASK_TEMPLATE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LRESPT_I_S_U_TR" ON PIMS_LEASE_RESPONSIBILITY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_RESPONSIBILITY_TYPE_CODE = deleted.LEASE_RESPONSIBILITY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_RESPONSIBILITY_TYPE
    set "LEASE_RESPONSIBILITY_TYPE_CODE" = inserted."LEASE_RESPONSIBILITY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_RESPONSIBILITY_TYPE
    inner join inserted
    on (PIMS_LEASE_RESPONSIBILITY_TYPE.LEASE_RESPONSIBILITY_TYPE_CODE = inserted.LEASE_RESPONSIBILITY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_TENNTX_I_S_I_TR" ON PIMS_TENANT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TENANT ("TENANT_ID",
      "CODE",
      "NAME",
      "DESCRIPTION",
      "SETTINGS",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TENANT_ID",
      "CODE",
      "NAME",
      "DESCRIPTION",
      "SETTINGS",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSSTYP_I_S_U_TR" ON PIMS_LEASE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_STATUS_TYPE_CODE = deleted.LEASE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_STATUS_TYPE
    set "LEASE_STATUS_TYPE_CODE" = inserted."LEASE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_STATUS_TYPE.LEASE_STATUS_TYPE_CODE = inserted.LEASE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_USER_I_S_I_TR" ON PIMS_USER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_USER ("USER_ID",
      "PERSON_ID",
      "BUSINESS_IDENTIFIER_VALUE",
      "GUID_IDENTIFIER_VALUE",
      "POSITION",
      "NOTE",
      "LAST_LOGIN",
      "APPROVED_BY_ID",
      "ISSUE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "USER_ID",
      "PERSON_ID",
      "BUSINESS_IDENTIFIER_VALUE",
      "GUID_IDENTIFIER_VALUE",
      "POSITION",
      "NOTE",
      "LAST_LOGIN",
      "APPROVED_BY_ID",
      "ISSUE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_TENANT_I_S_U_TR" ON PIMS_LEASE_TENANT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_TENANT_ID = deleted.LEASE_TENANT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_TENANT
    set "LEASE_TENANT_ID" = inserted."LEASE_TENANT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "LESSOR_TYPE_CODE" = inserted."LESSOR_TYPE_CODE",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_TENANT
    inner join inserted
    on (PIMS_LEASE_TENANT.LEASE_TENANT_ID = inserted.LEASE_TENANT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_USRORG_I_S_I_TR" ON PIMS_USER_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_USER_ORGANIZATION ("USER_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "USER_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSTERM_I_S_U_TR" ON PIMS_LEASE_TERM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_TERM_ID = deleted.LEASE_TERM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_TERM
    set "LEASE_TERM_ID" = inserted."LEASE_TERM_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_TERM_STATUS_TYPE_CODE" = inserted."LEASE_TERM_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE" = inserted."LEASE_PMT_FREQ_TYPE_CODE",
      "TERM_START_DATE" = inserted."TERM_START_DATE",
      "TERM_EXPIRY_DATE" = inserted."TERM_EXPIRY_DATE",
      "TERM_RENEWAL_DATE" = inserted."TERM_RENEWAL_DATE",
      "PAYMENT AMOUNT" = inserted."PAYMENT AMOUNT",
      "PAYMENT_DUE_DATE" = inserted."PAYMENT_DUE_DATE",
      "PAYMENT_NOTE" = inserted."PAYMENT_NOTE",
      "IS_GST_ELIGIBLE" = inserted."IS_GST_ELIGIBLE",
      "GST_AMOUNT" = inserted."GST_AMOUNT",
      "IS_TERM_EXERCISED" = inserted."IS_TERM_EXERCISED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_TERM
    inner join inserted
    on (PIMS_LEASE_TERM.LEASE_TERM_ID = inserted.LEASE_TERM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_USERRL_I_S_I_TR" ON PIMS_USER_ROLE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_USER_ROLE ("USER_ROLE_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "USER_ROLE_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LTRMST_I_S_U_TR" ON PIMS_LEASE_TERM_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_TERM_STATUS_TYPE_CODE = deleted.LEASE_TERM_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_TERM_STATUS_TYPE
    set "LEASE_TERM_STATUS_TYPE_CODE" = inserted."LEASE_TERM_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_TERM_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_TERM_STATUS_TYPE.LEASE_TERM_STATUS_TYPE_CODE = inserted.LEASE_TERM_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_WFLMDL_I_S_I_TR" ON PIMS_WORKFLOW_MODEL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_WORKFLOW_MODEL ("WORKFLOW_MODEL_ID",
      "WORKFLOW_MODEL_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "WORKFLOW_MODEL_ID",
      "WORKFLOW_MODEL_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSSRTY_I_S_U_TR" ON PIMS_LESSOR_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LESSOR_TYPE_CODE = deleted.LESSOR_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LESSOR_TYPE
    set "LESSOR_TYPE_CODE" = inserted."LESSOR_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LESSOR_TYPE
    inner join inserted
    on (PIMS_LESSOR_TYPE.LESSOR_TYPE_CODE = inserted.LESSOR_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_WFLMDT_I_S_I_TR" ON PIMS_WORKFLOW_MODEL_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_WORKFLOW_MODEL_TYPE ("WORKFLOW_MODEL_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "WORKFLOW_MODEL_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ORGIDT_I_S_U_TR" ON PIMS_ORG_IDENTIFIER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORG_IDENTIFIER_TYPE_CODE = deleted.ORG_IDENTIFIER_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORG_IDENTIFIER_TYPE
    set "ORG_IDENTIFIER_TYPE_CODE" = inserted."ORG_IDENTIFIER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORG_IDENTIFIER_TYPE
    inner join inserted
    on (PIMS_ORG_IDENTIFIER_TYPE.ORG_IDENTIFIER_TYPE_CODE = inserted.ORG_IDENTIFIER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ORG_I_S_U_TR" ON PIMS_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORGANIZATION_ID = deleted.ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORGANIZATION
    set "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID" = inserted."PRNT_ORGANIZATION_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE" = inserted."ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE" = inserted."ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER" = inserted."ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME" = inserted."ORGANIZATION_NAME",
      "ORGANIZATION_ALIAS" = inserted."ORGANIZATION_ALIAS",
      "INCORPORATION_NUMBER" = inserted."INCORPORATION_NUMBER",
      "WEBSITE" = inserted."WEBSITE",
      "COMMENT" = inserted."COMMENT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION
    inner join inserted
    on (PIMS_ORGANIZATION.ORGANIZATION_ID = inserted.ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ORGADD_I_S_U_TR" ON PIMS_ORGANIZATION_ADDRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORGANIZATION_ADDRESS_ID = deleted.ORGANIZATION_ADDRESS_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORGANIZATION_ADDRESS
    set "ORGANIZATION_ADDRESS_ID" = inserted."ORGANIZATION_ADDRESS_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE" = inserted."ADDRESS_USAGE_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION_ADDRESS
    inner join inserted
    on (PIMS_ORGANIZATION_ADDRESS.ORGANIZATION_ADDRESS_ID = inserted.ORGANIZATION_ADDRESS_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ORGTYP_I_S_U_TR" ON PIMS_ORGANIZATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORGANIZATION_TYPE_CODE = deleted.ORGANIZATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORGANIZATION_TYPE
    set "ORGANIZATION_TYPE_CODE" = inserted."ORGANIZATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION_TYPE
    inner join inserted
    on (PIMS_ORGANIZATION_TYPE.ORGANIZATION_TYPE_CODE = inserted.ORGANIZATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PERSON_I_S_U_TR" ON PIMS_PERSON INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PERSON_ID = deleted.PERSON_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PERSON
    set "PERSON_ID" = inserted."PERSON_ID",
      "SURNAME" = inserted."SURNAME",
      "FIRST_NAME" = inserted."FIRST_NAME",
      "MIDDLE_NAMES" = inserted."MIDDLE_NAMES",
      "NAME_SUFFIX" = inserted."NAME_SUFFIX",
      "PREFERRED_NAME" = inserted."PREFERRED_NAME",
      "BIRTH_DATE" = inserted."BIRTH_DATE",
      "COMMENT" = inserted."COMMENT",
      "ADDRESS_COMMENT" = inserted."ADDRESS_COMMENT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PERSON
    inner join inserted
    on (PIMS_PERSON.PERSON_ID = inserted.PERSON_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PERADD_I_S_U_TR" ON PIMS_PERSON_ADDRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PERSON_ADDRESS_ID = deleted.PERSON_ADDRESS_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PERSON_ADDRESS
    set "PERSON_ADDRESS_ID" = inserted."PERSON_ADDRESS_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE" = inserted."ADDRESS_USAGE_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PERSON_ADDRESS
    inner join inserted
    on (PIMS_PERSON_ADDRESS.PERSON_ADDRESS_ID = inserted.PERSON_ADDRESS_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PERORG_I_S_U_TR" ON PIMS_PERSON_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PERSON_ORGANIZATION_ID = deleted.PERSON_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PERSON_ORGANIZATION
    set "PERSON_ORGANIZATION_ID" = inserted."PERSON_ORGANIZATION_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PERSON_ORGANIZATION
    inner join inserted
    on (PIMS_PERSON_ORGANIZATION.PERSON_ORGANIZATION_ID = inserted.PERSON_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PROJCT_I_S_U_TR" ON PIMS_PROJECT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_ID = deleted.PROJECT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT
    set "PROJECT_ID" = inserted."PROJECT_ID",
      "PROJECT_TYPE_CODE" = inserted."PROJECT_TYPE_CODE",
      "PROJECT_STATUS_TYPE_CODE" = inserted."PROJECT_STATUS_TYPE_CODE",
      "PROJECT_RISK_TYPE_CODE" = inserted."PROJECT_RISK_TYPE_CODE",
      "PROJECT_TIER_TYPE_CODE" = inserted."PROJECT_TIER_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT
    inner join inserted
    on (PIMS_PROJECT.PROJECT_ID = inserted.PROJECT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PROJNT_I_S_U_TR" ON PIMS_PROJECT_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_NOTE_ID = deleted.PROJECT_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_NOTE
    set "PROJECT_NOTE_ID" = inserted."PROJECT_NOTE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_NOTE
    inner join inserted
    on (PIMS_PROJECT_NOTE.PROJECT_NOTE_ID = inserted.PROJECT_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRJPRP_I_S_U_TR" ON PIMS_PROJECT_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_PROPERTY_ID = deleted.PROJECT_PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_PROPERTY
    set "PROJECT_PROPERTY_ID" = inserted."PROJECT_PROPERTY_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_PROPERTY
    inner join inserted
    on (PIMS_PROJECT_PROPERTY.PROJECT_PROPERTY_ID = inserted.PROJECT_PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRJRSK_I_S_U_TR" ON PIMS_PROJECT_RISK_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_RISK_TYPE_CODE = deleted.PROJECT_RISK_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_RISK_TYPE
    set "PROJECT_RISK_TYPE_CODE" = inserted."PROJECT_RISK_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_RISK_TYPE
    inner join inserted
    on (PIMS_PROJECT_RISK_TYPE.PROJECT_RISK_TYPE_CODE = inserted.PROJECT_RISK_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRJSTY_I_S_U_TR" ON PIMS_PROJECT_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_STATUS_TYPE_CODE = deleted.PROJECT_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_STATUS_TYPE
    set "PROJECT_STATUS_TYPE_CODE" = inserted."PROJECT_STATUS_TYPE_CODE",
      "CODE_GROUP" = inserted."CODE_GROUP",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "TEXT" = inserted."TEXT",
      "IS_MILESTONE" = inserted."IS_MILESTONE",
      "IS_TERMINAL" = inserted."IS_TERMINAL",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_STATUS_TYPE
    inner join inserted
    on (PIMS_PROJECT_STATUS_TYPE.PROJECT_STATUS_TYPE_CODE = inserted.PROJECT_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PROJTR_I_S_U_TR" ON PIMS_PROJECT_TIER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_TIER_TYPE_CODE = deleted.PROJECT_TIER_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_TIER_TYPE
    set "PROJECT_TIER_TYPE_CODE" = inserted."PROJECT_TIER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_TIER_TYPE
    inner join inserted
    on (PIMS_PROJECT_TIER_TYPE.PROJECT_TIER_TYPE_CODE = inserted.PROJECT_TIER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRJTYP_I_S_U_TR" ON PIMS_PROJECT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_TYPE_CODE = deleted.PROJECT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_TYPE
    set "PROJECT_TYPE_CODE" = inserted."PROJECT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_TYPE
    inner join inserted
    on (PIMS_PROJECT_TYPE.PROJECT_TYPE_CODE = inserted.PROJECT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRWKMD_I_S_U_TR" ON PIMS_PROJECT_WORKFLOW_MODEL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_WORKFLOW_MODEL_ID = deleted.PROJECT_WORKFLOW_MODEL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_WORKFLOW_MODEL
    set "PROJECT_WORKFLOW_MODEL_ID" = inserted."PROJECT_WORKFLOW_MODEL_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "WORKFLOW_MODEL_ID" = inserted."WORKFLOW_MODEL_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_WORKFLOW_MODEL
    inner join inserted
    on (PIMS_PROJECT_WORKFLOW_MODEL.PROJECT_WORKFLOW_MODEL_ID = inserted.PROJECT_WORKFLOW_MODEL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPRTY_I_S_U_TR" ON PIMS_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ID = deleted.PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY
    set "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_MANAGER_ID" = inserted."PROPERTY_MANAGER_ID",
      "PROP_MGMT_ORG_ID" = inserted."PROP_MGMT_ORG_ID",
      "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE" = inserted."PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROPERTY_TENURE_TYPE_CODE" = inserted."PROPERTY_TENURE_TYPE_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE" = inserted."PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE" = inserted."SURPLUS_DECLARATION_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE" = inserted."PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE" = inserted."PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "PID" = inserted."PID",
      "PIN" = inserted."PIN",
      "LAND_AREA" = inserted."LAND_AREA",
      "LAND_LEGAL_DESCRIPTION" = inserted."LAND_LEGAL_DESCRIPTION",
      "BOUNDARY" = inserted."BOUNDARY",
      "LOCATION" = inserted."LOCATION",
      "ENCUMBRANCE_REASON" = inserted."ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT" = inserted."SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE" = inserted."SURPLUS_DECLARATION_DATE",
      "IS_OWNED" = inserted."IS_OWNED",
      "IS_PROPERTY_OF_INTEREST" = inserted."IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES" = inserted."IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE" = inserted."IS_SENSITIVE",
      "ZONING" = inserted."ZONING",
      "ZONING_POTENTIAL" = inserted."ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY
    inner join inserted
    on (PIMS_PROPERTY.PROPERTY_ID = inserted.PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPACT_I_S_U_TR" ON PIMS_PROPERTY_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACTIVITY_ID = deleted.PROPERTY_ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY
    set "PROPERTY_ACTIVITY_ID" = inserted."PROPERTY_ACTIVITY_ID",
      "ACTIVITY_ID" = inserted."ACTIVITY_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY.PROPERTY_ACTIVITY_ID = inserted.PROPERTY_ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPCLT_I_S_U_TR" ON PIMS_PROPERTY_CLASSIFICATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_CLASSIFICATION_TYPE_CODE = deleted.PROPERTY_CLASSIFICATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_CLASSIFICATION_TYPE
    set "PROPERTY_CLASSIFICATION_TYPE_CODE" = inserted."PROPERTY_CLASSIFICATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_CLASSIFICATION_TYPE
    inner join inserted
    on (PIMS_PROPERTY_CLASSIFICATION_TYPE.PROPERTY_CLASSIFICATION_TYPE_CODE = inserted.PROPERTY_CLASSIFICATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPEVL_I_S_U_TR" ON PIMS_PROPERTY_EVALUATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_EVALUATION_ID = deleted.PROPERTY_EVALUATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_EVALUATION
    set "PROPERTY_EVALUATION_ID" = inserted."PROPERTY_EVALUATION_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "EVALUATION_DATE" = inserted."EVALUATION_DATE",
      "KEY" = inserted."KEY",
      "VALUE" = inserted."VALUE",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_EVALUATION
    inner join inserted
    on (PIMS_PROPERTY_EVALUATION.PROPERTY_EVALUATION_ID = inserted.PROPERTY_EVALUATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PIMPRV_I_S_U_TR" ON PIMS_PROPERTY_IMPROVEMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_IMPROVEMENT_ID = deleted.PROPERTY_IMPROVEMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_IMPROVEMENT
    set "PROPERTY_IMPROVEMENT_ID" = inserted."PROPERTY_IMPROVEMENT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "PROPERTY_IMPROVEMENT_TYPE_CODE" = inserted."PROPERTY_IMPROVEMENT_TYPE_CODE",
      "IMPROVEMENT_DESCRIPTION" = inserted."IMPROVEMENT_DESCRIPTION",
      "STRUCTURE_SIZE" = inserted."STRUCTURE_SIZE",
      "ADDRESS" = inserted."ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_IMPROVEMENT
    inner join inserted
    on (PIMS_PROPERTY_IMPROVEMENT.PROPERTY_IMPROVEMENT_ID = inserted.PROPERTY_IMPROVEMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PIMPRT_I_S_U_TR" ON PIMS_PROPERTY_IMPROVEMENT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_IMPROVEMENT_TYPE_CODE = deleted.PROPERTY_IMPROVEMENT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_IMPROVEMENT_TYPE
    set "PROPERTY_IMPROVEMENT_TYPE_CODE" = inserted."PROPERTY_IMPROVEMENT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_IMPROVEMENT_TYPE
    inner join inserted
    on (PIMS_PROPERTY_IMPROVEMENT_TYPE.PROPERTY_IMPROVEMENT_TYPE_CODE = inserted.PROPERTY_IMPROVEMENT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PROPLS_I_S_U_TR" ON PIMS_PROPERTY_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_LEASE_ID = deleted.PROPERTY_LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_LEASE
    set "PROPERTY_LEASE_ID" = inserted."PROPERTY_LEASE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "LEASE_AREA" = inserted."LEASE_AREA",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_LEASE
    inner join inserted
    on (PIMS_PROPERTY_LEASE.PROPERTY_LEASE_ID = inserted.PROPERTY_LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPORG_I_S_U_TR" ON PIMS_PROPERTY_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ORGANIZATION_ID = deleted.PROPERTY_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ORGANIZATION
    set "PROPERTY_ORGANIZATION_ID" = inserted."PROPERTY_ORGANIZATION_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "IS_DISABLED" = inserted."IS_DISABLED"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ORGANIZATION
    inner join inserted
    on (PIMS_PROPERTY_ORGANIZATION.PROPERTY_ORGANIZATION_ID = inserted.PROPERTY_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPRSF_I_S_U_TR" ON PIMS_PROPERTY_PROPERTY_SERVICE_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_PROPERTY_SERVICE_FILE_ID = deleted.PROPERTY_PROPERTY_SERVICE_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_PROPERTY_SERVICE_FILE
    set "PROPERTY_PROPERTY_SERVICE_FILE_ID" = inserted."PROPERTY_PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_SERVICE_FILE_ID" = inserted."PROPERTY_SERVICE_FILE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_PROPERTY_SERVICE_FILE
    inner join inserted
    on (PIMS_PROPERTY_PROPERTY_SERVICE_FILE.PROPERTY_PROPERTY_SERVICE_FILE_ID = inserted.PROPERTY_PROPERTY_SERVICE_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPSVC_I_S_U_TR" ON PIMS_PROPERTY_SERVICE_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_SERVICE_FILE_ID = deleted.PROPERTY_SERVICE_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_SERVICE_FILE
    set "PROPERTY_SERVICE_FILE_ID" = inserted."PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_SERVICE_FILE_TYPE_CODE" = inserted."PROPERTY_SERVICE_FILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_SERVICE_FILE
    inner join inserted
    on (PIMS_PROPERTY_SERVICE_FILE.PROPERTY_SERVICE_FILE_ID = inserted.PROPERTY_SERVICE_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRSVFT_I_S_U_TR" ON PIMS_PROPERTY_SERVICE_FILE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_SERVICE_FILE_TYPE_CODE = deleted.PROPERTY_SERVICE_FILE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_SERVICE_FILE_TYPE
    set "PROPERTY_SERVICE_FILE_TYPE_CODE" = inserted."PROPERTY_SERVICE_FILE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_SERVICE_FILE_TYPE
    inner join inserted
    on (PIMS_PROPERTY_SERVICE_FILE_TYPE.PROPERTY_SERVICE_FILE_TYPE_CODE = inserted.PROPERTY_SERVICE_FILE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPSTS_I_S_U_TR" ON PIMS_PROPERTY_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_STATUS_TYPE_CODE = deleted.PROPERTY_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_STATUS_TYPE
    set "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_STATUS_TYPE
    inner join inserted
    on (PIMS_PROPERTY_STATUS_TYPE.PROPERTY_STATUS_TYPE_CODE = inserted.PROPERTY_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPTAX_I_S_U_TR" ON PIMS_PROPERTY_TAX INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_TAX_ID = deleted.PROPERTY_TAX_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_TAX
    set "PROPERTY_TAX_ID" = inserted."PROPERTY_TAX_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_TAX_REMIT_TYPE_CODE" = inserted."PROPERTY_TAX_REMIT_TYPE_CODE",
      "TAX_FOLIO_NO" = inserted."TAX_FOLIO_NO",
      "PAYMENT_AMOUNT" = inserted."PAYMENT_AMOUNT",
      "LAST_PAYMENT_DATE" = inserted."LAST_PAYMENT_DATE",
      "PAYMENT_NOTES" = inserted."PAYMENT_NOTES",
      "BCTFA_NOTIFICATION_DATE" = inserted."BCTFA_NOTIFICATION_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_TAX
    inner join inserted
    on (PIMS_PROPERTY_TAX.PROPERTY_TAX_ID = inserted.PROPERTY_TAX_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PTRMTT_I_S_U_TR" ON PIMS_PROPERTY_TAX_REMIT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_TAX_REMIT_TYPE_CODE = deleted.PROPERTY_TAX_REMIT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_TAX_REMIT_TYPE
    set "PROPERTY_TAX_REMIT_TYPE_CODE" = inserted."PROPERTY_TAX_REMIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_TAX_REMIT_TYPE
    inner join inserted
    on (PIMS_PROPERTY_TAX_REMIT_TYPE.PROPERTY_TAX_REMIT_TYPE_CODE = inserted.PROPERTY_TAX_REMIT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPTNR_I_S_U_TR" ON PIMS_PROPERTY_TENURE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_TENURE_TYPE_CODE = deleted.PROPERTY_TENURE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_TENURE_TYPE
    set "PROPERTY_TENURE_TYPE_CODE" = inserted."PROPERTY_TENURE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_TENURE_TYPE
    inner join inserted
    on (PIMS_PROPERTY_TENURE_TYPE.PROPERTY_TENURE_TYPE_CODE = inserted.PROPERTY_TENURE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPTYP_I_S_U_TR" ON PIMS_PROPERTY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_TYPE_CODE = deleted.PROPERTY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_TYPE
    set "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_TYPE
    inner join inserted
    on (PIMS_PROPERTY_TYPE.PROPERTY_TYPE_CODE = inserted.PROPERTY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PROVNC_I_S_U_TR" ON PIMS_PROVINCE_STATE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROVINCE_STATE_ID = deleted.PROVINCE_STATE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROVINCE_STATE
    set "PROVINCE_STATE_ID" = inserted."PROVINCE_STATE_ID",
      "COUNTRY_ID" = inserted."COUNTRY_ID",
      "PROVINCE_STATE_CODE" = inserted."PROVINCE_STATE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROVINCE_STATE
    inner join inserted
    on (PIMS_PROVINCE_STATE.PROVINCE_STATE_ID = inserted.PROVINCE_STATE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_REGION_I_S_U_TR" ON PIMS_REGION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.REGION_CODE = deleted.REGION_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_REGION
    set "REGION_CODE" = inserted."REGION_CODE",
      "REGION_NAME" = inserted."REGION_NAME",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_REGION
    inner join inserted
    on (PIMS_REGION.REGION_CODE = inserted.REGION_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ROLE_I_S_U_TR" ON PIMS_ROLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ROLE_ID = deleted.ROLE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ROLE
    set "ROLE_ID" = inserted."ROLE_ID",
      "ROLE_UID" = inserted."ROLE_UID",
      "KEYCLOAK_GROUP_ID" = inserted."KEYCLOAK_GROUP_ID",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_PUBLIC" = inserted."IS_PUBLIC",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "SORT_ORDER" = inserted."SORT_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ROLE
    inner join inserted
    on (PIMS_ROLE.ROLE_ID = inserted.ROLE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ROLCLM_I_S_U_TR" ON PIMS_ROLE_CLAIM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ROLE_CLAIM_ID = deleted.ROLE_CLAIM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ROLE_CLAIM
    set "ROLE_CLAIM_ID" = inserted."ROLE_CLAIM_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "CLAIM_ID" = inserted."CLAIM_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ROLE_CLAIM
    inner join inserted
    on (PIMS_ROLE_CLAIM.ROLE_CLAIM_ID = inserted.ROLE_CLAIM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_SECDEP_I_S_U_TR" ON PIMS_SECURITY_DEPOSIT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_ID = deleted.SECURITY_DEPOSIT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT
    set "SECURITY_DEPOSIT_ID" = inserted."SECURITY_DEPOSIT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE" = inserted."SECURITY_DEPOSIT_TYPE_CODE",
      "OTHER_DEPOSIT_TYPE_DESC" = inserted."OTHER_DEPOSIT_TYPE_DESC",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "AMOUNT_PAID" = inserted."AMOUNT_PAID",
      "DEPOSIT_DATE" = inserted."DEPOSIT_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT.SECURITY_DEPOSIT_ID = inserted.SECURITY_DEPOSIT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_SCDPHL_I_S_U_TR" ON PIMS_SECURITY_DEPOSIT_HOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_HOLDER_ID = deleted.SECURITY_DEPOSIT_HOLDER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT_HOLDER
    set "SECURITY_DEPOSIT_HOLDER_ID" = inserted."SECURITY_DEPOSIT_HOLDER_ID",
      "SECURITY_DEPOSIT_ID" = inserted."SECURITY_DEPOSIT_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_HOLDER
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_HOLDER.SECURITY_DEPOSIT_HOLDER_ID = inserted.SECURITY_DEPOSIT_HOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_SDRTRN_I_S_U_TR" ON PIMS_SECURITY_DEPOSIT_RETURN INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_RETURN_ID = deleted.SECURITY_DEPOSIT_RETURN_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT_RETURN
    set "SECURITY_DEPOSIT_RETURN_ID" = inserted."SECURITY_DEPOSIT_RETURN_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE" = inserted."SECURITY_DEPOSIT_TYPE_CODE",
      "SECURITY_DEPOSIT_ID" = inserted."SECURITY_DEPOSIT_ID",
      "TERMINATION_DATE" = inserted."TERMINATION_DATE",
      "CLAIMS_AGAINST" = inserted."CLAIMS_AGAINST",
      "RETURN_AMOUNT" = inserted."RETURN_AMOUNT",
      "RETURN_DATE" = inserted."RETURN_DATE",
      "PAYEE_NAME" = inserted."PAYEE_NAME",
      "PAYEE_ADDRESS" = inserted."PAYEE_ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_RETURN
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_RETURN.SECURITY_DEPOSIT_RETURN_ID = inserted.SECURITY_DEPOSIT_RETURN_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_SCDPRH_I_S_U_TR" ON PIMS_SECURITY_DEPOSIT_RETURN_HOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_RETURN_HOLDER_ID = deleted.SECURITY_DEPOSIT_RETURN_HOLDER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT_RETURN_HOLDER
    set "SECURITY_DEPOSIT_RETURN_HOLDER_ID" = inserted."SECURITY_DEPOSIT_RETURN_HOLDER_ID",
      "SECURITY_DEPOSIT_RETURN_ID" = inserted."SECURITY_DEPOSIT_RETURN_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_RETURN_HOLDER
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_RETURN_HOLDER.SECURITY_DEPOSIT_RETURN_HOLDER_ID = inserted.SECURITY_DEPOSIT_RETURN_HOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_SECDPT_I_S_U_TR" ON PIMS_SECURITY_DEPOSIT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_TYPE_CODE = deleted.SECURITY_DEPOSIT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT_TYPE
    set "SECURITY_DEPOSIT_TYPE_CODE" = inserted."SECURITY_DEPOSIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_TYPE
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_TYPE.SECURITY_DEPOSIT_TYPE_CODE = inserted.SECURITY_DEPOSIT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_SPDCLT_I_S_U_TR" ON PIMS_SURPLUS_DECLARATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SURPLUS_DECLARATION_TYPE_CODE = deleted.SURPLUS_DECLARATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SURPLUS_DECLARATION_TYPE
    set "SURPLUS_DECLARATION_TYPE_CODE" = inserted."SURPLUS_DECLARATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SURPLUS_DECLARATION_TYPE
    inner join inserted
    on (PIMS_SURPLUS_DECLARATION_TYPE.SURPLUS_DECLARATION_TYPE_CODE = inserted.SURPLUS_DECLARATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_TASK_I_S_U_TR" ON PIMS_TASK INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TASK_ID = deleted.TASK_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TASK
    set "TASK_ID" = inserted."TASK_ID",
      "TASK_TEMPLATE_ID" = inserted."TASK_TEMPLATE_ID",
      "ACTIVITY_ID" = inserted."ACTIVITY_ID",
      "USER_ID" = inserted."USER_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TASK
    inner join inserted
    on (PIMS_TASK.TASK_ID = inserted.TASK_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_TSKTMP_I_S_U_TR" ON PIMS_TASK_TEMPLATE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TASK_TEMPLATE_ID = deleted.TASK_TEMPLATE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TASK_TEMPLATE
    set "TASK_TEMPLATE_ID" = inserted."TASK_TEMPLATE_ID",
      "TASK_TEMPLATE_TYPE_CODE" = inserted."TASK_TEMPLATE_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TASK_TEMPLATE
    inner join inserted
    on (PIMS_TASK_TEMPLATE.TASK_TEMPLATE_ID = inserted.TASK_TEMPLATE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_TSKTAM_I_S_U_TR" ON PIMS_TASK_TEMPLATE_ACTIVITY_MODEL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TASK_TEMPLATE_ACTIVITY_MODEL_ID = deleted.TASK_TEMPLATE_ACTIVITY_MODEL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TASK_TEMPLATE_ACTIVITY_MODEL
    set "TASK_TEMPLATE_ACTIVITY_MODEL_ID" = inserted."TASK_TEMPLATE_ACTIVITY_MODEL_ID",
      "TASK_TEMPLATE_ID" = inserted."TASK_TEMPLATE_ID",
      "ACTIVITY_MODEL_ID" = inserted."ACTIVITY_MODEL_ID",
      "IS_MANDATORY" = inserted."IS_MANDATORY",
      "IMPLEMENTATION_ORDER" = inserted."IMPLEMENTATION_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TASK_TEMPLATE_ACTIVITY_MODEL
    inner join inserted
    on (PIMS_TASK_TEMPLATE_ACTIVITY_MODEL.TASK_TEMPLATE_ACTIVITY_MODEL_ID = inserted.TASK_TEMPLATE_ACTIVITY_MODEL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_TSKTMT_I_S_U_TR" ON PIMS_TASK_TEMPLATE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TASK_TEMPLATE_TYPE_CODE = deleted.TASK_TEMPLATE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TASK_TEMPLATE_TYPE
    set "TASK_TEMPLATE_TYPE_CODE" = inserted."TASK_TEMPLATE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TASK_TEMPLATE_TYPE
    inner join inserted
    on (PIMS_TASK_TEMPLATE_TYPE.TASK_TEMPLATE_TYPE_CODE = inserted.TASK_TEMPLATE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_TENNTX_I_S_U_TR" ON PIMS_TENANT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TENANT_ID = deleted.TENANT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TENANT
    set "TENANT_ID" = inserted."TENANT_ID",
      "CODE" = inserted."CODE",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "SETTINGS" = inserted."SETTINGS",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TENANT
    inner join inserted
    on (PIMS_TENANT.TENANT_ID = inserted.TENANT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_USER_I_S_U_TR" ON PIMS_USER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.USER_ID = deleted.USER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_USER
    set "USER_ID" = inserted."USER_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "BUSINESS_IDENTIFIER_VALUE" = inserted."BUSINESS_IDENTIFIER_VALUE",
      "GUID_IDENTIFIER_VALUE" = inserted."GUID_IDENTIFIER_VALUE",
      "POSITION" = inserted."POSITION",
      "NOTE" = inserted."NOTE",
      "LAST_LOGIN" = inserted."LAST_LOGIN",
      "APPROVED_BY_ID" = inserted."APPROVED_BY_ID",
      "ISSUE_DATE" = inserted."ISSUE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER
    inner join inserted
    on (PIMS_USER.USER_ID = inserted.USER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_USRORG_I_S_U_TR" ON PIMS_USER_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.USER_ORGANIZATION_ID = deleted.USER_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_USER_ORGANIZATION
    set "USER_ORGANIZATION_ID" = inserted."USER_ORGANIZATION_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER_ORGANIZATION
    inner join inserted
    on (PIMS_USER_ORGANIZATION.USER_ORGANIZATION_ID = inserted.USER_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_USERRL_I_S_U_TR" ON PIMS_USER_ROLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.USER_ROLE_ID = deleted.USER_ROLE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_USER_ROLE
    set "USER_ROLE_ID" = inserted."USER_ROLE_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER_ROLE
    inner join inserted
    on (PIMS_USER_ROLE.USER_ROLE_ID = inserted.USER_ROLE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_WFLMDL_I_S_U_TR" ON PIMS_WORKFLOW_MODEL INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.WORKFLOW_MODEL_ID = deleted.WORKFLOW_MODEL_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_WORKFLOW_MODEL
    set "WORKFLOW_MODEL_ID" = inserted."WORKFLOW_MODEL_ID",
      "WORKFLOW_MODEL_TYPE_CODE" = inserted."WORKFLOW_MODEL_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_WORKFLOW_MODEL
    inner join inserted
    on (PIMS_WORKFLOW_MODEL.WORKFLOW_MODEL_ID = inserted.WORKFLOW_MODEL_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_WFLMDT_I_S_U_TR" ON PIMS_WORKFLOW_MODEL_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.WORKFLOW_MODEL_TYPE_CODE = deleted.WORKFLOW_MODEL_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_WORKFLOW_MODEL_TYPE
    set "WORKFLOW_MODEL_TYPE_CODE" = inserted."WORKFLOW_MODEL_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_WORKFLOW_MODEL_TYPE
    inner join inserted
    on (PIMS_WORKFLOW_MODEL_TYPE.WORKFLOW_MODEL_TYPE_CODE = inserted.WORKFLOW_MODEL_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ACRQST_I_S_I_TR" ON PIMS_ACCESS_REQUEST INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACCESS_REQUEST ("ACCESS_REQUEST_ID",
      "USER_ID",
      "ROLE_ID",
      "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACCESS_REQUEST_ID",
      "USER_ID",
      "ROLE_ID",
      "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ACRQOR_I_S_I_TR" ON PIMS_ACCESS_REQUEST_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACCESS_REQUEST_ORGANIZATION ("ACCESS_REQUEST_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "ACCESS_REQUEST_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACCESS_REQUEST_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "ACCESS_REQUEST_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ARQSTT_I_S_I_TR" ON PIMS_ACCESS_REQUEST_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACCESS_REQUEST_STATUS_TYPE ("ACCESS_REQUEST_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ACTVTY_I_S_I_TR" ON PIMS_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY ("ACTIVITY_ID",
      "PROJECT_ID",
      "WORKFLOW_ID",
      "ACTIVITY_MODEL_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_ID",
      "PROJECT_ID",
      "WORKFLOW_ID",
      "ACTIVITY_MODEL_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ACTMDL_I_S_I_TR" ON PIMS_ACTIVITY_MODEL INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_MODEL ("ACTIVITY_MODEL_ID",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_MODEL_ID",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ADDRSS_I_S_I_TR" ON PIMS_ADDRESS INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ADDRESS ("ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "STREET_ADDRESS_1",
      "STREET_ADDRESS_2",
      "STREET_ADDRESS_3",
      "MUNICIPALITY_NAME",
      "POSTAL_CODE",
      "OTHER_COUNTRY",
      "LATITUDE",
      "LONGITUDE",
      "COMMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "STREET_ADDRESS_1",
      "STREET_ADDRESS_2",
      "STREET_ADDRESS_3",
      "MUNICIPALITY_NAME",
      "POSTAL_CODE",
      "OTHER_COUNTRY",
      "LATITUDE",
      "LONGITUDE",
      "COMMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ACRQOR_A_S_IUD_TR" ON PIMS_ACCESS_REQUEST_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACCESS_REQUEST_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where ACCESS_REQUEST_ORGANIZATION_ID in (select ACCESS_REQUEST_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACCESS_REQUEST_ORGANIZATION_HIST ([ACCESS_REQUEST_ORGANIZATION_ID], [ORGANIZATION_ID], [ACCESS_REQUEST_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACCESS_REQUEST_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACCESS_REQUEST_ORGANIZATION_ID], [ORGANIZATION_ID], [ACCESS_REQUEST_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ]) as [_ACCESS_REQUEST_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ADUSGT_I_S_I_TR" ON PIMS_ADDRESS_USAGE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ADDRESS_USAGE_TYPE ("ADDRESS_USAGE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ADDRESS_USAGE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ACRQST_A_S_IUD_TR" ON PIMS_ACCESS_REQUEST FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACCESS_REQUEST_HIST set END_DATE_HIST = @curr_date where ACCESS_REQUEST_ID in (select ACCESS_REQUEST_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACCESS_REQUEST_HIST ([ACCESS_REQUEST_ID], [USER_ID], [ROLE_ID], [ACCESS_REQUEST_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACCESS_REQUEST_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACCESS_REQUEST_ID], [USER_ID], [ROLE_ID], [ACCESS_REQUEST_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACCESS_REQUEST_H_ID_SEQ]) as [_ACCESS_REQUEST_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ARUNIT_I_S_I_TR" ON PIMS_AREA_UNIT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_AREA_UNIT_TYPE ("AREA_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "AREA_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ACTMDL_A_S_IUD_TR" ON PIMS_ACTIVITY_MODEL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_MODEL_HIST set END_DATE_HIST = @curr_date where ACTIVITY_MODEL_ID in (select ACTIVITY_MODEL_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_MODEL_HIST ([ACTIVITY_MODEL_ID], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_MODEL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_MODEL_ID], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_MODEL_H_ID_SEQ]) as [_ACTIVITY_MODEL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_CLMTYP_I_S_I_TR" ON PIMS_CLAIM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CLAIM ("CLAIM_ID",
      "CLAIM_UID",
      "KEYCLOAK_ROLE_ID",
      "NAME",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "CLAIM_ID",
      "CLAIM_UID",
      "KEYCLOAK_ROLE_ID",
      "NAME",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ACTVTY_A_S_IUD_TR" ON PIMS_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_HIST set END_DATE_HIST = @curr_date where ACTIVITY_ID in (select ACTIVITY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_HIST ([ACTIVITY_ID], [PROJECT_ID], [WORKFLOW_ID], [ACTIVITY_MODEL_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_ID], [PROJECT_ID], [WORKFLOW_ID], [ACTIVITY_MODEL_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_H_ID_SEQ]) as [_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_CNTMTH_I_S_I_TR" ON PIMS_CONTACT_METHOD INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CONTACT_METHOD ("CONTACT_METHOD_ID",
      "CONTACT_METHOD_TYPE_CODE",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONTACT_METHOD_VALUE",
      "IS_PREFERRED_METHOD",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "CONTACT_METHOD_ID",
      "CONTACT_METHOD_TYPE_CODE",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONTACT_METHOD_VALUE",
      "IS_PREFERRED_METHOD",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ADDRSS_A_S_IUD_TR" ON PIMS_ADDRESS FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ADDRESS_HIST set END_DATE_HIST = @curr_date where ADDRESS_ID in (select ADDRESS_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ADDRESS_HIST ([ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROVINCE_STATE_ID], [COUNTRY_ID], [STREET_ADDRESS_1], [STREET_ADDRESS_2], [STREET_ADDRESS_3], [MUNICIPALITY_NAME], [POSTAL_CODE], [OTHER_COUNTRY], [LATITUDE], [LONGITUDE], [COMMENT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ADDRESS_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROVINCE_STATE_ID], [COUNTRY_ID], [STREET_ADDRESS_1], [STREET_ADDRESS_2], [STREET_ADDRESS_3], [MUNICIPALITY_NAME], [POSTAL_CODE], [OTHER_COUNTRY], [LATITUDE], [LONGITUDE], [COMMENT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ADDRESS_H_ID_SEQ]) as [_ADDRESS_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_CNTMTT_I_S_I_TR" ON PIMS_CONTACT_METHOD_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CONTACT_METHOD_TYPE ("CONTACT_METHOD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "CONTACT_METHOD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_CLMTYP_A_S_IUD_TR" ON PIMS_CLAIM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_CLAIM_HIST set END_DATE_HIST = @curr_date where CLAIM_ID in (select CLAIM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_CLAIM_HIST ([CLAIM_ID], [CLAIM_UID], [KEYCLOAK_ROLE_ID], [NAME], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _CLAIM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [CLAIM_ID], [CLAIM_UID], [KEYCLOAK_ROLE_ID], [NAME], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_CLAIM_H_ID_SEQ]) as [_CLAIM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_CNTRY_I_S_I_TR" ON PIMS_COUNTRY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_COUNTRY ("COUNTRY_ID",
      "COUNTRY_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "COUNTRY_ID",
      "COUNTRY_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_CNTMTH_A_S_IUD_TR" ON PIMS_CONTACT_METHOD FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_CONTACT_METHOD_HIST set END_DATE_HIST = @curr_date where CONTACT_METHOD_ID in (select CONTACT_METHOD_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_CONTACT_METHOD_HIST ([CONTACT_METHOD_ID], [CONTACT_METHOD_TYPE_CODE], [PERSON_ID], [ORGANIZATION_ID], [CONTACT_METHOD_VALUE], [IS_PREFERRED_METHOD], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _CONTACT_METHOD_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [CONTACT_METHOD_ID], [CONTACT_METHOD_TYPE_CODE], [PERSON_ID], [ORGANIZATION_ID], [CONTACT_METHOD_VALUE], [IS_PREFERRED_METHOD], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_CONTACT_METHOD_H_ID_SEQ]) as [_CONTACT_METHOD_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PIDSRT_I_S_I_TR" ON PIMS_DATA_SOURCE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DATA_SOURCE_TYPE ("DATA_SOURCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DATA_SOURCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_INSRNC_A_S_IUD_TR" ON PIMS_INSURANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_INSURANCE_HIST set END_DATE_HIST = @curr_date where INSURANCE_ID in (select INSURANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_INSURANCE_HIST ([INSURANCE_ID], [LEASE_ID], [INSURANCE_TYPE_CODE], [OTHER_INSURANCE_TYPE], [COVERAGE_DESCRIPTION], [COVERAGE_LIMIT], [IS_INSURANCE_IN_PLACE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _INSURANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [INSURANCE_ID], [LEASE_ID], [INSURANCE_TYPE_CODE], [OTHER_INSURANCE_TYPE], [COVERAGE_DESCRIPTION], [COVERAGE_LIMIT], [IS_INSURANCE_IN_PLACE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_INSURANCE_H_ID_SEQ]) as [_INSURANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_DSTRCT_I_S_I_TR" ON PIMS_DISTRICT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISTRICT ("DISTRICT_CODE",
      "REGION_CODE",
      "DISTRICT_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISTRICT_CODE",
      "REGION_CODE",
      "DISTRICT_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LEASE_A_S_IUD_TR" ON PIMS_LEASE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_HIST set END_DATE_HIST = @curr_date where LEASE_ID in (select LEASE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_HIST ([LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [L_FILE_NO], [TFA_FILE_NO], [PS_FILE_NO], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [L_FILE_NO], [TFA_FILE_NO], [PS_FILE_NO], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_H_ID_SEQ]) as [_LEASE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_INSRNC_I_S_I_TR" ON PIMS_INSURANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INSURANCE ("INSURANCE_ID",
      "LEASE_ID",
      "INSURANCE_TYPE_CODE",
      "OTHER_INSURANCE_TYPE",
      "COVERAGE_DESCRIPTION",
      "COVERAGE_LIMIT",
      "IS_INSURANCE_IN_PLACE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "INSURANCE_ID",
      "LEASE_ID",
      "INSURANCE_TYPE_CODE",
      "OTHER_INSURANCE_TYPE",
      "COVERAGE_DESCRIPTION",
      "COVERAGE_LIMIT",
      "IS_INSURANCE_IN_PLACE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSPYMT_A_S_IUD_TR" ON PIMS_LEASE_PAYMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_PAYMENT_HIST set END_DATE_HIST = @curr_date where LEASE_PAYMENT_ID in (select LEASE_PAYMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_PAYMENT_HIST ([LEASE_PAYMENT_ID], [LEASE_TERM_ID], [LEASE_PAYMENT_METHOD_TYPE_CODE], [LEASE_PAYMENT_STATUS_TYPE_CODE], [PAYMENT_RECEIVED_DATE], [PAYMENT_AMOUNT_PRE_TAX], [PAYMENT_AMOUNT_PST], [PAYMENT_AMOUNT_GST], [PAYMENT_AMOUNT_TOTAL], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_PAYMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_PAYMENT_ID], [LEASE_TERM_ID], [LEASE_PAYMENT_METHOD_TYPE_CODE], [LEASE_PAYMENT_STATUS_TYPE_CODE], [PAYMENT_RECEIVED_DATE], [PAYMENT_AMOUNT_PRE_TAX], [PAYMENT_AMOUNT_PST], [PAYMENT_AMOUNT_GST], [PAYMENT_AMOUNT_TOTAL], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_PAYMENT_H_ID_SEQ]) as [_LEASE_PAYMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_INSPYT_I_S_I_TR" ON PIMS_INSURANCE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INSURANCE_TYPE ("INSURANCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "INSURANCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSTERM_A_S_IUD_TR" ON PIMS_LEASE_TERM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_TERM_HIST set END_DATE_HIST = @curr_date where LEASE_TERM_ID in (select LEASE_TERM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_TERM_HIST ([LEASE_TERM_ID], [LEASE_ID], [LEASE_TERM_STATUS_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [TERM_START_DATE], [TERM_EXPIRY_DATE], [TERM_RENEWAL_DATE], [PAYMENT AMOUNT], [PAYMENT_DUE_DATE], [PAYMENT_NOTE], [IS_GST_ELIGIBLE], [GST_AMOUNT], [IS_TERM_EXERCISED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_TERM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_TERM_ID], [LEASE_ID], [LEASE_TERM_STATUS_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [TERM_START_DATE], [TERM_EXPIRY_DATE], [TERM_RENEWAL_DATE], [PAYMENT AMOUNT], [PAYMENT_DUE_DATE], [PAYMENT_NOTE], [IS_GST_ELIGIBLE], [GST_AMOUNT], [IS_TERM_EXERCISED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_TERM_H_ID_SEQ]) as [_LEASE_TERM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LEASE_I_S_I_TR" ON PIMS_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE ("LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ORG_A_S_IUD_TR" ON PIMS_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where ORGANIZATION_ID in (select ORGANIZATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ORGANIZATION_HIST ([ORGANIZATION_ID], [PRNT_ORGANIZATION_ID], [REGION_CODE], [DISTRICT_CODE], [ORGANIZATION_TYPE_CODE], [ORG_IDENTIFIER_TYPE_CODE], [ORGANIZATION_IDENTIFIER], [ORGANIZATION_NAME], [ORGANIZATION_ALIAS], [INCORPORATION_NUMBER], [WEBSITE], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ORGANIZATION_ID], [PRNT_ORGANIZATION_ID], [REGION_CODE], [DISTRICT_CODE], [ORGANIZATION_TYPE_CODE], [ORG_IDENTIFIER_TYPE_CODE], [ORGANIZATION_IDENTIFIER], [ORGANIZATION_NAME], [ORGANIZATION_ALIAS], [INCORPORATION_NUMBER], [WEBSITE], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ORGANIZATION_H_ID_SEQ]) as [_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSCATT_I_S_I_TR" ON PIMS_LEASE_CATEGORY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CATEGORY_TYPE ("LEASE_CATEGORY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_CATEGORY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ORGADD_A_S_IUD_TR" ON PIMS_ORGANIZATION_ADDRESS FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ORGANIZATION_ADDRESS_HIST set END_DATE_HIST = @curr_date where ORGANIZATION_ADDRESS_ID in (select ORGANIZATION_ADDRESS_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ORGANIZATION_ADDRESS_HIST ([ORGANIZATION_ADDRESS_ID], [ORGANIZATION_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ORGANIZATION_ADDRESS_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ORGANIZATION_ADDRESS_ID], [ORGANIZATION_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ORGANIZATION_ADDRESS_H_ID_SEQ]) as [_ORGANIZATION_ADDRESS_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LINITT_I_S_I_TR" ON PIMS_LEASE_INITIATOR_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_INITIATOR_TYPE ("LEASE_INITIATOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_INITIATOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PERADD_A_S_IUD_TR" ON PIMS_PERSON_ADDRESS FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PERSON_ADDRESS_HIST set END_DATE_HIST = @curr_date where PERSON_ADDRESS_ID in (select PERSON_ADDRESS_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PERSON_ADDRESS_HIST ([PERSON_ADDRESS_ID], [PERSON_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PERSON_ADDRESS_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PERSON_ADDRESS_ID], [PERSON_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PERSON_ADDRESS_H_ID_SEQ]) as [_PERSON_ADDRESS_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LELIST_I_S_I_TR" ON PIMS_LEASE_LICENSE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_LICENSE_TYPE ("LEASE_LICENSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_LICENSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PERORG_A_S_IUD_TR" ON PIMS_PERSON_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PERSON_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where PERSON_ORGANIZATION_ID in (select PERSON_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PERSON_ORGANIZATION_HIST ([PERSON_ORGANIZATION_ID], [PERSON_ID], [ORGANIZATION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PERSON_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PERSON_ORGANIZATION_ID], [PERSON_ID], [ORGANIZATION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PERSON_ORGANIZATION_H_ID_SEQ]) as [_PERSON_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSPRTY_I_S_I_TR" ON PIMS_LEASE_PAY_RVBL_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PAY_RVBL_TYPE ("LEASE_PAY_RVBL_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PAY_RVBL_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PERSON_A_S_IUD_TR" ON PIMS_PERSON FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PERSON_HIST set END_DATE_HIST = @curr_date where PERSON_ID in (select PERSON_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PERSON_HIST ([PERSON_ID], [SURNAME], [FIRST_NAME], [MIDDLE_NAMES], [NAME_SUFFIX], [PREFERRED_NAME], [BIRTH_DATE], [COMMENT], [ADDRESS_COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PERSON_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PERSON_ID], [SURNAME], [FIRST_NAME], [MIDDLE_NAMES], [NAME_SUFFIX], [PREFERRED_NAME], [BIRTH_DATE], [COMMENT], [ADDRESS_COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PERSON_H_ID_SEQ]) as [_PERSON_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSPYMT_I_S_I_TR" ON PIMS_LEASE_PAYMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PAYMENT ("LEASE_PAYMENT_ID",
      "LEASE_TERM_ID",
      "LEASE_PAYMENT_METHOD_TYPE_CODE",
      "LEASE_PAYMENT_STATUS_TYPE_CODE",
      "PAYMENT_RECEIVED_DATE",
      "PAYMENT_AMOUNT_PRE_TAX",
      "PAYMENT_AMOUNT_PST",
      "PAYMENT_AMOUNT_GST",
      "PAYMENT_AMOUNT_TOTAL",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_PAYMENT_ID",
      "LEASE_TERM_ID",
      "LEASE_PAYMENT_METHOD_TYPE_CODE",
      "LEASE_PAYMENT_STATUS_TYPE_CODE",
      "PAYMENT_RECEIVED_DATE",
      "PAYMENT_AMOUNT_PRE_TAX",
      "PAYMENT_AMOUNT_PST",
      "PAYMENT_AMOUNT_GST",
      "PAYMENT_AMOUNT_TOTAL",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PIMPRV_A_S_IUD_TR" ON PIMS_PROPERTY_IMPROVEMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_IMPROVEMENT_HIST set END_DATE_HIST = @curr_date where PROPERTY_IMPROVEMENT_ID in (select PROPERTY_IMPROVEMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_IMPROVEMENT_HIST ([PROPERTY_IMPROVEMENT_ID], [LEASE_ID], [PROPERTY_IMPROVEMENT_TYPE_CODE], [IMPROVEMENT_DESCRIPTION], [STRUCTURE_SIZE], [ADDRESS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_IMPROVEMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_IMPROVEMENT_ID], [LEASE_ID], [PROPERTY_IMPROVEMENT_TYPE_CODE], [IMPROVEMENT_DESCRIPTION], [STRUCTURE_SIZE], [ADDRESS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_IMPROVEMENT_H_ID_SEQ]) as [_PROPERTY_IMPROVEMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSPMMT_I_S_I_TR" ON PIMS_LEASE_PAYMENT_METHOD_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PAYMENT_METHOD_TYPE ("LEASE_PAYMENT_METHOD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PAYMENT_METHOD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRJPRP_A_S_IUD_TR" ON PIMS_PROJECT_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_PROPERTY_HIST set END_DATE_HIST = @curr_date where PROJECT_PROPERTY_ID in (select PROJECT_PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_PROPERTY_HIST ([PROJECT_PROPERTY_ID], [PROJECT_ID], [PROPERTY_ID], [IS_DISABLED], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_PROPERTY_ID], [PROJECT_ID], [PROPERTY_ID], [IS_DISABLED], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_PROPERTY_H_ID_SEQ]) as [_PROJECT_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LPSTST_I_S_I_TR" ON PIMS_LEASE_PAYMENT_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PAYMENT_STATUS_TYPE ("LEASE_PAYMENT_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PAYMENT_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PROJCT_A_S_IUD_TR" ON PIMS_PROJECT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_HIST set END_DATE_HIST = @curr_date where PROJECT_ID in (select PROJECT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_HIST ([PROJECT_ID], [PROJECT_TYPE_CODE], [PROJECT_STATUS_TYPE_CODE], [PROJECT_RISK_TYPE_CODE], [PROJECT_TIER_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_ID], [PROJECT_TYPE_CODE], [PROJECT_STATUS_TYPE_CODE], [PROJECT_RISK_TYPE_CODE], [PROJECT_TIER_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_H_ID_SEQ]) as [_PROJECT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSPMTF_I_S_I_TR" ON PIMS_LEASE_PMT_FREQ_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PMT_FREQ_TYPE ("LEASE_PMT_FREQ_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PMT_FREQ_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PROJNT_A_S_IUD_TR" ON PIMS_PROJECT_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_NOTE_HIST set END_DATE_HIST = @curr_date where PROJECT_NOTE_ID in (select PROJECT_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_NOTE_HIST ([PROJECT_NOTE_ID], [PROJECT_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_NOTE_ID], [PROJECT_ID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_NOTE_H_ID_SEQ]) as [_PROJECT_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSPRGT_I_S_I_TR" ON PIMS_LEASE_PROGRAM_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PROGRAM_TYPE ("LEASE_PROGRAM_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PROGRAM_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PROPLS_A_S_IUD_TR" ON PIMS_PROPERTY_LEASE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_LEASE_HIST set END_DATE_HIST = @curr_date where PROPERTY_LEASE_ID in (select PROPERTY_LEASE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_LEASE_HIST ([PROPERTY_LEASE_ID], [PROPERTY_ID], [LEASE_ID], [AREA_UNIT_TYPE_CODE], [LEASE_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_LEASE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_LEASE_ID], [PROPERTY_ID], [LEASE_ID], [AREA_UNIT_TYPE_CODE], [LEASE_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_LEASE_H_ID_SEQ]) as [_PROPERTY_LEASE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LPRPTY_I_S_I_TR" ON PIMS_LEASE_PURPOSE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PURPOSE_TYPE ("LEASE_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPACT_A_S_IUD_TR" ON PIMS_PROPERTY_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACTIVITY_ID in (select PROPERTY_ACTIVITY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_HIST ([PROPERTY_ACTIVITY_ID], [ACTIVITY_ID], [PROPERTY_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACTIVITY_ID], [ACTIVITY_ID], [PROPERTY_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LRESPT_I_S_I_TR" ON PIMS_LEASE_RESPONSIBILITY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_RESPONSIBILITY_TYPE ("LEASE_RESPONSIBILITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_RESPONSIBILITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPEVL_A_S_IUD_TR" ON PIMS_PROPERTY_EVALUATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_EVALUATION_HIST set END_DATE_HIST = @curr_date where PROPERTY_EVALUATION_ID in (select PROPERTY_EVALUATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_EVALUATION_HIST ([PROPERTY_EVALUATION_ID], [PROPERTY_ID], [EVALUATION_DATE], [KEY], [VALUE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_EVALUATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_EVALUATION_ID], [PROPERTY_ID], [EVALUATION_DATE], [KEY], [VALUE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_EVALUATION_H_ID_SEQ]) as [_PROPERTY_EVALUATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSSTYP_I_S_I_TR" ON PIMS_LEASE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_STATUS_TYPE ("LEASE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPORG_A_S_IUD_TR" ON PIMS_PROPERTY_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where PROPERTY_ORGANIZATION_ID in (select PROPERTY_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ORGANIZATION_HIST ([PROPERTY_ORGANIZATION_ID], [PROPERTY_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED], _PROPERTY_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ORGANIZATION_ID], [PROPERTY_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED], (next value for [dbo].[PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ]) as [_PROPERTY_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_TENANT_I_S_I_TR" ON PIMS_LEASE_TENANT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_TENANT ("LEASE_TENANT_ID",
      "LEASE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "LESSOR_TYPE_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_TENANT_ID",
      "LEASE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "LESSOR_TYPE_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPRSF_A_S_IUD_TR" ON PIMS_PROPERTY_PROPERTY_SERVICE_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST set END_DATE_HIST = @curr_date where PROPERTY_PROPERTY_SERVICE_FILE_ID in (select PROPERTY_PROPERTY_SERVICE_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST ([PROPERTY_PROPERTY_SERVICE_FILE_ID], [PROPERTY_ID], [PROPERTY_SERVICE_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_PROPERTY_SERVICE_FILE_ID], [PROPERTY_ID], [PROPERTY_SERVICE_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_H_ID_SEQ]) as [_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSTERM_I_S_I_TR" ON PIMS_LEASE_TERM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_TERM ("LEASE_TERM_ID",
      "LEASE_ID",
      "LEASE_TERM_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "TERM_START_DATE",
      "TERM_EXPIRY_DATE",
      "TERM_RENEWAL_DATE",
      "PAYMENT AMOUNT",
      "PAYMENT_DUE_DATE",
      "PAYMENT_NOTE",
      "IS_GST_ELIGIBLE",
      "GST_AMOUNT",
      "IS_TERM_EXERCISED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_TERM_ID",
      "LEASE_ID",
      "LEASE_TERM_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "TERM_START_DATE",
      "TERM_EXPIRY_DATE",
      "TERM_RENEWAL_DATE",
      "PAYMENT AMOUNT",
      "PAYMENT_DUE_DATE",
      "PAYMENT_NOTE",
      "IS_GST_ELIGIBLE",
      "GST_AMOUNT",
      "IS_TERM_EXERCISED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPRTY_A_S_IUD_TR" ON PIMS_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_HIST set END_DATE_HIST = @curr_date where PROPERTY_ID in (select PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_HIST ([PROPERTY_ID], [PROPERTY_MANAGER_ID], [PROP_MGMT_ORG_ID], [PROPERTY_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_TENURE_TYPE_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [NAME], [DESCRIPTION], [PID], [PIN], [LAND_AREA], [ENCUMBRANCE_REASON], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [IS_OWNED], [IS_PROPERTY_OF_INTEREST], [IS_VISIBLE_TO_OTHER_AGENCIES], [IS_SENSITIVE], [ZONING], [ZONING_POTENTIAL], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ID], [PROPERTY_MANAGER_ID], [PROP_MGMT_ORG_ID], [PROPERTY_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_TENURE_TYPE_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [NAME], [DESCRIPTION], [PID], [PIN], [LAND_AREA], [ENCUMBRANCE_REASON], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [IS_OWNED], [IS_PROPERTY_OF_INTEREST], [IS_VISIBLE_TO_OTHER_AGENCIES], [IS_SENSITIVE], [ZONING], [ZONING_POTENTIAL], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_H_ID_SEQ]) as [_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LTRMST_I_S_I_TR" ON PIMS_LEASE_TERM_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_TERM_STATUS_TYPE ("LEASE_TERM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_TERM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPSVC_A_S_IUD_TR" ON PIMS_PROPERTY_SERVICE_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_SERVICE_FILE_HIST set END_DATE_HIST = @curr_date where PROPERTY_SERVICE_FILE_ID in (select PROPERTY_SERVICE_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_SERVICE_FILE_HIST ([PROPERTY_SERVICE_FILE_ID], [PROPERTY_SERVICE_FILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_SERVICE_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_SERVICE_FILE_ID], [PROPERTY_SERVICE_FILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_SERVICE_FILE_H_ID_SEQ]) as [_PROPERTY_SERVICE_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_LSSRTY_I_S_I_TR" ON PIMS_LESSOR_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LESSOR_TYPE ("LESSOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LESSOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRPTAX_A_S_IUD_TR" ON PIMS_PROPERTY_TAX FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_TAX_HIST set END_DATE_HIST = @curr_date where PROPERTY_TAX_ID in (select PROPERTY_TAX_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_TAX_HIST ([PROPERTY_TAX_ID], [PROPERTY_ID], [PROPERTY_TAX_REMIT_TYPE_CODE], [TAX_FOLIO_NO], [PAYMENT_AMOUNT], [LAST_PAYMENT_DATE], [PAYMENT_NOTES], [BCTFA_NOTIFICATION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_TAX_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_TAX_ID], [PROPERTY_ID], [PROPERTY_TAX_REMIT_TYPE_CODE], [TAX_FOLIO_NO], [PAYMENT_AMOUNT], [LAST_PAYMENT_DATE], [PAYMENT_NOTES], [BCTFA_NOTIFICATION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_TAX_H_ID_SEQ]) as [_PROPERTY_TAX_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ORGIDT_I_S_I_TR" ON PIMS_ORG_IDENTIFIER_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ORG_IDENTIFIER_TYPE ("ORG_IDENTIFIER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ORG_IDENTIFIER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRWKMD_A_S_IUD_TR" ON PIMS_PROJECT_WORKFLOW_MODEL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_WORKFLOW_MODEL_HIST set END_DATE_HIST = @curr_date where PROJECT_WORKFLOW_MODEL_ID in (select PROJECT_WORKFLOW_MODEL_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_WORKFLOW_MODEL_HIST ([PROJECT_WORKFLOW_MODEL_ID], [PROJECT_ID], [WORKFLOW_MODEL_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_WORKFLOW_MODEL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_WORKFLOW_MODEL_ID], [PROJECT_ID], [WORKFLOW_MODEL_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_H_ID_SEQ]) as [_PROJECT_WORKFLOW_MODEL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ORG_I_S_I_TR" ON PIMS_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ORGANIZATION ("ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME",
      "ORGANIZATION_ALIAS",
      "INCORPORATION_NUMBER",
      "WEBSITE",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME",
      "ORGANIZATION_ALIAS",
      "INCORPORATION_NUMBER",
      "WEBSITE",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ROLCLM_A_S_IUD_TR" ON PIMS_ROLE_CLAIM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ROLE_CLAIM_HIST set END_DATE_HIST = @curr_date where ROLE_CLAIM_ID in (select ROLE_CLAIM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ROLE_CLAIM_HIST ([ROLE_CLAIM_ID], [ROLE_ID], [CLAIM_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ROLE_CLAIM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ROLE_CLAIM_ID], [ROLE_ID], [CLAIM_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ROLE_CLAIM_H_ID_SEQ]) as [_ROLE_CLAIM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ORGADD_I_S_I_TR" ON PIMS_ORGANIZATION_ADDRESS INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ORGANIZATION_ADDRESS ("ORGANIZATION_ADDRESS_ID",
      "ORGANIZATION_ID",
      "ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ORGANIZATION_ADDRESS_ID",
      "ORGANIZATION_ID",
      "ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ROLE_A_S_IUD_TR" ON PIMS_ROLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ROLE_HIST set END_DATE_HIST = @curr_date where ROLE_ID in (select ROLE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ROLE_HIST ([ROLE_ID], [ROLE_UID], [KEYCLOAK_GROUP_ID], [NAME], [DESCRIPTION], [IS_PUBLIC], [IS_DISABLED], [SORT_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ROLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ROLE_ID], [ROLE_UID], [KEYCLOAK_GROUP_ID], [NAME], [DESCRIPTION], [IS_PUBLIC], [IS_DISABLED], [SORT_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ROLE_H_ID_SEQ]) as [_ROLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_ORGTYP_I_S_I_TR" ON PIMS_ORGANIZATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ORGANIZATION_TYPE ("ORGANIZATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ORGANIZATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_SCDPHL_A_S_IUD_TR" ON PIMS_SECURITY_DEPOSIT_HOLDER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_HOLDER_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_HOLDER_ID in (select SECURITY_DEPOSIT_HOLDER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_HOLDER_HIST ([SECURITY_DEPOSIT_HOLDER_ID], [SECURITY_DEPOSIT_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_HOLDER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_HOLDER_ID], [SECURITY_DEPOSIT_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER_H_ID_SEQ]) as [_SECURITY_DEPOSIT_HOLDER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PERSON_I_S_I_TR" ON PIMS_PERSON INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PERSON ("PERSON_ID",
      "SURNAME",
      "FIRST_NAME",
      "MIDDLE_NAMES",
      "NAME_SUFFIX",
      "PREFERRED_NAME",
      "BIRTH_DATE",
      "COMMENT",
      "ADDRESS_COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PERSON_ID",
      "SURNAME",
      "FIRST_NAME",
      "MIDDLE_NAMES",
      "NAME_SUFFIX",
      "PREFERRED_NAME",
      "BIRTH_DATE",
      "COMMENT",
      "ADDRESS_COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_SCDPRH_A_S_IUD_TR" ON PIMS_SECURITY_DEPOSIT_RETURN_HOLDER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_RETURN_HOLDER_ID in (select SECURITY_DEPOSIT_RETURN_HOLDER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST ([SECURITY_DEPOSIT_RETURN_HOLDER_ID], [SECURITY_DEPOSIT_RETURN_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_RETURN_HOLDER_ID], [SECURITY_DEPOSIT_RETURN_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_H_ID_SEQ]) as [_SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PERADD_I_S_I_TR" ON PIMS_PERSON_ADDRESS INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PERSON_ADDRESS ("PERSON_ADDRESS_ID",
      "PERSON_ID",
      "ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PERSON_ADDRESS_ID",
      "PERSON_ID",
      "ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_SDRTRN_A_S_IUD_TR" ON PIMS_SECURITY_DEPOSIT_RETURN FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_RETURN_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_RETURN_ID in (select SECURITY_DEPOSIT_RETURN_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_RETURN_HIST ([SECURITY_DEPOSIT_RETURN_ID], [LEASE_ID], [SECURITY_DEPOSIT_TYPE_CODE], [SECURITY_DEPOSIT_ID], [TERMINATION_DATE], [CLAIMS_AGAINST], [RETURN_AMOUNT], [RETURN_DATE], [PAYEE_NAME], [PAYEE_ADDRESS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_RETURN_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_RETURN_ID], [LEASE_ID], [SECURITY_DEPOSIT_TYPE_CODE], [SECURITY_DEPOSIT_ID], [TERMINATION_DATE], [CLAIMS_AGAINST], [RETURN_AMOUNT], [RETURN_DATE], [PAYEE_NAME], [PAYEE_ADDRESS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_H_ID_SEQ]) as [_SECURITY_DEPOSIT_RETURN_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PERORG_I_S_I_TR" ON PIMS_PERSON_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PERSON_ORGANIZATION ("PERSON_ORGANIZATION_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PERSON_ORGANIZATION_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_SECDEP_A_S_IUD_TR" ON PIMS_SECURITY_DEPOSIT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_ID in (select SECURITY_DEPOSIT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_HIST ([SECURITY_DEPOSIT_ID], [LEASE_ID], [SECURITY_DEPOSIT_TYPE_CODE], [OTHER_DEPOSIT_TYPE_DESC], [DESCRIPTION], [AMOUNT_PAID], [DEPOSIT_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_ID], [LEASE_ID], [SECURITY_DEPOSIT_TYPE_CODE], [OTHER_DEPOSIT_TYPE_DESC], [DESCRIPTION], [AMOUNT_PAID], [DEPOSIT_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_H_ID_SEQ]) as [_SECURITY_DEPOSIT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PROJCT_I_S_I_TR" ON PIMS_PROJECT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT ("PROJECT_ID",
      "PROJECT_TYPE_CODE",
      "PROJECT_STATUS_TYPE_CODE",
      "PROJECT_RISK_TYPE_CODE",
      "PROJECT_TIER_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROJECT_ID",
      "PROJECT_TYPE_CODE",
      "PROJECT_STATUS_TYPE_CODE",
      "PROJECT_RISK_TYPE_CODE",
      "PROJECT_TIER_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_STAVBL_A_S_IUD_TR" ON PIMS_STATIC_VARIABLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_STATIC_VARIABLE_HIST set END_DATE_HIST = @curr_date where STATIC_VARIABLE_NAME in (select STATIC_VARIABLE_NAME from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_STATIC_VARIABLE_HIST ([STATIC_VARIABLE_NAME], [STATIC_VARIABLE_VALUE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _STATIC_VARIABLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [STATIC_VARIABLE_NAME], [STATIC_VARIABLE_VALUE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_STATIC_VARIABLE_H_ID_SEQ]) as [_STATIC_VARIABLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PROJNT_I_S_I_TR" ON PIMS_PROJECT_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_NOTE ("PROJECT_NOTE_ID",
      "PROJECT_ID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_NOTE_ID",
      "PROJECT_ID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_TASK_A_S_IUD_TR" ON PIMS_TASK FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_TASK_HIST set END_DATE_HIST = @curr_date where TASK_ID in (select TASK_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_TASK_HIST ([TASK_ID], [TASK_TEMPLATE_ID], [ACTIVITY_ID], [USER_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _TASK_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [TASK_ID], [TASK_TEMPLATE_ID], [ACTIVITY_ID], [USER_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_TASK_H_ID_SEQ]) as [_TASK_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRJPRP_I_S_I_TR" ON PIMS_PROJECT_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_PROPERTY ("PROJECT_PROPERTY_ID",
      "PROJECT_ID",
      "PROPERTY_ID",
      "IS_DISABLED",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_PROPERTY_ID",
      "PROJECT_ID",
      "PROPERTY_ID",
      "IS_DISABLED",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_TENANT_A_S_IUD_TR" ON PIMS_LEASE_TENANT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_TENANT_HIST set END_DATE_HIST = @curr_date where LEASE_TENANT_ID in (select LEASE_TENANT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_TENANT_HIST ([LEASE_TENANT_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [LESSOR_TYPE_CODE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_TENANT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_TENANT_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [LESSOR_TYPE_CODE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_TENANT_H_ID_SEQ]) as [_LEASE_TENANT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRJRSK_I_S_I_TR" ON PIMS_PROJECT_RISK_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_RISK_TYPE ("PROJECT_RISK_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_RISK_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_TSKTAM_A_S_IUD_TR" ON PIMS_TASK_TEMPLATE_ACTIVITY_MODEL FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST set END_DATE_HIST = @curr_date where TASK_TEMPLATE_ACTIVITY_MODEL_ID in (select TASK_TEMPLATE_ACTIVITY_MODEL_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST ([TASK_TEMPLATE_ACTIVITY_MODEL_ID], [TASK_TEMPLATE_ID], [ACTIVITY_MODEL_ID], [IS_MANDATORY], [IMPLEMENTATION_ORDER], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [TASK_TEMPLATE_ACTIVITY_MODEL_ID], [TASK_TEMPLATE_ID], [ACTIVITY_MODEL_ID], [IS_MANDATORY], [IMPLEMENTATION_ORDER], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_H_ID_SEQ]) as [_TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_PRJSTY_I_S_I_TR" ON PIMS_PROJECT_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_STATUS_TYPE ("PROJECT_STATUS_TYPE_CODE",
      "CODE_GROUP",
      "DESCRIPTION",
      "TEXT",
      "IS_MILESTONE",
      "IS_TERMINAL",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROJECT_STATUS_TYPE_CODE",
      "CODE_GROUP",
      "DESCRIPTION",
      "TEXT",
      "IS_MILESTONE",
      "IS_TERMINAL",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER "dbo"."PIMS_TSKTMP_A_S_IUD_TR" ON PIMS_TASK_TEMPLATE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_TASK_TEMPLATE_HIST set END_DATE_HIST = @curr_date where TASK_TEMPLATE_ID in (select TASK_TEMPLATE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_TASK_TEMPLATE_HIST ([TASK_TEMPLATE_ID], [TASK_TEMPLATE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _TASK_TEMPLATE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [TASK_TEMPLATE_ID], [TASK_TEMPLATE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_TASK_TEMPLATE_H_ID_SEQ]) as [_TASK_TEMPLATE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


ALTER TABLE "dbo"."PIMS_ACCESS_REQUEST_HIST"
	ADD CONSTRAINT "PIMS_ACRQST_H_UK"
	UNIQUE ("_ACCESS_REQUEST_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_ACCESS_REQUEST_ORGANIZATION"
	ADD CONSTRAINT "ACRQOR_ORGANIZATION_ACCESS_REQUEST_TUC"
	UNIQUE ("ORGANIZATION_ID", "ACCESS_REQUEST_ID") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_ACCESS_REQUEST_ORGANIZATION_HIST"
	ADD CONSTRAINT "PIMS_ACRQOR_H_UK"
	UNIQUE ("_ACCESS_REQUEST_ORGANIZATION_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROJECT_WORKFLOW_MODEL"
	ADD CONSTRAINT "PRWKMD_PROJECT_WORKFLOW_MODEL_TUC"
	UNIQUE ("PROJECT_ID", "WORKFLOW_MODEL_ID") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_ACTIVITY_HIST"
	ADD CONSTRAINT "PIMS_ACTVTY_H_UK"
	UNIQUE ("_ACTIVITY_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_ACTIVITY_MODEL_HIST"
	ADD CONSTRAINT "PIMS_ACTMDL_H_UK"
	UNIQUE ("_ACTIVITY_MODEL_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_ADDRESS_HIST"
	ADD CONSTRAINT "PIMS_ADDRSS_H_UK"
	UNIQUE ("_ADDRESS_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_CLAIM_HIST"
	ADD CONSTRAINT "PIMS_CLMTYP_H_UK"
	UNIQUE ("_CLAIM_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_CONTACT_METHOD_HIST"
	ADD CONSTRAINT "PIMS_CNTMTH_H_UK"
	UNIQUE ("_CONTACT_METHOD_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_INSURANCE"
	ADD CONSTRAINT "INSRNC_LEASE_INSURANCE_TYPE_TUC"
	UNIQUE ("INSURANCE_TYPE_CODE", "LEASE_ID") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_INSURANCE_HIST"
	ADD CONSTRAINT "PIMS_INSRNC_H_UK"
	UNIQUE ("_INSURANCE_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_LEASE_HIST"
	ADD CONSTRAINT "PIMS_LEASE_H_UK"
	UNIQUE ("_LEASE_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_LEASE_PAYMENT_HIST"
	ADD CONSTRAINT "PIMS_LSPYMT_H_UK"
	UNIQUE ("_LEASE_PAYMENT_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_LEASE_TENANT_HIST"
	ADD CONSTRAINT "PIMS_TENANT_H_UK"
	UNIQUE ("_LEASE_TENANT_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_LEASE_TERM_HIST"
	ADD CONSTRAINT "PIMS_LSTERM_H_UK"
	UNIQUE ("_LEASE_TERM_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_ORGANIZATION_ADDRESS"
	ADD CONSTRAINT "ORGADD_UNQ_ADDR_TYPE_TUC"
	UNIQUE ("ORGANIZATION_ID", "ADDRESS_ID", "ADDRESS_USAGE_TYPE_CODE") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_ORGANIZATION_ADDRESS_HIST"
	ADD CONSTRAINT "PIMS_ORGADD_H_UK"
	UNIQUE ("_ORGANIZATION_ADDRESS_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_ORGANIZATION_HIST"
	ADD CONSTRAINT "PIMS_ORG_H_UK"
	UNIQUE ("_ORGANIZATION_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PERSON_ADDRESS"
	ADD CONSTRAINT "PERADD_UNQ_ADDR_TYPE_TUC"
	UNIQUE ("PERSON_ID", "ADDRESS_ID", "ADDRESS_USAGE_TYPE_CODE") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PERSON_ADDRESS_HIST"
	ADD CONSTRAINT "PIMS_PERADD_H_UK"
	UNIQUE ("_PERSON_ADDRESS_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PERSON_HIST"
	ADD CONSTRAINT "PIMS_PERSON_H_UK"
	UNIQUE ("_PERSON_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PERSON_ORGANIZATION"
	ADD CONSTRAINT "PERORG_PERSON_ORGANIZATION_TUC"
	UNIQUE ("ORGANIZATION_ID", "PERSON_ID") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PERSON_ORGANIZATION_HIST"
	ADD CONSTRAINT "PIMS_PERORG_H_UK"
	UNIQUE ("_PERSON_ORGANIZATION_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROJECT_HIST"
	ADD CONSTRAINT "PIMS_PROJCT_H_UK"
	UNIQUE ("_PROJECT_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROJECT_NOTE_HIST"
	ADD CONSTRAINT "PIMS_PROJNT_H_UK"
	UNIQUE ("_PROJECT_NOTE_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROJECT_PROPERTY"
	ADD CONSTRAINT "PRJPRP_PROJECT_PROPERTY_TUC"
	UNIQUE ("PROPERTY_ID", "PROJECT_ID") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROJECT_PROPERTY_HIST"
	ADD CONSTRAINT "PIMS_PRJPRP_H_UK"
	UNIQUE ("_PROJECT_PROPERTY_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROJECT_WORKFLOW_MODEL_HIST"
	ADD CONSTRAINT "PIMS_PRWKMD_H_UK"
	UNIQUE ("_PROJECT_WORKFLOW_MODEL_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_ACTIVITY"
	ADD CONSTRAINT "PRPACT_PROPERTY_ACTIVITY_TUC"
	UNIQUE ("PROPERTY_ID", "ACTIVITY_ID") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_ACTIVITY_HIST"
	ADD CONSTRAINT "PIMS_PRPACT_H_UK"
	UNIQUE ("_PROPERTY_ACTIVITY_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_EVALUATION_HIST"
	ADD CONSTRAINT "PIMS_PRPEVL_H_UK"
	UNIQUE ("_PROPERTY_EVALUATION_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_HIST"
	ADD CONSTRAINT "PIMS_PRPRTY_H_UK"
	UNIQUE ("_PROPERTY_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_IMPROVEMENT"
	ADD CONSTRAINT "PIMPRV_LEASE_IMPROVEMENT_TUC"
	UNIQUE ("LEASE_ID", "PROPERTY_IMPROVEMENT_TYPE_CODE") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_IMPROVEMENT_HIST"
	ADD CONSTRAINT "PIMS_PIMPRV_H_UK"
	UNIQUE ("_PROPERTY_IMPROVEMENT_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_LEASE_HIST"
	ADD CONSTRAINT "PIMS_PROPLS_H_UK"
	UNIQUE ("_PROPERTY_LEASE_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_ORGANIZATION"
	ADD CONSTRAINT "PRPORG_PROPERTY_ORGANIZATION_TUC"
	UNIQUE ("PROPERTY_ID", "ORGANIZATION_ID") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_ORGANIZATION_HIST"
	ADD CONSTRAINT "PIMS_PRPORG_H_UK"
	UNIQUE ("_PROPERTY_ORGANIZATION_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_PROPERTY_SERVICE_FILE"
	ADD CONSTRAINT "PRPRSF_PROPERTY_SERVICE_FILE_TUC"
	UNIQUE ("PROPERTY_ID", "PROPERTY_SERVICE_FILE_ID") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST"
	ADD CONSTRAINT "PIMS_PRPRSF_H_UK"
	UNIQUE ("_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_SERVICE_FILE_HIST"
	ADD CONSTRAINT "PIMS_PRPSVC_H_UK"
	UNIQUE ("_PROPERTY_SERVICE_FILE_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_TAX_HIST"
	ADD CONSTRAINT "PIMS_PRPTAX_H_UK"
	UNIQUE ("_PROPERTY_TAX_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_ROLE_CLAIM"
	ADD CONSTRAINT "ROLCLM_ROLE_CLAIM_TUC"
	UNIQUE ("ROLE_ID", "CLAIM_ID") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_ROLE_CLAIM_HIST"
	ADD CONSTRAINT "PIMS_ROLCLM_H_UK"
	UNIQUE ("_ROLE_CLAIM_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_ROLE_HIST"
	ADD CONSTRAINT "PIMS_ROLE_H_UK"
	UNIQUE ("_ROLE_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_SECURITY_DEPOSIT_HIST"
	ADD CONSTRAINT "PIMS_SECDEP_H_UK"
	UNIQUE ("_SECURITY_DEPOSIT_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_SECURITY_DEPOSIT_HOLDER_HIST"
	ADD CONSTRAINT "PIMS_SCDPHL_H_UK"
	UNIQUE ("_SECURITY_DEPOSIT_HOLDER_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_SECURITY_DEPOSIT_RETURN_HIST"
	ADD CONSTRAINT "PIMS_SDRTRN_H_UK"
	UNIQUE ("_SECURITY_DEPOSIT_RETURN_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST"
	ADD CONSTRAINT "PIMS_SCDPRH_H_UK"
	UNIQUE ("_SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_STATIC_VARIABLE_HIST"
	ADD CONSTRAINT "PIMS_STAVBL_H_UK"
	UNIQUE ("_STATIC_VARIABLE_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_TASK"
	ADD CONSTRAINT "TASK_TEMPLATE_ACTIVITY_USER_TUC"
	UNIQUE ("USER_ID", "ACTIVITY_ID", "TASK_TEMPLATE_ID") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_TASK_HIST"
	ADD CONSTRAINT "PIMS_TASK_H_UK"
	UNIQUE ("_TASK_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_TASK_TEMPLATE_ACTIVITY_MODEL"
	ADD CONSTRAINT "TSKTAM_TASK_TEMPLATE_ACTIVITY_MODEL_TUC"
	UNIQUE ("TASK_TEMPLATE_ID", "ACTIVITY_MODEL_ID") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST"
	ADD CONSTRAINT "PIMS_TSKTAM_H_UK"
	UNIQUE ("_TASK_TEMPLATE_ACTIVITY_MODEL_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_TASK_TEMPLATE_HIST"
	ADD CONSTRAINT "PIMS_TSKTMP_H_UK"
	UNIQUE ("_TASK_TEMPLATE_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_USER_HIST"
	ADD CONSTRAINT "PIMS_USER_H_UK"
	UNIQUE ("_USER_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_USER_ORGANIZATION"
	ADD CONSTRAINT "USRORG_USER_ROLE_ORGANIZATION_TUC"
	UNIQUE ("ORGANIZATION_ID", "USER_ID", "ROLE_ID") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_USER_ORGANIZATION_HIST"
	ADD CONSTRAINT "PIMS_USRORG_H_UK"
	UNIQUE ("_USER_ORGANIZATION_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_USER_ROLE"
	ADD CONSTRAINT "USERRL_USER_ROLE_TUC"
	UNIQUE ("USER_ID", "ROLE_ID") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_USER_ROLE_HIST"
	ADD CONSTRAINT "PIMS_USERRL_H_UK"
	UNIQUE ("_USER_ROLE_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_WORKFLOW_MODEL_HIST"
	ADD CONSTRAINT "PIMS_WFLMDL_H_UK"
	UNIQUE ("_WORKFLOW_MODEL_HIST_ID", "END_DATE_HIST") 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE "dbo"."PIMS_USER"
	ADD CONSTRAINT "PIM_PERSON_PIM_USER_FK"
	FOREIGN KEY("PERSON_ID")
	REFERENCES "dbo"."PIMS_PERSON"("PERSON_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ACCESS_REQUEST"
	ADD CONSTRAINT "PIM_USER_PIM_ACRQST_FK"
	FOREIGN KEY("USER_ID")
	REFERENCES "dbo"."PIMS_USER"("USER_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ACCESS_REQUEST"
	ADD CONSTRAINT "PIM_ROLE_PIM_ACRQST_FK"
	FOREIGN KEY("ROLE_ID")
	REFERENCES "dbo"."PIMS_ROLE"("ROLE_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ACCESS_REQUEST"
	ADD CONSTRAINT "PIM_ARQSTT_PIM_ACRQST_FK"
	FOREIGN KEY("ACCESS_REQUEST_STATUS_TYPE_CODE")
	REFERENCES "dbo"."PIMS_ACCESS_REQUEST_STATUS_TYPE"("ACCESS_REQUEST_STATUS_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_DISTRICT"
	ADD CONSTRAINT "PIM_REGION_PIM_DSTRCT_FK"
	FOREIGN KEY("REGION_CODE")
	REFERENCES "dbo"."PIMS_REGION"("REGION_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ORGANIZATION"
	ADD CONSTRAINT "PIM_REGION_PIM_ORG_FK"
	FOREIGN KEY("REGION_CODE")
	REFERENCES "dbo"."PIMS_REGION"("REGION_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ORGANIZATION"
	ADD CONSTRAINT "PIM_ORGTYP_PIM_ORG_FK"
	FOREIGN KEY("ORGANIZATION_TYPE_CODE")
	REFERENCES "dbo"."PIMS_ORGANIZATION_TYPE"("ORGANIZATION_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ORGANIZATION"
	ADD CONSTRAINT "PIM_ORGIDT_PIM_ORG_FK"
	FOREIGN KEY("ORG_IDENTIFIER_TYPE_CODE")
	REFERENCES "dbo"."PIMS_ORG_IDENTIFIER_TYPE"("ORG_IDENTIFIER_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ORGANIZATION"
	ADD CONSTRAINT "PIM_ORG_PIM_PRNT_ORG_FK"
	FOREIGN KEY("PRNT_ORGANIZATION_ID")
	REFERENCES "dbo"."PIMS_ORGANIZATION"("ORGANIZATION_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ORGANIZATION"
	ADD CONSTRAINT "PIM_DSTRCT_PIM_ORG_FK"
	FOREIGN KEY("DISTRICT_CODE")
	REFERENCES "dbo"."PIMS_DISTRICT"("DISTRICT_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ACCESS_REQUEST_ORGANIZATION"
	ADD CONSTRAINT "PIM_ORG_PIM_ACRQOR_FK"
	FOREIGN KEY("ORGANIZATION_ID")
	REFERENCES "dbo"."PIMS_ORGANIZATION"("ORGANIZATION_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ACCESS_REQUEST_ORGANIZATION"
	ADD CONSTRAINT "PIM_ACRQST_PIM_ACRQOR_FK"
	FOREIGN KEY("ACCESS_REQUEST_ID")
	REFERENCES "dbo"."PIMS_ACCESS_REQUEST"("ACCESS_REQUEST_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROJECT"
	ADD CONSTRAINT "PIM_PROJTR_PIM_PROJCT_FK"
	FOREIGN KEY("PROJECT_TIER_TYPE_CODE")
	REFERENCES "dbo"."PIMS_PROJECT_TIER_TYPE"("PROJECT_TIER_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROJECT"
	ADD CONSTRAINT "PIM_PRJTYP_PIM_PROJCT_FK"
	FOREIGN KEY("PROJECT_TYPE_CODE")
	REFERENCES "dbo"."PIMS_PROJECT_TYPE"("PROJECT_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROJECT"
	ADD CONSTRAINT "PIM_PRJSTY_PIM_PROJCT_FK"
	FOREIGN KEY("PROJECT_STATUS_TYPE_CODE")
	REFERENCES "dbo"."PIMS_PROJECT_STATUS_TYPE"("PROJECT_STATUS_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROJECT"
	ADD CONSTRAINT "PIM_PRJRSK_PIM_PROJCT_FK"
	FOREIGN KEY("PROJECT_RISK_TYPE_CODE")
	REFERENCES "dbo"."PIMS_PROJECT_RISK_TYPE"("PROJECT_RISK_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_WORKFLOW_MODEL"
	ADD CONSTRAINT "PIM_WFLMDT_PIM_WFLMDL_FK"
	FOREIGN KEY("WORKFLOW_MODEL_TYPE_CODE")
	REFERENCES "dbo"."PIMS_WORKFLOW_MODEL_TYPE"("WORKFLOW_MODEL_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROJECT_WORKFLOW_MODEL"
	ADD CONSTRAINT "PIM_WFLMDL_PIM_PRWKMD_FK"
	FOREIGN KEY("WORKFLOW_MODEL_ID")
	REFERENCES "dbo"."PIMS_WORKFLOW_MODEL"("WORKFLOW_MODEL_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROJECT_WORKFLOW_MODEL"
	ADD CONSTRAINT "PIM_PROJCT_PIM_PRWKMD_FK"
	FOREIGN KEY("PROJECT_ID")
	REFERENCES "dbo"."PIMS_PROJECT"("PROJECT_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ACTIVITY"
	ADD CONSTRAINT "PIM_PRWKMD_PIM_ACTVTY_FK"
	FOREIGN KEY("WORKFLOW_ID")
	REFERENCES "dbo"."PIMS_PROJECT_WORKFLOW_MODEL"("PROJECT_WORKFLOW_MODEL_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ACTIVITY"
	ADD CONSTRAINT "PIM_PROJCT_PIM_ACTVTY_FK"
	FOREIGN KEY("PROJECT_ID")
	REFERENCES "dbo"."PIMS_PROJECT"("PROJECT_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ACTIVITY"
	ADD CONSTRAINT "PIM_ACTMDL_PIM_ACTVTY_FK"
	FOREIGN KEY("ACTIVITY_MODEL_ID")
	REFERENCES "dbo"."PIMS_ACTIVITY_MODEL"("ACTIVITY_MODEL_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROVINCE_STATE"
	ADD CONSTRAINT "PIM_CNTRY_PIM_PROVNC_FK"
	FOREIGN KEY("COUNTRY_ID")
	REFERENCES "dbo"."PIMS_COUNTRY"("COUNTRY_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ADDRESS"
	ADD CONSTRAINT "PIM_REGION_PIM_ADDRSS_FK"
	FOREIGN KEY("REGION_CODE")
	REFERENCES "dbo"."PIMS_REGION"("REGION_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ADDRESS"
	ADD CONSTRAINT "PIM_PROVNC_PIM_ADDRSS_FK"
	FOREIGN KEY("PROVINCE_STATE_ID")
	REFERENCES "dbo"."PIMS_PROVINCE_STATE"("PROVINCE_STATE_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ADDRESS"
	ADD CONSTRAINT "PIM_DSTRCT_PIM_ADDRSS_FK"
	FOREIGN KEY("DISTRICT_CODE")
	REFERENCES "dbo"."PIMS_DISTRICT"("DISTRICT_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ADDRESS"
	ADD CONSTRAINT "PIM_CNTRY_PIM_ADDRSS_FK"
	FOREIGN KEY("COUNTRY_ID")
	REFERENCES "dbo"."PIMS_COUNTRY"("COUNTRY_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_CONTACT_METHOD"
	ADD CONSTRAINT "PIM_PERSON_PIM_CNTMTH_FK"
	FOREIGN KEY("PERSON_ID")
	REFERENCES "dbo"."PIMS_PERSON"("PERSON_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_CONTACT_METHOD"
	ADD CONSTRAINT "PIM_ORG_PIM_CNTMTH_FK"
	FOREIGN KEY("ORGANIZATION_ID")
	REFERENCES "dbo"."PIMS_ORGANIZATION"("ORGANIZATION_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_CONTACT_METHOD"
	ADD CONSTRAINT "PIM_CNTMTT_PIM_CNTMTH_FK"
	FOREIGN KEY("CONTACT_METHOD_TYPE_CODE")
	REFERENCES "dbo"."PIMS_CONTACT_METHOD_TYPE"("CONTACT_METHOD_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE"
	ADD CONSTRAINT "PIM_REGION_PIM_LEASE_FK"
	FOREIGN KEY("REGION_CODE")
	REFERENCES "dbo"."PIMS_REGION"("REGION_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE"
	ADD CONSTRAINT "PIM_LSSTYP_PIM_LEASE_FK"
	FOREIGN KEY("LEASE_STATUS_TYPE_CODE")
	REFERENCES "dbo"."PIMS_LEASE_STATUS_TYPE"("LEASE_STATUS_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE"
	ADD CONSTRAINT "PIM_LSPRTY_PIM_LEASE_FK"
	FOREIGN KEY("LEASE_PAY_RVBL_TYPE_CODE")
	REFERENCES "dbo"."PIMS_LEASE_PAY_RVBL_TYPE"("LEASE_PAY_RVBL_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE"
	ADD CONSTRAINT "PIM_LSPRGT_PIM_LEASE_FK"
	FOREIGN KEY("LEASE_PROGRAM_TYPE_CODE")
	REFERENCES "dbo"."PIMS_LEASE_PROGRAM_TYPE"("LEASE_PROGRAM_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE"
	ADD CONSTRAINT "PIM_LSCATT_PIM_LEASE_FK"
	FOREIGN KEY("LEASE_CATEGORY_TYPE_CODE")
	REFERENCES "dbo"."PIMS_LEASE_CATEGORY_TYPE"("LEASE_CATEGORY_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE"
	ADD CONSTRAINT "PIM_LRESPT_PIM_LEASE_FK"
	FOREIGN KEY("LEASE_RESPONSIBILITY_TYPE_CODE")
	REFERENCES "dbo"."PIMS_LEASE_RESPONSIBILITY_TYPE"("LEASE_RESPONSIBILITY_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE"
	ADD CONSTRAINT "PIM_LPRPTY_PIM_LEASE_FK"
	FOREIGN KEY("LEASE_PURPOSE_TYPE_CODE")
	REFERENCES "dbo"."PIMS_LEASE_PURPOSE_TYPE"("LEASE_PURPOSE_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE"
	ADD CONSTRAINT "PIM_LINITT_PIM_LEASE_FK"
	FOREIGN KEY("LEASE_INITIATOR_TYPE_CODE")
	REFERENCES "dbo"."PIMS_LEASE_INITIATOR_TYPE"("LEASE_INITIATOR_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE"
	ADD CONSTRAINT "PIM_LELIST_PIM_LEASE_FK"
	FOREIGN KEY("LEASE_LICENSE_TYPE_CODE")
	REFERENCES "dbo"."PIMS_LEASE_LICENSE_TYPE"("LEASE_LICENSE_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_INSURANCE"
	ADD CONSTRAINT "PIM_LEASE_PIM_INSRNC_FK"
	FOREIGN KEY("LEASE_ID")
	REFERENCES "dbo"."PIMS_LEASE"("LEASE_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_INSURANCE"
	ADD CONSTRAINT "PIM_INSPYT_PIM_INSRNC_FK"
	FOREIGN KEY("INSURANCE_TYPE_CODE")
	REFERENCES "dbo"."PIMS_INSURANCE_TYPE"("INSURANCE_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE_TERM"
	ADD CONSTRAINT "PIM_LTRMST_PIM_LSTERM_FK"
	FOREIGN KEY("LEASE_TERM_STATUS_TYPE_CODE")
	REFERENCES "dbo"."PIMS_LEASE_TERM_STATUS_TYPE"("LEASE_TERM_STATUS_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE_TERM"
	ADD CONSTRAINT "PIM_LSPMTF_PIM_LSTERM_FK"
	FOREIGN KEY("LEASE_PMT_FREQ_TYPE_CODE")
	REFERENCES "dbo"."PIMS_LEASE_PMT_FREQ_TYPE"("LEASE_PMT_FREQ_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE_TERM"
	ADD CONSTRAINT "PIM_LEASE_PIM_LSTERM_FK"
	FOREIGN KEY("LEASE_ID")
	REFERENCES "dbo"."PIMS_LEASE"("LEASE_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE_PAYMENT"
	ADD CONSTRAINT "PIM_LSTERM_PIM_LSPYMT_FK"
	FOREIGN KEY("LEASE_TERM_ID")
	REFERENCES "dbo"."PIMS_LEASE_TERM"("LEASE_TERM_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE_PAYMENT"
	ADD CONSTRAINT "PIM_LSPMMT_PIM_LSPYMT_FK"
	FOREIGN KEY("LEASE_PAYMENT_METHOD_TYPE_CODE")
	REFERENCES "dbo"."PIMS_LEASE_PAYMENT_METHOD_TYPE"("LEASE_PAYMENT_METHOD_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE_PAYMENT"
	ADD CONSTRAINT "PIM_LPSTST_PIM_LSPYMT_FK"
	FOREIGN KEY("LEASE_PAYMENT_STATUS_TYPE_CODE")
	REFERENCES "dbo"."PIMS_LEASE_PAYMENT_STATUS_TYPE"("LEASE_PAYMENT_STATUS_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE_TENANT"
	ADD CONSTRAINT "PIM_PERSON_PIM_TENANT_FK"
	FOREIGN KEY("PERSON_ID")
	REFERENCES "dbo"."PIMS_PERSON"("PERSON_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE_TENANT"
	ADD CONSTRAINT "PIM_ORG_PIM_TENANT_FK"
	FOREIGN KEY("ORGANIZATION_ID")
	REFERENCES "dbo"."PIMS_ORGANIZATION"("ORGANIZATION_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE_TENANT"
	ADD CONSTRAINT "PIM_LSSRTY_PIM_TENANT_FK"
	FOREIGN KEY("LESSOR_TYPE_CODE")
	REFERENCES "dbo"."PIMS_LESSOR_TYPE"("LESSOR_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_LEASE_TENANT"
	ADD CONSTRAINT "PIM_LEASE_PIM_TENANT_FK"
	FOREIGN KEY("LEASE_ID")
	REFERENCES "dbo"."PIMS_LEASE"("LEASE_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ORGANIZATION_ADDRESS"
	ADD CONSTRAINT "PIM_ORG_PIM_ORGADD_FK"
	FOREIGN KEY("ORGANIZATION_ID")
	REFERENCES "dbo"."PIMS_ORGANIZATION"("ORGANIZATION_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ORGANIZATION_ADDRESS"
	ADD CONSTRAINT "PIM_ADUSGT_PIM_ORGADD_FK"
	FOREIGN KEY("ADDRESS_USAGE_TYPE_CODE")
	REFERENCES "dbo"."PIMS_ADDRESS_USAGE_TYPE"("ADDRESS_USAGE_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ORGANIZATION_ADDRESS"
	ADD CONSTRAINT "PIM_ADDRSS_PIM_ORGADD_FK"
	FOREIGN KEY("ADDRESS_ID")
	REFERENCES "dbo"."PIMS_ADDRESS"("ADDRESS_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PERSON_ADDRESS"
	ADD CONSTRAINT "PIM_PERSON_PIM_PERADD_FK"
	FOREIGN KEY("PERSON_ID")
	REFERENCES "dbo"."PIMS_PERSON"("PERSON_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PERSON_ADDRESS"
	ADD CONSTRAINT "PIM_ADUSGT_PIM_PERADD_FK"
	FOREIGN KEY("ADDRESS_USAGE_TYPE_CODE")
	REFERENCES "dbo"."PIMS_ADDRESS_USAGE_TYPE"("ADDRESS_USAGE_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PERSON_ADDRESS"
	ADD CONSTRAINT "PIM_ADDRSS_PIM_PERADD_FK"
	FOREIGN KEY("ADDRESS_ID")
	REFERENCES "dbo"."PIMS_ADDRESS"("ADDRESS_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PERSON_ORGANIZATION"
	ADD CONSTRAINT "PIM_PERSON_PIM_PERORG_FK"
	FOREIGN KEY("PERSON_ID")
	REFERENCES "dbo"."PIMS_PERSON"("PERSON_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PERSON_ORGANIZATION"
	ADD CONSTRAINT "PIM_ORG_PIM_PERORG_FK"
	FOREIGN KEY("ORGANIZATION_ID")
	REFERENCES "dbo"."PIMS_ORGANIZATION"("ORGANIZATION_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROJECT_NOTE"
	ADD CONSTRAINT "PIM_PROJCT_PIM_PROJNT_FK"
	FOREIGN KEY("PROJECT_ID")
	REFERENCES "dbo"."PIMS_PROJECT"("PROJECT_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY"
	ADD CONSTRAINT "PIM_SPDCLT_PIM_PRPRTY_FK"
	FOREIGN KEY("SURPLUS_DECLARATION_TYPE_CODE")
	REFERENCES "dbo"."PIMS_SURPLUS_DECLARATION_TYPE"("SURPLUS_DECLARATION_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY"
	ADD CONSTRAINT "PIM_REGION_PIM_PRPRTY_FK"
	FOREIGN KEY("REGION_CODE")
	REFERENCES "dbo"."PIMS_REGION"("REGION_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY"
	ADD CONSTRAINT "PIM_PRPTYP_PIM_PRPRTY_FK"
	FOREIGN KEY("PROPERTY_TYPE_CODE")
	REFERENCES "dbo"."PIMS_PROPERTY_TYPE"("PROPERTY_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY"
	ADD CONSTRAINT "PIM_PRPTNR_PIM_PRPRTY_FK"
	FOREIGN KEY("PROPERTY_TENURE_TYPE_CODE")
	REFERENCES "dbo"."PIMS_PROPERTY_TENURE_TYPE"("PROPERTY_TENURE_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY"
	ADD CONSTRAINT "PIM_PRPSTS_PIM_PRPRTY_FK"
	FOREIGN KEY("PROPERTY_STATUS_TYPE_CODE")
	REFERENCES "dbo"."PIMS_PROPERTY_STATUS_TYPE"("PROPERTY_STATUS_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY"
	ADD CONSTRAINT "PIM_PRPCLT_PIM_PRPRTY_FK"
	FOREIGN KEY("PROPERTY_CLASSIFICATION_TYPE_CODE")
	REFERENCES "dbo"."PIMS_PROPERTY_CLASSIFICATION_TYPE"("PROPERTY_CLASSIFICATION_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY"
	ADD CONSTRAINT "PIM_PIDSRT_PIM_PRPRTY_FK"
	FOREIGN KEY("PROPERTY_DATA_SOURCE_TYPE_CODE")
	REFERENCES "dbo"."PIMS_DATA_SOURCE_TYPE"("DATA_SOURCE_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY"
	ADD CONSTRAINT "PIM_PERSON_PIM_PRPRTY_FK"
	FOREIGN KEY("PROPERTY_MANAGER_ID")
	REFERENCES "dbo"."PIMS_PERSON"("PERSON_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY"
	ADD CONSTRAINT "PIM_ORG_PIM_PRPRTY_FK"
	FOREIGN KEY("PROP_MGMT_ORG_ID")
	REFERENCES "dbo"."PIMS_ORGANIZATION"("ORGANIZATION_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY"
	ADD CONSTRAINT "PIM_DSTRCT_PIM_PRPRTY_FK"
	FOREIGN KEY("DISTRICT_CODE")
	REFERENCES "dbo"."PIMS_DISTRICT"("DISTRICT_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY"
	ADD CONSTRAINT "PIM_ARUNIT_PIM_PRPRTY_FK"
	FOREIGN KEY("PROPERTY_AREA_UNIT_TYPE_CODE")
	REFERENCES "dbo"."PIMS_AREA_UNIT_TYPE"("AREA_UNIT_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY"
	ADD CONSTRAINT "PIM_ADDRSS_PIM_PRPRTY_FK"
	FOREIGN KEY("ADDRESS_ID")
	REFERENCES "dbo"."PIMS_ADDRESS"("ADDRESS_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROJECT_PROPERTY"
	ADD CONSTRAINT "PIM_PRPRTY_PIM_PRJPRP_FK"
	FOREIGN KEY("PROPERTY_ID")
	REFERENCES "dbo"."PIMS_PROPERTY"("PROPERTY_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROJECT_PROPERTY"
	ADD CONSTRAINT "PIM_PROJCT_PIM_PRJPRP_FK"
	FOREIGN KEY("PROJECT_ID")
	REFERENCES "dbo"."PIMS_PROJECT"("PROJECT_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_ACTIVITY"
	ADD CONSTRAINT "PIM_PRPRTY_PIM_PRPACT_FK"
	FOREIGN KEY("PROPERTY_ID")
	REFERENCES "dbo"."PIMS_PROPERTY"("PROPERTY_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_ACTIVITY"
	ADD CONSTRAINT "PIM_ACTVTY_PIM_PRPACT_FK"
	FOREIGN KEY("ACTIVITY_ID")
	REFERENCES "dbo"."PIMS_ACTIVITY"("ACTIVITY_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_EVALUATION"
	ADD CONSTRAINT "PIM_PRPRTY_PIM_PRPEVL_FK"
	FOREIGN KEY("PROPERTY_ID")
	REFERENCES "dbo"."PIMS_PROPERTY"("PROPERTY_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_IMPROVEMENT"
	ADD CONSTRAINT "PIM_PIMPRT_PIM_PIMPRV_FK"
	FOREIGN KEY("PROPERTY_IMPROVEMENT_TYPE_CODE")
	REFERENCES "dbo"."PIMS_PROPERTY_IMPROVEMENT_TYPE"("PROPERTY_IMPROVEMENT_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_IMPROVEMENT"
	ADD CONSTRAINT "PIM_LEASE_PIM_PIMPRV_FK"
	FOREIGN KEY("LEASE_ID")
	REFERENCES "dbo"."PIMS_LEASE"("LEASE_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_LEASE"
	ADD CONSTRAINT "PIM_PRPRTY_PIM_PROPLS_FK"
	FOREIGN KEY("PROPERTY_ID")
	REFERENCES "dbo"."PIMS_PROPERTY"("PROPERTY_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_LEASE"
	ADD CONSTRAINT "PIM_LEASE_PIM_PROPLS_FK"
	FOREIGN KEY("LEASE_ID")
	REFERENCES "dbo"."PIMS_LEASE"("LEASE_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_LEASE"
	ADD CONSTRAINT "PIM_ARUNIT_PIM_PROPLS_FK"
	FOREIGN KEY("AREA_UNIT_TYPE_CODE")
	REFERENCES "dbo"."PIMS_AREA_UNIT_TYPE"("AREA_UNIT_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_ORGANIZATION"
	ADD CONSTRAINT "PIM_PRPRTY_PIM_PRPORG_FK"
	FOREIGN KEY("PROPERTY_ID")
	REFERENCES "dbo"."PIMS_PROPERTY"("PROPERTY_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_ORGANIZATION"
	ADD CONSTRAINT "PIM_ORG_PIM_PRPORG_FK"
	FOREIGN KEY("ORGANIZATION_ID")
	REFERENCES "dbo"."PIMS_ORGANIZATION"("ORGANIZATION_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_SERVICE_FILE"
	ADD CONSTRAINT "PIM_PRSVFT_PIM_PRPSVC_FK"
	FOREIGN KEY("PROPERTY_SERVICE_FILE_TYPE_CODE")
	REFERENCES "dbo"."PIMS_PROPERTY_SERVICE_FILE_TYPE"("PROPERTY_SERVICE_FILE_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_PROPERTY_SERVICE_FILE"
	ADD CONSTRAINT "PIM_PRPSVC_PIM_PRPRSF_FK"
	FOREIGN KEY("PROPERTY_SERVICE_FILE_ID")
	REFERENCES "dbo"."PIMS_PROPERTY_SERVICE_FILE"("PROPERTY_SERVICE_FILE_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_PROPERTY_SERVICE_FILE"
	ADD CONSTRAINT "PIM_PRPRTY_PIM_PRPRSF_FK"
	FOREIGN KEY("PROPERTY_ID")
	REFERENCES "dbo"."PIMS_PROPERTY"("PROPERTY_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_TAX"
	ADD CONSTRAINT "PIM_PTRMTT_PIM_PRPTAX_FK"
	FOREIGN KEY("PROPERTY_TAX_REMIT_TYPE_CODE")
	REFERENCES "dbo"."PIMS_PROPERTY_TAX_REMIT_TYPE"("PROPERTY_TAX_REMIT_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_PROPERTY_TAX"
	ADD CONSTRAINT "PIM_PRPRTY_PIM_PRPTAX_FK"
	FOREIGN KEY("PROPERTY_ID")
	REFERENCES "dbo"."PIMS_PROPERTY"("PROPERTY_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ROLE_CLAIM"
	ADD CONSTRAINT "PIM_ROLE_PIM_ROLCLM_FK"
	FOREIGN KEY("ROLE_ID")
	REFERENCES "dbo"."PIMS_ROLE"("ROLE_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_ROLE_CLAIM"
	ADD CONSTRAINT "PIM_CLMTYP_PIM_ROLCLM_FK"
	FOREIGN KEY("CLAIM_ID")
	REFERENCES "dbo"."PIMS_CLAIM"("CLAIM_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_SECURITY_DEPOSIT"
	ADD CONSTRAINT "PIM_SECDPT_PIM_SECDEP_FK"
	FOREIGN KEY("SECURITY_DEPOSIT_TYPE_CODE")
	REFERENCES "dbo"."PIMS_SECURITY_DEPOSIT_TYPE"("SECURITY_DEPOSIT_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_SECURITY_DEPOSIT"
	ADD CONSTRAINT "PIM_LEASE_PIM_SECDEP_FK"
	FOREIGN KEY("LEASE_ID")
	REFERENCES "dbo"."PIMS_LEASE"("LEASE_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_SECURITY_DEPOSIT_HOLDER"
	ADD CONSTRAINT "PIM_SECDEP_PIM_SCDPHL_FK"
	FOREIGN KEY("SECURITY_DEPOSIT_ID")
	REFERENCES "dbo"."PIMS_SECURITY_DEPOSIT"("SECURITY_DEPOSIT_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_SECURITY_DEPOSIT_HOLDER"
	ADD CONSTRAINT "PIM_PERSON_PIM_SCDPHL_FK"
	FOREIGN KEY("PERSON_ID")
	REFERENCES "dbo"."PIMS_PERSON"("PERSON_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_SECURITY_DEPOSIT_HOLDER"
	ADD CONSTRAINT "PIM_ORG_PIM_SCDPHL_FK"
	FOREIGN KEY("ORGANIZATION_ID")
	REFERENCES "dbo"."PIMS_ORGANIZATION"("ORGANIZATION_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_SECURITY_DEPOSIT_RETURN"
	ADD CONSTRAINT "PIM_SECDPT_PIM_SDRTRN_FK"
	FOREIGN KEY("SECURITY_DEPOSIT_TYPE_CODE")
	REFERENCES "dbo"."PIMS_SECURITY_DEPOSIT_TYPE"("SECURITY_DEPOSIT_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_SECURITY_DEPOSIT_RETURN"
	ADD CONSTRAINT "PIM_SECDEP_PIM_SDRTRN_FK"
	FOREIGN KEY("SECURITY_DEPOSIT_ID")
	REFERENCES "dbo"."PIMS_SECURITY_DEPOSIT"("SECURITY_DEPOSIT_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_SECURITY_DEPOSIT_RETURN"
	ADD CONSTRAINT "PIM_LEASE_PIM_SDRTRN_FK"
	FOREIGN KEY("LEASE_ID")
	REFERENCES "dbo"."PIMS_LEASE"("LEASE_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_SECURITY_DEPOSIT_RETURN_HOLDER"
	ADD CONSTRAINT "PIM_SDRTRN_PIM_SCDPRH_FK"
	FOREIGN KEY("SECURITY_DEPOSIT_RETURN_ID")
	REFERENCES "dbo"."PIMS_SECURITY_DEPOSIT_RETURN"("SECURITY_DEPOSIT_RETURN_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_SECURITY_DEPOSIT_RETURN_HOLDER"
	ADD CONSTRAINT "PIM_PERSON_PIM_SCDPRH_FK"
	FOREIGN KEY("PERSON_ID")
	REFERENCES "dbo"."PIMS_PERSON"("PERSON_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_SECURITY_DEPOSIT_RETURN_HOLDER"
	ADD CONSTRAINT "PIM_ORG_PIM_SCDPRH_FK"
	FOREIGN KEY("ORGANIZATION_ID")
	REFERENCES "dbo"."PIMS_ORGANIZATION"("ORGANIZATION_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_TASK_TEMPLATE"
	ADD CONSTRAINT "PIM_TSKTMT_PIM_TSKTMP_FK"
	FOREIGN KEY("TASK_TEMPLATE_TYPE_CODE")
	REFERENCES "dbo"."PIMS_TASK_TEMPLATE_TYPE"("TASK_TEMPLATE_TYPE_CODE")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_TASK"
	ADD CONSTRAINT "PIM_USER_PIM_TASK_FK"
	FOREIGN KEY("USER_ID")
	REFERENCES "dbo"."PIMS_USER"("USER_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_TASK"
	ADD CONSTRAINT "PIM_TSKTMP_PIM_TASK_FK"
	FOREIGN KEY("TASK_TEMPLATE_ID")
	REFERENCES "dbo"."PIMS_TASK_TEMPLATE"("TASK_TEMPLATE_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_TASK"
	ADD CONSTRAINT "PIM_ACTVTY_PIM_TASK_FK"
	FOREIGN KEY("ACTIVITY_ID")
	REFERENCES "dbo"."PIMS_ACTIVITY"("ACTIVITY_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_TASK_TEMPLATE_ACTIVITY_MODEL"
	ADD CONSTRAINT "PIM_TSKTMP_PIM_TSKTAM_FK"
	FOREIGN KEY("TASK_TEMPLATE_ID")
	REFERENCES "dbo"."PIMS_TASK_TEMPLATE"("TASK_TEMPLATE_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_TASK_TEMPLATE_ACTIVITY_MODEL"
	ADD CONSTRAINT "PIM_ACTMDL_PIM_TSKTAM_FK"
	FOREIGN KEY("ACTIVITY_MODEL_ID")
	REFERENCES "dbo"."PIMS_ACTIVITY_MODEL"("ACTIVITY_MODEL_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_USER_ORGANIZATION"
	ADD CONSTRAINT "PIM_USER_PIM_USRORG_FK"
	FOREIGN KEY("USER_ID")
	REFERENCES "dbo"."PIMS_USER"("USER_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_USER_ORGANIZATION"
	ADD CONSTRAINT "PIM_ROLE_PIM_USRORG_FK"
	FOREIGN KEY("ROLE_ID")
	REFERENCES "dbo"."PIMS_ROLE"("ROLE_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_USER_ORGANIZATION"
	ADD CONSTRAINT "PIM_ORG_PIM_USRORG_FK"
	FOREIGN KEY("ORGANIZATION_ID")
	REFERENCES "dbo"."PIMS_ORGANIZATION"("ORGANIZATION_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_USER_ROLE"
	ADD CONSTRAINT "PIM_USER_PIM_USERRL_FK"
	FOREIGN KEY("USER_ID")
	REFERENCES "dbo"."PIMS_USER"("USER_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE "dbo"."PIMS_USER_ROLE"
	ADD CONSTRAINT "PIM_ROLE_PIM_USERRL_FK"
	FOREIGN KEY("ROLE_ID")
	REFERENCES "dbo"."PIMS_ROLE"("ROLE_ID")
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

