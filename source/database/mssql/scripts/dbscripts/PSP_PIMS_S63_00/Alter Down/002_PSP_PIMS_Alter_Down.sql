-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Mon Sep 18 16:20:49 PDT 2023
-- Execute this script on:
-- 		PSP_PIMS_S63.00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S62.00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRPU_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPRPU_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_PURPOSE]
	DROP CONSTRAINT IF EXISTS [PIM_PRPRTY_PIM_PRPRPU_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPPUR_PIM_PRPRPU_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPPUR_PIM_PRPRPU_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_PURPOSE]
	DROP CONSTRAINT IF EXISTS [PIM_PRPPUR_PIM_PRPRPU_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPCNT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPCNT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT]
	DROP CONSTRAINT IF EXISTS [PIM_PRPRTY_PIM_PRPCNT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_PRM_PRPCNT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_PRM_PRPCNT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_PRM_PRPCNT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_PRPCNT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_PRPCNT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_PRPCNT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_PRPCNT_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_PRPCNT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_PRPCNT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRTY_LOCATION_IDX
PRINT N'Drop index dbo.PRPRTY_LOCATION_IDX'
GO
DROP INDEX IF EXISTS [PRPRTY_LOCATION_IDX] ON [dbo].[PIMS_PROPERTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRTY_BOUNDARY_IDX
PRINT N'Drop index dbo.PRPRTY_BOUNDARY_IDX'
GO
DROP INDEX IF EXISTS [PRPRTY_BOUNDARY_IDX] ON [dbo].[PIMS_PROPERTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRPU_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRPU_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRPU_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRPU_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRPU_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRPU_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRPU_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPRPU_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRPU_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRPU_PROPERTY_PURPOSE_TYPE_CODE_IDX
PRINT N'Drop index dbo.PRPRPU_PROPERTY_PURPOSE_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_PROP_PURPOSE].[PRPRPU_PROPERTY_PURPOSE_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRPU_PROPERTY_ID_IDX
PRINT N'Drop index dbo.PRPRPU_PROPERTY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_PROP_PURPOSE].[PRPRPU_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPPUR_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPPUR_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPPUR_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPPUR_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPPUR_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPPUR_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPCNT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPCNT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPCNT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPCNT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPCNT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPCNT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPCNT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPCNT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPCNT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPCNT_PROPERTY_ID_IDX
PRINT N'Drop index dbo.PRPCNT_PROPERTY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_CONTACT].[PRPCNT_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPCNT_PERSON_ID_IDX
PRINT N'Drop index dbo.PRPCNT_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_CONTACT].[PRPCNT_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPCNT_ORGANIZATION_ID_IDX
PRINT N'Drop index dbo.PRPCNT_ORGANIZATION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_CONTACT].[PRPCNT_ORGANIZATION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPREQ_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CMPREQ_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPREQ_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPREQ_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_CMPREQ_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPREQ_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPREQ_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_CMPREQ_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPREQ_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRPACT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRPACT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRPACT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRPACT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRPACT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRPACT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROPERTY_ACTIVITY_HIST
PRINT N'Drop table dbo.PIMS_PROPERTY_ACTIVITY_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRPRCL_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRPRCL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_CLASSIFICATION_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRPRCL_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRPRCL_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRPRCL_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_CLASSIFICATION_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRPRCL_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROP_PROP_CLASSIFICATION_HIST
PRINT N'Drop table dbo.PIMS_PROP_PROP_CLASSIFICATION_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROP_PROP_CLASSIFICATION_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRPRPU_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRPRPU_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_PURPOSE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRPRPU_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRPRPU_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRPRPU_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_PURPOSE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRPRPU_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRPRPU_PK
PRINT N'Drop primary key constraint dbo.PRPRPU_PK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_PURPOSE]
	DROP CONSTRAINT IF EXISTS [PRPRPU_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROP_PROP_PURPOSE
PRINT N'Drop table dbo.PIMS_PROP_PROP_PURPOSE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROP_PROP_PURPOSE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRPPUR_PK
PRINT N'Drop primary key constraint dbo.PRPPUR_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_PURPOSE_TYPE]
	DROP CONSTRAINT IF EXISTS [PRPPUR_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRPCNT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRPCNT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRPCNT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRPCNT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRPCNT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRPCNT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRPCNT_PK
PRINT N'Drop primary key constraint dbo.PRPCNT_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_CONTACT]
	DROP CONSTRAINT IF EXISTS [PRPCNT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROPERTY_CONTACT
PRINT N'Drop table dbo.PIMS_PROPERTY_CONTACT'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_CONTACT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROP_PROP_CLASSIFICATION_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROP_PROP_CLASSIFICATION_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROP_PROP_CLASSIFICATION_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PIMS_PROPERTY_ACTIVITY_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PIMS_PROPERTY_ACTIVITY_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PIMS_PROPERTY_ACTIVITY_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_INSTANCE_STATUS_TYPE
PRINT N'Create table dbo.PIMS_ACTIVITY_INSTANCE_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_STATUS_TYPE]  ( 
	[ACTIVITY_INSTANCE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                       	nvarchar(200) NOT NULL,
	[IS_DISABLED]                       	bit NOT NULL CONSTRAINT [ACTIST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                     	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL CONSTRAINT [ACTIST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [ACTIST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [ACTIST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTIST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTIST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTIST_PK] PRIMARY KEY CLUSTERED([ACTIVITY_INSTANCE_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the activity instance status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'ACTIVITY_INSTANCE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the activity instance status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the activity instance status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_TEMPLATE_TYPE
PRINT N'Create table dbo.PIMS_ACTIVITY_TEMPLATE_TYPE'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_TYPE]  ( 
	[ACTIVITY_TEMPLATE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                	nvarchar(200) NOT NULL,
	[IS_DISABLED]                	bit NOT NULL CONSTRAINT [ACTTTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]              	int NULL,
	[CONCURRENCY_CONTROL_NUMBER] 	bigint NOT NULL CONSTRAINT [ACTTTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [ACTTTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [ACTTTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]   	datetime NOT NULL CONSTRAINT [ACTTTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]      	nvarchar(30) NOT NULL CONSTRAINT [ACTTTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTTTY_PK] PRIMARY KEY CLUSTERED([ACTIVITY_TEMPLATE_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the activity type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_TYPE', 
	@level2type = N'Column', @level2name = N'ACTIVITY_TEMPLATE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the activity type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the activity type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_TEMPLATE
PRINT N'Create table dbo.PIMS_ACTIVITY_TEMPLATE'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE]  ( 
	[ACTIVITY_TEMPLATE_ID]          	bigint NOT NULL CONSTRAINT [ACTTMP_ACTIVITY_TEMPLATE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_TEMPLATE_ID_SEQ]),
	[ACTIVITY_TEMPLATE_TYPE_CODE]   	nvarchar(20) NOT NULL CONSTRAINT [ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_DEF]  DEFAULT ('GENERAL'),
	[ACTIVITY_TEMPLATE_JSON]        	nvarchar(max) NOT NULL CONSTRAINT [ACTTMP_ACTIVITY_TEMPLATE_JSON_DEF]  DEFAULT ('<Empty>'),
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [ACTTMP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACTTMP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTTMP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACTTMP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACTTMP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACTTMP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTTMP_PK] PRIMARY KEY CLUSTERED([ACTIVITY_TEMPLATE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'JSON structure desribing how to construct the activity UI.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE', 
	@level2type = N'Column', @level2name = N'ACTIVITY_TEMPLATE_JSON'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_INSTANCE
PRINT N'Create table dbo.PIMS_ACTIVITY_INSTANCE'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]  ( 
	[ACTIVITY_INSTANCE_ID]              	bigint NOT NULL CONSTRAINT [ACTINS_ACTIVITY_INSTANCE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_ID_SEQ]),
	[ACTIVITY_TEMPLATE_ID]              	bigint NOT NULL CONSTRAINT [ACTINS_ACTIVITY_TEMPLATE_ID_DEF]  DEFAULT ((-1)),
	[ACTIVITY_INSTANCE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL CONSTRAINT [ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_DEF]  DEFAULT ('NOSTART'),
	[DESCRIPTION]                       	nvarchar(500) NULL,
	[ACTIVITY_DATA_JSON]                	nvarchar(max) NOT NULL CONSTRAINT [ACTINS_ACTIVITY_DATA_JSON_DEF]  DEFAULT ('<Empty>'),
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL CONSTRAINT [ACTINS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [ACTINS_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [ACTINS_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [ACTINS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTINS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTINS_PK] PRIMARY KEY CLUSTERED([ACTIVITY_INSTANCE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the activity instance.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'JSON structure containing data specific to an activity instance.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE', 
	@level2type = N'Column', @level2name = N'ACTIVITY_DATA_JSON'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table to contain all applicable activity instances for the PIMS PSP system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_INSTANCE_NOTE
PRINT N'Create table dbo.PIMS_ACTIVITY_INSTANCE_NOTE'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]  ( 
	[PIMS_ACTIVITY_INSTANCE_NOTE_ID]	bigint NOT NULL CONSTRAINT [ACTINN_PIMS_ACTIVITY_INSTANCE_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_NOTE_ID_SEQ]),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [ACTINN_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACTINN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTINN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACTINN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACTINN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACTINN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTINN_PK] PRIMARY KEY CLUSTERED([PIMS_ACTIVITY_INSTANCE_NOTE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_NOTE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Relates a note object to an activity instance.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_NOTE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.ACTINN_ACTIVITY_NOTE_TUC
PRINT N'Create unique constraint dbo.ACTINN_ACTIVITY_NOTE_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]
	ADD CONSTRAINT [ACTINN_ACTIVITY_NOTE_TUC]
	UNIQUE ([NOTE_ID], [ACTIVITY_INSTANCE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY
PRINT N'Alter table dbo.PIMS_PROPERTY'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY] DROP CONSTRAINT IF EXISTS [PRPRTY_PROPERTY_CLASSIFICATION_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY] ADD DEFAULT 'UNKNOWN' FOR [PROPERTY_CLASSIFICATION_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY]
	DROP COLUMN IF EXISTS [ADDITIONAL_DETAILS], [IS_UTILITIES_PAYABLE], [IS_TAXES_PAYABLE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACT_INST_PROP_RSRCH_FILE
PRINT N'Create table dbo.PIMS_ACT_INST_PROP_RSRCH_FILE'
GO
CREATE TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]  ( 
	[ACT_INST_PROP_RSRCH_FILE_ID]   	bigint NOT NULL CONSTRAINT [AIPRFL_ACT_INST_PROP_RSRCH_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACT_INST_PROP_RSRCH_FILE_ID_SEQ]),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[PROPERTY_RESEARCH_FILE_ID]     	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [AIPRFL_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [AIPRFL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [AIPRFL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [AIPRFL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [AIPRFL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [AIPRFL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [AIPRFL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [AIPRFL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [AIPRFL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [AIPRFL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [AIPRFL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [AIPRFL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AIPRFL_PK] PRIMARY KEY CLUSTERED([ACT_INST_PROP_RSRCH_FILE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACT_INST_PROP_RSRCH_FILE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'File to associate an activity instance with a subset of properties associated with the superset of research file properties.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACT_INST_PROP_RSRCH_FILE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.AIPRFL_ACT_INST_PROP_RSRCH_FL_TUC
PRINT N'Create unique constraint dbo.AIPRFL_ACT_INST_PROP_RSRCH_FL_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]
	ADD CONSTRAINT [AIPRFL_ACT_INST_PROP_RSRCH_FL_TUC]
	UNIQUE ([PROPERTY_RESEARCH_FILE_ID], [ACTIVITY_INSTANCE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT
PRINT N'Create table dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]  ( 
	[ACTIVITY_TEMPLATE_DOCUMENT_ID] 	bigint NOT NULL CONSTRAINT [ACTMDO_ACTIVITY_TEMPLATE_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_TEMPLATE_DOCUMENT_ID_SEQ]),
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[ACTIVITY_TEMPLATE_ID]          	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [ACTMDO_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACTMDO_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTMDO_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTMDO_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACTMDO_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACTMDO_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACTMDO_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACTMDO_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACTMDO_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACTMDO_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACTMDO_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACTMDO_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTMDO_PK] PRIMARY KEY CLUSTERED([ACTIVITY_TEMPLATE_DOCUMENT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associative relationship between an activity template and a document.  Useful in determining with templates reference a document and conversely, which documents reference an activity template.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_DOCUMENT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.ACTMDO_ACT_TMP_DOC_TUC
PRINT N'Create unique constraint dbo.ACTMDO_ACT_TMP_DOC_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
	ADD CONSTRAINT [ACTMDO_ACT_TMP_DOC_TUC]
	UNIQUE ([ACTIVITY_TEMPLATE_ID], [DOCUMENT_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACT_INST_PROP_ACQ_FILE
PRINT N'Create table dbo.PIMS_ACT_INST_PROP_ACQ_FILE'
GO
CREATE TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]  ( 
	[ACT_INST_PROP_ACQ_FILE_ID]     	bigint NOT NULL CONSTRAINT [AIPAFL_ACT_INST_PROP_ACQ_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACT_INST_PROP_ACQ_FILE_ID_SEQ]),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[PROPERTY_ACQUISITION_FILE_ID]  	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [AIPAFL_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [AIPAFL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [AIPAFL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [AIPAFL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [AIPAFL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [AIPAFL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [AIPAFL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [AIPAFL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [AIPAFL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [AIPAFL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [AIPAFL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [AIPAFL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AIPAFL_PK] PRIMARY KEY CLUSTERED([ACT_INST_PROP_ACQ_FILE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACT_INST_PROP_ACQ_FILE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'File to associate an activity instance with a subset of properties associated with the superset of acquisition file properties.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACT_INST_PROP_ACQ_FILE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.AIPAFL_ACT_INST_PROP_ACQ_FL_TUC
PRINT N'Create unique constraint dbo.AIPAFL_ACT_INST_PROP_ACQ_FL_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]
	ADD CONSTRAINT [AIPAFL_ACT_INST_PROP_ACQ_FL_TUC]
	UNIQUE ([PROPERTY_ACQUISITION_FILE_ID], [ACTIVITY_INSTANCE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT
PRINT N'Create table dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]  ( 
	[ACTIVITY_INSTANCE_DOCUMENT_ID] 	bigint NOT NULL CONSTRAINT [ACTDOC_ACTIVITY_INSTANCE_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_DOCUMENT_ID_SEQ]),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [ACTDOC_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACTDOC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTDOC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACTDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACTDOC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACTDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTDOC_PK] PRIMARY KEY CLUSTERED([ACTIVITY_INSTANCE_DOCUMENT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Relates a document object to an activity instance.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_DOCUMENT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.ACTDOC_ACTIVITY_DOCUMENT_TUC
PRINT N'Create unique constraint dbo.ACTDOC_ACTIVITY_DOCUMENT_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
	ADD CONSTRAINT [ACTDOC_ACTIVITY_DOCUMENT_TUC]
	UNIQUE ([DOCUMENT_ID], [ACTIVITY_INSTANCE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_ACTIVITY_INSTANCE
PRINT N'Create table dbo.PIMS_LEASE_ACTIVITY_INSTANCE'
GO
CREATE TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]  ( 
	[LEASE_ACTIVITY_INSTANCE_ID]    	bigint NOT NULL CONSTRAINT [LSACIN_LEASE_ACTIVITY_INSTANCE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_ACTIVITY_INSTANCE_ID_SEQ]),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LSACIN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LSACIN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LSACIN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LSACIN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LSACIN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSACIN_PK] PRIMARY KEY CLUSTERED([LEASE_ACTIVITY_INSTANCE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associative entity between leases/licenses and activity instances.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_ACTIVITY_INSTANCE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.LSACIN_LEASE_ACTIVITY_INSTANCE_TUC
PRINT N'Create unique constraint dbo.LSACIN_LEASE_ACTIVITY_INSTANCE_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [LSACIN_LEASE_ACTIVITY_INSTANCE_TUC]
	UNIQUE ([LEASE_ID], [ACTIVITY_INSTANCE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE
PRINT N'Create table dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]  ( 
	[ACQUISITION_ACTIVITY_INSTANCE_ID]	bigint NOT NULL CONSTRAINT [ACQAIN_ACQUISITION_ACTIVITY_INSTANCE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_ACTIVITY_INSTANCE_ID_SEQ]),
	[ACQUISITION_FILE_ID]             	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]            	bigint NOT NULL,
	[IS_DISABLED]                     	bit NULL CONSTRAINT [ACQAIN_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL CONSTRAINT [ACQAIN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [ACQAIN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ACQAIN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [ACQAIN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [ACQAIN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQAIN_PK] PRIMARY KEY CLUSTERED([ACQUISITION_ACTIVITY_INSTANCE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_ACTIVITY_INSTANCE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.ACQAIN_ACQ_ACTIVITY_TUC
PRINT N'Create unique constraint dbo.ACQAIN_ACQ_ACTIVITY_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [ACQAIN_ACQ_ACTIVITY_TUC]
	UNIQUE ([ACTIVITY_INSTANCE_ID], [ACQUISITION_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE
PRINT N'Create table dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE'
GO
CREATE TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]  ( 
	[RESEARCH_ACTIVITY_INSTANCE_ID] 	bigint NOT NULL CONSTRAINT [RSCHAI_RESEARCH_ACTIVITY_INSTANCE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_ACTIVITY_INSTANCE_ID_SEQ]),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [RSCHAI_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [RSCHAI_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RSCHAI_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RSCHAI_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RSCHAI_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RSCHAI_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RSCHAI_PK] PRIMARY KEY CLUSTERED([RESEARCH_ACTIVITY_INSTANCE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_ACTIVITY_INSTANCE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Relates a research file to an activity instance.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_ACTIVITY_INSTANCE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.RSCHAI_RSRCH_FILE_ACTIVITY_TUC
PRINT N'Create unique constraint dbo.RSCHAI_RSRCH_FILE_ACTIVITY_TUC'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [RSCHAI_RSRCH_FILE_ACTIVITY_TUC]
	UNIQUE ([RESEARCH_FILE_ID], [ACTIVITY_INSTANCE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_HIST]
	DROP COLUMN IF EXISTS [ADDITIONAL_DETAILS], [IS_UTILITIES_PAYABLE], [IS_TAXES_PAYABLE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTEREST_HOLDER
PRINT N'Alter table dbo.PIMS_INTEREST_HOLDER'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER] DROP CONSTRAINT IF EXISTS [INTHLD_INTEREST_HOLDER_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER] ADD CONSTRAINT [INTHLD_INTEREST_HOLDER_TYPE_CODE_DEF] DEFAULT (N'INTHLDR') FOR [INTEREST_HOLDER_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COMPENSATION_REQUISITION
PRINT N'Alter table dbo.PIMS_COMPENSATION_REQUISITION'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	DROP COLUMN IF EXISTS [ADV_PMT_SERVED_DT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COMPENSATION_REQUISITION_HIST
PRINT N'Alter table dbo.PIMS_COMPENSATION_REQUISITION_HIST'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION_HIST]
	DROP COLUMN IF EXISTS [ADV_PMT_SERVED_DT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACT_INST_PROP_RSRCH_FILE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACT_INST_PROP_RSRCH_FILE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACT_INST_PROP_RSRCH_FILE_HIST
PRINT N'Create table dbo.PIMS_ACT_INST_PROP_RSRCH_FILE_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE_HIST]  ( 
	[_ACT_INST_PROP_RSRCH_FILE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACT_INST_PROP_RSRCH_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]              	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                    	datetime NULL,
	[ACT_INST_PROP_RSRCH_FILE_ID]      	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]             	bigint NOT NULL,
	[PROPERTY_RESEARCH_FILE_ID]        	bigint NOT NULL,
	[IS_DISABLED]                      	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_AIPRFL_H_PK] PRIMARY KEY CLUSTERED([_ACT_INST_PROP_RSRCH_FILE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_AIPRFL_H_UK
PRINT N'Create unique constraint dbo.PIMS_AIPRFL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE_HIST]
	ADD CONSTRAINT [PIMS_AIPRFL_H_UK]
	UNIQUE ([_ACT_INST_PROP_RSRCH_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACTIVITY_INSTANCE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACTIVITY_INSTANCE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_INSTANCE_HIST
PRINT N'Create table dbo.PIMS_ACTIVITY_INSTANCE_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST]  ( 
	[_ACTIVITY_INSTANCE_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[ACTIVITY_INSTANCE_ID]              	bigint NOT NULL,
	[ACTIVITY_TEMPLATE_ID]              	bigint NOT NULL,
	[ACTIVITY_INSTANCE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                       	nvarchar(500) NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACTINS_H_PK] PRIMARY KEY CLUSTERED([_ACTIVITY_INSTANCE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACTINS_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACTINS_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST]
	ADD CONSTRAINT [PIMS_ACTINS_H_UK]
	UNIQUE ([_ACTIVITY_INSTANCE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_ACTIVITY_INSTANCE_HIST
PRINT N'Create table dbo.PIMS_LEASE_ACTIVITY_INSTANCE_HIST'
GO
CREATE TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_HIST]  ( 
	[_LEASE_ACTIVITY_INSTANCE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]             	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                   	datetime NULL,
	[LEASE_ACTIVITY_INSTANCE_ID]      	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]            	bigint NOT NULL,
	[LEASE_ID]                        	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LSACIN_H_PK] PRIMARY KEY CLUSTERED([_LEASE_ACTIVITY_INSTANCE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_LSACIN_H_UK
PRINT N'Create unique constraint dbo.PIMS_LSACIN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_HIST]
	ADD CONSTRAINT [PIMS_LSACIN_H_UK]
	UNIQUE ([_LEASE_ACTIVITY_INSTANCE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST
PRINT N'Create table dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST'
GO
CREATE TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST]  ( 
	[_RESEARCH_ACTIVITY_INSTANCE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_ACTIVITY_INSTANCE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[RESEARCH_ACTIVITY_INSTANCE_ID]      	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]               	bigint NOT NULL,
	[RESEARCH_FILE_ID]                   	bigint NOT NULL,
	[IS_DISABLED]                        	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RSCHAI_H_PK] PRIMARY KEY CLUSTERED([_RESEARCH_ACTIVITY_INSTANCE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_RSCHAI_H_UK
PRINT N'Create unique constraint dbo.PIMS_RSCHAI_H_UK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST]
	ADD CONSTRAINT [PIMS_RSCHAI_H_UK]
	UNIQUE ([_RESEARCH_ACTIVITY_INSTANCE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_TEMPLATE_HIST
PRINT N'Create table dbo.PIMS_ACTIVITY_TEMPLATE_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_HIST]  ( 
	[_ACTIVITY_TEMPLATE_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ACTIVITY_TEMPLATE_ID]          	bigint NOT NULL,
	[ACTIVITY_TEMPLATE_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACTTMP_H_PK] PRIMARY KEY CLUSTERED([_ACTIVITY_TEMPLATE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACTTMP_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACTTMP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_HIST]
	ADD CONSTRAINT [PIMS_ACTTMP_H_UK]
	UNIQUE ([_ACTIVITY_TEMPLATE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST
PRINT N'Create table dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST]  ( 
	[_ACTIVITY_INSTANCE_DOCUMENT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[ACTIVITY_INSTANCE_DOCUMENT_ID]      	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]               	bigint NOT NULL,
	[DOCUMENT_ID]                        	bigint NOT NULL,
	[IS_DISABLED]                        	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACTDOC_H_PK] PRIMARY KEY CLUSTERED([_ACTIVITY_INSTANCE_DOCUMENT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACTDOC_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACTDOC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_ACTDOC_H_UK]
	UNIQUE ([_ACTIVITY_INSTANCE_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACT_INST_PROP_ACQ_FILE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACT_INST_PROP_ACQ_FILE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACT_INST_PROP_ACQ_FILE_HIST
PRINT N'Create table dbo.PIMS_ACT_INST_PROP_ACQ_FILE_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE_HIST]  ( 
	[_ACT_INST_PROP_ACQ_FILE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACT_INST_PROP_ACQ_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[ACT_INST_PROP_ACQ_FILE_ID]      	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]           	bigint NOT NULL,
	[PROPERTY_ACQUISITION_FILE_ID]   	bigint NOT NULL,
	[IS_DISABLED]                    	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_AIPAFL_H_PK] PRIMARY KEY CLUSTERED([_ACT_INST_PROP_ACQ_FILE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_AIPAFL_H_UK
PRINT N'Create unique constraint dbo.PIMS_AIPAFL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE_HIST]
	ADD CONSTRAINT [PIMS_AIPAFL_H_UK]
	UNIQUE ([_ACT_INST_PROP_ACQ_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST
PRINT N'Create table dbo.PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST]  ( 
	[_ACTIVITY_TEMPLATE_DOCUMENT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_TEMPLATE_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[ACTIVITY_TEMPLATE_DOCUMENT_ID]      	bigint NOT NULL,
	[DOCUMENT_ID]                        	bigint NOT NULL,
	[ACTIVITY_TEMPLATE_ID]               	bigint NOT NULL,
	[IS_DISABLED]                        	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACTMDO_H_PK] PRIMARY KEY CLUSTERED([_ACTIVITY_TEMPLATE_DOCUMENT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACTMDO_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACTMDO_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_ACTMDO_H_UK]
	UNIQUE ([_ACTIVITY_TEMPLATE_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST
PRINT N'Create table dbo.PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST]  ( 
	[_ACQUISITION_ACTIVITY_INSTANCE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                   	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                         	datetime NULL,
	[ACQUISITION_ACTIVITY_INSTANCE_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]                   	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]                  	bigint NOT NULL,
	[IS_DISABLED]                           	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]            	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]                  	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USERID]                     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                  	uniqueidentifier NULL,
	[APP_LAST_UPDATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                   	datetime NOT NULL,
	[DB_CREATE_USERID]                      	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]                 	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQAIN_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_ACTIVITY_INSTANCE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACQAIN_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACQAIN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST]
	ADD CONSTRAINT [PIMS_ACQAIN_H_UK]
	UNIQUE ([_ACQUISITION_ACTIVITY_INSTANCE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACTIVITY_INSTANCE_NOTE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACTIVITY_INSTANCE_NOTE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_INSTANCE_NOTE_HIST
PRINT N'Create table dbo.PIMS_ACTIVITY_INSTANCE_NOTE_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_HIST]  ( 
	[_ACTIVITY_INSTANCE_NOTE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_NOTE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[PIMS_ACTIVITY_INSTANCE_NOTE_ID] 	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]           	bigint NOT NULL,
	[NOTE_ID]                        	bigint NOT NULL,
	[IS_DISABLED]                    	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACTINN_H_PK] PRIMARY KEY CLUSTERED([_ACTIVITY_INSTANCE_NOTE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACTINN_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACTINN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_HIST]
	ADD CONSTRAINT [PIMS_ACTINN_H_UK]
	UNIQUE ([_ACTIVITY_INSTANCE_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTINN_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Create index dbo.ACTINN_ACTIVITY_INSTANCE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTINN_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]([ACTIVITY_INSTANCE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AIPRFL_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Create index dbo.AIPRFL_ACTIVITY_INSTANCE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AIPRFL_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]([ACTIVITY_INSTANCE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTMDO_DOCUMENT_ID_IDX
PRINT N'Create index dbo.ACTMDO_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTMDO_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AIPAFL_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Create index dbo.AIPAFL_ACTIVITY_INSTANCE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AIPAFL_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]([ACTIVITY_INSTANCE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AIPAFL_PROPERTY_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.AIPAFL_PROPERTY_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AIPAFL_PROPERTY_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]([PROPERTY_ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTDOC_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Create index dbo.ACTDOC_ACTIVITY_INSTANCE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTDOC_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]([ACTIVITY_INSTANCE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSACIN_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Create index dbo.LSACIN_ACTIVITY_INSTANCE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSACIN_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTINS_ACTIVITY_TEMPLATE_ID_IDX
PRINT N'Create index dbo.ACTINS_ACTIVITY_TEMPLATE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTINS_ACTIVITY_TEMPLATE_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_TEMPLATE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTDOC_DOCUMENT_ID_IDX
PRINT N'Create index dbo.ACTDOC_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_IDX
PRINT N'Create index dbo.ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACTIVITY_TEMPLATE]([ACTIVITY_TEMPLATE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTMDO_ACTIVITY_TEMPLATE_ID_IDX
PRINT N'Create index dbo.ACTMDO_ACTIVITY_TEMPLATE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTMDO_ACTIVITY_TEMPLATE_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]([ACTIVITY_TEMPLATE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQAIN_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Create index dbo.ACQAIN_ACTIVITY_INSTANCE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQAIN_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSACIN_LEASE_ID_IDX
PRINT N'Create index dbo.LSACIN_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSACIN_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RSCHAI_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Create index dbo.RSCHAI_ACTIVITY_INSTANCE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [RSCHAI_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AIPRFL_PROPERTY_RESEARCH_FILE_ID_IDX
PRINT N'Create index dbo.AIPRFL_PROPERTY_RESEARCH_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AIPRFL_PROPERTY_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]([PROPERTY_RESEARCH_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTINN_NOTE_ID_IDX
PRINT N'Create index dbo.ACTINN_NOTE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTINN_NOTE_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]([NOTE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RSCHAI_RESEARCH_FILE_ID_IDX
PRINT N'Create index dbo.RSCHAI_RESEARCH_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [RSCHAI_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]([RESEARCH_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQAIN_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.ACQAIN_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQAIN_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]([ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTINN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINN_I_S_U_TR] ON PIMS_ACTIVITY_INSTANCE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PIMS_ACTIVITY_INSTANCE_NOTE_ID = deleted.PIMS_ACTIVITY_INSTANCE_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_INSTANCE_NOTE
    set "PIMS_ACTIVITY_INSTANCE_NOTE_ID" = inserted."PIMS_ACTIVITY_INSTANCE_NOTE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_INSTANCE_NOTE
    inner join inserted
    on (PIMS_ACTIVITY_INSTANCE_NOTE.PIMS_ACTIVITY_INSTANCE_NOTE_ID = inserted.PIMS_ACTIVITY_INSTANCE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_A_S_IUD_TR] ON PIMS_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_HIST set END_DATE_HIST = @curr_date where PROPERTY_ID in (select PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_HIST ([PROPERTY_ID], [PROPERTY_MANAGER_ID], [PROP_MGMT_ORG_ID], [PROPERTY_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [NAME], [DESCRIPTION], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [GENERAL_LOCATION], [SURVEY_PLAN_NUMBER], [ENCUMBRANCE_REASON], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_PROPERTY_OF_INTEREST], [IS_VISIBLE_TO_OTHER_AGENCIES], [IS_SENSITIVE], [IS_PROVINCIAL_PUBLIC_HWY], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ZONING], [ZONING_POTENTIAL], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ID], [PROPERTY_MANAGER_ID], [PROP_MGMT_ORG_ID], [PROPERTY_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [NAME], [DESCRIPTION], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [GENERAL_LOCATION], [SURVEY_PLAN_NUMBER], [ENCUMBRANCE_REASON], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_PROPERTY_OF_INTEREST], [IS_VISIBLE_TO_OTHER_AGENCIES], [IS_SENSITIVE], [IS_PROVINCIAL_PUBLIC_HWY], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ZONING], [ZONING_POTENTIAL], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_H_ID_SEQ]) as [_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CMPREQ_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_CMPREQ_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CMPREQ_I_S_I_TR] ON PIMS_COMPENSATION_REQUISITION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_COMPENSATION_REQUISITION ("COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_PERSON_ID",
      "CHART_OF_ACCOUNTS_ID",
      "RESPONSIBILITY_ID",
      "YEARLY_FINANCIAL_ID",
      "ALTERNATE_PROJECT_ID",
      "LEGACY_PAYEE",
      "IS_DRAFT",
      "IS_PAYMENT_IN_TRUST",
      "GST_NUMBER",
      "FISCAL_YEAR",
      "AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT",
      "GENERATION_DT",
      "FINALIZED_DATE",
      "SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_PERSON_ID",
      "CHART_OF_ACCOUNTS_ID",
      "RESPONSIBILITY_ID",
      "YEARLY_FINANCIAL_ID",
      "ALTERNATE_PROJECT_ID",
      "LEGACY_PAYEE",
      "IS_DRAFT",
      "IS_PAYMENT_IN_TRUST",
      "GST_NUMBER",
      "FISCAL_YEAR",
      "AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT",
      "GENERATION_DT",
      "FINALIZED_DATE",
      "SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CMPREQ_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_CMPREQ_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CMPREQ_A_S_IUD_TR] ON PIMS_COMPENSATION_REQUISITION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_COMPENSATION_REQUISITION_HIST set END_DATE_HIST = @curr_date where COMPENSATION_REQUISITION_ID in (select COMPENSATION_REQUISITION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_COMPENSATION_REQUISITION_HIST ([COMPENSATION_REQUISITION_ID], [ACQUISITION_FILE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [ACQUISITION_FILE_PERSON_ID], [CHART_OF_ACCOUNTS_ID], [RESPONSIBILITY_ID], [YEARLY_FINANCIAL_ID], [ALTERNATE_PROJECT_ID], [LEGACY_PAYEE], [IS_DRAFT], [IS_PAYMENT_IN_TRUST], [GST_NUMBER], [FISCAL_YEAR], [AGREEMENT_DT], [EXPROP_NOTICE_SERVED_DT], [EXPROP_VESTING_DT], [GENERATION_DT], [FINALIZED_DATE], [SPECIAL_INSTRUCTION], [DETAILED_REMARKS], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _COMPENSATION_REQUISITION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [COMPENSATION_REQUISITION_ID], [ACQUISITION_FILE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [ACQUISITION_FILE_PERSON_ID], [CHART_OF_ACCOUNTS_ID], [RESPONSIBILITY_ID], [YEARLY_FINANCIAL_ID], [ALTERNATE_PROJECT_ID], [LEGACY_PAYEE], [IS_DRAFT], [IS_PAYMENT_IN_TRUST], [GST_NUMBER], [FISCAL_YEAR], [AGREEMENT_DT], [EXPROP_NOTICE_SERVED_DT], [EXPROP_VESTING_DT], [GENERATION_DT], [FINALIZED_DATE], [SPECIAL_INSTRUCTION], [DETAILED_REMARKS], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_COMPENSATION_REQUISITION_H_ID_SEQ]) as [_COMPENSATION_REQUISITION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTINS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINS_I_S_U_TR] ON PIMS_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_INSTANCE_ID = deleted.ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_INSTANCE
    set "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "ACTIVITY_TEMPLATE_ID" = inserted."ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_INSTANCE_STATUS_TYPE_CODE" = inserted."ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "ACTIVITY_DATA_JSON" = inserted."ACTIVITY_DATA_JSON",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_ACTIVITY_INSTANCE.ACTIVITY_INSTANCE_ID = inserted.ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AIPRFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_AIPRFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AIPRFL_A_S_IUD_TR] ON PIMS_ACT_INST_PROP_RSRCH_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACT_INST_PROP_RSRCH_FILE_HIST set END_DATE_HIST = @curr_date where ACT_INST_PROP_RSRCH_FILE_ID in (select ACT_INST_PROP_RSRCH_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACT_INST_PROP_RSRCH_FILE_HIST ([ACT_INST_PROP_RSRCH_FILE_ID], [ACTIVITY_INSTANCE_ID], [PROPERTY_RESEARCH_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACT_INST_PROP_RSRCH_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACT_INST_PROP_RSRCH_FILE_ID], [ACTIVITY_INSTANCE_ID], [PROPERTY_RESEARCH_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE_H_ID_SEQ]) as [_ACT_INST_PROP_RSRCH_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINS_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACTINS_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINS_A_S_IUD_TR] ON PIMS_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where ACTIVITY_INSTANCE_ID in (select ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_INSTANCE_HIST ([ACTIVITY_INSTANCE_ID], [ACTIVITY_TEMPLATE_ID], [ACTIVITY_INSTANCE_STATUS_TYPE_CODE], [DESCRIPTION], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_INSTANCE_ID], [ACTIVITY_TEMPLATE_ID], [ACTIVITY_INSTANCE_STATUS_TYPE_CODE], [DESCRIPTION], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTIST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTIST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTIST_I_S_I_TR] ON PIMS_ACTIVITY_INSTANCE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_INSTANCE_STATUS_TYPE ("ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTTMP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTTMP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTTMP_I_S_I_TR] ON PIMS_ACTIVITY_TEMPLATE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_TEMPLATE ("ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_TEMPLATE_TYPE_CODE",
      "ACTIVITY_TEMPLATE_JSON",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_TEMPLATE_TYPE_CODE",
      "ACTIVITY_TEMPLATE_JSON",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AIPRFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AIPRFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AIPRFL_I_S_U_TR] ON PIMS_ACT_INST_PROP_RSRCH_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACT_INST_PROP_RSRCH_FILE_ID = deleted.ACT_INST_PROP_RSRCH_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACT_INST_PROP_RSRCH_FILE
    set "ACT_INST_PROP_RSRCH_FILE_ID" = inserted."ACT_INST_PROP_RSRCH_FILE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "PROPERTY_RESEARCH_FILE_ID" = inserted."PROPERTY_RESEARCH_FILE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACT_INST_PROP_RSRCH_FILE
    inner join inserted
    on (PIMS_ACT_INST_PROP_RSRCH_FILE.ACT_INST_PROP_RSRCH_FILE_ID = inserted.ACT_INST_PROP_RSRCH_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTDOC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTDOC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTDOC_I_S_I_TR] ON PIMS_ACTIVITY_INSTANCE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_INSTANCE_DOCUMENT ("ACTIVITY_INSTANCE_DOCUMENT_ID",
      "ACTIVITY_INSTANCE_ID",
      "DOCUMENT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_INSTANCE_DOCUMENT_ID",
      "ACTIVITY_INSTANCE_ID",
      "DOCUMENT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSACIN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LSACIN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSACIN_A_S_IUD_TR] ON PIMS_LEASE_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where LEASE_ACTIVITY_INSTANCE_ID in (select LEASE_ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_ACTIVITY_INSTANCE_HIST ([LEASE_ACTIVITY_INSTANCE_ID], [ACTIVITY_INSTANCE_ID], [LEASE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_ACTIVITY_INSTANCE_ID], [ACTIVITY_INSTANCE_ID], [LEASE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_LEASE_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_I_TR] ON PIMS_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY ("PROPERTY_ID",
      "PROPERTY_MANAGER_ID",
      "PROP_MGMT_ORG_ID",
      "PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME",
      "DESCRIPTION",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER",
      "ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "NOTES",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE",
      "IS_PROVINCIAL_PUBLIC_HWY",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ZONING",
      "ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ID",
      "PROPERTY_MANAGER_ID",
      "PROP_MGMT_ORG_ID",
      "PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME",
      "DESCRIPTION",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER",
      "ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "NOTES",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE",
      "IS_PROVINCIAL_PUBLIC_HWY",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ZONING",
      "ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSACIN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSACIN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSACIN_I_S_U_TR] ON PIMS_LEASE_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_ACTIVITY_INSTANCE_ID = deleted.LEASE_ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_ACTIVITY_INSTANCE
    set "LEASE_ACTIVITY_INSTANCE_ID" = inserted."LEASE_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_LEASE_ACTIVITY_INSTANCE.LEASE_ACTIVITY_INSTANCE_ID = inserted.LEASE_ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQAIN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQAIN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQAIN_I_S_U_TR] ON PIMS_ACQUISITION_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_ACTIVITY_INSTANCE_ID = deleted.ACQUISITION_ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_ACTIVITY_INSTANCE
    set "ACQUISITION_ACTIVITY_INSTANCE_ID" = inserted."ACQUISITION_ACTIVITY_INSTANCE_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_ACQUISITION_ACTIVITY_INSTANCE.ACQUISITION_ACTIVITY_INSTANCE_ID = inserted.ACQUISITION_ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSCHAI_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_RSCHAI_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSCHAI_A_S_IUD_TR] ON PIMS_RESEARCH_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where RESEARCH_ACTIVITY_INSTANCE_ID in (select RESEARCH_ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST ([RESEARCH_ACTIVITY_INSTANCE_ID], [ACTIVITY_INSTANCE_ID], [RESEARCH_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_ACTIVITY_INSTANCE_ID], [ACTIVITY_INSTANCE_ID], [RESEARCH_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_RESEARCH_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSCHAI_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_RSCHAI_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSCHAI_I_S_I_TR] ON PIMS_RESEARCH_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_ACTIVITY_INSTANCE ("RESEARCH_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID",
      "RESEARCH_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID",
      "RESEARCH_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTMDO_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTMDO_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTMDO_I_S_I_TR] ON PIMS_ACTIVITY_TEMPLATE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_TEMPLATE_DOCUMENT ("ACTIVITY_TEMPLATE_DOCUMENT_ID",
      "DOCUMENT_ID",
      "ACTIVITY_TEMPLATE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_TEMPLATE_DOCUMENT_ID",
      "DOCUMENT_ID",
      "ACTIVITY_TEMPLATE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AIPAFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AIPAFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AIPAFL_I_S_U_TR] ON PIMS_ACT_INST_PROP_ACQ_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACT_INST_PROP_ACQ_FILE_ID = deleted.ACT_INST_PROP_ACQ_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACT_INST_PROP_ACQ_FILE
    set "ACT_INST_PROP_ACQ_FILE_ID" = inserted."ACT_INST_PROP_ACQ_FILE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACT_INST_PROP_ACQ_FILE
    inner join inserted
    on (PIMS_ACT_INST_PROP_ACQ_FILE.ACT_INST_PROP_ACQ_FILE_ID = inserted.ACT_INST_PROP_ACQ_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTTMP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACTTMP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTTMP_A_S_IUD_TR] ON PIMS_ACTIVITY_TEMPLATE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_TEMPLATE_HIST set END_DATE_HIST = @curr_date where ACTIVITY_TEMPLATE_ID in (select ACTIVITY_TEMPLATE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_TEMPLATE_HIST ([ACTIVITY_TEMPLATE_ID], [ACTIVITY_TEMPLATE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_TEMPLATE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_TEMPLATE_ID], [ACTIVITY_TEMPLATE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ]) as [_ACTIVITY_TEMPLATE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTTTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTTTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTTTY_I_S_U_TR] ON PIMS_ACTIVITY_TEMPLATE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_TEMPLATE_TYPE_CODE = deleted.ACTIVITY_TEMPLATE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_TEMPLATE_TYPE
    set "ACTIVITY_TEMPLATE_TYPE_CODE" = inserted."ACTIVITY_TEMPLATE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_TEMPLATE_TYPE
    inner join inserted
    on (PIMS_ACTIVITY_TEMPLATE_TYPE.ACTIVITY_TEMPLATE_TYPE_CODE = inserted.ACTIVITY_TEMPLATE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTDOC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACTDOC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTDOC_A_S_IUD_TR] ON PIMS_ACTIVITY_INSTANCE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where ACTIVITY_INSTANCE_DOCUMENT_ID in (select ACTIVITY_INSTANCE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST ([ACTIVITY_INSTANCE_DOCUMENT_ID], [ACTIVITY_INSTANCE_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_INSTANCE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_INSTANCE_DOCUMENT_ID], [ACTIVITY_INSTANCE_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_H_ID_SEQ]) as [_ACTIVITY_INSTANCE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CMPREQ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CMPREQ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CMPREQ_I_S_U_TR] ON PIMS_COMPENSATION_REQUISITION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.COMPENSATION_REQUISITION_ID = deleted.COMPENSATION_REQUISITION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COMPENSATION_REQUISITION
    set "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_PERSON_ID" = inserted."ACQUISITION_FILE_PERSON_ID",
      "CHART_OF_ACCOUNTS_ID" = inserted."CHART_OF_ACCOUNTS_ID",
      "RESPONSIBILITY_ID" = inserted."RESPONSIBILITY_ID",
      "YEARLY_FINANCIAL_ID" = inserted."YEARLY_FINANCIAL_ID",
      "ALTERNATE_PROJECT_ID" = inserted."ALTERNATE_PROJECT_ID",
      "LEGACY_PAYEE" = inserted."LEGACY_PAYEE",
      "IS_DRAFT" = inserted."IS_DRAFT",
      "IS_PAYMENT_IN_TRUST" = inserted."IS_PAYMENT_IN_TRUST",
      "GST_NUMBER" = inserted."GST_NUMBER",
      "FISCAL_YEAR" = inserted."FISCAL_YEAR",
      "AGREEMENT_DT" = inserted."AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT" = inserted."EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT" = inserted."EXPROP_VESTING_DT",
      "GENERATION_DT" = inserted."GENERATION_DT",
      "FINALIZED_DATE" = inserted."FINALIZED_DATE",
      "SPECIAL_INSTRUCTION" = inserted."SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS" = inserted."DETAILED_REMARKS",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COMPENSATION_REQUISITION
    inner join inserted
    on (PIMS_COMPENSATION_REQUISITION.COMPENSATION_REQUISITION_ID = inserted.COMPENSATION_REQUISITION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AIPAFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AIPAFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AIPAFL_I_S_I_TR] ON PIMS_ACT_INST_PROP_ACQ_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACT_INST_PROP_ACQ_FILE ("ACT_INST_PROP_ACQ_FILE_ID",
      "ACTIVITY_INSTANCE_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACT_INST_PROP_ACQ_FILE_ID",
      "ACTIVITY_INSTANCE_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTINN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINN_I_S_I_TR] ON PIMS_ACTIVITY_INSTANCE_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_INSTANCE_NOTE ("PIMS_ACTIVITY_INSTANCE_NOTE_ID",
      "ACTIVITY_INSTANCE_ID",
      "NOTE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PIMS_ACTIVITY_INSTANCE_NOTE_ID",
      "ACTIVITY_INSTANCE_ID",
      "NOTE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTDOC_I_S_U_TR] ON PIMS_ACTIVITY_INSTANCE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_INSTANCE_DOCUMENT_ID = deleted.ACTIVITY_INSTANCE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_INSTANCE_DOCUMENT
    set "ACTIVITY_INSTANCE_DOCUMENT_ID" = inserted."ACTIVITY_INSTANCE_DOCUMENT_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_INSTANCE_DOCUMENT
    inner join inserted
    on (PIMS_ACTIVITY_INSTANCE_DOCUMENT.ACTIVITY_INSTANCE_DOCUMENT_ID = inserted.ACTIVITY_INSTANCE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTTMP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTTMP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTTMP_I_S_U_TR] ON PIMS_ACTIVITY_TEMPLATE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_TEMPLATE_ID = deleted.ACTIVITY_TEMPLATE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_TEMPLATE
    set "ACTIVITY_TEMPLATE_ID" = inserted."ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_TEMPLATE_TYPE_CODE" = inserted."ACTIVITY_TEMPLATE_TYPE_CODE",
      "ACTIVITY_TEMPLATE_JSON" = inserted."ACTIVITY_TEMPLATE_JSON",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_TEMPLATE
    inner join inserted
    on (PIMS_ACTIVITY_TEMPLATE.ACTIVITY_TEMPLATE_ID = inserted.ACTIVITY_TEMPLATE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AIPAFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_AIPAFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AIPAFL_A_S_IUD_TR] ON PIMS_ACT_INST_PROP_ACQ_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACT_INST_PROP_ACQ_FILE_HIST set END_DATE_HIST = @curr_date where ACT_INST_PROP_ACQ_FILE_ID in (select ACT_INST_PROP_ACQ_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACT_INST_PROP_ACQ_FILE_HIST ([ACT_INST_PROP_ACQ_FILE_ID], [ACTIVITY_INSTANCE_ID], [PROPERTY_ACQUISITION_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACT_INST_PROP_ACQ_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACT_INST_PROP_ACQ_FILE_ID], [ACTIVITY_INSTANCE_ID], [PROPERTY_ACQUISITION_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE_H_ID_SEQ]) as [_ACT_INST_PROP_ACQ_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AIPRFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AIPRFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AIPRFL_I_S_I_TR] ON PIMS_ACT_INST_PROP_RSRCH_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACT_INST_PROP_RSRCH_FILE ("ACT_INST_PROP_RSRCH_FILE_ID",
      "ACTIVITY_INSTANCE_ID",
      "PROPERTY_RESEARCH_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACT_INST_PROP_RSRCH_FILE_ID",
      "ACTIVITY_INSTANCE_ID",
      "PROPERTY_RESEARCH_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINS_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTINS_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINS_I_S_I_TR] ON PIMS_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_INSTANCE ("ACTIVITY_INSTANCE_ID",
      "ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "ACTIVITY_DATA_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_INSTANCE_ID",
      "ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "ACTIVITY_DATA_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTIST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTIST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTIST_I_S_U_TR] ON PIMS_ACTIVITY_INSTANCE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_INSTANCE_STATUS_TYPE_CODE = deleted.ACTIVITY_INSTANCE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_INSTANCE_STATUS_TYPE
    set "ACTIVITY_INSTANCE_STATUS_TYPE_CODE" = inserted."ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_INSTANCE_STATUS_TYPE
    inner join inserted
    on (PIMS_ACTIVITY_INSTANCE_STATUS_TYPE.ACTIVITY_INSTANCE_STATUS_TYPE_CODE = inserted.ACTIVITY_INSTANCE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTMDO_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTMDO_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTMDO_I_S_U_TR] ON PIMS_ACTIVITY_TEMPLATE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_TEMPLATE_DOCUMENT_ID = deleted.ACTIVITY_TEMPLATE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_TEMPLATE_DOCUMENT
    set "ACTIVITY_TEMPLATE_DOCUMENT_ID" = inserted."ACTIVITY_TEMPLATE_DOCUMENT_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "ACTIVITY_TEMPLATE_ID" = inserted."ACTIVITY_TEMPLATE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_TEMPLATE_DOCUMENT
    inner join inserted
    on (PIMS_ACTIVITY_TEMPLATE_DOCUMENT.ACTIVITY_TEMPLATE_DOCUMENT_ID = inserted.ACTIVITY_TEMPLATE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQAIN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQAIN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQAIN_I_S_I_TR] ON PIMS_ACQUISITION_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_ACTIVITY_INSTANCE ("ACQUISITION_ACTIVITY_INSTANCE_ID",
      "ACQUISITION_FILE_ID",
      "ACTIVITY_INSTANCE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_ACTIVITY_INSTANCE_ID",
      "ACQUISITION_FILE_ID",
      "ACTIVITY_INSTANCE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTMDO_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACTMDO_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTMDO_A_S_IUD_TR] ON PIMS_ACTIVITY_TEMPLATE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where ACTIVITY_TEMPLATE_DOCUMENT_ID in (select ACTIVITY_TEMPLATE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST ([ACTIVITY_TEMPLATE_DOCUMENT_ID], [DOCUMENT_ID], [ACTIVITY_TEMPLATE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_TEMPLATE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_TEMPLATE_DOCUMENT_ID], [DOCUMENT_ID], [ACTIVITY_TEMPLATE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_H_ID_SEQ]) as [_ACTIVITY_TEMPLATE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQAIN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQAIN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQAIN_A_S_IUD_TR] ON PIMS_ACQUISITION_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_ACTIVITY_INSTANCE_ID in (select ACQUISITION_ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST ([ACQUISITION_ACTIVITY_INSTANCE_ID], [ACQUISITION_FILE_ID], [ACTIVITY_INSTANCE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_ACTIVITY_INSTANCE_ID], [ACQUISITION_FILE_ID], [ACTIVITY_INSTANCE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_ACQUISITION_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACTINN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINN_A_S_IUD_TR] ON PIMS_ACTIVITY_INSTANCE_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_INSTANCE_NOTE_HIST set END_DATE_HIST = @curr_date where PIMS_ACTIVITY_INSTANCE_NOTE_ID in (select PIMS_ACTIVITY_INSTANCE_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_INSTANCE_NOTE_HIST ([PIMS_ACTIVITY_INSTANCE_NOTE_ID], [ACTIVITY_INSTANCE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_INSTANCE_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PIMS_ACTIVITY_INSTANCE_NOTE_ID], [ACTIVITY_INSTANCE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_H_ID_SEQ]) as [_ACTIVITY_INSTANCE_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSCHAI_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RSCHAI_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSCHAI_I_S_U_TR] ON PIMS_RESEARCH_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_ACTIVITY_INSTANCE_ID = deleted.RESEARCH_ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_ACTIVITY_INSTANCE
    set "RESEARCH_ACTIVITY_INSTANCE_ID" = inserted."RESEARCH_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_RESEARCH_ACTIVITY_INSTANCE.RESEARCH_ACTIVITY_INSTANCE_ID = inserted.RESEARCH_ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_U_TR] ON PIMS_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ID = deleted.PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY
    set "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_MANAGER_ID" = inserted."PROPERTY_MANAGER_ID",
      "PROP_MGMT_ORG_ID" = inserted."PROP_MGMT_ORG_ID",
      "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE" = inserted."PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE" = inserted."PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE" = inserted."PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE" = inserted."SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE" = inserted."VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE" = inserted."VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE" = inserted."PPH_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE" = inserted."PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "PID" = inserted."PID",
      "PIN" = inserted."PIN",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "FILE_NUMBER_SUFFIX" = inserted."FILE_NUMBER_SUFFIX",
      "LAND_AREA" = inserted."LAND_AREA",
      "LAND_LEGAL_DESCRIPTION" = inserted."LAND_LEGAL_DESCRIPTION",
      "BOUNDARY" = inserted."BOUNDARY",
      "LOCATION" = inserted."LOCATION",
      "GENERAL_LOCATION" = inserted."GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER" = inserted."SURVEY_PLAN_NUMBER",
      "ENCUMBRANCE_REASON" = inserted."ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT" = inserted."SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE" = inserted."SURPLUS_DECLARATION_DATE",
      "NOTES" = inserted."NOTES",
      "MUNICIPAL_ZONING" = inserted."MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL" = inserted."IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT" = inserted."VOLUMETRIC_MEASUREMENT",
      "IS_OWNED" = inserted."IS_OWNED",
      "IS_PROPERTY_OF_INTEREST" = inserted."IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES" = inserted."IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE" = inserted."IS_SENSITIVE",
      "IS_PROVINCIAL_PUBLIC_HWY" = inserted."IS_PROVINCIAL_PUBLIC_HWY",
      "PPH_STATUS_UPDATE_USERID" = inserted."PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP" = inserted."PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID" = inserted."PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT" = inserted."IS_RWY_BELT_DOM_PATENT",
      "ZONING" = inserted."ZONING",
      "ZONING_POTENTIAL" = inserted."ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY
    inner join inserted
    on (PIMS_PROPERTY.PROPERTY_ID = inserted.PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTTTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTTTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTTTY_I_S_I_TR] ON PIMS_ACTIVITY_TEMPLATE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_TEMPLATE_TYPE ("ACTIVITY_TEMPLATE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACTIVITY_TEMPLATE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSACIN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LSACIN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSACIN_I_S_I_TR] ON PIMS_LEASE_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_ACTIVITY_INSTANCE ("LEASE_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID",
      "LEASE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID",
      "LEASE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTY_BOUNDARY_IDX
PRINT N'Create index dbo.PRPRTY_BOUNDARY_IDX'
GO
-- [PRPRTY_BOUNDARY_IDX] : Scripting for Spatial Index currently not supported
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTY_LOCATION_IDX
PRINT N'Create index dbo.PRPRTY_LOCATION_IDX'
GO
-- [PRPRTY_LOCATION_IDX] : Scripting for Spatial Index currently not supported
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTTTY_PIM_ACTTMP_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTTTY_PIM_ACTTMP_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE]
	ADD CONSTRAINT [PIM_ACTTTY_PIM_ACTTMP_FK]
	FOREIGN KEY([ACTIVITY_TEMPLATE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACTIVITY_TEMPLATE_TYPE]([ACTIVITY_TEMPLATE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTIST_PIM_ACTINS_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTIST_PIM_ACTINS_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTIST_PIM_ACTINS_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE_STATUS_TYPE]([ACTIVITY_INSTANCE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTTMP_PIM_ACTINS_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTTMP_PIM_ACTINS_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTTMP_PIM_ACTINS_FK]
	FOREIGN KEY([ACTIVITY_TEMPLATE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_TEMPLATE]([ACTIVITY_TEMPLATE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_ACTINN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_ACTINN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_ACTINN_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_NOTE_PIM_ACTINN_FK
PRINT N'Create foreign key constraint dbo.PIM_NOTE_PIM_ACTINN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]
	ADD CONSTRAINT [PIM_NOTE_PIM_ACTINN_FK]
	FOREIGN KEY([NOTE_ID])
	REFERENCES [dbo].[PIMS_NOTE]([NOTE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRSCRC_PIM_AIPRFL_FK
PRINT N'Create foreign key constraint dbo.PIM_PRSCRC_PIM_AIPRFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]
	ADD CONSTRAINT [PIM_PRSCRC_PIM_AIPRFL_FK]
	FOREIGN KEY([PROPERTY_RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_RESEARCH_FILE]([PROPERTY_RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_AIPRFL_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_AIPRFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_AIPRFL_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_ACTMDO_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_ACTMDO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_ACTMDO_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTTMP_PIM_ACTMDO_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTTMP_PIM_ACTMDO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
	ADD CONSTRAINT [PIM_ACTTMP_PIM_ACTMDO_FK]
	FOREIGN KEY([ACTIVITY_TEMPLATE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_TEMPLATE]([ACTIVITY_TEMPLATE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_AIPAFL_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_AIPAFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_AIPAFL_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRACQF_PIM_AIPAFL_FK
PRINT N'Create foreign key constraint dbo.PIM_PRACQF_PIM_AIPAFL_FK'
GO
ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]
	ADD CONSTRAINT [PIM_PRACQF_PIM_AIPAFL_FK]
	FOREIGN KEY([PROPERTY_ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]([PROPERTY_ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_ACTDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_ACTDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_ACTDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_ACTDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_ACTDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
	ADD CONSTRAINT [PIM_ACTINS_PIM_ACTDOC_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_LSACIN_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_LSACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_LEASE_PIM_LSACIN_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_LSACIN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_LSACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_LSACIN_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_ACQAIN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_ACQAIN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_ACQAIN_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQAIN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_ACQAIN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQAIN_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_RESRCH_PIM_RSCHAI_FK
PRINT N'Create foreign key constraint dbo.PIM_RESRCH_PIM_RSCHAI_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_RESRCH_PIM_RSCHAI_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_RSCHAI_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_RSCHAI_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_RSCHAI_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROPERTY_ACTIVITY_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROPERTY_ACTIVITY_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROP_PROP_CLASSIFICATION_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROP_PROP_CLASSIFICATION_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROP_PROP_CLASSIFICATION_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROP_PROP_PURPOSE_HIST
PRINT N'Drop table dbo.PIMS_PROP_PROP_PURPOSE_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROP_PROP_PURPOSE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROP_PROP_PURPOSE_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROP_PROP_PURPOSE_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROP_PROP_PURPOSE_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROPERTY_PURPOSE_TYPE
PRINT N'Drop table dbo.PIMS_PROPERTY_PURPOSE_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_PURPOSE_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROP_PROP_PURPOSE_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROP_PROP_PURPOSE_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROP_PROP_PURPOSE_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROPERTY_CONTACT_HIST
PRINT N'Drop table dbo.PIMS_PROPERTY_CONTACT_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_CONTACT_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROPERTY_CONTACT_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROPERTY_CONTACT_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROPERTY_CONTACT_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROPERTY_CONTACT_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROPERTY_CONTACT_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROPERTY_CONTACT_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
