-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Fri Feb 24 13:26:03 PST 2023
-- Execute this script on:
-- 		PSP_PIMS_S47_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S48_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCDADV_PIM_BCDSCV_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCDADV_PIM_BCDSCV_FK'
GO
ALTER TABLE [dbo].[BCA_DATA_ADVICE_SCHOOL_VALUE]
	DROP CONSTRAINT IF EXISTS [PIM_BCDADV_PIM_BCDSCV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCDADV_PIM_BCDGNV_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCDADV_PIM_BCDGNV_FK'
GO
ALTER TABLE [dbo].[BCA_DATA_ADVICE_GENERAL_VALUE]
	DROP CONSTRAINT IF EXISTS [PIM_BCDADV_PIM_BCDGNV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCDADV_PIM_BCDDEL_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCDADV_PIM_BCDDEL_FK'
GO
ALTER TABLE [dbo].[BCA_DATA_ADVICE_DELETE]
	DROP CONSTRAINT IF EXISTS [PIM_BCDADV_PIM_BCDDEL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCDADV_PIM_BCDTRV_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCDADV_PIM_BCDTRV_FK'
GO
ALTER TABLE [dbo].[BCA_DATA_ADVICE_BCTRANSIT_VALUE]
	DROP CONSTRAINT IF EXISTS [PIM_BCDADV_PIM_BCDTRV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCDADV_PIM_BCDAMD_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCDADV_PIM_BCDAMD_FK'
GO
ALTER TABLE [dbo].[BCA_DATA_ADVICE_AMENDMENT]
	DROP CONSTRAINT IF EXISTS [PIM_BCDADV_PIM_BCDAMD_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAJUR_PIM_BCJSCV_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAJUR_PIM_BCJSCV_FK'
GO
ALTER TABLE [dbo].[BCA_JURISDICTION_SCHOOL_VALUE]
	DROP CONSTRAINT IF EXISTS [PIM_BCAJUR_PIM_BCJSCV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAJUR_PIM_BCJGNV_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAJUR_PIM_BCJGNV_FK'
GO
ALTER TABLE [dbo].[BCA_JURISDICTION_GENERAL_VALUE]
	DROP CONSTRAINT IF EXISTS [PIM_BCAJUR_PIM_BCJGNV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAJUR_PIM_BCJDEL_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAJUR_PIM_BCJDEL_FK'
GO
ALTER TABLE [dbo].[BCA_JURISDICTION_DELETE]
	DROP CONSTRAINT IF EXISTS [PIM_BCAJUR_PIM_BCJDEL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAJUR_PIM_BCJTRV_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAJUR_PIM_BCJTRV_FK'
GO
ALTER TABLE [dbo].[BCA_JURISDICTION_BCTRANSIT_VALUE]
	DROP CONSTRAINT IF EXISTS [PIM_BCAJUR_PIM_BCJTRV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAJUR_PIM_BCJAMD_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAJUR_PIM_BCJAMD_FK'
GO
ALTER TABLE [dbo].[BCA_JURISDICTION_AMENDMENT]
	DROP CONSTRAINT IF EXISTS [PIM_BCAJUR_PIM_BCJAMD_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAOWG_PIM_BCAOWN_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAOWG_PIM_BCAOWN_FK'
GO
ALTER TABLE [dbo].[BCA_OWNER]
	DROP CONSTRAINT IF EXISTS [PIM_BCAOWG_PIM_BCAOWN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCAOWG_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCAOWG_FK'
GO
ALTER TABLE [dbo].[BCA_OWNERSHIP_GROUP]
	DROP CONSTRAINT IF EXISTS [PIM_BCAFOR_PIM_BCAOWG_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCSPRG_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCSPRG_FK'
GO
ALTER TABLE [dbo].[BCA_SPECIFIED_REGIONAL]
	DROP CONSTRAINT IF EXISTS [PIM_BCMNTX_PIM_BCSPRG_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCSPMU_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCSPMU_FK'
GO
ALTER TABLE [dbo].[BCA_SPECIFIED_MUNICIPAL]
	DROP CONSTRAINT IF EXISTS [PIM_BCMNTX_PIM_BCSPMU_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCSVCA_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCSVCA_FK'
GO
ALTER TABLE [dbo].[BCA_SERVICE_AREA]
	DROP CONSTRAINT IF EXISTS [PIM_BCMNTX_PIM_BCSVCA_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCLCLA_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCLCLA_FK'
GO
ALTER TABLE [dbo].[BCA_LOCAL_AREA]
	DROP CONSTRAINT IF EXISTS [PIM_BCMNTX_PIM_BCLCLA_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCISLT_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCISLT_FK'
GO
ALTER TABLE [dbo].[BCA_ISLANDS_TRUST]
	DROP CONSTRAINT IF EXISTS [PIM_BCMNTX_PIM_BCISLT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCIMPD_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCIMPD_FK'
GO
ALTER TABLE [dbo].[BCA_IMPROVEMENT_DISTRICT]
	DROP CONSTRAINT IF EXISTS [PIM_BCMNTX_PIM_BCIMPD_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCGSVC_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCGSVC_FK'
GO
ALTER TABLE [dbo].[BCA_GENERAL_SERVICE]
	DROP CONSTRAINT IF EXISTS [PIM_BCMNTX_PIM_BCGSVC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCELCT_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCELCT_FK'
GO
ALTER TABLE [dbo].[BCA_ELECTORAL_AREA]
	DROP CONSTRAINT IF EXISTS [PIM_BCMNTX_PIM_BCELCT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCADFN_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCMNTX_PIM_BCADFN_FK'
GO
ALTER TABLE [dbo].[BCA_DEFINED]
	DROP CONSTRAINT IF EXISTS [PIM_BCMNTX_PIM_BCADFN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCMNTX_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCMNTX_FK'
GO
ALTER TABLE [dbo].[BCA_MINOR_TAXING]
	DROP CONSTRAINT IF EXISTS [PIM_BCAFOR_PIM_BCMNTX_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCAVAL_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCAVAL_FK'
GO
ALTER TABLE [dbo].[BCA_FOLIO_VALUATION]
	DROP CONSTRAINT IF EXISTS [PIM_BCAFOR_PIM_BCAVAL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCFSCV_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCFSCV_FK'
GO
ALTER TABLE [dbo].[BCA_FOLIO_SCHOOL_VALUE]
	DROP CONSTRAINT IF EXISTS [PIM_BCAFOR_PIM_BCFSCV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCAFSA_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCAFSA_FK'
GO
ALTER TABLE [dbo].[BCA_FOLIO_SALES]
	DROP CONSTRAINT IF EXISTS [PIM_BCAFOR_PIM_BCAFSA_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCOILG_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCOILG_FK'
GO
ALTER TABLE [dbo].[BCA_FOLIO_OIL_AND_GAS]
	DROP CONSTRAINT IF EXISTS [PIM_BCAFOR_PIM_BCOILG_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCMANH_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCMANH_FK'
GO
ALTER TABLE [dbo].[BCA_FOLIO_MANUFACTURED_HOME]
	DROP CONSTRAINT IF EXISTS [PIM_BCAFOR_PIM_BCMANH_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCMFOR_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCMFOR_FK'
GO
ALTER TABLE [dbo].[BCA_FOLIO_MANAGED_FOREST]
	DROP CONSTRAINT IF EXISTS [PIM_BCAFOR_PIM_BCMFOR_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCAFLD_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCAFLD_FK'
GO
ALTER TABLE [dbo].[BCA_FOLIO_LEGAL_DESCRIPTION]
	DROP CONSTRAINT IF EXISTS [PIM_BCAFOR_PIM_BCAFLD_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCLCHR_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCLCHR_FK'
GO
ALTER TABLE [dbo].[BCA_FOLIO_LAND_CHARACTERISTIC]
	DROP CONSTRAINT IF EXISTS [PIM_BCAFOR_PIM_BCLCHR_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCFGNV_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCFGNV_FK'
GO
ALTER TABLE [dbo].[BCA_FOLIO_GENERAL_VALUE]
	DROP CONSTRAINT IF EXISTS [PIM_BCAFOR_PIM_BCFGNV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCFARM_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCFARM_FK'
GO
ALTER TABLE [dbo].[BCA_FOLIO_FARM]
	DROP CONSTRAINT IF EXISTS [PIM_BCAFOR_PIM_BCFARM_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCAFDE_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCAFDE_FK'
GO
ALTER TABLE [dbo].[BCA_FOLIO_DESCRIPTION]
	DROP CONSTRAINT IF EXISTS [PIM_BCAFOR_PIM_BCAFDE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCFTRV_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCFTRV_FK'
GO
ALTER TABLE [dbo].[BCA_FOLIO_BCTRANSIT_VALUE]
	DROP CONSTRAINT IF EXISTS [PIM_BCAFOR_PIM_BCFTRV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCAFAM_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCAFAM_FK'
GO
ALTER TABLE [dbo].[BCA_FOLIO_AMENDMENT]
	DROP CONSTRAINT IF EXISTS [PIM_BCAFOR_PIM_BCAFAM_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCFADR_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAFOR_PIM_BCFADR_FK'
GO
ALTER TABLE [dbo].[BCA_FOLIO_ADDRESS]
	DROP CONSTRAINT IF EXISTS [PIM_BCAFOR_PIM_BCFADR_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCAJUR_PIM_BCAFOR_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCAJUR_PIM_BCAFOR_FK'
GO
ALTER TABLE [dbo].[BCA_FOLIO_RECORD]
	DROP CONSTRAINT IF EXISTS [PIM_BCAJUR_PIM_BCAFOR_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCASAR_PIM_BCAJUR_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCASAR_PIM_BCAJUR_FK'
GO
ALTER TABLE [dbo].[BCA_JURISDICTION]
	DROP CONSTRAINT IF EXISTS [PIM_BCASAR_PIM_BCAJUR_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCASAR_PIM_BCASCV_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCASAR_PIM_BCASCV_FK'
GO
ALTER TABLE [dbo].[BCA_AREA_SCHOOL_VALUE]
	DROP CONSTRAINT IF EXISTS [PIM_BCASAR_PIM_BCASCV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCASAR_PIM_BCAGNV_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCASAR_PIM_BCAGNV_FK'
GO
ALTER TABLE [dbo].[BCA_AREA_GENERAL_VALUE]
	DROP CONSTRAINT IF EXISTS [PIM_BCASAR_PIM_BCAGNV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCASAR_PIM_BCADEL_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCASAR_PIM_BCADEL_FK'
GO
ALTER TABLE [dbo].[BCA_AREA_DELETE]
	DROP CONSTRAINT IF EXISTS [PIM_BCASAR_PIM_BCADEL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCASAR_PIM_BCATRV_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCASAR_PIM_BCATRV_FK'
GO
ALTER TABLE [dbo].[BCA_AREA_BCTRANSIT_VALUE]
	DROP CONSTRAINT IF EXISTS [PIM_BCASAR_PIM_BCATRV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCASAR_PIM_BCAAMD_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCASAR_PIM_BCAAMD_FK'
GO
ALTER TABLE [dbo].[BCA_AREA_AMENDMENT]
	DROP CONSTRAINT IF EXISTS [PIM_BCASAR_PIM_BCAAMD_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_BCDADV_PIM_BCASAR_FK
PRINT N'Drop foreign key constraint dbo.PIM_BCDADV_PIM_BCASAR_FK'
GO
ALTER TABLE [dbo].[BCA_ASSESSMENT_AREA]
	DROP CONSTRAINT IF EXISTS [PIM_BCDADV_PIM_BCASAR_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTINS_PIM_LSACIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTINS_PIM_LSACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTINS_PIM_LSACIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCDSCV_DATA_ADVICE_ID_IDX
PRINT N'Drop index dbo.BCDSCV_DATA_ADVICE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_DATA_ADVICE_SCHOOL_VALUE].[BCDSCV_DATA_ADVICE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCDGNV_DATA_ADVICE_ID_IDX
PRINT N'Drop index dbo.BCDGNV_DATA_ADVICE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_DATA_ADVICE_GENERAL_VALUE].[BCDGNV_DATA_ADVICE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCDDEL_DATA_ADVICE_ID_IDX
PRINT N'Drop index dbo.BCDDEL_DATA_ADVICE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_DATA_ADVICE_DELETE].[BCDDEL_DATA_ADVICE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCDTRV_DATA_ADVICE_ID_IDX
PRINT N'Drop index dbo.BCDTRV_DATA_ADVICE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_DATA_ADVICE_BCTRANSIT_VALUE].[BCDTRV_DATA_ADVICE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCDAMD_DATA_ADVICE_ID_IDX
PRINT N'Drop index dbo.BCDAMD_DATA_ADVICE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_DATA_ADVICE_AMENDMENT].[BCDAMD_DATA_ADVICE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCJSCV_JURISDICTION_CODE_IDX
PRINT N'Drop index dbo.BCJSCV_JURISDICTION_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_JURISDICTION_SCHOOL_VALUE].[BCJSCV_JURISDICTION_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCJGNV_JURISDICTION_CODE_IDX
PRINT N'Drop index dbo.BCJGNV_JURISDICTION_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_JURISDICTION_GENERAL_VALUE].[BCJGNV_JURISDICTION_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCJDEL_JURISDICTION_CODE_IDX
PRINT N'Drop index dbo.BCJDEL_JURISDICTION_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_JURISDICTION_DELETE].[BCJDEL_JURISDICTION_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCJTRV_JURISDICTION_CODE_IDX
PRINT N'Drop index dbo.BCJTRV_JURISDICTION_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_JURISDICTION_BCTRANSIT_VALUE].[BCJTRV_JURISDICTION_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCJAMD_JURISDICTION_CODE_IDX
PRINT N'Drop index dbo.BCJAMD_JURISDICTION_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_JURISDICTION_AMENDMENT].[BCJAMD_JURISDICTION_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCAOWN_OWNERSHIP_GROUP_ID_IDX
PRINT N'Drop index dbo.BCAOWN_OWNERSHIP_GROUP_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_OWNER].[BCAOWN_OWNERSHIP_GROUP_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCAOWG_ROLL_NUMBER_IDX
PRINT N'Drop index dbo.BCAOWG_ROLL_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_OWNERSHIP_GROUP].[BCAOWG_ROLL_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCSPRG_MINOR_TAXING_ID_IDX
PRINT N'Drop index dbo.BCSPRG_MINOR_TAXING_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_SPECIFIED_REGIONAL].[BCSPRG_MINOR_TAXING_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCSPMU_MINOR_TAXING_ID_IDX
PRINT N'Drop index dbo.BCSPMU_MINOR_TAXING_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_SPECIFIED_MUNICIPAL].[BCSPMU_MINOR_TAXING_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCSVCA_MINOR_TAXING_ID_IDX
PRINT N'Drop index dbo.BCSVCA_MINOR_TAXING_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_SERVICE_AREA].[BCSVCA_MINOR_TAXING_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCLCLA_MINOR_TAXING_ID_IDX
PRINT N'Drop index dbo.BCLCLA_MINOR_TAXING_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_LOCAL_AREA].[BCLCLA_MINOR_TAXING_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCISLT_MINOR_TAXING_ID_IDX
PRINT N'Drop index dbo.BCISLT_MINOR_TAXING_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_ISLANDS_TRUST].[BCISLT_MINOR_TAXING_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCIMPD_MINOR_TAXING_ID_IDX
PRINT N'Drop index dbo.BCIMPD_MINOR_TAXING_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_IMPROVEMENT_DISTRICT].[BCIMPD_MINOR_TAXING_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCGSVC_MINOR_TAXING_ID_IDX
PRINT N'Drop index dbo.BCGSVC_MINOR_TAXING_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_GENERAL_SERVICE].[BCGSVC_MINOR_TAXING_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCELCT_MINOR_TAXING_ID_IDX
PRINT N'Drop index dbo.BCELCT_MINOR_TAXING_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_ELECTORAL_AREA].[BCELCT_MINOR_TAXING_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCADFN_MINOR_TAXING_ID_IDX
PRINT N'Drop index dbo.BCADFN_MINOR_TAXING_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_DEFINED].[BCADFN_MINOR_TAXING_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCMNTX_ROLL_NUMBER_IDX
PRINT N'Drop index dbo.BCMNTX_ROLL_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_MINOR_TAXING].[BCMNTX_ROLL_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCAVAL_ROLL_NUMBER_IDX
PRINT N'Drop index dbo.BCAVAL_ROLL_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_FOLIO_VALUATION].[BCAVAL_ROLL_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCFSCV_ROLL_NUMBER_IDX
PRINT N'Drop index dbo.BCFSCV_ROLL_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_FOLIO_SCHOOL_VALUE].[BCFSCV_ROLL_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCAFSA_ROLL_NUMBER_IDX
PRINT N'Drop index dbo.BCAFSA_ROLL_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_FOLIO_SALES].[BCAFSA_ROLL_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCOILG_ROLL_NUMBER_IDX
PRINT N'Drop index dbo.BCOILG_ROLL_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_FOLIO_OIL_AND_GAS].[BCOILG_ROLL_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCMANH_ROLL_NUMBER_IDX
PRINT N'Drop index dbo.BCMANH_ROLL_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_FOLIO_MANUFACTURED_HOME].[BCMANH_ROLL_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCMFOR_ROLL_NUMBER_IDX
PRINT N'Drop index dbo.BCMFOR_ROLL_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_FOLIO_MANAGED_FOREST].[BCMFOR_ROLL_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCAFLD_ROLL_NUMBER_IDX
PRINT N'Drop index dbo.BCAFLD_ROLL_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_FOLIO_LEGAL_DESCRIPTION].[BCAFLD_ROLL_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCLCHR_ROLL_NUMBER_IDX
PRINT N'Drop index dbo.BCLCHR_ROLL_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_FOLIO_LAND_CHARACTERISTIC].[BCLCHR_ROLL_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCFGNV_ROLL_NUMBER_IDX
PRINT N'Drop index dbo.BCFGNV_ROLL_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_FOLIO_GENERAL_VALUE].[BCFGNV_ROLL_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCFARM_ROLL_NUMBER_IDX
PRINT N'Drop index dbo.BCFARM_ROLL_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_FOLIO_FARM].[BCFARM_ROLL_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCAFDE_ROLL_NUMBER_IDX
PRINT N'Drop index dbo.BCAFDE_ROLL_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_FOLIO_DESCRIPTION].[BCAFDE_ROLL_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCFTRV_ROLL_NUMBER_IDX
PRINT N'Drop index dbo.BCFTRV_ROLL_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_FOLIO_BCTRANSIT_VALUE].[BCFTRV_ROLL_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCAFAM_ROLL_NUMBER_IDX
PRINT N'Drop index dbo.BCAFAM_ROLL_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_FOLIO_AMENDMENT].[BCAFAM_ROLL_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCFADR_ROLL_NUMBER_IDX
PRINT N'Drop index dbo.BCFADR_ROLL_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_FOLIO_ADDRESS].[BCFADR_ROLL_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCAFOR_JURISDICTION_CODE_IDX
PRINT N'Drop index dbo.BCAFOR_JURISDICTION_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_FOLIO_RECORD].[BCAFOR_JURISDICTION_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCAJUR_AREA_CODE_IDX
PRINT N'Drop index dbo.BCAJUR_AREA_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_JURISDICTION].[BCAJUR_AREA_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCASCV_AREA_CODE_IDX
PRINT N'Drop index dbo.BCASCV_AREA_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_AREA_SCHOOL_VALUE].[BCASCV_AREA_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCAGNV_AREA_CODE_IDX
PRINT N'Drop index dbo.BCAGNV_AREA_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_AREA_GENERAL_VALUE].[BCAGNV_AREA_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCADEL_AREA_CODE_IDX
PRINT N'Drop index dbo.BCADEL_AREA_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_AREA_DELETE].[BCADEL_AREA_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCATRV_AREA_CODE_IDX
PRINT N'Drop index dbo.BCATRV_AREA_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_AREA_BCTRANSIT_VALUE].[BCATRV_AREA_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCAAMD_AREA_CODE_IDX
PRINT N'Drop index dbo.BCAAMD_AREA_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_AREA_AMENDMENT].[BCAAMD_AREA_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.BCASAR_DATA_ADVICE_ID_IDX
PRINT N'Drop index dbo.BCASAR_DATA_ADVICE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[BCA_ASSESSMENT_AREA].[BCASAR_DATA_ADVICE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RFLPRJ_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_RFLPRJ_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RFLPRJ_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RFLNOT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_RFLNOT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RFLNOT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RFLPRJ_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_RFLPRJ_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RFLPRJ_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RFLPRJ_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_RFLPRJ_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RFLPRJ_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique index dbo.PRODCT_CODE_IDX
PRINT N'Drop unique index dbo.PRODCT_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PRODUCT].[PRODCT_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_DATA_ADVICE_SCHOOL_VALUE
PRINT N'Drop table dbo.BCA_DATA_ADVICE_SCHOOL_VALUE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_DATA_ADVICE_SCHOOL_VALUE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_DATA_ADVICE_GENERAL_VALUE
PRINT N'Drop table dbo.BCA_DATA_ADVICE_GENERAL_VALUE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_DATA_ADVICE_GENERAL_VALUE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_DATA_ADVICE_DELETE
PRINT N'Drop table dbo.BCA_DATA_ADVICE_DELETE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_DATA_ADVICE_DELETE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_DATA_ADVICE_BCTRANSIT_VALUE
PRINT N'Drop table dbo.BCA_DATA_ADVICE_BCTRANSIT_VALUE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_DATA_ADVICE_BCTRANSIT_VALUE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_DATA_ADVICE_AMENDMENT
PRINT N'Drop table dbo.BCA_DATA_ADVICE_AMENDMENT'
GO
DROP TABLE IF EXISTS [dbo].[BCA_DATA_ADVICE_AMENDMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_JURISDICTION_SCHOOL_VALUE
PRINT N'Drop table dbo.BCA_JURISDICTION_SCHOOL_VALUE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_JURISDICTION_SCHOOL_VALUE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_JURISDICTION_GENERAL_VALUE
PRINT N'Drop table dbo.BCA_JURISDICTION_GENERAL_VALUE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_JURISDICTION_GENERAL_VALUE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_JURISDICTION_DELETE
PRINT N'Drop table dbo.BCA_JURISDICTION_DELETE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_JURISDICTION_DELETE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_JURISDICTION_BCTRANSIT_VALUE
PRINT N'Drop table dbo.BCA_JURISDICTION_BCTRANSIT_VALUE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_JURISDICTION_BCTRANSIT_VALUE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_JURISDICTION_AMENDMENT
PRINT N'Drop table dbo.BCA_JURISDICTION_AMENDMENT'
GO
DROP TABLE IF EXISTS [dbo].[BCA_JURISDICTION_AMENDMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.BCAOWN_PK
PRINT N'Drop primary key constraint dbo.BCAOWN_PK'
GO
ALTER TABLE [dbo].[BCA_OWNER]
	DROP CONSTRAINT IF EXISTS [BCAOWN_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_OWNER
PRINT N'Drop table dbo.BCA_OWNER'
GO
DROP TABLE IF EXISTS [dbo].[BCA_OWNER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.BCAOWG_PK
PRINT N'Drop primary key constraint dbo.BCAOWG_PK'
GO
ALTER TABLE [dbo].[BCA_OWNERSHIP_GROUP]
	DROP CONSTRAINT IF EXISTS [BCAOWG_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_OWNERSHIP_GROUP
PRINT N'Drop table dbo.BCA_OWNERSHIP_GROUP'
GO
DROP TABLE IF EXISTS [dbo].[BCA_OWNERSHIP_GROUP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_SPECIFIED_REGIONAL
PRINT N'Drop table dbo.BCA_SPECIFIED_REGIONAL'
GO
DROP TABLE IF EXISTS [dbo].[BCA_SPECIFIED_REGIONAL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_SPECIFIED_MUNICIPAL
PRINT N'Drop table dbo.BCA_SPECIFIED_MUNICIPAL'
GO
DROP TABLE IF EXISTS [dbo].[BCA_SPECIFIED_MUNICIPAL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_SERVICE_AREA
PRINT N'Drop table dbo.BCA_SERVICE_AREA'
GO
DROP TABLE IF EXISTS [dbo].[BCA_SERVICE_AREA]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_LOCAL_AREA
PRINT N'Drop table dbo.BCA_LOCAL_AREA'
GO
DROP TABLE IF EXISTS [dbo].[BCA_LOCAL_AREA]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_ISLANDS_TRUST
PRINT N'Drop table dbo.BCA_ISLANDS_TRUST'
GO
DROP TABLE IF EXISTS [dbo].[BCA_ISLANDS_TRUST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_IMPROVEMENT_DISTRICT
PRINT N'Drop table dbo.BCA_IMPROVEMENT_DISTRICT'
GO
DROP TABLE IF EXISTS [dbo].[BCA_IMPROVEMENT_DISTRICT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_GENERAL_SERVICE
PRINT N'Drop table dbo.BCA_GENERAL_SERVICE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_GENERAL_SERVICE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_ELECTORAL_AREA
PRINT N'Drop table dbo.BCA_ELECTORAL_AREA'
GO
DROP TABLE IF EXISTS [dbo].[BCA_ELECTORAL_AREA]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_DEFINED
PRINT N'Drop table dbo.BCA_DEFINED'
GO
DROP TABLE IF EXISTS [dbo].[BCA_DEFINED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.BCMNTX_PK
PRINT N'Drop primary key constraint dbo.BCMNTX_PK'
GO
ALTER TABLE [dbo].[BCA_MINOR_TAXING]
	DROP CONSTRAINT IF EXISTS [BCMNTX_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_MINOR_TAXING
PRINT N'Drop table dbo.BCA_MINOR_TAXING'
GO
DROP TABLE IF EXISTS [dbo].[BCA_MINOR_TAXING]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_FOLIO_VALUATION
PRINT N'Drop table dbo.BCA_FOLIO_VALUATION'
GO
DROP TABLE IF EXISTS [dbo].[BCA_FOLIO_VALUATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_FOLIO_SCHOOL_VALUE
PRINT N'Drop table dbo.BCA_FOLIO_SCHOOL_VALUE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_FOLIO_SCHOOL_VALUE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_FOLIO_SALES
PRINT N'Drop table dbo.BCA_FOLIO_SALES'
GO
DROP TABLE IF EXISTS [dbo].[BCA_FOLIO_SALES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_FOLIO_OIL_AND_GAS
PRINT N'Drop table dbo.BCA_FOLIO_OIL_AND_GAS'
GO
DROP TABLE IF EXISTS [dbo].[BCA_FOLIO_OIL_AND_GAS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_FOLIO_MANUFACTURED_HOME
PRINT N'Drop table dbo.BCA_FOLIO_MANUFACTURED_HOME'
GO
DROP TABLE IF EXISTS [dbo].[BCA_FOLIO_MANUFACTURED_HOME]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_FOLIO_MANAGED_FOREST
PRINT N'Drop table dbo.BCA_FOLIO_MANAGED_FOREST'
GO
DROP TABLE IF EXISTS [dbo].[BCA_FOLIO_MANAGED_FOREST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_FOLIO_LEGAL_DESCRIPTION
PRINT N'Drop table dbo.BCA_FOLIO_LEGAL_DESCRIPTION'
GO
DROP TABLE IF EXISTS [dbo].[BCA_FOLIO_LEGAL_DESCRIPTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_FOLIO_LAND_CHARACTERISTIC
PRINT N'Drop table dbo.BCA_FOLIO_LAND_CHARACTERISTIC'
GO
DROP TABLE IF EXISTS [dbo].[BCA_FOLIO_LAND_CHARACTERISTIC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_FOLIO_GENERAL_VALUE
PRINT N'Drop table dbo.BCA_FOLIO_GENERAL_VALUE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_FOLIO_GENERAL_VALUE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_FOLIO_FARM
PRINT N'Drop table dbo.BCA_FOLIO_FARM'
GO
DROP TABLE IF EXISTS [dbo].[BCA_FOLIO_FARM]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_FOLIO_DESCRIPTION
PRINT N'Drop table dbo.BCA_FOLIO_DESCRIPTION'
GO
DROP TABLE IF EXISTS [dbo].[BCA_FOLIO_DESCRIPTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_FOLIO_BCTRANSIT_VALUE
PRINT N'Drop table dbo.BCA_FOLIO_BCTRANSIT_VALUE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_FOLIO_BCTRANSIT_VALUE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_FOLIO_AMENDMENT
PRINT N'Drop table dbo.BCA_FOLIO_AMENDMENT'
GO
DROP TABLE IF EXISTS [dbo].[BCA_FOLIO_AMENDMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_FOLIO_ADDRESS
PRINT N'Drop table dbo.BCA_FOLIO_ADDRESS'
GO
DROP TABLE IF EXISTS [dbo].[BCA_FOLIO_ADDRESS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.BCAFOR_PK
PRINT N'Drop primary key constraint dbo.BCAFOR_PK'
GO
ALTER TABLE [dbo].[BCA_FOLIO_RECORD]
	DROP CONSTRAINT IF EXISTS [BCAFOR_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_FOLIO_RECORD
PRINT N'Drop table dbo.BCA_FOLIO_RECORD'
GO
DROP TABLE IF EXISTS [dbo].[BCA_FOLIO_RECORD]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.BCAJUR_PK
PRINT N'Drop primary key constraint dbo.BCAJUR_PK'
GO
ALTER TABLE [dbo].[BCA_JURISDICTION]
	DROP CONSTRAINT IF EXISTS [BCAJUR_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_JURISDICTION
PRINT N'Drop table dbo.BCA_JURISDICTION'
GO
DROP TABLE IF EXISTS [dbo].[BCA_JURISDICTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_AREA_SCHOOL_VALUE
PRINT N'Drop table dbo.BCA_AREA_SCHOOL_VALUE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_AREA_SCHOOL_VALUE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_AREA_GENERAL_VALUE
PRINT N'Drop table dbo.BCA_AREA_GENERAL_VALUE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_AREA_GENERAL_VALUE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_AREA_DELETE
PRINT N'Drop table dbo.BCA_AREA_DELETE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_AREA_DELETE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_AREA_BCTRANSIT_VALUE
PRINT N'Drop table dbo.BCA_AREA_BCTRANSIT_VALUE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_AREA_BCTRANSIT_VALUE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_AREA_AMENDMENT
PRINT N'Drop table dbo.BCA_AREA_AMENDMENT'
GO
DROP TABLE IF EXISTS [dbo].[BCA_AREA_AMENDMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.BCASAR_PK
PRINT N'Drop primary key constraint dbo.BCASAR_PK'
GO
ALTER TABLE [dbo].[BCA_ASSESSMENT_AREA]
	DROP CONSTRAINT IF EXISTS [BCASAR_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_ASSESSMENT_AREA
PRINT N'Drop table dbo.BCA_ASSESSMENT_AREA'
GO
DROP TABLE IF EXISTS [dbo].[BCA_ASSESSMENT_AREA]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.BCDADV_PK
PRINT N'Drop primary key constraint dbo.BCDADV_PK'
GO
ALTER TABLE [dbo].[BCA_DATA_ADVICE]
	DROP CONSTRAINT IF EXISTS [BCDADV_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.BCA_DATA_ADVICE
PRINT N'Drop table dbo.BCA_DATA_ADVICE'
GO
DROP TABLE IF EXISTS [dbo].[BCA_DATA_ADVICE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_TASK_TEMPLATE_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_TASK_TEMPLATE_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_TASK_TEMPLATE_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_WORKFLOW_MODEL_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_WORKFLOW_MODEL_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_WORKFLOW_MODEL_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACTIVITY_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACTIVITY_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACTIVITY_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACTIVITY_MODEL_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACTIVITY_MODEL_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACTIVITY_MODEL_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROJECT_STATUS_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROJECT_STATUS_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROJECT_STATUS_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROJECT_PROPERTY_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROJECT_PROPERTY_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROJECT_PROPERTY_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROJECT_WORKFLOW_MODEL_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROJECT_WORKFLOW_MODEL_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_LEASE_PAYMENT_FORECAST_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_LEASE_PAYMENT_FORECAST_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_LEASE_PAYMENT_FORECAST_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_LEASE_PAYMENT_PERIOD_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_LEASE_PAYMENT_PERIOD_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_LEASE_PAYMENT_PERIOD_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROPERTY_ACTIVITY_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROPERTY_ACTIVITY_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_TASK_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_TASK_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_TASK_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_TAKE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_TAKE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_TAKE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COUNTRY
PRINT N'Alter table dbo.PIMS_COUNTRY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing the countries defined to the system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COUNTRY'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Abbreviated country code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COUNTRY', 
	@level2type = N'Column', @level2name = N'COUNTRY_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Country name/description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COUNTRY', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COUNTRY', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROVINCE_STATE
PRINT N'Alter table dbo.PIMS_PROVINCE_STATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing the provinces and states that are defined for the system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROVINCE_STATE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Abbreviated province.state code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROVINCE_STATE', 
	@level2type = N'Column', @level2name = N'PROVINCE_STATE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Full name/description of the provbince/state.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROVINCE_STATE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if this code is disabled or enabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROVINCE_STATE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROVINCE_STATE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ADDRESS
PRINT N'Alter table dbo.PIMS_ADDRESS'
GO
ALTER TABLE [dbo].[PIMS_ADDRESS] ALTER COLUMN [PROVINCE_STATE_ID] smallint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_TAKE_SITE_CONTAM_TYPE
PRINT N'Create table dbo.PIMS_TAKE_SITE_CONTAM_TYPE'
GO
CREATE TABLE [dbo].[PIMS_TAKE_SITE_CONTAM_TYPE]  ( 
	[TAKE_SITE_CONTAM_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [TKCONT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [TKCONT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [TKCONT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [TKCONT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [TKCONT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [TKCONT_PK] PRIMARY KEY CLUSTERED([TAKE_SITE_CONTAM_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the site contamination type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_SITE_CONTAM_TYPE', 
	@level2type = N'Column', @level2name = N'TAKE_SITE_CONTAM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the site contamination type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_SITE_CONTAM_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_SITE_CONTAM_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Tables that contains the codes and associated descriptions of the site contamination types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_SITE_CONTAM_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_TAKE_STATUS_TYPE
PRINT N'Create table dbo.PIMS_TAKE_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_TAKE_STATUS_TYPE]  ( 
	[TAKE_STATUS_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [TKSTST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [TKSTST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [TKSTST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [TKSTST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [TKSTST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [TKSTST_PK] PRIMARY KEY CLUSTERED([TAKE_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the take status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'TAKE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the take status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Tables that contains the codes and associated descriptions of the property take status types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_TAKE_TYPE
PRINT N'Create table dbo.PIMS_TAKE_TYPE'
GO
CREATE TABLE [dbo].[PIMS_TAKE_TYPE]  ( 
	[TAKE_TYPE_CODE]            	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [TKTYPE_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [TKTYPE_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [TKTYPE_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [TKTYPE_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [TKTYPE_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [TKTYPE_PK] PRIMARY KEY CLUSTERED([TAKE_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the take type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'TAKE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the take type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Tables that contains the codes and associated descriptions of the property take types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_TAKE
PRINT N'Create table dbo.PIMS_TAKE'
GO
CREATE TABLE [dbo].[PIMS_TAKE]  ( 
	[TAKE_ID]                       	bigint NOT NULL CONSTRAINT [TAKE_TAKE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_TAKE_ID_SEQ]),
	[PROPERTY_ACQUISITION_FILE_ID]  	bigint NOT NULL,
	[TAKE_TYPE_CODE]                	nvarchar(20) NULL,
	[TAKE_STATUS_TYPE_CODE]         	nvarchar(20) NOT NULL CONSTRAINT [TAKE_TAKE_STATUS_TYPE_CODE_DEF]  DEFAULT ('INPROGRESS'),
	[TAKE_SITE_CONTAM_TYPE_CODE]    	nvarchar(20) NOT NULL CONSTRAINT [TAKE_TAKE_SITE_CONTAM_TYPE_CODE_DEF]  DEFAULT ('UNK'),
	[DESCRIPTION]                   	nvarchar(4000) NULL,
	[NEW_RIGHT_OF_WAY_AREA]         	real NULL,
	[STATUTORY_RIGHT_OF_WAY_AREA]   	real NULL,
	[SRW_END_DT]                    	date NULL,
	[LICENSE_TO_CONSTRUCT_AREA]     	real NULL,
	[LTC_END_DT]                    	date NULL,
	[SECTION_16_AREA]               	real NULL,
	[SECTION_16_END_DT]             	date NULL,
	[IS_SURPLUS_SEVERANCE]          	bit NULL CONSTRAINT [TAKE_IS_SURPLUS_SEVERANCE_DEF]  DEFAULT (CONVERT([bit],(0))),
	[SURPLUS_SEVERANCE_AREA]        	real NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [TAKE_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [TAKE_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [TAKE_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [TAKE_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [TAKE_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [TAKE_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [TAKE_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [TAKE_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [TAKE_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [TAKE_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [TAKE_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [TAKE_PK] PRIMARY KEY CLUSTERED([TAKE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the property take.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Area of the new right-of-way.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'NEW_RIGHT_OF_WAY_AREA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Area of the statutory right-of-way.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'STATUTORY_RIGHT_OF_WAY_AREA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'End date of the statutory right-of-way.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'SRW_END_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Area of the license to construct.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'LICENSE_TO_CONSTRUCT_AREA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'End date of the license to construct.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'LTC_END_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Area of the Section 16 activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'SECTION_16_AREA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'End date of the Section 16 activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'SECTION_16_END_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is there Surplus/Severance?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'IS_SURPLUS_SEVERANCE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Surplus/severance area.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE', 
	@level2type = N'Column', @level2name = N'SURPLUS_SEVERANCE_AREA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table defining the take related to a specific acquisition file and property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROJECT_NOTE
PRINT N'Create table dbo.PIMS_PROJECT_NOTE'
GO
CREATE TABLE [dbo].[PIMS_PROJECT_NOTE]  ( 
	[PROJECT_NOTE_ID]               	bigint NOT NULL CONSTRAINT [PRJNOT_PROJECT_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_NOTE_ID_SEQ]),
	[PROJECT_ID]                    	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [PRJNOT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRJNOT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRJNOT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRJNOT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRJNOT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRJNOT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRJNOT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRJNOT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRJNOT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRJNOT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRJNOT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRJNOT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRJNOT_PK] PRIMARY KEY CLUSTERED([PROJECT_NOTE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT_NOTE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PRJNOT_PROJECT_NOTE_TUC
PRINT N'Create unique constraint dbo.PRJNOT_PROJECT_NOTE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_NOTE]
	ADD CONSTRAINT [PRJNOT_PROJECT_NOTE_TUC]
	UNIQUE ([NOTE_ID], [PROJECT_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROJECT_DOCUMENT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROJECT_DOCUMENT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROJECT_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROJECT_DOCUMENT
PRINT N'Create table dbo.PIMS_PROJECT_DOCUMENT'
GO
CREATE TABLE [dbo].[PIMS_PROJECT_DOCUMENT]  ( 
	[PROJECT_DOCUMENT_ID]           	bigint NOT NULL CONSTRAINT [PRJDOC_PROJECT_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_DOCUMENT_ID_SEQ]),
	[PROJECT_ID]                    	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [PRJDOC_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRJDOC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRJDOC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRJDOC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRJDOC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRJDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRJDOC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRJDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRJDOC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRJDOC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRJDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRJDOC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRJDOC_PK] PRIMARY KEY CLUSTERED([PROJECT_DOCUMENT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROJECT_DOCUMENT', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PRJDOC_PROJECT_DOCUMENT_TUC
PRINT N'Create unique constraint dbo.PRJDOC_PROJECT_DOCUMENT_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_DOCUMENT]
	ADD CONSTRAINT [PRJDOC_PROJECT_DOCUMENT_TUC]
	UNIQUE ([DOCUMENT_ID], [PROJECT_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE
PRINT N'Alter table dbo.PIMS_LEASE'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	ADD [PROJECT_ID] bigint NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Project associated with this lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'PROJECT_ID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROJECT_DOCUMENT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROJECT_DOCUMENT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROJECT_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROJECT_DOCUMENT_HIST
PRINT N'Create table dbo.PIMS_PROJECT_DOCUMENT_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROJECT_DOCUMENT_HIST]  ( 
	[_PROJECT_DOCUMENT_HIST_ID]     	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROJECT_DOCUMENT_ID]           	bigint NOT NULL,
	[PROJECT_ID]                    	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRJDOC_H_PK] PRIMARY KEY CLUSTERED([_PROJECT_DOCUMENT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRJDOC_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRJDOC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_PRJDOC_H_UK]
	UNIQUE ([_PROJECT_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_HIST
PRINT N'Alter table dbo.PIMS_LEASE_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_HIST]
	ADD [PROJECT_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROJECT_NOTE_HIST
PRINT N'Create table dbo.PIMS_PROJECT_NOTE_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROJECT_NOTE_HIST]  ( 
	[_PROJECT_NOTE_HIST_ID]         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROJECT_NOTE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROJECT_NOTE_ID]               	bigint NOT NULL,
	[PROJECT_ID]                    	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRJNOT_H_PK] PRIMARY KEY CLUSTERED([_PROJECT_NOTE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRJNOT_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRJNOT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_NOTE_HIST]
	ADD CONSTRAINT [PIMS_PRJNOT_H_UK]
	UNIQUE ([_PROJECT_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_TAKE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_TAKE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_TAKE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_TAKE_HIST
PRINT N'Create table dbo.PIMS_TAKE_HIST'
GO
CREATE TABLE [dbo].[PIMS_TAKE_HIST]  ( 
	[_TAKE_HIST_ID]                 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_TAKE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[TAKE_ID]                       	bigint NOT NULL,
	[PROPERTY_ACQUISITION_FILE_ID]  	bigint NOT NULL,
	[TAKE_TYPE_CODE]                	nvarchar(20) NULL,
	[TAKE_STATUS_TYPE_CODE]         	nvarchar(20) NOT NULL,
	[TAKE_SITE_CONTAM_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(4000) NULL,
	[NEW_RIGHT_OF_WAY_AREA]         	real NULL,
	[STATUTORY_RIGHT_OF_WAY_AREA]   	real NULL,
	[SRW_END_DT]                    	date NULL,
	[LICENSE_TO_CONSTRUCT_AREA]     	real NULL,
	[LTC_END_DT]                    	date NULL,
	[SECTION_16_AREA]               	real NULL,
	[SECTION_16_END_DT]             	date NULL,
	[IS_SURPLUS_SEVERANCE]          	bit NULL,
	[SURPLUS_SEVERANCE_AREA]        	real NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_TAKE_H_PK] PRIMARY KEY CLUSTERED([_TAKE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_TAKE_H_UK
PRINT N'Create unique constraint dbo.PIMS_TAKE_H_UK'
GO
ALTER TABLE [dbo].[PIMS_TAKE_HIST]
	ADD CONSTRAINT [PIMS_TAKE_H_UK]
	UNIQUE ([_TAKE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ADDRESS_HIST
PRINT N'Alter table dbo.PIMS_ADDRESS_HIST'
GO
ALTER TABLE [dbo].[PIMS_ADDRESS_HIST] ALTER COLUMN [PROVINCE_STATE_ID] smallint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create function dbo.pims_IsUniqueProduct
PRINT N'Create function dbo.pims_IsUniqueProduct'
GO
-- --------------------------------------------------------------------------------------------
-- Create function pims_IsUniqueProduct 
-- --------------------------------------------------------------------------------------------
CREATE FUNCTION [dbo].[pims_IsUniqueProduct] (@prmCode nvarchar(20), @prmDesc nvarchar(200))
RETURNS nvarchar(1)
AS
BEGIN
  DECLARE @IsUnique nvarchar(1);
  SET     @IsUnique = 'Y';
  
--  IF (SELECT COUNT(*)
--      FROM   PIMS_PRODUCT) = 0
--    RETURN @IsUnique
  
  IF (SELECT COUNT(*)
      FROM   PIMS_PRODUCT
      WHERE  UPPER(TRIM(CODE) + TRIM(DESCRIPTION)) = UPPER(TRIM(@prmCode) + TRIM(@prmDesc))) > 0
    SET @IsUnique = 'N';
    
  RETURN @IsUnique;
END

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique index dbo.PRODCT_CODE_DESC_UK_IDX
PRINT N'Create unique index dbo.PRODCT_CODE_DESC_UK_IDX'
GO
CREATE UNIQUE NONCLUSTERED INDEX [PRODCT_CODE_DESC_UK_IDX]
	ON [dbo].[PIMS_PRODUCT]([CODE], [DESCRIPTION])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.TAKE_TAKE_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.TAKE_TAKE_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [TAKE_TAKE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_TAKE]([TAKE_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.TAKE_TAKE_SITE_CONTAM_TYPE_CODE_IDX
PRINT N'Create index dbo.TAKE_TAKE_SITE_CONTAM_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [TAKE_TAKE_SITE_CONTAM_TYPE_CODE_IDX]
	ON [dbo].[PIMS_TAKE]([TAKE_SITE_CONTAM_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRJNOT_PROJECT_ID_IDX
PRINT N'Create index dbo.PRJNOT_PROJECT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRJNOT_PROJECT_ID_IDX]
	ON [dbo].[PIMS_PROJECT_NOTE]([PROJECT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRJDOC_DOCUMENT_ID_IDX
PRINT N'Create index dbo.PRJDOC_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRJDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_PROJECT_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRJDOC_PROJECT_ID_IDX
PRINT N'Create index dbo.PRJDOC_PROJECT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRJDOC_PROJECT_ID_IDX]
	ON [dbo].[PIMS_PROJECT_DOCUMENT]([PROJECT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRJNOT_NOTE_ID_IDX
PRINT N'Create index dbo.PRJNOT_NOTE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRJNOT_NOTE_ID_IDX]
	ON [dbo].[PIMS_PROJECT_NOTE]([NOTE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRODCT_CODE_IDX
PRINT N'Create index dbo.PRODCT_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRODCT_CODE_IDX]
	ON [dbo].[PIMS_PRODUCT]([CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.TAKE_TAKE_TYPE_CODE_IDX
PRINT N'Create index dbo.TAKE_TAKE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [TAKE_TAKE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_TAKE]([TAKE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.TAKE_PROPERTY_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.TAKE_PROPERTY_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [TAKE_PROPERTY_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_TAKE]([PROPERTY_ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLPRJ_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_RFLPRJ_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RFLPRJ_A_S_IUD_TR] ON PIMS_RESEARCH_FILE_PROJECT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_PROJECT_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_PROJECT_ID in (select RESEARCH_FILE_PROJECT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_PROJECT_HIST ([RESEARCH_FILE_PROJECT_ID], [RESEARCH_FILE_ID], [PROJECT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_PROJECT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_PROJECT_ID], [RESEARCH_FILE_ID], [PROJECT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_PROJECT_H_ID_SEQ]) as [_RESEARCH_FILE_PROJECT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKSTST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TKSTST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKSTST_I_S_U_TR] ON PIMS_TAKE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_STATUS_TYPE_CODE = deleted.TAKE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE_STATUS_TYPE
    set "TAKE_STATUS_TYPE_CODE" = inserted."TAKE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE_STATUS_TYPE
    inner join inserted
    on (PIMS_TAKE_STATUS_TYPE.TAKE_STATUS_TYPE_CODE = inserted.TAKE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKCONT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_TKCONT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKCONT_I_S_I_TR] ON PIMS_TAKE_SITE_CONTAM_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE_SITE_CONTAM_TYPE ("TAKE_SITE_CONTAM_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TAKE_SITE_CONTAM_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRJDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJDOC_I_S_U_TR] ON PIMS_PROJECT_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_DOCUMENT_ID = deleted.PROJECT_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_DOCUMENT
    set "PROJECT_DOCUMENT_ID" = inserted."PROJECT_DOCUMENT_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_DOCUMENT
    inner join inserted
    on (PIMS_PROJECT_DOCUMENT.PROJECT_DOCUMENT_ID = inserted.PROJECT_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLPRJ_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_RFLPRJ_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RFLPRJ_I_S_I_TR] ON PIMS_RESEARCH_FILE_PROJECT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE_PROJECT ("RESEARCH_FILE_PROJECT_ID",
      "RESEARCH_FILE_ID",
      "PROJECT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_FILE_PROJECT_ID",
      "RESEARCH_FILE_ID",
      "PROJECT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_U_TR] ON PIMS_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_ID = deleted.LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE
    set "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE" = inserted."LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE" = inserted."LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE" = inserted."LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE" = inserted."LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE" = inserted."LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE" = inserted."LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE" = inserted."LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE" = inserted."LEASE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "L_FILE_NO" = inserted."L_FILE_NO",
      "TFA_FILE_NO" = inserted."TFA_FILE_NO",
      "TFA_FILE_NUMBER" = inserted."TFA_FILE_NUMBER",
      "PS_FILE_NO" = inserted."PS_FILE_NO",
      "LEASE_DESCRIPTION" = inserted."LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC" = inserted."LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC" = inserted."LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES" = inserted."LEASE_NOTES",
      "MOTI_CONTACT" = inserted."MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE" = inserted."DOCUMENTATION_REFERENCE",
      "RETURN_NOTES" = inserted."RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE" = inserted."OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE" = inserted."OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE" = inserted."OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE" = inserted."ORIG_START_DATE",
      "ORIG_EXPIRY_DATE" = inserted."ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT" = inserted."LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE" = inserted."RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE" = inserted."INSPECTION_DATE",
      "INSPECTION_NOTES" = inserted."INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA" = inserted."IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG" = inserted."IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT" = inserted."IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED" = inserted."IS_EXPIRED",
      "HAS_PHYSICAL_FILE" = inserted."HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE" = inserted."HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE" = inserted."HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE" = inserted."HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE
    inner join inserted
    on (PIMS_LEASE.LEASE_ID = inserted.LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJNOT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRJNOT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJNOT_I_S_U_TR] ON PIMS_PROJECT_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROJECT_NOTE_ID = deleted.PROJECT_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROJECT_NOTE
    set "PROJECT_NOTE_ID" = inserted."PROJECT_NOTE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROJECT_NOTE
    inner join inserted
    on (PIMS_PROJECT_NOTE.PROJECT_NOTE_ID = inserted.PROJECT_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TAKE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_TAKE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TAKE_I_S_I_TR] ON PIMS_TAKE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE ("TAKE_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "TAKE_TYPE_CODE",
      "TAKE_STATUS_TYPE_CODE",
      "TAKE_SITE_CONTAM_TYPE_CODE",
      "DESCRIPTION",
      "NEW_RIGHT_OF_WAY_AREA",
      "STATUTORY_RIGHT_OF_WAY_AREA",
      "SRW_END_DT",
      "LICENSE_TO_CONSTRUCT_AREA",
      "LTC_END_DT",
      "SECTION_16_AREA",
      "SECTION_16_END_DT",
      "IS_SURPLUS_SEVERANCE",
      "SURPLUS_SEVERANCE_AREA",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "TAKE_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "TAKE_TYPE_CODE",
      "TAKE_STATUS_TYPE_CODE",
      "TAKE_SITE_CONTAM_TYPE_CODE",
      "DESCRIPTION",
      "NEW_RIGHT_OF_WAY_AREA",
      "STATUTORY_RIGHT_OF_WAY_AREA",
      "SRW_END_DT",
      "LICENSE_TO_CONSTRUCT_AREA",
      "LTC_END_DT",
      "SECTION_16_AREA",
      "SECTION_16_END_DT",
      "IS_SURPLUS_SEVERANCE",
      "SURPLUS_SEVERANCE_AREA",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKTYPE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TKTYPE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKTYPE_I_S_U_TR] ON PIMS_TAKE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_TYPE_CODE = deleted.TAKE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE_TYPE
    set "TAKE_TYPE_CODE" = inserted."TAKE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE_TYPE
    inner join inserted
    on (PIMS_TAKE_TYPE.TAKE_TYPE_CODE = inserted.TAKE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLNOT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_RFLNOT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RFLNOT_A_S_IUD_TR] ON PIMS_RESEARCH_FILE_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_NOTE_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_NOTE_ID in (select RESEARCH_FILE_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_NOTE_HIST ([RESEARCH_FILE_NOTE_ID], [RESEARCH_FILE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_NOTE_ID], [RESEARCH_FILE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_NOTE_H_ID_SEQ]) as [_RESEARCH_FILE_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJDOC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRJDOC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJDOC_A_S_IUD_TR] ON PIMS_PROJECT_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_DOCUMENT_HIST set END_DATE_HIST = @curr_date where PROJECT_DOCUMENT_ID in (select PROJECT_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_DOCUMENT_HIST ([PROJECT_DOCUMENT_ID], [PROJECT_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_DOCUMENT_ID], [PROJECT_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_DOCUMENT_H_ID_SEQ]) as [_PROJECT_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJDOC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRJDOC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJDOC_I_S_I_TR] ON PIMS_PROJECT_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_DOCUMENT ("PROJECT_DOCUMENT_ID",
      "PROJECT_ID",
      "DOCUMENT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROJECT_DOCUMENT_ID",
      "PROJECT_ID",
      "DOCUMENT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKSTST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_TKSTST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKSTST_I_S_I_TR] ON PIMS_TAKE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE_STATUS_TYPE ("TAKE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TAKE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LEASE_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_A_S_IUD_TR] ON PIMS_LEASE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_HIST set END_DATE_HIST = @curr_date where LEASE_ID in (select LEASE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_HIST ([LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_H_ID_SEQ]) as [_LEASE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJNOT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRJNOT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJNOT_A_S_IUD_TR] ON PIMS_PROJECT_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROJECT_NOTE_HIST set END_DATE_HIST = @curr_date where PROJECT_NOTE_ID in (select PROJECT_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROJECT_NOTE_HIST ([PROJECT_NOTE_ID], [PROJECT_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROJECT_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROJECT_NOTE_ID], [PROJECT_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROJECT_NOTE_H_ID_SEQ]) as [_PROJECT_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TAKE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TAKE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TAKE_I_S_U_TR] ON PIMS_TAKE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_ID = deleted.TAKE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE
    set "TAKE_ID" = inserted."TAKE_ID",
      "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "TAKE_TYPE_CODE" = inserted."TAKE_TYPE_CODE",
      "TAKE_STATUS_TYPE_CODE" = inserted."TAKE_STATUS_TYPE_CODE",
      "TAKE_SITE_CONTAM_TYPE_CODE" = inserted."TAKE_SITE_CONTAM_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "NEW_RIGHT_OF_WAY_AREA" = inserted."NEW_RIGHT_OF_WAY_AREA",
      "STATUTORY_RIGHT_OF_WAY_AREA" = inserted."STATUTORY_RIGHT_OF_WAY_AREA",
      "SRW_END_DT" = inserted."SRW_END_DT",
      "LICENSE_TO_CONSTRUCT_AREA" = inserted."LICENSE_TO_CONSTRUCT_AREA",
      "LTC_END_DT" = inserted."LTC_END_DT",
      "SECTION_16_AREA" = inserted."SECTION_16_AREA",
      "SECTION_16_END_DT" = inserted."SECTION_16_END_DT",
      "IS_SURPLUS_SEVERANCE" = inserted."IS_SURPLUS_SEVERANCE",
      "SURPLUS_SEVERANCE_AREA" = inserted."SURPLUS_SEVERANCE_AREA",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE
    inner join inserted
    on (PIMS_TAKE.TAKE_ID = inserted.TAKE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LEASE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_I_TR] ON PIMS_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE ("LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "PROJECT_ID",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "TFA_FILE_NUMBER",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "PROJECT_ID",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "TFA_FILE_NUMBER",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TAKE_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_TAKE_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TAKE_A_S_IUD_TR] ON PIMS_TAKE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_TAKE_HIST set END_DATE_HIST = @curr_date where TAKE_ID in (select TAKE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_TAKE_HIST ([TAKE_ID], [PROPERTY_ACQUISITION_FILE_ID], [TAKE_TYPE_CODE], [TAKE_STATUS_TYPE_CODE], [TAKE_SITE_CONTAM_TYPE_CODE], [DESCRIPTION], [NEW_RIGHT_OF_WAY_AREA], [STATUTORY_RIGHT_OF_WAY_AREA], [SRW_END_DT], [LICENSE_TO_CONSTRUCT_AREA], [LTC_END_DT], [SECTION_16_AREA], [SECTION_16_END_DT], [IS_SURPLUS_SEVERANCE], [SURPLUS_SEVERANCE_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _TAKE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [TAKE_ID], [PROPERTY_ACQUISITION_FILE_ID], [TAKE_TYPE_CODE], [TAKE_STATUS_TYPE_CODE], [TAKE_SITE_CONTAM_TYPE_CODE], [DESCRIPTION], [NEW_RIGHT_OF_WAY_AREA], [STATUTORY_RIGHT_OF_WAY_AREA], [SRW_END_DT], [LICENSE_TO_CONSTRUCT_AREA], [LTC_END_DT], [SECTION_16_AREA], [SECTION_16_END_DT], [IS_SURPLUS_SEVERANCE], [SURPLUS_SEVERANCE_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_TAKE_H_ID_SEQ]) as [_TAKE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKCONT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TKCONT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKCONT_I_S_U_TR] ON PIMS_TAKE_SITE_CONTAM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_SITE_CONTAM_TYPE_CODE = deleted.TAKE_SITE_CONTAM_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE_SITE_CONTAM_TYPE
    set "TAKE_SITE_CONTAM_TYPE_CODE" = inserted."TAKE_SITE_CONTAM_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE_SITE_CONTAM_TYPE
    inner join inserted
    on (PIMS_TAKE_SITE_CONTAM_TYPE.TAKE_SITE_CONTAM_TYPE_CODE = inserted.TAKE_SITE_CONTAM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKTYPE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_TKTYPE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKTYPE_I_S_I_TR] ON PIMS_TAKE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE_TYPE ("TAKE_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TAKE_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRJNOT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRJNOT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRJNOT_I_S_I_TR] ON PIMS_PROJECT_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROJECT_NOTE ("PROJECT_NOTE_ID",
      "PROJECT_ID",
      "NOTE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROJECT_NOTE_ID",
      "PROJECT_ID",
      "NOTE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLPRJ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RFLPRJ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RFLPRJ_I_S_U_TR] ON PIMS_RESEARCH_FILE_PROJECT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_PROJECT_ID = deleted.RESEARCH_FILE_PROJECT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE_PROJECT
    set "RESEARCH_FILE_PROJECT_ID" = inserted."RESEARCH_FILE_PROJECT_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_PROJECT
    inner join inserted
    on (PIMS_RESEARCH_FILE_PROJECT.RESEARCH_FILE_PROJECT_ID = inserted.RESEARCH_FILE_PROJECT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_TKSTST_PIM_TAKE_FK
PRINT N'Create foreign key constraint dbo.PIM_TKSTST_PIM_TAKE_FK'
GO
ALTER TABLE [dbo].[PIMS_TAKE]
	ADD CONSTRAINT [PIM_TKSTST_PIM_TAKE_FK]
	FOREIGN KEY([TAKE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_TAKE_STATUS_TYPE]([TAKE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRACQF_PIM_TAKE_FK
PRINT N'Create foreign key constraint dbo.PIM_PRACQF_PIM_TAKE_FK'
GO
ALTER TABLE [dbo].[PIMS_TAKE]
	ADD CONSTRAINT [PIM_PRACQF_PIM_TAKE_FK]
	FOREIGN KEY([PROPERTY_ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]([PROPERTY_ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_TKCONT_PIM_TAKE_FK
PRINT N'Create foreign key constraint dbo.PIM_TKCONT_PIM_TAKE_FK'
GO
ALTER TABLE [dbo].[PIMS_TAKE]
	ADD CONSTRAINT [PIM_TKCONT_PIM_TAKE_FK]
	FOREIGN KEY([TAKE_SITE_CONTAM_TYPE_CODE])
	REFERENCES [dbo].[PIMS_TAKE_SITE_CONTAM_TYPE]([TAKE_SITE_CONTAM_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_TKTYPE_PIM_TAKE_FK
PRINT N'Create foreign key constraint dbo.PIM_TKTYPE_PIM_TAKE_FK'
GO
ALTER TABLE [dbo].[PIMS_TAKE]
	ADD CONSTRAINT [PIM_TKTYPE_PIM_TAKE_FK]
	FOREIGN KEY([TAKE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_TAKE_TYPE]([TAKE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_NOTE_PIM_PRJNOT_FK
PRINT N'Create foreign key constraint dbo.PIM_NOTE_PIM_PRJNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_NOTE]
	ADD CONSTRAINT [PIM_NOTE_PIM_PRJNOT_FK]
	FOREIGN KEY([NOTE_ID])
	REFERENCES [dbo].[PIMS_NOTE]([NOTE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PROJCT_PIM_PRJNOT_FK
PRINT N'Create foreign key constraint dbo.PIM_PROJCT_PIM_PRJNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_NOTE]
	ADD CONSTRAINT [PIM_PROJCT_PIM_PRJNOT_FK]
	FOREIGN KEY([PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PROJCT_PIM_PRJDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_PROJCT_PIM_PRJDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_DOCUMENT]
	ADD CONSTRAINT [PIM_PROJCT_PIM_PRJDOC_FK]
	FOREIGN KEY([PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_PRJDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_PRJDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_PRJDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PROJCT_PIM_LEASE_FK
PRINT N'Create foreign key constraint dbo.PIM_PROJCT_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_PROJCT_PIM_LEASE_FK]
	FOREIGN KEY([PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_LSACIN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_LSACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_LSACIN_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
