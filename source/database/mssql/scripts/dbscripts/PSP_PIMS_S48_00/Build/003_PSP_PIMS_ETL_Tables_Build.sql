-- ****************************************************************************
-- Script to build the required tables for the ETL error logs.
-- ****************************************************************************

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create ETL schema
IF NOT EXISTS (SELECT * 
               FROM   sys.schemas 
               WHERE  name = N'etl')
  EXEC('CREATE SCHEMA [etl]');
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO


-- If there's no dbo.PIMS_DATA SOURCE_TYPE table, create the table and populate 
-- from the existing dbo.PIMS_PROPERTY_DATA_SOURCE_TYPE table.
PRINT N'Create PIMS_DATA_SOURCE_TABLE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
IF NOT EXISTS (SELECT *
               FROM   information_schema.tables 
               where  table_schema = 'dbo'
                  and table_name   = 'PIMS_DATA_SOURCE_TYPE')
  BEGIN
  CREATE TABLE [dbo].[PIMS_DATA_SOURCE_TYPE] (
    [DATA_SOURCE_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DESCRIPTION] NVARCHAR(200) NOT NULL,
    [IS_DISABLED] BIT CONSTRAINT [PIDSRT_IS_DISABLED_DEF] DEFAULT CONVERT([bit],(0)) NOT NULL,
    [DISPLAY_ORDER] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [PIDSRT_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [PIDSRT_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [PIDSRT_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [PIDSRT_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [PIDSRT_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PIDSRT_PK] PRIMARY KEY CLUSTERED ([DATA_SOURCE_TYPE_CODE])
  )
  END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

IF NOT EXISTS (SELECT NULL FROM SYS.EXTENDED_PROPERTIES WHERE [major_id] = OBJECT_ID('PIMS_DATA_SOURCE_TYPE') AND [name] = N'MS_Description' AND [minor_id] = 0)
    EXECUTE sp_addextendedproperty N'MS_Description', N'Describes the source system of the data (PAIMS, LIS, etc.)', 'SCHEMA', N'dbo', 'TABLE', N'PIMS_DATA_SOURCE_TYPE', NULL, NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

IF NOT EXISTS (SELECT NULL FROM SYS.EXTENDED_PROPERTIES WHERE [major_id] = OBJECT_ID('PIMS_DATA_SOURCE_TYPE') AND [name] = N'MS_Description' AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = 'DATA_SOURCE_TYPE_CODE' AND [object_id] = OBJECT_ID('PIMS_DATA_SOURCE_TYPE')))
  EXECUTE sp_addextendedproperty N'MS_Description', N'Code value of the source system of the data (PAIMS, LIS, etc.)', 'SCHEMA', N'dbo', 'TABLE', N'PIMS_DATA_SOURCE_TYPE', 'COLUMN', N'DATA_SOURCE_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

IF NOT EXISTS (SELECT NULL FROM SYS.EXTENDED_PROPERTIES WHERE [major_id] = OBJECT_ID('PIMS_DATA_SOURCE_TYPE') AND [name] = N'MS_Description' AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = 'DESCRIPTION' AND [object_id] = OBJECT_ID('PIMS_DATA_SOURCE_TYPE')))
  EXECUTE sp_addextendedproperty N'MS_Description', N'Description of the source system of the data (PAIMS, LIS, etc.)', 'SCHEMA', N'dbo', 'TABLE', N'PIMS_DATA_SOURCE_TYPE', 'COLUMN', N'DESCRIPTION'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

IF NOT EXISTS (SELECT NULL FROM SYS.EXTENDED_PROPERTIES WHERE [major_id] = OBJECT_ID('PIMS_DATA_SOURCE_TYPE') AND [name] = N'MS_Description' AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = 'IS_DISABLED' AND [object_id] = OBJECT_ID('PIMS_DATA_SOURCE_TYPE')))
  EXECUTE sp_addextendedproperty N'MS_Description', N'Indicates if the code is still in use', 'SCHEMA', N'dbo', 'TABLE', N'PIMS_DATA_SOURCE_TYPE', 'COLUMN', N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

IF NOT EXISTS (SELECT NULL FROM SYS.EXTENDED_PROPERTIES WHERE [major_id] = OBJECT_ID('PIMS_DATA_SOURCE_TYPE') AND [name] = N'MS_Description' AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = 'DISPLAY_ORDER' AND [object_id] = OBJECT_ID('PIMS_DATA_SOURCE_TYPE')))
  EXECUTE sp_addextendedproperty N'MS_Description', N'Defines the default display order of the descriptions', 'SCHEMA', N'dbo', 'TABLE', N'PIMS_DATA_SOURCE_TYPE', 'COLUMN', N'DISPLAY_ORDER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

DECLARE @RowCount INT
SET @RowCount = (SELECT COUNT(*) FROM [dbo].[PIMS_DATA_SOURCE_TYPE])
IF @RowCount = 0
  BEGIN
  INSERT INTO [dbo].[PIMS_DATA_SOURCE_TYPE] (DATA_SOURCE_TYPE_CODE, DESCRIPTION)
  VALUES    
    (N'OPSS', N'Operational Spreadsheet'),
    (N'LIS', N'Lease Information System (LIS)'),
    (N'PAIMS', N'Property Acquisition and Inventory Management System (PAIMS)'),
    (N'GAZ', N'BC Gazette')
  END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO


-- Copy the contents of PIMS_PROPERTY_DATA_SOURCE_TYPE to PIMS_DATA_SOURCE_TYPE
PRINT N'Copy the contents of PIMS_PROPERTY_DATA_SOURCE_TYPE to PIMS_DATA_SOURCE_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
IF EXISTS (SELECT *
           FROM   information_schema.tables 
           where  table_schema = 'dbo'
              and table_name   = 'PIMS_PROPERTY_DATA SOURCE_TYPE')
  BEGIN
  INSERT INTO [dbo].[PIMS_DATA_SOURCE_TYPE] (DATA_SOURCE_TYPE_CODE, DESCRIPTION, IS_DISABLED, DISPLAY_ORDER)
  SELECT PROPERTY_DATA_SOURCE_TYPE_CODE
       , DESCRIPTION
       , IS_DISABLED
       , DISPLAY_ORDER
  FROM   [dbo].[PIMS_PROPERTY_DATA_SOURCE_TYPE]
  END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO


-- Drop table etl.ETL_ERROR_LOG
PRINT N'Drop table etl.ETL_ERROR_LOG'
GO
DROP TABLE IF EXISTS [etl].[ETL_ERROR_LOG]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table etl.ETL_ERROR_LOG
PRINT N'Create table etl.ETL_ERROR_LOG'
GO
CREATE TABLE [etl].[ETL_ERROR_LOG] (
    [ERROR_TIME] DATETIME,
    [ERROR_OPERATION_NAME] NVARCHAR(100),
    [ERROR_TASK_NAME] NVARCHAR(100),
    [ERROR_ETL_NAME] NVARCHAR(100),
    [ERROR_ROW] NVARCHAR(max),
    [ERROR_CODE] INTEGER,
    [ERROR_COLUMN] INTEGER
)   
GO    
IF @@ERROR <> 0 SET NOEXEC ON
GO    


-- Drop table etl.ETL_OPERATIONAL_SS_LOAD
PRINT N'Drop table etl.ETL_OPERATIONAL_SS_LOAD'
GO
DROP TABLE IF EXISTS [etl].[ETL_OPERATIONAL_SS_LOAD]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table etl.ETL_OPERATIONAL_SS_LOAD
PRINT N'Create table etl.ETL_OPERATIONAL_SS_LOAD'
GO
CREATE TABLE [etl].[ETL_OPERATIONAL_SS_LOAD] (
    [SS_TAB_NAME] NVARCHAR(500),
    [LIS_FILE_NO] NVARCHAR(500),
    [PS_FILE_NO] NVARCHAR(500),
    [DISTRICT_NAME] NVARCHAR(500),
    [PROGRAM_NAME] NVARCHAR(500),
    [TENANT_NAME] NVARCHAR(500),
    [CONTACT_NAME] NVARCHAR(500),
    [CONTACT_PHONE_NO_EMAIL] NVARCHAR(500),
    [PHYSICAL_FILE_EXISTS] NVARCHAR(500),
    [DIGITAL_FILE_EXISTS] NVARCHAR(500),
    [COMMENTS] NVARCHAR(max),
    [PHYSICAL_LICENSE_COPY_EXISTS] NVARCHAR(500),
    [DIGITAL_LICENSE_COPY_EXISTS] NVARCHAR(500),
    [FOLIO_NO] NVARCHAR(500),
    [PID] NVARCHAR(500),
    [PROPERTY_LOCN_LEGAL_DESC] NVARCHAR(500),
    [EXPECTED_ANNUAL_PMT_PRE_GST] NVARCHAR(500),
    [PAYMENT_APR] NVARCHAR(500),
    [PAYMENT_MAY] NVARCHAR(500),
    [PAYMENT_JUN] NVARCHAR(500),
    [PAYMENT_JUL] NVARCHAR(500),
    [PAYMENT_AUG] NVARCHAR(500),
    [PAYMENT_SEP] NVARCHAR(500),
    [PAYMENT_OCT] NVARCHAR(500),
    [PAYMENT_NOV] NVARCHAR(500),
    [PAYMENT_DEC] NVARCHAR(500),
    [PAYMENT_JAN] NVARCHAR(500),
    [PAYMENT_FEB] NVARCHAR(500),
    [PAYMENT_MAR] NVARCHAR(500),
    [START_DATE] DATE,
    [EXPIRY_DATE] DATE,
    [NOTES] NVARCHAR(max),
    [BONDING_AMOUNT_HELD] NVARCHAR(500),
    [IS_INSURANCE_IN_PLACE] NVARCHAR(500),
    [INSURANCE_EXPIRY_DATE] DATE,
    [HAS_CHECKED_FOR_EXPIRY] NVARCHAR(500),
    [ErrorCode] INTEGER,
    [ErrorColumn] INTEGER
) 
GO    
IF @@ERROR <> 0 SET NOEXEC ON
GO


-- Create sequence if not exists etl.ETL_DATA_SOURCE_TRACE_ID_SEQ
PRINT N'Create sequence if not exists etl.ETL_DATA_SOURCE_TRACE_ID_SEQ'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
IF NOT EXISTS (SELECT * 
               FROM   sys.objects 
               WHERE  object_id = OBJECT_ID(N'[etl].[ETL_DATA_SOURCE_TRACE_ID_SEQ]')
                  AND type = 'SO')
  CREATE SEQUENCE [etl].[ETL_DATA_SOURCE_TRACE_ID_SEQ]
    AS bigint 
    START WITH 1     
    INCREMENT BY 1 
    MINVALUE  1
    MAXVALUE  2147483647 
    NO CYCLE
    CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO


-- Drop table etl.ETL_DATA_SOURCE_TRACE
PRINT N'Drop table etl.ETL_DATA_SOURCE_TRACE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [etl].[ETL_DATA_SOURCE_TRACE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table etl.ETL_DATA_SOURCE_TRACE
PRINT N'Create table etl.ETL_DATA_SOURCE_TRACE'
GO
CREATE TABLE [etl].[ETL_DATA_SOURCE_TRACE] (
    [DATA_SOURCE_TRACE_ID] BIGINT CONSTRAINT [SRCTRC_DATA_SOURCE_TRACE_ID_DEF] DEFAULT NEXT VALUE FOR [etl].[ETL_DATA_SOURCE_TRACE_ID_SEQ] NOT NULL,
    [DATA_SOURCE_TYPE_CODE] NVARCHAR(20) NOT NULL,
    [DEST_TABLE_NAME] NVARCHAR(100) NOT NULL,
    [DEST_COLUMN_NAME] NVARCHAR(100) NOT NULL,
    [DEST_COLUMN_VALUE] NVARCHAR(500) NOT NULL,
    [SRC_TABLE_NAME] NVARCHAR(100) NOT NULL,
    [SRC_COLUMN_NAME] NVARCHAR(100) NOT NULL,
    [SRC_COLUMN_VALUE] NVARCHAR(500) NOT NULL,
    [ErrorCode] INTEGER,
    [ErrorColumn] INTEGER,
    [CONCURRENCY_CONTROL_NUMBER] BIGINT CONSTRAINT [SRCTRC_CONCURRENCY_CONTROL_NUMBER_DEF] DEFAULT 1 NOT NULL,
    [DB_CREATE_TIMESTAMP] DATETIME CONSTRAINT [SRCTRC_DB_CREATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_CREATE_USERID] NVARCHAR(30) CONSTRAINT [SRCTRC_DB_CREATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    [DB_LAST_UPDATE_TIMESTAMP] DATETIME CONSTRAINT [SRCTRC_DB_LAST_UPDATE_TIMESTAMP_DEF] DEFAULT getutcdate() NOT NULL,
    [DB_LAST_UPDATE_USERID] NVARCHAR(30) CONSTRAINT [SRCTRC_DB_LAST_UPDATE_USERID_DEF] DEFAULT user_name() NOT NULL,
    CONSTRAINT [PK__ETL_DATA__BD9DF3486EC62F1C] PRIMARY KEY CLUSTERED ([DATA_SOURCE_TRACE_ID])
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TABLE [etl].[ETL_DATA_SOURCE_TRACE] ADD CONSTRAINT [PIM_PIDSRT_PIM_SRCTRC_FK] 
    FOREIGN KEY ([DATA_SOURCE_TYPE_CODE]) REFERENCES [dbo].[PIMS_DATA_SOURCE_TYPE] ([DATA_SOURCE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

CREATE NONCLUSTERED INDEX [SRCTRC_DATA_SOURCE_TYPE_CODE_IDX] ON [etl].[ETL_DATA_SOURCE_TRACE] ([DATA_SOURCE_TYPE_CODE] ASC)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

CREATE UNIQUE NONCLUSTERED INDEX [SRCTRC_DATA_SOURCE_UK] ON [etl].[ETL_DATA_SOURCE_TRACE] ([DATA_SOURCE_TYPE_CODE] ASC,[DEST_TABLE_NAME] ASC,[DEST_COLUMN_NAME] ASC,[DEST_COLUMN_VALUE] ASC)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

EXECUTE sp_addextendedproperty N'MS_Description', N'Persistent table to trace the source of ETL data to assist in data matching.', 'SCHEMA', N'etl', 'TABLE', N'ETL_DATA_SOURCE_TRACE', NULL, NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

EXECUTE sp_addextendedproperty N'MS_Description', N'The PIMS destination table name', 'SCHEMA', N'etl', 'TABLE', N'ETL_DATA_SOURCE_TRACE', 'COLUMN', N'DEST_TABLE_NAME'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

EXECUTE sp_addextendedproperty N'MS_Description', N'The PIMS destination column name', 'SCHEMA', N'etl', 'TABLE', N'ETL_DATA_SOURCE_TRACE', 'COLUMN', N'DEST_COLUMN_NAME'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

EXECUTE sp_addextendedproperty N'MS_Description', N'The PIMS destination column value', 'SCHEMA', N'etl', 'TABLE', N'ETL_DATA_SOURCE_TRACE', 'COLUMN', N'DEST_COLUMN_VALUE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

EXECUTE sp_addextendedproperty N'MS_Description', N'The data source table name', 'SCHEMA', N'etl', 'TABLE', N'ETL_DATA_SOURCE_TRACE', 'COLUMN', N'SRC_TABLE_NAME'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

EXECUTE sp_addextendedproperty N'MS_Description', N'The data source column name', 'SCHEMA', N'etl', 'TABLE', N'ETL_DATA_SOURCE_TRACE', 'COLUMN', N'SRC_COLUMN_NAME'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

EXECUTE sp_addextendedproperty N'MS_Description', N'The data source column value', 'SCHEMA', N'etl', 'TABLE', N'ETL_DATA_SOURCE_TRACE', 'COLUMN', N'SRC_COLUMN_VALUE'
GO    
IF @@ERROR <> 0 SET NOEXEC ON
GO   


COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
