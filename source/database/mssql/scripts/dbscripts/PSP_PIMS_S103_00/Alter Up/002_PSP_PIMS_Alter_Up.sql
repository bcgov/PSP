-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Thu Apr 17 13:10:49 PDT 2025
-- Execute this script on:
-- 		PSP_PIMS_S102_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S103_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPACT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPACT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPACT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPACT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPACT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPACT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_MANAGEMENT_FILE_ACTIVITY_ID_SEQ
PRINT N'Create sequence dbo.PIMS_MANAGEMENT_FILE_ACTIVITY_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_MANAGEMENT_FILE_ACTIVITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_MANAGEMENT_FILE_TEAM_ID_SEQ
PRINT N'Create sequence dbo.PIMS_MANAGEMENT_FILE_TEAM_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_MANAGEMENT_FILE_TEAM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_MANAGEMENT_FILE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_MANAGEMENT_FILE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_MANAGEMENT_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_MANAGEMENT_FILE_PROGRAM_TYPE
PRINT N'Create table dbo.PIMS_MANAGEMENT_FILE_PROGRAM_TYPE'
GO
CREATE TABLE [dbo].[PIMS_MANAGEMENT_FILE_PROGRAM_TYPE]  ( 
	[MANAGEMENT_FILE_PROGRAM_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                      	nvarchar(200) NOT NULL,
	[IS_DISABLED]                      	bit NOT NULL CONSTRAINT [MGTPGM_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                    	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL CONSTRAINT [MGTPGM_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [MGTPGM_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [MGTPGM_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [MGTPGM_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [MGTPGM_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [MGTPGM_PK] PRIMARY KEY CLUSTERED([MANAGEMENT_FILE_PROGRAM_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the management file program type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROGRAM_TYPE', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_PROGRAM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the management file program type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROGRAM_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the record is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROGRAM_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies the display order of the code description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROGRAM_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROGRAM_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROGRAM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROGRAM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROGRAM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROGRAM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing information about the management file program.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROGRAM_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_MANAGEMENT_FILE_STATUS_TYPE
PRINT N'Create table dbo.PIMS_MANAGEMENT_FILE_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_MANAGEMENT_FILE_STATUS_TYPE]  ( 
	[MANAGEMENT_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                     	nvarchar(200) NOT NULL,
	[IS_DISABLED]                     	bit NOT NULL CONSTRAINT [MGTFTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                   	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL CONSTRAINT [MGTFTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [MGTFTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [MGTFTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [MGTFTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [MGTFTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [MGTFTY_PK] PRIMARY KEY CLUSTERED([MANAGEMENT_FILE_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the management file status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the management file status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the record is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies the display order of the code description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing information about the management file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_MANAGEMENT_FILE
PRINT N'Create table dbo.PIMS_MANAGEMENT_FILE'
GO
CREATE TABLE [dbo].[PIMS_MANAGEMENT_FILE]  ( 
	[MANAGEMENT_FILE_ID]               	bigint NOT NULL CONSTRAINT [MGMTFL_MANAGEMENT_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_MANAGEMENT_FILE_ID_SEQ]),
	[PROJECT_ID]                       	bigint NULL,
	[PRODUCT_ID]                       	bigint NULL,
	[ACQUISITION_FUNDING_TYPE_CODE]    	nvarchar(20) NULL,
	[MANAGEMENT_FILE_STATUS_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[MANAGEMENT_FILE_PROGRAM_TYPE_CODE]	nvarchar(20) NOT NULL,
	[FILE_NAME]                        	nvarchar(500) NOT NULL,
	[LEGACY_FILE_NUM]                  	nvarchar(100) NULL,
	[FILE_PURPOSE]                     	nvarchar(2000) NULL,
	[ADDITIONAL_DETAILS]               	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL CONSTRAINT [MGMTFL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [MGMTFL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [MGMTFL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL CONSTRAINT [MGMTFL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [MGMTFL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [MGMTFL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL CONSTRAINT [MGMTFL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [MGMTFL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NULL CONSTRAINT [MGMTFL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [MGMTFL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [MGMTFL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [MGMTFL_PK] PRIMARY KEY CLUSTERED([MANAGEMENT_FILE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_PROJECT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'PROJECT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_PRODUCT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'PRODUCT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQUISITION_FUNDING_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FUNDING_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_MANAGEMENT_FILE_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_MANAGEMENT_FILE_PROGRAM_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_PROGRAM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique name given to the management file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'FILE_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Legacy formatted file number assigned to the acquisition file.  Format follows YY-XXXXXX-ZZ where YY = MoTI region number, XXXXXX = generated integer sequence number,  and ZZ = file suffix number (defaulting to ''01'').   Required due to some files having t' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'LEGACY_FILE_NUM'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Free text description of the file''s purpose.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'FILE_PURPOSE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Additional details of the management file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'ADDITIONAL_DETAILS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing information about the management file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.MGMTFL_FILE_NAME_TUC
PRINT N'Create unique constraint dbo.MGMTFL_FILE_NAME_TUC'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE]
	ADD CONSTRAINT [MGMTFL_FILE_NAME_TUC]
	UNIQUE ([FILE_NAME]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_MANAGEMENT_FILE_PROFILE_TYPE
PRINT N'Create table dbo.PIMS_MANAGEMENT_FILE_PROFILE_TYPE'
GO
CREATE TABLE [dbo].[PIMS_MANAGEMENT_FILE_PROFILE_TYPE]  ( 
	[MANAGEMENT_FILE_PROFILE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                      	nvarchar(200) NOT NULL,
	[IS_DISABLED]                      	bit NOT NULL CONSTRAINT [MGTPRF_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                    	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL CONSTRAINT [MGTPRF_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [MGTPRF_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [MGTPRF_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [MGTPRF_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [MGTPRF_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [MGTPRF_PK] PRIMARY KEY CLUSTERED([MANAGEMENT_FILE_PROFILE_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the management file profile type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_PROFILE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the management file profile type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the record is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies the display order of the code description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing information about the management file profile.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROFILE_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_MANAGEMENT_FILE_TEAM
PRINT N'Create table dbo.PIMS_MANAGEMENT_FILE_TEAM'
GO
CREATE TABLE [dbo].[PIMS_MANAGEMENT_FILE_TEAM]  ( 
	[PIMS_MANAGEMENT_FILE_TEAM_ID]     	bigint NOT NULL CONSTRAINT [MGMFTM_PIMS_MANAGEMENT_FILE_TEAM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_MANAGEMENT_FILE_TEAM_ID_SEQ]),
	[MANAGEMENT_FILE_ID]               	bigint NOT NULL,
	[PERSON_ID]                        	bigint NULL,
	[ORGANIZATION_ID]                  	bigint NULL,
	[PRIMARY_CONTACT_ID]               	bigint NULL,
	[MANAGEMENT_FILE_PROFILE_TYPE_CODE]	nvarchar(20) NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL CONSTRAINT [MGMFTM_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [MGMFTM_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [MGMFTM_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL CONSTRAINT [MGMFTM_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [MGMFTM_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [MGMFTM_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL CONSTRAINT [MGMFTM_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [MGMFTM_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NULL CONSTRAINT [MGMFTM_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [MGMFTM_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [MGMFTM_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [MGMFTM_PK] PRIMARY KEY CLUSTERED([PIMS_MANAGEMENT_FILE_TEAM_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'PIMS_MANAGEMENT_FILE_TEAM_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_MANAGEMENT_FILE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the team member (PIMS_PERSON).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the team member''s organization (PIMS_ORGANIZATION).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'ORGANIZATION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the primary contact for the organization  (PIMS_PERSON).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'PRIMARY_CONTACT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_MANAGEMENT_FILE_PROFILE_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_PROFILE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table contains the relationship between the management file and the associated properties.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_TEAM'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_MANAGEMENT_FILE_PROPERTY_ID_SEQ
PRINT N'Create sequence dbo.PIMS_MANAGEMENT_FILE_PROPERTY_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_MANAGEMENT_FILE_PROPERTY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_MANAGEMENT_FILE_PROPERTY
PRINT N'Create table dbo.PIMS_MANAGEMENT_FILE_PROPERTY'
GO
CREATE TABLE [dbo].[PIMS_MANAGEMENT_FILE_PROPERTY]  ( 
	[MANAGEMENT_FILE_PROPERTY_ID]   	bigint NOT NULL CONSTRAINT [MGTPRP_MANAGEMENT_FILE_PROPERTY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_MANAGEMENT_FILE_PROPERTY_ID_SEQ]),
	[MANAGEMENT_FILE_ID]            	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [MGTPRP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [MGTPRP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [MGTPRP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [MGTPRP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [MGTPRP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [MGTPRP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [MGTPRP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [MGTPRP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [MGTPRP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [MGTPRP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [MGTPRP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [MGTPRP_PK] PRIMARY KEY CLUSTERED([MANAGEMENT_FILE_PROPERTY_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_MANAGEMENT_FILE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_PROPERTY table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table contains the relationship between the management file and the associated properties.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_MANAGEMENT_FILE_DOCUMENT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_MANAGEMENT_FILE_DOCUMENT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_MANAGEMENT_FILE_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_MANAGEMENT_FILE_DOCUMENT
PRINT N'Create table dbo.PIMS_MANAGEMENT_FILE_DOCUMENT'
GO
CREATE TABLE [dbo].[PIMS_MANAGEMENT_FILE_DOCUMENT]  ( 
	[MANAGEMENT_FILE_DOCUMENT_ID]   	bigint NOT NULL CONSTRAINT [MGTDOC_MANAGEMENT_FILE_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_MANAGEMENT_FILE_DOCUMENT_ID_SEQ]),
	[MANAGEMENT_FILE_ID]            	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [MGTDOC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [MGTDOC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [MGTDOC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [MGTDOC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [MGTDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [MGTDOC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [MGTDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [MGTDOC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [MGTDOC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [MGTDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [MGTDOC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [MGTDOC_PK] PRIMARY KEY CLUSTERED([MANAGEMENT_FILE_DOCUMENT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_MANAGEMENT_FILE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_DOCUMENT_FILE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table contains the relationship between the management file and the associated documents.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_DOCUMENT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_MANAGEMENT_FILE_NOTE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_MANAGEMENT_FILE_NOTE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_MANAGEMENT_FILE_NOTE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_MANAGEMENT_FILE_NOTE
PRINT N'Create table dbo.PIMS_MANAGEMENT_FILE_NOTE'
GO
CREATE TABLE [dbo].[PIMS_MANAGEMENT_FILE_NOTE]  ( 
	[MANAGEMENT_FILE_NOTE_ID]       	bigint NOT NULL CONSTRAINT [MGMTNT_MANAGEMENT_FILE_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_MANAGEMENT_FILE_NOTE_ID_SEQ]),
	[MANAGEMENT_FILE_ID]            	bigint NOT NULL,
	[NOTE_ID]                       	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [MGMTNT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [MGMTNT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [MGMTNT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [MGMTNT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [MGMTNT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [MGMTNT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [MGMTNT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [MGMTNT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [MGMTNT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [MGMTNT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [MGMTNT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [MGMTNT_PK] PRIMARY KEY CLUSTERED([MANAGEMENT_FILE_NOTE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_NOTE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_MANAGEMENT_FILE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_NOTE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'NOTE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table contains the relationship between the management file and the associated notes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_NOTE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACTIVITY
PRINT N'Alter table dbo.PIMS_PROPERTY_ACTIVITY'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD [MANAGEMENT_FILE_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_MANAGEMENT_FILE_PROPERTY_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_MANAGEMENT_FILE_PROPERTY_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_MANAGEMENT_FILE_PROPERTY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_MANAGEMENT_FILE_PROPERTY_HIST
PRINT N'Create table dbo.PIMS_MANAGEMENT_FILE_PROPERTY_HIST'
GO
CREATE TABLE [dbo].[PIMS_MANAGEMENT_FILE_PROPERTY_HIST]  ( 
	[_MANAGEMENT_FILE_PROPERTY_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_MANAGEMENT_FILE_PROPERTY_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]              	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                    	datetime NULL,
	[MANAGEMENT_FILE_PROPERTY_ID]      	bigint NOT NULL,
	[MANAGEMENT_FILE_ID]               	bigint NOT NULL,
	[PROPERTY_ID]                      	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_CREATE_USERID]                 	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_MGTPRP_H_PK] PRIMARY KEY CLUSTERED([_MANAGEMENT_FILE_PROPERTY_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_MGTPRP_H_UK
PRINT N'Create unique constraint dbo.PIMS_MGTPRP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_PROPERTY_HIST]
	ADD CONSTRAINT [PIMS_MGTPRP_H_UK]
	UNIQUE ([_MANAGEMENT_FILE_PROPERTY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_MANAGEMENT_FILE_DOCUMENT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_MANAGEMENT_FILE_DOCUMENT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_MANAGEMENT_FILE_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_MANAGEMENT_FILE_DOCUMENT_HIST
PRINT N'Create table dbo.PIMS_MANAGEMENT_FILE_DOCUMENT_HIST'
GO
CREATE TABLE [dbo].[PIMS_MANAGEMENT_FILE_DOCUMENT_HIST]  ( 
	[_MANAGEMENT_FILE_DOCUMENT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_MANAGEMENT_FILE_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]              	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                    	datetime NULL,
	[MANAGEMENT_FILE_DOCUMENT_ID]      	bigint NOT NULL,
	[MANAGEMENT_FILE_ID]               	bigint NOT NULL,
	[DOCUMENT_ID]                      	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_CREATE_USERID]                 	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_MGTDOC_H_PK] PRIMARY KEY CLUSTERED([_MANAGEMENT_FILE_DOCUMENT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_MGTDOC_H_UK
PRINT N'Create unique constraint dbo.PIMS_MGTDOC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_MGTDOC_H_UK]
	UNIQUE ([_MANAGEMENT_FILE_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_MANAGEMENT_FILE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_MANAGEMENT_FILE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_MANAGEMENT_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_MANAGEMENT_FILE_HIST
PRINT N'Create table dbo.PIMS_MANAGEMENT_FILE_HIST'
GO
CREATE TABLE [dbo].[PIMS_MANAGEMENT_FILE_HIST]  ( 
	[_MANAGEMENT_FILE_HIST_ID]         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_MANAGEMENT_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]              	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                    	datetime NULL,
	[MANAGEMENT_FILE_ID]               	bigint NOT NULL,
	[PROJECT_ID]                       	bigint NULL,
	[PRODUCT_ID]                       	bigint NULL,
	[ACQUISITION_FUNDING_TYPE_CODE]    	nvarchar(20) NULL,
	[MANAGEMENT_FILE_STATUS_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[MANAGEMENT_FILE_PROGRAM_TYPE_CODE]	nvarchar(20) NOT NULL,
	[FILE_NAME]                        	nvarchar(500) NOT NULL,
	[LEGACY_FILE_NUM]                  	nvarchar(100) NULL,
	[FILE_PURPOSE]                     	nvarchar(2000) NULL,
	[ADDITIONAL_DETAILS]               	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_CREATE_USERID]                 	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_MGMTFL_H_PK] PRIMARY KEY CLUSTERED([_MANAGEMENT_FILE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_MGMTFL_H_UK
PRINT N'Create unique constraint dbo.PIMS_MGMTFL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_HIST]
	ADD CONSTRAINT [PIMS_MGMTFL_H_UK]
	UNIQUE ([_MANAGEMENT_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_MANAGEMENT_FILE_NOTE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_MANAGEMENT_FILE_NOTE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_MANAGEMENT_FILE_NOTE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_MANAGEMENT_FILE_NOTE_HIST
PRINT N'Create table dbo.PIMS_MANAGEMENT_FILE_NOTE_HIST'
GO
CREATE TABLE [dbo].[PIMS_MANAGEMENT_FILE_NOTE_HIST]  ( 
	[_MANAGEMENT_FILE_NOTE_HIST_ID] 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_MANAGEMENT_FILE_NOTE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[MANAGEMENT_FILE_NOTE_ID]       	bigint NOT NULL,
	[MANAGEMENT_FILE_ID]            	bigint NOT NULL,
	[NOTE_ID]                       	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_MGMTNT_H_PK] PRIMARY KEY CLUSTERED([_MANAGEMENT_FILE_NOTE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_MGMTNT_H_UK
PRINT N'Create unique constraint dbo.PIMS_MGMTNT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_NOTE_HIST]
	ADD CONSTRAINT [PIMS_MGMTNT_H_UK]
	UNIQUE ([_MANAGEMENT_FILE_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_MANAGEMENT_FILE_TEAM_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_MANAGEMENT_FILE_TEAM_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_MANAGEMENT_FILE_TEAM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_MANAGEMENT_FILE_TEAM_HIST
PRINT N'Create table dbo.PIMS_MANAGEMENT_FILE_TEAM_HIST'
GO
CREATE TABLE [dbo].[PIMS_MANAGEMENT_FILE_TEAM_HIST]  ( 
	[_MANAGEMENT_FILE_TEAM_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_MANAGEMENT_FILE_TEAM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]              	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                    	datetime NULL,
	[PIMS_MANAGEMENT_FILE_TEAM_ID]     	bigint NOT NULL,
	[MANAGEMENT_FILE_ID]               	bigint NOT NULL,
	[PERSON_ID]                        	bigint NULL,
	[ORGANIZATION_ID]                  	bigint NULL,
	[PRIMARY_CONTACT_ID]               	bigint NULL,
	[MANAGEMENT_FILE_PROFILE_TYPE_CODE]	nvarchar(20) NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_CREATE_USERID]                 	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_MGMFTM_H_PK] PRIMARY KEY CLUSTERED([_MANAGEMENT_FILE_TEAM_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_MGMFTM_H_UK
PRINT N'Create unique constraint dbo.PIMS_MGMFTM_H_UK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_TEAM_HIST]
	ADD CONSTRAINT [PIMS_MGMFTM_H_UK]
	UNIQUE ([_MANAGEMENT_FILE_TEAM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_ACTIVITY_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_ACTIVITY_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
	ADD [MANAGEMENT_FILE_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGMFTM_ORGANIZATION_ID_IDX
PRINT N'Create index dbo.MGMFTM_ORGANIZATION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [MGMFTM_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE_TEAM]([ORGANIZATION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGTPRP_PROPERTY_ID_IDX
PRINT N'Create index dbo.MGTPRP_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [MGTPRP_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE_PROPERTY]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGMFTM_PERSON_ID_IDX
PRINT N'Create index dbo.MGMFTM_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [MGMFTM_PERSON_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE_TEAM]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGMFTM_MANAGEMENT_FILE_PROFILE_TYPE_CODE_IDX
PRINT N'Create index dbo.MGMFTM_MANAGEMENT_FILE_PROFILE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [MGMFTM_MANAGEMENT_FILE_PROFILE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE_TEAM]([MANAGEMENT_FILE_PROFILE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGMTFL_MANAGEMENT_FILE_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.MGMTFL_MANAGEMENT_FILE_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [MGMTFL_MANAGEMENT_FILE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE]([MANAGEMENT_FILE_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGMTFL_PRODUCT_ID_IDX
PRINT N'Create index dbo.MGMTFL_PRODUCT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [MGMTFL_PRODUCT_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE]([PRODUCT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGTDOC_DOCUMENT_ID_IDX
PRINT N'Create index dbo.MGTDOC_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [MGTDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGMTFL_PROJECT_ID_IDX
PRINT N'Create index dbo.MGMTFL_PROJECT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [MGMTFL_PROJECT_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE]([PROJECT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGMTNT_MANAGEMENT_FILE_ID_IDX
PRINT N'Create index dbo.MGMTNT_MANAGEMENT_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [MGMTNT_MANAGEMENT_FILE_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE_NOTE]([MANAGEMENT_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGMTNT_NOTE_ID_IDX
PRINT N'Create index dbo.MGMTNT_NOTE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [MGMTNT_NOTE_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE_NOTE]([NOTE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGMFTM_MANAGEMENT_FILE_ID_IDX
PRINT N'Create index dbo.MGMFTM_MANAGEMENT_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [MGMFTM_MANAGEMENT_FILE_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE_TEAM]([MANAGEMENT_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGMTFL_MANAGEMENT_FILE_PROGRAM_TYPE_CODE_IDX
PRINT N'Create index dbo.MGMTFL_MANAGEMENT_FILE_PROGRAM_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [MGMTFL_MANAGEMENT_FILE_PROGRAM_TYPE_CODE_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE]([MANAGEMENT_FILE_PROGRAM_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGMTFL_ACQUISITION_FUNDING_TYPE_CODE_IDX
PRINT N'Create index dbo.MGMTFL_ACQUISITION_FUNDING_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [MGMTFL_ACQUISITION_FUNDING_TYPE_CODE_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE]([ACQUISITION_FUNDING_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGTDOC_MANAGEMENT_FILE_ID_IDX
PRINT N'Create index dbo.MGTDOC_MANAGEMENT_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [MGTDOC_MANAGEMENT_FILE_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE_DOCUMENT]([MANAGEMENT_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGMFTM_PRIMARY_CONTACT_ID_IDX
PRINT N'Create index dbo.MGMFTM_PRIMARY_CONTACT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [MGMFTM_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE_TEAM]([PRIMARY_CONTACT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGTPRP_MANAGEMENT_FILE_ID_IDX
PRINT N'Create index dbo.MGTPRP_MANAGEMENT_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [MGTPRP_MANAGEMENT_FILE_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE_PROPERTY]([MANAGEMENT_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRODCT_PIM_MGMTFL_FK
PRINT N'Create foreign key constraint dbo.PIM_PRODCT_PIM_MGMTFL_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE]
	ADD CONSTRAINT [PIM_PRODCT_PIM_MGMTFL_FK]
	FOREIGN KEY([PRODUCT_ID])
	REFERENCES [dbo].[PIMS_PRODUCT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_MGTFTY_PIM_MGMTFL_FK
PRINT N'Create foreign key constraint dbo.PIM_MGTFTY_PIM_MGMTFL_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE]
	ADD CONSTRAINT [PIM_MGTFTY_PIM_MGMTFL_FK]
	FOREIGN KEY([MANAGEMENT_FILE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_MANAGEMENT_FILE_STATUS_TYPE]([MANAGEMENT_FILE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQFTY_PIM_MGMTFL_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQFTY_PIM_MGMTFL_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE]
	ADD CONSTRAINT [PIM_ACQFTY_PIM_MGMTFL_FK]
	FOREIGN KEY([ACQUISITION_FUNDING_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQUISITION_FUNDING_TYPE]([ACQUISITION_FUNDING_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PROJCT_PIM_MGMTFL_FK
PRINT N'Create foreign key constraint dbo.PIM_PROJCT_PIM_MGMTFL_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE]
	ADD CONSTRAINT [PIM_PROJCT_PIM_MGMTFL_FK]
	FOREIGN KEY([PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_MGTPGM_PIM_MGMTFL_FK
PRINT N'Create foreign key constraint dbo.PIM_MGTPGM_PIM_MGMTFL_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE]
	ADD CONSTRAINT [PIM_MGTPGM_PIM_MGMTFL_FK]
	FOREIGN KEY([MANAGEMENT_FILE_PROGRAM_TYPE_CODE])
	REFERENCES [dbo].[PIMS_MANAGEMENT_FILE_PROGRAM_TYPE]([MANAGEMENT_FILE_PROGRAM_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_MGMTFL_PIM_MGMFTM_FK
PRINT N'Create foreign key constraint dbo.PIM_MGMTFL_PIM_MGMFTM_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_TEAM]
	ADD CONSTRAINT [PIM_MGMTFL_PIM_MGMFTM_FK]
	FOREIGN KEY([MANAGEMENT_FILE_ID])
	REFERENCES [dbo].[PIMS_MANAGEMENT_FILE]([MANAGEMENT_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_MGMFTM_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_MGMFTM_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_TEAM]
	ADD CONSTRAINT [PIM_ORG_PIM_MGMFTM_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_MGTPRF_PIM_MGMFTM_FK
PRINT N'Create foreign key constraint dbo.PIM_MGTPRF_PIM_MGMFTM_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_TEAM]
	ADD CONSTRAINT [PIM_MGTPRF_PIM_MGMFTM_FK]
	FOREIGN KEY([MANAGEMENT_FILE_PROFILE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_MANAGEMENT_FILE_PROFILE_TYPE]([MANAGEMENT_FILE_PROFILE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_MGMFTM_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_MGMFTM_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_TEAM]
	ADD CONSTRAINT [PIM_PERSON_PIM_MGMFTM_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_MGMFTM_PC_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_MGMFTM_PC_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_TEAM]
	ADD CONSTRAINT [PIM_PERSON_PIM_MGMFTM_PC_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_MGMTFL_PIM_MGTPRP_FK
PRINT N'Create foreign key constraint dbo.PIM_MGMTFL_PIM_MGTPRP_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_PROPERTY]
	ADD CONSTRAINT [PIM_MGMTFL_PIM_MGTPRP_FK]
	FOREIGN KEY([MANAGEMENT_FILE_ID])
	REFERENCES [dbo].[PIMS_MANAGEMENT_FILE]([MANAGEMENT_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_MGTPRP_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_MGTPRP_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_PROPERTY]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_MGTPRP_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_MGTDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_MGTDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_MGTDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_MGMTFL_PIM_MGTDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_MGMTFL_PIM_MGTDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_MGMTFL_PIM_MGTDOC_FK]
	FOREIGN KEY([MANAGEMENT_FILE_ID])
	REFERENCES [dbo].[PIMS_MANAGEMENT_FILE]([MANAGEMENT_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_MGMTFL_PIM_MGMTNT_FK
PRINT N'Create foreign key constraint dbo.PIM_MGMTFL_PIM_MGMTNT_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_NOTE]
	ADD CONSTRAINT [PIM_MGMTFL_PIM_MGMTNT_FK]
	FOREIGN KEY([MANAGEMENT_FILE_ID])
	REFERENCES [dbo].[PIMS_MANAGEMENT_FILE]([MANAGEMENT_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_NOTE_PIM_MGMTNT_FK
PRINT N'Create foreign key constraint dbo.PIM_NOTE_PIM_MGMTNT_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_NOTE]
	ADD CONSTRAINT [PIM_NOTE_PIM_MGMTNT_FK]
	FOREIGN KEY([NOTE_ID])
	REFERENCES [dbo].[PIMS_NOTE]([NOTE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_MGMTFL_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_MGMTFL_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	ADD CONSTRAINT [PIM_MGMTFL_PIM_PRPACT_FK]
	FOREIGN KEY([MANAGEMENT_FILE_ID])
	REFERENCES [dbo].[PIMS_MANAGEMENT_FILE]([MANAGEMENT_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMTNT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_MGMTNT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMTNT_I_S_U_TR] ON PIMS_MANAGEMENT_FILE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.MANAGEMENT_FILE_NOTE_ID = deleted.MANAGEMENT_FILE_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_MANAGEMENT_FILE_NOTE
    set "MANAGEMENT_FILE_NOTE_ID" = inserted."MANAGEMENT_FILE_NOTE_ID",
      "MANAGEMENT_FILE_ID" = inserted."MANAGEMENT_FILE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_MANAGEMENT_FILE_NOTE
    inner join inserted
    on (PIMS_MANAGEMENT_FILE_NOTE.MANAGEMENT_FILE_NOTE_ID = inserted.MANAGEMENT_FILE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTPRP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_MGTPRP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTPRP_I_S_I_TR] ON PIMS_MANAGEMENT_FILE_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_MANAGEMENT_FILE_PROPERTY ("MANAGEMENT_FILE_PROPERTY_ID",
      "MANAGEMENT_FILE_ID",
      "PROPERTY_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "MANAGEMENT_FILE_PROPERTY_ID",
      "MANAGEMENT_FILE_ID",
      "PROPERTY_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTPRF_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_MGTPRF_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTPRF_I_S_I_TR] ON PIMS_MANAGEMENT_FILE_PROFILE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_MANAGEMENT_FILE_PROFILE_TYPE ("MANAGEMENT_FILE_PROFILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "MANAGEMENT_FILE_PROFILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_MGTDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTDOC_I_S_U_TR] ON PIMS_MANAGEMENT_FILE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.MANAGEMENT_FILE_DOCUMENT_ID = deleted.MANAGEMENT_FILE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_MANAGEMENT_FILE_DOCUMENT
    set "MANAGEMENT_FILE_DOCUMENT_ID" = inserted."MANAGEMENT_FILE_DOCUMENT_ID",
      "MANAGEMENT_FILE_ID" = inserted."MANAGEMENT_FILE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_MANAGEMENT_FILE_DOCUMENT
    inner join inserted
    on (PIMS_MANAGEMENT_FILE_DOCUMENT.MANAGEMENT_FILE_DOCUMENT_ID = inserted.MANAGEMENT_FILE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPACT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPACT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPACT_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PIMS_PROPERTY_ACTIVITY_ID = deleted.PIMS_PROPERTY_ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY
    set "PIMS_PROPERTY_ACTIVITY_ID" = inserted."PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_TYPE_CODE",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID" = inserted."SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID" = inserted."SERVICE_PROVIDER_ORG_ID",
      "MANAGEMENT_FILE_ID" = inserted."MANAGEMENT_FILE_ID",
      "REQUEST_ADDED_DT" = inserted."REQUEST_ADDED_DT",
      "COMPLETION_DT" = inserted."COMPLETION_DT",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "REQUEST_SOURCE" = inserted."REQUEST_SOURCE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY.PIMS_PROPERTY_ACTIVITY_ID = inserted.PIMS_PROPERTY_ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTPRP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_MGTPRP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTPRP_A_S_IUD_TR] ON PIMS_MANAGEMENT_FILE_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_MANAGEMENT_FILE_PROPERTY_HIST set END_DATE_HIST = @curr_date where MANAGEMENT_FILE_PROPERTY_ID in (select MANAGEMENT_FILE_PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_MANAGEMENT_FILE_PROPERTY_HIST ([MANAGEMENT_FILE_PROPERTY_ID], [MANAGEMENT_FILE_ID], [PROPERTY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _MANAGEMENT_FILE_PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [MANAGEMENT_FILE_PROPERTY_ID], [MANAGEMENT_FILE_ID], [PROPERTY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_MANAGEMENT_FILE_PROPERTY_H_ID_SEQ]) as [_MANAGEMENT_FILE_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTFTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_MGTFTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTFTY_I_S_U_TR] ON PIMS_MANAGEMENT_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.MANAGEMENT_FILE_STATUS_TYPE_CODE = deleted.MANAGEMENT_FILE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_MANAGEMENT_FILE_STATUS_TYPE
    set "MANAGEMENT_FILE_STATUS_TYPE_CODE" = inserted."MANAGEMENT_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_MANAGEMENT_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_MANAGEMENT_FILE_STATUS_TYPE.MANAGEMENT_FILE_STATUS_TYPE_CODE = inserted.MANAGEMENT_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMTNT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_MGMTNT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMTNT_I_S_I_TR] ON PIMS_MANAGEMENT_FILE_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_MANAGEMENT_FILE_NOTE ("MANAGEMENT_FILE_NOTE_ID",
      "MANAGEMENT_FILE_ID",
      "NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "MANAGEMENT_FILE_NOTE_ID",
      "MANAGEMENT_FILE_ID",
      "NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTDOC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_MGTDOC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTDOC_I_S_I_TR] ON PIMS_MANAGEMENT_FILE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_MANAGEMENT_FILE_DOCUMENT ("MANAGEMENT_FILE_DOCUMENT_ID",
      "MANAGEMENT_FILE_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "MANAGEMENT_FILE_DOCUMENT_ID",
      "MANAGEMENT_FILE_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPACT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPACT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPACT_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY ("PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID",
      "MANAGEMENT_FILE_ID",
      "REQUEST_ADDED_DT",
      "COMPLETION_DT",
      "DESCRIPTION",
      "REQUEST_SOURCE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PIMS_PROPERTY_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID",
      "MANAGEMENT_FILE_ID",
      "REQUEST_ADDED_DT",
      "COMPLETION_DT",
      "DESCRIPTION",
      "REQUEST_SOURCE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMTFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_MGMTFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMTFL_I_S_U_TR] ON PIMS_MANAGEMENT_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.MANAGEMENT_FILE_ID = deleted.MANAGEMENT_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_MANAGEMENT_FILE
    set "MANAGEMENT_FILE_ID" = inserted."MANAGEMENT_FILE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "MANAGEMENT_FILE_STATUS_TYPE_CODE" = inserted."MANAGEMENT_FILE_STATUS_TYPE_CODE",
      "MANAGEMENT_FILE_PROGRAM_TYPE_CODE" = inserted."MANAGEMENT_FILE_PROGRAM_TYPE_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "LEGACY_FILE_NUM" = inserted."LEGACY_FILE_NUM",
      "FILE_PURPOSE" = inserted."FILE_PURPOSE",
      "ADDITIONAL_DETAILS" = inserted."ADDITIONAL_DETAILS",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_MANAGEMENT_FILE
    inner join inserted
    on (PIMS_MANAGEMENT_FILE.MANAGEMENT_FILE_ID = inserted.MANAGEMENT_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTPRP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_MGTPRP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTPRP_I_S_U_TR] ON PIMS_MANAGEMENT_FILE_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.MANAGEMENT_FILE_PROPERTY_ID = deleted.MANAGEMENT_FILE_PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_MANAGEMENT_FILE_PROPERTY
    set "MANAGEMENT_FILE_PROPERTY_ID" = inserted."MANAGEMENT_FILE_PROPERTY_ID",
      "MANAGEMENT_FILE_ID" = inserted."MANAGEMENT_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_MANAGEMENT_FILE_PROPERTY
    inner join inserted
    on (PIMS_MANAGEMENT_FILE_PROPERTY.MANAGEMENT_FILE_PROPERTY_ID = inserted.MANAGEMENT_FILE_PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTDOC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_MGTDOC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTDOC_A_S_IUD_TR] ON PIMS_MANAGEMENT_FILE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_MANAGEMENT_FILE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where MANAGEMENT_FILE_DOCUMENT_ID in (select MANAGEMENT_FILE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_MANAGEMENT_FILE_DOCUMENT_HIST ([MANAGEMENT_FILE_DOCUMENT_ID], [MANAGEMENT_FILE_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _MANAGEMENT_FILE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [MANAGEMENT_FILE_DOCUMENT_ID], [MANAGEMENT_FILE_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_MANAGEMENT_FILE_DOCUMENT_H_ID_SEQ]) as [_MANAGEMENT_FILE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMTFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_MGMTFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMTFL_I_S_I_TR] ON PIMS_MANAGEMENT_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_MANAGEMENT_FILE ("MANAGEMENT_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "MANAGEMENT_FILE_STATUS_TYPE_CODE",
      "MANAGEMENT_FILE_PROGRAM_TYPE_CODE",
      "FILE_NAME",
      "LEGACY_FILE_NUM",
      "FILE_PURPOSE",
      "ADDITIONAL_DETAILS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "MANAGEMENT_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "MANAGEMENT_FILE_STATUS_TYPE_CODE",
      "MANAGEMENT_FILE_PROGRAM_TYPE_CODE",
      "FILE_NAME",
      "LEGACY_FILE_NUM",
      "FILE_PURPOSE",
      "ADDITIONAL_DETAILS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTPGM_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_MGTPGM_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTPGM_I_S_U_TR] ON PIMS_MANAGEMENT_FILE_PROGRAM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.MANAGEMENT_FILE_PROGRAM_TYPE_CODE = deleted.MANAGEMENT_FILE_PROGRAM_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_MANAGEMENT_FILE_PROGRAM_TYPE
    set "MANAGEMENT_FILE_PROGRAM_TYPE_CODE" = inserted."MANAGEMENT_FILE_PROGRAM_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_MANAGEMENT_FILE_PROGRAM_TYPE
    inner join inserted
    on (PIMS_MANAGEMENT_FILE_PROGRAM_TYPE.MANAGEMENT_FILE_PROGRAM_TYPE_CODE = inserted.MANAGEMENT_FILE_PROGRAM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMFTM_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_MGMFTM_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMFTM_I_S_I_TR] ON PIMS_MANAGEMENT_FILE_TEAM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_MANAGEMENT_FILE_TEAM ("PIMS_MANAGEMENT_FILE_TEAM_ID",
      "MANAGEMENT_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "MANAGEMENT_FILE_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PIMS_MANAGEMENT_FILE_TEAM_ID",
      "MANAGEMENT_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "MANAGEMENT_FILE_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMTFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_MGMTFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMTFL_A_S_IUD_TR] ON PIMS_MANAGEMENT_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_MANAGEMENT_FILE_HIST set END_DATE_HIST = @curr_date where MANAGEMENT_FILE_ID in (select MANAGEMENT_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_MANAGEMENT_FILE_HIST ([MANAGEMENT_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FUNDING_TYPE_CODE], [MANAGEMENT_FILE_STATUS_TYPE_CODE], [MANAGEMENT_FILE_PROGRAM_TYPE_CODE], [FILE_NAME], [LEGACY_FILE_NUM], [FILE_PURPOSE], [ADDITIONAL_DETAILS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _MANAGEMENT_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [MANAGEMENT_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FUNDING_TYPE_CODE], [MANAGEMENT_FILE_STATUS_TYPE_CODE], [MANAGEMENT_FILE_PROGRAM_TYPE_CODE], [FILE_NAME], [LEGACY_FILE_NUM], [FILE_PURPOSE], [ADDITIONAL_DETAILS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_MANAGEMENT_FILE_H_ID_SEQ]) as [_MANAGEMENT_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTPRF_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_MGTPRF_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTPRF_I_S_U_TR] ON PIMS_MANAGEMENT_FILE_PROFILE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.MANAGEMENT_FILE_PROFILE_TYPE_CODE = deleted.MANAGEMENT_FILE_PROFILE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_MANAGEMENT_FILE_PROFILE_TYPE
    set "MANAGEMENT_FILE_PROFILE_TYPE_CODE" = inserted."MANAGEMENT_FILE_PROFILE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_MANAGEMENT_FILE_PROFILE_TYPE
    inner join inserted
    on (PIMS_MANAGEMENT_FILE_PROFILE_TYPE.MANAGEMENT_FILE_PROFILE_TYPE_CODE = inserted.MANAGEMENT_FILE_PROFILE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMTNT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_MGMTNT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMTNT_A_S_IUD_TR] ON PIMS_MANAGEMENT_FILE_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_MANAGEMENT_FILE_NOTE_HIST set END_DATE_HIST = @curr_date where MANAGEMENT_FILE_NOTE_ID in (select MANAGEMENT_FILE_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_MANAGEMENT_FILE_NOTE_HIST ([MANAGEMENT_FILE_NOTE_ID], [MANAGEMENT_FILE_ID], [NOTE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _MANAGEMENT_FILE_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [MANAGEMENT_FILE_NOTE_ID], [MANAGEMENT_FILE_ID], [NOTE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_MANAGEMENT_FILE_NOTE_H_ID_SEQ]) as [_MANAGEMENT_FILE_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMFTM_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_MGMFTM_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMFTM_A_S_IUD_TR] ON PIMS_MANAGEMENT_FILE_TEAM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_MANAGEMENT_FILE_TEAM_HIST set END_DATE_HIST = @curr_date where PIMS_MANAGEMENT_FILE_TEAM_ID in (select PIMS_MANAGEMENT_FILE_TEAM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_MANAGEMENT_FILE_TEAM_HIST ([PIMS_MANAGEMENT_FILE_TEAM_ID], [MANAGEMENT_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [MANAGEMENT_FILE_PROFILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _MANAGEMENT_FILE_TEAM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PIMS_MANAGEMENT_FILE_TEAM_ID], [MANAGEMENT_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [MANAGEMENT_FILE_PROFILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_MANAGEMENT_FILE_TEAM_H_ID_SEQ]) as [_MANAGEMENT_FILE_TEAM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTPGM_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_MGTPGM_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTPGM_I_S_I_TR] ON PIMS_MANAGEMENT_FILE_PROGRAM_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_MANAGEMENT_FILE_PROGRAM_TYPE ("MANAGEMENT_FILE_PROGRAM_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "MANAGEMENT_FILE_PROGRAM_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMFTM_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_MGMFTM_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMFTM_I_S_U_TR] ON PIMS_MANAGEMENT_FILE_TEAM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PIMS_MANAGEMENT_FILE_TEAM_ID = deleted.PIMS_MANAGEMENT_FILE_TEAM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_MANAGEMENT_FILE_TEAM
    set "PIMS_MANAGEMENT_FILE_TEAM_ID" = inserted."PIMS_MANAGEMENT_FILE_TEAM_ID",
      "MANAGEMENT_FILE_ID" = inserted."MANAGEMENT_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "MANAGEMENT_FILE_PROFILE_TYPE_CODE" = inserted."MANAGEMENT_FILE_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_MANAGEMENT_FILE_TEAM
    inner join inserted
    on (PIMS_MANAGEMENT_FILE_TEAM.PIMS_MANAGEMENT_FILE_TEAM_ID = inserted.PIMS_MANAGEMENT_FILE_TEAM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTFTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_MGTFTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTFTY_I_S_I_TR] ON PIMS_MANAGEMENT_FILE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_MANAGEMENT_FILE_STATUS_TYPE ("MANAGEMENT_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "MANAGEMENT_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
