-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Wed Jul 05 18:07:29 PDT 2023
-- Execute this script on:
-- 		PSP_PIMS_S58_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S56_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_IHPRIN_PIM_PIHITY_FK
PRINT N'Drop foreign key constraint dbo.PIM_IHPRIN_PIM_PIHITY_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]
	DROP CONSTRAINT IF EXISTS [PIM_IHPRIN_PIM_PIHITY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_IHINTT_PIM_PIHITY_FK
PRINT N'Drop foreign key constraint dbo.PIM_IHINTT_PIM_PIHITY_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]
	DROP CONSTRAINT IF EXISTS [PIM_IHINTT_PIM_PIHITY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_SCDPRH_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_SCDPRH_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_SCDPRH_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_SDRTRN_PIM_SCDPRH_FK
PRINT N'Drop foreign key constraint dbo.PIM_SDRTRN_PIM_SCDPRH_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	DROP CONSTRAINT IF EXISTS [PIM_SDRTRN_PIM_SCDPRH_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_SCDPRH_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_SCDPRH_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_SCDPRH_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_SECDEP_PIM_SDRTRN_FK
PRINT N'Drop foreign key constraint dbo.PIM_SECDEP_PIM_SDRTRN_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
	DROP CONSTRAINT IF EXISTS [PIM_SECDEP_PIM_SDRTRN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_SCDPHL_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_SCDPHL_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_SCDPHL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_SCDPHL_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_SCDPHL_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_SCDPHL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_SECDEP_PIM_SCDPHL_FK
PRINT N'Drop foreign key constraint dbo.PIM_SECDEP_PIM_SCDPHL_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	DROP CONSTRAINT IF EXISTS [PIM_SECDEP_PIM_SCDPHL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_SECDEP_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_SECDEP_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
	DROP CONSTRAINT IF EXISTS [PIM_LEASE_PIM_SECDEP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_SECDPT_PIM_SECDEP_FK
PRINT N'Drop foreign key constraint dbo.PIM_SECDPT_PIM_SECDEP_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
	DROP CONSTRAINT IF EXISTS [PIM_SECDPT_PIM_SECDEP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ARUNIT_PIM_PROPLS_FK
PRINT N'Drop foreign key constraint dbo.PIM_ARUNIT_PIM_PROPLS_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	DROP CONSTRAINT IF EXISTS [PIM_ARUNIT_PIM_PROPLS_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PROPLS_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PROPLS_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	DROP CONSTRAINT IF EXISTS [PIM_PRPRTY_PIM_PROPLS_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_PROPLS_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_PROPLS_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	DROP CONSTRAINT IF EXISTS [PIM_LEASE_PIM_PROPLS_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_PIMPRV_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_PIMPRV_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	DROP CONSTRAINT IF EXISTS [PIM_LEASE_PIM_PIMPRV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PIMPRT_PIM_PIMPRV_FK
PRINT N'Drop foreign key constraint dbo.PIM_PIMPRT_PIM_PIMPRV_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	DROP CONSTRAINT IF EXISTS [PIM_PIMPRT_PIM_PIMPRV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_LSTERM_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_LSTERM_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TERM]
	DROP CONSTRAINT IF EXISTS [PIM_LEASE_PIM_LSTERM_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_TENANT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_TENANT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_PRIMARY_CONTACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_PRIMARY_CONTACT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_PRIMARY_CONTACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_TENANT_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_TENANT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSSRTY_PIM_TENANT_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSSRTY_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	DROP CONSTRAINT IF EXISTS [PIM_LSSRTY_PIM_TENANT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_TENANT_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	DROP CONSTRAINT IF EXISTS [PIM_LEASE_PIM_TENANT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_TENTYP_PIM_TENANT_FK
PRINT N'Drop foreign key constraint dbo.PIM_TENTYP_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	DROP CONSTRAINT IF EXISTS [PIM_TENTYP_PIM_TENANT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_LESNOT_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_LESNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
	DROP CONSTRAINT IF EXISTS [PIM_LEASE_PIM_LESNOT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_NOTE_PIM_LESNOT_FK
PRINT N'Drop foreign key constraint dbo.PIM_NOTE_PIM_LESNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
	DROP CONSTRAINT IF EXISTS [PIM_NOTE_PIM_LESNOT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCMNT_PIM_LESDOC_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCMNT_PIM_LESDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_DOCMNT_PIM_LESDOC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_LESDOC_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_LESDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_LEASE_PIM_LESDOC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK
PRINT N'Drop foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [PIM_CONTYP_PIM_LESCON_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK
PRINT N'Drop foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [PIM_CONSTY_PIM_LESCON_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_LESCON_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [PIM_LEASE_PIM_LESCON_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTINS_PIM_LSACIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTINS_PIM_LSACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [PIM_ACTINS_PIM_LSACIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_LSACIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_LSACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [PIM_LEASE_PIM_LSACIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_INSPYT_PIM_INSRNC_FK
PRINT N'Drop foreign key constraint dbo.PIM_INSPYT_PIM_INSRNC_FK'
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
	DROP CONSTRAINT IF EXISTS [PIM_INSPYT_PIM_INSRNC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_INSRNC_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_INSRNC_FK'
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
	DROP CONSTRAINT IF EXISTS [PIM_LEASE_PIM_INSRNC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSSTYP_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSSTYP_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT IF EXISTS [PIM_LSSTYP_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSPRTY_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSPRTY_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT IF EXISTS [PIM_LSPRTY_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSPRGT_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSPRGT_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT IF EXISTS [PIM_LSPRGT_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LRESPT_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_LRESPT_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT IF EXISTS [PIM_LRESPT_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LINITT_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_LINITT_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT IF EXISTS [PIM_LINITT_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_REGION_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_REGION_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT IF EXISTS [PIM_REGION_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSCATT_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSCATT_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT IF EXISTS [PIM_LSCATT_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LELIST_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_LELIST_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT IF EXISTS [PIM_LELIST_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PROJCT_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_PROJCT_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT IF EXISTS [PIM_PROJCT_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LPRPTY_PIM_LEASE_FK
PRINT N'Drop foreign key constraint dbo.PIM_LPRPTY_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT IF EXISTS [PIM_LPRPTY_PIM_LEASE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_INTHLD_PIM_IHPRIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_INTHLD_PIM_IHPRIN_FK'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	DROP CONSTRAINT IF EXISTS [PIM_INTHLD_PIM_IHPRIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_INTHLD_PIM_FORM8_FK
PRINT N'Drop foreign key constraint dbo.PIM_INTHLD_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	DROP CONSTRAINT IF EXISTS [PIM_INTHLD_PIM_FORM8_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PMTITM_PIM_FORM8_FK
PRINT N'Drop foreign key constraint dbo.PIM_PMTITM_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	DROP CONSTRAINT IF EXISTS [PIM_PMTITM_PIM_FORM8_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQOWN_PIM_FORM8_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQOWN_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	DROP CONSTRAINT IF EXISTS [PIM_ACQOWN_PIM_FORM8_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_FORM8_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_FORM8_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_FORM8_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_FORM8_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_INTHLD_PRIMARY_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_INTHLD_PRIMARY_FK'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_INTHLD_PRIMARY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_INHLDT_PIM_INTHLD_FK
PRINT N'Drop foreign key constraint dbo.PIM_INHLDT_PIM_INTHLD_FK'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	DROP CONSTRAINT IF EXISTS [PIM_INHLDT_PIM_INTHLD_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRTY_LOCATION_IDX
PRINT N'Drop index dbo.PRPRTY_LOCATION_IDX'
GO
DROP INDEX IF EXISTS [PRPRTY_LOCATION_IDX] ON [dbo].[PIMS_PROPERTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRTY_BOUNDARY_IDX
PRINT N'Drop index dbo.PRPRTY_BOUNDARY_IDX'
GO
DROP INDEX IF EXISTS [PRPRTY_BOUNDARY_IDX] ON [dbo].[PIMS_PROPERTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PIHITY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PIHITY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PIHITY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PIHITY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PIHITY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PIHITY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PIHITY_PIMS_INTHLDR_PROP_INTEREST_ID_IDX
PRINT N'Drop index dbo.PIHITY_PIMS_INTHLDR_PROP_INTEREST_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE].[PIHITY_PIMS_INTHLDR_PROP_INTEREST_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PIHITY_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX
PRINT N'Drop index dbo.PIHITY_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE].[PIHITY_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROPLS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROPLS_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROPLS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROPLS_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PROPLS_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROPLS_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROPLS_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PROPLS_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROPLS_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROPLS_PROPERTY_ID_IDX
PRINT N'Drop index dbo.PROPLS_PROPERTY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_LEASE].[PROPLS_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROPLS_LEASE_ID_IDX
PRINT N'Drop index dbo.PROPLS_LEASE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_LEASE].[PROPLS_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SCDPRH_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_SCDPRH_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SCDPRH_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SCDPRH_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_SCDPRH_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SCDPRH_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SCDPRH_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_SCDPRH_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SCDPRH_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.SCDPRH_SECURITY_DEPOSIT_RETURN_ID_IDX
PRINT N'Drop index dbo.SCDPRH_SECURITY_DEPOSIT_RETURN_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER].[SCDPRH_SECURITY_DEPOSIT_RETURN_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.SCDPRH_PERSON_ID_IDX
PRINT N'Drop index dbo.SCDPRH_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER].[SCDPRH_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.SCDPRH_ORGANIZATION_ID_IDX
PRINT N'Drop index dbo.SCDPRH_ORGANIZATION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER].[SCDPRH_ORGANIZATION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SDRTRN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_SDRTRN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SDRTRN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SDRTRN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_SDRTRN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SDRTRN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SDRTRN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_SDRTRN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SDRTRN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.SDRTRN_SECURITY_DEPOSIT_ID_IDX
PRINT N'Drop index dbo.SDRTRN_SECURITY_DEPOSIT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_SECURITY_DEPOSIT_RETURN].[SDRTRN_SECURITY_DEPOSIT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SCDPHL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_SCDPHL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SCDPHL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SCDPHL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_SCDPHL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SCDPHL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SCDPHL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_SCDPHL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SCDPHL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.SCDPHL_SECURITY_DEPOSIT_ID_IDX
PRINT N'Drop index dbo.SCDPHL_SECURITY_DEPOSIT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER].[SCDPHL_SECURITY_DEPOSIT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.SCDPHL_PERSON_ID_IDX
PRINT N'Drop index dbo.SCDPHL_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER].[SCDPHL_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.SCDPHL_ORGANIZATION_ID_IDX
PRINT N'Drop index dbo.SCDPHL_ORGANIZATION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER].[SCDPHL_ORGANIZATION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SECDEP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_SECDEP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SECDEP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SECDEP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_SECDEP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SECDEP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_SECDEP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_SECDEP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_SECDEP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.SECDEP_SECURITY_DEPOSIT_TYPE_CODE_IDX
PRINT N'Drop index dbo.SECDEP_SECURITY_DEPOSIT_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_SECURITY_DEPOSIT].[SECDEP_SECURITY_DEPOSIT_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.SECDEP_LEASE_ID_IDX
PRINT N'Drop index dbo.SECDEP_LEASE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_SECURITY_DEPOSIT].[SECDEP_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PIMPRV_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PIMPRV_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PIMPRV_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PIMPRV_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PIMPRV_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PIMPRV_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PIMPRV_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PIMPRV_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PIMPRV_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PIMPRV_PROPERTY_LEASE_ID_IDX
PRINT N'Drop index dbo.PIMPRV_PROPERTY_LEASE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_IMPROVEMENT].[PIMPRV_PROPERTY_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PIMPRV_PROPERTY_IMPROVEMENT_TYPE_CODE_IDX
PRINT N'Drop index dbo.PIMPRV_PROPERTY_IMPROVEMENT_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_IMPROVEMENT].[PIMPRV_PROPERTY_IMPROVEMENT_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRTY_SURVEY_PLAN_NUMBER_IDX
PRINT N'Drop index dbo.PRPRTY_SURVEY_PLAN_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY].[PRPRTY_SURVEY_PLAN_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQPAY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQPAY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQPAY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INTHLD_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_INTHLD_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INTHLD_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQCST_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQCST_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQCST_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AGRMNT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_AGRMNT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AGRMNT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LNDATY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LNDATY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LNDATY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TKTYPE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TKTYPE_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TKTYPE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_IHPRIN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_IHPRIN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_IHPRIN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TKCONT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TKCONT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TKCONT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INTHLD_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_INTHLD_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INTHLD_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.INTHLD_PRIMARY_CONTACT_ID_IDX
PRINT N'Drop index dbo.INTHLD_PRIMARY_CONTACT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_INTEREST_HOLDER].[INTHLD_PRIMARY_CONTACT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.INTHLD_INTEREST_HOLDER_TYPE_CODE_IDX
PRINT N'Drop index dbo.INTHLD_INTEREST_HOLDER_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_INTEREST_HOLDER].[INTHLD_INTEREST_HOLDER_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TKSTST_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TKSTST_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TKSTST_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSTERM_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSTERM_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSTERM_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_IHPRIN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_IHPRIN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_IHPRIN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AGRMNT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AGRMNT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AGRMNT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQPAY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQPAY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQPAY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQCST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQCST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQCST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INTHLD_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_INTHLD_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INTHLD_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TKTYPE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TKTYPE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TKTYPE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AGRMNT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_AGRMNT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AGRMNT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TKCONT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TKCONT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TKCONT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSTERM_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LSTERM_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSTERM_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TKSTST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TKSTST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TKSTST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_IHPRIN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_IHPRIN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_IHPRIN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LNDATY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LNDATY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LNDATY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSTERM_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSTERM_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSTERM_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TENANT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TENANT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TENANT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TENANT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TENANT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TENANT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TENANT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_TENANT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TENANT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TENANT_TENANT_TYPE_CODE_IDX
PRINT N'Drop index dbo.TENANT_TENANT_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_TENANT].[TENANT_TENANT_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TENANT_PRIMARY_CONTACT_ID_IDX
PRINT N'Drop index dbo.TENANT_PRIMARY_CONTACT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_TENANT].[TENANT_PRIMARY_CONTACT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TENANT_PERSON_ID_IDX
PRINT N'Drop index dbo.TENANT_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_TENANT].[TENANT_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TENANT_ORGANIZATION_ID_IDX
PRINT N'Drop index dbo.TENANT_ORGANIZATION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_TENANT].[TENANT_ORGANIZATION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TENANT_LESSOR_TYPE_CODE_IDX
PRINT N'Drop index dbo.TENANT_LESSOR_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_TENANT].[TENANT_LESSOR_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TENANT_LEASE_ID_IDX
PRINT N'Drop index dbo.TENANT_LEASE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_TENANT].[TENANT_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESNOT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LESNOT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESNOT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESNOT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LESNOT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESNOT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESNOT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LESNOT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESNOT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LESNOT_NOTE_ID_IDX
PRINT N'Drop index dbo.LESNOT_NOTE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_NOTE].[LESNOT_NOTE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LESNOT_LEASE_ID_IDX
PRINT N'Drop index dbo.LESNOT_LEASE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_NOTE].[LESNOT_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESDOC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LESDOC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESDOC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESDOC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LESDOC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESDOC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESDOC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LESDOC_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESDOC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LESDOC_LEASE_ID_IDX
PRINT N'Drop index dbo.LESDOC_LEASE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_DOCUMENT].[LESDOC_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LESDOC_DOCUMENT_ID_IDX
PRINT N'Drop index dbo.LESDOC_DOCUMENT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_DOCUMENT].[LESDOC_DOCUMENT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESCON_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LESCON_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESCON_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESCON_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LESCON_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESCON_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESCON_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LESCON_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESCON_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LESCON_LEASE_ID_IDX
PRINT N'Drop index dbo.LESCON_LEASE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_CONSULTATION].[LESCON_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LESCON_CONSULTATION_TYPE_CODE_IDX
PRINT N'Drop index dbo.LESCON_CONSULTATION_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_CONSULTATION].[LESCON_CONSULTATION_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_CONSULTATION].[LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSACIN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSACIN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSACIN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSACIN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSACIN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSACIN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSACIN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LSACIN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSACIN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSACIN_LEASE_ID_IDX
PRINT N'Drop index dbo.LSACIN_LEASE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE].[LSACIN_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSACIN_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Drop index dbo.LSACIN_ACTIVITY_INSTANCE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE].[LSACIN_ACTIVITY_INSTANCE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INSRNC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_INSRNC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INSRNC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INSRNC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_INSRNC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INSRNC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INSRNC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_INSRNC_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INSRNC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.INSRNC_LEASE_ID_IDX
PRINT N'Drop index dbo.INSRNC_LEASE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_INSURANCE].[INSRNC_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.INSRNC_INSURANCE_TYPE_CODE_IDX
PRINT N'Drop index dbo.INSRNC_INSURANCE_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_INSURANCE].[INSRNC_INSURANCE_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_TFA_FILE_NUMBER_IDX
PRINT N'Drop index dbo.LEASE_TFA_FILE_NUMBER_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE].[LEASE_TFA_FILE_NUMBER_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_TFA_FILE_NO_IDX
PRINT N'Drop index dbo.LEASE_TFA_FILE_NO_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE].[LEASE_TFA_FILE_NO_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_REGION_CODE_IDX
PRINT N'Drop index dbo.LEASE_REGION_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE].[LEASE_REGION_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_PS_FILE_NO_IDX
PRINT N'Drop index dbo.LEASE_PS_FILE_NO_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE].[LEASE_PS_FILE_NO_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_LEASE_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.LEASE_LEASE_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE].[LEASE_LEASE_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_LEASE_RESPONSIBILITY_TYPE_CODE_IDX
PRINT N'Drop index dbo.LEASE_LEASE_RESPONSIBILITY_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE].[LEASE_LEASE_RESPONSIBILITY_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_LEASE_PURPOSE_TYPE_CODE_IDX
PRINT N'Drop index dbo.LEASE_LEASE_PURPOSE_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE].[LEASE_LEASE_PURPOSE_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_LEASE_PROGRAM_TYPE_CODE_IDX
PRINT N'Drop index dbo.LEASE_LEASE_PROGRAM_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE].[LEASE_LEASE_PROGRAM_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_LEASE_PAY_RVBL_TYPE_CODE_IDX
PRINT N'Drop index dbo.LEASE_LEASE_PAY_RVBL_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE].[LEASE_LEASE_PAY_RVBL_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_LEASE_LICENSE_TYPE_CODE_IDX
PRINT N'Drop index dbo.LEASE_LEASE_LICENSE_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE].[LEASE_LEASE_LICENSE_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_LEASE_INITIATOR_TYPE_CODE_IDX
PRINT N'Drop index dbo.LEASE_LEASE_INITIATOR_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE].[LEASE_LEASE_INITIATOR_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_LEASE_CATEGORY_TYPE_CODE_IDX
PRINT N'Drop index dbo.LEASE_LEASE_CATEGORY_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE].[LEASE_LEASE_CATEGORY_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LEASE_L_FILE_NO_IDX
PRINT N'Drop index dbo.LEASE_L_FILE_NO_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE].[LEASE_L_FILE_NO_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQPAY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQPAY_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQPAY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FORM8_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_FORM8_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FORM8_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FORM8_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_FORM8_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FORM8_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_FORM8_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_FORM8_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_FORM8_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.FORM8_PAYMENT_ITEM_TYPE_CODE_IDX
PRINT N'Drop index dbo.FORM8_PAYMENT_ITEM_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_FORM_8].[FORM8_PAYMENT_ITEM_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.FORM8_INTEREST_HOLDER_ID_IDX
PRINT N'Drop index dbo.FORM8_INTEREST_HOLDER_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_FORM_8].[FORM8_INTEREST_HOLDER_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.FORM8_EXPROPRIATING_AUTHORITY_IDX
PRINT N'Drop index dbo.FORM8_EXPROPRIATING_AUTHORITY_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_FORM_8].[FORM8_EXPROPRIATING_AUTHORITY_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.FORM8_ACQUISITION_OWNER_ID_IDX
PRINT N'Drop index dbo.FORM8_ACQUISITION_OWNER_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_FORM_8].[FORM8_ACQUISITION_OWNER_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.FORM8_ACQUISITION_FILE_ID_IDX
PRINT N'Drop index dbo.FORM8_ACQUISITION_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_FORM_8].[FORM8_ACQUISITION_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PMTITM_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PMTITM_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PMTITM_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PMTITM_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PMTITM_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PMTITM_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INHLDT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_INHLDT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INHLDT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INHLDT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_INHLDT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INHLDT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIHITY_PK
PRINT N'Drop primary key constraint dbo.PIHITY_PK'
GO
ALTER TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]
	DROP CONSTRAINT IF EXISTS [PIHITY_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROP_INTHLDR_INTEREST_TYPE
PRINT N'Drop table dbo.PIMS_PROP_INTHLDR_INTEREST_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_PROPERTY_BOUNDARY_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.SCDPRH_ONE_HOLDER_ONLY_TCC
PRINT N'Drop check constraint dbo.SCDPRH_ONE_HOLDER_ONLY_TCC'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	DROP CONSTRAINT IF EXISTS [SCDPRH_ONE_HOLDER_ONLY_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.SCDPRH_SECURITY_DEPOSIT_RETURN_ID_TUC
PRINT N'Drop unique constraint dbo.SCDPRH_SECURITY_DEPOSIT_RETURN_ID_TUC'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	DROP CONSTRAINT IF EXISTS [SCDPRH_SECURITY_DEPOSIT_RETURN_ID_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.SCDPRH_PK
PRINT N'Drop primary key constraint dbo.SCDPRH_PK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	DROP CONSTRAINT IF EXISTS [SCDPRH_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.SDRTRN_PK
PRINT N'Drop primary key constraint dbo.SDRTRN_PK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
	DROP CONSTRAINT IF EXISTS [SDRTRN_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.SCDPHL_ONE_HOLDER_ONLY_TCC
PRINT N'Drop check constraint dbo.SCDPHL_ONE_HOLDER_ONLY_TCC'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	DROP CONSTRAINT IF EXISTS [SCDPHL_ONE_HOLDER_ONLY_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.SCDPHL_SECURITY_DEPOSIT_ID_TUC
PRINT N'Drop unique constraint dbo.SCDPHL_SECURITY_DEPOSIT_ID_TUC'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	DROP CONSTRAINT IF EXISTS [SCDPHL_SECURITY_DEPOSIT_ID_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.SCDPHL_PK
PRINT N'Drop primary key constraint dbo.SCDPHL_PK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	DROP CONSTRAINT IF EXISTS [SCDPHL_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.SECDEP_PK
PRINT N'Drop primary key constraint dbo.SECDEP_PK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
	DROP CONSTRAINT IF EXISTS [SECDEP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_LEASE_H_UK
PRINT N'Drop unique constraint dbo.PIMS_LEASE_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_LEASE_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_LEASE_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_LEASE_H_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_LEASE_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_LOCATION_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_LOCATION_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_PROPERTY_LOCATION_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PROPLS_PROPERTY_LEASE_TUC
PRINT N'Drop unique constraint dbo.PROPLS_PROPERTY_LEASE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	DROP CONSTRAINT IF EXISTS [PROPLS_PROPERTY_LEASE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PROPLS_PK
PRINT N'Drop primary key constraint dbo.PROPLS_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	DROP CONSTRAINT IF EXISTS [PROPLS_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMPRV_LEASE_IMPROVEMENT_TUC
PRINT N'Drop unique constraint dbo.PIMPRV_LEASE_IMPROVEMENT_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	DROP CONSTRAINT IF EXISTS [PIMPRV_LEASE_IMPROVEMENT_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMPRV_PK
PRINT N'Drop primary key constraint dbo.PIMPRV_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	DROP CONSTRAINT IF EXISTS [PIMPRV_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.TENANT_LEASE_PERSON_ORG_TUC
PRINT N'Drop unique constraint dbo.TENANT_LEASE_PERSON_ORG_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	DROP CONSTRAINT IF EXISTS [TENANT_LEASE_PERSON_ORG_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.TENANT_PK
PRINT N'Drop primary key constraint dbo.TENANT_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	DROP CONSTRAINT IF EXISTS [TENANT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.LESNOT_LEASE_NOTE_TUC
PRINT N'Drop unique constraint dbo.LESNOT_LEASE_NOTE_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
	DROP CONSTRAINT IF EXISTS [LESNOT_LEASE_NOTE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LESNOT_PK
PRINT N'Drop primary key constraint dbo.LESNOT_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
	DROP CONSTRAINT IF EXISTS [LESNOT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.LESDOC_LEASE_DOCUMENT_TUC
PRINT N'Drop unique constraint dbo.LESDOC_LEASE_DOCUMENT_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [LESDOC_LEASE_DOCUMENT_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LESDOC_PK
PRINT N'Drop primary key constraint dbo.LESDOC_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [LESDOC_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.LESCON_LEASE_CONSULTATION_TUC
PRINT N'Drop unique constraint dbo.LESCON_LEASE_CONSULTATION_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [LESCON_LEASE_CONSULTATION_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LESCON_PK
PRINT N'Drop primary key constraint dbo.LESCON_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [LESCON_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.LSACIN_LEASE_ACTIVITY_INSTANCE_TUC
PRINT N'Drop unique constraint dbo.LSACIN_LEASE_ACTIVITY_INSTANCE_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [LSACIN_LEASE_ACTIVITY_INSTANCE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSACIN_PK
PRINT N'Drop primary key constraint dbo.LSACIN_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	DROP CONSTRAINT IF EXISTS [LSACIN_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.INSRNC_PK
PRINT N'Drop primary key constraint dbo.INSRNC_PK'
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
	DROP CONSTRAINT IF EXISTS [INSRNC_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LEASE_PK
PRINT N'Drop primary key constraint dbo.LEASE_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP CONSTRAINT IF EXISTS [LEASE_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.ACQPAY_COMP_REQ_PAYEE_TCC
PRINT N'Drop check constraint dbo.ACQPAY_COMP_REQ_PAYEE_TCC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	DROP CONSTRAINT IF EXISTS [ACQPAY_COMP_REQ_PAYEE_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_FORM8_H_UK
PRINT N'Drop unique constraint dbo.PIMS_FORM8_H_UK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_FORM8_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_FORM8_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_FORM8_H_PK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_FORM8_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.FORM8_PERSON_ORGANIZATION_TCC
PRINT N'Drop check constraint dbo.FORM8_PERSON_ORGANIZATION_TCC'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	DROP CONSTRAINT IF EXISTS [FORM8_PERSON_ORGANIZATION_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.FORM8_PK
PRINT N'Drop primary key constraint dbo.FORM8_PK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	DROP CONSTRAINT IF EXISTS [FORM8_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_FORM_8
PRINT N'Drop table dbo.PIMS_FORM_8'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_FORM_8]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PMTITM_PK
PRINT N'Drop primary key constraint dbo.PMTITM_PK'
GO
ALTER TABLE [dbo].[PIMS_PAYMENT_ITEM_TYPE]
	DROP CONSTRAINT IF EXISTS [PMTITM_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.INHLDT_PK
PRINT N'Drop primary key constraint dbo.INHLDT_PK'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER_TYPE]
	DROP CONSTRAINT IF EXISTS [INHLDT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	DROP COLUMN IF EXISTS [TOTAL_ALLOWABLE_COMPENSATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR
PRINT N'Create table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]  ( 
	[OWNER_SOLICITOR_ID]            	bigint NOT NULL CONSTRAINT [AQOWSO_OWNER_SOLICITOR_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_OWNER_SOLICITOR_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [AQOWSO_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [AQOWSO_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [AQOWSO_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [AQOWSO_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [AQOWSO_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [AQOWSO_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [AQOWSO_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [AQOWSO_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [AQOWSO_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [AQOWSO_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [AQOWSO_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [AQOWSO_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AQOWSO_PK] PRIMARY KEY CLUSTERED([OWNER_SOLICITOR_ID])
 ON [PRIMARY])
GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER_SOLICITOR', 
--	@level2type = N'Column', @level2name = N'IS_DISABLED'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Table describing the owners'' solicitor that is assigned to the acquisition file.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER_SOLICITOR'
--GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.AQOWSO_ACQUISITION_FILE_PERSON_TUC
PRINT N'Create unique constraint dbo.AQOWSO_ACQUISITION_FILE_PERSON_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	ADD CONSTRAINT [AQOWSO_ACQUISITION_FILE_PERSON_TUC]
	UNIQUE ([ACQUISITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.AQOWSO_%column%_TCC
PRINT N'Create check constraint dbo.AQOWSO_%column%_TCC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	ADD CONSTRAINT [AQOWSO_%column%_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTEREST_HOLDER
PRINT N'Alter table dbo.PIMS_INTEREST_HOLDER'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	DROP COLUMN IF EXISTS [PRIMARY_CONTACT_ID], [INTEREST_HOLDER_TYPE_CODE], [COMMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTHLDR_PROP_INTEREST
PRINT N'Alter table dbo.PIMS_INTHLDR_PROP_INTEREST'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	ADD [INTEREST_HOLDER_INTEREST_TYPE_CODE] nvarchar(20) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_OWNER_REP
PRINT N'Create table dbo.PIMS_ACQUISITION_OWNER_REP'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP]  ( 
	[OWNER_REPRESENTATIVE_ID]       	bigint NOT NULL CONSTRAINT [AQOWRP_OWNER_REPRESENTATIVE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_OWNER_REPRESENTATIVE_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [AQOWRP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [AQOWRP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [AQOWRP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [AQOWRP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [AQOWRP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [AQOWRP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [AQOWRP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [AQOWRP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [AQOWRP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [AQOWRP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [AQOWRP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [AQOWRP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AQOWRP_PK] PRIMARY KEY CLUSTERED([OWNER_REPRESENTATIVE_ID])
 ON [PRIMARY])
GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Additional comment concerning this owener representative.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER_REP', 
--	@level2type = N'Column', @level2name = N'COMMENT'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER_REP', 
--	@level2type = N'Column', @level2name = N'IS_DISABLED'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Table describing the owners'' representative that is assigned to the acquisition file.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER_REP'
--GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.AQOWRP_ACQUISITION_FILE_PERSON_TUC
PRINT N'Create unique constraint dbo.AQOWRP_ACQUISITION_FILE_PERSON_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP]
	ADD CONSTRAINT [AQOWRP_ACQUISITION_FILE_PERSON_TUC]
	UNIQUE ([ACQUISITION_FILE_ID], [PERSON_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_ADJACENT_LAND_TYPE
PRINT N'Create table dbo.PIMS_PROPERTY_ADJACENT_LAND_TYPE'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_ADJACENT_LAND_TYPE]  ( 
	[PROPERTY_ADJACENT_LAND_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                     	nvarchar(200) NOT NULL,
	[IS_DISABLED]                     	bit NOT NULL CONSTRAINT [PRADJL_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                   	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL CONSTRAINT [PRADJL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [PRADJL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [PRADJL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [PRADJL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [PRADJL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRADJL_PK] PRIMARY KEY CLUSTERED([PROPERTY_ADJACENT_LAND_TYPE_CODE])
 ON [PRIMARY])
GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Property adjacent land code.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ADJACENT_LAND_TYPE', 
--	@level2type = N'Column', @level2name = N'PROPERTY_ADJACENT_LAND_TYPE_CODE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Property adjacent land code description.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ADJACENT_LAND_TYPE', 
--	@level2type = N'Column', @level2name = N'DESCRIPTION'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ADJACENT_LAND_TYPE', 
--	@level2type = N'Column', @level2name = N'IS_DISABLED'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ADJACENT_LAND_TYPE', 
--	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Code table to describe property adjacent land type.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ADJACENT_LAND_TYPE'
--GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_PROP_ADJACENT_LAND_TYPE
PRINT N'Create table dbo.PIMS_PROP_PROP_ADJACENT_LAND_TYPE'
GO
CREATE TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]  ( 
	[PROP_PROP_ADJACENT_LAND_TYPE_ID] 	bigint NOT NULL CONSTRAINT [PRPALT_PROP_PROP_ADJACENT_LAND_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ADJACENT_LAND_TYPE_ID_SEQ]),
	[PROPERTY_ID]                     	bigint NOT NULL,
	[PROPERTY_ADJACENT_LAND_TYPE_CODE]	nvarchar(20) NOT NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [PRPALT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRPALT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL CONSTRAINT [PRPALT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [PRPALT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [PRPALT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPALT_PK] PRIMARY KEY CLUSTERED([PROP_PROP_ADJACENT_LAND_TYPE_ID])
 ON [PRIMARY])
GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Resolves many-to-many relationship between PIMS_PROPERTY and PIMS_PROPERTY_ADJACENT_LAND_TYPE' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_ADJACENT_LAND_TYPE'
--GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PRPALT_PROP_ADJACENT_LAND_TYPE_TUC
PRINT N'Create unique constraint dbo.PRPALT_PROP_ADJACENT_LAND_TYPE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]
	ADD CONSTRAINT [PRPALT_PROP_ADJACENT_LAND_TYPE_TUC]
	UNIQUE ([PROPERTY_ADJACENT_LAND_TYPE_CODE], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_PAYEE
PRINT N'Alter table dbo.PIMS_ACQUISITION_PAYEE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	ADD [OWNER_REPRESENTATIVE_ID] bigint NULL, 
	[OWNER_SOLICITOR_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.ACQPAY_COMP_REQ_PAYEE_TCC
PRINT N'Create check constraint dbo.ACQPAY_COMP_REQ_PAYEE_TCC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	ADD CONSTRAINT [ACQPAY_COMP_REQ_PAYEE_TCC] CHECK ([ACQUISITION_OWNER_ID] IS NOT NULL AND [INTEREST_HOLDER_ID] IS NULL AND [OWNER_REPRESENTATIVE_ID] IS NULL AND [OWNER_SOLICITOR_ID] IS NULL AND [ACQUISITION_FILE_PERSON_ID] IS NULL OR [ACQUISITION_OWNER_ID] IS NULL AND [INTEREST_HOLDER_ID] IS NOT NULL AND [OWNER_REPRESENTATIVE_ID] IS NULL AND [OWNER_SOLICITOR_ID] IS NULL AND [ACQUISITION_FILE_PERSON_ID] IS NULL OR [ACQUISITION_OWNER_ID] IS NULL AND [INTEREST_HOLDER_ID] IS NULL AND [OWNER_REPRESENTATIVE_ID] IS NOT NULL AND [OWNER_SOLICITOR_ID] IS NULL AND [ACQUISITION_FILE_PERSON_ID] IS NULL OR [ACQUISITION_OWNER_ID] IS NULL AND [INTEREST_HOLDER_ID] IS NULL AND [OWNER_REPRESENTATIVE_ID] IS NULL AND [OWNER_SOLICITOR_ID] IS NOT NULL AND [ACQUISITION_FILE_PERSON_ID] IS NULL OR [ACQUISITION_OWNER_ID] IS NULL AND [INTEREST_HOLDER_ID] IS NULL AND [OWNER_REPRESENTATIVE_ID] IS NULL AND [OWNER_SOLICITOR_ID] IS NULL AND [ACQUISITION_FILE_PERSON_ID] IS NOT NULL OR [ACQUISITION_OWNER_ID] IS NULL AND [INTEREST_HOLDER_ID] IS NULL AND [OWNER_REPRESENTATIVE_ID] IS NULL AND [OWNER_SOLICITOR_ID] IS NULL AND [ACQUISITION_FILE_PERSON_ID] IS NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_PAYEE_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_PAYEE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE_HIST]
	ADD [OWNER_REPRESENTATIVE_ID] bigint NULL, 
	[OWNER_SOLICITOR_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_LEASE
PRINT N'Rebuild table dbo.PIMS_LEASE'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
DROP CONSTRAINT IF EXISTS [LEASE_LEASE_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
DROP CONSTRAINT IF EXISTS [LEASE_IS_SUBJECT_TO_RTA_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
DROP CONSTRAINT IF EXISTS [LEASE_IS_COMM_BLDG_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
DROP CONSTRAINT IF EXISTS [LEASE_IS_OTHER_IMPROVEMENT_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
DROP CONSTRAINT IF EXISTS [LEASE_EXPIRED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
DROP CONSTRAINT IF EXISTS [LEASE_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
DROP CONSTRAINT IF EXISTS [LEASE_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
DROP CONSTRAINT IF EXISTS [LEASE_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
DROP CONSTRAINT IF EXISTS [LEASE_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
DROP CONSTRAINT IF EXISTS [LEASE_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
DROP CONSTRAINT IF EXISTS [LEASE_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
DROP CONSTRAINT IF EXISTS [LEASE_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
DROP CONSTRAINT IF EXISTS [LEASE_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
DROP CONSTRAINT IF EXISTS [LEASE_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
DROP CONSTRAINT IF EXISTS [LEASE_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE]
DROP CONSTRAINT IF EXISTS [LEASE_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1688605588735]  ( 
	[LEASE_ID]                      	bigint NOT NULL CONSTRAINT [LEASE_LEASE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_ID_SEQ]),
	[LEASE_PAY_RVBL_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[LEASE_LICENSE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_CATEGORY_TYPE_CODE]      	nvarchar(20) NULL,
	[LEASE_PURPOSE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_PROGRAM_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_INITIATOR_TYPE_CODE]     	nvarchar(20) NULL,
	[LEASE_RESPONSIBILITY_TYPE_CODE]	nvarchar(20) NULL,
	[LEASE_STATUS_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[REGION_CODE]                   	smallint NULL,
	[PROJECT_ID]                    	bigint NULL,
	[L_FILE_NO]                     	nvarchar(50) NULL,
	[TFA_FILE_NO]                   	int NULL,
	[TFA_FILE_NUMBER]               	nvarchar(50) NULL,
	[PS_FILE_NO]                    	nvarchar(50) NULL,
	[LEASE_DESCRIPTION]             	nvarchar(max) NULL,
	[LEASE_CATEGORY_OTHER_DESC]     	nvarchar(200) NULL,
	[LEASE_PURPOSE_OTHER_DESC]      	nvarchar(200) NULL,
	[LEASE_NOTES]                   	nvarchar(max) NULL,
	[MOTI_CONTACT]                  	nvarchar(200) NULL,
	[DOCUMENTATION_REFERENCE]       	nvarchar(500) NULL,
	[RETURN_NOTES]                  	nvarchar(max) NULL,
	[OTHER_LEASE_PROGRAM_TYPE]      	nvarchar(200) NULL,
	[OTHER_LEASE_LICENSE_TYPE]      	nvarchar(200) NULL,
	[OTHER_LEASE_PURPOSE_TYPE]      	nvarchar(200) NULL,
	[ORIG_START_DATE]               	datetime NOT NULL,
	[ORIG_EXPIRY_DATE]              	datetime NULL,
	[LEASE_AMOUNT]                  	money NULL,
	[RESPONSIBILITY_EFFECTIVE_DATE] 	datetime NULL,
	[INSPECTION_DATE]               	datetime NULL,
	[INSPECTION_NOTES]              	nvarchar(max) NULL,
	[IS_SUBJECT_TO_RTA]             	bit NULL CONSTRAINT [LEASE_IS_SUBJECT_TO_RTA_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_COMM_BLDG]                  	bit NULL CONSTRAINT [LEASE_IS_COMM_BLDG_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_OTHER_IMPROVEMENT]          	bit NULL CONSTRAINT [LEASE_IS_OTHER_IMPROVEMENT_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_EXPIRED]                    	bit NOT NULL CONSTRAINT [LEASE_EXPIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[HAS_PHYSICAL_FILE]             	bit NULL,
	[HAS_DIGITAL_FILE]              	bit NULL,
	[HAS_PHYSICIAL_LICENSE]         	bit NULL,
	[HAS_DIGITAL_LICENSE]           	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LEASE_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LEASE_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LEASE_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LEASE_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LEASE_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LEASE_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LEASE_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LEASE_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LEASE_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LEASE_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LEASE_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LEASE_PK] PRIMARY KEY CLUSTERED([LEASE_ID])
 ON [PRIMARY])
GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'MoTI region associated with the lease' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'REGION_CODE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Project associated with this lease.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'PROJECT_ID'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Generated identifying lease/licence number' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'L_FILE_NO'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Sourced from t_fileMain.TFA_File_Number' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'TFA_FILE_NO'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Sourced from t_fileMain.TFA_File_Number || - || t_fileSub.Subfile_Sequence_Code' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'TFA_FILE_NUMBER'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Sourced from t_fileSubOverrideData.PSFile_No' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'PS_FILE_NO'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Manually etered lease description, not the legal description' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'LEASE_DESCRIPTION'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'User-specified lease category description not included in standard set of lease purposes' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'LEASE_CATEGORY_OTHER_DESC'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'User-specified lease purpose description not included in standard set of lease purposes' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'LEASE_PURPOSE_OTHER_DESC'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Notes accompanying lease' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'LEASE_NOTES'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Contact of the MoTI person associated with the lease' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'MOTI_CONTACT'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Location of documents pertianing to the lease/license' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'DOCUMENTATION_REFERENCE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Notes accompanying lease' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'RETURN_NOTES'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Description of a non-standard lease program type' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'OTHER_LEASE_PROGRAM_TYPE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Description of a non-standard lease/license type' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'OTHER_LEASE_LICENSE_TYPE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Description of a non-standard lease purpose type' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'OTHER_LEASE_PURPOSE_TYPE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Original start date of the lease/license' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'ORIG_START_DATE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Original expiry date of the lease/license' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'ORIG_EXPIRY_DATE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Lease/licence amount' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'LEASE_AMOUNT'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Date current responsibility came into effect for this lease' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'RESPONSIBILITY_EFFECTIVE_DATE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Inspection date' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'INSPECTION_DATE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Notes accompanying inspection' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'INSPECTION_NOTES'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Is subject the Residential Tenancy Act' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'IS_SUBJECT_TO_RTA'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Is a commercial building' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'IS_COMM_BLDG'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Is improvement of another description' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'IS_OTHER_IMPROVEMENT'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Incidcator that lease/license has expired' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'IS_EXPIRED'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Indicator that phyical file exists' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'HAS_PHYSICAL_FILE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Indicator that digital file exists' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'HAS_DIGITAL_FILE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Indicator that physical license exists' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'HAS_PHYSICIAL_LICENSE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Indicator that digital license exists' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735', 
--	@level2type = N'Column', @level2name = N'HAS_DIGITAL_LICENSE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Details of a lease that is inventoried in PIMS system.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588735'
--GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1688605588735]([LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_DESCRIPTION], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [LEASE_NOTES], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [RETURN_NOTES], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [INSPECTION_NOTES], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [L_FILE_NO], [TFA_FILE_NO], SUBSTRING(TFA_FILE_NUMBER,1,50), [PS_FILE_NO], [LEASE_DESCRIPTION], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [LEASE_NOTES], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [RETURN_NOTES], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [INSPECTION_NOTES], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_LEASE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1688605588735]', N'PIMS_LEASE', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_INSURANCE
PRINT N'Rebuild table dbo.PIMS_INSURANCE'
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
DROP CONSTRAINT IF EXISTS [INSRNC_INSURANCE_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
DROP CONSTRAINT IF EXISTS [INSRNC_COVERAGE_LIMIT_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
DROP CONSTRAINT IF EXISTS [INSRNC_IS_INSURANCE_IN_PLACE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
DROP CONSTRAINT IF EXISTS [INSRNC_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
DROP CONSTRAINT IF EXISTS [INSRNC_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
DROP CONSTRAINT IF EXISTS [INSRNC_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
DROP CONSTRAINT IF EXISTS [INSRNC_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
DROP CONSTRAINT IF EXISTS [INSRNC_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
DROP CONSTRAINT IF EXISTS [INSRNC_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
DROP CONSTRAINT IF EXISTS [INSRNC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
DROP CONSTRAINT IF EXISTS [INSRNC_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
DROP CONSTRAINT IF EXISTS [INSRNC_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
DROP CONSTRAINT IF EXISTS [INSRNC_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
DROP CONSTRAINT IF EXISTS [INSRNC_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1688605588760]  ( 
	[INSURANCE_ID]                  	bigint NOT NULL CONSTRAINT [INSRNC_INSURANCE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_INSURANCE_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[INSURANCE_TYPE_CODE]           	nvarchar(20) NOT NULL,
	[OTHER_INSURANCE_TYPE]          	nvarchar(200) NULL,
	[COVERAGE_DESCRIPTION]          	nvarchar(2000) NULL,
	[COVERAGE_LIMIT]                	money NULL CONSTRAINT [INSRNC_COVERAGE_LIMIT_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_INSURANCE_IN_PLACE]         	bit NULL CONSTRAINT [INSRNC_IS_INSURANCE_IN_PLACE_DEF]  DEFAULT (CONVERT([bit],(0))),
	[EXPIRY_DATE]                   	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [INSRNC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [INSRNC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [INSRNC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [INSRNC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [INSRNC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [INSRNC_PK] PRIMARY KEY CLUSTERED([INSURANCE_ID])
 ON [PRIMARY])
GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Description of the non-standard insurance coverage type' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
--	@level2type = N'Column', @level2name = N'OTHER_INSURANCE_TYPE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Description of the insurance coverage' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
--	@level2type = N'Column', @level2name = N'COVERAGE_DESCRIPTION'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Monetary limit of the insurance coverage' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
--	@level2type = N'Column', @level2name = N'COVERAGE_LIMIT'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Indicator that digital license exists' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
--	@level2type = N'Column', @level2name = N'IS_INSURANCE_IN_PLACE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Date the insurance expires' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
--	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
--GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1688605588760]([INSURANCE_ID], [LEASE_ID], [INSURANCE_TYPE_CODE], [OTHER_INSURANCE_TYPE], [COVERAGE_DESCRIPTION], [COVERAGE_LIMIT], [IS_INSURANCE_IN_PLACE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [INSURANCE_ID], [LEASE_ID], [INSURANCE_TYPE_CODE], [OTHER_INSURANCE_TYPE], [COVERAGE_DESCRIPTION], [COVERAGE_LIMIT], [IS_INSURANCE_IN_PLACE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_INSURANCE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_INSURANCE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1688605588760]', N'PIMS_INSURANCE', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_LEASE_ACTIVITY_INSTANCE
PRINT N'Rebuild table dbo.PIMS_LEASE_ACTIVITY_INSTANCE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
DROP CONSTRAINT IF EXISTS [LSACIN_LEASE_ACTIVITY_INSTANCE_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
DROP CONSTRAINT IF EXISTS [LSACIN_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
DROP CONSTRAINT IF EXISTS [LSACIN_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
DROP CONSTRAINT IF EXISTS [LSACIN_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
DROP CONSTRAINT IF EXISTS [LSACIN_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
DROP CONSTRAINT IF EXISTS [LSACIN_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
DROP CONSTRAINT IF EXISTS [LSACIN_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
DROP CONSTRAINT IF EXISTS [LSACIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
DROP CONSTRAINT IF EXISTS [LSACIN_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
DROP CONSTRAINT IF EXISTS [LSACIN_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
DROP CONSTRAINT IF EXISTS [LSACIN_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
DROP CONSTRAINT IF EXISTS [LSACIN_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1688605588754]  ( 
	[LEASE_ACTIVITY_INSTANCE_ID]    	bigint NOT NULL CONSTRAINT [LSACIN_LEASE_ACTIVITY_INSTANCE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_ACTIVITY_INSTANCE_ID_SEQ]),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LSACIN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LSACIN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LSACIN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LSACIN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LSACIN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSACIN_PK] PRIMARY KEY CLUSTERED([LEASE_ACTIVITY_INSTANCE_ID])
 ON [PRIMARY])
GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Associative entity between leases/licenses and activity instances.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588754'
--GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1688605588754]([LEASE_ACTIVITY_INSTANCE_ID], [ACTIVITY_INSTANCE_ID], [LEASE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [LEASE_ACTIVITY_INSTANCE_ID], [ACTIVITY_INSTANCE_ID], [LEASE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1688605588754]', N'PIMS_LEASE_ACTIVITY_INSTANCE', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.LSACIN_LEASE_ACTIVITY_INSTANCE_TUC
PRINT N'Create unique constraint dbo.LSACIN_LEASE_ACTIVITY_INSTANCE_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [LSACIN_LEASE_ACTIVITY_INSTANCE_TUC]
	UNIQUE ([LEASE_ID], [ACTIVITY_INSTANCE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_LEASE_CONSULTATION
PRINT N'Rebuild table dbo.PIMS_LEASE_CONSULTATION'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_LEASE_CONSULTATION_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_CONSULTATION_STATUS_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1688605588761]  ( 
	[LEASE_CONSULTATION_ID]         	bigint NOT NULL CONSTRAINT [LESCON_LEASE_CONSULTATION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_CONSULTATION_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[CONSULTATION_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[CONSULTATION_STATUS_TYPE_CODE] 	nvarchar(20) NOT NULL CONSTRAINT [LESCON_CONSULTATION_STATUS_TYPE_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[OTHER_DESCRIPTION]             	nvarchar(2000) NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [LESCON_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LESCON_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LESCON_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LESCON_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LESCON_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LESCON_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LESCON_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LESCON_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LESCON_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [LESCON_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LESCON_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LESCON_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LESCON_PK] PRIMARY KEY CLUSTERED([LEASE_CONSULTATION_ID])
 ON [PRIMARY])
GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Placeholder for descriptive text when "Describe Other" selected.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
--	@level2type = N'Column', @level2name = N'OTHER_DESCRIPTION'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_LEASE_CONSULTATION', 
--	@level2type = N'Column', @level2name = N'IS_DISABLED'
--GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1688605588761]([LEASE_CONSULTATION_ID], [LEASE_ID], [CONSULTATION_TYPE_CODE], [CONSULTATION_STATUS_TYPE_CODE], [OTHER_DESCRIPTION], [IS_DISABLED], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [LEASE_CONSULTATION_ID], [LEASE_ID], [CONSULTATION_TYPE_CODE], [CONSULTATION_STATUS_TYPE_CODE], [OTHER_DESCRIPTION], [IS_DISABLED], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_LEASE_CONSULTATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_CONSULTATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1688605588761]', N'PIMS_LEASE_CONSULTATION', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.LESCON_LEASE_CONSULTATION_TUC
PRINT N'Create unique constraint dbo.LESCON_LEASE_CONSULTATION_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [LESCON_LEASE_CONSULTATION_TUC]
	UNIQUE ([CONSULTATION_TYPE_CODE], [LEASE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_LEASE_DOCUMENT
PRINT N'Rebuild table dbo.PIMS_LEASE_DOCUMENT'
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
DROP CONSTRAINT IF EXISTS [LESDOC_LEASE_DOCUMENT_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
DROP CONSTRAINT IF EXISTS [LESDOC_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
DROP CONSTRAINT IF EXISTS [LESDOC_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
DROP CONSTRAINT IF EXISTS [LESDOC_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
DROP CONSTRAINT IF EXISTS [LESDOC_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
DROP CONSTRAINT IF EXISTS [LESDOC_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
DROP CONSTRAINT IF EXISTS [LESDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
DROP CONSTRAINT IF EXISTS [LESDOC_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
DROP CONSTRAINT IF EXISTS [LESDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
DROP CONSTRAINT IF EXISTS [LESDOC_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
DROP CONSTRAINT IF EXISTS [LESDOC_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
DROP CONSTRAINT IF EXISTS [LESDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
DROP CONSTRAINT IF EXISTS [LESDOC_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1688605588758]  ( 
	[LEASE_DOCUMENT_ID]             	bigint NOT NULL CONSTRAINT [LESDOC_LEASE_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_DOCUMENT_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [LESDOC_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LESDOC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LESDOC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LESDOC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LESDOC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LESDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LESDOC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LESDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LESDOC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [LESDOC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LESDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LESDOC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LESDOC_PK] PRIMARY KEY CLUSTERED([LEASE_DOCUMENT_ID])
 ON [PRIMARY])
GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_LEASE_DOCUMENT', 
--	@level2type = N'Column', @level2name = N'IS_DISABLED'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Defines the relationship betwwen a lease and a document.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588758'
--GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1688605588758]([LEASE_DOCUMENT_ID], [LEASE_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [LEASE_DOCUMENT_ID], [LEASE_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_LEASE_DOCUMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_DOCUMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1688605588758]', N'PIMS_LEASE_DOCUMENT', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.LESDOC_LEASE_DOCUMENT_TUC
PRINT N'Create unique constraint dbo.LESDOC_LEASE_DOCUMENT_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
	ADD CONSTRAINT [LESDOC_LEASE_DOCUMENT_TUC]
	UNIQUE ([DOCUMENT_ID], [LEASE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_LEASE_NOTE
PRINT N'Rebuild table dbo.PIMS_LEASE_NOTE'
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
DROP CONSTRAINT IF EXISTS [LESNOT_LEASE_NOTE_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
DROP CONSTRAINT IF EXISTS [LESNOT_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
DROP CONSTRAINT IF EXISTS [LESNOT_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
DROP CONSTRAINT IF EXISTS [LESNOT_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
DROP CONSTRAINT IF EXISTS [LESNOT_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
DROP CONSTRAINT IF EXISTS [LESNOT_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
DROP CONSTRAINT IF EXISTS [LESNOT_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
DROP CONSTRAINT IF EXISTS [LESNOT_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
DROP CONSTRAINT IF EXISTS [LESNOT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
DROP CONSTRAINT IF EXISTS [LESNOT_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
DROP CONSTRAINT IF EXISTS [LESNOT_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
DROP CONSTRAINT IF EXISTS [LESNOT_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
DROP CONSTRAINT IF EXISTS [LESNOT_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1688605588759]  ( 
	[LEASE_NOTE_ID]                 	bigint NOT NULL CONSTRAINT [LESNOT_LEASE_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_NOTE_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [LESNOT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LESNOT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LESNOT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LESNOT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LESNOT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LESNOT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LESNOT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LESNOT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LESNOT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [LESNOT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LESNOT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LESNOT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LESNOT_PK] PRIMARY KEY CLUSTERED([LEASE_NOTE_ID])
 ON [PRIMARY])
GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_LEASE_NOTE', 
--	@level2type = N'Column', @level2name = N'IS_DISABLED'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Defines the relationship betwwen a lease and a note.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588759'
--GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1688605588759]([LEASE_NOTE_ID], [LEASE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [LEASE_NOTE_ID], [LEASE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_LEASE_NOTE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_NOTE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1688605588759]', N'PIMS_LEASE_NOTE', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.LESNOT_LEASE_NOTE_TUC
PRINT N'Create unique constraint dbo.LESNOT_LEASE_NOTE_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
	ADD CONSTRAINT [LESNOT_LEASE_NOTE_TUC]
	UNIQUE ([NOTE_ID], [LEASE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_LEASE_TENANT
PRINT N'Rebuild table dbo.PIMS_LEASE_TENANT'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
DROP CONSTRAINT IF EXISTS [TENANT_LEASE_TENANT_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
DROP CONSTRAINT IF EXISTS [TENANT_LESSOR_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
DROP CONSTRAINT IF EXISTS [TENANT_TENANT_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
DROP CONSTRAINT IF EXISTS [TENANT_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
DROP CONSTRAINT IF EXISTS [TENANT_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
DROP CONSTRAINT IF EXISTS [TENANT_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
DROP CONSTRAINT IF EXISTS [TENANT_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
DROP CONSTRAINT IF EXISTS [TENANT_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
DROP CONSTRAINT IF EXISTS [TENANT_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
DROP CONSTRAINT IF EXISTS [TENANT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
DROP CONSTRAINT IF EXISTS [TENANT_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
DROP CONSTRAINT IF EXISTS [TENANT_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
DROP CONSTRAINT IF EXISTS [TENANT_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
DROP CONSTRAINT IF EXISTS [TENANT_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1688605588756]  ( 
	[LEASE_TENANT_ID]               	bigint NOT NULL CONSTRAINT [TENANT_LEASE_TENANT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_TENANT_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[LESSOR_TYPE_CODE]              	nvarchar(20) NOT NULL CONSTRAINT [TENANT_LESSOR_TYPE_CODE_DEF]  DEFAULT ('UNK'),
	[TENANT_TYPE_CODE]              	nvarchar(20) NOT NULL CONSTRAINT [TENANT_TENANT_TYPE_CODE_DEF]  DEFAULT ('UNK'),
	[NOTE]                          	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [TENANT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [TENANT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [TENANT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [TENANT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [TENANT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [TENANT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [TENANT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [TENANT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [TENANT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [TENANT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [TENANT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [TENANT_PK] PRIMARY KEY CLUSTERED([LEASE_TENANT_ID])
 ON [PRIMARY])
GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Notes associated with the lease/tenant relationship.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_LEASE_TENANT', 
--	@level2type = N'Column', @level2name = N'NOTE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Associates a tenant with a lease' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588756'
--GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1688605588756]([LEASE_TENANT_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [LESSOR_TYPE_CODE], [TENANT_TYPE_CODE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [LEASE_TENANT_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [LESSOR_TYPE_CODE], [TENANT_TYPE_CODE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_LEASE_TENANT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_TENANT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1688605588756]', N'PIMS_LEASE_TENANT', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.TENANT_LEASE_PERSON_ORG_TUC
PRINT N'Create unique constraint dbo.TENANT_LEASE_PERSON_ORG_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	ADD CONSTRAINT [TENANT_LEASE_PERSON_ORG_TUC]
	UNIQUE ([ORGANIZATION_ID], [PERSON_ID], [LEASE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_TERM
PRINT N'Alter table dbo.PIMS_LEASE_TERM'
GO
EXEC dbo.sp_rename N'dbo.PIMS_LEASE_TERM.PAYMENT_AMOUNT' , N'PAYMENT AMOUNT', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LAND_ACT_TYPE
PRINT N'Alter table dbo.PIMS_LAND_ACT_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LAND_ACT_TYPE]
	DROP CONSTRAINT IF EXISTS [LNDATY_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LAND_ACT_TYPE]
	DROP COLUMN IF EXISTS [IS_DISABLED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_HIST
PRINT N'Create table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_HIST]  ( 
	[_ACQUISITION_OWNER_SOLICITOR_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                 	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                       	datetime NULL,
	[OWNER_SOLICITOR_ID]                  	bigint NOT NULL,
	[ACQUISITION_FILE_ID]                 	bigint NOT NULL,
	[PERSON_ID]                           	bigint NULL,
	[ORGANIZATION_ID]                     	bigint NULL,
	[IS_DISABLED]                         	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]          	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[APP_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                 	datetime NOT NULL,
	[DB_CREATE_USERID]                    	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]               	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_AQOWSO_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_OWNER_SOLICITOR_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_AQOWSO_H_UK
PRINT N'Create unique constraint dbo.PIMS_AQOWSO_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_HIST]
	ADD CONSTRAINT [PIMS_AQOWSO_H_UK]
	UNIQUE ([_ACQUISITION_OWNER_SOLICITOR_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_TAKE_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_TAKE_STATUS_TYPE]
	DROP CONSTRAINT IF EXISTS [TKSTST_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE_STATUS_TYPE]
	DROP COLUMN IF EXISTS [IS_DISABLED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_TERM_HIST
PRINT N'Alter table dbo.PIMS_LEASE_TERM_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_LEASE_TERM_HIST.PAYMENT_AMOUNT' , N'PAYMENT AMOUNT', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE_SITE_CONTAM_TYPE
PRINT N'Alter table dbo.PIMS_TAKE_SITE_CONTAM_TYPE'
GO
ALTER TABLE [dbo].[PIMS_TAKE_SITE_CONTAM_TYPE]
	DROP CONSTRAINT IF EXISTS [TKCONT_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE_SITE_CONTAM_TYPE]
	DROP COLUMN IF EXISTS [IS_DISABLED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_AGREEMENT
PRINT N'Alter table dbo.PIMS_AGREEMENT'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT]
	DROP COLUMN IF EXISTS [EXPROPRIATION_DATE], [POSSESSION_DATE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_AGREEMENT_HIST
PRINT N'Alter table dbo.PIMS_AGREEMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT_HIST]
	DROP COLUMN IF EXISTS [EXPROPRIATION_DATE], [POSSESSION_DATE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

---- Alter table dbo.PIMS_ACQUISITION_OWNER_REP_HIST
--PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER_REP_HIST'
--GO
--ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST] DROP CONSTRAINT IF EXISTS [DF__PIMS_ACQU___ACQU__290D0E62]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO
--ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST] ADD DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_OWNER_REP_H_ID_SEQ]) FOR [_ACQUISITION_OWNER_REP_HIST_ID]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO
--ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST] DROP CONSTRAINT IF EXISTS [DF__PIMS_ACQU__EFFEC__2A01329B]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO
--ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST] ADD DEFAULT (getutcdate()) FOR [EFFECTIVE_DATE_HIST]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Create sequence dbo.PIMS_ACQUISITION_OWNER_REP_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_OWNER_REP_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_OWNER_REP_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_OWNER_REP_HIST
PRINT N'Create table dbo.PIMS_ACQUISITION_OWNER_REP_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST]  ( 
	[_ACQUISITION_OWNER_REP_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_OWNER_REP_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[OWNER_REPRESENTATIVE_ID]       	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_AQOWRP_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_OWNER_REP_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_AQOWRP_H_UK
PRINT N'Create unique constraint dbo.PIMS_AQOWRP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST]
	ADD CONSTRAINT [PIMS_AQOWRP_H_UK]
	UNIQUE ([_ACQUISITION_OWNER_REP_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST]
	DROP COLUMN IF EXISTS [TOTAL_ALLOWABLE_COMPENSATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE_TYPE
PRINT N'Alter table dbo.PIMS_TAKE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_TAKE_TYPE]
	DROP CONSTRAINT IF EXISTS [TKTYPE_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_TAKE_TYPE]
	DROP COLUMN IF EXISTS [IS_DISABLED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE]
	DROP CONSTRAINT IF EXISTS [ACQCST_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE]
	DROP COLUMN IF EXISTS [IS_DISABLED]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTEREST_HOLDER_HIST
PRINT N'Alter table dbo.PIMS_INTEREST_HOLDER_HIST'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER_HIST]
	DROP COLUMN IF EXISTS [PRIMARY_CONTACT_ID], [INTEREST_HOLDER_TYPE_CODE], [COMMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTHLDR_PROP_INTEREST_HIST
PRINT N'Alter table dbo.PIMS_INTHLDR_PROP_INTEREST_HIST'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST_HIST]
	ADD [INTEREST_HOLDER_INTEREST_TYPE_CODE] nvarchar(20) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROPERTY_IMPROVEMENT
PRINT N'Rebuild table dbo.PIMS_PROPERTY_IMPROVEMENT'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
DROP CONSTRAINT IF EXISTS [PIMPRV_PROPERTY_IMPROVEMENT_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
DROP CONSTRAINT IF EXISTS [PIMPRV_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
DROP CONSTRAINT IF EXISTS [PIMPRV_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
DROP CONSTRAINT IF EXISTS [PIMPRV_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
DROP CONSTRAINT IF EXISTS [PIMPRV_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
DROP CONSTRAINT IF EXISTS [PIMPRV_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
DROP CONSTRAINT IF EXISTS [PIMPRV_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
DROP CONSTRAINT IF EXISTS [PIMPRV_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
DROP CONSTRAINT IF EXISTS [PIMPRV_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
DROP CONSTRAINT IF EXISTS [PIMPRV_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
DROP CONSTRAINT IF EXISTS [PIMPRV_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
DROP CONSTRAINT IF EXISTS [PIMPRV_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1688605588753]  ( 
	[PROPERTY_IMPROVEMENT_ID]       	bigint NOT NULL CONSTRAINT [PIMPRV_PROPERTY_IMPROVEMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_IMPROVEMENT_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[PROPERTY_IMPROVEMENT_TYPE_CODE]	nvarchar(20) NOT NULL,
	[IMPROVEMENT_DESCRIPTION]       	nvarchar(2000) NULL,
	[STRUCTURE_SIZE]                	nvarchar(2000) NULL,
	[ADDRESS]                       	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PIMPRV_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PIMPRV_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PIMPRV_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PIMPRV_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PIMPRV_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PIMPRV_PK] PRIMARY KEY CLUSTERED([PROPERTY_IMPROVEMENT_ID])
 ON [PRIMARY])
GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Description of the improvements' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT', 
--	@level2type = N'Column', @level2name = N'IMPROVEMENT_DESCRIPTION'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Size of the structure (house, building, bridge, etc,)' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT', 
--	@level2type = N'Column', @level2name = N'STRUCTURE_SIZE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Addresses affected' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT', 
--	@level2type = N'Column', @level2name = N'ADDRESS'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Description of property improvements associated with the lease.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588753'
--GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1688605588753]([PROPERTY_IMPROVEMENT_ID], [LEASE_ID], [PROPERTY_IMPROVEMENT_TYPE_CODE], [IMPROVEMENT_DESCRIPTION], [STRUCTURE_SIZE], [ADDRESS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [PROPERTY_IMPROVEMENT_ID], [LEASE_ID], [PROPERTY_IMPROVEMENT_TYPE_CODE], [IMPROVEMENT_DESCRIPTION], [STRUCTURE_SIZE], [ADDRESS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_PROPERTY_IMPROVEMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_IMPROVEMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1688605588753]', N'PIMS_PROPERTY_IMPROVEMENT', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMPRV_LEASE_IMPROVEMENT_TUC
PRINT N'Create unique constraint dbo.PIMPRV_LEASE_IMPROVEMENT_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	ADD CONSTRAINT [PIMPRV_LEASE_IMPROVEMENT_TUC]
	UNIQUE ([LEASE_ID], [PROPERTY_IMPROVEMENT_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_PROPERTY_LEASE
PRINT N'Rebuild table dbo.PIMS_PROPERTY_LEASE'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
DROP CONSTRAINT IF EXISTS [PROPLS_PROPERTY_LEASE_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
DROP CONSTRAINT IF EXISTS [PROPLS_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
DROP CONSTRAINT IF EXISTS [PROPLS_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
DROP CONSTRAINT IF EXISTS [PROPLS_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
DROP CONSTRAINT IF EXISTS [PROPLS_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
DROP CONSTRAINT IF EXISTS [PROPLS_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
DROP CONSTRAINT IF EXISTS [PROPLS_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
DROP CONSTRAINT IF EXISTS [PROPLS_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
DROP CONSTRAINT IF EXISTS [PROPLS_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
DROP CONSTRAINT IF EXISTS [PROPLS_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
DROP CONSTRAINT IF EXISTS [PROPLS_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
DROP CONSTRAINT IF EXISTS [PROPLS_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1688605588755]  ( 
	[PROPERTY_LEASE_ID]             	bigint NOT NULL CONSTRAINT [PROPLS_PROPERTY_LEASE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_LEASE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[AREA_UNIT_TYPE_CODE]           	nvarchar(20) NULL,
	[NAME]                          	nvarchar(250) NULL,
	[LEASE_AREA]                    	real NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PROPLS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PROPLS_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PROPLS_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PROPLS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PROPLS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PROPLS_PK] PRIMARY KEY CLUSTERED([PROPERTY_LEASE_ID])
 ON [PRIMARY])
GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Property/lease name' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_LEASE', 
--	@level2type = N'Column', @level2name = N'NAME'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Leased area measurement' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_LEASE', 
--	@level2type = N'Column', @level2name = N'LEASE_AREA'
--GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1688605588755]([PROPERTY_LEASE_ID], [PROPERTY_ID], [LEASE_ID], [AREA_UNIT_TYPE_CODE], [NAME], [LEASE_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [PROPERTY_LEASE_ID], [PROPERTY_ID], [LEASE_ID], [AREA_UNIT_TYPE_CODE], [NAME], [LEASE_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_PROPERTY_LEASE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_LEASE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1688605588755]', N'PIMS_PROPERTY_LEASE', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PROPLS_PROPERTY_LEASE_TUC
PRINT N'Create unique constraint dbo.PROPLS_PROPERTY_LEASE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	ADD CONSTRAINT [PROPLS_PROPERTY_LEASE_TUC]
	UNIQUE ([LEASE_ID], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_LOCATION_VW
PRINT N'Create view dbo.PIMS_PROPERTY_LOCATION_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_LOCATION_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN                   
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , PROP.PROPERTY_CLASSIFICATION_TYPE_CODE  
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TNUR.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE  TNUR INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYPE TNTY ON TNTY.PROPERTY_TENURE_TYPE_CODE = TNUR.PROPERTY_TENURE_TYPE_CODE
                                                      AND TNTY.PROPERTY_ID               = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.NAME
     , PROP.DESCRIPTION
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.LOCATION AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.ENCUMBRANCE_REASON
     , PROP.IS_SENSITIVE
     , PROP.IS_OWNED
     , PROP.IS_PROPERTY_OF_INTEREST
     , PROP.IS_VISIBLE_TO_OTHER_AGENCIES
     , PROP.ZONING
     , PROP.ZONING_POTENTIAL
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN ('PYBLMOTI', 'PYBLBCTFA')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_PAYABLE_LEASE                         
FROM   PIMS_PROPERTY       PROP                                                    LEFT OUTER JOIN
       PIMS_ADDRESS        ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY        CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
WHERE  PROP.LOCATION IS NOT NULL

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_LEASE_HIST
PRINT N'Rebuild table dbo.PIMS_LEASE_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1688605588736]  ( 
	[_LEASE_HIST_ID]                	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[LEASE_PAY_RVBL_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[LEASE_LICENSE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_CATEGORY_TYPE_CODE]      	nvarchar(20) NULL,
	[LEASE_PURPOSE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_PROGRAM_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_INITIATOR_TYPE_CODE]     	nvarchar(20) NULL,
	[LEASE_RESPONSIBILITY_TYPE_CODE]	nvarchar(20) NULL,
	[LEASE_STATUS_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[REGION_CODE]                   	smallint NULL,
	[PROJECT_ID]                    	bigint NULL,
	[L_FILE_NO]                     	nvarchar(50) NULL,
	[TFA_FILE_NO]                   	int NULL,
	[TFA_FILE_NUMBER]               	nvarchar(50) NULL,
	[PS_FILE_NO]                    	nvarchar(50) NULL,
	[LEASE_CATEGORY_OTHER_DESC]     	nvarchar(200) NULL,
	[LEASE_PURPOSE_OTHER_DESC]      	nvarchar(200) NULL,
	[MOTI_CONTACT]                  	nvarchar(200) NULL,
	[DOCUMENTATION_REFERENCE]       	nvarchar(500) NULL,
	[OTHER_LEASE_PROGRAM_TYPE]      	nvarchar(200) NULL,
	[OTHER_LEASE_LICENSE_TYPE]      	nvarchar(200) NULL,
	[OTHER_LEASE_PURPOSE_TYPE]      	nvarchar(200) NULL,
	[ORIG_START_DATE]               	datetime NOT NULL,
	[ORIG_EXPIRY_DATE]              	datetime NULL,
	[LEASE_AMOUNT]                  	money NULL,
	[RESPONSIBILITY_EFFECTIVE_DATE] 	datetime NULL,
	[INSPECTION_DATE]               	datetime NULL,
	[IS_SUBJECT_TO_RTA]             	bit NULL,
	[IS_COMM_BLDG]                  	bit NULL,
	[IS_OTHER_IMPROVEMENT]          	bit NULL,
	[IS_EXPIRED]                    	bit NOT NULL,
	[HAS_PHYSICAL_FILE]             	bit NULL,
	[HAS_DIGITAL_FILE]              	bit NULL,
	[HAS_PHYSICIAL_LICENSE]         	bit NULL,
	[HAS_DIGITAL_LICENSE]           	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LEASE_H_PK] PRIMARY KEY CLUSTERED([_LEASE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1688605588736]([_LEASE_HIST_ID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [_LEASE_HIST_ID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [L_FILE_NO], [TFA_FILE_NO], SUBSTRING(TFA_FILE_NUMBER,1,50), [PS_FILE_NO], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_LEASE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1688605588736]', N'PIMS_LEASE_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_LEASE_H_UK
PRINT N'Create unique constraint dbo.PIMS_LEASE_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_HIST]
	ADD CONSTRAINT [PIMS_LEASE_H_UK]
	UNIQUE ([_LEASE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_SECURITY_DEPOSIT
PRINT N'Rebuild table dbo.PIMS_SECURITY_DEPOSIT'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
DROP CONSTRAINT IF EXISTS [SECDEP_SECURITY_DEPOSIT_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
DROP CONSTRAINT IF EXISTS [SECDEP_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
DROP CONSTRAINT IF EXISTS [SECDEP_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
DROP CONSTRAINT IF EXISTS [SECDEP_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
DROP CONSTRAINT IF EXISTS [SECDEP_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
DROP CONSTRAINT IF EXISTS [SECDEP_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
DROP CONSTRAINT IF EXISTS [SECDEP_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
DROP CONSTRAINT IF EXISTS [SECDEP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
DROP CONSTRAINT IF EXISTS [SECDEP_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
DROP CONSTRAINT IF EXISTS [SECDEP_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
DROP CONSTRAINT IF EXISTS [SECDEP_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
DROP CONSTRAINT IF EXISTS [SECDEP_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1688605588757]  ( 
	[SECURITY_DEPOSIT_ID]           	bigint NOT NULL CONSTRAINT [SECDEP_SECURITY_DEPOSIT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[SECURITY_DEPOSIT_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[OTHER_DEPOSIT_TYPE_DESC]       	nvarchar(200) NULL,
	[DESCRIPTION]                   	nvarchar(2000) NOT NULL,
	[AMOUNT_PAID]                   	money NOT NULL,
	[DEPOSIT_DATE]                  	date NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [SECDEP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [SECDEP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [SECDEP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [SECDEP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [SECDEP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SECDEP_PK] PRIMARY KEY CLUSTERED([SECURITY_DEPOSIT_ID])
 ON [PRIMARY])
GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Description of the deposit type If the SECURITY_DEPOSIT_TYPE_CODE has been chosen for this scurity deposit.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT', 
--	@level2type = N'Column', @level2name = N'OTHER_DEPOSIT_TYPE_DESC'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Descirption of this security deposit' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT', 
--	@level2type = N'Column', @level2name = N'DESCRIPTION'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Amount paid of this security deposit' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT', 
--	@level2type = N'Column', @level2name = N'AMOUNT_PAID'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Date of this security deposit' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT', 
--	@level2type = N'Column', @level2name = N'DEPOSIT_DATE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Description of a security deposit associated with a lease.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588757'
--GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1688605588757]([SECURITY_DEPOSIT_ID], [LEASE_ID], [SECURITY_DEPOSIT_TYPE_CODE], [OTHER_DEPOSIT_TYPE_DESC], [DESCRIPTION], [AMOUNT_PAID], [DEPOSIT_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [SECURITY_DEPOSIT_ID], [LEASE_ID], [SECURITY_DEPOSIT_TYPE_CODE], [OTHER_DEPOSIT_TYPE_DESC], [DESCRIPTION], [AMOUNT_PAID], [DEPOSIT_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_SECURITY_DEPOSIT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_SECURITY_DEPOSIT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1688605588757]', N'PIMS_SECURITY_DEPOSIT', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_SECURITY_DEPOSIT_HOLDER
PRINT N'Rebuild table dbo.PIMS_SECURITY_DEPOSIT_HOLDER'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPHL_SECURITY_DEPOSIT_HOLDER_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPHL_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPHL_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPHL_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPHL_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPHL_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPHL_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPHL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPHL_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPHL_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPHL_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPHL_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1688605588763]  ( 
	[SECURITY_DEPOSIT_HOLDER_ID]    	bigint NOT NULL CONSTRAINT [SCDPHL_SECURITY_DEPOSIT_HOLDER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_HOLDER_ID_SEQ]),
	[SECURITY_DEPOSIT_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [SCDPHL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [SCDPHL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [SCDPHL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [SCDPHL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [SCDPHL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SCDPHL_PK] PRIMARY KEY CLUSTERED([SECURITY_DEPOSIT_HOLDER_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1688605588763]([SECURITY_DEPOSIT_HOLDER_ID], [SECURITY_DEPOSIT_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [SECURITY_DEPOSIT_HOLDER_ID], [SECURITY_DEPOSIT_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1688605588763]', N'PIMS_SECURITY_DEPOSIT_HOLDER', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.SCDPHL_SECURITY_DEPOSIT_ID_TUC
PRINT N'Create unique constraint dbo.SCDPHL_SECURITY_DEPOSIT_ID_TUC'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	ADD CONSTRAINT [SCDPHL_SECURITY_DEPOSIT_ID_TUC]
	UNIQUE ([SECURITY_DEPOSIT_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.SCDPHL_ONE_HOLDER_ONLY_TCC
PRINT N'Create check constraint dbo.SCDPHL_ONE_HOLDER_ONLY_TCC'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	ADD CONSTRAINT [SCDPHL_ONE_HOLDER_ONLY_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_SECURITY_DEPOSIT_RETURN
PRINT N'Rebuild table dbo.PIMS_SECURITY_DEPOSIT_RETURN'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
DROP CONSTRAINT IF EXISTS [SDRTRN_SECURITY_DEPOSIT_RETURN_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
DROP CONSTRAINT IF EXISTS [SDRTRN_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
DROP CONSTRAINT IF EXISTS [SDRTRN_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
DROP CONSTRAINT IF EXISTS [SDRTRN_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
DROP CONSTRAINT IF EXISTS [SDRTRN_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
DROP CONSTRAINT IF EXISTS [SDRTRN_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
DROP CONSTRAINT IF EXISTS [SDRTRN_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
DROP CONSTRAINT IF EXISTS [SDRTRN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
DROP CONSTRAINT IF EXISTS [SDRTRN_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
DROP CONSTRAINT IF EXISTS [SDRTRN_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
DROP CONSTRAINT IF EXISTS [SDRTRN_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
DROP CONSTRAINT IF EXISTS [SDRTRN_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1688605588762]  ( 
	[SECURITY_DEPOSIT_RETURN_ID]    	bigint NOT NULL CONSTRAINT [SDRTRN_SECURITY_DEPOSIT_RETURN_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_RETURN_ID_SEQ]),
	[SECURITY_DEPOSIT_ID]           	bigint NOT NULL,
	[TERMINATION_DATE]              	datetime NOT NULL,
	[CLAIMS_AGAINST]                	money NULL,
	[RETURN_AMOUNT]                 	money NOT NULL,
	[RETURN_DATE]                   	datetime NOT NULL,
	[INTEREST_PAID]                 	money NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [SDRTRN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [SDRTRN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [SDRTRN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [SDRTRN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [SDRTRN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SDRTRN_PK] PRIMARY KEY CLUSTERED([SECURITY_DEPOSIT_RETURN_ID])
 ON [PRIMARY])
GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Date the lease/license was terminated or surrendered' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
--	@level2type = N'Column', @level2name = N'TERMINATION_DATE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Amount of claims against the deposit' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
--	@level2type = N'Column', @level2name = N'CLAIMS_AGAINST'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Amount returned minus claims' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
--	@level2type = N'Column', @level2name = N'RETURN_AMOUNT'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Date of deposit return' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
--	@level2type = N'Column', @level2name = N'RETURN_DATE'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Interest paid on the deposit to the deposit holder' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
--	@level2type = N'Column', @level2name = N'INTEREST_PAID'
--GO
--EXEC sp_addextendedproperty 
--	@name = N'MS_Description', @value = N'Describes the details of the return of a security deposit.' , 
--	@level0type = N'Schema', @level0name = N'dbo', 
--	@level1type = N'Table', @level1name = N'ADS_SSDATA_1688605588762'
--GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1688605588762]([SECURITY_DEPOSIT_RETURN_ID], [SECURITY_DEPOSIT_ID], [TERMINATION_DATE], [CLAIMS_AGAINST], [RETURN_AMOUNT], [RETURN_DATE], [INTEREST_PAID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [SECURITY_DEPOSIT_RETURN_ID], [SECURITY_DEPOSIT_ID], [TERMINATION_DATE], [CLAIMS_AGAINST], [RETURN_AMOUNT], [RETURN_DATE], [INTEREST_PAID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1688605588762]', N'PIMS_SECURITY_DEPOSIT_RETURN', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_SECURITY_DEPOSIT_RETURN_HOLDER
PRINT N'Rebuild table dbo.PIMS_SECURITY_DEPOSIT_RETURN_HOLDER'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPRH_SECURITY_DEPOSIT_RETURN_HOLDER_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPRH_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPRH_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPRH_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPRH_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPRH_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPRH_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPRH_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPRH_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPRH_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPRH_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
DROP CONSTRAINT IF EXISTS [SCDPRH_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1688605588764]  ( 
	[SECURITY_DEPOSIT_RETURN_HOLDER_ID]	bigint NOT NULL CONSTRAINT [SCDPRH_SECURITY_DEPOSIT_RETURN_HOLDER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_ID_SEQ]),
	[SECURITY_DEPOSIT_RETURN_ID]       	bigint NOT NULL,
	[PERSON_ID]                        	bigint NULL,
	[ORGANIZATION_ID]                  	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL CONSTRAINT [SCDPRH_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [SCDPRH_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [SCDPRH_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [SCDPRH_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [SCDPRH_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SCDPRH_PK] PRIMARY KEY CLUSTERED([SECURITY_DEPOSIT_RETURN_HOLDER_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1688605588764]([SECURITY_DEPOSIT_RETURN_HOLDER_ID], [SECURITY_DEPOSIT_RETURN_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [SECURITY_DEPOSIT_RETURN_HOLDER_ID], [SECURITY_DEPOSIT_RETURN_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1688605588764]', N'PIMS_SECURITY_DEPOSIT_RETURN_HOLDER', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.SCDPRH_SECURITY_DEPOSIT_RETURN_ID_TUC
PRINT N'Create unique constraint dbo.SCDPRH_SECURITY_DEPOSIT_RETURN_ID_TUC'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	ADD CONSTRAINT [SCDPRH_SECURITY_DEPOSIT_RETURN_ID_TUC]
	UNIQUE ([SECURITY_DEPOSIT_RETURN_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.SCDPRH_ONE_HOLDER_ONLY_TCC
PRINT N'Create check constraint dbo.SCDPRH_ONE_HOLDER_ONLY_TCC'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	ADD CONSTRAINT [SCDPRH_ONE_HOLDER_ONLY_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Create view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , PROP.PROPERTY_CLASSIFICATION_TYPE_CODE
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TNUR.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE  TNUR INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYPE TNTY ON TNTY.PROPERTY_TENURE_TYPE_CODE = TNUR.PROPERTY_TENURE_TYPE_CODE
                                                      AND TNTY.PROPERTY_ID               = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.NAME
     , PROP.DESCRIPTION
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.ENCUMBRANCE_REASON
     , PROP.IS_SENSITIVE
     , PROP.IS_OWNED
     , PROP.IS_PROPERTY_OF_INTEREST
     , PROP.IS_VISIBLE_TO_OTHER_AGENCIES
     , PROP.ZONING
     , PROP.ZONING_POTENTIAL
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN ('PYBLMOTI', 'PYBLBCTFA')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_PAYABLE_LEASE
FROM   PIMS_PROPERTY       PROP                                                    LEFT OUTER JOIN
       PIMS_ADDRESS        ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY        CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
WHERE  PROP.BOUNDARY IS NOT NULL

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AQOWSO_ORGANIZATION_ID_IDX
PRINT N'Create index dbo.AQOWSO_ORGANIZATION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AQOWSO_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]([ORGANIZATION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AQOWSO_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.AQOWSO_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AQOWSO_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]([ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.IHPRIN_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX
PRINT N'Create index dbo.IHPRIN_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [IHPRIN_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX]
	ON [dbo].[PIMS_INTHLDR_PROP_INTEREST]([INTEREST_HOLDER_INTEREST_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AQOWRP_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.AQOWRP_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AQOWRP_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER_REP]([ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPALT_PROPERTY_ADJACENT_LAND_TYPE_CODE_IDX
PRINT N'Create index dbo.PRPALT_PROPERTY_ADJACENT_LAND_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPALT_PROPERTY_ADJACENT_LAND_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]([PROPERTY_ADJACENT_LAND_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AQOWRP_PERSON_ID_IDX
PRINT N'Create index dbo.AQOWRP_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AQOWRP_PERSON_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER_REP]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPALT_PROPERTY_ID_IDX
PRINT N'Create index dbo.PRPALT_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPALT_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPAY_OWNER_REPRESENTATIVE_ID_IDX
PRINT N'Create index dbo.ACQPAY_OWNER_REPRESENTATIVE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPAY_OWNER_REPRESENTATIVE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_PAYEE]([OWNER_REPRESENTATIVE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPAY_OWNER_SOLICITOR_ID_IDX
PRINT N'Create index dbo.ACQPAY_OWNER_SOLICITOR_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPAY_OWNER_SOLICITOR_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_PAYEE]([OWNER_SOLICITOR_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AQOWSO_PERSON_ID_IDX
PRINT N'Create index dbo.AQOWSO_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AQOWSO_PERSON_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_I_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE ("ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUMBER",
      "LEGACY_FILE_NUMBER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "COMPLETION_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUMBER",
      "LEGACY_FILE_NUMBER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "COMPLETION_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_A_S_IUD_TR] ON PIMS_ACQUISITION_PAYEE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_PAYEE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_PAYEE_ID in (select ACQUISITION_PAYEE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_PAYEE_HIST ([ACQUISITION_PAYEE_ID], [COMPENSATION_REQUISITION_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [OWNER_REPRESENTATIVE_ID], [OWNER_SOLICITOR_ID], [ACQUISITION_FILE_PERSON_ID], [GST_NUMBER], [IS_PAYMENT_IN_TRUST], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_PAYEE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_PAYEE_ID], [COMPENSATION_REQUISITION_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [OWNER_REPRESENTATIVE_ID], [OWNER_SOLICITOR_ID], [ACQUISITION_FILE_PERSON_ID], [GST_NUMBER], [IS_PAYMENT_IN_TRUST], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_PAYEE_H_ID_SEQ]) as [_ACQUISITION_PAYEE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LEASE_L_FILE_NO_IDX
PRINT N'Create index dbo.LEASE_L_FILE_NO_IDX'
GO
CREATE NONCLUSTERED INDEX [LEASE_L_FILE_NO_IDX]
	ON [dbo].[PIMS_LEASE]([L_FILE_NO])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LEASE_LEASE_CATEGORY_TYPE_CODE_IDX
PRINT N'Create index dbo.LEASE_LEASE_CATEGORY_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LEASE_LEASE_CATEGORY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_CATEGORY_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LEASE_LEASE_INITIATOR_TYPE_CODE_IDX
PRINT N'Create index dbo.LEASE_LEASE_INITIATOR_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LEASE_LEASE_INITIATOR_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_INITIATOR_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LEASE_LEASE_LICENSE_TYPE_CODE_IDX
PRINT N'Create index dbo.LEASE_LEASE_LICENSE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LEASE_LEASE_LICENSE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_LICENSE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LEASE_LEASE_PAY_RVBL_TYPE_CODE_IDX
PRINT N'Create index dbo.LEASE_LEASE_PAY_RVBL_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LEASE_LEASE_PAY_RVBL_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_PAY_RVBL_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LEASE_LEASE_PROGRAM_TYPE_CODE_IDX
PRINT N'Create index dbo.LEASE_LEASE_PROGRAM_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LEASE_LEASE_PROGRAM_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_PROGRAM_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LEASE_LEASE_PURPOSE_TYPE_CODE_IDX
PRINT N'Create index dbo.LEASE_LEASE_PURPOSE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LEASE_LEASE_PURPOSE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_PURPOSE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LEASE_LEASE_RESPONSIBILITY_TYPE_CODE_IDX
PRINT N'Create index dbo.LEASE_LEASE_RESPONSIBILITY_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LEASE_LEASE_RESPONSIBILITY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_RESPONSIBILITY_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LEASE_LEASE_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.LEASE_LEASE_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LEASE_LEASE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LEASE_PS_FILE_NO_IDX
PRINT N'Create index dbo.LEASE_PS_FILE_NO_IDX'
GO
CREATE NONCLUSTERED INDEX [LEASE_PS_FILE_NO_IDX]
	ON [dbo].[PIMS_LEASE]([PS_FILE_NO])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LEASE_REGION_CODE_IDX
PRINT N'Create index dbo.LEASE_REGION_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LEASE_REGION_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([REGION_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LEASE_TFA_FILE_NO_IDX
PRINT N'Create index dbo.LEASE_TFA_FILE_NO_IDX'
GO
CREATE NONCLUSTERED INDEX [LEASE_TFA_FILE_NO_IDX]
	ON [dbo].[PIMS_LEASE]([TFA_FILE_NO])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LEASE_TFA_FILE_NUMBER_IDX
PRINT N'Create index dbo.LEASE_TFA_FILE_NUMBER_IDX'
GO
CREATE NONCLUSTERED INDEX [LEASE_TFA_FILE_NUMBER_IDX]
	ON [dbo].[PIMS_LEASE]([TFA_FILE_NUMBER])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LEASE_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_A_S_IUD_TR] ON PIMS_LEASE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_HIST set END_DATE_HIST = @curr_date where LEASE_ID in (select LEASE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_HIST ([LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_H_ID_SEQ]) as [_LEASE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LEASE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_I_TR] ON PIMS_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE ("LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "PROJECT_ID",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "TFA_FILE_NUMBER",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "PROJECT_ID",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "TFA_FILE_NUMBER",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_U_TR] ON PIMS_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_ID = deleted.LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE
    set "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE" = inserted."LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE" = inserted."LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE" = inserted."LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE" = inserted."LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE" = inserted."LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE" = inserted."LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE" = inserted."LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE" = inserted."LEASE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "L_FILE_NO" = inserted."L_FILE_NO",
      "TFA_FILE_NO" = inserted."TFA_FILE_NO",
      "TFA_FILE_NUMBER" = inserted."TFA_FILE_NUMBER",
      "PS_FILE_NO" = inserted."PS_FILE_NO",
      "LEASE_DESCRIPTION" = inserted."LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC" = inserted."LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC" = inserted."LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES" = inserted."LEASE_NOTES",
      "MOTI_CONTACT" = inserted."MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE" = inserted."DOCUMENTATION_REFERENCE",
      "RETURN_NOTES" = inserted."RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE" = inserted."OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE" = inserted."OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE" = inserted."OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE" = inserted."ORIG_START_DATE",
      "ORIG_EXPIRY_DATE" = inserted."ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT" = inserted."LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE" = inserted."RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE" = inserted."INSPECTION_DATE",
      "INSPECTION_NOTES" = inserted."INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA" = inserted."IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG" = inserted."IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT" = inserted."IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED" = inserted."IS_EXPIRED",
      "HAS_PHYSICAL_FILE" = inserted."HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE" = inserted."HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE" = inserted."HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE" = inserted."HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE
    inner join inserted
    on (PIMS_LEASE.LEASE_ID = inserted.LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.INSRNC_INSURANCE_TYPE_CODE_IDX
PRINT N'Create index dbo.INSRNC_INSURANCE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [INSRNC_INSURANCE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_INSURANCE]([INSURANCE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.INSRNC_LEASE_ID_IDX
PRINT N'Create index dbo.INSRNC_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [INSRNC_LEASE_ID_IDX]
	ON [dbo].[PIMS_INSURANCE]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INSRNC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_INSRNC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INSRNC_A_S_IUD_TR] ON PIMS_INSURANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_INSURANCE_HIST set END_DATE_HIST = @curr_date where INSURANCE_ID in (select INSURANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_INSURANCE_HIST ([INSURANCE_ID], [LEASE_ID], [INSURANCE_TYPE_CODE], [OTHER_INSURANCE_TYPE], [COVERAGE_DESCRIPTION], [COVERAGE_LIMIT], [IS_INSURANCE_IN_PLACE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _INSURANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [INSURANCE_ID], [LEASE_ID], [INSURANCE_TYPE_CODE], [OTHER_INSURANCE_TYPE], [COVERAGE_DESCRIPTION], [COVERAGE_LIMIT], [IS_INSURANCE_IN_PLACE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_INSURANCE_H_ID_SEQ]) as [_INSURANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INSRNC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_INSRNC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INSRNC_I_S_I_TR] ON PIMS_INSURANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INSURANCE ("INSURANCE_ID",
      "LEASE_ID",
      "INSURANCE_TYPE_CODE",
      "OTHER_INSURANCE_TYPE",
      "COVERAGE_DESCRIPTION",
      "COVERAGE_LIMIT",
      "IS_INSURANCE_IN_PLACE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "INSURANCE_ID",
      "LEASE_ID",
      "INSURANCE_TYPE_CODE",
      "OTHER_INSURANCE_TYPE",
      "COVERAGE_DESCRIPTION",
      "COVERAGE_LIMIT",
      "IS_INSURANCE_IN_PLACE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INSRNC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_INSRNC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INSRNC_I_S_U_TR] ON PIMS_INSURANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.INSURANCE_ID = deleted.INSURANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INSURANCE
    set "INSURANCE_ID" = inserted."INSURANCE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "INSURANCE_TYPE_CODE" = inserted."INSURANCE_TYPE_CODE",
      "OTHER_INSURANCE_TYPE" = inserted."OTHER_INSURANCE_TYPE",
      "COVERAGE_DESCRIPTION" = inserted."COVERAGE_DESCRIPTION",
      "COVERAGE_LIMIT" = inserted."COVERAGE_LIMIT",
      "IS_INSURANCE_IN_PLACE" = inserted."IS_INSURANCE_IN_PLACE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INSURANCE
    inner join inserted
    on (PIMS_INSURANCE.INSURANCE_ID = inserted.INSURANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSACIN_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Create index dbo.LSACIN_ACTIVITY_INSTANCE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSACIN_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSACIN_LEASE_ID_IDX
PRINT N'Create index dbo.LSACIN_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSACIN_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSACIN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LSACIN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSACIN_A_S_IUD_TR] ON PIMS_LEASE_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where LEASE_ACTIVITY_INSTANCE_ID in (select LEASE_ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_ACTIVITY_INSTANCE_HIST ([LEASE_ACTIVITY_INSTANCE_ID], [ACTIVITY_INSTANCE_ID], [LEASE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_ACTIVITY_INSTANCE_ID], [ACTIVITY_INSTANCE_ID], [LEASE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_LEASE_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSACIN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LSACIN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSACIN_I_S_I_TR] ON PIMS_LEASE_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_ACTIVITY_INSTANCE ("LEASE_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID",
      "LEASE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID",
      "LEASE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSACIN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSACIN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSACIN_I_S_U_TR] ON PIMS_LEASE_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_ACTIVITY_INSTANCE_ID = deleted.LEASE_ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_ACTIVITY_INSTANCE
    set "LEASE_ACTIVITY_INSTANCE_ID" = inserted."LEASE_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_LEASE_ACTIVITY_INSTANCE.LEASE_ACTIVITY_INSTANCE_ID = inserted.LEASE_ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([CONSULTATION_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESCON_CONSULTATION_TYPE_CODE_IDX
PRINT N'Create index dbo.LESCON_CONSULTATION_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LESCON_CONSULTATION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([CONSULTATION_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESCON_LEASE_ID_IDX
PRINT N'Create index dbo.LESCON_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LESCON_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESCON_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LESCON_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESCON_A_S_IUD_TR] ON PIMS_LEASE_CONSULTATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_CONSULTATION_HIST set END_DATE_HIST = @curr_date where LEASE_CONSULTATION_ID in (select LEASE_CONSULTATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_CONSULTATION_HIST ([LEASE_CONSULTATION_ID], [LEASE_ID], [CONSULTATION_TYPE_CODE], [CONSULTATION_STATUS_TYPE_CODE], [OTHER_DESCRIPTION], [IS_DISABLED], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_CONSULTATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_CONSULTATION_ID], [LEASE_ID], [CONSULTATION_TYPE_CODE], [CONSULTATION_STATUS_TYPE_CODE], [OTHER_DESCRIPTION], [IS_DISABLED], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_CONSULTATION_H_ID_SEQ]) as [_LEASE_CONSULTATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESCON_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LESCON_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESCON_I_S_I_TR] ON PIMS_LEASE_CONSULTATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CONSULTATION ("LEASE_CONSULTATION_ID",
      "LEASE_ID",
      "CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE",
      "OTHER_DESCRIPTION",
      "IS_DISABLED",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_CONSULTATION_ID",
      "LEASE_ID",
      "CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE",
      "OTHER_DESCRIPTION",
      "IS_DISABLED",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESCON_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LESCON_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESCON_I_S_U_TR] ON PIMS_LEASE_CONSULTATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CONSULTATION_ID = deleted.LEASE_CONSULTATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CONSULTATION
    set "LEASE_CONSULTATION_ID" = inserted."LEASE_CONSULTATION_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "CONSULTATION_TYPE_CODE" = inserted."CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE" = inserted."CONSULTATION_STATUS_TYPE_CODE",
      "OTHER_DESCRIPTION" = inserted."OTHER_DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CONSULTATION
    inner join inserted
    on (PIMS_LEASE_CONSULTATION.LEASE_CONSULTATION_ID = inserted.LEASE_CONSULTATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESDOC_DOCUMENT_ID_IDX
PRINT N'Create index dbo.LESDOC_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LESDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_LEASE_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESDOC_LEASE_ID_IDX
PRINT N'Create index dbo.LESDOC_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LESDOC_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_DOCUMENT]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESDOC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LESDOC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESDOC_A_S_IUD_TR] ON PIMS_LEASE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where LEASE_DOCUMENT_ID in (select LEASE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_DOCUMENT_HIST ([LEASE_DOCUMENT_ID], [LEASE_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_DOCUMENT_ID], [LEASE_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_DOCUMENT_H_ID_SEQ]) as [_LEASE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESDOC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LESDOC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESDOC_I_S_I_TR] ON PIMS_LEASE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_DOCUMENT ("LEASE_DOCUMENT_ID",
      "LEASE_ID",
      "DOCUMENT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_DOCUMENT_ID",
      "LEASE_ID",
      "DOCUMENT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LESDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESDOC_I_S_U_TR] ON PIMS_LEASE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_DOCUMENT_ID = deleted.LEASE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_DOCUMENT
    set "LEASE_DOCUMENT_ID" = inserted."LEASE_DOCUMENT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_DOCUMENT
    inner join inserted
    on (PIMS_LEASE_DOCUMENT.LEASE_DOCUMENT_ID = inserted.LEASE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESNOT_LEASE_ID_IDX
PRINT N'Create index dbo.LESNOT_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LESNOT_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_NOTE]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESNOT_NOTE_ID_IDX
PRINT N'Create index dbo.LESNOT_NOTE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LESNOT_NOTE_ID_IDX]
	ON [dbo].[PIMS_LEASE_NOTE]([NOTE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESNOT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LESNOT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESNOT_A_S_IUD_TR] ON PIMS_LEASE_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_NOTE_HIST set END_DATE_HIST = @curr_date where LEASE_NOTE_ID in (select LEASE_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_NOTE_HIST ([LEASE_NOTE_ID], [LEASE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_NOTE_ID], [LEASE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_NOTE_H_ID_SEQ]) as [_LEASE_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESNOT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LESNOT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESNOT_I_S_I_TR] ON PIMS_LEASE_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_NOTE ("LEASE_NOTE_ID",
      "LEASE_ID",
      "NOTE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_NOTE_ID",
      "LEASE_ID",
      "NOTE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESNOT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LESNOT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESNOT_I_S_U_TR] ON PIMS_LEASE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_NOTE_ID = deleted.LEASE_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_NOTE
    set "LEASE_NOTE_ID" = inserted."LEASE_NOTE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_NOTE
    inner join inserted
    on (PIMS_LEASE_NOTE.LEASE_NOTE_ID = inserted.LEASE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.TENANT_LEASE_ID_IDX
PRINT N'Create index dbo.TENANT_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [TENANT_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_TENANT]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.TENANT_LESSOR_TYPE_CODE_IDX
PRINT N'Create index dbo.TENANT_LESSOR_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [TENANT_LESSOR_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_TENANT]([LESSOR_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.TENANT_ORGANIZATION_ID_IDX
PRINT N'Create index dbo.TENANT_ORGANIZATION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [TENANT_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_LEASE_TENANT]([ORGANIZATION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.TENANT_PERSON_ID_IDX
PRINT N'Create index dbo.TENANT_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [TENANT_PERSON_ID_IDX]
	ON [dbo].[PIMS_LEASE_TENANT]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.TENANT_PRIMARY_CONTACT_ID_IDX
PRINT N'Create index dbo.TENANT_PRIMARY_CONTACT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [TENANT_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_LEASE_TENANT]([PRIMARY_CONTACT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.TENANT_TENANT_TYPE_CODE_IDX
PRINT N'Create index dbo.TENANT_TENANT_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [TENANT_TENANT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_TENANT]([TENANT_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TENANT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_TENANT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TENANT_A_S_IUD_TR] ON PIMS_LEASE_TENANT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_TENANT_HIST set END_DATE_HIST = @curr_date where LEASE_TENANT_ID in (select LEASE_TENANT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_TENANT_HIST ([LEASE_TENANT_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [LESSOR_TYPE_CODE], [TENANT_TYPE_CODE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_TENANT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_TENANT_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [LESSOR_TYPE_CODE], [TENANT_TYPE_CODE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_TENANT_H_ID_SEQ]) as [_LEASE_TENANT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TENANT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_TENANT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TENANT_I_S_I_TR] ON PIMS_LEASE_TENANT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_TENANT ("LEASE_TENANT_ID",
      "LEASE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "LESSOR_TYPE_CODE",
      "TENANT_TYPE_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_TENANT_ID",
      "LEASE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "LESSOR_TYPE_CODE",
      "TENANT_TYPE_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TENANT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TENANT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TENANT_I_S_U_TR] ON PIMS_LEASE_TENANT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_TENANT_ID = deleted.LEASE_TENANT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_TENANT
    set "LEASE_TENANT_ID" = inserted."LEASE_TENANT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "LESSOR_TYPE_CODE" = inserted."LESSOR_TYPE_CODE",
      "TENANT_TYPE_CODE" = inserted."TENANT_TYPE_CODE",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_TENANT
    inner join inserted
    on (PIMS_LEASE_TENANT.LEASE_TENANT_ID = inserted.LEASE_TENANT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSTERM_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LSTERM_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSTERM_I_S_I_TR] ON PIMS_LEASE_TERM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_TERM ("LEASE_TERM_ID",
      "LEASE_ID",
      "LEASE_TERM_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "TERM_START_DATE",
      "TERM_EXPIRY_DATE",
      "TERM_RENEWAL_DATE",
      "PAYMENT AMOUNT",
      "PAYMENT_DUE_DATE",
      "PAYMENT_NOTE",
      "IS_GST_ELIGIBLE",
      "GST_AMOUNT",
      "IS_TERM_EXERCISED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_TERM_ID",
      "LEASE_ID",
      "LEASE_TERM_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "TERM_START_DATE",
      "TERM_EXPIRY_DATE",
      "TERM_RENEWAL_DATE",
      "PAYMENT AMOUNT",
      "PAYMENT_DUE_DATE",
      "PAYMENT_NOTE",
      "IS_GST_ELIGIBLE",
      "GST_AMOUNT",
      "IS_TERM_EXERCISED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LNDATY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LNDATY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LNDATY_I_S_I_TR] ON PIMS_LAND_ACT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LAND_ACT_TYPE ("LAND_ACT_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LAND_ACT_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQOWSO_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_AQOWSO_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQOWSO_A_S_IUD_TR] ON PIMS_ACQUISITION_OWNER_SOLICITOR FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_OWNER_SOLICITOR_HIST set END_DATE_HIST = @curr_date where OWNER_SOLICITOR_ID in (select OWNER_SOLICITOR_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_OWNER_SOLICITOR_HIST ([OWNER_SOLICITOR_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_OWNER_SOLICITOR_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [OWNER_SOLICITOR_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ]) as [_ACQUISITION_OWNER_SOLICITOR_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_IHPRIN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_IHPRIN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_IHPRIN_I_S_U_TR] ON PIMS_INTHLDR_PROP_INTEREST INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PIMS_INTHLDR_PROP_INTEREST_ID = deleted.PIMS_INTHLDR_PROP_INTEREST_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INTHLDR_PROP_INTEREST
    set "PIMS_INTHLDR_PROP_INTEREST_ID" = inserted."PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "INTEREST_HOLDER_INTEREST_TYPE_CODE" = inserted."INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INTHLDR_PROP_INTEREST
    inner join inserted
    on (PIMS_INTHLDR_PROP_INTEREST.PIMS_INTHLDR_PROP_INTEREST_ID = inserted.PIMS_INTHLDR_PROP_INTEREST_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRADJL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRADJL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRADJL_I_S_I_TR] ON PIMS_PROPERTY_ADJACENT_LAND_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ADJACENT_LAND_TYPE ("PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKSTST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TKSTST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKSTST_I_S_U_TR] ON PIMS_TAKE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_STATUS_TYPE_CODE = deleted.TAKE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE_STATUS_TYPE
    set "TAKE_STATUS_TYPE_CODE" = inserted."TAKE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE_STATUS_TYPE
    inner join inserted
    on (PIMS_TAKE_STATUS_TYPE.TAKE_STATUS_TYPE_CODE = inserted.TAKE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSTERM_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LSTERM_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSTERM_A_S_IUD_TR] ON PIMS_LEASE_TERM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_TERM_HIST set END_DATE_HIST = @curr_date where LEASE_TERM_ID in (select LEASE_TERM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_TERM_HIST ([LEASE_TERM_ID], [LEASE_ID], [LEASE_TERM_STATUS_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [TERM_START_DATE], [TERM_EXPIRY_DATE], [TERM_RENEWAL_DATE], [PAYMENT AMOUNT], [PAYMENT_DUE_DATE], [PAYMENT_NOTE], [IS_GST_ELIGIBLE], [GST_AMOUNT], [IS_TERM_EXERCISED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_TERM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_TERM_ID], [LEASE_ID], [LEASE_TERM_STATUS_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [TERM_START_DATE], [TERM_EXPIRY_DATE], [TERM_RENEWAL_DATE], [PAYMENT AMOUNT], [PAYMENT_DUE_DATE], [PAYMENT_NOTE], [IS_GST_ELIGIBLE], [GST_AMOUNT], [IS_TERM_EXERCISED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_TERM_H_ID_SEQ]) as [_LEASE_TERM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQOWSO_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AQOWSO_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQOWSO_I_S_U_TR] ON PIMS_ACQUISITION_OWNER_SOLICITOR INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.OWNER_SOLICITOR_ID = deleted.OWNER_SOLICITOR_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_OWNER_SOLICITOR
    set "OWNER_SOLICITOR_ID" = inserted."OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_OWNER_SOLICITOR
    inner join inserted
    on (PIMS_ACQUISITION_OWNER_SOLICITOR.OWNER_SOLICITOR_ID = inserted.OWNER_SOLICITOR_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKCONT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_TKCONT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKCONT_I_S_I_TR] ON PIMS_TAKE_SITE_CONTAM_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE_SITE_CONTAM_TYPE ("TAKE_SITE_CONTAM_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TAKE_SITE_CONTAM_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPALT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPALT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPALT_I_S_U_TR] ON PIMS_PROP_PROP_ADJACENT_LAND_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_ADJACENT_LAND_TYPE_ID = deleted.PROP_PROP_ADJACENT_LAND_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_ADJACENT_LAND_TYPE
    set "PROP_PROP_ADJACENT_LAND_TYPE_ID" = inserted."PROP_PROP_ADJACENT_LAND_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_ADJACENT_LAND_TYPE_CODE" = inserted."PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ADJACENT_LAND_TYPE
    inner join inserted
    on (PIMS_PROP_PROP_ADJACENT_LAND_TYPE.PROP_PROP_ADJACENT_LAND_TYPE_ID = inserted.PROP_PROP_ADJACENT_LAND_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AGRMNT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_AGRMNT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AGRMNT_A_S_IUD_TR] ON PIMS_AGREEMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_AGREEMENT_HIST set END_DATE_HIST = @curr_date where AGREEMENT_ID in (select AGREEMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_AGREEMENT_HIST ([AGREEMENT_ID], [ACQUISITION_FILE_ID], [AGREEMENT_TYPE_CODE], [AGREEMENT_DATE], [IS_DRAFT], [COMPLETION_DATE], [TERMINATION_DATE], [COMMENCEMENT_DATE], [DEPOSIT_AMOUNT], [NO_LATER_THAN_DAYS], [PURCHASE_PRICE], [LEGAL_SURVEY_PLAN_NUM], [OFFER_DATE], [EXPIRY_TS], [SIGNED_DATE], [INSPECTION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _AGREEMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [AGREEMENT_ID], [ACQUISITION_FILE_ID], [AGREEMENT_TYPE_CODE], [AGREEMENT_DATE], [IS_DRAFT], [COMPLETION_DATE], [TERMINATION_DATE], [COMMENCEMENT_DATE], [DEPOSIT_AMOUNT], [NO_LATER_THAN_DAYS], [PURCHASE_PRICE], [LEGAL_SURVEY_PLAN_NUM], [OFFER_DATE], [EXPIRY_TS], [SIGNED_DATE], [INSPECTION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_AGREEMENT_H_ID_SEQ]) as [_AGREEMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPALT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPALT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPALT_I_S_I_TR] ON PIMS_PROP_PROP_ADJACENT_LAND_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_ADJACENT_LAND_TYPE ("PROP_PROP_ADJACENT_LAND_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROP_PROP_ADJACENT_LAND_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQOWRP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AQOWRP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQOWRP_I_S_U_TR] ON PIMS_ACQUISITION_OWNER_REP INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.OWNER_REPRESENTATIVE_ID = deleted.OWNER_REPRESENTATIVE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_OWNER_REP
    set "OWNER_REPRESENTATIVE_ID" = inserted."OWNER_REPRESENTATIVE_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "COMMENT" = inserted."COMMENT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_OWNER_REP
    inner join inserted
    on (PIMS_ACQUISITION_OWNER_REP.OWNER_REPRESENTATIVE_ID = inserted.OWNER_REPRESENTATIVE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRADJL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRADJL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRADJL_I_S_U_TR] ON PIMS_PROPERTY_ADJACENT_LAND_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ADJACENT_LAND_TYPE_CODE = deleted.PROPERTY_ADJACENT_LAND_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ADJACENT_LAND_TYPE
    set "PROPERTY_ADJACENT_LAND_TYPE_CODE" = inserted."PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ADJACENT_LAND_TYPE
    inner join inserted
    on (PIMS_PROPERTY_ADJACENT_LAND_TYPE.PROPERTY_ADJACENT_LAND_TYPE_CODE = inserted.PROPERTY_ADJACENT_LAND_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQOWRP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_AQOWRP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQOWRP_A_S_IUD_TR] ON PIMS_ACQUISITION_OWNER_REP FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_OWNER_REP_HIST set END_DATE_HIST = @curr_date where OWNER_REPRESENTATIVE_ID in (select OWNER_REPRESENTATIVE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_OWNER_REP_HIST ([OWNER_REPRESENTATIVE_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_OWNER_REP_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [OWNER_REPRESENTATIVE_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_OWNER_REP_H_ID_SEQ]) as [_ACQUISITION_OWNER_REP_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_ID in (select ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_HIST ([ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [FILE_NAME], [FILE_NO], [FILE_NUMBER], [LEGACY_FILE_NUMBER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [COMPLETION_DATE], [PAIMS_ACQUISITION_FILE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [FILE_NAME], [FILE_NO], [FILE_NUMBER], [LEGACY_FILE_NUMBER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [COMPLETION_DATE], [PAIMS_ACQUISITION_FILE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_H_ID_SEQ]) as [_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKTYPE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TKTYPE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKTYPE_I_S_U_TR] ON PIMS_TAKE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_TYPE_CODE = deleted.TAKE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE_TYPE
    set "TAKE_TYPE_CODE" = inserted."TAKE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE_TYPE
    inner join inserted
    on (PIMS_TAKE_TYPE.TAKE_TYPE_CODE = inserted.TAKE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INTHLD_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_INTHLD_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INTHLD_I_S_I_TR] ON PIMS_INTEREST_HOLDER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INTEREST_HOLDER ("INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQCST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQCST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQCST_I_S_U_TR] ON PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_CHKLST_ITEM_STATUS_TYPE_CODE = deleted.ACQ_CHKLST_ITEM_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE
    set "ACQ_CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."ACQ_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE
    inner join inserted
    on (PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE.ACQ_CHKLST_ITEM_STATUS_TYPE_CODE = inserted.ACQ_CHKLST_ITEM_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_I_S_I_TR] ON PIMS_ACQUISITION_PAYEE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_PAYEE ("ACQUISITION_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "OWNER_REPRESENTATIVE_ID",
      "OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_PERSON_ID",
      "GST_NUMBER",
      "IS_PAYMENT_IN_TRUST",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "OWNER_REPRESENTATIVE_ID",
      "OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_PERSON_ID",
      "GST_NUMBER",
      "IS_PAYMENT_IN_TRUST",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AGRMNT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AGRMNT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AGRMNT_I_S_U_TR] ON PIMS_AGREEMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.AGREEMENT_ID = deleted.AGREEMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_AGREEMENT
    set "AGREEMENT_ID" = inserted."AGREEMENT_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "AGREEMENT_TYPE_CODE" = inserted."AGREEMENT_TYPE_CODE",
      "AGREEMENT_DATE" = inserted."AGREEMENT_DATE",
      "IS_DRAFT" = inserted."IS_DRAFT",
      "COMPLETION_DATE" = inserted."COMPLETION_DATE",
      "TERMINATION_DATE" = inserted."TERMINATION_DATE",
      "COMMENCEMENT_DATE" = inserted."COMMENCEMENT_DATE",
      "DEPOSIT_AMOUNT" = inserted."DEPOSIT_AMOUNT",
      "NO_LATER_THAN_DAYS" = inserted."NO_LATER_THAN_DAYS",
      "PURCHASE_PRICE" = inserted."PURCHASE_PRICE",
      "LEGAL_SURVEY_PLAN_NUM" = inserted."LEGAL_SURVEY_PLAN_NUM",
      "OFFER_DATE" = inserted."OFFER_DATE",
      "EXPIRY_TS" = inserted."EXPIRY_TS",
      "SIGNED_DATE" = inserted."SIGNED_DATE",
      "INSPECTION_DATE" = inserted."INSPECTION_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_AGREEMENT
    inner join inserted
    on (PIMS_AGREEMENT.AGREEMENT_ID = inserted.AGREEMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_IHPRIN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_IHPRIN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_IHPRIN_I_S_I_TR] ON PIMS_INTHLDR_PROP_INTEREST INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INTHLDR_PROP_INTEREST ("PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSTERM_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSTERM_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSTERM_I_S_U_TR] ON PIMS_LEASE_TERM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_TERM_ID = deleted.LEASE_TERM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_TERM
    set "LEASE_TERM_ID" = inserted."LEASE_TERM_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_TERM_STATUS_TYPE_CODE" = inserted."LEASE_TERM_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE" = inserted."LEASE_PMT_FREQ_TYPE_CODE",
      "TERM_START_DATE" = inserted."TERM_START_DATE",
      "TERM_EXPIRY_DATE" = inserted."TERM_EXPIRY_DATE",
      "TERM_RENEWAL_DATE" = inserted."TERM_RENEWAL_DATE",
      "PAYMENT AMOUNT" = inserted."PAYMENT AMOUNT",
      "PAYMENT_DUE_DATE" = inserted."PAYMENT_DUE_DATE",
      "PAYMENT_NOTE" = inserted."PAYMENT_NOTE",
      "IS_GST_ELIGIBLE" = inserted."IS_GST_ELIGIBLE",
      "GST_AMOUNT" = inserted."GST_AMOUNT",
      "IS_TERM_EXERCISED" = inserted."IS_TERM_EXERCISED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_TERM
    inner join inserted
    on (PIMS_LEASE_TERM.LEASE_TERM_ID = inserted.LEASE_TERM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKSTST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_TKSTST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKSTST_I_S_I_TR] ON PIMS_TAKE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE_STATUS_TYPE ("TAKE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TAKE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_U_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_ID = deleted.ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE
    set "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_NO" = inserted."FILE_NO",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "LEGACY_FILE_NUMBER" = inserted."LEGACY_FILE_NUMBER",
      "FUNDING_OTHER" = inserted."FUNDING_OTHER",
      "ASSIGNED_DATE" = inserted."ASSIGNED_DATE",
      "DELIVERY_DATE" = inserted."DELIVERY_DATE",
      "COMPLETION_DATE" = inserted."COMPLETION_DATE",
      "PAIMS_ACQUISITION_FILE_ID" = inserted."PAIMS_ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE
    inner join inserted
    on (PIMS_ACQUISITION_FILE.ACQUISITION_FILE_ID = inserted.ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INTHLD_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_INTHLD_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INTHLD_A_S_IUD_TR] ON PIMS_INTEREST_HOLDER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_INTEREST_HOLDER_HIST set END_DATE_HIST = @curr_date where INTEREST_HOLDER_ID in (select INTEREST_HOLDER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_INTEREST_HOLDER_HIST ([INTEREST_HOLDER_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _INTEREST_HOLDER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [INTEREST_HOLDER_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_INTEREST_HOLDER_H_ID_SEQ]) as [_INTEREST_HOLDER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQOWSO_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AQOWSO_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQOWSO_I_S_I_TR] ON PIMS_ACQUISITION_OWNER_SOLICITOR INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_OWNER_SOLICITOR ("OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQOWRP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AQOWRP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQOWRP_I_S_I_TR] ON PIMS_ACQUISITION_OWNER_REP INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_OWNER_REP ("OWNER_REPRESENTATIVE_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "OWNER_REPRESENTATIVE_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKCONT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TKCONT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKCONT_I_S_U_TR] ON PIMS_TAKE_SITE_CONTAM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_SITE_CONTAM_TYPE_CODE = deleted.TAKE_SITE_CONTAM_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE_SITE_CONTAM_TYPE
    set "TAKE_SITE_CONTAM_TYPE_CODE" = inserted."TAKE_SITE_CONTAM_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE_SITE_CONTAM_TYPE
    inner join inserted
    on (PIMS_TAKE_SITE_CONTAM_TYPE.TAKE_SITE_CONTAM_TYPE_CODE = inserted.TAKE_SITE_CONTAM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_IHPRIN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_IHPRIN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_IHPRIN_A_S_IUD_TR] ON PIMS_INTHLDR_PROP_INTEREST FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_INTHLDR_PROP_INTEREST_HIST set END_DATE_HIST = @curr_date where PIMS_INTHLDR_PROP_INTEREST_ID in (select PIMS_INTHLDR_PROP_INTEREST_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_INTHLDR_PROP_INTEREST_HIST ([PIMS_INTHLDR_PROP_INTEREST_ID], [INTEREST_HOLDER_ID], [PROPERTY_ACQUISITION_FILE_ID], [INTEREST_HOLDER_INTEREST_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _INTHLDR_PROP_INTEREST_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PIMS_INTHLDR_PROP_INTEREST_ID], [INTEREST_HOLDER_ID], [PROPERTY_ACQUISITION_FILE_ID], [INTEREST_HOLDER_INTEREST_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_INTHLDR_PROP_INTEREST_H_ID_SEQ]) as [_INTHLDR_PROP_INTEREST_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKTYPE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_TKTYPE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKTYPE_I_S_I_TR] ON PIMS_TAKE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE_TYPE ("TAKE_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TAKE_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LNDATY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LNDATY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LNDATY_I_S_U_TR] ON PIMS_LAND_ACT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LAND_ACT_TYPE_CODE = deleted.LAND_ACT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LAND_ACT_TYPE
    set "LAND_ACT_TYPE_CODE" = inserted."LAND_ACT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LAND_ACT_TYPE
    inner join inserted
    on (PIMS_LAND_ACT_TYPE.LAND_ACT_TYPE_CODE = inserted.LAND_ACT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AGRMNT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AGRMNT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AGRMNT_I_S_I_TR] ON PIMS_AGREEMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_AGREEMENT ("AGREEMENT_ID",
      "ACQUISITION_FILE_ID",
      "AGREEMENT_TYPE_CODE",
      "AGREEMENT_DATE",
      "IS_DRAFT",
      "COMPLETION_DATE",
      "TERMINATION_DATE",
      "COMMENCEMENT_DATE",
      "DEPOSIT_AMOUNT",
      "NO_LATER_THAN_DAYS",
      "PURCHASE_PRICE",
      "LEGAL_SURVEY_PLAN_NUM",
      "OFFER_DATE",
      "EXPIRY_TS",
      "SIGNED_DATE",
      "INSPECTION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "AGREEMENT_ID",
      "ACQUISITION_FILE_ID",
      "AGREEMENT_TYPE_CODE",
      "AGREEMENT_DATE",
      "IS_DRAFT",
      "COMPLETION_DATE",
      "TERMINATION_DATE",
      "COMMENCEMENT_DATE",
      "DEPOSIT_AMOUNT",
      "NO_LATER_THAN_DAYS",
      "PURCHASE_PRICE",
      "LEGAL_SURVEY_PLAN_NUM",
      "OFFER_DATE",
      "EXPIRY_TS",
      "SIGNED_DATE",
      "INSPECTION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQCST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQCST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQCST_I_S_I_TR] ON PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE ("ACQ_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INTHLD_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_INTHLD_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INTHLD_I_S_U_TR] ON PIMS_INTEREST_HOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.INTEREST_HOLDER_ID = deleted.INTEREST_HOLDER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INTEREST_HOLDER
    set "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INTEREST_HOLDER
    inner join inserted
    on (PIMS_INTEREST_HOLDER.INTEREST_HOLDER_ID = inserted.INTEREST_HOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_I_S_U_TR] ON PIMS_ACQUISITION_PAYEE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_PAYEE_ID = deleted.ACQUISITION_PAYEE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_PAYEE
    set "ACQUISITION_PAYEE_ID" = inserted."ACQUISITION_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "OWNER_REPRESENTATIVE_ID" = inserted."OWNER_REPRESENTATIVE_ID",
      "OWNER_SOLICITOR_ID" = inserted."OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_PERSON_ID" = inserted."ACQUISITION_FILE_PERSON_ID",
      "GST_NUMBER" = inserted."GST_NUMBER",
      "IS_PAYMENT_IN_TRUST" = inserted."IS_PAYMENT_IN_TRUST",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_PAYEE
    inner join inserted
    on (PIMS_ACQUISITION_PAYEE.ACQUISITION_PAYEE_ID = inserted.ACQUISITION_PAYEE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PIMPRV_PROPERTY_IMPROVEMENT_TYPE_CODE_IDX
PRINT N'Create index dbo.PIMPRV_PROPERTY_IMPROVEMENT_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PIMPRV_PROPERTY_IMPROVEMENT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY_IMPROVEMENT]([PROPERTY_IMPROVEMENT_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PIMPRV_PROPERTY_LEASE_ID_IDX
PRINT N'Create index dbo.PIMPRV_PROPERTY_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PIMPRV_PROPERTY_LEASE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_IMPROVEMENT]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PIMPRV_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PIMPRV_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PIMPRV_A_S_IUD_TR] ON PIMS_PROPERTY_IMPROVEMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_IMPROVEMENT_HIST set END_DATE_HIST = @curr_date where PROPERTY_IMPROVEMENT_ID in (select PROPERTY_IMPROVEMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_IMPROVEMENT_HIST ([PROPERTY_IMPROVEMENT_ID], [LEASE_ID], [PROPERTY_IMPROVEMENT_TYPE_CODE], [IMPROVEMENT_DESCRIPTION], [STRUCTURE_SIZE], [ADDRESS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_IMPROVEMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_IMPROVEMENT_ID], [LEASE_ID], [PROPERTY_IMPROVEMENT_TYPE_CODE], [IMPROVEMENT_DESCRIPTION], [STRUCTURE_SIZE], [ADDRESS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_IMPROVEMENT_H_ID_SEQ]) as [_PROPERTY_IMPROVEMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PIMPRV_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PIMPRV_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PIMPRV_I_S_I_TR] ON PIMS_PROPERTY_IMPROVEMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_IMPROVEMENT ("PROPERTY_IMPROVEMENT_ID",
      "LEASE_ID",
      "PROPERTY_IMPROVEMENT_TYPE_CODE",
      "IMPROVEMENT_DESCRIPTION",
      "STRUCTURE_SIZE",
      "ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_IMPROVEMENT_ID",
      "LEASE_ID",
      "PROPERTY_IMPROVEMENT_TYPE_CODE",
      "IMPROVEMENT_DESCRIPTION",
      "STRUCTURE_SIZE",
      "ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PIMPRV_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PIMPRV_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PIMPRV_I_S_U_TR] ON PIMS_PROPERTY_IMPROVEMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_IMPROVEMENT_ID = deleted.PROPERTY_IMPROVEMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_IMPROVEMENT
    set "PROPERTY_IMPROVEMENT_ID" = inserted."PROPERTY_IMPROVEMENT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "PROPERTY_IMPROVEMENT_TYPE_CODE" = inserted."PROPERTY_IMPROVEMENT_TYPE_CODE",
      "IMPROVEMENT_DESCRIPTION" = inserted."IMPROVEMENT_DESCRIPTION",
      "STRUCTURE_SIZE" = inserted."STRUCTURE_SIZE",
      "ADDRESS" = inserted."ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_IMPROVEMENT
    inner join inserted
    on (PIMS_PROPERTY_IMPROVEMENT.PROPERTY_IMPROVEMENT_ID = inserted.PROPERTY_IMPROVEMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.SECDEP_LEASE_ID_IDX
PRINT N'Create index dbo.SECDEP_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [SECDEP_LEASE_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.SECDEP_SECURITY_DEPOSIT_TYPE_CODE_IDX
PRINT N'Create index dbo.SECDEP_SECURITY_DEPOSIT_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [SECDEP_SECURITY_DEPOSIT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT]([SECURITY_DEPOSIT_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SECDEP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_SECDEP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SECDEP_A_S_IUD_TR] ON PIMS_SECURITY_DEPOSIT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_ID in (select SECURITY_DEPOSIT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_HIST ([SECURITY_DEPOSIT_ID], [LEASE_ID], [SECURITY_DEPOSIT_TYPE_CODE], [OTHER_DEPOSIT_TYPE_DESC], [DESCRIPTION], [AMOUNT_PAID], [DEPOSIT_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_ID], [LEASE_ID], [SECURITY_DEPOSIT_TYPE_CODE], [OTHER_DEPOSIT_TYPE_DESC], [DESCRIPTION], [AMOUNT_PAID], [DEPOSIT_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_H_ID_SEQ]) as [_SECURITY_DEPOSIT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SECDEP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_SECDEP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SECDEP_I_S_I_TR] ON PIMS_SECURITY_DEPOSIT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT ("SECURITY_DEPOSIT_ID",
      "LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE",
      "OTHER_DEPOSIT_TYPE_DESC",
      "DESCRIPTION",
      "AMOUNT_PAID",
      "DEPOSIT_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_ID",
      "LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE",
      "OTHER_DEPOSIT_TYPE_DESC",
      "DESCRIPTION",
      "AMOUNT_PAID",
      "DEPOSIT_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SECDEP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_SECDEP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SECDEP_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_ID = deleted.SECURITY_DEPOSIT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT
    set "SECURITY_DEPOSIT_ID" = inserted."SECURITY_DEPOSIT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE" = inserted."SECURITY_DEPOSIT_TYPE_CODE",
      "OTHER_DEPOSIT_TYPE_DESC" = inserted."OTHER_DEPOSIT_TYPE_DESC",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "AMOUNT_PAID" = inserted."AMOUNT_PAID",
      "DEPOSIT_DATE" = inserted."DEPOSIT_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT.SECURITY_DEPOSIT_ID = inserted.SECURITY_DEPOSIT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.SCDPHL_ORGANIZATION_ID_IDX
PRINT N'Create index dbo.SCDPHL_ORGANIZATION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [SCDPHL_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]([ORGANIZATION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.SCDPHL_PERSON_ID_IDX
PRINT N'Create index dbo.SCDPHL_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [SCDPHL_PERSON_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.SCDPHL_SECURITY_DEPOSIT_ID_IDX
PRINT N'Create index dbo.SCDPHL_SECURITY_DEPOSIT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [SCDPHL_SECURITY_DEPOSIT_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]([SECURITY_DEPOSIT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SCDPHL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_SCDPHL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SCDPHL_A_S_IUD_TR] ON PIMS_SECURITY_DEPOSIT_HOLDER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_HOLDER_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_HOLDER_ID in (select SECURITY_DEPOSIT_HOLDER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_HOLDER_HIST ([SECURITY_DEPOSIT_HOLDER_ID], [SECURITY_DEPOSIT_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_HOLDER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_HOLDER_ID], [SECURITY_DEPOSIT_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER_H_ID_SEQ]) as [_SECURITY_DEPOSIT_HOLDER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SCDPHL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_SCDPHL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SCDPHL_I_S_I_TR] ON PIMS_SECURITY_DEPOSIT_HOLDER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT_HOLDER ("SECURITY_DEPOSIT_HOLDER_ID",
      "SECURITY_DEPOSIT_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_HOLDER_ID",
      "SECURITY_DEPOSIT_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SCDPHL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_SCDPHL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SCDPHL_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT_HOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_HOLDER_ID = deleted.SECURITY_DEPOSIT_HOLDER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT_HOLDER
    set "SECURITY_DEPOSIT_HOLDER_ID" = inserted."SECURITY_DEPOSIT_HOLDER_ID",
      "SECURITY_DEPOSIT_ID" = inserted."SECURITY_DEPOSIT_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_HOLDER
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_HOLDER.SECURITY_DEPOSIT_HOLDER_ID = inserted.SECURITY_DEPOSIT_HOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.SDRTRN_SECURITY_DEPOSIT_ID_IDX
PRINT N'Create index dbo.SDRTRN_SECURITY_DEPOSIT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [SDRTRN_SECURITY_DEPOSIT_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]([SECURITY_DEPOSIT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SDRTRN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_SDRTRN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SDRTRN_A_S_IUD_TR] ON PIMS_SECURITY_DEPOSIT_RETURN FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_RETURN_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_RETURN_ID in (select SECURITY_DEPOSIT_RETURN_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_RETURN_HIST ([SECURITY_DEPOSIT_RETURN_ID], [SECURITY_DEPOSIT_ID], [TERMINATION_DATE], [CLAIMS_AGAINST], [RETURN_AMOUNT], [RETURN_DATE], [INTEREST_PAID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_RETURN_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_RETURN_ID], [SECURITY_DEPOSIT_ID], [TERMINATION_DATE], [CLAIMS_AGAINST], [RETURN_AMOUNT], [RETURN_DATE], [INTEREST_PAID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_H_ID_SEQ]) as [_SECURITY_DEPOSIT_RETURN_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SDRTRN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_SDRTRN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SDRTRN_I_S_I_TR] ON PIMS_SECURITY_DEPOSIT_RETURN INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT_RETURN ("SECURITY_DEPOSIT_RETURN_ID",
      "SECURITY_DEPOSIT_ID",
      "TERMINATION_DATE",
      "CLAIMS_AGAINST",
      "RETURN_AMOUNT",
      "RETURN_DATE",
      "INTEREST_PAID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_RETURN_ID",
      "SECURITY_DEPOSIT_ID",
      "TERMINATION_DATE",
      "CLAIMS_AGAINST",
      "RETURN_AMOUNT",
      "RETURN_DATE",
      "INTEREST_PAID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SDRTRN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_SDRTRN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SDRTRN_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT_RETURN INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_RETURN_ID = deleted.SECURITY_DEPOSIT_RETURN_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT_RETURN
    set "SECURITY_DEPOSIT_RETURN_ID" = inserted."SECURITY_DEPOSIT_RETURN_ID",
      "SECURITY_DEPOSIT_ID" = inserted."SECURITY_DEPOSIT_ID",
      "TERMINATION_DATE" = inserted."TERMINATION_DATE",
      "CLAIMS_AGAINST" = inserted."CLAIMS_AGAINST",
      "RETURN_AMOUNT" = inserted."RETURN_AMOUNT",
      "RETURN_DATE" = inserted."RETURN_DATE",
      "INTEREST_PAID" = inserted."INTEREST_PAID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_RETURN
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_RETURN.SECURITY_DEPOSIT_RETURN_ID = inserted.SECURITY_DEPOSIT_RETURN_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.SCDPRH_ORGANIZATION_ID_IDX
PRINT N'Create index dbo.SCDPRH_ORGANIZATION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [SCDPRH_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]([ORGANIZATION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.SCDPRH_PERSON_ID_IDX
PRINT N'Create index dbo.SCDPRH_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [SCDPRH_PERSON_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.SCDPRH_SECURITY_DEPOSIT_RETURN_ID_IDX
PRINT N'Create index dbo.SCDPRH_SECURITY_DEPOSIT_RETURN_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [SCDPRH_SECURITY_DEPOSIT_RETURN_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]([SECURITY_DEPOSIT_RETURN_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SCDPRH_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_SCDPRH_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SCDPRH_A_S_IUD_TR] ON PIMS_SECURITY_DEPOSIT_RETURN_HOLDER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_RETURN_HOLDER_ID in (select SECURITY_DEPOSIT_RETURN_HOLDER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST ([SECURITY_DEPOSIT_RETURN_HOLDER_ID], [SECURITY_DEPOSIT_RETURN_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_RETURN_HOLDER_ID], [SECURITY_DEPOSIT_RETURN_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_H_ID_SEQ]) as [_SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SCDPRH_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_SCDPRH_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SCDPRH_I_S_I_TR] ON PIMS_SECURITY_DEPOSIT_RETURN_HOLDER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT_RETURN_HOLDER ("SECURITY_DEPOSIT_RETURN_HOLDER_ID",
      "SECURITY_DEPOSIT_RETURN_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_RETURN_HOLDER_ID",
      "SECURITY_DEPOSIT_RETURN_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_SCDPRH_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_SCDPRH_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_SCDPRH_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT_RETURN_HOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_RETURN_HOLDER_ID = deleted.SECURITY_DEPOSIT_RETURN_HOLDER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT_RETURN_HOLDER
    set "SECURITY_DEPOSIT_RETURN_HOLDER_ID" = inserted."SECURITY_DEPOSIT_RETURN_HOLDER_ID",
      "SECURITY_DEPOSIT_RETURN_ID" = inserted."SECURITY_DEPOSIT_RETURN_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_RETURN_HOLDER
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_RETURN_HOLDER.SECURITY_DEPOSIT_RETURN_HOLDER_ID = inserted.SECURITY_DEPOSIT_RETURN_HOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PROPLS_LEASE_ID_IDX
PRINT N'Create index dbo.PROPLS_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PROPLS_LEASE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_LEASE]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PROPLS_PROPERTY_ID_IDX
PRINT N'Create index dbo.PROPLS_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PROPLS_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_LEASE]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PROPLS_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PROPLS_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PROPLS_A_S_IUD_TR] ON PIMS_PROPERTY_LEASE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_LEASE_HIST set END_DATE_HIST = @curr_date where PROPERTY_LEASE_ID in (select PROPERTY_LEASE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_LEASE_HIST ([PROPERTY_LEASE_ID], [PROPERTY_ID], [LEASE_ID], [AREA_UNIT_TYPE_CODE], [NAME], [LEASE_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_LEASE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_LEASE_ID], [PROPERTY_ID], [LEASE_ID], [AREA_UNIT_TYPE_CODE], [NAME], [LEASE_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_LEASE_H_ID_SEQ]) as [_PROPERTY_LEASE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PROPLS_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PROPLS_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PROPLS_I_S_I_TR] ON PIMS_PROPERTY_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_LEASE ("PROPERTY_LEASE_ID",
      "PROPERTY_ID",
      "LEASE_ID",
      "AREA_UNIT_TYPE_CODE",
      "NAME",
      "LEASE_AREA",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_LEASE_ID",
      "PROPERTY_ID",
      "LEASE_ID",
      "AREA_UNIT_TYPE_CODE",
      "NAME",
      "LEASE_AREA",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PROPLS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PROPLS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PROPLS_I_S_U_TR] ON PIMS_PROPERTY_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_LEASE_ID = deleted.PROPERTY_LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_LEASE
    set "PROPERTY_LEASE_ID" = inserted."PROPERTY_LEASE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "NAME" = inserted."NAME",
      "LEASE_AREA" = inserted."LEASE_AREA",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_LEASE
    inner join inserted
    on (PIMS_PROPERTY_LEASE.PROPERTY_LEASE_ID = inserted.PROPERTY_LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTY_BOUNDARY_IDX
PRINT N'Create index dbo.PRPRTY_BOUNDARY_IDX'
GO
-- [PRPRTY_BOUNDARY_IDX] : Scripting for Spatial Index currently not supported
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTY_LOCATION_IDX
PRINT N'Create index dbo.PRPRTY_LOCATION_IDX'
GO
-- [PRPRTY_LOCATION_IDX] : Scripting for Spatial Index currently not supported
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_AQOWSO_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_AQOWSO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_AQOWSO_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_AQOWSO_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_AQOWSO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	ADD CONSTRAINT [PIM_ORG_PIM_AQOWSO_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_AQOWSO_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_AQOWSO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	ADD CONSTRAINT [PIM_PERSON_PIM_AQOWSO_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_IHINTT_PIM_IHPRIN_FK
PRINT N'Create foreign key constraint dbo.PIM_IHINTT_PIM_IHPRIN_FK'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	ADD CONSTRAINT [PIM_IHINTT_PIM_IHPRIN_FK]
	FOREIGN KEY([INTEREST_HOLDER_INTEREST_TYPE_CODE])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER_INTEREST_TYPE]([INTEREST_HOLDER_INTEREST_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_INTHLD_PIM_IHPRIN_FK
PRINT N'Create foreign key constraint dbo.PIM_INTHLD_PIM_IHPRIN_FK'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	ADD CONSTRAINT [PIM_INTHLD_PIM_IHPRIN_FK]
	FOREIGN KEY([INTEREST_HOLDER_ID])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER]([INTEREST_HOLDER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_AQOWRP_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_AQOWRP_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_AQOWRP_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_AQOWRP_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_AQOWRP_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP]
	ADD CONSTRAINT [PIM_PERSON_PIM_AQOWRP_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPALT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPALT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPALT_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRADJL_PIM_PRPALT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRADJL_PIM_PRPALT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]
	ADD CONSTRAINT [PIM_PRADJL_PIM_PRPALT_FK]
	FOREIGN KEY([PROPERTY_ADJACENT_LAND_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_ADJACENT_LAND_TYPE]([PROPERTY_ADJACENT_LAND_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_AQOWRP_PIM_ACQPAY_FK
PRINT N'Create foreign key constraint dbo.PIM_AQOWRP_PIM_ACQPAY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	ADD CONSTRAINT [PIM_AQOWRP_PIM_ACQPAY_FK]
	FOREIGN KEY([OWNER_REPRESENTATIVE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_OWNER_REP]([OWNER_REPRESENTATIVE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_AQOWSO_PIM_ACQPAY_FK
PRINT N'Create foreign key constraint dbo.PIM_AQOWSO_PIM_ACQPAY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	ADD CONSTRAINT [PIM_AQOWSO_PIM_ACQPAY_FK]
	FOREIGN KEY([OWNER_SOLICITOR_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]([OWNER_SOLICITOR_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LPRPTY_PIM_LEASE_FK
PRINT N'Create foreign key constraint dbo.PIM_LPRPTY_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LPRPTY_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_PURPOSE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PURPOSE_TYPE]([LEASE_PURPOSE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PROJCT_PIM_LEASE_FK
PRINT N'Create foreign key constraint dbo.PIM_PROJCT_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_PROJCT_PIM_LEASE_FK]
	FOREIGN KEY([PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LELIST_PIM_LEASE_FK
PRINT N'Create foreign key constraint dbo.PIM_LELIST_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LELIST_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_LICENSE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_LICENSE_TYPE]([LEASE_LICENSE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LSCATT_PIM_LEASE_FK
PRINT N'Create foreign key constraint dbo.PIM_LSCATT_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LSCATT_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_CATEGORY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_CATEGORY_TYPE]([LEASE_CATEGORY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_REGION_PIM_LEASE_FK
PRINT N'Create foreign key constraint dbo.PIM_REGION_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_REGION_PIM_LEASE_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LINITT_PIM_LEASE_FK
PRINT N'Create foreign key constraint dbo.PIM_LINITT_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LINITT_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_INITIATOR_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_INITIATOR_TYPE]([LEASE_INITIATOR_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LRESPT_PIM_LEASE_FK
PRINT N'Create foreign key constraint dbo.PIM_LRESPT_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LRESPT_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_RESPONSIBILITY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_RESPONSIBILITY_TYPE]([LEASE_RESPONSIBILITY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LSPRGT_PIM_LEASE_FK
PRINT N'Create foreign key constraint dbo.PIM_LSPRGT_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LSPRGT_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_PROGRAM_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PROGRAM_TYPE]([LEASE_PROGRAM_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LSPRTY_PIM_LEASE_FK
PRINT N'Create foreign key constraint dbo.PIM_LSPRTY_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LSPRTY_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_PAY_RVBL_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PAY_RVBL_TYPE]([LEASE_PAY_RVBL_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LSSTYP_PIM_LEASE_FK
PRINT N'Create foreign key constraint dbo.PIM_LSSTYP_PIM_LEASE_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LSSTYP_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_STATUS_TYPE]([LEASE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_INSRNC_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_INSRNC_FK'
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
	ADD CONSTRAINT [PIM_LEASE_PIM_INSRNC_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_INSPYT_PIM_INSRNC_FK
PRINT N'Create foreign key constraint dbo.PIM_INSPYT_PIM_INSRNC_FK'
GO
ALTER TABLE [dbo].[PIMS_INSURANCE]
	ADD CONSTRAINT [PIM_INSPYT_PIM_INSRNC_FK]
	FOREIGN KEY([INSURANCE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_INSURANCE_TYPE]([INSURANCE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_LSACIN_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_LSACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_LEASE_PIM_LSACIN_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_LSACIN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_LSACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_LSACIN_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_LESCON_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_LEASE_PIM_LESCON_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK
PRINT N'Create foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_CONSTY_PIM_LESCON_FK]
	FOREIGN KEY([CONSULTATION_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CONSULTATION_STATUS_TYPE]([CONSULTATION_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK
PRINT N'Create foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_CONTYP_PIM_LESCON_FK]
	FOREIGN KEY([CONSULTATION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CONSULTATION_TYPE]([CONSULTATION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_LESDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_LESDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
	ADD CONSTRAINT [PIM_LEASE_PIM_LESDOC_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_LESDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_LESDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_LESDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_NOTE_PIM_LESNOT_FK
PRINT N'Create foreign key constraint dbo.PIM_NOTE_PIM_LESNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
	ADD CONSTRAINT [PIM_NOTE_PIM_LESNOT_FK]
	FOREIGN KEY([NOTE_ID])
	REFERENCES [dbo].[PIMS_NOTE]([NOTE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_LESNOT_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_LESNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_NOTE]
	ADD CONSTRAINT [PIM_LEASE_PIM_LESNOT_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_TENTYP_PIM_TENANT_FK
PRINT N'Create foreign key constraint dbo.PIM_TENTYP_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	ADD CONSTRAINT [PIM_TENTYP_PIM_TENANT_FK]
	FOREIGN KEY([TENANT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_TENANT_TYPE]([TENANT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_TENANT_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	ADD CONSTRAINT [PIM_LEASE_PIM_TENANT_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LSSRTY_PIM_TENANT_FK
PRINT N'Create foreign key constraint dbo.PIM_LSSRTY_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	ADD CONSTRAINT [PIM_LSSRTY_PIM_TENANT_FK]
	FOREIGN KEY([LESSOR_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LESSOR_TYPE]([LESSOR_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_TENANT_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	ADD CONSTRAINT [PIM_ORG_PIM_TENANT_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_PRIMARY_CONTACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_PRIMARY_CONTACT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRIMARY_CONTACT_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_TENANT_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	ADD CONSTRAINT [PIM_PERSON_PIM_TENANT_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_LSTERM_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_LSTERM_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TERM]
	ADD CONSTRAINT [PIM_LEASE_PIM_LSTERM_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PIMPRT_PIM_PIMPRV_FK
PRINT N'Create foreign key constraint dbo.PIM_PIMPRT_PIM_PIMPRV_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	ADD CONSTRAINT [PIM_PIMPRT_PIM_PIMPRV_FK]
	FOREIGN KEY([PROPERTY_IMPROVEMENT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_IMPROVEMENT_TYPE]([PROPERTY_IMPROVEMENT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_PIMPRV_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_PIMPRV_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	ADD CONSTRAINT [PIM_LEASE_PIM_PIMPRV_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_PROPLS_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_PROPLS_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	ADD CONSTRAINT [PIM_LEASE_PIM_PROPLS_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_PROPLS_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_PROPLS_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PROPLS_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ARUNIT_PIM_PROPLS_FK
PRINT N'Create foreign key constraint dbo.PIM_ARUNIT_PIM_PROPLS_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	ADD CONSTRAINT [PIM_ARUNIT_PIM_PROPLS_FK]
	FOREIGN KEY([AREA_UNIT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_AREA_UNIT_TYPE]([AREA_UNIT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_SECDPT_PIM_SECDEP_FK
PRINT N'Create foreign key constraint dbo.PIM_SECDPT_PIM_SECDEP_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
	ADD CONSTRAINT [PIM_SECDPT_PIM_SECDEP_FK]
	FOREIGN KEY([SECURITY_DEPOSIT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_SECURITY_DEPOSIT_TYPE]([SECURITY_DEPOSIT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_SECDEP_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_SECDEP_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
	ADD CONSTRAINT [PIM_LEASE_PIM_SECDEP_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_SECDEP_PIM_SCDPHL_FK
PRINT N'Create foreign key constraint dbo.PIM_SECDEP_PIM_SCDPHL_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	ADD CONSTRAINT [PIM_SECDEP_PIM_SCDPHL_FK]
	FOREIGN KEY([SECURITY_DEPOSIT_ID])
	REFERENCES [dbo].[PIMS_SECURITY_DEPOSIT]([SECURITY_DEPOSIT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_SCDPHL_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_SCDPHL_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	ADD CONSTRAINT [PIM_ORG_PIM_SCDPHL_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_SCDPHL_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_SCDPHL_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	ADD CONSTRAINT [PIM_PERSON_PIM_SCDPHL_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_SECDEP_PIM_SDRTRN_FK
PRINT N'Create foreign key constraint dbo.PIM_SECDEP_PIM_SDRTRN_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
	ADD CONSTRAINT [PIM_SECDEP_PIM_SDRTRN_FK]
	FOREIGN KEY([SECURITY_DEPOSIT_ID])
	REFERENCES [dbo].[PIMS_SECURITY_DEPOSIT]([SECURITY_DEPOSIT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_SCDPRH_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_SCDPRH_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	ADD CONSTRAINT [PIM_PERSON_PIM_SCDPRH_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_SDRTRN_PIM_SCDPRH_FK
PRINT N'Create foreign key constraint dbo.PIM_SDRTRN_PIM_SCDPRH_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	ADD CONSTRAINT [PIM_SDRTRN_PIM_SCDPRH_FK]
	FOREIGN KEY([SECURITY_DEPOSIT_RETURN_ID])
	REFERENCES [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]([SECURITY_DEPOSIT_RETURN_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_SCDPRH_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_SCDPRH_FK'
GO
ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	ADD CONSTRAINT [PIM_ORG_PIM_SCDPRH_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_PROP_INTHLDR_INTEREST_TYPE_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_PROP_INTHLDR_INTEREST_TYPE_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_FORM_8_HIST
PRINT N'Drop table dbo.PIMS_FORM_8_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_FORM_8_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_FORM_8_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_FORM_8_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_FORM_8_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PAYMENT_ITEM_TYPE
PRINT N'Drop table dbo.PIMS_PAYMENT_ITEM_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PAYMENT_ITEM_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_FORM_8_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_FORM_8_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_FORM_8_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_INTEREST_HOLDER_TYPE
PRINT N'Drop table dbo.PIMS_INTEREST_HOLDER_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_INTEREST_HOLDER_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
