-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Wed Jul 05 18:05:55 PDT 2023
-- Execute this script on:
-- 		PSP_PIMS_S56_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S58_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRADJL_PIM_PRPALT_FK
--PRINT N'Drop foreign key constraint dbo.PIM_PRADJL_PIM_PRPALT_FK'
--GO
--ALTER TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]
--	DROP CONSTRAINT IF EXISTS [PIM_PRADJL_PIM_PRPALT_FK]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPALT_FK
--PRINT N'Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPALT_FK'
--GO
--ALTER TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]
--	DROP CONSTRAINT IF EXISTS [PIM_PRPRTY_PIM_PRPALT_FK]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Drop foreign key constraint dbo.PIM_AQOWSO_PIM_ACQPAY_FK
PRINT N'Drop foreign key constraint dbo.PIM_AQOWSO_PIM_ACQPAY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	DROP CONSTRAINT IF EXISTS [PIM_AQOWSO_PIM_ACQPAY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_AQOWRP_PIM_ACQPAY_FK
PRINT N'Drop foreign key constraint dbo.PIM_AQOWRP_PIM_ACQPAY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	DROP CONSTRAINT IF EXISTS [PIM_AQOWRP_PIM_ACQPAY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_AQOWRP_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_AQOWRP_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_AQOWRP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_AQOWRP_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_AQOWRP_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_AQOWRP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_AQOWSO_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_AQOWSO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_AQOWSO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_AQOWSO_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_AQOWSO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_AQOWSO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_AQOWSO_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_AQOWSO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_AQOWSO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_IHINTT_PIM_IHPRIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_IHINTT_PIM_IHPRIN_FK'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	DROP CONSTRAINT IF EXISTS [PIM_IHINTT_PIM_IHPRIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_INTHLD_PIM_IHPRIN_FK
PRINT N'Drop foreign key constraint dbo.PIM_INTHLD_PIM_IHPRIN_FK'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	DROP CONSTRAINT IF EXISTS [PIM_INTHLD_PIM_IHPRIN_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRTY_LOCATION_IDX
PRINT N'Drop index dbo.PRPRTY_LOCATION_IDX'
GO
DROP INDEX IF EXISTS [PRPRTY_LOCATION_IDX] ON [dbo].[PIMS_PROPERTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPRTY_BOUNDARY_IDX
PRINT N'Drop index dbo.PRPRTY_BOUNDARY_IDX'
GO
DROP INDEX IF EXISTS [PRPRTY_BOUNDARY_IDX] ON [dbo].[PIMS_PROPERTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPALT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPALT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPALT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPALT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPALT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPALT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPALT_PROPERTY_ID_IDX
--PRINT N'Drop index dbo.PRPALT_PROPERTY_ID_IDX'
--GO
--DROP INDEX IF EXISTS [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE].[PRPALT_PROPERTY_ID_IDX]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Drop index dbo.PRPALT_PROPERTY_ADJACENT_LAND_TYPE_CODE_IDX
--PRINT N'Drop index dbo.PRPALT_PROPERTY_ADJACENT_LAND_TYPE_CODE_IDX'
--GO
--DROP INDEX IF EXISTS [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE].[PRPALT_PROPERTY_ADJACENT_LAND_TYPE_CODE_IDX]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Drop trigger dbo.PIMS_PRADJL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRADJL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRADJL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRADJL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRADJL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRADJL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQPAY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQPAY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQPAY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INTHLD_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_INTHLD_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INTHLD_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQCST_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQCST_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQCST_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AGRMNT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_AGRMNT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AGRMNT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LNDATY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LNDATY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LNDATY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TKTYPE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TKTYPE_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TKTYPE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_IHPRIN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_IHPRIN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_IHPRIN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.IHPRIN_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX
PRINT N'Drop index dbo.IHPRIN_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_INTHLDR_PROP_INTEREST].[IHPRIN_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TKCONT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TKCONT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TKCONT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INTHLD_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_INTHLD_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INTHLD_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TKSTST_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TKSTST_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TKSTST_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSTERM_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSTERM_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSTERM_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_IHPRIN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_IHPRIN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_IHPRIN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AGRMNT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AGRMNT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AGRMNT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQPAY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQPAY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQPAY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQCST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQCST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQCST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_INTHLD_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_INTHLD_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_INTHLD_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TKTYPE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TKTYPE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TKTYPE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AGRMNT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_AGRMNT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AGRMNT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TKCONT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TKCONT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TKCONT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSTERM_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LSTERM_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSTERM_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TKSTST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TKSTST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TKSTST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_IHPRIN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_IHPRIN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_IHPRIN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LNDATY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LNDATY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LNDATY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSTERM_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSTERM_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSTERM_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQPAY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQPAY_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQPAY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQPAY_OWNER_SOLICITOR_ID_IDX
PRINT N'Drop index dbo.ACQPAY_OWNER_SOLICITOR_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_PAYEE].[ACQPAY_OWNER_SOLICITOR_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACQPAY_OWNER_REPRESENTATIVE_ID_IDX
PRINT N'Drop index dbo.ACQPAY_OWNER_REPRESENTATIVE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_PAYEE].[ACQPAY_OWNER_REPRESENTATIVE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQOWRP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AQOWRP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQOWRP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQOWRP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_AQOWRP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQOWRP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQOWRP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_AQOWRP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQOWRP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AQOWRP_PERSON_ID_IDX
PRINT N'Drop index dbo.AQOWRP_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_REP].[AQOWRP_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AQOWRP_ACQUISITION_FILE_ID_IDX
PRINT N'Drop index dbo.AQOWRP_ACQUISITION_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_REP].[AQOWRP_ACQUISITION_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQOWSO_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AQOWSO_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQOWSO_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQOWSO_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_AQOWSO_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQOWSO_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQOWSO_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_AQOWSO_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQOWSO_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AQOWSO_PERSON_ID_IDX
PRINT N'Drop index dbo.AQOWSO_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR].[AQOWSO_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AQOWSO_ORGANIZATION_ID_IDX
PRINT N'Drop index dbo.AQOWSO_ORGANIZATION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR].[AQOWSO_ORGANIZATION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AQOWSO_ACQUISITION_FILE_ID_IDX
PRINT N'Drop index dbo.AQOWSO_ACQUISITION_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR].[AQOWSO_ACQUISITION_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_PROPERTY_BOUNDARY_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_LOCATION_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_LOCATION_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_PROPERTY_LOCATION_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PRPALT_PROP_ADJACENT_LAND_TYPE_TUC
--PRINT N'Drop unique constraint dbo.PRPALT_PROP_ADJACENT_LAND_TYPE_TUC'
--GO
--ALTER TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]
--	DROP CONSTRAINT IF EXISTS [PRPALT_PROP_ADJACENT_LAND_TYPE_TUC]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Drop primary key constraint dbo.PRPALT_PK
--PRINT N'Drop primary key constraint dbo.PRPALT_PK'
--GO
--ALTER TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]
--	DROP CONSTRAINT IF EXISTS [PRPALT_PK]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Drop table dbo.PIMS_PROP_PROP_ADJACENT_LAND_TYPE
--PRINT N'Drop table dbo.PIMS_PROP_PROP_ADJACENT_LAND_TYPE'
--GO
--DROP TABLE IF EXISTS [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Drop primary key constraint dbo.PRADJL_PK
--PRINT N'Drop primary key constraint dbo.PRADJL_PK'
--GO
--ALTER TABLE [dbo].[PIMS_PROPERTY_ADJACENT_LAND_TYPE]
--	DROP CONSTRAINT IF EXISTS [PRADJL_PK]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Drop check constraint dbo.ACQPAY_COMP_REQ_PAYEE_TCC
PRINT N'Drop check constraint dbo.ACQPAY_COMP_REQ_PAYEE_TCC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	DROP CONSTRAINT IF EXISTS [ACQPAY_COMP_REQ_PAYEE_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.AQOWRP_ACQUISITION_FILE_PERSON_TUC
PRINT N'Drop unique constraint dbo.AQOWRP_ACQUISITION_FILE_PERSON_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP]
	DROP CONSTRAINT IF EXISTS [AQOWRP_ACQUISITION_FILE_PERSON_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.AQOWRP_PK
PRINT N'Drop primary key constraint dbo.AQOWRP_PK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP]
	DROP CONSTRAINT IF EXISTS [AQOWRP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACQUISITION_OWNER_REP
PRINT N'Drop table dbo.PIMS_ACQUISITION_OWNER_REP'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_REP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_AQOWSO_H_UK
PRINT N'Drop unique constraint dbo.PIMS_AQOWSO_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_AQOWSO_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_AQOWSO_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_AQOWSO_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_AQOWSO_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.AQOWSO_%column%_TCC
PRINT N'Drop check constraint dbo.AQOWSO_%column%_TCC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	DROP CONSTRAINT IF EXISTS [AQOWSO_%column%_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.AQOWSO_ACQUISITION_FILE_PERSON_TUC
PRINT N'Drop unique constraint dbo.AQOWSO_ACQUISITION_FILE_PERSON_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	DROP CONSTRAINT IF EXISTS [AQOWSO_ACQUISITION_FILE_PERSON_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.AQOWSO_PK
PRINT N'Drop primary key constraint dbo.AQOWSO_PK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	DROP CONSTRAINT IF EXISTS [AQOWSO_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR
PRINT N'Drop table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_FORM_8_ID_SEQ
PRINT N'Create sequence dbo.PIMS_FORM_8_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_FORM_8_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD [TOTAL_ALLOWABLE_COMPENSATION] money NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The maximum allowable coensation for the acquisition file.  This amount should be exceeded by the total of all assiciated H120''s.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'TOTAL_ALLOWABLE_COMPENSATION'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_INTEREST_HOLDER_TYPE
PRINT N'Create table dbo.PIMS_INTEREST_HOLDER_TYPE'
GO
CREATE TABLE [dbo].[PIMS_INTEREST_HOLDER_TYPE]  ( 
	[INTEREST_HOLDER_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [INHLDT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [INHLDT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [INHLDT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [INHLDT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [INHLDT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [INHLDT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [INHLDT_PK] PRIMARY KEY CLUSTERED([INTEREST_HOLDER_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the interest holder types, such as solicitors, representatives, and interest holders.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'INTEREST_HOLDER_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the interest holder types, such as solicitors, representatives, and interest holders.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Tables that contains the codes and associated descriptions of the interest holder types, such as solicitors, representatives, and interest holders.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Populate the PIMS_INTEREST_HOLDER_TYPE table
PRINT N'Populate the PIMS_INTEREST_HOLDER_TYPE table'
GO
INSERT INTO PIMS_INTEREST_HOLDER_TYPE (INTEREST_HOLDER_TYPE_CODE, DESCRIPTION, DISPLAY_ORDER)
VALUES
  (N'INTHLDR', N'Interest Holder',                  1),
  (N'AOREP',   N'Acquisition Owner Representative', 2),
  (N'AOSLCTR', N'Acquisition Owner Solicitor',      3);
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTEREST_HOLDER
PRINT N'Alter table dbo.PIMS_INTEREST_HOLDER'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	ADD [PRIMARY_CONTACT_ID] bigint NULL, 
	[INTEREST_HOLDER_TYPE_CODE] nvarchar(20) NOT NULL CONSTRAINT [INTHLD_INTEREST_HOLDER_TYPE_CODE_DEF] DEFAULT (N'INTHLDR'),
	[COMMENT] nvarchar(2000) NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary contact for the organization' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER', 
	@level2type = N'Column', @level2name = N'PRIMARY_CONTACT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Additional comment concerning the owener representative.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INTEREST_HOLDER', 
	@level2type = N'Column', @level2name = N'COMMENT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PAYMENT_ITEM_TYPE
PRINT N'Create table dbo.PIMS_PAYMENT_ITEM_TYPE'
GO
CREATE TABLE [dbo].[PIMS_PAYMENT_ITEM_TYPE]  ( 
	[PAYMENT_ITEM_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PMTITM_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [PMTITM_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PMTITM_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PMTITM_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PMTITM_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PMTITM_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PMTITM_PK] PRIMARY KEY CLUSTERED([PAYMENT_ITEM_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the payment item types, such as market value, temporary SRW, and disturbance damages.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PAYMENT_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'PAYMENT_ITEM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the payment item types, such as market value, temporary SRW, and disturbance damages.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PAYMENT_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PAYMENT_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PAYMENT_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the codes and associated descriptions of the payment item types, such as market value, temporary SRW, and disturbance damages.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PAYMENT_ITEM_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_FORM_8
PRINT N'Create table dbo.PIMS_FORM_8'
GO
CREATE TABLE [dbo].[PIMS_FORM_8]  ( 
	[FORM_8_ID]                     	bigint NOT NULL CONSTRAINT [FORM8_FORM_8_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_FORM_8_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[ACQUISITION_OWNER_ID]          	bigint NULL,
	[INTEREST_HOLDER_ID]            	bigint NULL,
	[EXPROPRIATING_AUTHORITY]       	bigint NULL,
	[PAYMENT_ITEM_TYPE_CODE]        	nvarchar(20) NULL,
	[DESCRIPTION]                   	nvarchar(2000) NULL,
	[IS_GST_REQUIRED]               	bit NULL CONSTRAINT [FORM8_IS_GST_REQUIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[PRETAX_AMT]                    	money NULL,
	[TAX_AMT]                       	money NULL,
	[TOTAL_AMT]                     	money NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [FORM8_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [FORM8_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [FORM8_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [FORM8_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [FORM8_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [FORM8_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [FORM8_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [FORM8_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [FORM8_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [FORM8_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [FORM8_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [FORM8_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [FORM8_PK] PRIMARY KEY CLUSTERED([FORM_8_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Form 8 description field.  There are lawyer remarks pending.  This field could be used for: - providing remarks particular to an expropriation form, and /or - for any ETL descriptive fields as well as - a place-holder forfields that do not have a mapping' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_8', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if GST is required for this transaction.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_8', 
	@level2type = N'Column', @level2name = N'IS_GST_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Subtotal of the Form 8 payment.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_8', 
	@level2type = N'Column', @level2name = N'PRETAX_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST on the Form 8 oayment.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_8', 
	@level2type = N'Column', @level2name = N'TAX_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Total amount of the Form 8 payment.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_8', 
	@level2type = N'Column', @level2name = N'TOTAL_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the Form 8 payment is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_8', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity continaing the details regarding a Form 8 (Notice of Advance Payment).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_8'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.FORM8_PERSON_ORGANIZATION_TCC
PRINT N'Create check constraint dbo.FORM8_PERSON_ORGANIZATION_TCC'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	ADD CONSTRAINT [FORM8_PERSON_ORGANIZATION_TCC] CHECK ([ACQUISITION_OWNER_ID] IS NULL AND [INTEREST_HOLDER_ID] IS NOT NULL OR [ACQUISITION_OWNER_ID] IS NOT NULL AND [INTEREST_HOLDER_ID] IS NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_INTHLDR_INTEREST_TYPE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_INTHLDR_INTEREST_TYPE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTHLDR_PROP_INTEREST
PRINT N'Alter table dbo.PIMS_INTHLDR_PROP_INTEREST'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	DROP COLUMN IF EXISTS [INTEREST_HOLDER_INTEREST_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_INTHLDR_INTEREST_TYPE
PRINT N'Create table dbo.PIMS_PROP_INTHLDR_INTEREST_TYPE'
GO
CREATE TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]  ( 
	[PROP_INTHLDR_INTEREST_TYPE_ID]     	bigint NOT NULL CONSTRAINT [PIHITY_PROP_INTHLDR_INTEREST_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_INTHLDR_INTEREST_TYPE_ID_SEQ]),
	[PIMS_INTHLDR_PROP_INTEREST_ID]     	bigint NOT NULL,
	[INTEREST_HOLDER_INTEREST_TYPE_CODE]	nvarchar(20) NOT NULL,
	[IS_DISABLED]                       	bit NULL CONSTRAINT [PIHITY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL CONSTRAINT [PIHITY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [PIHITY_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [PIHITY_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [PIHITY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PIHITY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PIHITY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PIHITY_PK] PRIMARY KEY CLUSTERED([PROP_INTHLDR_INTEREST_TYPE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_INTHLDR_INTEREST_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_PAYEE
PRINT N'Alter table dbo.PIMS_ACQUISITION_PAYEE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	DROP COLUMN IF EXISTS [OWNER_REPRESENTATIVE_ID], [OWNER_SOLICITOR_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.ACQPAY_COMP_REQ_PAYEE_TCC
--PRINT N'Create check constraint dbo.ACQPAY_COMP_REQ_PAYEE_TCC'
--GO
--ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
--	ADD CONSTRAINT [ACQPAY_COMP_REQ_PAYEE_TCC] CHECK ([ACQUISITION_OWNER_ID] IS NOT NULL AND [INTEREST_HOLDER_ID] IS NULL OR [ACQUISITION_OWNER_ID] IS NULL AND [INTEREST_HOLDER_ID] IS NOT NULL OR [ACQUISITION_OWNER_ID] IS NULL AND [INTEREST_HOLDER_ID] IS NULL)
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Alter table dbo.PIMS_ACQUISITION_PAYEE_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_PAYEE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE_HIST]
	DROP COLUMN IF EXISTS [OWNER_REPRESENTATIVE_ID], [OWNER_SOLICITOR_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE
PRINT N'Alter table dbo.PIMS_LEASE'
GO
ALTER TABLE [dbo].[PIMS_LEASE] ALTER COLUMN [TFA_FILE_NUMBER] nvarchar(500) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_TERM
PRINT N'Alter table dbo.PIMS_LEASE_TERM'
GO
EXEC dbo.sp_rename N'dbo.PIMS_LEASE_TERM.PAYMENT AMOUNT' , N'PAYMENT_AMOUNT', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LAND_ACT_TYPE
PRINT N'Alter table dbo.PIMS_LAND_ACT_TYPE'
GO
ALTER TABLE [dbo].[PIMS_LAND_ACT_TYPE]
	ADD [IS_DISABLED] bit NOT NULL CONSTRAINT [LNDATY_IS_DISABLED_DEF] DEFAULT (CONVERT([bit],(0)))
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_ACT_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_TAKE_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_TAKE_STATUS_TYPE]
	ADD [IS_DISABLED] bit NOT NULL CONSTRAINT [TKSTST_IS_DISABLED_DEF] DEFAULT (CONVERT([bit],(0)))
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_TERM_HIST
PRINT N'Alter table dbo.PIMS_LEASE_TERM_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_LEASE_TERM_HIST.PAYMENT AMOUNT' , N'PAYMENT_AMOUNT', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE_SITE_CONTAM_TYPE
PRINT N'Alter table dbo.PIMS_TAKE_SITE_CONTAM_TYPE'
GO
ALTER TABLE [dbo].[PIMS_TAKE_SITE_CONTAM_TYPE]
	ADD [IS_DISABLED] bit NOT NULL CONSTRAINT [TKCONT_IS_DISABLED_DEF] DEFAULT (CONVERT([bit],(0)))
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_SITE_CONTAM_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_FORM_8_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_FORM_8_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_FORM_8_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_FORM_8_HIST
PRINT N'Create table dbo.PIMS_FORM_8_HIST'
GO
CREATE TABLE [dbo].[PIMS_FORM_8_HIST]  ( 
	[_FORM_8_HIST_ID]               	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_FORM_8_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[FORM_8_ID]                     	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[ACQUISITION_OWNER_ID]          	bigint NULL,
	[INTEREST_HOLDER_ID]            	bigint NULL,
	[EXPROPRIATING_AUTHORITY]       	bigint NULL,
	[PAYMENT_ITEM_TYPE_CODE]        	nvarchar(20) NULL,
	[DESCRIPTION]                   	nvarchar(2000) NULL,
	[IS_GST_REQUIRED]               	bit NULL,
	[PRETAX_AMT]                    	money NULL,
	[TAX_AMT]                       	money NULL,
	[TOTAL_AMT]                     	money NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_FORM8_H_PK] PRIMARY KEY CLUSTERED([_FORM_8_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_FORM8_H_UK
PRINT N'Create unique constraint dbo.PIMS_FORM8_H_UK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8_HIST]
	ADD CONSTRAINT [PIMS_FORM8_H_UK]
	UNIQUE ([_FORM_8_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_AGREEMENT
PRINT N'Alter table dbo.PIMS_AGREEMENT'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT]
	ADD [EXPROPRIATION_DATE] date NULL, 
	[POSSESSION_DATE] date NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of expropriation of the property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'EXPROPRIATION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of possession of the property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'POSSESSION_DATE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_AGREEMENT_HIST
PRINT N'Alter table dbo.PIMS_AGREEMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT_HIST]
	ADD [EXPROPRIATION_DATE] date NULL, 
	[POSSESSION_DATE] date NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST]
	ADD [TOTAL_ALLOWABLE_COMPENSATION] money NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_TAKE_TYPE
PRINT N'Alter table dbo.PIMS_TAKE_TYPE'
GO
ALTER TABLE [dbo].[PIMS_TAKE_TYPE]
	ADD [IS_DISABLED] bit NOT NULL CONSTRAINT [TKTYPE_IS_DISABLED_DEF] DEFAULT (CONVERT([bit],(0)))
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAKE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE]
	ADD [IS_DISABLED] bit NOT NULL CONSTRAINT [ACQCST_IS_DISABLED_DEF] DEFAULT (CONVERT([bit],(0)))
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTEREST_HOLDER_HIST
PRINT N'Alter table dbo.PIMS_INTEREST_HOLDER_HIST'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER_HIST]
	ADD [PRIMARY_CONTACT_ID] bigint NULL, 
	[INTEREST_HOLDER_TYPE_CODE] nvarchar(20) NOT NULL DEFAULT(N'INTHLDR'),
	[COMMENT] nvarchar(2000) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTHLDR_PROP_INTEREST_HIST
PRINT N'Alter table dbo.PIMS_INTHLDR_PROP_INTEREST_HIST'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST_HIST]
	DROP COLUMN IF EXISTS [INTEREST_HOLDER_INTEREST_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_LOCATION_VW
PRINT N'Create view dbo.PIMS_PROPERTY_LOCATION_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_LOCATION_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN                   
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , PROP.PROPERTY_CLASSIFICATION_TYPE_CODE  
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TNUR.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE  TNUR INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYPE TNTY ON TNTY.PROPERTY_TENURE_TYPE_CODE = TNUR.PROPERTY_TENURE_TYPE_CODE
                                                      AND TNTY.PROPERTY_ID               = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.NAME
     , PROP.DESCRIPTION
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.LOCATION AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.SURVEY_PLAN_NUMBER
     , PROP.ENCUMBRANCE_REASON          
     , PROP.IS_SENSITIVE
     , PROP.IS_OWNED
     , PROP.IS_PROPERTY_OF_INTEREST
     , PROP.IS_VISIBLE_TO_OTHER_AGENCIES
     , PROP.ZONING
     , PROP.ZONING_POTENTIAL
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN ('PYBLMOTI', 'PYBLBCTFA')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_PAYABLE_LEASE                         
FROM   PIMS_PROPERTY       PROP                                                    LEFT OUTER JOIN
       PIMS_ADDRESS        ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY        CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
WHERE  PROP.LOCATION IS NOT NULL

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_HIST
PRINT N'Alter table dbo.PIMS_LEASE_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_HIST] ALTER COLUMN [TFA_FILE_NUMBER] nvarchar(500) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Create view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , PROP.PROPERTY_CLASSIFICATION_TYPE_CODE
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TNUR.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE  TNUR INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYPE TNTY ON TNTY.PROPERTY_TENURE_TYPE_CODE = TNUR.PROPERTY_TENURE_TYPE_CODE
                                                      AND TNTY.PROPERTY_ID               = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.NAME
     , PROP.DESCRIPTION
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY  
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.SURVEY_PLAN_NUMBER
     , PROP.ENCUMBRANCE_REASON
     , PROP.IS_SENSITIVE
     , PROP.IS_OWNED
     , PROP.IS_PROPERTY_OF_INTEREST
     , PROP.IS_VISIBLE_TO_OTHER_AGENCIES
     , PROP.ZONING
     , PROP.ZONING_POTENTIAL
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN ('PYBLMOTI', 'PYBLBCTFA')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_PAYABLE_LEASE
FROM   PIMS_PROPERTY       PROP                                                    LEFT OUTER JOIN
       PIMS_ADDRESS        ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY        CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
WHERE  PROP.BOUNDARY IS NOT NULL

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_ACQUISITION_OWNER_REP_HIST' 
                   AND col.NAME = '_ACQUISITION_OWNER_REP_HIST_ID')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_ACQUISITION_OWNER_REP_HIST' 
                   AND col.NAME = 'EFFECTIVE_DATE_HIST')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

---- Alter table dbo.PIMS_ACQUISITION_OWNER_REP_HIST
--PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER_REP_HIST'
--GO
--ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST] DROP CONSTRAINT IF EXISTS [DF__PIMS_ACQU___ACQU__2818EA29]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO
--ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST] ADD CONSTRAINT [DF__PIMS_ACQU___ACQU__290D0E62] DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_OWNER_REP_H_ID_SEQ]) FOR [_ACQUISITION_OWNER_REP_HIST_ID]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO
--ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST] DROP CONSTRAINT IF EXISTS [DF__PIMS_ACQU__EFFEC__290D0E62]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO
--ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_REP_HIST] ADD CONSTRAINT [DF__PIMS_ACQU__EFFEC__2A01329B] DEFAULT (getutcdate()) FOR [EFFECTIVE_DATE_HIST]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Create index dbo.FORM8_INTEREST_HOLDER_ID_IDX
PRINT N'Create index dbo.FORM8_INTEREST_HOLDER_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [FORM8_INTEREST_HOLDER_ID_IDX]
	ON [dbo].[PIMS_FORM_8]([INTEREST_HOLDER_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.FORM8_ACQUISITION_OWNER_ID_IDX
PRINT N'Create index dbo.FORM8_ACQUISITION_OWNER_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [FORM8_ACQUISITION_OWNER_ID_IDX]
	ON [dbo].[PIMS_FORM_8]([ACQUISITION_OWNER_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.FORM8_PAYMENT_ITEM_TYPE_CODE_IDX
PRINT N'Create index dbo.FORM8_PAYMENT_ITEM_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [FORM8_PAYMENT_ITEM_TYPE_CODE_IDX]
	ON [dbo].[PIMS_FORM_8]([PAYMENT_ITEM_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PIHITY_PIMS_INTHLDR_PROP_INTEREST_ID_IDX
PRINT N'Create index dbo.PIHITY_PIMS_INTHLDR_PROP_INTEREST_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PIHITY_PIMS_INTHLDR_PROP_INTEREST_ID_IDX]
	ON [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]([PIMS_INTHLDR_PROP_INTEREST_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.INTHLD_PRIMARY_CONTACT_ID_IDX
PRINT N'Create index dbo.INTHLD_PRIMARY_CONTACT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [INTHLD_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_INTEREST_HOLDER]([PRIMARY_CONTACT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PIHITY_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX
PRINT N'Create index dbo.PIHITY_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PIHITY_INTEREST_HOLDER_INTEREST_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]([INTEREST_HOLDER_INTEREST_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.FORM8_EXPROPRIATING_AUTHORITY_IDX
PRINT N'Create index dbo.FORM8_EXPROPRIATING_AUTHORITY_IDX'
GO
CREATE NONCLUSTERED INDEX [FORM8_EXPROPRIATING_AUTHORITY_IDX]
	ON [dbo].[PIMS_FORM_8]([EXPROPRIATING_AUTHORITY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.INTHLD_INTEREST_HOLDER_TYPE_CODE_IDX
PRINT N'Create index dbo.INTHLD_INTEREST_HOLDER_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [INTHLD_INTEREST_HOLDER_TYPE_CODE_IDX]
	ON [dbo].[PIMS_INTEREST_HOLDER]([INTEREST_HOLDER_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTY_SURVEY_PLAN_NUMBER_IDX
PRINT N'Create index dbo.PRPRTY_SURVEY_PLAN_NUMBER_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRTY_SURVEY_PLAN_NUMBER_IDX]
	ON [dbo].[PIMS_PROPERTY]([SURVEY_PLAN_NUMBER])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.FORM8_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.FORM8_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [FORM8_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_FORM_8]([ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_I_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE ("ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUMBER",
      "LEGACY_FILE_NUMBER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "COMPLETION_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUMBER",
      "LEGACY_FILE_NUMBER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "COMPLETION_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_A_S_IUD_TR] ON PIMS_ACQUISITION_PAYEE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_PAYEE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_PAYEE_ID in (select ACQUISITION_PAYEE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_PAYEE_HIST ([ACQUISITION_PAYEE_ID], [COMPENSATION_REQUISITION_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [ACQUISITION_FILE_PERSON_ID], [GST_NUMBER], [IS_PAYMENT_IN_TRUST], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_PAYEE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_PAYEE_ID], [COMPENSATION_REQUISITION_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [ACQUISITION_FILE_PERSON_ID], [GST_NUMBER], [IS_PAYMENT_IN_TRUST], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_PAYEE_H_ID_SEQ]) as [_ACQUISITION_PAYEE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INHLDT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_INHLDT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INHLDT_I_S_I_TR] ON PIMS_INTEREST_HOLDER_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INTEREST_HOLDER_TYPE ("INTEREST_HOLDER_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "INTEREST_HOLDER_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSTERM_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LSTERM_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSTERM_I_S_I_TR] ON PIMS_LEASE_TERM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_TERM ("LEASE_TERM_ID",
      "LEASE_ID",
      "LEASE_TERM_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "TERM_START_DATE",
      "TERM_EXPIRY_DATE",
      "TERM_RENEWAL_DATE",
      "PAYMENT_AMOUNT",
      "PAYMENT_DUE_DATE",
      "PAYMENT_NOTE",
      "IS_GST_ELIGIBLE",
      "GST_AMOUNT",
      "IS_TERM_EXERCISED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_TERM_ID",
      "LEASE_ID",
      "LEASE_TERM_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "TERM_START_DATE",
      "TERM_EXPIRY_DATE",
      "TERM_RENEWAL_DATE",
      "PAYMENT_AMOUNT",
      "PAYMENT_DUE_DATE",
      "PAYMENT_NOTE",
      "IS_GST_ELIGIBLE",
      "GST_AMOUNT",
      "IS_TERM_EXERCISED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LNDATY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LNDATY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LNDATY_I_S_I_TR] ON PIMS_LAND_ACT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LAND_ACT_TYPE ("LAND_ACT_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LAND_ACT_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_IHPRIN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_IHPRIN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_IHPRIN_I_S_U_TR] ON PIMS_INTHLDR_PROP_INTEREST INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PIMS_INTHLDR_PROP_INTEREST_ID = deleted.PIMS_INTHLDR_PROP_INTEREST_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INTHLDR_PROP_INTEREST
    set "PIMS_INTHLDR_PROP_INTEREST_ID" = inserted."PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INTHLDR_PROP_INTEREST
    inner join inserted
    on (PIMS_INTHLDR_PROP_INTEREST.PIMS_INTHLDR_PROP_INTEREST_ID = inserted.PIMS_INTHLDR_PROP_INTEREST_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PIHITY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PIHITY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PIHITY_I_S_I_TR] ON PIMS_PROP_INTHLDR_INTEREST_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_INTHLDR_INTEREST_TYPE ("PROP_INTHLDR_INTEREST_TYPE_ID",
      "PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_INTHLDR_INTEREST_TYPE_ID",
      "PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKSTST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TKSTST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKSTST_I_S_U_TR] ON PIMS_TAKE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_STATUS_TYPE_CODE = deleted.TAKE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE_STATUS_TYPE
    set "TAKE_STATUS_TYPE_CODE" = inserted."TAKE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE_STATUS_TYPE
    inner join inserted
    on (PIMS_TAKE_STATUS_TYPE.TAKE_STATUS_TYPE_CODE = inserted.TAKE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSTERM_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LSTERM_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSTERM_A_S_IUD_TR] ON PIMS_LEASE_TERM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_TERM_HIST set END_DATE_HIST = @curr_date where LEASE_TERM_ID in (select LEASE_TERM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_TERM_HIST ([LEASE_TERM_ID], [LEASE_ID], [LEASE_TERM_STATUS_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [TERM_START_DATE], [TERM_EXPIRY_DATE], [TERM_RENEWAL_DATE], [PAYMENT_AMOUNT], [PAYMENT_DUE_DATE], [PAYMENT_NOTE], [IS_GST_ELIGIBLE], [GST_AMOUNT], [IS_TERM_EXERCISED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_TERM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_TERM_ID], [LEASE_ID], [LEASE_TERM_STATUS_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [TERM_START_DATE], [TERM_EXPIRY_DATE], [TERM_RENEWAL_DATE], [PAYMENT_AMOUNT], [PAYMENT_DUE_DATE], [PAYMENT_NOTE], [IS_GST_ELIGIBLE], [GST_AMOUNT], [IS_TERM_EXERCISED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_TERM_H_ID_SEQ]) as [_LEASE_TERM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKCONT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_TKCONT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKCONT_I_S_I_TR] ON PIMS_TAKE_SITE_CONTAM_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE_SITE_CONTAM_TYPE ("TAKE_SITE_CONTAM_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TAKE_SITE_CONTAM_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_FORM8_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_FORM8_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_FORM8_A_S_IUD_TR] ON PIMS_FORM_8 FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_FORM_8_HIST set END_DATE_HIST = @curr_date where FORM_8_ID in (select FORM_8_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_FORM_8_HIST ([FORM_8_ID], [ACQUISITION_FILE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [EXPROPRIATING_AUTHORITY], [PAYMENT_ITEM_TYPE_CODE], [DESCRIPTION], [IS_GST_REQUIRED], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _FORM_8_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [FORM_8_ID], [ACQUISITION_FILE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [EXPROPRIATING_AUTHORITY], [PAYMENT_ITEM_TYPE_CODE], [DESCRIPTION], [IS_GST_REQUIRED], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_FORM_8_H_ID_SEQ]) as [_FORM_8_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_FORM8_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_FORM8_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_FORM8_I_S_U_TR] ON PIMS_FORM_8 INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.FORM_8_ID = deleted.FORM_8_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_FORM_8
    set "FORM_8_ID" = inserted."FORM_8_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "EXPROPRIATING_AUTHORITY" = inserted."EXPROPRIATING_AUTHORITY",
      "PAYMENT_ITEM_TYPE_CODE" = inserted."PAYMENT_ITEM_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_GST_REQUIRED" = inserted."IS_GST_REQUIRED",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "TAX_AMT" = inserted."TAX_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_FORM_8
    inner join inserted
    on (PIMS_FORM_8.FORM_8_ID = inserted.FORM_8_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AGRMNT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_AGRMNT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AGRMNT_A_S_IUD_TR] ON PIMS_AGREEMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_AGREEMENT_HIST set END_DATE_HIST = @curr_date where AGREEMENT_ID in (select AGREEMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_AGREEMENT_HIST ([AGREEMENT_ID], [ACQUISITION_FILE_ID], [AGREEMENT_TYPE_CODE], [AGREEMENT_DATE], [IS_DRAFT], [COMPLETION_DATE], [TERMINATION_DATE], [COMMENCEMENT_DATE], [DEPOSIT_AMOUNT], [NO_LATER_THAN_DAYS], [PURCHASE_PRICE], [LEGAL_SURVEY_PLAN_NUM], [OFFER_DATE], [EXPIRY_TS], [SIGNED_DATE], [INSPECTION_DATE], [EXPROPRIATION_DATE], [POSSESSION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _AGREEMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [AGREEMENT_ID], [ACQUISITION_FILE_ID], [AGREEMENT_TYPE_CODE], [AGREEMENT_DATE], [IS_DRAFT], [COMPLETION_DATE], [TERMINATION_DATE], [COMMENCEMENT_DATE], [DEPOSIT_AMOUNT], [NO_LATER_THAN_DAYS], [PURCHASE_PRICE], [LEGAL_SURVEY_PLAN_NUM], [OFFER_DATE], [EXPIRY_TS], [SIGNED_DATE], [INSPECTION_DATE], [EXPROPRIATION_DATE], [POSSESSION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_AGREEMENT_H_ID_SEQ]) as [_AGREEMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PMTITM_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PMTITM_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PMTITM_I_S_U_TR] ON PIMS_PAYMENT_ITEM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PAYMENT_ITEM_TYPE_CODE = deleted.PAYMENT_ITEM_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PAYMENT_ITEM_TYPE
    set "PAYMENT_ITEM_TYPE_CODE" = inserted."PAYMENT_ITEM_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PAYMENT_ITEM_TYPE
    inner join inserted
    on (PIMS_PAYMENT_ITEM_TYPE.PAYMENT_ITEM_TYPE_CODE = inserted.PAYMENT_ITEM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PIHITY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PIHITY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PIHITY_I_S_U_TR] ON PIMS_PROP_INTHLDR_INTEREST_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_INTHLDR_INTEREST_TYPE_ID = deleted.PROP_INTHLDR_INTEREST_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_INTHLDR_INTEREST_TYPE
    set "PROP_INTHLDR_INTEREST_TYPE_ID" = inserted."PROP_INTHLDR_INTEREST_TYPE_ID",
      "PIMS_INTHLDR_PROP_INTEREST_ID" = inserted."PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_INTEREST_TYPE_CODE" = inserted."INTEREST_HOLDER_INTEREST_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_INTHLDR_INTEREST_TYPE
    inner join inserted
    on (PIMS_PROP_INTHLDR_INTEREST_TYPE.PROP_INTHLDR_INTEREST_TYPE_ID = inserted.PROP_INTHLDR_INTEREST_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_ID in (select ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_HIST ([ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [FILE_NAME], [FILE_NO], [FILE_NUMBER], [LEGACY_FILE_NUMBER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [COMPLETION_DATE], [PAIMS_ACQUISITION_FILE_ID], [TOTAL_ALLOWABLE_COMPENSATION], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [FILE_NAME], [FILE_NO], [FILE_NUMBER], [LEGACY_FILE_NUMBER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [COMPLETION_DATE], [PAIMS_ACQUISITION_FILE_ID], [TOTAL_ALLOWABLE_COMPENSATION], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_H_ID_SEQ]) as [_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKTYPE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TKTYPE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKTYPE_I_S_U_TR] ON PIMS_TAKE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_TYPE_CODE = deleted.TAKE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE_TYPE
    set "TAKE_TYPE_CODE" = inserted."TAKE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE_TYPE
    inner join inserted
    on (PIMS_TAKE_TYPE.TAKE_TYPE_CODE = inserted.TAKE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INTHLD_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_INTHLD_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INTHLD_I_S_I_TR] ON PIMS_INTEREST_HOLDER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INTEREST_HOLDER ("INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "INTEREST_HOLDER_TYPE_CODE",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "INTEREST_HOLDER_TYPE_CODE",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQCST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQCST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQCST_I_S_U_TR] ON PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_CHKLST_ITEM_STATUS_TYPE_CODE = deleted.ACQ_CHKLST_ITEM_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE
    set "ACQ_CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."ACQ_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE
    inner join inserted
    on (PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE.ACQ_CHKLST_ITEM_STATUS_TYPE_CODE = inserted.ACQ_CHKLST_ITEM_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_I_S_I_TR] ON PIMS_ACQUISITION_PAYEE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_PAYEE ("ACQUISITION_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_PERSON_ID",
      "GST_NUMBER",
      "IS_PAYMENT_IN_TRUST",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_PERSON_ID",
      "GST_NUMBER",
      "IS_PAYMENT_IN_TRUST",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AGRMNT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AGRMNT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AGRMNT_I_S_U_TR] ON PIMS_AGREEMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.AGREEMENT_ID = deleted.AGREEMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_AGREEMENT
    set "AGREEMENT_ID" = inserted."AGREEMENT_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "AGREEMENT_TYPE_CODE" = inserted."AGREEMENT_TYPE_CODE",
      "AGREEMENT_DATE" = inserted."AGREEMENT_DATE",
      "IS_DRAFT" = inserted."IS_DRAFT",
      "COMPLETION_DATE" = inserted."COMPLETION_DATE",
      "TERMINATION_DATE" = inserted."TERMINATION_DATE",
      "COMMENCEMENT_DATE" = inserted."COMMENCEMENT_DATE",
      "DEPOSIT_AMOUNT" = inserted."DEPOSIT_AMOUNT",
      "NO_LATER_THAN_DAYS" = inserted."NO_LATER_THAN_DAYS",
      "PURCHASE_PRICE" = inserted."PURCHASE_PRICE",
      "LEGAL_SURVEY_PLAN_NUM" = inserted."LEGAL_SURVEY_PLAN_NUM",
      "OFFER_DATE" = inserted."OFFER_DATE",
      "EXPIRY_TS" = inserted."EXPIRY_TS",
      "SIGNED_DATE" = inserted."SIGNED_DATE",
      "INSPECTION_DATE" = inserted."INSPECTION_DATE",
      "EXPROPRIATION_DATE" = inserted."EXPROPRIATION_DATE",
      "POSSESSION_DATE" = inserted."POSSESSION_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_AGREEMENT
    inner join inserted
    on (PIMS_AGREEMENT.AGREEMENT_ID = inserted.AGREEMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_IHPRIN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_IHPRIN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_IHPRIN_I_S_I_TR] ON PIMS_INTHLDR_PROP_INTEREST INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INTHLDR_PROP_INTEREST ("PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PIMS_INTHLDR_PROP_INTEREST_ID",
      "INTEREST_HOLDER_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSTERM_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSTERM_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSTERM_I_S_U_TR] ON PIMS_LEASE_TERM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_TERM_ID = deleted.LEASE_TERM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_TERM
    set "LEASE_TERM_ID" = inserted."LEASE_TERM_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_TERM_STATUS_TYPE_CODE" = inserted."LEASE_TERM_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE" = inserted."LEASE_PMT_FREQ_TYPE_CODE",
      "TERM_START_DATE" = inserted."TERM_START_DATE",
      "TERM_EXPIRY_DATE" = inserted."TERM_EXPIRY_DATE",
      "TERM_RENEWAL_DATE" = inserted."TERM_RENEWAL_DATE",
      "PAYMENT_AMOUNT" = inserted."PAYMENT_AMOUNT",
      "PAYMENT_DUE_DATE" = inserted."PAYMENT_DUE_DATE",
      "PAYMENT_NOTE" = inserted."PAYMENT_NOTE",
      "IS_GST_ELIGIBLE" = inserted."IS_GST_ELIGIBLE",
      "GST_AMOUNT" = inserted."GST_AMOUNT",
      "IS_TERM_EXERCISED" = inserted."IS_TERM_EXERCISED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_TERM
    inner join inserted
    on (PIMS_LEASE_TERM.LEASE_TERM_ID = inserted.LEASE_TERM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKSTST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_TKSTST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKSTST_I_S_I_TR] ON PIMS_TAKE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE_STATUS_TYPE ("TAKE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TAKE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INHLDT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_INHLDT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INHLDT_I_S_U_TR] ON PIMS_INTEREST_HOLDER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.INTEREST_HOLDER_TYPE_CODE = deleted.INTEREST_HOLDER_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INTEREST_HOLDER_TYPE
    set "INTEREST_HOLDER_TYPE_CODE" = inserted."INTEREST_HOLDER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INTEREST_HOLDER_TYPE
    inner join inserted
    on (PIMS_INTEREST_HOLDER_TYPE.INTEREST_HOLDER_TYPE_CODE = inserted.INTEREST_HOLDER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_FORM8_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_FORM8_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_FORM8_I_S_I_TR] ON PIMS_FORM_8 INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_FORM_8 ("FORM_8_ID",
      "ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "EXPROPRIATING_AUTHORITY",
      "PAYMENT_ITEM_TYPE_CODE",
      "DESCRIPTION",
      "IS_GST_REQUIRED",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "FORM_8_ID",
      "ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "EXPROPRIATING_AUTHORITY",
      "PAYMENT_ITEM_TYPE_CODE",
      "DESCRIPTION",
      "IS_GST_REQUIRED",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_U_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_ID = deleted.ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE
    set "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_NO" = inserted."FILE_NO",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "LEGACY_FILE_NUMBER" = inserted."LEGACY_FILE_NUMBER",
      "FUNDING_OTHER" = inserted."FUNDING_OTHER",
      "ASSIGNED_DATE" = inserted."ASSIGNED_DATE",
      "DELIVERY_DATE" = inserted."DELIVERY_DATE",
      "COMPLETION_DATE" = inserted."COMPLETION_DATE",
      "PAIMS_ACQUISITION_FILE_ID" = inserted."PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION" = inserted."TOTAL_ALLOWABLE_COMPENSATION",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE
    inner join inserted
    on (PIMS_ACQUISITION_FILE.ACQUISITION_FILE_ID = inserted.ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INTHLD_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_INTHLD_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INTHLD_A_S_IUD_TR] ON PIMS_INTEREST_HOLDER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_INTEREST_HOLDER_HIST set END_DATE_HIST = @curr_date where INTEREST_HOLDER_ID in (select INTEREST_HOLDER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_INTEREST_HOLDER_HIST ([INTEREST_HOLDER_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [INTEREST_HOLDER_TYPE_CODE], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _INTEREST_HOLDER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [INTEREST_HOLDER_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [INTEREST_HOLDER_TYPE_CODE], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_INTEREST_HOLDER_H_ID_SEQ]) as [_INTEREST_HOLDER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PMTITM_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PMTITM_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PMTITM_I_S_I_TR] ON PIMS_PAYMENT_ITEM_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PAYMENT_ITEM_TYPE ("PAYMENT_ITEM_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PAYMENT_ITEM_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKCONT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TKCONT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKCONT_I_S_U_TR] ON PIMS_TAKE_SITE_CONTAM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAKE_SITE_CONTAM_TYPE_CODE = deleted.TAKE_SITE_CONTAM_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAKE_SITE_CONTAM_TYPE
    set "TAKE_SITE_CONTAM_TYPE_CODE" = inserted."TAKE_SITE_CONTAM_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAKE_SITE_CONTAM_TYPE
    inner join inserted
    on (PIMS_TAKE_SITE_CONTAM_TYPE.TAKE_SITE_CONTAM_TYPE_CODE = inserted.TAKE_SITE_CONTAM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_IHPRIN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_IHPRIN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_IHPRIN_A_S_IUD_TR] ON PIMS_INTHLDR_PROP_INTEREST FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_INTHLDR_PROP_INTEREST_HIST set END_DATE_HIST = @curr_date where PIMS_INTHLDR_PROP_INTEREST_ID in (select PIMS_INTHLDR_PROP_INTEREST_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_INTHLDR_PROP_INTEREST_HIST ([PIMS_INTHLDR_PROP_INTEREST_ID], [INTEREST_HOLDER_ID], [PROPERTY_ACQUISITION_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _INTHLDR_PROP_INTEREST_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PIMS_INTHLDR_PROP_INTEREST_ID], [INTEREST_HOLDER_ID], [PROPERTY_ACQUISITION_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_INTHLDR_PROP_INTEREST_H_ID_SEQ]) as [_INTHLDR_PROP_INTEREST_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TKTYPE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_TKTYPE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TKTYPE_I_S_I_TR] ON PIMS_TAKE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAKE_TYPE ("TAKE_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TAKE_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LNDATY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LNDATY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LNDATY_I_S_U_TR] ON PIMS_LAND_ACT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LAND_ACT_TYPE_CODE = deleted.LAND_ACT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LAND_ACT_TYPE
    set "LAND_ACT_TYPE_CODE" = inserted."LAND_ACT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LAND_ACT_TYPE
    inner join inserted
    on (PIMS_LAND_ACT_TYPE.LAND_ACT_TYPE_CODE = inserted.LAND_ACT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AGRMNT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AGRMNT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AGRMNT_I_S_I_TR] ON PIMS_AGREEMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_AGREEMENT ("AGREEMENT_ID",
      "ACQUISITION_FILE_ID",
      "AGREEMENT_TYPE_CODE",
      "AGREEMENT_DATE",
      "IS_DRAFT",
      "COMPLETION_DATE",
      "TERMINATION_DATE",
      "COMMENCEMENT_DATE",
      "DEPOSIT_AMOUNT",
      "NO_LATER_THAN_DAYS",
      "PURCHASE_PRICE",
      "LEGAL_SURVEY_PLAN_NUM",
      "OFFER_DATE",
      "EXPIRY_TS",
      "SIGNED_DATE",
      "INSPECTION_DATE",
      "EXPROPRIATION_DATE",
      "POSSESSION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "AGREEMENT_ID",
      "ACQUISITION_FILE_ID",
      "AGREEMENT_TYPE_CODE",
      "AGREEMENT_DATE",
      "IS_DRAFT",
      "COMPLETION_DATE",
      "TERMINATION_DATE",
      "COMMENCEMENT_DATE",
      "DEPOSIT_AMOUNT",
      "NO_LATER_THAN_DAYS",
      "PURCHASE_PRICE",
      "LEGAL_SURVEY_PLAN_NUM",
      "OFFER_DATE",
      "EXPIRY_TS",
      "SIGNED_DATE",
      "INSPECTION_DATE",
      "EXPROPRIATION_DATE",
      "POSSESSION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQCST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQCST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQCST_I_S_I_TR] ON PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_CHKLST_ITEM_STATUS_TYPE ("ACQ_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_INTHLD_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_INTHLD_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_INTHLD_I_S_U_TR] ON PIMS_INTEREST_HOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.INTEREST_HOLDER_ID = deleted.INTEREST_HOLDER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INTEREST_HOLDER
    set "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "INTEREST_HOLDER_TYPE_CODE" = inserted."INTEREST_HOLDER_TYPE_CODE",
      "COMMENT" = inserted."COMMENT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INTEREST_HOLDER
    inner join inserted
    on (PIMS_INTEREST_HOLDER.INTEREST_HOLDER_ID = inserted.INTEREST_HOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_I_S_U_TR] ON PIMS_ACQUISITION_PAYEE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_PAYEE_ID = deleted.ACQUISITION_PAYEE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_PAYEE
    set "ACQUISITION_PAYEE_ID" = inserted."ACQUISITION_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_PERSON_ID" = inserted."ACQUISITION_FILE_PERSON_ID",
      "GST_NUMBER" = inserted."GST_NUMBER",
      "IS_PAYMENT_IN_TRUST" = inserted."IS_PAYMENT_IN_TRUST",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_PAYEE
    inner join inserted
    on (PIMS_ACQUISITION_PAYEE.ACQUISITION_PAYEE_ID = inserted.ACQUISITION_PAYEE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTY_BOUNDARY_IDX
PRINT N'Create index dbo.PRPRTY_BOUNDARY_IDX'
GO
-- [PRPRTY_BOUNDARY_IDX] : Scripting for Spatial Index currently not supported
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTY_LOCATION_IDX
PRINT N'Create index dbo.PRPRTY_LOCATION_IDX'
GO
-- [PRPRTY_LOCATION_IDX] : Scripting for Spatial Index currently not supported
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_INHLDT_PIM_INTHLD_FK
PRINT N'Create foreign key constraint dbo.PIM_INHLDT_PIM_INTHLD_FK'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	ADD CONSTRAINT [PIM_INHLDT_PIM_INTHLD_FK]
	FOREIGN KEY([INTEREST_HOLDER_TYPE_CODE])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER_TYPE]([INTEREST_HOLDER_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_INTHLD_PRIMARY_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_INTHLD_PRIMARY_FK'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER]
	ADD CONSTRAINT [PIM_PERSON_PIM_INTHLD_PRIMARY_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_FORM8_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	ADD CONSTRAINT [PIM_ORG_PIM_FORM8_FK]
	FOREIGN KEY([EXPROPRIATING_AUTHORITY])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_FORM8_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_FORM8_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQOWN_PIM_FORM8_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQOWN_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	ADD CONSTRAINT [PIM_ACQOWN_PIM_FORM8_FK]
	FOREIGN KEY([ACQUISITION_OWNER_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_OWNER]([ACQUISITION_OWNER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PMTITM_PIM_FORM8_FK
PRINT N'Create foreign key constraint dbo.PIM_PMTITM_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	ADD CONSTRAINT [PIM_PMTITM_PIM_FORM8_FK]
	FOREIGN KEY([PAYMENT_ITEM_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PAYMENT_ITEM_TYPE]([PAYMENT_ITEM_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_INTHLD_PIM_FORM8_FK
PRINT N'Create foreign key constraint dbo.PIM_INTHLD_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	ADD CONSTRAINT [PIM_INTHLD_PIM_FORM8_FK]
	FOREIGN KEY([INTEREST_HOLDER_ID])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER]([INTEREST_HOLDER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_INTHLD_PIM_IHPRIN_FK
PRINT N'Create foreign key constraint dbo.PIM_INTHLD_PIM_IHPRIN_FK'
GO
ALTER TABLE [dbo].[PIMS_INTHLDR_PROP_INTEREST]
	ADD CONSTRAINT [PIM_INTHLD_PIM_IHPRIN_FK]
	FOREIGN KEY([INTEREST_HOLDER_ID])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER]([INTEREST_HOLDER_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_IHINTT_PIM_PIHITY_FK
PRINT N'Create foreign key constraint dbo.PIM_IHINTT_PIM_PIHITY_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]
	ADD CONSTRAINT [PIM_IHINTT_PIM_PIHITY_FK]
	FOREIGN KEY([INTEREST_HOLDER_INTEREST_TYPE_CODE])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER_INTEREST_TYPE]([INTEREST_HOLDER_INTEREST_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_IHPRIN_PIM_PIHITY_FK
PRINT N'Create foreign key constraint dbo.PIM_IHPRIN_PIM_PIHITY_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]
	ADD CONSTRAINT [PIM_IHPRIN_PIM_PIHITY_FK]
	FOREIGN KEY([PIMS_INTHLDR_PROP_INTEREST_ID])
	REFERENCES [dbo].[PIMS_INTHLDR_PROP_INTEREST]([PIMS_INTHLDR_PROP_INTEREST_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROPERTY_ADJACENT_LAND_TYPE
--PRINT N'Drop table dbo.PIMS_PROPERTY_ADJACENT_LAND_TYPE'
--GO
--DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_ADJACENT_LAND_TYPE]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Drop table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_HIST
PRINT N'Drop table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

CREATE TRIGGER PIMS_PRADJL_I_S_I_TR ON PIMS_PROPERTY_ADJACENT_LAND_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ADJACENT_LAND_TYPE ("PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
CREATE TRIGGER PIMS_PRADJL_I_S_U_TR ON PIMS_PROPERTY_ADJACENT_LAND_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ADJACENT_LAND_TYPE_CODE = deleted.PROPERTY_ADJACENT_LAND_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ADJACENT_LAND_TYPE
    set "PROPERTY_ADJACENT_LAND_TYPE_CODE" = inserted."PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ADJACENT_LAND_TYPE
    inner join inserted
    on (PIMS_PROPERTY_ADJACENT_LAND_TYPE.PROPERTY_ADJACENT_LAND_TYPE_CODE = inserted.PROPERTY_ADJACENT_LAND_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


CREATE TRIGGER PIMS_PRPALT_I_S_I_TR ON PIMS_PROP_PROP_ADJACENT_LAND_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_ADJACENT_LAND_TYPE ("PROP_PROP_ADJACENT_LAND_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROP_PROP_ADJACENT_LAND_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
CREATE TRIGGER PIMS_PRPALT_I_S_U_TR ON PIMS_PROP_PROP_ADJACENT_LAND_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_ADJACENT_LAND_TYPE_ID = deleted.PROP_PROP_ADJACENT_LAND_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_ADJACENT_LAND_TYPE
    set "PROP_PROP_ADJACENT_LAND_TYPE_ID" = inserted."PROP_PROP_ADJACENT_LAND_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_ADJACENT_LAND_TYPE_CODE" = inserted."PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ADJACENT_LAND_TYPE
    inner join inserted
    on (PIMS_PROP_PROP_ADJACENT_LAND_TYPE.PROP_PROP_ADJACENT_LAND_TYPE_ID = inserted.PROP_PROP_ADJACENT_LAND_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

---- Create unique constraint dbo.PRPALT_PROP_ADJACENT_LAND_TYPE_TUC
--PRINT N'Create unique constraint dbo.PRPALT_PROP_ADJACENT_LAND_TYPE_TUC'
--GO
--ALTER TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]
--	ADD CONSTRAINT [PRPALT_PROP_ADJACENT_LAND_TYPE_TUC]
--	UNIQUE ([PROPERTY_ADJACENT_LAND_TYPE_CODE], [PROPERTY_ID]) 
--	WITH (
--		DATA_COMPRESSION = NONE
--	) ON [PRIMARY]
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
