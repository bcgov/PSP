-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Wed Jul 23 15:04:04 PDT 2025
-- Execute this script on:
-- 		PSP_PIMS_S108_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S107_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_MGMTAC_PIM_MGACDC_FK
PRINT N'Drop foreign key constraint dbo.PIM_MGMTAC_PIM_MGACDC_FK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACTIVITY_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_MGMTAC_PIM_MGACDC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCMNT_PIM_MGACDC_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCMNT_PIM_MGACDC_FK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACTIVITY_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_DOCMNT_PIM_MGACDC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_MGMTAC_PIM_MAASTY_FK
PRINT N'Drop foreign key constraint dbo.PIM_MGMTAC_PIM_MAASTY_FK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP]
	DROP CONSTRAINT IF EXISTS [PIM_MGMTAC_PIM_MAASTY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_MASBTY_PIM_MAASTY_FK
PRINT N'Drop foreign key constraint dbo.PIM_MASBTY_PIM_MAASTY_FK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP]
	DROP CONSTRAINT IF EXISTS [PIM_MASBTY_PIM_MAASTY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_MATYPE_PIM_MASBTY_FK
PRINT N'Drop foreign key constraint dbo.PIM_MATYPE_PIM_MASBTY_FK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACTIVITY_SUBTYPE]
	DROP CONSTRAINT IF EXISTS [PIM_MATYPE_PIM_MASBTY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_MAMNCO_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_MAMNCO_FK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACT_MIN_CONTACT]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_MAMNCO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_MGMTAC_PIM_MAMNCO_FK
PRINT N'Drop foreign key constraint dbo.PIM_MGMTAC_PIM_MAMNCO_FK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACT_MIN_CONTACT]
	DROP CONSTRAINT IF EXISTS [PIM_MGMTAC_PIM_MAMNCO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_MGMTAC_PIM_MAINVP_FK
PRINT N'Drop foreign key constraint dbo.PIM_MGMTAC_PIM_MAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACT_INVOLVED_PARTY]
	DROP CONSTRAINT IF EXISTS [PIM_MGMTAC_PIM_MAINVP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_MAINVP_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_MAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACT_INVOLVED_PARTY]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_MAINVP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_MAINVP_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_MAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACT_INVOLVED_PARTY]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_MAINVP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_MGMTAC_PIM_MAACPR_FK
PRINT N'Drop foreign key constraint dbo.PIM_MGMTAC_PIM_MAACPR_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY]
	DROP CONSTRAINT IF EXISTS [PIM_MGMTAC_PIM_MAACPR_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_MGMTAC_PIM_MAAINV_FK
PRINT N'Drop foreign key constraint dbo.PIM_MGMTAC_PIM_MAAINV_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY_INVOICE]
	DROP CONSTRAINT IF EXISTS [PIM_MGMTAC_PIM_MAAINV_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_MATYPE_PIM_MGMTAC_FK
PRINT N'Drop foreign key constraint dbo.PIM_MATYPE_PIM_MGMTAC_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_MATYPE_PIM_MGMTAC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_MASTST_PIM_MGMTAC_FK
PRINT N'Drop foreign key constraint dbo.PIM_MASTST_PIM_MGMTAC_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_MASTST_PIM_MGMTAC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_MGMTAC_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_MGMTAC_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_MGMTAC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_MGMTAC_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_MGMTAC_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_MGMTAC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGACDC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MGACDC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGACDC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGACDC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MGACDC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGACDC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGACDC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_MGACDC_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGACDC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MGACDC_MANAGEMENT_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.MGACDC_MANAGEMENT_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MGMT_ACTIVITY_DOCUMENT].[MGACDC_MANAGEMENT_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MGACDC_DOCUMENT_ID_IDX
PRINT N'Drop index dbo.MGACDC_DOCUMENT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MGMT_ACTIVITY_DOCUMENT].[MGACDC_DOCUMENT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAASTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MAASTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAASTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAASTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MAASTY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAASTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAASTY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_MAASTY_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAASTY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MAASTY_MGMT_ACTIVITY_SUBTYPE_CODE_IDX
PRINT N'Drop index dbo.MAASTY_MGMT_ACTIVITY_SUBTYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP].[MAASTY_MGMT_ACTIVITY_SUBTYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MAASTY_MANAGEMENT_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.MAASTY_MANAGEMENT_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP].[MAASTY_MANAGEMENT_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MASBTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MASBTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MASBTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MASBTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MASBTY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MASBTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MASBTY_MGMT_ACTIVITY_TYPE_CODE_IDX
PRINT N'Drop index dbo.MASBTY_MGMT_ACTIVITY_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MGMT_ACTIVITY_SUBTYPE].[MASBTY_MGMT_ACTIVITY_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAMNCO_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MAMNCO_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAMNCO_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAMNCO_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MAMNCO_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAMNCO_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAMNCO_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_MAMNCO_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAMNCO_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MAMNCO_PERSON_ID_IDX
PRINT N'Drop index dbo.MAMNCO_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MGMT_ACT_MIN_CONTACT].[MAMNCO_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MAMNCO_MANAGEMENT_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.MAMNCO_MANAGEMENT_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MGMT_ACT_MIN_CONTACT].[MAMNCO_MANAGEMENT_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAINVP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MAINVP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAINVP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAINVP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MAINVP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAINVP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAINVP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_MAINVP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAINVP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MAINVP_PERSON_ID_IDX
PRINT N'Drop index dbo.MAINVP_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MGMT_ACT_INVOLVED_PARTY].[MAINVP_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MAINVP_ORGANIZATION_ID_IDX
PRINT N'Drop index dbo.MAINVP_ORGANIZATION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MGMT_ACT_INVOLVED_PARTY].[MAINVP_ORGANIZATION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MAINVP_MANAGEMENT_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.MAINVP_MANAGEMENT_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MGMT_ACT_INVOLVED_PARTY].[MAINVP_MANAGEMENT_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGMTAC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MGMTAC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGMTAC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAACPR_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MAACPR_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAACPR_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGMTAC_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_MGMTAC_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGMTAC_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MGMTAC_SERVICE_PROVIDER_PERSON_ID_IDX
PRINT N'Drop index dbo.MGMTAC_SERVICE_PROVIDER_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY].[MGMTAC_SERVICE_PROVIDER_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MGMTAC_SERVICE_PROVIDER_ORG_ID_IDX
PRINT N'Drop index dbo.MGMTAC_SERVICE_PROVIDER_ORG_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY].[MGMTAC_SERVICE_PROVIDER_ORG_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MGMTAC_MGMT_ACTIVITY_TYPE_CODE_IDX
PRINT N'Drop index dbo.MGMTAC_MGMT_ACTIVITY_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY].[MGMTAC_MGMT_ACTIVITY_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MGMTAC_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.MGMTAC_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY].[MGMTAC_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAACPR_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_MAACPR_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAACPR_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MAACPR_PROPERTY_ID_IDX
PRINT N'Drop index dbo.MAACPR_PROPERTY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY].[MAACPR_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MAACPR_MANAGEMENT_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.MAACPR_MANAGEMENT_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY].[MAACPR_MANAGEMENT_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAACPR_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MAACPR_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAACPR_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGMTAC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MGMTAC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGMTAC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAAINV_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MAAINV_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAAINV_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAAINV_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MAAINV_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAAINV_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MAAINV_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_MAAINV_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MAAINV_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MAAINV_MANAGEMENT_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.MAAINV_MANAGEMENT_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY_INVOICE].[MAAINV_MANAGEMENT_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MATYPE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MATYPE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MATYPE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MATYPE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MATYPE_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MATYPE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MASTST_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MASTST_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MASTST_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MASTST_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MASTST_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MASTST_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_MGACDC_H_UK
PRINT N'Drop unique constraint dbo.PIMS_MGACDC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACTIVITY_DOCUMENT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_MGACDC_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_MGACDC_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_MGACDC_H_PK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACTIVITY_DOCUMENT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_MGACDC_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.MGACDC_PK
PRINT N'Drop primary key constraint dbo.MGACDC_PK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACTIVITY_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [MGACDC_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MGMT_ACTIVITY_DOCUMENT
PRINT N'Drop table dbo.PIMS_MGMT_ACTIVITY_DOCUMENT'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MGMT_ACTIVITY_DOCUMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_MAASTY_H_UK
PRINT N'Drop unique constraint dbo.PIMS_MAASTY_H_UK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_MAASTY_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_MAASTY_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_MAASTY_H_PK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_MAASTY_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.MAASTY_UNIQUE_ACTIVITY_TUC
PRINT N'Drop unique constraint dbo.MAASTY_UNIQUE_ACTIVITY_TUC'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP]
	DROP CONSTRAINT IF EXISTS [MAASTY_UNIQUE_ACTIVITY_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.MAASTY_PK
PRINT N'Drop primary key constraint dbo.MAASTY_PK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP]
	DROP CONSTRAINT IF EXISTS [MAASTY_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP
PRINT N'Drop table dbo.PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.MASBTY_PK
PRINT N'Drop primary key constraint dbo.MASBTY_PK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACTIVITY_SUBTYPE]
	DROP CONSTRAINT IF EXISTS [MASBTY_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_MAMNCO_H_UK
PRINT N'Drop unique constraint dbo.PIMS_MAMNCO_H_UK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACT_MIN_CONTACT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_MAMNCO_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_MAMNCO_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_MAMNCO_H_PK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACT_MIN_CONTACT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_MAMNCO_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.MAMNCO_PK
PRINT N'Drop primary key constraint dbo.MAMNCO_PK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACT_MIN_CONTACT]
	DROP CONSTRAINT IF EXISTS [MAMNCO_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MGMT_ACT_MIN_CONTACT
PRINT N'Drop table dbo.PIMS_MGMT_ACT_MIN_CONTACT'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MGMT_ACT_MIN_CONTACT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_MAINVP_H_UK
PRINT N'Drop unique constraint dbo.PIMS_MAINVP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACT_INVOLVED_PARTY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_MAINVP_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_MAINVP_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_MAINVP_H_PK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACT_INVOLVED_PARTY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_MAINVP_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.MAINVP_PK
PRINT N'Drop primary key constraint dbo.MAINVP_PK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACT_INVOLVED_PARTY]
	DROP CONSTRAINT IF EXISTS [MAINVP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MGMT_ACT_INVOLVED_PARTY
PRINT N'Drop table dbo.PIMS_MGMT_ACT_INVOLVED_PARTY'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MGMT_ACT_INVOLVED_PARTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_PROPERTY_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.ACQNFL_SUBFILE_INTEREST_TYPE_CODE_TCC
PRINT N'Drop check constraint dbo.ACQNFL_SUBFILE_INTEREST_TYPE_CODE_TCC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	DROP CONSTRAINT IF EXISTS [ACQNFL_SUBFILE_INTEREST_TYPE_CODE_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_MAAINV_H_UK
PRINT N'Drop unique constraint dbo.PIMS_MAAINV_H_UK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY_INVOICE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_MAAINV_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_MAAINV_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_MAAINV_H_PK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY_INVOICE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_MAAINV_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.MAAINV_PK
PRINT N'Drop primary key constraint dbo.MAAINV_PK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY_INVOICE]
	DROP CONSTRAINT IF EXISTS [MAAINV_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MANAGEMENT_ACTIVITY_INVOICE
PRINT N'Drop table dbo.PIMS_MANAGEMENT_ACTIVITY_INVOICE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY_INVOICE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.MGMTAC_PK
PRINT N'Drop primary key constraint dbo.MGMTAC_PK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [MGMTAC_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.MATYPE_PK
PRINT N'Drop primary key constraint dbo.MATYPE_PK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACTIVITY_TYPE]
	DROP CONSTRAINT IF EXISTS [MATYPE_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.MASTST_PK
PRINT N'Drop primary key constraint dbo.MASTST_PK'
GO
ALTER TABLE [dbo].[PIMS_MGMT_ACTIVITY_STATUS_TYPE]
	DROP CONSTRAINT IF EXISTS [MASTST_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_ACTVTY_MGMT_ACTVTY_SUBTYP_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_ACTVTY_MGMT_ACTVTY_SUBTYP_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_ACTVTY_MGMT_ACTVTY_SUBTYP_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROPERTY_ACTIVITY_INVOICE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROPERTY_ACTIVITY_INVOICE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE
PRINT N'Create table dbo.PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE]  ( 
	[PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                        	nvarchar(200) NOT NULL,
	[IS_DISABLED]                        	bit NOT NULL CONSTRAINT [PACSTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                      	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL CONSTRAINT [PACSTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL CONSTRAINT [PACSTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL CONSTRAINT [PACSTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PACSTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PACSTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PACSTY_PK] PRIMARY KEY CLUSTERED([PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the status of the property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the status of the property management status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the status of the property management activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_MGMT_ACTIVITY_TYPE
PRINT N'Create table dbo.PIMS_PROP_MGMT_ACTIVITY_TYPE'
GO
CREATE TABLE [dbo].[PIMS_PROP_MGMT_ACTIVITY_TYPE]  ( 
	[PROP_MGMT_ACTIVITY_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                 	nvarchar(200) NOT NULL,
	[IS_DISABLED]                 	bit NOT NULL CONSTRAINT [PRACTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]               	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NOT NULL CONSTRAINT [PRACTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [PRACTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [PRACTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [PRACTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [PRACTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACTY_PK] PRIMARY KEY CLUSTERED([PROP_MGMT_ACTIVITY_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the type of property management.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_TYPE', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the type of property management.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the type of property management.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_MANAGEMENT_ACTIVITY
PRINT N'Alter table dbo.PIMS_MANAGEMENT_ACTIVITY'
GO
EXEC dbo.sp_rename N'dbo.PIMS_MANAGEMENT_ACTIVITY.MANAGEMENT_ACTIVITY_ID' , N'PIMS_MANAGEMENT_ACTIVITY_ID', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY] DROP CONSTRAINT IF EXISTS [MGMTAC_MANAGEMENT_ACTIVITY_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY] ADD CONSTRAINT [MGMTAC_PIMS_MANAGEMENT_ACTIVITY_ID_DEF] DEFAULT (NEXT VALUE FOR [PIMS_MANAGEMENT_ACTIVITY_ID_SEQ]) FOR [PIMS_MANAGEMENT_ACTIVITY_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_MANAGEMENT_ACTIVITY.MGMT_ACTIVITY_STATUS_TYPE_CODE' , N'PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY] DROP CONSTRAINT IF EXISTS [MGMTAC_MGMT_ACTIVITY_STATUS_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY] ADD CONSTRAINT [MGMTAC_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_DEF] DEFAULT ('NOTSTARTED') FOR [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_MANAGEMENT_ACTIVITY.MGMT_ACTIVITY_TYPE_CODE' , N'PROP_MGMT_ACTIVITY_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY]
	ADD CONSTRAINT [MGMTAC_PK]
	PRIMARY KEY CLUSTERED ([PIMS_MANAGEMENT_ACTIVITY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_ACTIVITY_INVOICE
PRINT N'Create table dbo.PIMS_PROPERTY_ACTIVITY_INVOICE'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]  ( 
	[PROPERTY_ACTIVITY_INVOICE_ID]  	bigint NOT NULL CONSTRAINT [PRACIN_PROPERTY_ACTIVITY_INVOICE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_INVOICE_ID_SEQ]),
	[PIMS_MANAGEMENT_ACTIVITY_ID]   	bigint NOT NULL,
	[INVOICE_DT]                    	date NOT NULL CONSTRAINT [PRACIN_INVOICE_DT_DEF]  DEFAULT (getutcdate()),
	[INVOICE_NUM]                   	nvarchar(50) NULL,
	[DESCRIPTION]                   	nvarchar(1000) NULL CONSTRAINT [PRACIN_DESCRIPTION_DEF]  DEFAULT ('Unknown'),
	[PRETAX_AMT]                    	money NOT NULL,
	[GST_AMT]                       	money NULL,
	[PST_AMT]                       	money NULL,
	[TOTAL_AMT]                     	money NULL,
	[IS_PST_REQUIRED]               	bit NOT NULL CONSTRAINT [PRACIN_IS_PST_REQUIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_DISABLED]                   	bit NULL CONSTRAINT [PRACIN_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRACIN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACIN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACIN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACIN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACIN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACIN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACIN_PK] PRIMARY KEY CLUSTERED([PROPERTY_ACTIVITY_INVOICE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of the invoice' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'INVOICE_DT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Number assigned to the invoice.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'INVOICE_NUM'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the invoice.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Subtotal of the invoice,' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'PRETAX_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST on the invoice.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'GST_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'PST on the invoice.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'PST_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Total cost of the invoice.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'TOTAL_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the invoice requires PST.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'IS_PST_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the invoice is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the activities that are associated with this property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACTIVITY_INVOICE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT
PRINT N'Create table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]  ( 
	[PROPERTY_ACTIVITY_DOCUMENT_ID] 	bigint NOT NULL CONSTRAINT [PRACDO_PROPERTY_ACTIVITY_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_DOCUMENT_ID_SEQ]),
	[PIMS_MANAGEMENT_ACTIVITY_ID]   	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRACDO_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACDO_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACDO_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACDO_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACDO_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACDO_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACDO_PK] PRIMARY KEY CLUSTERED([PROPERTY_ACTIVITY_DOCUMENT_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_ACT_MIN_CONTACT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_ACT_MIN_CONTACT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_ACT_MIN_CONTACT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_ACT_MIN_CONTACT
PRINT N'Create table dbo.PIMS_PROP_ACT_MIN_CONTACT'
GO
CREATE TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]  ( 
	[PROP_ACT_MIN_CONTACT_ID]       	bigint NOT NULL CONSTRAINT [PRACMC_PROP_ACT_MIN_CONTACT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_ACT_MIN_CONTACT_ID_SEQ]),
	[PIMS_MANAGEMENT_ACTIVITY_ID]   	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRACMC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACMC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACMC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACMC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACMC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACMC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACMC_PK] PRIMARY KEY CLUSTERED([PROP_ACT_MIN_CONTACT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property management activity to a Ministry contact (many-to-many).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACT_MIN_CONTACT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_ACT_INVOLVED_PARTY_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_ACT_INVOLVED_PARTY_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_ACT_INVOLVED_PARTY
PRINT N'Create table dbo.PIMS_PROP_ACT_INVOLVED_PARTY'
GO
CREATE TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]  ( 
	[PROP_ACT_INVOLVED_PARTY_ID]    	bigint NOT NULL CONSTRAINT [PAINVP_PROP_ACT_INVOLVED_PARTY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_ACT_INVOLVED_PARTY_ID_SEQ]),
	[PIMS_MANAGEMENT_ACTIVITY_ID]   	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PAINVP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PAINVP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PAINVP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PAINVP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PAINVP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PAINVP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PAINVP_PK] PRIMARY KEY CLUSTERED([PROP_ACT_INVOLVED_PARTY_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property management activity to a vendor (many-to-many).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACT_INVOLVED_PARTY'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY
PRINT N'Alter table dbo.PIMS_PROPERTY'
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'UTILITY_RESPONSIBILITY_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'TAX_RESPONSIBILITY_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROPERTY]
	DROP COLUMN IF EXISTS [GLOBAL_UID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_MANAGEMENT_ACTIVITY_PROPERTY
PRINT N'Alter table dbo.PIMS_MANAGEMENT_ACTIVITY_PROPERTY'
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_ACTIVITY_PROPERTY', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_ACTIVITY_PROPERTY_ID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_ACTIVITY_PROPERTY', 
	@level2type = N'Column', @level2name = N'PROPERTY_ID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_ACTIVITY_PROPERTY', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_ACTIVITY_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_ACTIVITY_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_ACTIVITY_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_ACTIVITY_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_ACTIVITY_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_ACTIVITY_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_ACTIVITY_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_ACTIVITY_PROPERTY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_ACTIVITY_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_ACTIVITY_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_ACTIVITY_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_ACTIVITY_PROPERTY', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_MANAGEMENT_ACTIVITY_PROPERTY.MANAGEMENT_ACTIVITY_ID' , N'PIMS_MANAGEMENT_ACTIVITY_ID', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_dropextendedproperty 
	@name = N'MS_Description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_ACTIVITY_PROPERTY', 
	@level2type = N'Column', @level2name = N'PIMS_MANAGEMENT_ACTIVITY_ID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_ACTVTY_MGMT_ACTVTY_TYP_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_ACTVTY_MGMT_ACTVTY_TYP_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_ACTVTY_MGMT_ACTVTY_TYP_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_MGMT_ACTIVITY_SUBTYPE
PRINT N'Create table dbo.PIMS_PROP_MGMT_ACTIVITY_SUBTYPE'
GO
CREATE TABLE [dbo].[PIMS_PROP_MGMT_ACTIVITY_SUBTYPE]  ( 
	[PROP_MGMT_ACTIVITY_SUBTYPE_CODE]	nvarchar(20) NOT NULL,
	[PROP_MGMT_ACTIVITY_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[IS_DISABLED]                    	bit NOT NULL CONSTRAINT [PRACST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                  	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [PRACST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [PRACST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [PRACST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRACST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRACST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACST_PK] PRIMARY KEY CLUSTERED([PROP_MGMT_ACTIVITY_SUBTYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the subtype of property management.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_SUBTYPE', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_SUBTYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the type of property management.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_SUBTYPE', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the subtype of property management.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_SUBTYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_SUBTYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_SUBTYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the subtype of property management.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_MGMT_ACTIVITY_SUBTYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_ACTIVITY_MGMT_ACTIVITY
PRINT N'Create table dbo.PIMS_PROP_ACTIVITY_MGMT_ACTIVITY'
GO
CREATE TABLE [dbo].[PIMS_PROP_ACTIVITY_MGMT_ACTIVITY]  ( 
	[PROP_ACTVTY_MGMT_ACTVTY_TYP_ID] 	bigint NOT NULL CONSTRAINT [PACMAC_PROP_ACTVTY_MGMT_ACTVTY_TYP_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_ACTVTY_MGMT_ACTVTY_TYP_ID_SEQ]),
	[PIMS_MANAGEMENT_ACTIVITY_ID]    	bigint NOT NULL,
	[PROP_MGMT_ACTIVITY_SUBTYPE_CODE]	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [PACMAC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PACMAC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PACMAC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL CONSTRAINT [PACMAC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PACMAC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PACMAC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL CONSTRAINT [PACMAC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [PACMAC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NULL CONSTRAINT [PACMAC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PACMAC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PACMAC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PACMAC_PK] PRIMARY KEY CLUSTERED([PROP_ACTVTY_MGMT_ACTVTY_TYP_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY', 
	@level2type = N'Column', @level2name = N'PROP_ACTVTY_MGMT_ACTVTY_TYP_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_PROPERTY_ACTIVITY table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY', 
	@level2type = N'Column', @level2name = N'PIMS_MANAGEMENT_ACTIVITY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PROP_MGMT_ACTIVITY_SUBTYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY', 
	@level2type = N'Column', @level2name = N'PROP_MGMT_ACTIVITY_SUBTYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table contains the many-to-many relationship between the proeprty activity file and the associated property management activity type and subtype.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_ACTIVITY_MGMT_ACTIVITY'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PACMAC_UNIQUE_ACTIVITY_TUC
PRINT N'Create unique constraint dbo.PACMAC_UNIQUE_ACTIVITY_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACTIVITY_MGMT_ACTIVITY]
	ADD CONSTRAINT [PACMAC_UNIQUE_ACTIVITY_TUC]
	UNIQUE ([PIMS_MANAGEMENT_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROPERTY_ACTIVITY_INVOICE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROPERTY_ACTIVITY_INVOICE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_ACTIVITY_INVOICE_HIST
PRINT N'Create table dbo.PIMS_PROPERTY_ACTIVITY_INVOICE_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE_HIST]  ( 
	[_PROPERTY_ACTIVITY_INVOICE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_INVOICE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[PROPERTY_ACTIVITY_INVOICE_ID]      	bigint NOT NULL,
	[PIMS_MANAGEMENT_ACTIVITY_ID]       	bigint NOT NULL,
	[INVOICE_DT]                        	date NOT NULL,
	[INVOICE_NUM]                       	nvarchar(50) NULL,
	[DESCRIPTION]                       	nvarchar(1000) NULL,
	[PRETAX_AMT]                        	money NOT NULL,
	[GST_AMT]                           	money NULL,
	[PST_AMT]                           	money NULL,
	[TOTAL_AMT]                         	money NULL,
	[IS_PST_REQUIRED]                   	bit NOT NULL,
	[IS_DISABLED]                       	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRACIN_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_ACTIVITY_INVOICE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRACIN_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRACIN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE_HIST]
	ADD CONSTRAINT [PIMS_PRACIN_H_UK]
	UNIQUE ([_PROPERTY_ACTIVITY_INVOICE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_HIST]
	DROP COLUMN IF EXISTS [GLOBAL_UID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_HIST
PRINT N'Create table dbo.PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_HIST]  ( 
	[_PROP_ACTIVITY_MGMT_ACTIVITY_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                 	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                       	datetime NULL,
	[PROP_ACTVTY_MGMT_ACTVTY_TYP_ID]      	bigint NOT NULL,
	[PIMS_MANAGEMENT_ACTIVITY_ID]         	bigint NOT NULL,
	[PROP_MGMT_ACTIVITY_SUBTYPE_CODE]     	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]          	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[APP_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                 	datetime NOT NULL,
	[DB_CREATE_USERID]                    	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]               	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PACMAC_H_PK] PRIMARY KEY CLUSTERED([_PROP_ACTIVITY_MGMT_ACTIVITY_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PACMAC_H_UK
PRINT N'Create unique constraint dbo.PIMS_PACMAC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_HIST]
	ADD CONSTRAINT [PIMS_PACMAC_H_UK]
	UNIQUE ([_PROP_ACTIVITY_MGMT_ACTIVITY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_ACT_MIN_CONTACT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_ACT_MIN_CONTACT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_ACT_MIN_CONTACT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_ACT_MIN_CONTACT_HIST
PRINT N'Create table dbo.PIMS_PROP_ACT_MIN_CONTACT_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT_HIST]  ( 
	[_PROP_ACT_MIN_CONTACT_HIST_ID] 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROP_ACT_MIN_CONTACT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROP_ACT_MIN_CONTACT_ID]       	bigint NOT NULL,
	[PIMS_MANAGEMENT_ACTIVITY_ID]   	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRACMC_H_PK] PRIMARY KEY CLUSTERED([_PROP_ACT_MIN_CONTACT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRACMC_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRACMC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT_HIST]
	ADD CONSTRAINT [PIMS_PRACMC_H_UK]
	UNIQUE ([_PROP_ACT_MIN_CONTACT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST
PRINT N'Create table dbo.PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST]  ( 
	[_PROPERTY_ACTIVITY_DOCUMENT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACTIVITY_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[PROPERTY_ACTIVITY_DOCUMENT_ID]      	bigint NOT NULL,
	[PIMS_MANAGEMENT_ACTIVITY_ID]        	bigint NOT NULL,
	[DOCUMENT_ID]                        	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRACDO_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_ACTIVITY_DOCUMENT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRACDO_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRACDO_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_PRACDO_H_UK]
	UNIQUE ([_PROPERTY_ACTIVITY_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_ACT_INVOLVED_PARTY_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_ACT_INVOLVED_PARTY_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_ACT_INVOLVED_PARTY_HIST
PRINT N'Create table dbo.PIMS_PROP_ACT_INVOLVED_PARTY_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY_HIST]  ( 
	[_PROP_ACT_INVOLVED_PARTY_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROP_ACT_INVOLVED_PARTY_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]             	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                   	datetime NULL,
	[PROP_ACT_INVOLVED_PARTY_ID]      	bigint NOT NULL,
	[PIMS_MANAGEMENT_ACTIVITY_ID]     	bigint NOT NULL,
	[PERSON_ID]                       	bigint NULL,
	[ORGANIZATION_ID]                 	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PAINVP_H_PK] PRIMARY KEY CLUSTERED([_PROP_ACT_INVOLVED_PARTY_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PAINVP_H_UK
PRINT N'Create unique constraint dbo.PIMS_PAINVP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY_HIST]
	ADD CONSTRAINT [PIMS_PAINVP_H_UK]
	UNIQUE ([_PROP_ACT_INVOLVED_PARTY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_MANAGEMENT_ACTIVITY_PROPERTY_HIST
PRINT N'Alter table dbo.PIMS_MANAGEMENT_ACTIVITY_PROPERTY_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_MANAGEMENT_ACTIVITY_PROPERTY_HIST.MANAGEMENT_ACTIVITY_ID' , N'PIMS_MANAGEMENT_ACTIVITY_ID', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_MANAGEMENT_ACTIVITY_HIST
PRINT N'Alter table dbo.PIMS_MANAGEMENT_ACTIVITY_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_MANAGEMENT_ACTIVITY_HIST.MANAGEMENT_ACTIVITY_ID' , N'PIMS_MANAGEMENT_ACTIVITY_ID', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_MANAGEMENT_ACTIVITY_HIST.MGMT_ACTIVITY_STATUS_TYPE_CODE' , N'PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'dbo.PIMS_MANAGEMENT_ACTIVITY_HIST.MGMT_ACTIVITY_TYPE_CODE' , N'PROP_MGMT_ACTIVITY_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.ACQNFL_SUBFILE_INTEREST_TYPEROP_CODE_TCC
PRINT N'Create check constraint dbo.ACQNFL_SUBFILE_INTEREST_TYPEROP_CODE_TCC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [ACQNFL_SUBFILE_INTEREST_TYPEROP_CODE_TCC] CHECK ([PRNT_ACQUISITION_FILE_ID] IS NOT NULL AND [SUBFILE_INTEREST_TYPE_CODE] IS NOT NULL OR [PRNT_ACQUISITION_FILE_ID] IS NULL AND [SUBFILE_INTEREST_TYPE_CODE] IS NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_VW
PRINT N'Create view dbo.PIMS_PROPERTY_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID   
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TNUR.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE TNUR INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYP TNTY ON TNTY.PROPERTY_TENURE_TYPE_CODE = TNUR.PROPERTY_TENURE_TYPE_CODE
                                                     AND TNTY.PROPERTY_ID               = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY
     , PROP.BOUNDARY AS LOCATION
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.SURVEY_PLAN_NUMBER
     , PROP.IS_OWNED
     , PROP.IS_RETIRED    
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_DISPOSITION_FILE_PROPERTY DFPR JOIN
                          PIMS_DISPOSITION_FILE          DISP   ON DISP.DISPOSITION_FILE_ID = DFPR.DISPOSITION_FILE_ID
                                                               AND DFPR.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  DISP.DISPOSITION_FILE_STATUS_TYPE_CODE = N'COMPLETE'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_DISPOSED 
     , CASE
         WHEN EXISTS (SELECT 1    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID            
                      WHERE  TAKE.IS_NEW_LAND_ACT       = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE = 'COMPLETE'                                                                                                                              
                         AND TAKE.LAND_ACT_TYPE_CODE   IN (N'Section 15', N'Section 16', N'Section 17', N'Section 66', N'NOI')) THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_INTEREST_IN_SRW = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE  = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  TAKE.IS_NEW_LICENSE_TO_CONSTRUCT = 1
                         AND TAKE.TAKE_STATUS_TYPE_CODE       = N'COMPLETE') THEN CONVERT([bit],(1))
         WHEN EXISTS (SELECT 1                                                                                                                                    
                      FROM   PIMS_TAKE                      TAKE JOIN
                             PIMS_PROPERTY_ACQUISITION_FILE PRAF   ON PRAF.PROPERTY_ACQUISITION_FILE_ID = TAKE.PROPERTY_ACQUISITION_FILE_ID    
                                                                  AND PRAF.PROPERTY_ID                  = PROP.PROPERTY_ID
                      WHERE  IS_ACTIVE_LEASE       = 1                        
                         AND TAKE_STATUS_TYPE_CODE = N'COMPLETE') THEN CONVERT([bit],(1))
         ELSE CONVERT([bit],(0))
         END AS IS_OTHER_INTEREST                                                                 
     , IIF(EXISTS (SELECT 1                        
                   FROM   PIMS_PROPERTY_ACQUISITION_FILE PRAF JOIN
                          PIMS_ACQUISITION_FILE          ACQF   ON ACQF.ACQUISITION_FILE_ID = PRAF.ACQUISITION_FILE_ID
                                                               AND PRAF.PROPERTY_ID         = PROP.PROPERTY_ID
                   WHERE  ACQF.ACQUISITION_FILE_STATUS_TYPE_CODE IN (N'DRAFT', N'ACTIVE')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS HAS_ACTIVE_ACQUISITION_FILE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_RESEARCH_FILE PRSF JOIN
                          PIMS_RESEARCH_FILE          RSHF   ON RSHF.RESEARCH_FILE_ID = PRSF.RESEARCH_FILE_ID
                                                            AND PRSF.PROPERTY_ID      = PROP.PROPERTY_ID
                   WHERE  RSHF.RESEARCH_FILE_STATUS_TYPE_CODE = N'ACTIVE'), CONVERT([bit],(1)), CONVERT([bit],(0)))  AS HAS_ACTIVE_RESEARCH_FILE                                                              
     , IIF(EXISTS (SELECT 1                                            
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN (N'PYBLMOTI', N'PYBLBCTFA')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_PAYABLE_LEASE   
     , IIF(EXISTS (SELECT 1                                                                                                            
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN (N'PYBLMOTI', N'PYBLBCTFA')
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE          ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL  ) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_RECEIVABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_PERIOD   TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE          ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE   AND LEAS.ORIG_EXPIRY_DATE IS NULL  ) OR
                           (getutcdate() BETWEEN TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.PERIOD_START_DATE AND TERM.PERIOD_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_RECEIVABLE_LEASE                 
     , FNVW.HISTORICAL_FILE_NUMBER_STR
FROM   PIMS_PROPERTY                  PROP                                                    LEFT OUTER JOIN  
       PIMS_HISTORICAL_FILE_NUMBER_VW FNVW ON FNVW.PROPERTY_ID       = PROP.PROPERTY_ID       LEFT OUTER JOIN
       PIMS_ADDRESS                   ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE            PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY                   CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACIN_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]([PIMS_MANAGEMENT_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACDO_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]([PIMS_MANAGEMENT_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACMC_PERSON_ID_IDX
PRINT N'Create index dbo.PRACMC_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACMC_PERSON_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_MIN_CONTACT]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_SERVICE_PROVIDER_ORG_ID_IDX
PRINT N'Create index dbo.PRPACT_SERVICE_PROVIDER_ORG_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_SERVICE_PROVIDER_ORG_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_ACTIVITY]([SERVICE_PROVIDER_ORG_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PAINVP_ORGANIZATION_ID_IDX
PRINT N'Create index dbo.PAINVP_ORGANIZATION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PAINVP_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]([ORGANIZATION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRAC_PROPERTY_ID_IDX
PRINT N'Create index dbo.PRPRAC_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRAC_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX
PRINT N'Create index dbo.PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_SERVICE_PROVIDER_PERSON_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_ACTIVITY]([SERVICE_PROVIDER_PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PAINVP_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]([PIMS_MANAGEMENT_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACDO_DOCUMENT_ID_IDX
PRINT N'Create index dbo.PRACDO_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACDO_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACMC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_MIN_CONTACT]([PIMS_MANAGEMENT_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PACMAC_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_IDX
PRINT N'Create index dbo.PACMAC_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PACMAC_PROP_MGMT_ACTIVITY_SUBTYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_ACTIVITY_MGMT_ACTIVITY]([PROP_MGMT_ACTIVITY_SUBTYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRACST_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX
PRINT N'Create index dbo.PRACST_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRACST_PROP_MGMT_ACTIVITY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_MGMT_ACTIVITY_SUBTYPE]([PROP_MGMT_ACTIVITY_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPACT_PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_MANAGEMENT_ACTIVITY]([PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRAC_PIMS_PROPERTY_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY]([PIMS_MANAGEMENT_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PAINVP_PERSON_ID_IDX
PRINT N'Create index dbo.PAINVP_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PAINVP_PERSON_ID_IDX]
	ON [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PACMAC_PIMS_MANAGEMENT_ACTIVITY_ID_IDX
PRINT N'Create index dbo.PACMAC_PIMS_MANAGEMENT_ACTIVITY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PACMAC_PIMS_MANAGEMENT_ACTIVITY_ID_IDX]
	ON [dbo].[PIMS_PROP_ACTIVITY_MGMT_ACTIVITY]([PIMS_MANAGEMENT_ACTIVITY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PACMAC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PACMAC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PACMAC_I_S_I_TR] ON PIMS_PROP_ACTIVITY_MGMT_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_ACTIVITY_MGMT_ACTIVITY ("PROP_ACTVTY_MGMT_ACTVTY_TYP_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_ACTVTY_MGMT_ACTVTY_TYP_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACST_I_S_I_TR] ON PIMS_PROP_MGMT_ACTIVITY_SUBTYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_MGMT_ACTIVITY_SUBTYPE ("PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_I_TR] ON PIMS_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY ("PROPERTY_ID",
      "PROPERTY_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "UTILITY_RESPONSIBILITY_TYPE_CODE",
      "TAX_RESPONSIBILITY_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_RETIRED",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE",
      "BAND_NAME",
      "RESERVE_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ID",
      "PROPERTY_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "UTILITY_RESPONSIBILITY_TYPE_CODE",
      "TAX_RESPONSIBILITY_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_RETIRED",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE",
      "BAND_NAME",
      "RESERVE_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMTAC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_MGMTAC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMTAC_I_S_I_TR] ON PIMS_MANAGEMENT_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_MANAGEMENT_ACTIVITY ("PIMS_MANAGEMENT_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID",
      "MANAGEMENT_FILE_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "REQUEST_ADDED_DT",
      "COMPLETION_DT",
      "DESCRIPTION",
      "REQUEST_SOURCE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PIMS_MANAGEMENT_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID",
      "MANAGEMENT_FILE_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "REQUEST_ADDED_DT",
      "COMPLETION_DT",
      "DESCRIPTION",
      "REQUEST_SOURCE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACTY_I_S_I_TR] ON PIMS_PROP_MGMT_ACTIVITY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_MGMT_ACTIVITY_TYPE ("PROP_MGMT_ACTIVITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROP_MGMT_ACTIVITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACDO_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACDO_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACDO_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY_DOCUMENT ("PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACIN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACIN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACIN_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY_INVOICE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACTIVITY_INVOICE_ID = deleted.PROPERTY_ACTIVITY_INVOICE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY_INVOICE
    set "PROPERTY_ACTIVITY_INVOICE_ID" = inserted."PROPERTY_ACTIVITY_INVOICE_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID" = inserted."PIMS_MANAGEMENT_ACTIVITY_ID",
      "INVOICE_DT" = inserted."INVOICE_DT",
      "INVOICE_NUM" = inserted."INVOICE_NUM",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "GST_AMT" = inserted."GST_AMT",
      "PST_AMT" = inserted."PST_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "IS_PST_REQUIRED" = inserted."IS_PST_REQUIRED",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY_INVOICE
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY_INVOICE.PROPERTY_ACTIVITY_INVOICE_ID = inserted.PROPERTY_ACTIVITY_INVOICE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACST_I_S_U_TR] ON PIMS_PROP_MGMT_ACTIVITY_SUBTYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_MGMT_ACTIVITY_SUBTYPE_CODE = deleted.PROP_MGMT_ACTIVITY_SUBTYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_MGMT_ACTIVITY_SUBTYPE
    set "PROP_MGMT_ACTIVITY_SUBTYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "PROP_MGMT_ACTIVITY_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_MGMT_ACTIVITY_SUBTYPE
    inner join inserted
    on (PIMS_PROP_MGMT_ACTIVITY_SUBTYPE.PROP_MGMT_ACTIVITY_SUBTYPE_CODE = inserted.PROP_MGMT_ACTIVITY_SUBTYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PACMAC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PACMAC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PACMAC_I_S_U_TR] ON PIMS_PROP_ACTIVITY_MGMT_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_ACTVTY_MGMT_ACTVTY_TYP_ID = deleted.PROP_ACTVTY_MGMT_ACTVTY_TYP_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_ACTIVITY_MGMT_ACTIVITY
    set "PROP_ACTVTY_MGMT_ACTVTY_TYP_ID" = inserted."PROP_ACTVTY_MGMT_ACTVTY_TYP_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID" = inserted."PIMS_MANAGEMENT_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_SUBTYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_SUBTYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_ACTIVITY_MGMT_ACTIVITY
    inner join inserted
    on (PIMS_PROP_ACTIVITY_MGMT_ACTIVITY.PROP_ACTVTY_MGMT_ACTVTY_TYP_ID = inserted.PROP_ACTVTY_MGMT_ACTVTY_TYP_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACTY_I_S_U_TR] ON PIMS_PROP_MGMT_ACTIVITY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_MGMT_ACTIVITY_TYPE_CODE = deleted.PROP_MGMT_ACTIVITY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_MGMT_ACTIVITY_TYPE
    set "PROP_MGMT_ACTIVITY_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_MGMT_ACTIVITY_TYPE
    inner join inserted
    on (PIMS_PROP_MGMT_ACTIVITY_TYPE.PROP_MGMT_ACTIVITY_TYPE_CODE = inserted.PROP_MGMT_ACTIVITY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACIN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRACIN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACIN_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY_INVOICE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_INVOICE_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACTIVITY_INVOICE_ID in (select PROPERTY_ACTIVITY_INVOICE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_INVOICE_HIST ([PROPERTY_ACTIVITY_INVOICE_ID], [PIMS_MANAGEMENT_ACTIVITY_ID], [INVOICE_DT], [INVOICE_NUM], [DESCRIPTION], [PRETAX_AMT], [GST_AMT], [PST_AMT], [TOTAL_AMT], [IS_PST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_INVOICE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACTIVITY_INVOICE_ID], [PIMS_MANAGEMENT_ACTIVITY_ID], [INVOICE_DT], [INVOICE_NUM], [DESCRIPTION], [PRETAX_AMT], [GST_AMT], [PST_AMT], [TOTAL_AMT], [IS_PST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_INVOICE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACDO_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACDO_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACDO_I_S_U_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACTIVITY_DOCUMENT_ID = deleted.PROPERTY_ACTIVITY_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACTIVITY_DOCUMENT
    set "PROPERTY_ACTIVITY_DOCUMENT_ID" = inserted."PROPERTY_ACTIVITY_DOCUMENT_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID" = inserted."PIMS_MANAGEMENT_ACTIVITY_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACTIVITY_DOCUMENT
    inner join inserted
    on (PIMS_PROPERTY_ACTIVITY_DOCUMENT.PROPERTY_ACTIVITY_DOCUMENT_ID = inserted.PROPERTY_ACTIVITY_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PAINVP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PAINVP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PAINVP_I_S_I_TR] ON PIMS_PROP_ACT_INVOLVED_PARTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_ACT_INVOLVED_PARTY ("PROP_ACT_INVOLVED_PARTY_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_ACT_INVOLVED_PARTY_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_U_TR] ON PIMS_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ID = deleted.PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY
    set "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE" = inserted."PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE" = inserted."PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE" = inserted."SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE" = inserted."VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE" = inserted."VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE" = inserted."PPH_STATUS_TYPE_CODE",
      "UTILITY_RESPONSIBILITY_TYPE_CODE" = inserted."UTILITY_RESPONSIBILITY_TYPE_CODE",
      "TAX_RESPONSIBILITY_TYPE_CODE" = inserted."TAX_RESPONSIBILITY_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE" = inserted."PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "PID" = inserted."PID",
      "PIN" = inserted."PIN",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "FILE_NUMBER_SUFFIX" = inserted."FILE_NUMBER_SUFFIX",
      "LAND_AREA" = inserted."LAND_AREA",
      "LAND_LEGAL_DESCRIPTION" = inserted."LAND_LEGAL_DESCRIPTION",
      "BOUNDARY" = inserted."BOUNDARY",
      "LOCATION" = inserted."LOCATION",
      "GENERAL_LOCATION" = inserted."GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER" = inserted."SURVEY_PLAN_NUMBER",
      "SURPLUS_DECLARATION_COMMENT" = inserted."SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE" = inserted."SURPLUS_DECLARATION_DATE",
      "MUNICIPAL_ZONING" = inserted."MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL" = inserted."IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT" = inserted."VOLUMETRIC_MEASUREMENT",
      "IS_OWNED" = inserted."IS_OWNED",
      "IS_RETIRED" = inserted."IS_RETIRED",
      "PPH_STATUS_UPDATE_USERID" = inserted."PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP" = inserted."PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID" = inserted."PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT" = inserted."IS_RWY_BELT_DOM_PATENT",
      "ADDITIONAL_DETAILS" = inserted."ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE" = inserted."IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE" = inserted."IS_TAXES_PAYABLE",
      "BAND_NAME" = inserted."BAND_NAME",
      "RESERVE_NAME" = inserted."RESERVE_NAME",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY
    inner join inserted
    on (PIMS_PROPERTY.PROPERTY_ID = inserted.PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACMC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACMC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACMC_I_S_I_TR] ON PIMS_PROP_ACT_MIN_CONTACT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_ACT_MIN_CONTACT ("PROP_ACT_MIN_CONTACT_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID",
      "PERSON_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_ACT_MIN_CONTACT_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID",
      "PERSON_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_A_S_IUD_TR] ON PIMS_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_HIST set END_DATE_HIST = @curr_date where PROPERTY_ID in (select PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_HIST ([PROPERTY_ID], [PROPERTY_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [UTILITY_RESPONSIBILITY_TYPE_CODE], [TAX_RESPONSIBILITY_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [LAND_LEGAL_DESCRIPTION], [GENERAL_LOCATION], [SURVEY_PLAN_NUMBER], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_RETIRED], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ADDITIONAL_DETAILS], [IS_UTILITIES_PAYABLE], [IS_TAXES_PAYABLE], [BAND_NAME], [RESERVE_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ID], [PROPERTY_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [UTILITY_RESPONSIBILITY_TYPE_CODE], [TAX_RESPONSIBILITY_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [LAND_LEGAL_DESCRIPTION], [GENERAL_LOCATION], [SURVEY_PLAN_NUMBER], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_RETIRED], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ADDITIONAL_DETAILS], [IS_UTILITIES_PAYABLE], [IS_TAXES_PAYABLE], [BAND_NAME], [RESERVE_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_H_ID_SEQ]) as [_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PACSTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PACSTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PACSTY_I_S_U_TR] ON PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE = deleted.PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE
    set "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE
    inner join inserted
    on (PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE.PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE = inserted.PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACIN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRACIN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACIN_I_S_I_TR] ON PIMS_PROPERTY_ACTIVITY_INVOICE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACTIVITY_INVOICE ("PROPERTY_ACTIVITY_INVOICE_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID",
      "INVOICE_DT",
      "INVOICE_NUM",
      "DESCRIPTION",
      "PRETAX_AMT",
      "GST_AMT",
      "PST_AMT",
      "TOTAL_AMT",
      "IS_PST_REQUIRED",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACTIVITY_INVOICE_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID",
      "INVOICE_DT",
      "INVOICE_NUM",
      "DESCRIPTION",
      "PRETAX_AMT",
      "GST_AMT",
      "PST_AMT",
      "TOTAL_AMT",
      "IS_PST_REQUIRED",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACMC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRACMC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACMC_I_S_U_TR] ON PIMS_PROP_ACT_MIN_CONTACT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_ACT_MIN_CONTACT_ID = deleted.PROP_ACT_MIN_CONTACT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_ACT_MIN_CONTACT
    set "PROP_ACT_MIN_CONTACT_ID" = inserted."PROP_ACT_MIN_CONTACT_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID" = inserted."PIMS_MANAGEMENT_ACTIVITY_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_ACT_MIN_CONTACT
    inner join inserted
    on (PIMS_PROP_ACT_MIN_CONTACT.PROP_ACT_MIN_CONTACT_ID = inserted.PROP_ACT_MIN_CONTACT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PACMAC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PACMAC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PACMAC_A_S_IUD_TR] ON PIMS_PROP_ACTIVITY_MGMT_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_HIST set END_DATE_HIST = @curr_date where PROP_ACTVTY_MGMT_ACTVTY_TYP_ID in (select PROP_ACTVTY_MGMT_ACTVTY_TYP_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_HIST ([PROP_ACTVTY_MGMT_ACTVTY_TYP_ID], [PIMS_MANAGEMENT_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_ACTIVITY_MGMT_ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_ACTVTY_MGMT_ACTVTY_TYP_ID], [PIMS_MANAGEMENT_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_SUBTYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_ACTIVITY_MGMT_ACTIVITY_H_ID_SEQ]) as [_PROP_ACTIVITY_MGMT_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MAACPR_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_MAACPR_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MAACPR_I_S_U_TR] ON PIMS_MANAGEMENT_ACTIVITY_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.MANAGEMENT_ACTIVITY_PROPERTY_ID = deleted.MANAGEMENT_ACTIVITY_PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_MANAGEMENT_ACTIVITY_PROPERTY
    set "MANAGEMENT_ACTIVITY_PROPERTY_ID" = inserted."MANAGEMENT_ACTIVITY_PROPERTY_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID" = inserted."PIMS_MANAGEMENT_ACTIVITY_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_MANAGEMENT_ACTIVITY_PROPERTY
    inner join inserted
    on (PIMS_MANAGEMENT_ACTIVITY_PROPERTY.MANAGEMENT_ACTIVITY_PROPERTY_ID = inserted.MANAGEMENT_ACTIVITY_PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACMC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRACMC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACMC_A_S_IUD_TR] ON PIMS_PROP_ACT_MIN_CONTACT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_ACT_MIN_CONTACT_HIST set END_DATE_HIST = @curr_date where PROP_ACT_MIN_CONTACT_ID in (select PROP_ACT_MIN_CONTACT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_ACT_MIN_CONTACT_HIST ([PROP_ACT_MIN_CONTACT_ID], [PIMS_MANAGEMENT_ACTIVITY_ID], [PERSON_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_ACT_MIN_CONTACT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_ACT_MIN_CONTACT_ID], [PIMS_MANAGEMENT_ACTIVITY_ID], [PERSON_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_ACT_MIN_CONTACT_H_ID_SEQ]) as [_PROP_ACT_MIN_CONTACT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRACDO_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRACDO_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRACDO_A_S_IUD_TR] ON PIMS_PROPERTY_ACTIVITY_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACTIVITY_DOCUMENT_ID in (select PROPERTY_ACTIVITY_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACTIVITY_DOCUMENT_HIST ([PROPERTY_ACTIVITY_DOCUMENT_ID], [PIMS_MANAGEMENT_ACTIVITY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACTIVITY_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACTIVITY_DOCUMENT_ID], [PIMS_MANAGEMENT_ACTIVITY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT_H_ID_SEQ]) as [_PROPERTY_ACTIVITY_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PAINVP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PAINVP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PAINVP_A_S_IUD_TR] ON PIMS_PROP_ACT_INVOLVED_PARTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_ACT_INVOLVED_PARTY_HIST set END_DATE_HIST = @curr_date where PROP_ACT_INVOLVED_PARTY_ID in (select PROP_ACT_INVOLVED_PARTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_ACT_INVOLVED_PARTY_HIST ([PROP_ACT_INVOLVED_PARTY_ID], [PIMS_MANAGEMENT_ACTIVITY_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_ACT_INVOLVED_PARTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_ACT_INVOLVED_PARTY_ID], [PIMS_MANAGEMENT_ACTIVITY_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY_H_ID_SEQ]) as [_PROP_ACT_INVOLVED_PARTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PAINVP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PAINVP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PAINVP_I_S_U_TR] ON PIMS_PROP_ACT_INVOLVED_PARTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_ACT_INVOLVED_PARTY_ID = deleted.PROP_ACT_INVOLVED_PARTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_ACT_INVOLVED_PARTY
    set "PROP_ACT_INVOLVED_PARTY_ID" = inserted."PROP_ACT_INVOLVED_PARTY_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID" = inserted."PIMS_MANAGEMENT_ACTIVITY_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_ACT_INVOLVED_PARTY
    inner join inserted
    on (PIMS_PROP_ACT_INVOLVED_PARTY.PROP_ACT_INVOLVED_PARTY_ID = inserted.PROP_ACT_INVOLVED_PARTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PACSTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PACSTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PACSTY_I_S_I_TR] ON PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_MGMT_ACTIVITY_STATUS_TYPE ("PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MAACPR_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_MAACPR_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MAACPR_A_S_IUD_TR] ON PIMS_MANAGEMENT_ACTIVITY_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_MANAGEMENT_ACTIVITY_PROPERTY_HIST set END_DATE_HIST = @curr_date where MANAGEMENT_ACTIVITY_PROPERTY_ID in (select MANAGEMENT_ACTIVITY_PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_MANAGEMENT_ACTIVITY_PROPERTY_HIST ([MANAGEMENT_ACTIVITY_PROPERTY_ID], [PROPERTY_ID], [PIMS_MANAGEMENT_ACTIVITY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _MANAGEMENT_ACTIVITY_PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [MANAGEMENT_ACTIVITY_PROPERTY_ID], [PROPERTY_ID], [PIMS_MANAGEMENT_ACTIVITY_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY_H_ID_SEQ]) as [_MANAGEMENT_ACTIVITY_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMTAC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_MGMTAC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMTAC_A_S_IUD_TR] ON PIMS_MANAGEMENT_ACTIVITY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_MANAGEMENT_ACTIVITY_HIST set END_DATE_HIST = @curr_date where PIMS_MANAGEMENT_ACTIVITY_ID in (select PIMS_MANAGEMENT_ACTIVITY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_MANAGEMENT_ACTIVITY_HIST ([PIMS_MANAGEMENT_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE], [SERVICE_PROVIDER_PERSON_ID], [SERVICE_PROVIDER_ORG_ID], [REQUEST_ADDED_DT], [COMPLETION_DT], [DESCRIPTION], [REQUEST_SOURCE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _MANAGEMENT_ACTIVITY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PIMS_MANAGEMENT_ACTIVITY_ID], [PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE], [SERVICE_PROVIDER_PERSON_ID], [SERVICE_PROVIDER_ORG_ID], [REQUEST_ADDED_DT], [COMPLETION_DT], SUBSTRING([DESCRIPTION], 1, 4000), [REQUEST_SOURCE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_MANAGEMENT_ACTIVITY_H_ID_SEQ]) as [_MANAGEMENT_ACTIVITY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MAACPR_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_MAACPR_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MAACPR_I_S_I_TR] ON PIMS_MANAGEMENT_ACTIVITY_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_MANAGEMENT_ACTIVITY_PROPERTY ("MANAGEMENT_ACTIVITY_PROPERTY_ID",
      "PROPERTY_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "MANAGEMENT_ACTIVITY_PROPERTY_ID",
      "PROPERTY_ID",
      "PIMS_MANAGEMENT_ACTIVITY_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMTAC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_MGMTAC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMTAC_I_S_U_TR] ON PIMS_MANAGEMENT_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PIMS_MANAGEMENT_ACTIVITY_ID = deleted.PIMS_MANAGEMENT_ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_MANAGEMENT_ACTIVITY
    set "PIMS_MANAGEMENT_ACTIVITY_ID" = inserted."PIMS_MANAGEMENT_ACTIVITY_ID",
      "PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID" = inserted."SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID" = inserted."SERVICE_PROVIDER_ORG_ID",
      "MANAGEMENT_FILE_ID" = inserted."MANAGEMENT_FILE_ID",
      "PROP_MGMT_ACTIVITY_TYPE_CODE" = inserted."PROP_MGMT_ACTIVITY_TYPE_CODE",
      "REQUEST_ADDED_DT" = inserted."REQUEST_ADDED_DT",
      "COMPLETION_DT" = inserted."COMPLETION_DT",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "REQUEST_SOURCE" = inserted."REQUEST_SOURCE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_MANAGEMENT_ACTIVITY
    inner join inserted
    on (PIMS_MANAGEMENT_ACTIVITY.PIMS_MANAGEMENT_ACTIVITY_ID = inserted.PIMS_MANAGEMENT_ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY]
	ADD CONSTRAINT [PIM_ORG_PIM_PRPACT_FK]
	FOREIGN KEY([SERVICE_PROVIDER_ORG_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_PRPACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRPACT_FK]
	FOREIGN KEY([SERVICE_PROVIDER_PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACIN_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_INVOICE]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRACIN_FK]
	FOREIGN KEY([PIMS_MANAGEMENT_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_MANAGEMENT_ACTIVITY]([PIMS_MANAGEMENT_ACTIVITY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_PRACDO_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_PRACDO_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_PRACDO_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACDO_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACDO_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_DOCUMENT]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRACDO_FK]
	FOREIGN KEY([PIMS_MANAGEMENT_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_MANAGEMENT_ACTIVITY]([PIMS_MANAGEMENT_ACTIVITY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACMC_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PRACMC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRACMC_FK]
	FOREIGN KEY([PIMS_MANAGEMENT_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_MANAGEMENT_ACTIVITY]([PIMS_MANAGEMENT_ACTIVITY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_PRACMC_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_PRACMC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_MIN_CONTACT]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRACMC_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_PAINVP_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_PAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	ADD CONSTRAINT [PIM_ORG_PIM_PAINVP_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PAINVP_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PAINVP_FK]
	FOREIGN KEY([PIMS_MANAGEMENT_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_MANAGEMENT_ACTIVITY]([PIMS_MANAGEMENT_ACTIVITY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_PAINVP_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_PAINVP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACT_INVOLVED_PARTY]
	ADD CONSTRAINT [PIM_PERSON_PIM_PAINVP_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPACT_PIM_PRPRAC_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPACT_PIM_PRPRAC_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY_PROPERTY]
	ADD CONSTRAINT [PIM_PRPACT_PIM_PRPRAC_FK]
	FOREIGN KEY([PIMS_MANAGEMENT_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_MANAGEMENT_ACTIVITY]([PIMS_MANAGEMENT_ACTIVITY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRACTY_PIM_PRACST_FK
PRINT N'Create foreign key constraint dbo.PIM_PRACTY_PIM_PRACST_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_MGMT_ACTIVITY_SUBTYPE]
	ADD CONSTRAINT [PIM_PRACTY_PIM_PRACST_FK]
	FOREIGN KEY([PROP_MGMT_ACTIVITY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_MGMT_ACTIVITY_TYPE]([PROP_MGMT_ACTIVITY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_MGMTAC_PIM_PACMAC_FK
PRINT N'Create foreign key constraint dbo.PIM_MGMTAC_PIM_PACMAC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACTIVITY_MGMT_ACTIVITY]
	ADD CONSTRAINT [PIM_MGMTAC_PIM_PACMAC_FK]
	FOREIGN KEY([PIMS_MANAGEMENT_ACTIVITY_ID])
	REFERENCES [dbo].[PIMS_MANAGEMENT_ACTIVITY]([PIMS_MANAGEMENT_ACTIVITY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRACST_PIM_PACMAC_FK
PRINT N'Create foreign key constraint dbo.PIM_PRACST_PIM_PACMAC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_ACTIVITY_MGMT_ACTIVITY]
	ADD CONSTRAINT [PIM_PRACST_PIM_PACMAC_FK]
	FOREIGN KEY([PROP_MGMT_ACTIVITY_SUBTYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_MGMT_ACTIVITY_SUBTYPE]([PROP_MGMT_ACTIVITY_SUBTYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MGMT_ACTIVITY_DOCUMENT_HIST
PRINT N'Drop table dbo.PIMS_MGMT_ACTIVITY_DOCUMENT_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MGMT_ACTIVITY_DOCUMENT_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_MGMT_ACTIVITY_DOCUMENT_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_MGMT_ACTIVITY_DOCUMENT_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_MGMT_ACTIVITY_DOCUMENT_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_MGMT_ACTIVITY_DOCUMENT_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_MGMT_ACTIVITY_DOCUMENT_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_MGMT_ACTIVITY_DOCUMENT_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP_HIST
PRINT N'Drop table dbo.PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MGMT_ACTIVITY_SUBTYPE
PRINT N'Drop table dbo.PIMS_MGMT_ACTIVITY_SUBTYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MGMT_ACTIVITY_SUBTYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_MGMT_ACTIVITY_ACTIVITY_SUBTYP_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MGMT_ACT_MIN_CONTACT_HIST
PRINT N'Drop table dbo.PIMS_MGMT_ACT_MIN_CONTACT_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MGMT_ACT_MIN_CONTACT_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_MGMT_ACT_MIN_CONTACT_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_MGMT_ACT_MIN_CONTACT_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_MGMT_ACT_MIN_CONTACT_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_MGMT_ACT_MIN_CONTACT_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_MGMT_ACT_MIN_CONTACT_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_MGMT_ACT_MIN_CONTACT_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MGMT_ACT_INVOLVED_PARTY_HIST
PRINT N'Drop table dbo.PIMS_MGMT_ACT_INVOLVED_PARTY_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MGMT_ACT_INVOLVED_PARTY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_MGMT_ACT_INVOLVED_PARTY_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_MGMT_ACT_INVOLVED_PARTY_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_MGMT_ACT_INVOLVED_PARTY_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_MGMT_ACT_INVOLVED_PARTY_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_MGMT_ACT_INVOLVED_PARTY_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_MGMT_ACT_INVOLVED_PARTY_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MANAGEMENT_ACTIVITY_INVOICE_HIST
PRINT N'Drop table dbo.PIMS_MANAGEMENT_ACTIVITY_INVOICE_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY_INVOICE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_MANAGEMENT_ACTIVITY_INVOICE_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_MANAGEMENT_ACTIVITY_INVOICE_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY_INVOICE_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_MANAGEMENT_ACTIVITY_INVOICE_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_MANAGEMENT_ACTIVITY_INVOICE_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_MANAGEMENT_ACTIVITY_INVOICE_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MGMT_ACTIVITY_TYPE
PRINT N'Drop table dbo.PIMS_MGMT_ACTIVITY_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MGMT_ACTIVITY_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MGMT_ACTIVITY_STATUS_TYPE
PRINT N'Drop table dbo.PIMS_MGMT_ACTIVITY_STATUS_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MGMT_ACTIVITY_STATUS_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
