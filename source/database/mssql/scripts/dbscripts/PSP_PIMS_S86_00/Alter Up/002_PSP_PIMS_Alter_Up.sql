-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Mon Jul 29 16:08:59 PDT 2024
-- Execute this script on:
-- 		PSP_PIMS_S85.00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S86.00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPREQ_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CMPREQ_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPREQ_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_RFLNOT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_RFLNOT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_RFLNOT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LEASE_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPREQ_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_CMPREQ_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPREQ_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPREQ_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_CMPREQ_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPREQ_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_TENANT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_TENANT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_PRIMARY_CONTACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_PRIMARY_CONTACT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_PRIMARY_CONTACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_TENANT_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_TENANT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSSRTY_PIM_TENANT_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSSRTY_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	DROP CONSTRAINT IF EXISTS [PIM_LSSRTY_PIM_TENANT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_TENANT_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	DROP CONSTRAINT IF EXISTS [PIM_LEASE_PIM_TENANT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_TENTYP_PIM_TENANT_FK
PRINT N'Drop foreign key constraint dbo.PIM_TENTYP_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	DROP CONSTRAINT IF EXISTS [PIM_TENTYP_PIM_TENANT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TENANT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TENANT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TENANT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TENANT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TENANT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TENANT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TENANT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_TENANT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TENANT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TENANT_TENANT_TYPE_CODE_IDX
PRINT N'Drop index dbo.TENANT_TENANT_TYPE_CODE_IDX'
GO
DROP INDEX [dbo].[PIMS_LEASE_TENANT].[TENANT_TENANT_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TENANT_PRIMARY_CONTACT_ID_IDX
PRINT N'Drop index dbo.TENANT_PRIMARY_CONTACT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_TENANT].[TENANT_PRIMARY_CONTACT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TENANT_PERSON_ID_IDX
PRINT N'Drop index dbo.TENANT_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_TENANT].[TENANT_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TENANT_ORGANIZATION_ID_IDX
PRINT N'Drop index dbo.TENANT_ORGANIZATION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_TENANT].[TENANT_ORGANIZATION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TENANT_LESSOR_TYPE_CODE_IDX
PRINT N'Drop index dbo.TENANT_LESSOR_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_TENANT].[TENANT_LESSOR_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TENANT_LEASE_ID_IDX
PRINT N'Drop index dbo.TENANT_LEASE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_TENANT].[TENANT_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TENTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TENTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TENTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TENTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TENTYP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TENTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_TENANT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_TENANT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_TENANT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_TENANT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_TENANT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_TENANT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.TENANT_LEASE_PERSON_ORG_TUC
PRINT N'Drop unique constraint dbo.TENANT_LEASE_PERSON_ORG_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	DROP CONSTRAINT IF EXISTS [TENANT_LEASE_PERSON_ORG_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.TENANT_PK
PRINT N'Drop primary key constraint dbo.TENANT_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	DROP CONSTRAINT IF EXISTS [TENANT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.TENTYP_PK
PRINT N'Drop primary key constraint dbo.TENTYP_PK'
GO
ALTER TABLE [dbo].[PIMS_TENANT_TYPE]
	DROP CONSTRAINT IF EXISTS [TENTYP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_LEASE_COMP_REQ_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_LEASE_COMP_REQ_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_LEASE_COMP_REQ_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE
PRINT N'Alter table dbo.PIMS_LEASE'
GO
ALTER TABLE [dbo].[PIMS_LEASE]
	DROP COLUMN IF EXISTS [OTHER_LEASE_PURPOSE_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COMPENSATION_REQUISITION
PRINT N'Alter table dbo.PIMS_COMPENSATION_REQUISITION'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION] ALTER COLUMN [ACQUISITION_FILE_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_ACQUISITION_FILE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FILE_ID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	ADD [LEASE_ID] bigint NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMPENSATION_REQUISITION', 
	@level2type = N'Column', @level2name = N'LEASE_ID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_LEASE_COMP_REQ
PRINT N'Create table dbo.PIMS_PROP_LEASE_COMP_REQ'
GO
CREATE TABLE [dbo].[PIMS_PROP_LEASE_COMP_REQ]  ( 
	[PROP_LEASE_COMP_REQ_ID]        	bigint NOT NULL CONSTRAINT [PLCMRQ_PROP_LEASE_COMP_REQ_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_LEASE_COMP_REQ_ID_SEQ]),
	[PROPERTY_LEASE_ID]             	bigint NOT NULL,
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [PLCMRQ_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PLCMRQ_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PLCMRQ_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PLCMRQ_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PLCMRQ_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PLCMRQ_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PLCMRQ_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PLCMRQ_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PLCMRQ_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PLCMRQ_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PLCMRQ_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PLCMRQ_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PLCMRQ_PK] PRIMARY KEY CLUSTERED([PROP_LEASE_COMP_REQ_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'PROP_LEASE_COMP_REQ_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'PROPERTY_LEASE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_COMPENSATION_REQUISITION table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'COMPENSATION_REQUISITION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the row is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Desribes the relationship between a leased property and a compensation requisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_LEASE_COMP_REQ'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_STAKEHOLDER_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_STAKEHOLDER_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_STAKEHOLDER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_STAKEHOLDER_TYPE
PRINT N'Create table dbo.PIMS_LEASE_STAKEHOLDER_TYPE'
GO
CREATE TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_TYPE]  ( 
	[LEASE_STAKEHOLDER_TYPE_CODE]	nvarchar(20) NOT NULL CONSTRAINT [STKHLT_LEASE_STAKEHOLDER_TYPE_CODE_DEF]  DEFAULT ('UNK'),
	[DESCRIPTION]                	nvarchar(200) NOT NULL CONSTRAINT [STKHLT_DESCRIPTION_DEF]  DEFAULT ('Unknown'),
	[IS_PAYABLE_RELATED]         	bit NULL CONSTRAINT [STKHLT_IS_PAYABLE_RELATED_DEF]  DEFAULT ((0)),
	[IS_DISABLED]                	bit NOT NULL CONSTRAINT [STKHLT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]              	int NULL,
	[CONCURRENCY_CONTROL_NUMBER] 	bigint NOT NULL CONSTRAINT [STKHLT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [STKHLT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [STKHLT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]   	datetime NOT NULL CONSTRAINT [STKHLT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]      	nvarchar(30) NOT NULL CONSTRAINT [STKHLT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [STKHLT_PK] PRIMARY KEY CLUSTERED([LEASE_STAKEHOLDER_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the types of stakeholders on a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_STAKEHOLDER_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the types of stakeholders on a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is related to payable leases.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'IS_PAYABLE_RELATED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is currently active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies a specific order to visually present the code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table describing the type of tenant on a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_STAKEHOLDER
PRINT N'Create table dbo.PIMS_LEASE_STAKEHOLDER'
GO
CREATE TABLE [dbo].[PIMS_LEASE_STAKEHOLDER]  ( 
	[LEASE_STAKEHOLDER_ID]          	bigint NOT NULL CONSTRAINT [LSTKHL_LEASE_STAKEHOLDER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_STAKEHOLDER_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[LESSOR_TYPE_CODE]              	nvarchar(20) NOT NULL CONSTRAINT [LSTKHL_LESSOR_TYPE_CODE_DEF]  DEFAULT ('UNK'),
	[LEASE_STAKEHOLDER_TYPE_CODE]   	nvarchar(20) NOT NULL CONSTRAINT [LSTKHL_LEASE_STAKEHOLDER_TYPE_CODE_DEF]  DEFAULT ('UNK'),
	[NOTE]                          	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LSTKHL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LSTKHL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LSTKHL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LSTKHL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LSTKHL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LSTKHL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LSTKHL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LSTKHL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LSTKHL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LSTKHL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LSTKHL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSTKHL_PK] PRIMARY KEY CLUSTERED([LEASE_STAKEHOLDER_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes associated with the lease/tenant relationship.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER', 
	@level2type = N'Column', @level2name = N'NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a tenant with a lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.LSTKHL_LEASE_PERSON_ORG_TUC
PRINT N'Create unique constraint dbo.LSTKHL_LEASE_PERSON_ORG_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER]
	ADD CONSTRAINT [LSTKHL_LEASE_PERSON_ORG_TUC]
	UNIQUE ([ORGANIZATION_ID], [PERSON_ID], [LEASE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_STAKEHOLDER_COMP_REQ_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_STAKEHOLDER_COMP_REQ_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_STAKEHOLDER_COMP_REQ
PRINT N'Create table dbo.PIMS_LEASE_STAKEHOLDER_COMP_REQ'
GO
CREATE TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ]  ( 
	[LEASE_STAKEHOLDER_COMP_REQ_ID] 	bigint NOT NULL CONSTRAINT [LSKCRQ_LEASE_STAKEHOLDER_COMP_REQ_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_STAKEHOLDER_COMP_REQ_ID_SEQ]),
	[LEASE_STAKEHOLDER_ID]          	bigint NOT NULL,
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [LSKCRQ_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LSKCRQ_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LSKCRQ_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LSKCRQ_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LSKCRQ_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LSKCRQ_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LSKCRQ_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LSKCRQ_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LSKCRQ_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LSKCRQ_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LSKCRQ_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LSKCRQ_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSKCRQ_PK] PRIMARY KEY CLUSTERED([LEASE_STAKEHOLDER_COMP_REQ_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'LEASE_STAKEHOLDER_COMP_REQ_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the LEASE_STAKEHOLDER table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'LEASE_STAKEHOLDER_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_COMPENSATION_REQUISITION table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'COMPENSATION_REQUISITION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the row is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Desribes the relationship between a lease stakeholder and a compensation requisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STAKEHOLDER_COMP_REQ'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_STAKEHOLDER_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_STAKEHOLDER_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_STAKEHOLDER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_STAKEHOLDER_HIST
PRINT N'Create table dbo.PIMS_LEASE_STAKEHOLDER_HIST'
GO
CREATE TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_HIST]  ( 
	[_LEASE_STAKEHOLDER_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_STAKEHOLDER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_STAKEHOLDER_ID]          	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[LESSOR_TYPE_CODE]              	nvarchar(20) NOT NULL,
	[LEASE_STAKEHOLDER_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[NOTE]                          	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LSTKHL_H_PK] PRIMARY KEY CLUSTERED([_LEASE_STAKEHOLDER_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_LSTKHL_H_UK
PRINT N'Create unique constraint dbo.PIMS_LSTKHL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_HIST]
	ADD CONSTRAINT [PIMS_LSTKHL_H_UK]
	UNIQUE ([_LEASE_STAKEHOLDER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COMPENSATION_REQUISITION_HIST
PRINT N'Alter table dbo.PIMS_COMPENSATION_REQUISITION_HIST'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION_HIST] ALTER COLUMN [ACQUISITION_FILE_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION_HIST]
	ADD [LEASE_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROP_LEASE_COMP_REQ_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROP_LEASE_COMP_REQ_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROP_LEASE_COMP_REQ_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_LEASE_COMP_REQ_HIST
PRINT N'Create table dbo.PIMS_PROP_LEASE_COMP_REQ_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROP_LEASE_COMP_REQ_HIST]  ( 
	[_PROP_LEASE_COMP_REQ_HIST_ID]  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROP_LEASE_COMP_REQ_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROP_LEASE_COMP_REQ_ID]        	bigint NOT NULL,
	[PROPERTY_LEASE_ID]             	bigint NOT NULL,
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PLCMRQ_H_PK] PRIMARY KEY CLUSTERED([_PROP_LEASE_COMP_REQ_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PLCMRQ_H_UK
PRINT N'Create unique constraint dbo.PIMS_PLCMRQ_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROP_LEASE_COMP_REQ_HIST]
	ADD CONSTRAINT [PIMS_PLCMRQ_H_UK]
	UNIQUE ([_PROP_LEASE_COMP_REQ_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_HIST
PRINT N'Alter table dbo.PIMS_LEASE_HIST'
GO
ALTER TABLE [dbo].[PIMS_LEASE_HIST]
	DROP COLUMN IF EXISTS [OTHER_LEASE_PURPOSE_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_STAKEHOLDER_COMP_REQ_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_STAKEHOLDER_COMP_REQ_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST
PRINT N'Create table dbo.PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST'
GO
CREATE TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST]  ( 
	[_LEASE_STAKEHOLDER_COMP_REQ_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_STAKEHOLDER_COMP_REQ_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[LEASE_STAKEHOLDER_COMP_REQ_ID]      	bigint NOT NULL,
	[LEASE_STAKEHOLDER_ID]               	bigint NOT NULL,
	[COMPENSATION_REQUISITION_ID]        	bigint NOT NULL,
	[IS_DISABLED]                        	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LSKCRQ_H_PK] PRIMARY KEY CLUSTERED([_LEASE_STAKEHOLDER_COMP_REQ_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_LSKCRQ_H_UK
PRINT N'Create unique constraint dbo.PIMS_LSKCRQ_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST]
	ADD CONSTRAINT [PIMS_LSKCRQ_H_UK]
	UNIQUE ([_LEASE_STAKEHOLDER_COMP_REQ_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PLCMRQ_PROPERTY_LEASE_ID_IDX
PRINT N'Create index dbo.PLCMRQ_PROPERTY_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PLCMRQ_PROPERTY_LEASE_ID_IDX]
	ON [dbo].[PIMS_PROP_LEASE_COMP_REQ]([PROPERTY_LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSTKHL_LESSOR_TYPE_CODE_IDX
PRINT N'Create index dbo.LSTKHL_LESSOR_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LSTKHL_LESSOR_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER]([LESSOR_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSTKHL_LEASE_ID_IDX
PRINT N'Create index dbo.LSTKHL_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSTKHL_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PLCMRQ_COMPENSATION_REQUISITION_ID_IDX
PRINT N'Create index dbo.PLCMRQ_COMPENSATION_REQUISITION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PLCMRQ_COMPENSATION_REQUISITION_ID_IDX]
	ON [dbo].[PIMS_PROP_LEASE_COMP_REQ]([COMPENSATION_REQUISITION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.CMPREQ_LEASE_ID_IDX
PRINT N'Create index dbo.CMPREQ_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [CMPREQ_LEASE_ID_IDX]
	ON [dbo].[PIMS_COMPENSATION_REQUISITION]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSTKHL_LEASE_STAKEHOLDER_TYPE_CODE_IDX
PRINT N'Create index dbo.LSTKHL_LEASE_STAKEHOLDER_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LSTKHL_LEASE_STAKEHOLDER_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER]([LEASE_STAKEHOLDER_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSKCRQ_LEASE_STAKEHOLDER_ID_IDX
PRINT N'Create index dbo.LSKCRQ_LEASE_STAKEHOLDER_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSKCRQ_LEASE_STAKEHOLDER_ID_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ]([LEASE_STAKEHOLDER_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSTKHL_PERSON_ID_IDX
PRINT N'Create index dbo.LSTKHL_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSTKHL_PERSON_ID_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSKCRQ_COMPENSATION_REQUISITION_ID_IDX
PRINT N'Create index dbo.LSKCRQ_COMPENSATION_REQUISITION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSKCRQ_COMPENSATION_REQUISITION_ID_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ]([COMPENSATION_REQUISITION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique index dbo.PLCMRQ_PROP_LS_COMP_REQ_IDX
PRINT N'Create unique index dbo.PLCMRQ_PROP_LS_COMP_REQ_IDX'
GO
CREATE UNIQUE NONCLUSTERED INDEX [PLCMRQ_PROP_LS_COMP_REQ_IDX]
	ON [dbo].[PIMS_PROP_LEASE_COMP_REQ]([PROPERTY_LEASE_ID], [COMPENSATION_REQUISITION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique index dbo.LSKCRQ_LS_TNT_COMP_REQ_IDX
PRINT N'Create unique index dbo.LSKCRQ_LS_TNT_COMP_REQ_IDX'
GO
CREATE UNIQUE NONCLUSTERED INDEX [LSKCRQ_LS_TNT_COMP_REQ_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ]([LEASE_STAKEHOLDER_ID], [COMPENSATION_REQUISITION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSTKHL_PRIMARY_CONTACT_ID_IDX
PRINT N'Create index dbo.LSTKHL_PRIMARY_CONTACT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSTKHL_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER]([PRIMARY_CONTACT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSTKHL_ORGANIZATION_ID_IDX
PRINT N'Create index dbo.LSTKHL_ORGANIZATION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSTKHL_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_LEASE_STAKEHOLDER]([ORGANIZATION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_CMPREQ_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_CMPREQ_FK'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	ADD CONSTRAINT [PIM_LEASE_PIM_CMPREQ_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CMPREQ_PIM_PLCMRQ_FK
PRINT N'Create foreign key constraint dbo.PIM_CMPREQ_PIM_PLCMRQ_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_LEASE_COMP_REQ]
	ADD CONSTRAINT [PIM_CMPREQ_PIM_PLCMRQ_FK]
	FOREIGN KEY([COMPENSATION_REQUISITION_ID])
	REFERENCES [dbo].[PIMS_COMPENSATION_REQUISITION]([COMPENSATION_REQUISITION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PROPLS_PIM_PLCMRQ_FK
PRINT N'Create foreign key constraint dbo.PIM_PROPLS_PIM_PLCMRQ_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_LEASE_COMP_REQ]
	ADD CONSTRAINT [PIM_PROPLS_PIM_PLCMRQ_FK]
	FOREIGN KEY([PROPERTY_LEASE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_LEASE]([PROPERTY_LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_TENANT_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER]
	ADD CONSTRAINT [PIM_LEASE_PIM_TENANT_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_TENANT_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER]
	ADD CONSTRAINT [PIM_PERSON_PIM_TENANT_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_PRIMARY_CONTACT_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_PRIMARY_CONTACT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRIMARY_CONTACT_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LSSRTY_PIM_TENANT_FK
PRINT N'Create foreign key constraint dbo.PIM_LSSRTY_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER]
	ADD CONSTRAINT [PIM_LSSRTY_PIM_TENANT_FK]
	FOREIGN KEY([LESSOR_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LESSOR_TYPE]([LESSOR_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_TENANT_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER]
	ADD CONSTRAINT [PIM_ORG_PIM_TENANT_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_TENTYP_PIM_TENANT_FK
PRINT N'Create foreign key constraint dbo.PIM_TENTYP_PIM_TENANT_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER]
	ADD CONSTRAINT [PIM_TENTYP_PIM_TENANT_FK]
	FOREIGN KEY([LEASE_STAKEHOLDER_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_STAKEHOLDER_TYPE]([LEASE_STAKEHOLDER_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LSTKHL_PIM_LSKCRQ_FK
PRINT N'Create foreign key constraint dbo.PIM_LSTKHL_PIM_LSKCRQ_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ]
	ADD CONSTRAINT [PIM_LSTKHL_PIM_LSKCRQ_FK]
	FOREIGN KEY([LEASE_STAKEHOLDER_ID])
	REFERENCES [dbo].[PIMS_LEASE_STAKEHOLDER]([LEASE_STAKEHOLDER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CMPREQ_PIM_LSKCRQ_FK
PRINT N'Create foreign key constraint dbo.PIM_CMPREQ_PIM_LSKCRQ_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ]
	ADD CONSTRAINT [PIM_CMPREQ_PIM_LSKCRQ_FK]
	FOREIGN KEY([COMPENSATION_REQUISITION_ID])
	REFERENCES [dbo].[PIMS_COMPENSATION_REQUISITION]([COMPENSATION_REQUISITION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSTKHL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LSTKHL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSTKHL_A_S_IUD_TR] ON PIMS_LEASE_STAKEHOLDER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_STAKEHOLDER_HIST set END_DATE_HIST = @curr_date where LEASE_STAKEHOLDER_ID in (select LEASE_STAKEHOLDER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_STAKEHOLDER_HIST ([LEASE_STAKEHOLDER_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [LESSOR_TYPE_CODE], [LEASE_STAKEHOLDER_TYPE_CODE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_STAKEHOLDER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_STAKEHOLDER_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [LESSOR_TYPE_CODE], [LEASE_STAKEHOLDER_TYPE_CODE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_STAKEHOLDER_H_ID_SEQ]) as [_LEASE_STAKEHOLDER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSKCRQ_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LSKCRQ_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSKCRQ_I_S_I_TR] ON PIMS_LEASE_STAKEHOLDER_COMP_REQ INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_STAKEHOLDER_COMP_REQ ("LEASE_STAKEHOLDER_COMP_REQ_ID",
      "LEASE_STAKEHOLDER_ID",
      "COMPENSATION_REQUISITION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_STAKEHOLDER_COMP_REQ_ID",
      "LEASE_STAKEHOLDER_ID",
      "COMPENSATION_REQUISITION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CMPREQ_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_CMPREQ_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CMPREQ_I_S_I_TR] ON PIMS_COMPENSATION_REQUISITION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_COMPENSATION_REQUISITION ("COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID",
      "LEASE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_TEAM_ID",
      "CHART_OF_ACCOUNTS_ID",
      "RESPONSIBILITY_ID",
      "YEARLY_FINANCIAL_ID",
      "ALTERNATE_PROJECT_ID",
      "LEGACY_PAYEE",
      "IS_DRAFT",
      "IS_PAYMENT_IN_TRUST",
      "GST_NUMBER",
      "FISCAL_YEAR",
      "AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT",
      "GENERATION_DT",
      "FINALIZED_DATE",
      "ADV_PMT_SERVED_DT",
      "SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID",
      "LEASE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_TEAM_ID",
      "CHART_OF_ACCOUNTS_ID",
      "RESPONSIBILITY_ID",
      "YEARLY_FINANCIAL_ID",
      "ALTERNATE_PROJECT_ID",
      "LEGACY_PAYEE",
      "IS_DRAFT",
      "IS_PAYMENT_IN_TRUST",
      "GST_NUMBER",
      "FISCAL_YEAR",
      "AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT",
      "GENERATION_DT",
      "FINALIZED_DATE",
      "ADV_PMT_SERVED_DT",
      "SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CMPREQ_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_CMPREQ_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CMPREQ_A_S_IUD_TR] ON PIMS_COMPENSATION_REQUISITION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_COMPENSATION_REQUISITION_HIST set END_DATE_HIST = @curr_date where COMPENSATION_REQUISITION_ID in (select COMPENSATION_REQUISITION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_COMPENSATION_REQUISITION_HIST ([COMPENSATION_REQUISITION_ID], [ACQUISITION_FILE_ID], [LEASE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [ACQUISITION_FILE_TEAM_ID], [CHART_OF_ACCOUNTS_ID], [RESPONSIBILITY_ID], [YEARLY_FINANCIAL_ID], [ALTERNATE_PROJECT_ID], [LEGACY_PAYEE], [IS_DRAFT], [IS_PAYMENT_IN_TRUST], [GST_NUMBER], [FISCAL_YEAR], [AGREEMENT_DT], [EXPROP_NOTICE_SERVED_DT], [EXPROP_VESTING_DT], [GENERATION_DT], [FINALIZED_DATE], [ADV_PMT_SERVED_DT], [SPECIAL_INSTRUCTION], [DETAILED_REMARKS], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _COMPENSATION_REQUISITION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [COMPENSATION_REQUISITION_ID], [ACQUISITION_FILE_ID], [LEASE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [ACQUISITION_FILE_TEAM_ID], [CHART_OF_ACCOUNTS_ID], [RESPONSIBILITY_ID], [YEARLY_FINANCIAL_ID], [ALTERNATE_PROJECT_ID], [LEGACY_PAYEE], [IS_DRAFT], [IS_PAYMENT_IN_TRUST], [GST_NUMBER], [FISCAL_YEAR], [AGREEMENT_DT], [EXPROP_NOTICE_SERVED_DT], [EXPROP_VESTING_DT], [GENERATION_DT], [FINALIZED_DATE], [ADV_PMT_SERVED_DT], [SPECIAL_INSTRUCTION], [DETAILED_REMARKS], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_COMPENSATION_REQUISITION_H_ID_SEQ]) as [_COMPENSATION_REQUISITION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PLCMRQ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PLCMRQ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PLCMRQ_I_S_U_TR] ON PIMS_PROP_LEASE_COMP_REQ INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_LEASE_COMP_REQ_ID = deleted.PROP_LEASE_COMP_REQ_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_LEASE_COMP_REQ
    set "PROP_LEASE_COMP_REQ_ID" = inserted."PROP_LEASE_COMP_REQ_ID",
      "PROPERTY_LEASE_ID" = inserted."PROPERTY_LEASE_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_LEASE_COMP_REQ
    inner join inserted
    on (PIMS_PROP_LEASE_COMP_REQ.PROP_LEASE_COMP_REQ_ID = inserted.PROP_LEASE_COMP_REQ_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSTKHL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSTKHL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSTKHL_I_S_U_TR] ON PIMS_LEASE_STAKEHOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_STAKEHOLDER_ID = deleted.LEASE_STAKEHOLDER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_STAKEHOLDER
    set "LEASE_STAKEHOLDER_ID" = inserted."LEASE_STAKEHOLDER_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "LESSOR_TYPE_CODE" = inserted."LESSOR_TYPE_CODE",
      "LEASE_STAKEHOLDER_TYPE_CODE" = inserted."LEASE_STAKEHOLDER_TYPE_CODE",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_STAKEHOLDER
    inner join inserted
    on (PIMS_LEASE_STAKEHOLDER.LEASE_STAKEHOLDER_ID = inserted.LEASE_STAKEHOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LEASE_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_U_TR] ON PIMS_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_ID = deleted.LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE
    set "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE" = inserted."LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE" = inserted."LEASE_LICENSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE" = inserted."LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE" = inserted."LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE" = inserted."LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE" = inserted."LEASE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "L_FILE_NO" = inserted."L_FILE_NO",
      "TFA_FILE_NO" = inserted."TFA_FILE_NO",
      "TFA_FILE_NUMBER" = inserted."TFA_FILE_NUMBER",
      "PS_FILE_NO" = inserted."PS_FILE_NO",
      "LEASE_DESCRIPTION" = inserted."LEASE_DESCRIPTION",
      "LEASE_NOTES" = inserted."LEASE_NOTES",
      "MOTI_CONTACT" = inserted."MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE" = inserted."DOCUMENTATION_REFERENCE",
      "RETURN_NOTES" = inserted."RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE" = inserted."OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE" = inserted."OTHER_LEASE_LICENSE_TYPE",
      "ORIG_START_DATE" = inserted."ORIG_START_DATE",
      "ORIG_EXPIRY_DATE" = inserted."ORIG_EXPIRY_DATE",
      "TERMINATION_DATE" = inserted."TERMINATION_DATE",
      "LEASE_AMOUNT" = inserted."LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE" = inserted."RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE" = inserted."INSPECTION_DATE",
      "INSPECTION_NOTES" = inserted."INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA" = inserted."IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG" = inserted."IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT" = inserted."IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED" = inserted."IS_EXPIRED",
      "HAS_PHYSICAL_FILE" = inserted."HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE" = inserted."HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE" = inserted."HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE" = inserted."HAS_DIGITAL_LICENSE",
      "CANCELLATION_REASON" = inserted."CANCELLATION_REASON",
      "TERMINATION_REASON" = inserted."TERMINATION_REASON",
      "IS_PUBLIC_BENEFIT" = inserted."IS_PUBLIC_BENEFIT",
      "IS_FINANCIAL_GAIN" = inserted."IS_FINANCIAL_GAIN",
      "FEE_DETERMINATION_NOTE" = inserted."FEE_DETERMINATION_NOTE",
      "PRIMARY_ARBITRATION_CITY" = inserted."PRIMARY_ARBITRATION_CITY",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE
    inner join inserted
    on (PIMS_LEASE.LEASE_ID = inserted.LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_STKHLT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_STKHLT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_STKHLT_I_S_I_TR] ON PIMS_LEASE_STAKEHOLDER_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_STAKEHOLDER_TYPE ("LEASE_STAKEHOLDER_TYPE_CODE",
      "DESCRIPTION",
      "IS_PAYABLE_RELATED",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_STAKEHOLDER_TYPE_CODE",
      "DESCRIPTION",
      "IS_PAYABLE_RELATED",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSKCRQ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSKCRQ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSKCRQ_I_S_U_TR] ON PIMS_LEASE_STAKEHOLDER_COMP_REQ INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_STAKEHOLDER_COMP_REQ_ID = deleted.LEASE_STAKEHOLDER_COMP_REQ_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_STAKEHOLDER_COMP_REQ
    set "LEASE_STAKEHOLDER_COMP_REQ_ID" = inserted."LEASE_STAKEHOLDER_COMP_REQ_ID",
      "LEASE_STAKEHOLDER_ID" = inserted."LEASE_STAKEHOLDER_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_STAKEHOLDER_COMP_REQ
    inner join inserted
    on (PIMS_LEASE_STAKEHOLDER_COMP_REQ.LEASE_STAKEHOLDER_COMP_REQ_ID = inserted.LEASE_STAKEHOLDER_COMP_REQ_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RFLNOT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_RFLNOT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RFLNOT_A_S_IUD_TR] ON PIMS_RESEARCH_FILE_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_NOTE_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_ID in (select RESEARCH_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_NOTE_HIST ([RESEARCH_FILE_NOTE_ID], [RESEARCH_FILE_ID], [NOTE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_NOTE_ID], [RESEARCH_FILE_ID], [NOTE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_NOTE_H_ID_SEQ]) as [_RESEARCH_FILE_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CMPREQ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CMPREQ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CMPREQ_I_S_U_TR] ON PIMS_COMPENSATION_REQUISITION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.COMPENSATION_REQUISITION_ID = deleted.COMPENSATION_REQUISITION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COMPENSATION_REQUISITION
    set "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_TEAM_ID" = inserted."ACQUISITION_FILE_TEAM_ID",
      "CHART_OF_ACCOUNTS_ID" = inserted."CHART_OF_ACCOUNTS_ID",
      "RESPONSIBILITY_ID" = inserted."RESPONSIBILITY_ID",
      "YEARLY_FINANCIAL_ID" = inserted."YEARLY_FINANCIAL_ID",
      "ALTERNATE_PROJECT_ID" = inserted."ALTERNATE_PROJECT_ID",
      "LEGACY_PAYEE" = inserted."LEGACY_PAYEE",
      "IS_DRAFT" = inserted."IS_DRAFT",
      "IS_PAYMENT_IN_TRUST" = inserted."IS_PAYMENT_IN_TRUST",
      "GST_NUMBER" = inserted."GST_NUMBER",
      "FISCAL_YEAR" = inserted."FISCAL_YEAR",
      "AGREEMENT_DT" = inserted."AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT" = inserted."EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT" = inserted."EXPROP_VESTING_DT",
      "GENERATION_DT" = inserted."GENERATION_DT",
      "FINALIZED_DATE" = inserted."FINALIZED_DATE",
      "ADV_PMT_SERVED_DT" = inserted."ADV_PMT_SERVED_DT",
      "SPECIAL_INSTRUCTION" = inserted."SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS" = inserted."DETAILED_REMARKS",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COMPENSATION_REQUISITION
    inner join inserted
    on (PIMS_COMPENSATION_REQUISITION.COMPENSATION_REQUISITION_ID = inserted.COMPENSATION_REQUISITION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PLCMRQ_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PLCMRQ_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PLCMRQ_A_S_IUD_TR] ON PIMS_PROP_LEASE_COMP_REQ FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROP_LEASE_COMP_REQ_HIST set END_DATE_HIST = @curr_date where PROP_LEASE_COMP_REQ_ID in (select PROP_LEASE_COMP_REQ_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROP_LEASE_COMP_REQ_HIST ([PROP_LEASE_COMP_REQ_ID], [PROPERTY_LEASE_ID], [COMPENSATION_REQUISITION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROP_LEASE_COMP_REQ_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROP_LEASE_COMP_REQ_ID], [PROPERTY_LEASE_ID], [COMPENSATION_REQUISITION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROP_LEASE_COMP_REQ_H_ID_SEQ]) as [_PROP_LEASE_COMP_REQ_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSTKHL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LSTKHL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSTKHL_I_S_I_TR] ON PIMS_LEASE_STAKEHOLDER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_STAKEHOLDER ("LEASE_STAKEHOLDER_ID",
      "LEASE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "LESSOR_TYPE_CODE",
      "LEASE_STAKEHOLDER_TYPE_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_STAKEHOLDER_ID",
      "LEASE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "LESSOR_TYPE_CODE",
      "LEASE_STAKEHOLDER_TYPE_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LEASE_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_A_S_IUD_TR] ON PIMS_LEASE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_HIST set END_DATE_HIST = @curr_date where LEASE_ID in (select LEASE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_HIST ([LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_DESCRIPTION], [LEASE_NOTES], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [RETURN_NOTES], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [TERMINATION_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [INSPECTION_NOTES], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CANCELLATION_REASON], [TERMINATION_REASON], [IS_PUBLIC_BENEFIT], [IS_FINANCIAL_GAIN], [FEE_DETERMINATION_NOTE], [PRIMARY_ARBITRATION_CITY], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_DESCRIPTION], [LEASE_NOTES], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [RETURN_NOTES], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [TERMINATION_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [INSPECTION_NOTES], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CANCELLATION_REASON], [TERMINATION_REASON], [IS_PUBLIC_BENEFIT], [IS_FINANCIAL_GAIN], [FEE_DETERMINATION_NOTE], [PRIMARY_ARBITRATION_CITY], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_H_ID_SEQ]) as [_LEASE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PLCMRQ_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PLCMRQ_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PLCMRQ_I_S_I_TR] ON PIMS_PROP_LEASE_COMP_REQ INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_LEASE_COMP_REQ ("PROP_LEASE_COMP_REQ_ID",
      "PROPERTY_LEASE_ID",
      "COMPENSATION_REQUISITION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_LEASE_COMP_REQ_ID",
      "PROPERTY_LEASE_ID",
      "COMPENSATION_REQUISITION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSKCRQ_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LSKCRQ_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSKCRQ_A_S_IUD_TR] ON PIMS_LEASE_STAKEHOLDER_COMP_REQ FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST set END_DATE_HIST = @curr_date where LEASE_STAKEHOLDER_COMP_REQ_ID in (select LEASE_STAKEHOLDER_COMP_REQ_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST ([LEASE_STAKEHOLDER_COMP_REQ_ID], [LEASE_STAKEHOLDER_ID], [COMPENSATION_REQUISITION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_STAKEHOLDER_COMP_REQ_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_STAKEHOLDER_COMP_REQ_ID], [LEASE_STAKEHOLDER_ID], [COMPENSATION_REQUISITION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ_H_ID_SEQ]) as [_LEASE_STAKEHOLDER_COMP_REQ_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LEASE_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LEASE_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_I_TR] ON PIMS_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE ("LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "PROJECT_ID",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "TFA_FILE_NUMBER",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "TERMINATION_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CANCELLATION_REASON",
      "TERMINATION_REASON",
      "IS_PUBLIC_BENEFIT",
      "IS_FINANCIAL_GAIN",
      "FEE_DETERMINATION_NOTE",
      "PRIMARY_ARBITRATION_CITY",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "PROJECT_ID",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "TFA_FILE_NUMBER",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "TERMINATION_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CANCELLATION_REASON",
      "TERMINATION_REASON",
      "IS_PUBLIC_BENEFIT",
      "IS_FINANCIAL_GAIN",
      "FEE_DETERMINATION_NOTE",
      "PRIMARY_ARBITRATION_CITY",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_STKHLT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_STKHLT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_STKHLT_I_S_U_TR] ON PIMS_LEASE_STAKEHOLDER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_STAKEHOLDER_TYPE_CODE = deleted.LEASE_STAKEHOLDER_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_STAKEHOLDER_TYPE
    set "LEASE_STAKEHOLDER_TYPE_CODE" = inserted."LEASE_STAKEHOLDER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_PAYABLE_RELATED" = inserted."IS_PAYABLE_RELATED",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_STAKEHOLDER_TYPE
    inner join inserted
    on (PIMS_LEASE_STAKEHOLDER_TYPE.LEASE_STAKEHOLDER_TYPE_CODE = inserted.LEASE_STAKEHOLDER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Migrate data from PIMS_TENANT_TYPE
PRINT N'Migrate data from PIMS_TENANT_TYPE'
GO
INSERT INTO PIMS_LEASE_STAKEHOLDER_TYPE(LEASE_STAKEHOLDER_TYPE_CODE, DESCRIPTION, IS_PAYABLE_RELATED, IS_DISABLED, DISPLAY_ORDER, CONCURRENCY_CONTROL_NUMBER, DB_CREATE_TIMESTAMP, DB_CREATE_USERID, DB_LAST_UPDATE_TIMESTAMP, DB_LAST_UPDATE_USERID)
  SELECT TENANT_TYPE_CODE, DESCRIPTION, IS_DISABLED, 0, DISPLAY_ORDER, CONCURRENCY_CONTROL_NUMBER, DB_CREATE_TIMESTAMP, DB_CREATE_USERID, DB_LAST_UPDATE_TIMESTAMP, DB_LAST_UPDATE_USERID
  FROM   PIMS_TENANT_TYPE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Migrate data from PIMS_LEASE_TENANT_HIST
PRINT N'Migrate data from PIMS_LEASE_TENANT_HIST'
GO
INSERT INTO PIMS_LEASE_STAKEHOLDER_HIST (_LEASE_STAKEHOLDER_HIST_ID, EFFECTIVE_DATE_HIST, END_DATE_HIST, LEASE_STAKEHOLDER_ID, LEASE_ID, PERSON_ID, ORGANIZATION_ID, PRIMARY_CONTACT_ID, LESSOR_TYPE_CODE, LEASE_STAKEHOLDER_TYPE_CODE, NOTE, CONCURRENCY_CONTROL_NUMBER, APP_CREATE_TIMESTAMP, APP_CREATE_USERID, APP_CREATE_USER_GUID, APP_CREATE_USER_DIRECTORY, APP_LAST_UPDATE_TIMESTAMP, APP_LAST_UPDATE_USERID, APP_LAST_UPDATE_USER_GUID, APP_LAST_UPDATE_USER_DIRECTORY, DB_CREATE_TIMESTAMP, DB_CREATE_USERID, DB_LAST_UPDATE_TIMESTAMP, DB_LAST_UPDATE_USERID) 
  SELECT _LEASE_TENANT_HIST_ID, EFFECTIVE_DATE_HIST, END_DATE_HIST, LEASE_TENANT_ID, LEASE_ID, PERSON_ID, ORGANIZATION_ID, PRIMARY_CONTACT_ID, LESSOR_TYPE_CODE, TENANT_TYPE_CODE, NOTE, CONCURRENCY_CONTROL_NUMBER, APP_CREATE_TIMESTAMP, APP_CREATE_USERID, APP_CREATE_USER_GUID, APP_CREATE_USER_DIRECTORY, APP_LAST_UPDATE_TIMESTAMP, APP_LAST_UPDATE_USERID, APP_LAST_UPDATE_USER_GUID, APP_LAST_UPDATE_USER_DIRECTORY, DB_CREATE_TIMESTAMP, DB_CREATE_USERID, DB_LAST_UPDATE_TIMESTAMP, DB_LAST_UPDATE_USERID
  FROM   PIMS_LEASE_TENANT_HIST
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Migrate data from PIMS_LEASE_TENANT
PRINT N'Migrate data from PIMS_LEASE_TENANT'
GO
ALTER TABLE PIMS_LEASE_STAKEHOLDER DISABLE TRIGGER PIMS_LSTKHL_A_S_IUD_TR
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO PIMS_LEASE_STAKEHOLDER (LEASE_STAKEHOLDER_ID, LEASE_ID, PERSON_ID, ORGANIZATION_ID, PRIMARY_CONTACT_ID, LESSOR_TYPE_CODE, LEASE_STAKEHOLDER_TYPE_CODE, NOTE, CONCURRENCY_CONTROL_NUMBER, APP_CREATE_TIMESTAMP, APP_CREATE_USERID, APP_CREATE_USER_GUID, APP_CREATE_USER_DIRECTORY, APP_LAST_UPDATE_TIMESTAMP, APP_LAST_UPDATE_USERID, APP_LAST_UPDATE_USER_GUID, APP_LAST_UPDATE_USER_DIRECTORY, DB_CREATE_TIMESTAMP, DB_CREATE_USERID, DB_LAST_UPDATE_TIMESTAMP, DB_LAST_UPDATE_USERID) 
  SELECT LEASE_TENANT_ID, LEASE_ID, PERSON_ID, ORGANIZATION_ID, PRIMARY_CONTACT_ID, LESSOR_TYPE_CODE, TENANT_TYPE_CODE, NOTE, CONCURRENCY_CONTROL_NUMBER, APP_CREATE_TIMESTAMP, APP_CREATE_USERID, APP_CREATE_USER_GUID, APP_CREATE_USER_DIRECTORY, APP_LAST_UPDATE_TIMESTAMP, APP_LAST_UPDATE_USERID, APP_LAST_UPDATE_USER_GUID, APP_LAST_UPDATE_USER_DIRECTORY, DB_CREATE_TIMESTAMP, DB_CREATE_USERID, DB_LAST_UPDATE_TIMESTAMP, DB_LAST_UPDATE_USERID
  FROM   PIMS_LEASE_TENANT
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE PIMS_LEASE_STAKEHOLDER ENABLE TRIGGER PIMS_LSTKHL_A_S_IUD_TR
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_TENANT
PRINT N'Drop table dbo.PIMS_LEASE_TENANT'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_TENANT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_TENANT_HIST
PRINT N'Drop table dbo.PIMS_LEASE_TENANT_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_TENANT_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_LEASE_TENANT_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_LEASE_TENANT_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_LEASE_TENANT_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_LEASE_TENANT_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_LEASE_TENANT_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_LEASE_TENANT_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_TENANT_TYPE
PRINT N'Drop table dbo.PIMS_TENANT_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_TENANT_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Set the new sequence value
PRINT N'Set the new sequence value'
GO
DECLARE @StartVlu bigint;
DECLARE @Qry nvarchar(max);

SET @StartVlu = (SELECT MAX(LEASE_STAKEHOLDER_ID) + 1 FROM PIMS_LEASE_STAKEHOLDER)
SET @Qry      = 'ALTER SEQUENCE PIMS_LEASE_STAKEHOLDER_ID_SEQ RESTART WITH ' + CAST(@StartVlu AS NVARCHAR(20)) + ';'
EXEC SP_EXECUTESQL @Qry;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Set the new sequence value
PRINT N'Set the new sequence value'
GO
DECLARE @StartVlu bigint;
DECLARE @Qry nvarchar(max);

SET @StartVlu = (SELECT MAX(_LEASE_STAKEHOLDER_HIST_ID) + 1 FROM PIMS_LEASE_STAKEHOLDER_HIST)
SET @Qry      = 'ALTER SEQUENCE PIMS_LEASE_STAKEHOLDER_H_ID_SEQ RESTART WITH ' + CAST(@StartVlu AS NVARCHAR(20)) + ';'
EXEC SP_EXECUTESQL @Qry;
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
