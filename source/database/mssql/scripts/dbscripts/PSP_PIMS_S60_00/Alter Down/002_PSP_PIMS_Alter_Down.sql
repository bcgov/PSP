-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Wed Aug 02 21:48:19 PDT 2023
-- Execute this script on:
-- 		PSP_PIMS_S60_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S58_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_XPMTITY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_XPMTITY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_XPMTITY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_XPMTITY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_XPMTITY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_XPMTITY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_XPMTITY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_XPMTITY_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_XPMTITY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_IHPRIN_PIM_PIHITY_FK
PRINT N'Drop foreign key constraint dbo.PIM_IHPRIN_PIM_PIHITY_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]
	DROP CONSTRAINT IF EXISTS [PIM_IHPRIN_PIM_PIHITY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_EXPPMT_PIM_XPMTITY_FK
PRINT N'Drop foreign key constraint dbo.PIM_EXPPMT_PIM_XPMTITY_FK'
GO
ALTER TABLE [dbo].[PIMS_EXPROP_PMT_PMT_ITEM]
	DROP CONSTRAINT IF EXISTS [PIM_EXPPMT_PIM_XPMTITY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PMTITM_PIM_XPMTITY_FK
PRINT N'Drop foreign key constraint dbo.PIM_PMTITM_PIM_XPMTITY_FK'
GO
ALTER TABLE [dbo].[PIMS_EXPROP_PMT_PMT_ITEM]
	DROP CONSTRAINT IF EXISTS [PIM_PMTITM_PIM_XPMTITY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_FORM8_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_FORM8_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ORG_PIM_FORM8_FK
PRINT N'Drop foreign key constraint dbo.PIM_ORG_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT]
	DROP CONSTRAINT IF EXISTS [PIM_ORG_PIM_FORM8_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_INTHLD_PIM_FORM8_FK
PRINT N'Drop foreign key constraint dbo.PIM_INTHLD_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT]
	DROP CONSTRAINT IF EXISTS [PIM_INTHLD_PIM_FORM8_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQOWN_PIM_FORM8_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQOWN_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT]
	DROP CONSTRAINT IF EXISTS [PIM_ACQOWN_PIM_FORM8_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_CMPREQ_PIM_CRH120_FK
PRINT N'Drop foreign key constraint dbo.PIM_CMPREQ_PIM_CRH120_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_FINANCIAL]
	DROP CONSTRAINT IF EXISTS [PIM_CMPREQ_PIM_CRH120_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_FINACT_PIM_CRH120_FK
PRINT N'Drop foreign key constraint dbo.PIM_FINACT_PIM_CRH120_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_FINANCIAL]
	DROP CONSTRAINT IF EXISTS [PIM_FINACT_PIM_CRH120_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQPER_PIM_CMPREQ_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQPER_PIM_CMPREQ_FK'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	DROP CONSTRAINT IF EXISTS [PIM_ACQPER_PIM_CMPREQ_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_INTHLD_PIM_CMPREQ_FK
PRINT N'Drop foreign key constraint dbo.PIM_INTHLD_PIM_CMPREQ_FK'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	DROP CONSTRAINT IF EXISTS [PIM_INTHLD_PIM_CMPREQ_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQOWN_PIM_CMPREQ_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQOWN_PIM_CMPREQ_FK'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	DROP CONSTRAINT IF EXISTS [PIM_ACQOWN_PIM_CMPREQ_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.XPMTITY_PAYMENT_ITEM_TYPE_CODE_IDX
PRINT N'Drop index dbo.XPMTITY_PAYMENT_ITEM_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_EXPROP_PMT_PMT_ITEM].[XPMTITY_PAYMENT_ITEM_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.XPMTITY_EXPROPRIATION_PAYMENT_ID_IDX
PRINT N'Drop index dbo.XPMTITY_EXPROPRIATION_PAYMENT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_EXPROP_PMT_PMT_ITEM].[XPMTITY_EXPROPRIATION_PAYMENT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_EXPPMT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_EXPPMT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_EXPPMT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_EXPPMT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_EXPPMT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_EXPPMT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_EXPPMT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_EXPPMT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_EXPPMT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.EXPPMT_INTEREST_HOLDER_ID_IDX
PRINT N'Drop index dbo.EXPPMT_INTEREST_HOLDER_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_EXPROPRIATION_PAYMENT].[EXPPMT_INTEREST_HOLDER_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.EXPPMT_EXPROPRIATING_AUTHORITY_IDX
PRINT N'Drop index dbo.EXPPMT_EXPROPRIATING_AUTHORITY_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_EXPROPRIATION_PAYMENT].[EXPPMT_EXPROPRIATING_AUTHORITY_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.EXPPMT_ACQUISITION_OWNER_ID_IDX
PRINT N'Drop index dbo.EXPPMT_ACQUISITION_OWNER_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_EXPROPRIATION_PAYMENT].[EXPPMT_ACQUISITION_OWNER_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.EXPPMT_ACQUISITION_FILE_ID_IDX
PRINT N'Drop index dbo.EXPPMT_ACQUISITION_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_EXPROPRIATION_PAYMENT].[EXPPMT_ACQUISITION_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CRQFIN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CRQFIN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CRQFIN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CRQFIN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_CRQFIN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CRQFIN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CRQFIN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_CRQFIN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CRQFIN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.CRH120_FINANCIAL_ACTIVITY_CODE_ID_IDX
PRINT N'Drop index dbo.CRH120_FINANCIAL_ACTIVITY_CODE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_COMP_REQ_FINANCIAL].[CRH120_FINANCIAL_ACTIVITY_CODE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.CRH120_COMPENSATION_REQUISITION_ID_IDX
PRINT N'Drop index dbo.CRH120_COMPENSATION_REQUISITION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_COMP_REQ_FINANCIAL].[CRH120_COMPENSATION_REQUISITION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPREQ_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CMPREQ_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPREQ_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPREQ_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_CMPREQ_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPREQ_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.CMPREQ_INTEREST_HOLDER_ID_IDX
PRINT N'Drop index dbo.CMPREQ_INTEREST_HOLDER_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_COMPENSATION_REQUISITION].[CMPREQ_INTEREST_HOLDER_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.CMPREQ_ACQUISITION_OWNER_ID_IDX
PRINT N'Drop index dbo.CMPREQ_ACQUISITION_OWNER_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_COMPENSATION_REQUISITION].[CMPREQ_ACQUISITION_OWNER_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.CMPREQ_ACQUISITION_FILE_PERSON_ID_IDX
PRINT N'Drop index dbo.CMPREQ_ACQUISITION_FILE_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_COMPENSATION_REQUISITION].[CMPREQ_ACQUISITION_FILE_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPREQ_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_CMPREQ_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPREQ_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQNFL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_XPMTIT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_XPMTIT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_EXPROP_PMT_PMT_ITEM_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_XPMTIT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_XPMTIT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_XPMTIT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_EXPROP_PMT_PMT_ITEM_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_XPMTIT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.XPMTITY_EXPROP_PMT_PMT_TYPE_TUC
PRINT N'Drop unique constraint dbo.XPMTITY_EXPROP_PMT_PMT_TYPE_TUC'
GO
ALTER TABLE [dbo].[PIMS_EXPROP_PMT_PMT_ITEM]
	DROP CONSTRAINT IF EXISTS [XPMTITY_EXPROP_PMT_PMT_TYPE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.XPMTITY_PK
PRINT N'Drop primary key constraint dbo.XPMTITY_PK'
GO
ALTER TABLE [dbo].[PIMS_EXPROP_PMT_PMT_ITEM]
	DROP CONSTRAINT IF EXISTS [XPMTITY_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_EXPROP_PMT_PMT_ITEM
PRINT N'Drop table dbo.PIMS_EXPROP_PMT_PMT_ITEM'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_EXPROP_PMT_PMT_ITEM]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_EXPPMT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_EXPPMT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_EXPPMT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_EXPPMT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_EXPPMT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_EXPPMT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.FORM8_PERSON_ORGANIZATION_TCC
PRINT N'Drop check constraint dbo.FORM8_PERSON_ORGANIZATION_TCC'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT]
	DROP CONSTRAINT IF EXISTS [FORM8_PERSON_ORGANIZATION_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.EXPPMT_PK
PRINT N'Drop primary key constraint dbo.EXPPMT_PK'
GO
ALTER TABLE [dbo].[PIMS_EXPROPRIATION_PAYMENT]
	DROP CONSTRAINT IF EXISTS [EXPPMT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_EXPROPRIATION_PAYMENT
PRINT N'Drop table dbo.PIMS_EXPROPRIATION_PAYMENT'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_EXPROPRIATION_PAYMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_CRQFIN_H_UK
PRINT N'Drop unique constraint dbo.PIMS_CRQFIN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_FINANCIAL_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_CRQFIN_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_CRQFIN_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_CRQFIN_H_PK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_FINANCIAL_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_CRQFIN_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.CRQFIN_PK
PRINT N'Drop primary key constraint dbo.CRQFIN_PK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_FINANCIAL]
	DROP CONSTRAINT IF EXISTS [CRQFIN_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_COMP_REQ_FINANCIAL
PRINT N'Drop table dbo.PIMS_COMP_REQ_FINANCIAL'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_COMP_REQ_FINANCIAL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_FORM_8_ID_SEQ
PRINT N'Create sequence dbo.PIMS_FORM_8_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_FORM_8_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	DROP COLUMN IF EXISTS [LEGACY_STAKEHOLDER], [ALTERNATE_PROJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTEREST_HOLDER
PRINT N'Alter table dbo.PIMS_INTEREST_HOLDER'
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER] DROP CONSTRAINT IF EXISTS [INTHLD_INTEREST_HOLDER_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER] ADD CONSTRAINT [INTHLD_INTEREST_HOLDER_TYPE_CODE_DEF] DEFAULT (N'INTHLDR') FOR [INTEREST_HOLDER_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_FORM_8
PRINT N'Create table dbo.PIMS_FORM_8'
GO
CREATE TABLE [dbo].[PIMS_FORM_8]  ( 
	[FORM_8_ID]                     	bigint NOT NULL CONSTRAINT [FORM8_FORM_8_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_FORM_8_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[ACQUISITION_OWNER_ID]          	bigint NULL,
	[INTEREST_HOLDER_ID]            	bigint NULL,
	[EXPROPRIATING_AUTHORITY]       	bigint NULL,
	[PAYMENT_ITEM_TYPE_CODE]        	nvarchar(20) NULL,
	[DESCRIPTION]                   	nvarchar(2000) NULL,
	[IS_GST_REQUIRED]               	bit NULL CONSTRAINT [FORM8_IS_GST_REQUIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[PRETAX_AMT]                    	money NULL,
	[TAX_AMT]                       	money NULL,
	[TOTAL_AMT]                     	money NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [FORM8_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [FORM8_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [FORM8_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [FORM8_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [FORM8_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [FORM8_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [FORM8_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [FORM8_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [FORM8_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [FORM8_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [FORM8_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [FORM8_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [FORM8_PK] PRIMARY KEY CLUSTERED([FORM_8_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Form 8 description field.  There are lawyer remarks pending.  This field could be used for: - providing remarks particular to an expropriation form, and /or - for any ETL descriptive fields as well as - a place-holder forfields that do not have a mapping' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_8', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if GST is required for this transaction.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_8', 
	@level2type = N'Column', @level2name = N'IS_GST_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Subtotal of the Form 8 payment.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_8', 
	@level2type = N'Column', @level2name = N'PRETAX_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST on the Form 8 oayment.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_8', 
	@level2type = N'Column', @level2name = N'TAX_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Total amount of the Form 8 payment.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_8', 
	@level2type = N'Column', @level2name = N'TOTAL_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the Form 8 payment is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_8', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity continaing the details regarding a Form 8 (Notice of Advance Payment).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FORM_8'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.FORM8_PERSON_ORGANIZATION_TCC
PRINT N'Create check constraint dbo.FORM8_PERSON_ORGANIZATION_TCC'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	ADD CONSTRAINT [FORM8_PERSON_ORGANIZATION_TCC] CHECK ([ACQUISITION_OWNER_ID] IS NULL AND [INTEREST_HOLDER_ID] IS NOT NULL OR [ACQUISITION_OWNER_ID] IS NOT NULL AND [INTEREST_HOLDER_ID] IS NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COMPENSATION_REQUISITION
PRINT N'Alter table dbo.PIMS_COMPENSATION_REQUISITION'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	DROP CONSTRAINT IF EXISTS [ACQPAY_IS_PAYMENT_IN_TRUST_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION]
	DROP COLUMN IF EXISTS [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [ACQUISITION_FILE_PERSON_ID], [LEGACY_PAYEE], [IS_PAYMENT_IN_TRUST], [GST_NUMBER], [FINALIZED_DATE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_PAYEE
PRINT N'Create table dbo.PIMS_ACQUISITION_PAYEE'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_PAYEE]  ( 
	[ACQUISITION_PAYEE_ID]          	bigint NOT NULL CONSTRAINT [ACQPAY_ACQUISITION_PAYEE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_PAYEE_ID_SEQ]),
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL,
	[ACQUISITION_OWNER_ID]          	bigint NULL,
	[INTEREST_HOLDER_ID]            	bigint NULL,
	[ACQUISITION_FILE_PERSON_ID]    	bigint NULL,
	[GST_NUMBER]                    	nvarchar(50) NULL,
	[IS_PAYMENT_IN_TRUST]           	bit NULL CONSTRAINT [ACQPAY_IS_PAYMENT_IN_TRUST_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_DISABLED]                   	bit NULL CONSTRAINT [ACQPAY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACQPAY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACQPAY_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACQPAY_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACQPAY_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACQPAY_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACQPAY_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACQPAY_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACQPAY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACQPAY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACQPAY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACQPAY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQPAY_PK] PRIMARY KEY CLUSTERED([ACQUISITION_PAYEE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the acquisition payee is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_PAYEE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Person receiving a payment from MoTI.  Associates owners, cheques, and compensation requisitions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_PAYEE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_ADJACENT_LAND_TYPE
PRINT N'Create table dbo.PIMS_PROPERTY_ADJACENT_LAND_TYPE'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_ADJACENT_LAND_TYPE]  ( 
	[PROPERTY_ADJACENT_LAND_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                     	nvarchar(200) NOT NULL,
	[IS_DISABLED]                     	bit NOT NULL CONSTRAINT [PRADJL_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                   	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL CONSTRAINT [PRADJL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [PRADJL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [PRADJL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [PRADJL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [PRADJL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRADJL_PK] PRIMARY KEY CLUSTERED([PROPERTY_ADJACENT_LAND_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property adjacent land code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ADJACENT_LAND_TYPE', 
	@level2type = N'Column', @level2name = N'PROPERTY_ADJACENT_LAND_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property adjacent land code description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ADJACENT_LAND_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ADJACENT_LAND_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ADJACENT_LAND_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe property adjacent land type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ADJACENT_LAND_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROP_PROP_ADJACENT_LAND_TYPE
PRINT N'Create table dbo.PIMS_PROP_PROP_ADJACENT_LAND_TYPE'
GO
CREATE TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]  ( 
	[PROP_PROP_ADJACENT_LAND_TYPE_ID] 	bigint NOT NULL CONSTRAINT [PRPALT_PROP_PROP_ADJACENT_LAND_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ADJACENT_LAND_TYPE_ID_SEQ]),
	[PROPERTY_ID]                     	bigint NOT NULL,
	[PROPERTY_ADJACENT_LAND_TYPE_CODE]	nvarchar(20) NOT NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [PRPALT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRPALT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL CONSTRAINT [PRPALT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [PRPALT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [PRPALT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPALT_PK] PRIMARY KEY CLUSTERED([PROP_PROP_ADJACENT_LAND_TYPE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Resolves many-to-many relationship between PIMS_PROPERTY and PIMS_PROPERTY_ADJACENT_LAND_TYPE' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_ADJACENT_LAND_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PRPALT_PROP_ADJACENT_LAND_TYPE_TUC
PRINT N'Create unique constraint dbo.PRPALT_PROP_ADJACENT_LAND_TYPE_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]
	ADD CONSTRAINT [PRPALT_PROP_ADJACENT_LAND_TYPE_TUC]
	UNIQUE ([PROPERTY_ADJACENT_LAND_TYPE_CODE], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_COMP_REQ_FIN_ACTIVITY_SEQ
PRINT N'Create sequence dbo.PIMS_COMP_REQ_FIN_ACTIVITY_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_COMP_REQ_FIN_ACTIVITY_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_COMP_REQ_H120
PRINT N'Create table dbo.PIMS_COMP_REQ_H120'
GO
CREATE TABLE [dbo].[PIMS_COMP_REQ_H120]  ( 
	[COMP_REQ_FIN_ACTIVITY]         	bigint NOT NULL CONSTRAINT [CRH120_COMP_REQ_FIN_ACTIVITY_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_COMP_REQ_FIN_ACTIVITY_SEQ]),
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL,
	[FINANCIAL_ACTIVITY_CODE_ID]    	bigint NOT NULL,
	[PRETAX_AMT]                    	money NULL,
	[TAX_AMT]                       	money NULL,
	[TOTAL_AMT]                     	money NULL,
	[IS_GST_REQUIRED]               	bit NULL CONSTRAINT [CRH120_IS_GST_REQUIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_DISABLED]                   	bit NULL CONSTRAINT [CRH120_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [CRH120_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [CRH120_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [CRH120_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [CRH120_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [CRH120_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [CRH120_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [CRH120_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [CRH120_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [CRH120_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [CRH120_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [CRH120_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CRH120_PK] PRIMARY KEY CLUSTERED([COMP_REQ_FIN_ACTIVITY])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Subtotal of the requisition''s work activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_H120', 
	@level2type = N'Column', @level2name = N'PRETAX_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Taxes on the requisition''s work activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_H120', 
	@level2type = N'Column', @level2name = N'TAX_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Total value of the requisition''s work activity.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_H120', 
	@level2type = N'Column', @level2name = N'TOTAL_AMT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if GST is required for this transaction.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_H120', 
	@level2type = N'Column', @level2name = N'IS_GST_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the requisition is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_H120', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table associating compensation requisitions related to work activities.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_H120'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_PAYEE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_PAYEE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_PAYEE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_PAYEE_HIST
PRINT N'Create table dbo.PIMS_ACQUISITION_PAYEE_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_PAYEE_HIST]  ( 
	[_ACQUISITION_PAYEE_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_PAYEE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ACQUISITION_PAYEE_ID]          	bigint NOT NULL,
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL,
	[ACQUISITION_OWNER_ID]          	bigint NULL,
	[INTEREST_HOLDER_ID]            	bigint NULL,
	[ACQUISITION_FILE_PERSON_ID]    	bigint NULL,
	[GST_NUMBER]                    	nvarchar(50) NULL,
	[IS_PAYMENT_IN_TRUST]           	bit NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQPAY_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_PAYEE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACQPAY_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACQPAY_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE_HIST]
	ADD CONSTRAINT [PIMS_ACQPAY_H_UK]
	UNIQUE ([_ACQUISITION_PAYEE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_COMPENSATION_REQUISITION_HIST
PRINT N'Alter table dbo.PIMS_COMPENSATION_REQUISITION_HIST'
GO
ALTER TABLE [dbo].[PIMS_COMPENSATION_REQUISITION_HIST]
	DROP COLUMN IF EXISTS [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [ACQUISITION_FILE_PERSON_ID], [LEGACY_PAYEE], [IS_PAYMENT_IN_TRUST], [GST_NUMBER], [FINALIZED_DATE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_FORM_8_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_FORM_8_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_FORM_8_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_FORM_8_HIST
PRINT N'Create table dbo.PIMS_FORM_8_HIST'
GO
CREATE TABLE [dbo].[PIMS_FORM_8_HIST]  ( 
	[_FORM_8_HIST_ID]               	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_FORM_8_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[FORM_8_ID]                     	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[ACQUISITION_OWNER_ID]          	bigint NULL,
	[INTEREST_HOLDER_ID]            	bigint NULL,
	[EXPROPRIATING_AUTHORITY]       	bigint NULL,
	[PAYMENT_ITEM_TYPE_CODE]        	nvarchar(20) NULL,
	[DESCRIPTION]                   	nvarchar(2000) NULL,
	[IS_GST_REQUIRED]               	bit NULL,
	[PRETAX_AMT]                    	money NULL,
	[TAX_AMT]                       	money NULL,
	[TOTAL_AMT]                     	money NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_FORM8_H_PK] PRIMARY KEY CLUSTERED([_FORM_8_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_FORM8_H_UK
PRINT N'Create unique constraint dbo.PIMS_FORM8_H_UK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8_HIST]
	ADD CONSTRAINT [PIMS_FORM8_H_UK]
	UNIQUE ([_FORM_8_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST]
	DROP COLUMN IF EXISTS [LEGACY_STAKEHOLDER], [ALTERNATE_PROJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_COMP_REQ_H120_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_COMP_REQ_H120_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_COMP_REQ_H120_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_COMP_REQ_H120_HIST
PRINT N'Create table dbo.PIMS_COMP_REQ_H120_HIST'
GO
CREATE TABLE [dbo].[PIMS_COMP_REQ_H120_HIST]  ( 
	[_COMP_REQ_H120_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_COMP_REQ_H120_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[COMP_REQ_FIN_ACTIVITY]         	bigint NOT NULL,
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL,
	[FINANCIAL_ACTIVITY_CODE_ID]    	bigint NOT NULL,
	[PRETAX_AMT]                    	money NULL,
	[TAX_AMT]                       	money NULL,
	[TOTAL_AMT]                     	money NULL,
	[IS_GST_REQUIRED]               	bit NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_CRH120_H_PK] PRIMARY KEY CLUSTERED([_COMP_REQ_H120_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_CRH120_H_UK
PRINT N'Create unique constraint dbo.PIMS_CRH120_H_UK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_H120_HIST]
	ADD CONSTRAINT [PIMS_CRH120_H_UK]
	UNIQUE ([_COMP_REQ_H120_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_INTEREST_HOLDER_HIST
PRINT N'Alter table dbo.PIMS_INTEREST_HOLDER_HIST'
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_INTEREST_HOLDER_HIST' 
                   AND col.NAME = 'INTEREST_HOLDER_TYPE_CODE')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TABLE [dbo].[PIMS_INTEREST_HOLDER_HIST] ADD DEFAULT (N'INTHLDR') FOR [INTEREST_HOLDER_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.FORM8_INTEREST_HOLDER_ID_IDX
PRINT N'Create index dbo.FORM8_INTEREST_HOLDER_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [FORM8_INTEREST_HOLDER_ID_IDX]
	ON [dbo].[PIMS_FORM_8]([INTEREST_HOLDER_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.FORM8_ACQUISITION_OWNER_ID_IDX
PRINT N'Create index dbo.FORM8_ACQUISITION_OWNER_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [FORM8_ACQUISITION_OWNER_ID_IDX]
	ON [dbo].[PIMS_FORM_8]([ACQUISITION_OWNER_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.FORM8_PAYMENT_ITEM_TYPE_CODE_IDX
PRINT N'Create index dbo.FORM8_PAYMENT_ITEM_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [FORM8_PAYMENT_ITEM_TYPE_CODE_IDX]
	ON [dbo].[PIMS_FORM_8]([PAYMENT_ITEM_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPAY_ACQUISITION_OWNER_ID_IDX
PRINT N'Create index dbo.ACQPAY_ACQUISITION_OWNER_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPAY_ACQUISITION_OWNER_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_PAYEE]([ACQUISITION_OWNER_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPALT_PROPERTY_ADJACENT_LAND_TYPE_CODE_IDX
PRINT N'Create index dbo.PRPALT_PROPERTY_ADJACENT_LAND_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPALT_PROPERTY_ADJACENT_LAND_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]([PROPERTY_ADJACENT_LAND_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.FORM8_EXPROPRIATING_AUTHORITY_IDX
PRINT N'Create index dbo.FORM8_EXPROPRIATING_AUTHORITY_IDX'
GO
CREATE NONCLUSTERED INDEX [FORM8_EXPROPRIATING_AUTHORITY_IDX]
	ON [dbo].[PIMS_FORM_8]([EXPROPRIATING_AUTHORITY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPAY_ACQUISITION_FILE_PERSON_ID_IDX
PRINT N'Create index dbo.ACQPAY_ACQUISITION_FILE_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPAY_ACQUISITION_FILE_PERSON_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_PAYEE]([ACQUISITION_FILE_PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPAY_COMPENSATION_REQUISITION_ID_IDX
PRINT N'Create index dbo.ACQPAY_COMPENSATION_REQUISITION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPAY_COMPENSATION_REQUISITION_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_PAYEE]([COMPENSATION_REQUISITION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPALT_PROPERTY_ID_IDX
PRINT N'Create index dbo.PRPALT_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPALT_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACQPAY_INTEREST_HOLDER_ID_IDX
PRINT N'Create index dbo.ACQPAY_INTEREST_HOLDER_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACQPAY_INTEREST_HOLDER_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_PAYEE]([INTEREST_HOLDER_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.CRH120_COMPENSATION_REQUISITION_ID_IDX
PRINT N'Create index dbo.CRH120_COMPENSATION_REQUISITION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [CRH120_COMPENSATION_REQUISITION_ID_IDX]
	ON [dbo].[PIMS_COMP_REQ_H120]([COMPENSATION_REQUISITION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.FORM8_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.FORM8_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [FORM8_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_FORM_8]([ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.CRH120_FINANCIAL_ACTIVITY_CODE_ID_IDX
PRINT N'Create index dbo.CRH120_FINANCIAL_ACTIVITY_CODE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [CRH120_FINANCIAL_ACTIVITY_CODE_ID_IDX]
	ON [dbo].[PIMS_COMP_REQ_H120]([FINANCIAL_ACTIVITY_CODE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_I_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE ("ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUMBER",
      "LEGACY_FILE_NUMBER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "COMPLETION_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUMBER",
      "LEGACY_FILE_NUMBER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "COMPLETION_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_A_S_IUD_TR] ON PIMS_ACQUISITION_PAYEE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_PAYEE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_PAYEE_ID in (select ACQUISITION_PAYEE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_PAYEE_HIST ([ACQUISITION_PAYEE_ID], [COMPENSATION_REQUISITION_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [ACQUISITION_FILE_PERSON_ID], [GST_NUMBER], [IS_PAYMENT_IN_TRUST], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_PAYEE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_PAYEE_ID], [COMPENSATION_REQUISITION_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [ACQUISITION_FILE_PERSON_ID], [GST_NUMBER], [IS_PAYMENT_IN_TRUST], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_PAYEE_H_ID_SEQ]) as [_ACQUISITION_PAYEE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CMPREQ_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_CMPREQ_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CMPREQ_I_S_I_TR] ON PIMS_COMPENSATION_REQUISITION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_COMPENSATION_REQUISITION ("COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID",
      "CHART_OF_ACCOUNTS_ID",
      "RESPONSIBILITY_ID",
      "YEARLY_FINANCIAL_ID",
      "IS_DRAFT",
      "FISCAL_YEAR",
      "AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT",
      "GENERATION_DT",
      "SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID",
      "CHART_OF_ACCOUNTS_ID",
      "RESPONSIBILITY_ID",
      "YEARLY_FINANCIAL_ID",
      "IS_DRAFT",
      "FISCAL_YEAR",
      "AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT",
      "GENERATION_DT",
      "SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CMPREQ_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_CMPREQ_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CMPREQ_A_S_IUD_TR] ON PIMS_COMPENSATION_REQUISITION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_COMPENSATION_REQUISITION_HIST set END_DATE_HIST = @curr_date where COMPENSATION_REQUISITION_ID in (select COMPENSATION_REQUISITION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_COMPENSATION_REQUISITION_HIST ([COMPENSATION_REQUISITION_ID], [ACQUISITION_FILE_ID], [CHART_OF_ACCOUNTS_ID], [RESPONSIBILITY_ID], [YEARLY_FINANCIAL_ID], [IS_DRAFT], [FISCAL_YEAR], [AGREEMENT_DT], [EXPROP_NOTICE_SERVED_DT], [EXPROP_VESTING_DT], [GENERATION_DT], [SPECIAL_INSTRUCTION], [DETAILED_REMARKS], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _COMPENSATION_REQUISITION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [COMPENSATION_REQUISITION_ID], [ACQUISITION_FILE_ID], [CHART_OF_ACCOUNTS_ID], [RESPONSIBILITY_ID], [YEARLY_FINANCIAL_ID], [IS_DRAFT], [FISCAL_YEAR], [AGREEMENT_DT], [EXPROP_NOTICE_SERVED_DT], [EXPROP_VESTING_DT], [GENERATION_DT], [SPECIAL_INSTRUCTION], [DETAILED_REMARKS], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_COMPENSATION_REQUISITION_H_ID_SEQ]) as [_COMPENSATION_REQUISITION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRADJL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRADJL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRADJL_I_S_I_TR] ON PIMS_PROPERTY_ADJACENT_LAND_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ADJACENT_LAND_TYPE ("PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;



GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CRH120_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CRH120_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CRH120_I_S_U_TR] ON PIMS_COMP_REQ_H120 INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.COMP_REQ_FIN_ACTIVITY = deleted.COMP_REQ_FIN_ACTIVITY)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COMP_REQ_H120
    set "COMP_REQ_FIN_ACTIVITY" = inserted."COMP_REQ_FIN_ACTIVITY",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "FINANCIAL_ACTIVITY_CODE_ID" = inserted."FINANCIAL_ACTIVITY_CODE_ID",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "TAX_AMT" = inserted."TAX_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "IS_GST_REQUIRED" = inserted."IS_GST_REQUIRED",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COMP_REQ_H120
    inner join inserted
    on (PIMS_COMP_REQ_H120.COMP_REQ_FIN_ACTIVITY = inserted.COMP_REQ_FIN_ACTIVITY);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPALT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPALT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPALT_I_S_U_TR] ON PIMS_PROP_PROP_ADJACENT_LAND_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_ADJACENT_LAND_TYPE_ID = deleted.PROP_PROP_ADJACENT_LAND_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_ADJACENT_LAND_TYPE
    set "PROP_PROP_ADJACENT_LAND_TYPE_ID" = inserted."PROP_PROP_ADJACENT_LAND_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_ADJACENT_LAND_TYPE_CODE" = inserted."PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ADJACENT_LAND_TYPE
    inner join inserted
    on (PIMS_PROP_PROP_ADJACENT_LAND_TYPE.PROP_PROP_ADJACENT_LAND_TYPE_ID = inserted.PROP_PROP_ADJACENT_LAND_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_FORM8_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_FORM8_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_FORM8_A_S_IUD_TR] ON PIMS_FORM_8 FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_FORM_8_HIST set END_DATE_HIST = @curr_date where FORM_8_ID in (select FORM_8_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_FORM_8_HIST ([FORM_8_ID], [ACQUISITION_FILE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [EXPROPRIATING_AUTHORITY], [PAYMENT_ITEM_TYPE_CODE], [DESCRIPTION], [IS_GST_REQUIRED], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _FORM_8_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [FORM_8_ID], [ACQUISITION_FILE_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [EXPROPRIATING_AUTHORITY], [PAYMENT_ITEM_TYPE_CODE], [DESCRIPTION], [IS_GST_REQUIRED], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_FORM_8_H_ID_SEQ]) as [_FORM_8_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_FORM8_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_FORM8_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_FORM8_I_S_U_TR] ON PIMS_FORM_8 INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.FORM_8_ID = deleted.FORM_8_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_FORM_8
    set "FORM_8_ID" = inserted."FORM_8_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "EXPROPRIATING_AUTHORITY" = inserted."EXPROPRIATING_AUTHORITY",
      "PAYMENT_ITEM_TYPE_CODE" = inserted."PAYMENT_ITEM_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_GST_REQUIRED" = inserted."IS_GST_REQUIRED",
      "PRETAX_AMT" = inserted."PRETAX_AMT",
      "TAX_AMT" = inserted."TAX_AMT",
      "TOTAL_AMT" = inserted."TOTAL_AMT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_FORM_8
    inner join inserted
    on (PIMS_FORM_8.FORM_8_ID = inserted.FORM_8_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPALT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPALT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPALT_I_S_I_TR] ON PIMS_PROP_PROP_ADJACENT_LAND_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_ADJACENT_LAND_TYPE ("PROP_PROP_ADJACENT_LAND_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROP_PROP_ADJACENT_LAND_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;



GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRADJL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRADJL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRADJL_I_S_U_TR] ON PIMS_PROPERTY_ADJACENT_LAND_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ADJACENT_LAND_TYPE_CODE = deleted.PROPERTY_ADJACENT_LAND_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ADJACENT_LAND_TYPE
    set "PROPERTY_ADJACENT_LAND_TYPE_CODE" = inserted."PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ADJACENT_LAND_TYPE
    inner join inserted
    on (PIMS_PROPERTY_ADJACENT_LAND_TYPE.PROPERTY_ADJACENT_LAND_TYPE_CODE = inserted.PROPERTY_ADJACENT_LAND_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_ID in (select ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_HIST ([ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [FILE_NAME], [FILE_NO], [FILE_NUMBER], [LEGACY_FILE_NUMBER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [COMPLETION_DATE], [PAIMS_ACQUISITION_FILE_ID], [TOTAL_ALLOWABLE_COMPENSATION], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [FILE_NAME], [FILE_NO], [FILE_NUMBER], [LEGACY_FILE_NUMBER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [COMPLETION_DATE], [PAIMS_ACQUISITION_FILE_ID], [TOTAL_ALLOWABLE_COMPENSATION], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_H_ID_SEQ]) as [_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_I_S_I_TR] ON PIMS_ACQUISITION_PAYEE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_PAYEE ("ACQUISITION_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_PERSON_ID",
      "GST_NUMBER",
      "IS_PAYMENT_IN_TRUST",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_PERSON_ID",
      "GST_NUMBER",
      "IS_PAYMENT_IN_TRUST",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CRH120_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_CRH120_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CRH120_A_S_IUD_TR] ON PIMS_COMP_REQ_H120 FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_COMP_REQ_H120_HIST set END_DATE_HIST = @curr_date where COMP_REQ_FIN_ACTIVITY in (select COMP_REQ_FIN_ACTIVITY from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_COMP_REQ_H120_HIST ([COMP_REQ_FIN_ACTIVITY], [COMPENSATION_REQUISITION_ID], [FINANCIAL_ACTIVITY_CODE_ID], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [IS_GST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _COMP_REQ_H120_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [COMP_REQ_FIN_ACTIVITY], [COMPENSATION_REQUISITION_ID], [FINANCIAL_ACTIVITY_CODE_ID], [PRETAX_AMT], [TAX_AMT], [TOTAL_AMT], [IS_GST_REQUIRED], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_COMP_REQ_H120_H_ID_SEQ]) as [_COMP_REQ_H120_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CRH120_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_CRH120_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CRH120_I_S_I_TR] ON PIMS_COMP_REQ_H120 INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_COMP_REQ_H120 ("COMP_REQ_FIN_ACTIVITY",
      "COMPENSATION_REQUISITION_ID",
      "FINANCIAL_ACTIVITY_CODE_ID",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "IS_GST_REQUIRED",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "COMP_REQ_FIN_ACTIVITY",
      "COMPENSATION_REQUISITION_ID",
      "FINANCIAL_ACTIVITY_CODE_ID",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "IS_GST_REQUIRED",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CMPREQ_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CMPREQ_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CMPREQ_I_S_U_TR] ON PIMS_COMPENSATION_REQUISITION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.COMPENSATION_REQUISITION_ID = deleted.COMPENSATION_REQUISITION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COMPENSATION_REQUISITION
    set "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "CHART_OF_ACCOUNTS_ID" = inserted."CHART_OF_ACCOUNTS_ID",
      "RESPONSIBILITY_ID" = inserted."RESPONSIBILITY_ID",
      "YEARLY_FINANCIAL_ID" = inserted."YEARLY_FINANCIAL_ID",
      "IS_DRAFT" = inserted."IS_DRAFT",
      "FISCAL_YEAR" = inserted."FISCAL_YEAR",
      "AGREEMENT_DT" = inserted."AGREEMENT_DT",
      "EXPROP_NOTICE_SERVED_DT" = inserted."EXPROP_NOTICE_SERVED_DT",
      "EXPROP_VESTING_DT" = inserted."EXPROP_VESTING_DT",
      "GENERATION_DT" = inserted."GENERATION_DT",
      "SPECIAL_INSTRUCTION" = inserted."SPECIAL_INSTRUCTION",
      "DETAILED_REMARKS" = inserted."DETAILED_REMARKS",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COMPENSATION_REQUISITION
    inner join inserted
    on (PIMS_COMPENSATION_REQUISITION.COMPENSATION_REQUISITION_ID = inserted.COMPENSATION_REQUISITION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_FORM8_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_FORM8_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_FORM8_I_S_I_TR] ON PIMS_FORM_8 INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_FORM_8 ("FORM_8_ID",
      "ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "EXPROPRIATING_AUTHORITY",
      "PAYMENT_ITEM_TYPE_CODE",
      "DESCRIPTION",
      "IS_GST_REQUIRED",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "FORM_8_ID",
      "ACQUISITION_FILE_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "EXPROPRIATING_AUTHORITY",
      "PAYMENT_ITEM_TYPE_CODE",
      "DESCRIPTION",
      "IS_GST_REQUIRED",
      "PRETAX_AMT",
      "TAX_AMT",
      "TOTAL_AMT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQNFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQNFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_U_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_ID = deleted.ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE
    set "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_NO" = inserted."FILE_NO",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "LEGACY_FILE_NUMBER" = inserted."LEGACY_FILE_NUMBER",
      "FUNDING_OTHER" = inserted."FUNDING_OTHER",
      "ASSIGNED_DATE" = inserted."ASSIGNED_DATE",
      "DELIVERY_DATE" = inserted."DELIVERY_DATE",
      "COMPLETION_DATE" = inserted."COMPLETION_DATE",
      "PAIMS_ACQUISITION_FILE_ID" = inserted."PAIMS_ACQUISITION_FILE_ID",
      "TOTAL_ALLOWABLE_COMPENSATION" = inserted."TOTAL_ALLOWABLE_COMPENSATION",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE
    inner join inserted
    on (PIMS_ACQUISITION_FILE.ACQUISITION_FILE_ID = inserted.ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQPAY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQPAY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQPAY_I_S_U_TR] ON PIMS_ACQUISITION_PAYEE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_PAYEE_ID = deleted.ACQUISITION_PAYEE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_PAYEE
    set "ACQUISITION_PAYEE_ID" = inserted."ACQUISITION_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_PERSON_ID" = inserted."ACQUISITION_FILE_PERSON_ID",
      "GST_NUMBER" = inserted."GST_NUMBER",
      "IS_PAYMENT_IN_TRUST" = inserted."IS_PAYMENT_IN_TRUST",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_PAYEE
    inner join inserted
    on (PIMS_ACQUISITION_PAYEE.ACQUISITION_PAYEE_ID = inserted.ACQUISITION_PAYEE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_FORM8_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	ADD CONSTRAINT [PIM_ORG_PIM_FORM8_FK]
	FOREIGN KEY([EXPROPRIATING_AUTHORITY])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_FORM8_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_FORM8_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQOWN_PIM_FORM8_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQOWN_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	ADD CONSTRAINT [PIM_ACQOWN_PIM_FORM8_FK]
	FOREIGN KEY([ACQUISITION_OWNER_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_OWNER]([ACQUISITION_OWNER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PMTITM_PIM_FORM8_FK
PRINT N'Create foreign key constraint dbo.PIM_PMTITM_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	ADD CONSTRAINT [PIM_PMTITM_PIM_FORM8_FK]
	FOREIGN KEY([PAYMENT_ITEM_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PAYMENT_ITEM_TYPE]([PAYMENT_ITEM_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_INTHLD_PIM_FORM8_FK
PRINT N'Create foreign key constraint dbo.PIM_INTHLD_PIM_FORM8_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_8]
	ADD CONSTRAINT [PIM_INTHLD_PIM_FORM8_FK]
	FOREIGN KEY([INTEREST_HOLDER_ID])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER]([INTEREST_HOLDER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CMPREQ_PIM_ACQPAY_FK
PRINT N'Create foreign key constraint dbo.PIM_CMPREQ_PIM_ACQPAY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	ADD CONSTRAINT [PIM_CMPREQ_PIM_ACQPAY_FK]
	FOREIGN KEY([COMPENSATION_REQUISITION_ID])
	REFERENCES [dbo].[PIMS_COMPENSATION_REQUISITION]([COMPENSATION_REQUISITION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_INTHLD_PIM_ACQPAY_FK
PRINT N'Create foreign key constraint dbo.PIM_INTHLD_PIM_ACQPAY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	ADD CONSTRAINT [PIM_INTHLD_PIM_ACQPAY_FK]
	FOREIGN KEY([INTEREST_HOLDER_ID])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER]([INTEREST_HOLDER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQOWN_PIM_ACQPAY_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQOWN_PIM_ACQPAY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	ADD CONSTRAINT [PIM_ACQOWN_PIM_ACQPAY_FK]
	FOREIGN KEY([ACQUISITION_OWNER_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_OWNER]([ACQUISITION_OWNER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQPER_PIM_ACQPAY_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQPER_PIM_ACQPAY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_PAYEE]
	ADD CONSTRAINT [PIM_ACQPER_PIM_ACQPAY_FK]
	FOREIGN KEY([ACQUISITION_FILE_PERSON_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE_PERSON]([ACQUISITION_FILE_PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPALT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPALT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPALT_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRADJL_PIM_PRPALT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRADJL_PIM_PRPALT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]
	ADD CONSTRAINT [PIM_PRADJL_PIM_PRPALT_FK]
	FOREIGN KEY([PROPERTY_ADJACENT_LAND_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_ADJACENT_LAND_TYPE]([PROPERTY_ADJACENT_LAND_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CMPREQ_PIM_CRH120_FK
PRINT N'Create foreign key constraint dbo.PIM_CMPREQ_PIM_CRH120_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_H120]
	ADD CONSTRAINT [PIM_CMPREQ_PIM_CRH120_FK]
	FOREIGN KEY([COMPENSATION_REQUISITION_ID])
	REFERENCES [dbo].[PIMS_COMPENSATION_REQUISITION]([COMPENSATION_REQUISITION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_FINACT_PIM_CRH120_FK
PRINT N'Create foreign key constraint dbo.PIM_FINACT_PIM_CRH120_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_H120]
	ADD CONSTRAINT [PIM_FINACT_PIM_CRH120_FK]
	FOREIGN KEY([FINANCIAL_ACTIVITY_CODE_ID])
	REFERENCES [dbo].[PIMS_FINANCIAL_ACTIVITY_CODE]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_IHPRIN_PIM_PIHITY_FK
PRINT N'Create foreign key constraint dbo.PIM_IHPRIN_PIM_PIHITY_FK'
GO
ALTER TABLE [dbo].[PIMS_PROP_INTHLDR_INTEREST_TYPE]
	ADD CONSTRAINT [PIM_IHPRIN_PIM_PIHITY_FK]
	FOREIGN KEY([PIMS_INTHLDR_PROP_INTEREST_ID])
	REFERENCES [dbo].[PIMS_INTHLDR_PROP_INTEREST]([PIMS_INTHLDR_PROP_INTEREST_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_EXPROP_PMT_PMT_ITEM_HIST
PRINT N'Drop table dbo.PIMS_EXPROP_PMT_PMT_ITEM_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_EXPROP_PMT_PMT_ITEM_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_EXPROP_PMT_PMT_ITEM_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_EXPROP_PMT_PMT_ITEM_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_EXPROP_PMT_PMT_ITEM_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_EXPROP_PMT_PMT_ITEM_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_EXPROP_PMT_PMT_ITEM_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_EXPROP_PMT_PMT_ITEM_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_EXPROPRIATION_PAYMENT_HIST
PRINT N'Drop table dbo.PIMS_EXPROPRIATION_PAYMENT_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_EXPROPRIATION_PAYMENT_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_EXPROPRIATION_PAYMENT_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_EXPROPRIATION_PAYMENT_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_EXPROPRIATION_PAYMENT_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_EXPROPRIATION_PAYMENT_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_EXPROPRIATION_PAYMENT_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_EXPROPRIATION_PAYMENT_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_COMP_REQ_FINANCIAL_HIST
PRINT N'Drop table dbo.PIMS_COMP_REQ_FINANCIAL_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_COMP_REQ_FINANCIAL_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_COMP_REQ_FINANCIAL_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_COMP_REQ_FINANCIAL_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_COMP_REQ_FINANCIAL_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_COMP_REQ_FINANCIAL_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_COMP_REQ_FINANCIAL_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_COMP_REQ_FINANCIAL_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
