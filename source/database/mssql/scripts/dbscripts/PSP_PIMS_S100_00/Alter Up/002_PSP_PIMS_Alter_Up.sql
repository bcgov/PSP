-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Wed Feb 12 13:23:31 PST 2025
-- Execute this script on:
-- 		PSP_PIMS_S99_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S100_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSKCRQ_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LSKCRQ_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSKCRQ_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSKCRQ_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LSKCRQ_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSKCRQ_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LSKCRQ_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LSKCRQ_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LSKCRQ_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_CMPREQ_PIM_LSKCRQ_FK
PRINT N'Drop foreign key constraint dbo.PIM_CMPREQ_PIM_LSKCRQ_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ]
	DROP CONSTRAINT IF EXISTS [PIM_CMPREQ_PIM_LSKCRQ_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LSTKHL_PIM_LSKCRQ_FK
PRINT N'Drop foreign key constraint dbo.PIM_LSTKHL_PIM_LSKCRQ_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ]
	DROP CONSTRAINT IF EXISTS [PIM_LSTKHL_PIM_LSKCRQ_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQOWN_PIM_CMPRQP_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQOWN_PIM_CMPRQP_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_PAYEE]
	DROP CONSTRAINT IF EXISTS [PIM_ACQOWN_PIM_CMPRQP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_INTHLD_PIM_CMPRQP_FK
PRINT N'Drop foreign key constraint dbo.PIM_INTHLD_PIM_CMPRQP_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_PAYEE]
	DROP CONSTRAINT IF EXISTS [PIM_INTHLD_PIM_CMPRQP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNTM_PIM_CMPRQP_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNTM_PIM_CMPRQP_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_PAYEE]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNTM_PIM_CMPRQP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_CMPREQ_PIM_CMPRQP_FK
PRINT N'Drop foreign key constraint dbo.PIM_CMPREQ_PIM_CMPRQP_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_PAYEE]
	DROP CONSTRAINT IF EXISTS [PIM_CMPREQ_PIM_CMPRQP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique index dbo.LSKCRQ_LS_TNT_COMP_REQ_IDX
PRINT N'Drop unique index dbo.LSKCRQ_LS_TNT_COMP_REQ_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ].[LSKCRQ_LS_TNT_COMP_REQ_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSKCRQ_LEASE_STAKEHOLDER_ID_IDX
PRINT N'Drop index dbo.LSKCRQ_LEASE_STAKEHOLDER_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ].[LSKCRQ_LEASE_STAKEHOLDER_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LSKCRQ_COMPENSATION_REQUISITION_ID_IDX
PRINT N'Drop index dbo.LSKCRQ_COMPENSATION_REQUISITION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ].[LSKCRQ_COMPENSATION_REQUISITION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPRQP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CMPRQP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPRQP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPRQP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_CMPRQP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPRQP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CMPRQP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_CMPRQP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CMPRQP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.CMPRQP_INTEREST_HOLDER_ID_IDX
PRINT N'Drop index dbo.CMPRQP_INTEREST_HOLDER_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_COMP_REQ_PAYEE].[CMPRQP_INTEREST_HOLDER_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.CMPRQP_COMPENSATION_REQUISITION_ID_IDX
PRINT N'Drop index dbo.CMPRQP_COMPENSATION_REQUISITION_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_COMP_REQ_PAYEE].[CMPRQP_COMPENSATION_REQUISITION_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.CMPRQP_ACQUISITION_OWNER_ID_IDX
PRINT N'Drop index dbo.CMPRQP_ACQUISITION_OWNER_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_COMP_REQ_PAYEE].[CMPRQP_ACQUISITION_OWNER_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.CMPRQP_ACQUISITION_FILE_TEAM_ID_IDX
PRINT N'Drop index dbo.CMPRQP_ACQUISITION_FILE_TEAM_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_COMP_REQ_PAYEE].[CMPRQP_ACQUISITION_FILE_TEAM_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LSKCRQ_PK
PRINT N'Drop primary key constraint dbo.LSKCRQ_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ]
	DROP CONSTRAINT IF EXISTS [LSKCRQ_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_STAKEHOLDER_COMP_REQ
PRINT N'Drop table dbo.PIMS_LEASE_STAKEHOLDER_COMP_REQ'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_LSKCRQ_H_UK
PRINT N'Drop unique constraint dbo.PIMS_LSKCRQ_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_LSKCRQ_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_LSKCRQ_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_LSKCRQ_H_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_LSKCRQ_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST
PRINT N'Drop table dbo.PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_STAKEHOLDER_COMP_REQ_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.CMPRQP_PK
PRINT N'Drop primary key constraint dbo.CMPRQP_PK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_PAYEE]
	DROP CONSTRAINT IF EXISTS [CMPRQP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_COMP_REQ_PAYEE
PRINT N'Drop table dbo.PIMS_COMP_REQ_PAYEE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_COMP_REQ_PAYEE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_CMPRQP_H_UK
PRINT N'Drop unique constraint dbo.PIMS_CMPRQP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_PAYEE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_CMPRQP_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.DSPPUR_%column%_TCC
PRINT N'Drop check constraint dbo.DSPPUR_%column%_TCC'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_PURCHASER]
	DROP CONSTRAINT IF EXISTS [DSPPUR_%column%_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.DSPPAG_%column%_TCC
PRINT N'Drop check constraint dbo.DSPPAG_%column%_TCC'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT]
	DROP CONSTRAINT IF EXISTS [DSPPAG_%column%_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.DSPPSL_%column%_TCC
PRINT N'Drop check constraint dbo.DSPPSL_%column%_TCC'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR]
	DROP CONSTRAINT IF EXISTS [DSPPSL_%column%_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_COMP_REQ_LEASE_PAYEE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_COMP_REQ_LEASE_PAYEE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_COMP_REQ_LEASE_PAYEE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LL_TEAM_PROFILE_TYPE
PRINT N'Create table dbo.PIMS_LL_TEAM_PROFILE_TYPE'
GO
CREATE TABLE [dbo].[PIMS_LL_TEAM_PROFILE_TYPE]  ( 
	[LL_TEAM_PROFILE_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LLPRTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [LLPRTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LLPRTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LLPRTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LLPRTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LLPRTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LLPRTY_PK] PRIMARY KEY CLUSTERED([LL_TEAM_PROFILE_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the lease and license profile (role).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'LL_TEAM_PROFILE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the lease and license profile (role).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LL_TEAM_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the lease and license team profiles (roles).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LL_TEAM_PROFILE_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_LICENSE_TEAM
PRINT N'Create table dbo.PIMS_LEASE_LICENSE_TEAM'
GO
CREATE TABLE [dbo].[PIMS_LEASE_LICENSE_TEAM]  ( 
	[LEASE_LICENSE_TEAM_ID]         	bigint NOT NULL CONSTRAINT [LSLITM_LEASE_LICENSE_TEAM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_LICENSE_TEAM_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[LL_TEAM_PROFILE_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LSLITM_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LSLITM_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LSLITM_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LSLITM_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LSLITM_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LSLITM_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LSLITM_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LSLITM_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LSLITM_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LSLITM_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LSLITM_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSLITM_PK] PRIMARY KEY CLUSTERED([LEASE_LICENSE_TEAM_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'LEASE_LICENSE_TEAM_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'LEASE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the team member (PIMS_PERSON).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'PERSON_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the team member''s organization (PIMS_ORGANIZATION).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'ORGANIZATION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the primary contact for the organization  (PIMS_PERSON).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'PRIMARY_CONTACT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LL_TEAM_PROFILE_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'LL_TEAM_PROFILE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing lease and license team members.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_LICENSE_TEAM'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.LSLITM_LEASE_TEAM_PROFILE_TUC
PRINT N'Create unique constraint dbo.LSLITM_LEASE_TEAM_PROFILE_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_LICENSE_TEAM]
	ADD CONSTRAINT [LSLITM_LEASE_TEAM_PROFILE_TUC]
	UNIQUE ([LEASE_ID], [LL_TEAM_PROFILE_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_COMP_REQ_LEASE_PAYEE
PRINT N'Create table dbo.PIMS_COMP_REQ_LEASE_PAYEE'
GO
CREATE TABLE [dbo].[PIMS_COMP_REQ_LEASE_PAYEE]  ( 
	[COMP_REQ_LEASE_PAYEE_ID]       	bigint NOT NULL CONSTRAINT [CRLESP_COMP_REQ_LEASE_PAYEE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_COMP_REQ_LEASE_PAYEE_ID_SEQ]),
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL,
	[LEASE_STAKEHOLDER_ID]          	bigint NULL,
	[LEASE_LICENSE_TEAM_ID]         	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [CRLESP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [CRLESP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [CRLESP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [CRLESP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [CRLESP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [CRLESP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [CRLESP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [CRLESP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [CRLESP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [CRLESP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [CRLESP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CRLESP_PK] PRIMARY KEY CLUSTERED([COMP_REQ_LEASE_PAYEE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'COMP_REQ_LEASE_PAYEE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_COMPENSATION_REQUISITION table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'COMPENSATION_REQUISITION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the LEASE_STAKEHOLDER table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'LEASE_STAKEHOLDER_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_LICENSE_TEAM table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'LEASE_LICENSE_TEAM_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update.  If this is done then the update will succeed, provided that the row was not updated by any' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was updated by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User directory of the user that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Desribes the relationship between a lease stakeholder and a compensation requisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_LEASE_PAYEE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_COMP_REQ_ACQ_PAYEE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_COMP_REQ_ACQ_PAYEE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_COMP_REQ_ACQ_PAYEE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_COMP_REQ_ACQ_PAYEE
PRINT N'Create table dbo.PIMS_COMP_REQ_ACQ_PAYEE'
GO
CREATE TABLE [dbo].[PIMS_COMP_REQ_ACQ_PAYEE]  ( 
	[COMP_REQ_ACQ_PAYEE_ID]         	bigint NOT NULL CONSTRAINT [CRACQP_COMP_REQ_ACQ_PAYEE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_COMP_REQ_ACQ_PAYEE_ID_SEQ]),
	[COMPENSATION_REQUISITION_ID]   	bigint NULL,
	[ACQUISITION_OWNER_ID]          	bigint NULL,
	[INTEREST_HOLDER_ID]            	bigint NULL,
	[ACQUISITION_FILE_TEAM_ID]      	bigint NULL,
	[LEGACY_PAYEE]                  	nvarchar(1000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [CRACQP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [CRACQP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [CRACQP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [CRACQP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [CRACQP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [CRACQP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [CRACQP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [CRACQP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [CRACQP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [CRACQP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [CRACQP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CRACQP_PK] PRIMARY KEY CLUSTERED([COMP_REQ_ACQ_PAYEE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'COMP_REQ_ACQ_PAYEE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the PIMS_COMPENSATION_REQUISITION table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'COMPENSATION_REQUISITION_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the PIMS_ACQUISITION_OWNER table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_OWNER_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the PIMS_INTEREST_HOLDER table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'INTEREST_HOLDER_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the PIMS_ACQUISITION_FILE_TEAM table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FILE_TEAM_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payee where only the name is known from the PAIMS system,' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'LEGACY_PAYEE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table to support multiple payees on a compensation requisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_COMP_REQ_ACQ_PAYEE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_COMP_REQ_LEASE_PAYEE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_COMP_REQ_LEASE_PAYEE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_COMP_REQ_LEASE_PAYEE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_COMP_REQ_LEASE_PAYEE_HIST
PRINT N'Create table dbo.PIMS_COMP_REQ_LEASE_PAYEE_HIST'
GO
CREATE TABLE [dbo].[PIMS_COMP_REQ_LEASE_PAYEE_HIST]  ( 
	[_COMP_REQ_LEASE_PAYEE_HIST_ID] 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_COMP_REQ_LEASE_PAYEE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[COMP_REQ_LEASE_PAYEE_ID]       	bigint NOT NULL,
	[COMPENSATION_REQUISITION_ID]   	bigint NOT NULL,
	[LEASE_STAKEHOLDER_ID]          	bigint NULL,
	[LEASE_LICENSE_TEAM_ID]         	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_CRLESP_H_PK] PRIMARY KEY CLUSTERED([_COMP_REQ_LEASE_PAYEE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_CRLESP_H_UK
PRINT N'Create unique constraint dbo.PIMS_CRLESP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_LEASE_PAYEE_HIST]
	ADD CONSTRAINT [PIMS_CRLESP_H_UK]
	UNIQUE ([_COMP_REQ_LEASE_PAYEE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_COMP_REQ_ACQ_PAYEE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_COMP_REQ_ACQ_PAYEE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_COMP_REQ_ACQ_PAYEE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_COMP_REQ_ACQ_PAYEE_HIST
PRINT N'Create table dbo.PIMS_COMP_REQ_ACQ_PAYEE_HIST'
GO
CREATE TABLE [dbo].[PIMS_COMP_REQ_ACQ_PAYEE_HIST]  ( 
	[_COMP_REQ_ACQ_PAYEE_HIST_ID]   	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_COMP_REQ_ACQ_PAYEE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[COMP_REQ_ACQ_PAYEE_ID]         	bigint NOT NULL,
	[COMPENSATION_REQUISITION_ID]   	bigint NULL,
	[ACQUISITION_OWNER_ID]          	bigint NULL,
	[INTEREST_HOLDER_ID]            	bigint NULL,
	[ACQUISITION_FILE_TEAM_ID]      	bigint NULL,
	[LEGACY_PAYEE]                  	nvarchar(1000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_CRACQP_H_PK] PRIMARY KEY CLUSTERED([_COMP_REQ_ACQ_PAYEE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_CRACQP_H_UK
PRINT N'Create unique constraint dbo.PIMS_CRACQP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_ACQ_PAYEE_HIST]
	ADD CONSTRAINT [PIMS_CRACQP_H_UK]
	UNIQUE ([_COMP_REQ_ACQ_PAYEE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_LICENSE_TEAM_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_LICENSE_TEAM_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_LICENSE_TEAM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_LICENSE_TEAM_HIST
PRINT N'Create table dbo.PIMS_LEASE_LICENSE_TEAM_HIST'
GO
CREATE TABLE [dbo].[PIMS_LEASE_LICENSE_TEAM_HIST]  ( 
	[_LEASE_LICENSE_TEAM_HIST_ID]   	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_LICENSE_TEAM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_LICENSE_TEAM_ID]         	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[LL_TEAM_PROFILE_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LSLITM_H_PK] PRIMARY KEY CLUSTERED([_LEASE_LICENSE_TEAM_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_LSLITM_H_UK
PRINT N'Create unique constraint dbo.PIMS_LSLITM_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_LICENSE_TEAM_HIST]
	ADD CONSTRAINT [PIMS_LSLITM_H_UK]
	UNIQUE ([_LEASE_LICENSE_TEAM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.DSPPSL_ORG_PERSON_TCC
PRINT N'Create check constraint dbo.DSPPSL_ORG_PERSON_TCC'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR]
	ADD CONSTRAINT [DSPPSL_ORG_PERSON_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.DSPPAG_ORG_PERSON_TCC
PRINT N'Create check constraint dbo.DSPPAG_ORG_PERSON_TCC'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT]
	ADD CONSTRAINT [DSPPAG_ORG_PERSON_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create check constraint dbo.DSPPUR_ORG_PERSON_TCC
PRINT N'Create check constraint dbo.DSPPUR_ORG_PERSON_TCC'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_PURCHASER]
	ADD CONSTRAINT [DSPPUR_ORG_PERSON_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.CRLESP_LEASE_LICENSE_TEAM_ID_IDX
PRINT N'Create index dbo.CRLESP_LEASE_LICENSE_TEAM_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [CRLESP_LEASE_LICENSE_TEAM_ID_IDX]
	ON [dbo].[PIMS_COMP_REQ_LEASE_PAYEE]([LEASE_LICENSE_TEAM_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.CRACQP_ACQUISITION_FILE_TEAM_ID_IDX
PRINT N'Create index dbo.CRACQP_ACQUISITION_FILE_TEAM_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [CRACQP_ACQUISITION_FILE_TEAM_ID_IDX]
	ON [dbo].[PIMS_COMP_REQ_ACQ_PAYEE]([ACQUISITION_FILE_TEAM_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.CRLESP_COMPENSATION_REQUISITION_ID_IDX
PRINT N'Create index dbo.CRLESP_COMPENSATION_REQUISITION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [CRLESP_COMPENSATION_REQUISITION_ID_IDX]
	ON [dbo].[PIMS_COMP_REQ_LEASE_PAYEE]([COMPENSATION_REQUISITION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.CRACQP_ACQUISITION_OWNER_ID_IDX
PRINT N'Create index dbo.CRACQP_ACQUISITION_OWNER_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [CRACQP_ACQUISITION_OWNER_ID_IDX]
	ON [dbo].[PIMS_COMP_REQ_ACQ_PAYEE]([ACQUISITION_OWNER_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSLITM_LEASE_ID_IDX
PRINT N'Create index dbo.LSLITM_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSLITM_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_LICENSE_TEAM]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.CRACQP_INTEREST_HOLDER_ID_IDX
PRINT N'Create index dbo.CRACQP_INTEREST_HOLDER_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [CRACQP_INTEREST_HOLDER_ID_IDX]
	ON [dbo].[PIMS_COMP_REQ_ACQ_PAYEE]([INTEREST_HOLDER_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSLITM_PERSON_ID_IDX
PRINT N'Create index dbo.LSLITM_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSLITM_PERSON_ID_IDX]
	ON [dbo].[PIMS_LEASE_LICENSE_TEAM]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSLITM_ORGANIZATION_ID_IDX
PRINT N'Create index dbo.LSLITM_ORGANIZATION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSLITM_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_LEASE_LICENSE_TEAM]([ORGANIZATION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSLITM_PRIMARY_CONTACT_ID_IDX
PRINT N'Create index dbo.LSLITM_PRIMARY_CONTACT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSLITM_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_LEASE_LICENSE_TEAM]([PRIMARY_CONTACT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.CRLESP_LEASE_STAKEHOLDER_ID_IDX
PRINT N'Create index dbo.CRLESP_LEASE_STAKEHOLDER_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [CRLESP_LEASE_STAKEHOLDER_ID_IDX]
	ON [dbo].[PIMS_COMP_REQ_LEASE_PAYEE]([LEASE_STAKEHOLDER_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.CRACQP_COMPENSATION_REQUISITION_ID_IDX
PRINT N'Create index dbo.CRACQP_COMPENSATION_REQUISITION_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [CRACQP_COMPENSATION_REQUISITION_ID_IDX]
	ON [dbo].[PIMS_COMP_REQ_ACQ_PAYEE]([COMPENSATION_REQUISITION_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSLITM_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSLITM_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSLITM_I_S_U_TR] ON PIMS_LEASE_LICENSE_TEAM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_LICENSE_TEAM_ID = deleted.LEASE_LICENSE_TEAM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_LICENSE_TEAM
    set "LEASE_LICENSE_TEAM_ID" = inserted."LEASE_LICENSE_TEAM_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "LL_TEAM_PROFILE_TYPE_CODE" = inserted."LL_TEAM_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_LICENSE_TEAM
    inner join inserted
    on (PIMS_LEASE_LICENSE_TEAM.LEASE_LICENSE_TEAM_ID = inserted.LEASE_LICENSE_TEAM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CRLESP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_CRLESP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CRLESP_A_S_IUD_TR] ON PIMS_COMP_REQ_LEASE_PAYEE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_COMP_REQ_LEASE_PAYEE_HIST set END_DATE_HIST = @curr_date where COMP_REQ_LEASE_PAYEE_ID in (select COMP_REQ_LEASE_PAYEE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_COMP_REQ_LEASE_PAYEE_HIST ([COMP_REQ_LEASE_PAYEE_ID], [COMPENSATION_REQUISITION_ID], [LEASE_STAKEHOLDER_ID], [LEASE_LICENSE_TEAM_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _COMP_REQ_LEASE_PAYEE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [COMP_REQ_LEASE_PAYEE_ID], [COMPENSATION_REQUISITION_ID], [LEASE_STAKEHOLDER_ID], [LEASE_LICENSE_TEAM_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_COMP_REQ_LEASE_PAYEE_H_ID_SEQ]) as [_COMP_REQ_LEASE_PAYEE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CRLESP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CRLESP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CRLESP_I_S_U_TR] ON PIMS_COMP_REQ_LEASE_PAYEE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.COMP_REQ_LEASE_PAYEE_ID = deleted.COMP_REQ_LEASE_PAYEE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COMP_REQ_LEASE_PAYEE
    set "COMP_REQ_LEASE_PAYEE_ID" = inserted."COMP_REQ_LEASE_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "LEASE_STAKEHOLDER_ID" = inserted."LEASE_STAKEHOLDER_ID",
      "LEASE_LICENSE_TEAM_ID" = inserted."LEASE_LICENSE_TEAM_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COMP_REQ_LEASE_PAYEE
    inner join inserted
    on (PIMS_COMP_REQ_LEASE_PAYEE.COMP_REQ_LEASE_PAYEE_ID = inserted.COMP_REQ_LEASE_PAYEE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LLPRTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LLPRTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LLPRTY_I_S_U_TR] ON PIMS_LL_TEAM_PROFILE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LL_TEAM_PROFILE_TYPE_CODE = deleted.LL_TEAM_PROFILE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LL_TEAM_PROFILE_TYPE
    set "LL_TEAM_PROFILE_TYPE_CODE" = inserted."LL_TEAM_PROFILE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LL_TEAM_PROFILE_TYPE
    inner join inserted
    on (PIMS_LL_TEAM_PROFILE_TYPE.LL_TEAM_PROFILE_TYPE_CODE = inserted.LL_TEAM_PROFILE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CRACQP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CRACQP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CRACQP_I_S_U_TR] ON PIMS_COMP_REQ_ACQ_PAYEE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.COMP_REQ_ACQ_PAYEE_ID = deleted.COMP_REQ_ACQ_PAYEE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COMP_REQ_ACQ_PAYEE
    set "COMP_REQ_ACQ_PAYEE_ID" = inserted."COMP_REQ_ACQ_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID" = inserted."COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID" = inserted."INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_TEAM_ID" = inserted."ACQUISITION_FILE_TEAM_ID",
      "LEGACY_PAYEE" = inserted."LEGACY_PAYEE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COMP_REQ_ACQ_PAYEE
    inner join inserted
    on (PIMS_COMP_REQ_ACQ_PAYEE.COMP_REQ_ACQ_PAYEE_ID = inserted.COMP_REQ_ACQ_PAYEE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSLITM_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LSLITM_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSLITM_I_S_I_TR] ON PIMS_LEASE_LICENSE_TEAM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_LICENSE_TEAM ("LEASE_LICENSE_TEAM_ID",
      "LEASE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "LL_TEAM_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_LICENSE_TEAM_ID",
      "LEASE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "LL_TEAM_PROFILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CRACQP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_CRACQP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CRACQP_A_S_IUD_TR] ON PIMS_COMP_REQ_ACQ_PAYEE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_COMP_REQ_ACQ_PAYEE_HIST set END_DATE_HIST = @curr_date where COMP_REQ_ACQ_PAYEE_ID in (select COMP_REQ_ACQ_PAYEE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_COMP_REQ_ACQ_PAYEE_HIST ([COMP_REQ_ACQ_PAYEE_ID], [COMPENSATION_REQUISITION_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [ACQUISITION_FILE_TEAM_ID], [LEGACY_PAYEE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _COMP_REQ_ACQ_PAYEE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [COMP_REQ_ACQ_PAYEE_ID], [COMPENSATION_REQUISITION_ID], [ACQUISITION_OWNER_ID], [INTEREST_HOLDER_ID], [ACQUISITION_FILE_TEAM_ID], [LEGACY_PAYEE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_COMP_REQ_ACQ_PAYEE_H_ID_SEQ]) as [_COMP_REQ_ACQ_PAYEE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LLPRTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LLPRTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LLPRTY_I_S_I_TR] ON PIMS_LL_TEAM_PROFILE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LL_TEAM_PROFILE_TYPE ("LL_TEAM_PROFILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LL_TEAM_PROFILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSLITM_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LSLITM_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSLITM_A_S_IUD_TR] ON PIMS_LEASE_LICENSE_TEAM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_LICENSE_TEAM_HIST set END_DATE_HIST = @curr_date where LEASE_LICENSE_TEAM_ID in (select LEASE_LICENSE_TEAM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_LICENSE_TEAM_HIST ([LEASE_LICENSE_TEAM_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [LL_TEAM_PROFILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_LICENSE_TEAM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_LICENSE_TEAM_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [LL_TEAM_PROFILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_LICENSE_TEAM_H_ID_SEQ]) as [_LEASE_LICENSE_TEAM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CRACQP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_CRACQP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CRACQP_I_S_I_TR] ON PIMS_COMP_REQ_ACQ_PAYEE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_COMP_REQ_ACQ_PAYEE ("COMP_REQ_ACQ_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_TEAM_ID",
      "LEGACY_PAYEE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "COMP_REQ_ACQ_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID",
      "ACQUISITION_OWNER_ID",
      "INTEREST_HOLDER_ID",
      "ACQUISITION_FILE_TEAM_ID",
      "LEGACY_PAYEE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CRLESP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_CRLESP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CRLESP_I_S_I_TR] ON PIMS_COMP_REQ_LEASE_PAYEE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_COMP_REQ_LEASE_PAYEE ("COMP_REQ_LEASE_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID",
      "LEASE_STAKEHOLDER_ID",
      "LEASE_LICENSE_TEAM_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "COMP_REQ_LEASE_PAYEE_ID",
      "COMPENSATION_REQUISITION_ID",
      "LEASE_STAKEHOLDER_ID",
      "LEASE_LICENSE_TEAM_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LLPRTY_PIM_LSLITM_FK
PRINT N'Create foreign key constraint dbo.PIM_LLPRTY_PIM_LSLITM_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_LICENSE_TEAM]
	ADD CONSTRAINT [PIM_LLPRTY_PIM_LSLITM_FK]
	FOREIGN KEY([LL_TEAM_PROFILE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LL_TEAM_PROFILE_TYPE]([LL_TEAM_PROFILE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_LSLITM_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_LSLITM_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_LICENSE_TEAM]
	ADD CONSTRAINT [PIM_PERSON_PIM_LSLITM_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_LSLITM_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_LSLITM_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_LICENSE_TEAM]
	ADD CONSTRAINT [PIM_LEASE_PIM_LSLITM_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ORG_PIM_LSLITM_FK
PRINT N'Create foreign key constraint dbo.PIM_ORG_PIM_LSLITM_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_LICENSE_TEAM]
	ADD CONSTRAINT [PIM_ORG_PIM_LSLITM_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_LSLITM_PRIMARY_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_LSLITM_PRIMARY_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_LICENSE_TEAM]
	ADD CONSTRAINT [PIM_PERSON_PIM_LSLITM_PRIMARY_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CMPREQ_PIM_CRLESP_FK
PRINT N'Create foreign key constraint dbo.PIM_CMPREQ_PIM_CRLESP_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_LEASE_PAYEE]
	ADD CONSTRAINT [PIM_CMPREQ_PIM_CRLESP_FK]
	FOREIGN KEY([COMPENSATION_REQUISITION_ID])
	REFERENCES [dbo].[PIMS_COMPENSATION_REQUISITION]([COMPENSATION_REQUISITION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LSLITM_PIM_CRLESP_FK
PRINT N'Create foreign key constraint dbo.PIM_LSLITM_PIM_CRLESP_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_LEASE_PAYEE]
	ADD CONSTRAINT [PIM_LSLITM_PIM_CRLESP_FK]
	FOREIGN KEY([LEASE_LICENSE_TEAM_ID])
	REFERENCES [dbo].[PIMS_LEASE_LICENSE_TEAM]([LEASE_LICENSE_TEAM_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LSTKHL_PIM_CRLESP_FK
PRINT N'Create foreign key constraint dbo.PIM_LSTKHL_PIM_CRLESP_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_LEASE_PAYEE]
	ADD CONSTRAINT [PIM_LSTKHL_PIM_CRLESP_FK]
	FOREIGN KEY([LEASE_STAKEHOLDER_ID])
	REFERENCES [dbo].[PIMS_LEASE_STAKEHOLDER]([LEASE_STAKEHOLDER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQOWN_PIM_CRACQP_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQOWN_PIM_CRACQP_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_ACQ_PAYEE]
	ADD CONSTRAINT [PIM_ACQOWN_PIM_CRACQP_FK]
	FOREIGN KEY([ACQUISITION_OWNER_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_OWNER]([ACQUISITION_OWNER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_INTHLD_PIM_CRACQP_FK
PRINT N'Create foreign key constraint dbo.PIM_INTHLD_PIM_CRACQP_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_ACQ_PAYEE]
	ADD CONSTRAINT [PIM_INTHLD_PIM_CRACQP_FK]
	FOREIGN KEY([INTEREST_HOLDER_ID])
	REFERENCES [dbo].[PIMS_INTEREST_HOLDER]([INTEREST_HOLDER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNTM_PIM_CRACQP_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNTM_PIM_CRACQP_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_ACQ_PAYEE]
	ADD CONSTRAINT [PIM_ACQNTM_PIM_CRACQP_FK]
	FOREIGN KEY([ACQUISITION_FILE_TEAM_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE_TEAM]([ACQUISITION_FILE_TEAM_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CMPREQ_PIM_CRACQP_FK
PRINT N'Create foreign key constraint dbo.PIM_CMPREQ_PIM_CRACQP_FK'
GO
ALTER TABLE [dbo].[PIMS_COMP_REQ_ACQ_PAYEE]
	ADD CONSTRAINT [PIM_CMPREQ_PIM_CRACQP_FK]
	FOREIGN KEY([COMPENSATION_REQUISITION_ID])
	REFERENCES [dbo].[PIMS_COMPENSATION_REQUISITION]([COMPENSATION_REQUISITION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_COMP_REQ_PAYEE_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_COMP_REQ_PAYEE_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_COMP_REQ_PAYEE_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
