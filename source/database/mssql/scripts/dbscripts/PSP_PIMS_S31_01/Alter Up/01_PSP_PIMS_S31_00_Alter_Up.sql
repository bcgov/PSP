-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Mon Jun 27 11:09:32 PDT 2022
-- Execute this script on:
-- 		PSP_PIMS_S31_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S31_01/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TSKTAM_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TSKTAM_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TSKTAM_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TSKTAM_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TSKTAM_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TSKTAM_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TSKTAM_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_TSKTAM_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TSKTAM_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_TSKTMP_PIM_TSKTAM_FK
PRINT N'Drop foreign key constraint dbo.PIM_TSKTMP_PIM_TSKTAM_FK'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL]
	DROP CONSTRAINT IF EXISTS [PIM_TSKTMP_PIM_TSKTAM_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTMDL_PIM_TSKTAM_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTMDL_PIM_TSKTAM_FK'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL]
	DROP CONSTRAINT IF EXISTS [PIM_ACTMDL_PIM_TSKTAM_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRWKMD_PIM_ACTVTY_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRWKMD_PIM_ACTVTY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PRWKMD_PIM_ACTVTY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PROJCT_PIM_ACTVTY_FK
PRINT N'Drop foreign key constraint dbo.PIM_PROJCT_PIM_ACTVTY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PROJCT_PIM_ACTVTY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTMDL_PIM_ACTVTY_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTMDL_PIM_ACTVTY_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_ACTMDL_PIM_ACTVTY_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PROJCT_PIM_PRWKMD_FK
PRINT N'Drop foreign key constraint dbo.PIM_PROJCT_PIM_PRWKMD_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL]
	DROP CONSTRAINT IF EXISTS [PIM_PROJCT_PIM_PRWKMD_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_WFLMDL_PIM_PRWKMD_FK
PRINT N'Drop foreign key constraint dbo.PIM_WFLMDL_PIM_PRWKMD_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL]
	DROP CONSTRAINT IF EXISTS [PIM_WFLMDL_PIM_PRWKMD_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PROJCT_PIM_PRJPRP_FK
PRINT N'Drop foreign key constraint dbo.PIM_PROJCT_PIM_PRJPRP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PROPERTY]
	DROP CONSTRAINT IF EXISTS [PIM_PROJCT_PIM_PRJPRP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRJPRP_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRJPRP_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PROPERTY]
	DROP CONSTRAINT IF EXISTS [PIM_PRPRTY_PIM_PRJPRP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PROJCT_PIM_PROJNT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PROJCT_PIM_PROJNT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_NOTE]
	DROP CONSTRAINT IF EXISTS [PIM_PROJCT_PIM_PROJNT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_TSKTMP_PIM_TASK_FK
PRINT N'Drop foreign key constraint dbo.PIM_TSKTMP_PIM_TASK_FK'
GO
ALTER TABLE [dbo].[PIMS_TASK]
	DROP CONSTRAINT IF EXISTS [PIM_TSKTMP_PIM_TASK_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTVTY_PIM_TASK_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTVTY_PIM_TASK_FK'
GO
ALTER TABLE [dbo].[PIMS_TASK]
	DROP CONSTRAINT IF EXISTS [PIM_ACTVTY_PIM_TASK_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_USER_PIM_TASK_FK
PRINT N'Drop foreign key constraint dbo.PIM_USER_PIM_TASK_FK'
GO
ALTER TABLE [dbo].[PIMS_TASK]
	DROP CONSTRAINT IF EXISTS [PIM_USER_PIM_TASK_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_TSKTMT_PIM_TSKTMP_FK
PRINT N'Drop foreign key constraint dbo.PIM_TSKTMT_PIM_TSKTMP_FK'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE]
	DROP CONSTRAINT IF EXISTS [PIM_TSKTMT_PIM_TSKTMP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRPRTY_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_PRPRTY_PIM_PRPACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACTVTY_PIM_PRPACT_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACTVTY_PIM_PRPACT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PIM_ACTVTY_PIM_PRPACT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_WFLMDT_PIM_WFLMDL_FK
PRINT N'Drop foreign key constraint dbo.PIM_WFLMDT_PIM_WFLMDL_FK'
GO
ALTER TABLE [dbo].[PIMS_WORKFLOW_MODEL]
	DROP CONSTRAINT IF EXISTS [PIM_WFLMDT_PIM_WFLMDL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRJRSK_PIM_PROJCT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRJRSK_PIM_PROJCT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT]
	DROP CONSTRAINT IF EXISTS [PIM_PRJRSK_PIM_PROJCT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRJTYP_PIM_PROJCT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRJTYP_PIM_PROJCT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT]
	DROP CONSTRAINT IF EXISTS [PIM_PRJTYP_PIM_PROJCT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PRJSTY_PIM_PROJCT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PRJSTY_PIM_PROJCT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT]
	DROP CONSTRAINT IF EXISTS [PIM_PRJSTY_PIM_PROJCT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PROJTR_PIM_PROJCT_FK
PRINT N'Drop foreign key constraint dbo.PIM_PROJTR_PIM_PROJCT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT]
	DROP CONSTRAINT IF EXISTS [PIM_PROJTR_PIM_PROJCT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TSKTAM_TASK_TEMPLATE_ID_IDX
PRINT N'Drop index dbo.TSKTAM_TASK_TEMPLATE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL].[TSKTAM_TASK_TEMPLATE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TSKTAM_ACTIVITY_MODEL_ID_IDX
PRINT N'Drop index dbo.TSKTAM_ACTIVITY_MODEL_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL].[TSKTAM_ACTIVITY_MODEL_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTMDL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTMDL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTMDL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTMDL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTMDL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTMDL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTMDL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACTMDL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTMDL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJCT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROJCT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROJCT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJCT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PROJCT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROJCT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJCT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PROJCT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROJCT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROJCT_PROJECT_TYPE_CODE_IDX
PRINT N'Drop index dbo.PROJCT_PROJECT_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT].[PROJCT_PROJECT_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROJCT_PROJECT_TIER_TYPE_CODE_IDX
PRINT N'Drop index dbo.PROJCT_PROJECT_TIER_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT].[PROJCT_PROJECT_TIER_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROJCT_PROJECT_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.PROJCT_PROJECT_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT].[PROJCT_PROJECT_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROJCT_PROJECT_RISK_TYPE_CODE_IDX
PRINT N'Drop index dbo.PROJCT_PROJECT_RISK_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT].[PROJCT_PROJECT_RISK_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRWKMD_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRWKMD_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRWKMD_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRWKMD_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRWKMD_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRWKMD_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRWKMD_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRWKMD_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRWKMD_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRWKMD_WORKFLOW_MODEL_ID_IDX
PRINT N'Drop index dbo.PRWKMD_WORKFLOW_MODEL_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT_WORKFLOW_MODEL].[PRWKMD_WORKFLOW_MODEL_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRWKMD_PROJECT_ID_IDX
PRINT N'Drop index dbo.PRWKMD_PROJECT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT_WORKFLOW_MODEL].[PRWKMD_PROJECT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_WFLMDL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_WFLMDL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_WFLMDL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_WFLMDL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_WFLMDL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_WFLMDL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_WFLMDL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_WFLMDL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_WFLMDL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.WFLMDL_WORKFLOW_MODEL_TYPE_CODE_IDX
PRINT N'Drop index dbo.WFLMDL_WORKFLOW_MODEL_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_WORKFLOW_MODEL].[WFLMDL_WORKFLOW_MODEL_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJPRP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRJPRP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJPRP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJPRP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRJPRP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJPRP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJPRP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRJPRP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJPRP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRJPRP_PROPERTY_ID_IDX
PRINT N'Drop index dbo.PRJPRP_PROPERTY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT_PROPERTY].[PRJPRP_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRJPRP_PROJECT_ID_IDX
PRINT N'Drop index dbo.PRJPRP_PROJECT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT_PROPERTY].[PRJPRP_PROJECT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJNT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROJNT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROJNT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJNT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PROJNT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROJNT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJNT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PROJNT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROJNT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROJNT_PROJECT_ID_IDX
PRINT N'Drop index dbo.PROJNT_PROJECT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT_NOTE].[PROJNT_PROJECT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TASK_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TASK_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TASK_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TASK_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TASK_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TASK_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TASK_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_TASK_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TASK_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TASK_USER_ID_IDX
PRINT N'Drop index dbo.TASK_USER_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_TASK].[TASK_USER_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TASK_TASK_TEMPLATE_ID_IDX
PRINT N'Drop index dbo.TASK_TASK_TEMPLATE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_TASK].[TASK_TASK_TEMPLATE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TASK_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.TASK_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_TASK].[TASK_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TSKTMP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TSKTMP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TSKTMP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TSKTMP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TSKTMP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TSKTMP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TSKTMP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_TSKTMP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TSKTMP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.TSKTMP_TASK_TEMPLATE_TYPE_CODE_IDX
PRINT N'Drop index dbo.TSKTMP_TASK_TEMPLATE_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_TASK_TEMPLATE].[TSKTMP_TASK_TEMPLATE_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TSKTMT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_TSKTMT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TSKTMT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_TSKTMT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_TSKTMT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_TSKTMT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPACT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPACT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPACT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPACT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPACT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPACT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPACT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPACT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPACT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPACT_PROPERTY_ID_IDX
PRINT N'Drop index dbo.PRPACT_PROPERTY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY].[PRPACT_PROPERTY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PRPACT_ACTIVITY_ID_IDX
PRINT N'Drop index dbo.PRPACT_ACTIVITY_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY].[PRPACT_ACTIVITY_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTVTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTVTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTVTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTVTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTVTY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTVTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTVTY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACTVTY_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTVTY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTVTY_WORKFLOW_ID_IDX
PRINT N'Drop index dbo.ACTVTY_WORKFLOW_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY].[ACTVTY_WORKFLOW_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTVTY_PROJECT_ID_IDX
PRINT N'Drop index dbo.ACTVTY_PROJECT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY].[ACTVTY_PROJECT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.ACTVTY_ACTIVITY_MODEL_ID_IDX
PRINT N'Drop index dbo.ACTVTY_ACTIVITY_MODEL_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACTIVITY].[ACTVTY_ACTIVITY_MODEL_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_WFLMDT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_WFLMDT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_WFLMDT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_WFLMDT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_WFLMDT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_WFLMDT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJRSK_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRJRSK_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJRSK_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJRSK_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRJRSK_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJRSK_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRJTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRJTYP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJTR_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PROJTR_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROJTR_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PROJTR_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PROJTR_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PROJTR_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJSTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRJSTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJSTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRJSTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRJSTY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRJSTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_TSKTAM_H_UK
PRINT N'Drop unique constraint dbo.PIMS_TSKTAM_H_UK'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_TSKTAM_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_TSKTAM_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_TSKTAM_H_PK'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_TSKTAM_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST
PRINT N'Drop table dbo.PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.TSKTAM_TASK_TEMPLATE_ACTIVITY_MODEL_TUC
PRINT N'Drop unique constraint dbo.TSKTAM_TASK_TEMPLATE_ACTIVITY_MODEL_TUC'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL]
	DROP CONSTRAINT IF EXISTS [TSKTAM_TASK_TEMPLATE_ACTIVITY_MODEL_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.TSKTAM_PK
PRINT N'Drop primary key constraint dbo.TSKTAM_PK'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL]
	DROP CONSTRAINT IF EXISTS [TSKTAM_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_TASK_TEMPLATE_ACTIVITY_MODEL
PRINT N'Drop table dbo.PIMS_TASK_TEMPLATE_ACTIVITY_MODEL'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.ACTVTY_PK
PRINT N'Drop primary key constraint dbo.ACTVTY_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [ACTVTY_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY
PRINT N'Drop table dbo.PIMS_ACTIVITY'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ACTMDL_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ACTMDL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_MODEL_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTMDL_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ACTMDL_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ACTMDL_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_MODEL_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTMDL_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_MODEL_HIST
PRINT N'Drop table dbo.PIMS_ACTIVITY_MODEL_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_MODEL_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PROJCT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PROJCT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PROJCT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PROJCT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PROJCT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PROJCT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT_HIST
PRINT N'Drop table dbo.PIMS_PROJECT_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRWKMD_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRWKMD_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRWKMD_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRWKMD_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRWKMD_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRWKMD_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT_WORKFLOW_MODEL_HIST
PRINT N'Drop table dbo.PIMS_PROJECT_WORKFLOW_MODEL_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PRWKMD_PROJECT_WORKFLOW_MODEL_TUC
PRINT N'Drop unique constraint dbo.PRWKMD_PROJECT_WORKFLOW_MODEL_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL]
	DROP CONSTRAINT IF EXISTS [PRWKMD_PROJECT_WORKFLOW_MODEL_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRWKMD_PK
PRINT N'Drop primary key constraint dbo.PRWKMD_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL]
	DROP CONSTRAINT IF EXISTS [PRWKMD_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT_WORKFLOW_MODEL
PRINT N'Drop table dbo.PIMS_PROJECT_WORKFLOW_MODEL'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT_WORKFLOW_MODEL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_WFLMDL_H_UK
PRINT N'Drop unique constraint dbo.PIMS_WFLMDL_H_UK'
GO
ALTER TABLE [dbo].[PIMS_WORKFLOW_MODEL_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_WFLMDL_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_WFLMDL_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_WFLMDL_H_PK'
GO
ALTER TABLE [dbo].[PIMS_WORKFLOW_MODEL_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_WFLMDL_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_WORKFLOW_MODEL_HIST
PRINT N'Drop table dbo.PIMS_WORKFLOW_MODEL_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_WORKFLOW_MODEL_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRJPRP_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRJPRP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PROPERTY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRJPRP_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRJPRP_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRJPRP_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PROPERTY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRJPRP_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT_PROPERTY_HIST
PRINT N'Drop table dbo.PIMS_PROJECT_PROPERTY_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT_PROPERTY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PRJPRP_PROJECT_PROPERTY_TUC
PRINT N'Drop unique constraint dbo.PRJPRP_PROJECT_PROPERTY_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PROPERTY]
	DROP CONSTRAINT IF EXISTS [PRJPRP_PROJECT_PROPERTY_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRJPRP_PK
PRINT N'Drop primary key constraint dbo.PRJPRP_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_PROPERTY]
	DROP CONSTRAINT IF EXISTS [PRJPRP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT_PROPERTY
PRINT N'Drop table dbo.PIMS_PROJECT_PROPERTY'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT_PROPERTY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PROJNT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PROJNT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_NOTE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PROJNT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PROJNT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PROJNT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_NOTE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PROJNT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT_NOTE_HIST
PRINT N'Drop table dbo.PIMS_PROJECT_NOTE_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT_NOTE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PROJNT_PK
PRINT N'Drop primary key constraint dbo.PROJNT_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_NOTE]
	DROP CONSTRAINT IF EXISTS [PROJNT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT_NOTE
PRINT N'Drop table dbo.PIMS_PROJECT_NOTE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT_NOTE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_TASK_H_UK
PRINT N'Drop unique constraint dbo.PIMS_TASK_H_UK'
GO
ALTER TABLE [dbo].[PIMS_TASK_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_TASK_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_TASK_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_TASK_H_PK'
GO
ALTER TABLE [dbo].[PIMS_TASK_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_TASK_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_TASK_HIST
PRINT N'Drop table dbo.PIMS_TASK_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_TASK_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.TASK_TEMPLATE_ACTIVITY_USER_TUC
PRINT N'Drop unique constraint dbo.TASK_TEMPLATE_ACTIVITY_USER_TUC'
GO
ALTER TABLE [dbo].[PIMS_TASK]
	DROP CONSTRAINT IF EXISTS [TASK_TEMPLATE_ACTIVITY_USER_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.TASK_PK
PRINT N'Drop primary key constraint dbo.TASK_PK'
GO
ALTER TABLE [dbo].[PIMS_TASK]
	DROP CONSTRAINT IF EXISTS [TASK_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_TASK
PRINT N'Drop table dbo.PIMS_TASK'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_TASK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_TSKTMP_H_UK
PRINT N'Drop unique constraint dbo.PIMS_TSKTMP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_TSKTMP_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_TSKTMP_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_TSKTMP_H_PK'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_TSKTMP_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_TASK_TEMPLATE_HIST
PRINT N'Drop table dbo.PIMS_TASK_TEMPLATE_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_TASK_TEMPLATE_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.TSKTMP_PK
PRINT N'Drop primary key constraint dbo.TSKTMP_PK'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE]
	DROP CONSTRAINT IF EXISTS [TSKTMP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_TASK_TEMPLATE
PRINT N'Drop table dbo.PIMS_TASK_TEMPLATE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_TASK_TEMPLATE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.TSKTMT_PK
PRINT N'Drop primary key constraint dbo.TSKTMT_PK'
GO
ALTER TABLE [dbo].[PIMS_TASK_TEMPLATE_TYPE]
	DROP CONSTRAINT IF EXISTS [TSKTMT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_PRPACT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_PRPACT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRPACT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_PRPACT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_PRPACT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_PRPACT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROPERTY_ACTIVITY_HIST
PRINT N'Drop table dbo.PIMS_PROPERTY_ACTIVITY_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PRPACT_PROPERTY_ACTIVITY_TUC
PRINT N'Drop unique constraint dbo.PRPACT_PROPERTY_ACTIVITY_TUC'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PRPACT_PROPERTY_ACTIVITY_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRPACT_PK
PRINT N'Drop primary key constraint dbo.PRPACT_PK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_ACTIVITY]
	DROP CONSTRAINT IF EXISTS [PRPACT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROPERTY_ACTIVITY
PRINT N'Drop table dbo.PIMS_PROPERTY_ACTIVITY'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROPERTY_ACTIVITY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_ACTVTY_H_UK
PRINT N'Drop unique constraint dbo.PIMS_ACTVTY_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTVTY_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_ACTVTY_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_ACTVTY_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_ACTVTY_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_HIST
PRINT N'Drop table dbo.PIMS_ACTIVITY_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.ACTMDL_PK
PRINT N'Drop primary key constraint dbo.ACTMDL_PK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_MODEL]
	DROP CONSTRAINT IF EXISTS [ACTMDL_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACTIVITY_MODEL
PRINT N'Drop table dbo.PIMS_ACTIVITY_MODEL'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACTIVITY_MODEL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.WFLMDL_PK
PRINT N'Drop primary key constraint dbo.WFLMDL_PK'
GO
ALTER TABLE [dbo].[PIMS_WORKFLOW_MODEL]
	DROP CONSTRAINT IF EXISTS [WFLMDL_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_WORKFLOW_MODEL
PRINT N'Drop table dbo.PIMS_WORKFLOW_MODEL'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_WORKFLOW_MODEL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.WFLMDT_PK
PRINT N'Drop primary key constraint dbo.WFLMDT_PK'
GO
ALTER TABLE [dbo].[PIMS_WORKFLOW_MODEL_TYPE]
	DROP CONSTRAINT IF EXISTS [WFLMDT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PROJCT_PK
PRINT N'Drop primary key constraint dbo.PROJCT_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT]
	DROP CONSTRAINT IF EXISTS [PROJCT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT
PRINT N'Drop table dbo.PIMS_PROJECT'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRJRSK_PK
PRINT N'Drop primary key constraint dbo.PRJRSK_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_RISK_TYPE]
	DROP CONSTRAINT IF EXISTS [PRJRSK_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRJTYP_PK
PRINT N'Drop primary key constraint dbo.PRJTYP_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_TYPE]
	DROP CONSTRAINT IF EXISTS [PRJTYP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PROJTR_PK
PRINT N'Drop primary key constraint dbo.PROJTR_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_TIER_TYPE]
	DROP CONSTRAINT IF EXISTS [PROJTR_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PRJSTY_PK
PRINT N'Drop primary key constraint dbo.PRJSTY_PK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_STATUS_TYPE]
	DROP CONSTRAINT IF EXISTS [PRJSTY_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACTIVITY_INSTANCE_NOTE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACTIVITY_INSTANCE_NOTE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACTIVITY_INSTANCE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACTIVITY_INSTANCE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_INSTANCE
PRINT N'Create table dbo.PIMS_ACTIVITY_INSTANCE'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]  ( 
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL CONSTRAINT [ACTINS_ACTIVITY_INSTANCE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_ID_SEQ]),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACTINS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTINS_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACTINS_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACTINS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACTINS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTINS_PK] PRIMARY KEY CLUSTERED([ACTIVITY_INSTANCE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table to contain all applicable activity instances for the PIMS PSP system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_INSTANCE_NOTE
PRINT N'Create table dbo.PIMS_ACTIVITY_INSTANCE_NOTE'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]  ( 
	[PIMS_ACTIVITY_INSTANCE_NOTE_ID]	bigint NOT NULL CONSTRAINT [ACTINN_PIMS_ACTIVITY_INSTANCE_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_NOTE_ID_SEQ]),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [ACTINN_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACTINN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTINN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACTINN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACTINN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACTINN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTINN_PK] PRIMARY KEY CLUSTERED([PIMS_ACTIVITY_INSTANCE_NOTE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_NOTE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Relates a note object to an activity instance.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_NOTE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT
PRINT N'Create table dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]  ( 
	[ACTIVITY_INSTANCE_DOCUMENT_ID] 	bigint NOT NULL CONSTRAINT [ACTDOC_ACTIVITY_INSTANCE_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_DOCUMENT_ID_SEQ]),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [ACTDOC_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACTDOC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTDOC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACTDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACTDOC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACTDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTDOC_PK] PRIMARY KEY CLUSTERED([ACTIVITY_INSTANCE_DOCUMENT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Relates a document object to an activity instance.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_DOCUMENT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACTIVITY_INSTANCE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACTIVITY_INSTANCE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_INSTANCE_HIST
PRINT N'Create table dbo.PIMS_ACTIVITY_INSTANCE_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST]  ( 
	[_ACTIVITY_INSTANCE_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACTINS_H_PK] PRIMARY KEY CLUSTERED([_ACTIVITY_INSTANCE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACTINS_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACTINS_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST]
	ADD CONSTRAINT [PIMS_ACTINS_H_UK]
	UNIQUE ([_ACTIVITY_INSTANCE_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACTIVITY_INSTANCE_NOTE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACTIVITY_INSTANCE_NOTE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_INSTANCE_NOTE_HIST
PRINT N'Create table dbo.PIMS_ACTIVITY_INSTANCE_NOTE_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_HIST]  ( 
	[_ACTIVITY_INSTANCE_NOTE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_NOTE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[PIMS_ACTIVITY_INSTANCE_NOTE_ID] 	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]           	bigint NOT NULL,
	[NOTE_ID]                        	bigint NOT NULL,
	[IS_DISABLED]                    	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACTINN_H_PK] PRIMARY KEY CLUSTERED([_ACTIVITY_INSTANCE_NOTE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACTINN_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACTINN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_HIST]
	ADD CONSTRAINT [PIMS_ACTINN_H_UK]
	UNIQUE ([_ACTIVITY_INSTANCE_NOTE_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST
PRINT N'Create table dbo.PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST]  ( 
	[_ACTIVITY_INSTANCE_DOCUMENT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[ACTIVITY_INSTANCE_DOCUMENT_ID]      	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]               	bigint NOT NULL,
	[DOCUMENT_ID]                        	bigint NOT NULL,
	[IS_DISABLED]                        	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACTDOC_H_PK] PRIMARY KEY CLUSTERED([_ACTIVITY_INSTANCE_DOCUMENT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_ACTDOC_H_UK
PRINT N'Create unique constraint dbo.PIMS_ACTDOC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_ACTDOC_H_UK]
	UNIQUE ([_ACTIVITY_INSTANCE_DOCUMENT_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTINN_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Create index dbo.ACTINN_ACTIVITY_INSTANCE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTINN_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]([ACTIVITY_INSTANCE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTDOC_DOCUMENT_ID_IDX
PRINT N'Create index dbo.ACTDOC_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTDOC_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Create index dbo.ACTDOC_ACTIVITY_INSTANCE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTDOC_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]([ACTIVITY_INSTANCE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTINN_NOTE_ID_IDX
PRINT N'Create index dbo.ACTINN_NOTE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTINN_NOTE_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]([NOTE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTINN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINN_I_S_U_TR] ON PIMS_ACTIVITY_INSTANCE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PIMS_ACTIVITY_INSTANCE_NOTE_ID = deleted.PIMS_ACTIVITY_INSTANCE_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_INSTANCE_NOTE
    set "PIMS_ACTIVITY_INSTANCE_NOTE_ID" = inserted."PIMS_ACTIVITY_INSTANCE_NOTE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_INSTANCE_NOTE
    inner join inserted
    on (PIMS_ACTIVITY_INSTANCE_NOTE.PIMS_ACTIVITY_INSTANCE_NOTE_ID = inserted.PIMS_ACTIVITY_INSTANCE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTINN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINN_I_S_I_TR] ON PIMS_ACTIVITY_INSTANCE_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_INSTANCE_NOTE ("PIMS_ACTIVITY_INSTANCE_NOTE_ID",
      "ACTIVITY_INSTANCE_ID",
      "NOTE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PIMS_ACTIVITY_INSTANCE_NOTE_ID",
      "ACTIVITY_INSTANCE_ID",
      "NOTE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTDOC_I_S_U_TR] ON PIMS_ACTIVITY_INSTANCE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_INSTANCE_DOCUMENT_ID = deleted.ACTIVITY_INSTANCE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_INSTANCE_DOCUMENT
    set "ACTIVITY_INSTANCE_DOCUMENT_ID" = inserted."ACTIVITY_INSTANCE_DOCUMENT_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_INSTANCE_DOCUMENT
    inner join inserted
    on (PIMS_ACTIVITY_INSTANCE_DOCUMENT.ACTIVITY_INSTANCE_DOCUMENT_ID = inserted.ACTIVITY_INSTANCE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTINS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINS_I_S_U_TR] ON PIMS_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_INSTANCE_ID = deleted.ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_INSTANCE
    set "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_ACTIVITY_INSTANCE.ACTIVITY_INSTANCE_ID = inserted.ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINS_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACTINS_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINS_A_S_IUD_TR] ON PIMS_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where ACTIVITY_INSTANCE_ID in (select ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_INSTANCE_HIST ([ACTIVITY_INSTANCE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_INSTANCE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTDOC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTDOC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTDOC_I_S_I_TR] ON PIMS_ACTIVITY_INSTANCE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_INSTANCE_DOCUMENT ("ACTIVITY_INSTANCE_DOCUMENT_ID",
      "ACTIVITY_INSTANCE_ID",
      "DOCUMENT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_INSTANCE_DOCUMENT_ID",
      "ACTIVITY_INSTANCE_ID",
      "DOCUMENT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINS_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTINS_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINS_I_S_I_TR] ON PIMS_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_INSTANCE ("ACTIVITY_INSTANCE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_INSTANCE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACTINN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINN_A_S_IUD_TR] ON PIMS_ACTIVITY_INSTANCE_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_INSTANCE_NOTE_HIST set END_DATE_HIST = @curr_date where PIMS_ACTIVITY_INSTANCE_NOTE_ID in (select PIMS_ACTIVITY_INSTANCE_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_INSTANCE_NOTE_HIST ([PIMS_ACTIVITY_INSTANCE_NOTE_ID], [ACTIVITY_INSTANCE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_INSTANCE_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PIMS_ACTIVITY_INSTANCE_NOTE_ID], [ACTIVITY_INSTANCE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_H_ID_SEQ]) as [_ACTIVITY_INSTANCE_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTDOC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACTDOC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTDOC_A_S_IUD_TR] ON PIMS_ACTIVITY_INSTANCE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where ACTIVITY_INSTANCE_DOCUMENT_ID in (select ACTIVITY_INSTANCE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST ([ACTIVITY_INSTANCE_DOCUMENT_ID], [ACTIVITY_INSTANCE_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_INSTANCE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_INSTANCE_DOCUMENT_ID], [ACTIVITY_INSTANCE_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_H_ID_SEQ]) as [_ACTIVITY_INSTANCE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_ACTINN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_ACTINN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_ACTINN_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_NOTE_PIM_ACTINN_FK
PRINT N'Create foreign key constraint dbo.PIM_NOTE_PIM_ACTINN_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]
	ADD CONSTRAINT [PIM_NOTE_PIM_ACTINN_FK]
	FOREIGN KEY([NOTE_ID])
	REFERENCES [dbo].[PIMS_NOTE]([NOTE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_ACTDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_ACTDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_ACTDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_ACTDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_ACTDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
	ADD CONSTRAINT [PIM_ACTINS_PIM_ACTDOC_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_TASK_TEMPLATE_TYPE
PRINT N'Drop table dbo.PIMS_TASK_TEMPLATE_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_TASK_TEMPLATE_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACTIVITY_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACTIVITY_ID_SEQ'
GO
DROP SEQUENCE [dbo].[PIMS_ACTIVITY_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_WORKFLOW_MODEL_TYPE
PRINT N'Drop table dbo.PIMS_WORKFLOW_MODEL_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_WORKFLOW_MODEL_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT_RISK_TYPE
PRINT N'Drop table dbo.PIMS_PROJECT_RISK_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT_RISK_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT_TYPE
PRINT N'Drop table dbo.PIMS_PROJECT_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT_TIER_TYPE
PRINT N'Drop table dbo.PIMS_PROJECT_TIER_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT_TIER_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_PROJECT_STATUS_TYPE
PRINT N'Drop table dbo.PIMS_PROJECT_STATUS_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_PROJECT_STATUS_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
