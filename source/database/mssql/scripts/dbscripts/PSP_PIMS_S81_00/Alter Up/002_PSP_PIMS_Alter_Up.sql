-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Tue May 21 16:28:17 PDT 2024
-- Execute this script on:
-- 		PSP_PIMS_S80.00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S81.00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_CHECKLIST_ITEM_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_CHECKLIST_ITEM_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_CHECKLIST_ITEM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE
PRINT N'Alter table dbo.PIMS_LEASE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_CATEGORY_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_CATEGORY_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_ID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_INITIATOR_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_INITIATOR_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_LICENSE_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_LICENSE_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_PAY_RVBL_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_PAY_RVBL_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_PROGRAM_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_PROGRAM_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_PURPOSE_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_PURPOSE_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_RESPONSIBILITY_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_RESPONSIBILITY_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_STATUS_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_PROJECT table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'PROJECT_ID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_REGION table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'REGION_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE
PRINT N'Create table dbo.PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE]  ( 
	[LEASE_CHKLST_ITEM_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                       	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                     	int NULL,
	[IS_DISABLED]                       	bit NOT NULL CONSTRAINT [LCISTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL CONSTRAINT [LCISTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [LCISTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [LCISTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LCISTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LCISTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LCISTY_PK] PRIMARY KEY CLUSTERED([LEASE_CHKLST_ITEM_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the lease & license checklist item status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the lease & license checklist item status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_CHKLST_ITEM_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Tables that contains the codes and associated descriptions of the lease & license checklist item status types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_CHKLST_SECTION_TYPE
PRINT N'Create table dbo.PIMS_LEASE_CHKLST_SECTION_TYPE'
GO
CREATE TABLE [dbo].[PIMS_LEASE_CHKLST_SECTION_TYPE]  ( 
	[LEASE_CHKLST_SECTION_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	date NOT NULL CONSTRAINT [LCKSTY_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	date NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [LCKSTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LCKSTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LCKSTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LCKSTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LCKSTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LCKSTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LCKSTY_PK] PRIMARY KEY CLUSTERED([LEASE_CHKLST_SECTION_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Lease & license checklist section descriptive text presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies the order that the lease & license checklist sections are presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the lease & license checklist section is able to be presented to the user via the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the lease & license checklist section is removed from the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is currently active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Lease & license checklist section code value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_CHKLST_SECTION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the lease & license checklist sctions that are presented to the user through dynamically building the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_SECTION_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_CHKLST_ITEM_TYPE
PRINT N'Create table dbo.PIMS_LEASE_CHKLST_ITEM_TYPE'
GO
CREATE TABLE [dbo].[PIMS_LEASE_CHKLST_ITEM_TYPE]  ( 
	[LEASE_CHKLST_ITEM_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[LEASE_CHKLST_SECTION_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[HINT]                          	nvarchar(200) NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[EFFECTIVE_DATE]                	date NOT NULL CONSTRAINT [LCKITY_EFFECTIVE_DATE_DEF]  DEFAULT (getutcdate()),
	[EXPIRY_DATE]                   	date NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [LCKITY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_REQUIRED]                   	bit NULL CONSTRAINT [LCKITY_IS_REQUIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LCKITY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LCKITY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LCKITY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LCKITY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LCKITY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LCKITY_PK] PRIMARY KEY CLUSTERED([LEASE_CHKLST_ITEM_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Lease & license checklist item descriptive text presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies the order that the lease & license checklist items are presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the lease & license checklist item is able to be presented to the user via the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the lease & license checklist item is removed from the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Lease & license checklist item descriptive tooltip presented to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'HINT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is currently active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the lease & license checklist item is a required field.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'IS_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Lease & license checklist item code value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_CHKLST_ITEM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_CHKLST_SECTION_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_CHKLST_SECTION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the lease & license checklist items that are presented to the user through dynamically building the input form.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHKLST_ITEM_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_CHECKLIST_ITEM
PRINT N'Create table dbo.PIMS_LEASE_CHECKLIST_ITEM'
GO
CREATE TABLE [dbo].[PIMS_LEASE_CHECKLIST_ITEM]  ( 
	[LEASE_CHECKLIST_ITEM_ID]           	bigint NOT NULL CONSTRAINT [LCHKLI_LEASE_CHECKLIST_ITEM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_CHECKLIST_ITEM_ID_SEQ]),
	[LEASE_ID]                          	bigint NOT NULL,
	[LEASE_CHKLST_ITEM_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_CHKLST_ITEM_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL CONSTRAINT [LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_DEF]  DEFAULT ('INCOMP'),
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL CONSTRAINT [LCHKLI_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [LCHKLI_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [LCHKLI_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL CONSTRAINT [LCHKLI_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [LCHKLI_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [LCHKLI_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL CONSTRAINT [LCHKLI_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [LCHKLI_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [LCHKLI_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LCHKLI_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LCHKLI_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LCHKLI_PK] PRIMARY KEY CLUSTERED([LEASE_CHECKLIST_ITEM_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'LEASE_CHECKLIST_ITEM_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'LEASE_CHKLST_ITEM_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE_CHKLST_ITEM_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'LEASE_CHKLST_ITEM_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_LEASE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM', 
	@level2type = N'Column', @level2name = N'LEASE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the lease & license checklist items.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_CHECKLIST_ITEM'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_CHECKLIST_ITEM_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_CHECKLIST_ITEM_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_CHECKLIST_ITEM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_CHECKLIST_ITEM_HIST
PRINT N'Create table dbo.PIMS_LEASE_CHECKLIST_ITEM_HIST'
GO
CREATE TABLE [dbo].[PIMS_LEASE_CHECKLIST_ITEM_HIST]  ( 
	[_LEASE_CHECKLIST_ITEM_HIST_ID]     	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_CHECKLIST_ITEM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[LEASE_CHECKLIST_ITEM_ID]           	bigint NOT NULL,
	[LEASE_ID]                          	bigint NOT NULL,
	[LEASE_CHKLST_ITEM_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_CHKLST_ITEM_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LCHKLI_H_PK] PRIMARY KEY CLUSTERED([_LEASE_CHECKLIST_ITEM_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_LCHKLI_H_UK
PRINT N'Create unique constraint dbo.PIMS_LCHKLI_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CHECKLIST_ITEM_HIST]
	ADD CONSTRAINT [PIMS_LCHKLI_H_UK]
	UNIQUE ([_LEASE_CHECKLIST_ITEM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LCHKLI_LEASE_ID_IDX
PRINT N'Create index dbo.LCHKLI_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LCHKLI_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_CHECKLIST_ITEM]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LEASE_PROJECT_ID_IDX
PRINT N'Create index dbo.LEASE_PROJECT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LEASE_PROJECT_ID_IDX]
	ON [dbo].[PIMS_LEASE]([PROJECT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LCHKLI_LEASE_CHKLST_ITEM_TYPE_CODE_IDX
PRINT N'Create index dbo.LCHKLI_LEASE_CHKLST_ITEM_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LCHKLI_LEASE_CHKLST_ITEM_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CHECKLIST_ITEM]([LEASE_CHKLST_ITEM_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique index dbo.LCHKLI_LEASE_ID_UK
PRINT N'Create unique index dbo.LCHKLI_LEASE_ID_UK'
GO
CREATE UNIQUE NONCLUSTERED INDEX [LCHKLI_LEASE_ID_UK]
	ON [dbo].[PIMS_LEASE_CHECKLIST_ITEM]([LEASE_ID], [LEASE_CHKLST_ITEM_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LCKITY_LEASE_CHKLST_SECTION_TYPE_CODE_IDX
PRINT N'Create index dbo.LCKITY_LEASE_CHKLST_SECTION_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LCKITY_LEASE_CHKLST_SECTION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CHKLST_ITEM_TYPE]([LEASE_CHKLST_SECTION_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LCHKLI_LEASE_CHKLST_ITEM_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CHECKLIST_ITEM]([LEASE_CHKLST_ITEM_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LCKSTY_PIM_LCKITY_FK
PRINT N'Create foreign key constraint dbo.PIM_LCKSTY_PIM_LCKITY_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CHKLST_ITEM_TYPE]
	ADD CONSTRAINT [PIM_LCKSTY_PIM_LCKITY_FK]
	FOREIGN KEY([LEASE_CHKLST_SECTION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_CHKLST_SECTION_TYPE]([LEASE_CHKLST_SECTION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LCISTY_PIM_LCHKLI_FK
PRINT N'Create foreign key constraint dbo.PIM_LCISTY_PIM_LCHKLI_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CHECKLIST_ITEM]
	ADD CONSTRAINT [PIM_LCISTY_PIM_LCHKLI_FK]
	FOREIGN KEY([LEASE_CHKLST_ITEM_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE]([LEASE_CHKLST_ITEM_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LCKITY_PIM_LCHKLI_FK
PRINT N'Create foreign key constraint dbo.PIM_LCKITY_PIM_LCHKLI_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CHECKLIST_ITEM]
	ADD CONSTRAINT [PIM_LCKITY_PIM_LCHKLI_FK]
	FOREIGN KEY([LEASE_CHKLST_ITEM_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_CHKLST_ITEM_TYPE]([LEASE_CHKLST_ITEM_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_LCHKLI_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_LCHKLI_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CHECKLIST_ITEM]
	ADD CONSTRAINT [PIM_LEASE_PIM_LCHKLI_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCHKLI_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LCHKLI_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCHKLI_I_S_I_TR] ON PIMS_LEASE_CHECKLIST_ITEM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CHECKLIST_ITEM ("LEASE_CHECKLIST_ITEM_ID",
      "LEASE_ID",
      "LEASE_CHKLST_ITEM_TYPE_CODE",
      "LEASE_CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_CHECKLIST_ITEM_ID",
      "LEASE_ID",
      "LEASE_CHKLST_ITEM_TYPE_CODE",
      "LEASE_CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCISTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LCISTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCISTY_I_S_U_TR] ON PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CHKLST_ITEM_STATUS_TYPE_CODE = deleted.LEASE_CHKLST_ITEM_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE
    set "LEASE_CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."LEASE_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE.LEASE_CHKLST_ITEM_STATUS_TYPE_CODE = inserted.LEASE_CHKLST_ITEM_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCKITY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LCKITY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCKITY_I_S_U_TR] ON PIMS_LEASE_CHKLST_ITEM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CHKLST_ITEM_TYPE_CODE = deleted.LEASE_CHKLST_ITEM_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CHKLST_ITEM_TYPE
    set "LEASE_CHKLST_ITEM_TYPE_CODE" = inserted."LEASE_CHKLST_ITEM_TYPE_CODE",
      "LEASE_CHKLST_SECTION_TYPE_CODE" = inserted."LEASE_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "HINT" = inserted."HINT",
      "IS_REQUIRED" = inserted."IS_REQUIRED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CHKLST_ITEM_TYPE
    inner join inserted
    on (PIMS_LEASE_CHKLST_ITEM_TYPE.LEASE_CHKLST_ITEM_TYPE_CODE = inserted.LEASE_CHKLST_ITEM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCKSTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LCKSTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCKSTY_I_S_I_TR] ON PIMS_LEASE_CHKLST_SECTION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CHKLST_SECTION_TYPE ("LEASE_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCHKLI_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LCHKLI_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCHKLI_I_S_U_TR] ON PIMS_LEASE_CHECKLIST_ITEM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CHECKLIST_ITEM_ID = deleted.LEASE_CHECKLIST_ITEM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CHECKLIST_ITEM
    set "LEASE_CHECKLIST_ITEM_ID" = inserted."LEASE_CHECKLIST_ITEM_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_CHKLST_ITEM_TYPE_CODE" = inserted."LEASE_CHKLST_ITEM_TYPE_CODE",
      "LEASE_CHKLST_ITEM_STATUS_TYPE_CODE" = inserted."LEASE_CHKLST_ITEM_STATUS_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CHECKLIST_ITEM
    inner join inserted
    on (PIMS_LEASE_CHECKLIST_ITEM.LEASE_CHECKLIST_ITEM_ID = inserted.LEASE_CHECKLIST_ITEM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCHKLI_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LCHKLI_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCHKLI_A_S_IUD_TR] ON PIMS_LEASE_CHECKLIST_ITEM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_CHECKLIST_ITEM_HIST set END_DATE_HIST = @curr_date where LEASE_CHECKLIST_ITEM_ID in (select LEASE_CHECKLIST_ITEM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_CHECKLIST_ITEM_HIST ([LEASE_CHECKLIST_ITEM_ID], [LEASE_ID], [LEASE_CHKLST_ITEM_TYPE_CODE], [LEASE_CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_CHECKLIST_ITEM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_CHECKLIST_ITEM_ID], [LEASE_ID], [LEASE_CHKLST_ITEM_TYPE_CODE], [LEASE_CHKLST_ITEM_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_CHECKLIST_ITEM_H_ID_SEQ]) as [_LEASE_CHECKLIST_ITEM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCKSTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LCKSTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCKSTY_I_S_U_TR] ON PIMS_LEASE_CHKLST_SECTION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CHKLST_SECTION_TYPE_CODE = deleted.LEASE_CHKLST_SECTION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CHKLST_SECTION_TYPE
    set "LEASE_CHKLST_SECTION_TYPE_CODE" = inserted."LEASE_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "EFFECTIVE_DATE" = inserted."EFFECTIVE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CHKLST_SECTION_TYPE
    inner join inserted
    on (PIMS_LEASE_CHKLST_SECTION_TYPE.LEASE_CHKLST_SECTION_TYPE_CODE = inserted.LEASE_CHKLST_SECTION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCISTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LCISTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCISTY_I_S_I_TR] ON PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CHKLST_ITEM_STATUS_TYPE ("LEASE_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_CHKLST_ITEM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LCKITY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LCKITY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LCKITY_I_S_I_TR] ON PIMS_LEASE_CHKLST_ITEM_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CHKLST_ITEM_TYPE ("LEASE_CHKLST_ITEM_TYPE_CODE",
      "LEASE_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "HINT",
      "IS_REQUIRED",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_CHKLST_ITEM_TYPE_CODE",
      "LEASE_CHKLST_SECTION_TYPE_CODE",
      "DESCRIPTION",
      "HINT",
      "IS_REQUIRED",
      "DISPLAY_ORDER",
      "EFFECTIVE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
