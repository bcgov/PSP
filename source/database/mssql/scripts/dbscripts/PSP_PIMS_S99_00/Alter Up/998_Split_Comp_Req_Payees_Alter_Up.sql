/* -----------------------------------------------------------------------------
Separate the multiple Comp Req Payees per single row into a discrete row per 
payee.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
Author        Date         Comment
------------  -----------  -----------------------------------------------------
Doug Filteau  2025-Jan-22  Initial version.
----------------------------------------------------------------------------- */

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- -----------------------------------------------------------------------------
-- Create new row from INTEREST_HOLDER_ID when INTEREST_HOLDER_ID populated 
-- together with ACQUISITION_OWNER_ID
-- -----------------------------------------------------------------------------
WITH CTE_Multi (COMP_REQ_PAYEE_ID, COMPENSATION_REQUISITION_ID, INTEREST_HOLDER_ID)
AS
  (SELECT COMP_REQ_PAYEE_ID
        , COMPENSATION_REQUISITION_ID
        , INTEREST_HOLDER_ID
   FROM   PIMS_COMP_REQ_PAYEE
   WHERE  (ACQUISITION_OWNER_ID IS NOT NULL AND
           INTEREST_HOLDER_ID   IS NOT NULL))
           
INSERT INTO PIMS_COMP_REQ_PAYEE (COMPENSATION_REQUISITION_ID, INTEREST_HOLDER_ID, CONCURRENCY_CONTROL_NUMBER, APP_CREATE_TIMESTAMP, APP_CREATE_USERID, APP_CREATE_USER_GUID, APP_CREATE_USER_DIRECTORY, APP_LAST_UPDATE_TIMESTAMP, APP_LAST_UPDATE_USERID, APP_LAST_UPDATE_USER_GUID, APP_LAST_UPDATE_USER_DIRECTORY)
  SELECT COMPENSATION_REQUISITION_ID
       , INTEREST_HOLDER_ID
       , 1, getutcdate(), user_name(), newid(), user_name(), getutcdate(), user_name(), newid(), user_name() 
  FROM   CTE_Multi
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Clear INTEREST_HOLDER_ID from the affected rows
UPDATE PIMS_COMP_REQ_PAYEE
SET    INTEREST_HOLDER_ID         = NULL
     , CONCURRENCY_CONTROL_NUMBER = CONCURRENCY_CONTROL_NUMBER + 1
WHERE  (ACQUISITION_OWNER_ID IS NOT NULL AND
        INTEREST_HOLDER_ID   IS NOT NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- -----------------------------------------------------------------------------
-- Create new row from ACQUISITION_FILE_TEAM_ID when ACQUISITION_FILE_TEAM_ID 
-- populated together with ACQUISITION_OWNER_ID
-- -----------------------------------------------------------------------------
WITH CTE_Multi (COMP_REQ_PAYEE_ID, COMPENSATION_REQUISITION_ID, ACQUISITION_FILE_TEAM_ID)
AS
  (SELECT COMP_REQ_PAYEE_ID
        , COMPENSATION_REQUISITION_ID
        , ACQUISITION_FILE_TEAM_ID
   FROM   PIMS_COMP_REQ_PAYEE
   WHERE  (ACQUISITION_OWNER_ID     IS NOT NULL AND
           ACQUISITION_FILE_TEAM_ID IS NOT NULL))
           
INSERT INTO PIMS_COMP_REQ_PAYEE (COMPENSATION_REQUISITION_ID, ACQUISITION_FILE_TEAM_ID, CONCURRENCY_CONTROL_NUMBER, APP_CREATE_TIMESTAMP, APP_CREATE_USERID, APP_CREATE_USER_GUID, APP_CREATE_USER_DIRECTORY, APP_LAST_UPDATE_TIMESTAMP, APP_LAST_UPDATE_USERID, APP_LAST_UPDATE_USER_GUID, APP_LAST_UPDATE_USER_DIRECTORY)
  SELECT COMPENSATION_REQUISITION_ID
       , ACQUISITION_FILE_TEAM_ID
       , 1, getutcdate(), user_name(), newid(), user_name(), getutcdate(), user_name(), newid(), user_name() 
  FROM   CTE_Multi
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Clear ACQUISITION_FILE_TEAM_ID from the affected rows
UPDATE PIMS_COMP_REQ_PAYEE
SET    ACQUISITION_FILE_TEAM_ID   = NULL
     , CONCURRENCY_CONTROL_NUMBER = CONCURRENCY_CONTROL_NUMBER + 1
WHERE  (ACQUISITION_OWNER_ID     IS NOT NULL AND
        ACQUISITION_FILE_TEAM_ID IS NOT NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- -----------------------------------------------------------------------------
-- Create new row from ACQUISITION_FILE_TEAM_ID when ACQUISITION_FILE_TEAM_ID 
-- populated together with INTEREST_HOLDER_ID
-- -----------------------------------------------------------------------------
WITH CTE_Multi (COMP_REQ_PAYEE_ID, COMPENSATION_REQUISITION_ID, ACQUISITION_FILE_TEAM_ID)
AS
  (SELECT COMP_REQ_PAYEE_ID
        , COMPENSATION_REQUISITION_ID
        , ACQUISITION_FILE_TEAM_ID
   FROM   PIMS_COMP_REQ_PAYEE
   WHERE  (INTEREST_HOLDER_ID       IS NOT NULL AND
           ACQUISITION_FILE_TEAM_ID IS NOT NULL))
           
INSERT INTO PIMS_COMP_REQ_PAYEE (COMPENSATION_REQUISITION_ID, ACQUISITION_FILE_TEAM_ID, CONCURRENCY_CONTROL_NUMBER, APP_CREATE_TIMESTAMP, APP_CREATE_USERID, APP_CREATE_USER_GUID, APP_CREATE_USER_DIRECTORY, APP_LAST_UPDATE_TIMESTAMP, APP_LAST_UPDATE_USERID, APP_LAST_UPDATE_USER_GUID, APP_LAST_UPDATE_USER_DIRECTORY)
  SELECT COMPENSATION_REQUISITION_ID
       , ACQUISITION_FILE_TEAM_ID
       , 1, getutcdate(), user_name(), newid(), user_name(), getutcdate(), user_name(), newid(), user_name() 
  FROM   CTE_Multi
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Clear ACQUISITION_FILE_TEAM_ID from the affected rows
UPDATE PIMS_COMP_REQ_PAYEE
SET    ACQUISITION_FILE_TEAM_ID   = NULL
     , CONCURRENCY_CONTROL_NUMBER = CONCURRENCY_CONTROL_NUMBER + 1
WHERE  (INTEREST_HOLDER_ID       IS NOT NULL AND
        ACQUISITION_FILE_TEAM_ID IS NOT NULL)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
