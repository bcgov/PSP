-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Thu Apr 06 11:10:57 PDT 2023
-- Execute this script on:
-- 		PSP_PIMS_S51_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S50_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CONTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CONTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CONTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CONTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_CONTYP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CONTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CONSTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_CONSTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CONSTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_CONSTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_CONSTY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_CONSTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AGRMNT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AGRMNT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AGRMNT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AGRMNT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_AGRMNT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AGRMNT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AGRMNT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_AGRMNT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AGRMNT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK
PRINT N'Drop foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [PIM_CONTYP_PIM_LESCON_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK
PRINT N'Drop foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [PIM_CONSTY_PIM_LESCON_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_LEASE_PIM_LESCON_FK
PRINT N'Drop foreign key constraint dbo.PIM_LEASE_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [PIM_LEASE_PIM_LESCON_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_AGRTYP_PIM_AGRMNT_FK
PRINT N'Drop foreign key constraint dbo.PIM_AGRTYP_PIM_AGRMNT_FK'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT]
	DROP CONSTRAINT IF EXISTS [PIM_AGRTYP_PIM_AGRMNT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_AGRMNT_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_AGRMNT_FK'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_AGRMNT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_PERSON_PIM_AQOWSO_FK
PRINT N'Drop foreign key constraint dbo.PIM_PERSON_PIM_AQOWSO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	DROP CONSTRAINT IF EXISTS [PIM_PERSON_PIM_AQOWSO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_ACQNFL_PIM_AQOWSO_FK
PRINT N'Drop foreign key constraint dbo.PIM_ACQNFL_PIM_AQOWSO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	DROP CONSTRAINT IF EXISTS [PIM_ACQNFL_PIM_AQOWSO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AGRMNT_AGREEMENT_TYPE_CODE_IDX
PRINT N'Drop index dbo.AGRMNT_AGREEMENT_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_AGREEMENT].[AGRMNT_AGREEMENT_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AGRMNT_ACQUISITION_FILE_ID_IDX
PRINT N'Drop index dbo.AGRMNT_ACQUISITION_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_AGREEMENT].[AGRMNT_ACQUISITION_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AGRTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AGRTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AGRTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AGRTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_AGRTYP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AGRTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQOWSO_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_AQOWSO_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQOWSO_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQOWSO_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_AQOWSO_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQOWSO_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_AQOWSO_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_AQOWSO_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_AQOWSO_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AQOWSO_PERSON_ID_IDX
PRINT N'Drop index dbo.AQOWSO_PERSON_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR].[AQOWSO_PERSON_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.AQOWSO_ACQUISITION_FILE_ID_IDX
PRINT N'Drop index dbo.AQOWSO_ACQUISITION_FILE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR].[AQOWSO_ACQUISITION_FILE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQOWN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQOWN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQOWN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCTYP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DOCTYP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCTYP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DOCTYP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQOWN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQOWN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQOWN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQOWN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQOWN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQOWN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESCON_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_LESCON_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESCON_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESCON_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_LESCON_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESCON_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_LESCON_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_LESCON_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_LESCON_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LESCON_LEASE_ID_IDX
PRINT N'Drop index dbo.LESCON_LEASE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_CONSULTATION].[LESCON_LEASE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LESCON_CONSULTATION_TYPE_CODE_IDX
PRINT N'Drop index dbo.LESCON_CONSULTATION_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_CONSULTATION].[LESCON_CONSULTATION_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_CONSULTATION].[LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.LESCON_LEASE_CONSULTATION_TUC
PRINT N'Drop unique constraint dbo.LESCON_LEASE_CONSULTATION_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [LESCON_LEASE_CONSULTATION_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.LESCON_PK
PRINT N'Drop primary key constraint dbo.LESCON_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [LESCON_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_AGRMNT_H_UK
PRINT N'Drop unique constraint dbo.PIMS_AGRMNT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_AGRMNT_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_AGRMNT_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_AGRMNT_H_PK'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_AGRMNT_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.AGRMNT_PK
PRINT N'Drop primary key constraint dbo.AGRMNT_PK'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT]
	DROP CONSTRAINT IF EXISTS [AGRMNT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_AGREEMENT
PRINT N'Drop table dbo.PIMS_AGREEMENT'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_AGREEMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.AGRTYP_PK
PRINT N'Drop primary key constraint dbo.AGRTYP_PK'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT_TYPE]
	DROP CONSTRAINT IF EXISTS [AGRTYP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_AQOWSO_H_UK
PRINT N'Drop unique constraint dbo.PIMS_AQOWSO_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_AQOWSO_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_AQOWSO_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_AQOWSO_H_PK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_AQOWSO_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.AQOWSO_ACQUISITION_FILE_PERSON_TUC
PRINT N'Drop unique constraint dbo.AQOWSO_ACQUISITION_FILE_PERSON_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	DROP CONSTRAINT IF EXISTS [AQOWSO_ACQUISITION_FILE_PERSON_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.AQOWSO_PK
PRINT N'Drop primary key constraint dbo.AQOWSO_PK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	DROP CONSTRAINT IF EXISTS [AQOWSO_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR
PRINT N'Drop table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.CONTYP_PK
PRINT N'Drop primary key constraint dbo.CONTYP_PK'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE]
	DROP CONSTRAINT IF EXISTS [CONTYP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.CONSTY_PK
PRINT N'Drop primary key constraint dbo.CONSTY_PK'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE]
	DROP CONSTRAINT IF EXISTS [CONSTY_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_LESCON_H_UK
PRINT N'Drop unique constraint dbo.PIMS_LESCON_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_LESCON_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_LESCON_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_LESCON_H_PK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_LESCON_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.ACQPER_FILE_PROFILE_TUC
PRINT N'Drop unique constraint dbo.ACQPER_FILE_PROFILE_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	DROP CONSTRAINT IF EXISTS [ACQPER_FILE_PROFILE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_TYP
PRINT N'Alter table dbo.PIMS_DOCUMENT_TYP'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP] DROP CONSTRAINT IF EXISTS [DOCTYP_DOCUMENT_TYPE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP] ALTER COLUMN [DOCUMENT_TYPE] nvarchar(200) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP] ADD CONSTRAINT [DOCTYP_DOCUMENT_TYPE_DEF] DEFAULT ('<Empty>') FOR [DOCUMENT_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Description of the available document types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_TYP', 
	@level2type = N'Column', @level2name = N'DOCUMENT_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
	DROP CONSTRAINT IF EXISTS [DOCTYP_DOCUMENT_TYPE_DESCRIPTION_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
	DROP COLUMN [DOCUMENT_TYPE_DESCRIPTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT
PRINT N'Alter table dbo.PIMS_PROJECT'
GO
ALTER TABLE [dbo].[PIMS_PROJECT] ALTER COLUMN [PROJECT_STATUS_TYPE_CODE] nvarchar(20) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROJECT] DROP CONSTRAINT IF EXISTS [PROJCT_PROJECT_STATUS_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_OWNER
PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER] ADD CONSTRAINT [ACQOWN_LAST_NAME_OR_CORP_NAME_1_DEF] DEFAULT ('<Empty>') FOR [LAST_NAME_AND_CORP_NAME]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER]
	DROP CONSTRAINT IF EXISTS [ACQOWN_IS_PRIMARY_OWNER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER]
	DROP COLUMN [IS_PRIMARY_OWNER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_OWNER_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER_HIST'
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_ACQUISITION_OWNER_HIST' 
                   AND col.NAME = 'IS_PRIMARY_OWNER')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST]
	DROP COLUMN [IS_PRIMARY_OWNER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DOCUMENT_TYP_HIST
PRINT N'Alter table dbo.PIMS_DOCUMENT_TYP_HIST'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP_HIST] ALTER COLUMN [DOCUMENT_TYPE] nvarchar(200) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_DOCUMENT_TYP_HIST' 
                   AND col.NAME = 'DOCUMENT_TYPE')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP_HIST] ADD DEFAULT '<Empty>' FOR [DOCUMENT_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_DOCUMENT_TYP_HIST' 
                   AND col.NAME = 'DOCUMENT_TYPE_DESCRIPTION')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP_HIST]
	DROP COLUMN [DOCUMENT_TYPE_DESCRIPTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.ACQPER_PERSON_PROFILE_TUC
PRINT N'Create unique constraint dbo.ACQPER_PERSON_PROFILE_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	ADD CONSTRAINT [ACQPER_PERSON_PROFILE_TUC]
	UNIQUE ([ACQ_FL_PERSON_PROFILE_TYPE_CODE], [PERSON_ID], [ACQUISITION_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create function dbo.pims_IsUniqueProduct
PRINT N'Create function dbo.pims_IsUniqueProduct'
GO
-- --------------------------------------------------------------------------------------------
-- Create function pims_IsUniqueProduct 
-- --------------------------------------------------------------------------------------------
CREATE FUNCTION [dbo].[pims_IsUniqueProduct] (@prmCode nvarchar(20), @prmDesc nvarchar(200))
RETURNS nvarchar(1)
AS
BEGIN
  DECLARE @IsUnique nvarchar(1);
  SET     @IsUnique = 'Y';
  
--  IF (SELECT COUNT(*)
--      FROM   PIMS_PRODUCT) = 0
--    RETURN @IsUnique
  
  IF (SELECT COUNT(*)
      FROM   PIMS_PRODUCT
      WHERE  UPPER(TRIM(CODE) + TRIM(DESCRIPTION)) = UPPER(TRIM(@prmCode) + TRIM(@prmDesc))) > 0
    SET @IsUnique = 'N';
    
  RETURN @IsUnique;
END


GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT_HIST
PRINT N'Alter table dbo.PIMS_PROJECT_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_HIST] ALTER COLUMN [PROJECT_STATUS_TYPE_CODE] nvarchar(20) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_LEASE_CONSULTATION_HIST
PRINT N'Rebuild table dbo.PIMS_LEASE_CONSULTATION_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1680804137311]  ( 
	[_LEASE_CONSULTATION_HIST_ID]   	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_CONSULTATION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_CONSULTATION_ID]         	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[CONSULTATION_TYPE_CODE]        	varchar(20) NOT NULL DEFAULT 'OTHER',
	[CONSULTATION_STATUS_TYPE_CODE] 	varchar(20) NOT NULL DEFAULT 'UNKNOWN',
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	CONSTRAINT [PIMS_LESCON_H_PK] PRIMARY KEY CLUSTERED([_LEASE_CONSULTATION_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1680804137311]([_LEASE_CONSULTATION_HIST_ID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [LEASE_CONSULTATION_ID], [LEASE_ID], [CONSULTATION_TYPE_CODE], [CONSULTATION_STATUS_TYPE_CODE], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED]) 
	SELECT [_LEASE_CONSULTATION_HIST_ID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [LEASE_CONSULTATION_ID], [LEASE_ID], SUBSTRING(CONSULTATION_TYPE_CODE,1,20), SUBSTRING(CONSULTATION_STATUS_TYPE_CODE,1,20), [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED] 
	FROM [dbo].[PIMS_LEASE_CONSULTATION_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_CONSULTATION_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1680804137311]', N'PIMS_LEASE_CONSULTATION_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_LESCON_H_UK
PRINT N'Create unique constraint dbo.PIMS_LESCON_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST]
	ADD CONSTRAINT [PIMS_LESCON_H_UK]
	UNIQUE ([_LEASE_CONSULTATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_CONSULTATION_STATUS_TYPE
PRINT N'Rebuild table dbo.PIMS_CONSULTATION_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE]
DROP CONSTRAINT IF EXISTS [CONSTY_CONSULTATION_STATUS_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE]
DROP CONSTRAINT IF EXISTS [CONSTY_DESCRIPTION_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE]
DROP CONSTRAINT IF EXISTS [CONSTY_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE]
DROP CONSTRAINT IF EXISTS [CONSTY_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE]
DROP CONSTRAINT IF EXISTS [CONSTY_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE]
DROP CONSTRAINT IF EXISTS [CONSTY_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE]
DROP CONSTRAINT IF EXISTS [CONSTY_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE]
DROP CONSTRAINT IF EXISTS [CONSTY_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1680804137309]  ( 
	[CONSULTATION_STATUS_TYPE_CODE]	varchar(20) NOT NULL CONSTRAINT [CONSTY_CONSULTATION_STATUS_TYPE_CODE_DEF]  DEFAULT ('OTHER'),
	[DESCRIPTION]                  	nvarchar(200) NOT NULL CONSTRAINT [CONSTY_DESCRIPTION_DEF]  DEFAULT ('<Empty>'),
	[DISPLAY_ORDER]                	int NULL,
	[IS_DISABLED]                  	bit NOT NULL CONSTRAINT [CONSTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]   	bigint NOT NULL CONSTRAINT [CONSTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [CONSTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [CONSTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [CONSTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [CONSTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CONSTY_PK] PRIMARY KEY CLUSTERED([CONSULTATION_STATUS_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the consultation status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137309', 
	@level2type = N'Column', @level2name = N'CONSULTATION_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the consultation status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137309', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Onscreen display order of the consultation types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137309', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the consultation status  type is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137309', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the consultation status type for (currently) a lease or license.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137309'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1680804137309]([CONSULTATION_STATUS_TYPE_CODE], [DESCRIPTION], [DISPLAY_ORDER], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT SUBSTRING(CONSULTATION_STATUS_TYPE_CODE,1,20), [DESCRIPTION], [DISPLAY_ORDER], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_CONSULTATION_STATUS_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_CONSULTATION_STATUS_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1680804137309]', N'PIMS_CONSULTATION_STATUS_TYPE', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_CONSULTATION_TYPE
PRINT N'Rebuild table dbo.PIMS_CONSULTATION_TYPE'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE]
DROP CONSTRAINT IF EXISTS [CONTYP_CONSULTATION_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE]
DROP CONSTRAINT IF EXISTS [CONTYP_DESCRIPTION_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE]
DROP CONSTRAINT IF EXISTS [CONTYP_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE]
DROP CONSTRAINT IF EXISTS [CONTYP_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE]
DROP CONSTRAINT IF EXISTS [CONTYP_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE]
DROP CONSTRAINT IF EXISTS [CONTYP_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE]
DROP CONSTRAINT IF EXISTS [CONTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE]
DROP CONSTRAINT IF EXISTS [CONTYP_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1680804137315]  ( 
	[CONSULTATION_TYPE_CODE]    	varchar(20) NOT NULL CONSTRAINT [CONTYP_CONSULTATION_TYPE_CODE_DEF]  DEFAULT ('OTHER'),
	[DESCRIPTION]               	nvarchar(200) NOT NULL CONSTRAINT [CONTYP_DESCRIPTION_DEF]  DEFAULT ('<Empty>'),
	[OTHER_DESCRIPTION]         	nvarchar(200) NULL,
	[DISPLAY_ORDER]             	int NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [CONTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [CONTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [CONTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [CONTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [CONTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [CONTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CONTYP_PK] PRIMARY KEY CLUSTERED([CONSULTATION_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the consultation type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137315', 
	@level2type = N'Column', @level2name = N'CONSULTATION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the consultation type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137315', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Additional descriptive text of the consultation type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137315', 
	@level2type = N'Column', @level2name = N'OTHER_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Onscreen display order of the consultation types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137315', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the consultation type is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137315', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the consultation type required for (currently) a lease or license.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137315'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1680804137315]([CONSULTATION_TYPE_CODE], [DESCRIPTION], [OTHER_DESCRIPTION], [DISPLAY_ORDER], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT SUBSTRING(CONSULTATION_TYPE_CODE,1,20), [DESCRIPTION], [OTHER_DESCRIPTION], [DISPLAY_ORDER], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_CONSULTATION_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_CONSULTATION_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1680804137315]', N'PIMS_CONSULTATION_TYPE', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_LEASE_CONSULTATION
PRINT N'Rebuild table dbo.PIMS_LEASE_CONSULTATION'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_LEASE_CONSULTATION_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_CONSULTATION_STATUS_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
DROP CONSTRAINT IF EXISTS [LESCON_IS_DISABLED_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1680804137312]  ( 
	[LEASE_CONSULTATION_ID]         	bigint NOT NULL CONSTRAINT [LESCON_LEASE_CONSULTATION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_CONSULTATION_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[CONSULTATION_TYPE_CODE]        	varchar(20) NOT NULL DEFAULT 'OTHER',
	[CONSULTATION_STATUS_TYPE_CODE] 	varchar(20) NOT NULL CONSTRAINT [LESCON_CONSULTATION_STATUS_TYPE_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LESCON_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LESCON_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LESCON_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LESCON_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LESCON_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LESCON_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LESCON_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LESCON_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [LESCON_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LESCON_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LESCON_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[IS_DISABLED]                   	bit NULL CONSTRAINT [LESCON_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	CONSTRAINT [LESCON_PK] PRIMARY KEY CLUSTERED([LEASE_CONSULTATION_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137312', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1680804137312]([LEASE_CONSULTATION_ID], [LEASE_ID], [CONSULTATION_TYPE_CODE], [CONSULTATION_STATUS_TYPE_CODE], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED]) 
	SELECT [LEASE_CONSULTATION_ID], [LEASE_ID], SUBSTRING(CONSULTATION_TYPE_CODE,1,20), SUBSTRING(CONSULTATION_STATUS_TYPE_CODE,1,20), [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED] 
	FROM [dbo].[PIMS_LEASE_CONSULTATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_LEASE_CONSULTATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1680804137312]', N'PIMS_LEASE_CONSULTATION', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.LESCON_LEASE_CONSULTATION_TUC
PRINT N'Create unique constraint dbo.LESCON_LEASE_CONSULTATION_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [LESCON_LEASE_CONSULTATION_TUC]
	UNIQUE ([CONSULTATION_TYPE_CODE], [LEASE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCTYP_I_S_U_TR] ON PIMS_DOCUMENT_TYP INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_TYPE_ID = deleted.DOCUMENT_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_TYP
    set "DOCUMENT_TYPE_ID" = inserted."DOCUMENT_TYPE_ID",
      "MAYAN_ID" = inserted."MAYAN_ID",
      "DOCUMENT_TYPE" = inserted."DOCUMENT_TYPE",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_TYP
    inner join inserted
    on (PIMS_DOCUMENT_TYP.DOCUMENT_TYPE_ID = inserted.DOCUMENT_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([CONSULTATION_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESCON_CONSULTATION_TYPE_CODE_IDX
PRINT N'Create index dbo.LESCON_CONSULTATION_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LESCON_CONSULTATION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([CONSULTATION_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESCON_LEASE_ID_IDX
PRINT N'Create index dbo.LESCON_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LESCON_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([LEASE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESCON_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LESCON_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESCON_A_S_IUD_TR] ON PIMS_LEASE_CONSULTATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_CONSULTATION_HIST set END_DATE_HIST = @curr_date where LEASE_CONSULTATION_ID in (select LEASE_CONSULTATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_CONSULTATION_HIST ([LEASE_CONSULTATION_ID], [LEASE_ID], [CONSULTATION_TYPE_CODE], [CONSULTATION_STATUS_TYPE_CODE], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED], _LEASE_CONSULTATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_CONSULTATION_ID], [LEASE_ID], [CONSULTATION_TYPE_CODE], [CONSULTATION_STATUS_TYPE_CODE], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USER_GUID], [APP_CREATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [CONCURRENCY_CONTROL_NUMBER], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED], (next value for [dbo].[PIMS_LEASE_CONSULTATION_H_ID_SEQ]) as [_LEASE_CONSULTATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESCON_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LESCON_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESCON_I_S_I_TR] ON PIMS_LEASE_CONSULTATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CONSULTATION ("LEASE_CONSULTATION_ID",
      "LEASE_ID",
      "CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER",
      "IS_DISABLED")
    select "LEASE_CONSULTATION_ID",
      "LEASE_ID",
      "CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER",
      "IS_DISABLED"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LESCON_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LESCON_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LESCON_I_S_U_TR] ON PIMS_LEASE_CONSULTATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CONSULTATION_ID = deleted.LEASE_CONSULTATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CONSULTATION
    set "LEASE_CONSULTATION_ID" = inserted."LEASE_CONSULTATION_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "CONSULTATION_TYPE_CODE" = inserted."CONSULTATION_TYPE_CODE",
      "CONSULTATION_STATUS_TYPE_CODE" = inserted."CONSULTATION_STATUS_TYPE_CODE",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "IS_DISABLED" = inserted."IS_DISABLED"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CONSULTATION
    inner join inserted
    on (PIMS_LEASE_CONSULTATION.LEASE_CONSULTATION_ID = inserted.LEASE_CONSULTATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_A_S_IUD_TR] ON PIMS_ACQUISITION_OWNER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_OWNER_HIST set END_DATE_HIST = @curr_date where ACQUISITION_OWNER_ID in (select ACQUISITION_OWNER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_OWNER_HIST ([ACQUISITION_OWNER_ID], [ACQUISITION_FILE_ID], [ADDRESS_ID], [IS_ORGANIZATION], [LAST_NAME_AND_CORP_NAME], [OTHER_NAME], [GIVEN_NAME], [INCORPORATION_NUMBER], [REGISTRATION_NUMBER], [CONTACT_EMAIL_ADDR], [CONTACT_PHONE_NUM], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_OWNER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_OWNER_ID], [ACQUISITION_FILE_ID], [ADDRESS_ID], [IS_ORGANIZATION], [LAST_NAME_AND_CORP_NAME], [OTHER_NAME], [GIVEN_NAME], [INCORPORATION_NUMBER], [REGISTRATION_NUMBER], [CONTACT_EMAIL_ADDR], [CONTACT_PHONE_NUM], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_OWNER_H_ID_SEQ]) as [_ACQUISITION_OWNER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_I_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_OWNER ("ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID",
      "ADDRESS_ID",
      "IS_ORGANIZATION",
      "LAST_NAME_AND_CORP_NAME",
      "OTHER_NAME",
      "GIVEN_NAME",
      "INCORPORATION_NUMBER",
      "REGISTRATION_NUMBER",
      "CONTACT_EMAIL_ADDR",
      "CONTACT_PHONE_NUM",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID",
      "ADDRESS_ID",
      "IS_ORGANIZATION",
      "LAST_NAME_AND_CORP_NAME",
      "OTHER_NAME",
      "GIVEN_NAME",
      "INCORPORATION_NUMBER",
      "REGISTRATION_NUMBER",
      "CONTACT_EMAIL_ADDR",
      "CONTACT_PHONE_NUM",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCTYP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DOCTYP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCTYP_I_S_I_TR] ON PIMS_DOCUMENT_TYP INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_TYP ("DOCUMENT_TYPE_ID",
      "MAYAN_ID",
      "DOCUMENT_TYPE",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DOCUMENT_TYPE_ID",
      "MAYAN_ID",
      "DOCUMENT_TYPE",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCTYP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DOCTYP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCTYP_A_S_IUD_TR] ON PIMS_DOCUMENT_TYP FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DOCUMENT_TYP_HIST set END_DATE_HIST = @curr_date where DOCUMENT_TYPE_ID in (select DOCUMENT_TYPE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DOCUMENT_TYP_HIST ([DOCUMENT_TYPE_ID], [MAYAN_ID], [DOCUMENT_TYPE], [DISPLAY_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DOCUMENT_TYP_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DOCUMENT_TYPE_ID], [MAYAN_ID], [DOCUMENT_TYPE], [DISPLAY_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DOCUMENT_TYP_H_ID_SEQ]) as [_DOCUMENT_TYP_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_U_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_OWNER_ID = deleted.ACQUISITION_OWNER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_OWNER
    set "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "IS_ORGANIZATION" = inserted."IS_ORGANIZATION",
      "LAST_NAME_AND_CORP_NAME" = inserted."LAST_NAME_AND_CORP_NAME",
      "OTHER_NAME" = inserted."OTHER_NAME",
      "GIVEN_NAME" = inserted."GIVEN_NAME",
      "INCORPORATION_NUMBER" = inserted."INCORPORATION_NUMBER",
      "REGISTRATION_NUMBER" = inserted."REGISTRATION_NUMBER",
      "CONTACT_EMAIL_ADDR" = inserted."CONTACT_EMAIL_ADDR",
      "CONTACT_PHONE_NUM" = inserted."CONTACT_PHONE_NUM",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_OWNER
    inner join inserted
    on (PIMS_ACQUISITION_OWNER.ACQUISITION_OWNER_ID = inserted.ACQUISITION_OWNER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_LESCON_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_LEASE_PIM_LESCON_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK
PRINT N'Create foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_CONSTY_PIM_LESCON_FK]
	FOREIGN KEY([CONSULTATION_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CONSULTATION_STATUS_TYPE]([CONSULTATION_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK
PRINT N'Create foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_CONTYP_PIM_LESCON_FK]
	FOREIGN KEY([CONSULTATION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CONSULTATION_TYPE]([CONSULTATION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CONSTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_CONSTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CONSTY_I_S_I_TR] ON PIMS_CONSULTATION_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CONSULTATION_STATUS_TYPE ("CONSULTATION_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "CONSULTATION_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CONSTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CONSTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CONSTY_I_S_U_TR] ON PIMS_CONSULTATION_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONSULTATION_STATUS_TYPE_CODE = deleted.CONSULTATION_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONSULTATION_STATUS_TYPE
    set "CONSULTATION_STATUS_TYPE_CODE" = inserted."CONSULTATION_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONSULTATION_STATUS_TYPE
    inner join inserted
    on (PIMS_CONSULTATION_STATUS_TYPE.CONSULTATION_STATUS_TYPE_CODE = inserted.CONSULTATION_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CONTYP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_CONTYP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CONTYP_I_S_I_TR] ON PIMS_CONSULTATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CONSULTATION_TYPE ("CONSULTATION_TYPE_CODE",
      "DESCRIPTION",
      "OTHER_DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "CONSULTATION_TYPE_CODE",
      "DESCRIPTION",
      "OTHER_DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_CONTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_CONTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_CONTYP_I_S_U_TR] ON PIMS_CONSULTATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONSULTATION_TYPE_CODE = deleted.CONSULTATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONSULTATION_TYPE
    set "CONSULTATION_TYPE_CODE" = inserted."CONSULTATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "OTHER_DESCRIPTION" = inserted."OTHER_DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONSULTATION_TYPE
    inner join inserted
    on (PIMS_CONSULTATION_TYPE.CONSULTATION_TYPE_CODE = inserted.CONSULTATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_AGREEMENT_HIST
PRINT N'Drop table dbo.PIMS_AGREEMENT_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_AGREEMENT_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_AGREEMENT_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_AGREEMENT_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_AGREEMENT_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_AGREEMENT_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_AGREEMENT_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_AGREEMENT_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_AGREEMENT_TYPE
PRINT N'Drop table dbo.PIMS_AGREEMENT_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_AGREEMENT_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_HIST
PRINT N'Drop table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_HIST'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop sequence dbo.PIMS_OWNER_SOLICITOR_ID_SEQ
PRINT N'Drop sequence dbo.PIMS_OWNER_SOLICITOR_ID_SEQ'
GO
DROP SEQUENCE IF EXISTS [dbo].[PIMS_OWNER_SOLICITOR_ID_SEQ]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
