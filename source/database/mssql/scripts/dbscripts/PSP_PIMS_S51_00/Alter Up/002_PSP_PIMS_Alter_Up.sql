-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Thu Apr 06 11:09:14 PDT 2023
-- Execute this script on:
-- 		PSP_PIMS_S50_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S51_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCMNT_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCMNT_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCMNT_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCMNT_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DOCMNT_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCMNT_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCMNT_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DOCMNT_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCMNT_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCMNT_PIM_RFLDOC_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCMNT_PIM_RFLDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_DOCMNT_PIM_RFLDOC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCMNT_PIM_PRJDOC_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCMNT_PIM_PRJDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_DOCMNT_PIM_PRJDOC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK
PRINT N'Drop foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [PIM_CONTYP_PIM_LESCON_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK
PRINT N'Drop foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [PIM_CONSTY_PIM_LESCON_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCMNT_PIM_FRMTYP_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCMNT_PIM_FRMTYP_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_TYPE]
	DROP CONSTRAINT IF EXISTS [PIM_DOCMNT_PIM_FRMTYP_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCMNT_PIM_ACTMDO_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCMNT_PIM_ACTMDO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_DOCMNT_PIM_ACTMDO_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCMNT_PIM_ACTDOC_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCMNT_PIM_ACTDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_DOCMNT_PIM_ACTDOC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCMNT_PIM_ACQDOC_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCMNT_PIM_ACQDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_DOCMNT_PIM_ACQDOC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCMNT_PIM_LESDOC_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCMNT_PIM_LESDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_DOCMNT_PIM_LESDOC_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCTYP_PIM_DOCMNT_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCTYP_PIM_DOCMNT_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_DOCTYP_PIM_DOCMNT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DOCSTY_PIM_DOCMNT_FK
PRINT N'Drop foreign key constraint dbo.PIM_DOCSTY_PIM_DOCMNT_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [PIM_DOCSTY_PIM_DOCMNT_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.DOCMNT_DOCUMENT_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.DOCMNT_DOCUMENT_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_DOCUMENT].[DOCMNT_DOCUMENT_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.DOCMNT_DOCUMENT_ID_IDX
PRINT N'Drop index dbo.DOCMNT_DOCUMENT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_DOCUMENT].[DOCMNT_DOCUMENT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQOWN_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACQOWN_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQOWN_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCTYP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DOCTYP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCTYP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCTYP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DOCTYP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCTYP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQOWN_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACQOWN_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQOWN_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACQOWN_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACQOWN_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACQOWN_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DOCTYP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DOCTYP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DOCTYP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.PROJCT_PROJECT_STATUS_CODE_IDX
PRINT N'Drop index dbo.PROJCT_PROJECT_STATUS_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_PROJECT].[PROJCT_PROJECT_STATUS_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LESCON_CONSULTATION_TYPE_CODE_IDX
PRINT N'Drop index dbo.LESCON_CONSULTATION_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_CONSULTATION].[LESCON_CONSULTATION_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX
PRINT N'Drop index dbo.LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_LEASE_CONSULTATION].[LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.LESCON_LEASE_CONSULTATION_TUC
PRINT N'Drop unique constraint dbo.LESCON_LEASE_CONSULTATION_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	DROP CONSTRAINT IF EXISTS [LESCON_LEASE_CONSULTATION_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.CONTYP_PK
PRINT N'Drop primary key constraint dbo.CONTYP_PK'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE]
	DROP CONSTRAINT IF EXISTS [CONTYP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.CONSTY_PK
PRINT N'Drop primary key constraint dbo.CONSTY_PK'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE]
	DROP CONSTRAINT IF EXISTS [CONSTY_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.ACQPER_PERSON_PROFILE_TUC
PRINT N'Drop unique constraint dbo.ACQPER_PERSON_PROFILE_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	DROP CONSTRAINT IF EXISTS [ACQPER_PERSON_PROFILE_TUC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop unique constraint dbo.PIMS_DOCTYP_H_UK
PRINT N'Drop unique constraint dbo.PIMS_DOCTYP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_DOCTYP_H_UK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.PIMS_DOCTYP_H_PK
PRINT N'Drop primary key constraint dbo.PIMS_DOCTYP_H_PK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP_HIST]
	DROP CONSTRAINT IF EXISTS [PIMS_DOCTYP_H_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.DOCTYP_PK
PRINT N'Drop primary key constraint dbo.DOCTYP_PK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
	DROP CONSTRAINT IF EXISTS [DOCTYP_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop function dbo.pims_IsUniqueProduct
PRINT N'Drop function dbo.pims_IsUniqueProduct'
GO
DROP FUNCTION IF EXISTS [dbo].[pims_IsUniqueProduct]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.DOCMNT_PK
PRINT N'Drop primary key constraint dbo.DOCMNT_PK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
	DROP CONSTRAINT IF EXISTS [DOCMNT_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_OWNER_SOLICITOR_ID_SEQ
PRINT N'Create sequence dbo.PIMS_OWNER_SOLICITOR_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_OWNER_SOLICITOR_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT
PRINT N'Alter table dbo.PIMS_PROJECT'
GO
UPDATE [dbo].[PIMS_PROJECT] SET [PROJECT_STATUS_TYPE_CODE] = ('AC'), CONCURRENCY_CONTROL_NUMBER = CONCURRENCY_CONTROL_NUMBER + 1 WHERE [PROJECT_STATUS_TYPE_CODE] IS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROJECT] ALTER COLUMN [PROJECT_STATUS_TYPE_CODE] nvarchar(20) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROJECT] ADD CONSTRAINT [PROJCT_PROJECT_STATUS_TYPE_CODE_DEF] DEFAULT ('AC') FOR [PROJECT_STATUS_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_DOCUMENT
PRINT N'Rebuild table dbo.PIMS_DOCUMENT'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
DROP CONSTRAINT IF EXISTS [DOCMNT_DOCUMENT_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
DROP CONSTRAINT IF EXISTS [DOCMNT_DOCUMENT_STATUS_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
DROP CONSTRAINT IF EXISTS [DOCMNT_FILE_NAME_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
DROP CONSTRAINT IF EXISTS [DOCMNT_MAYAN_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
DROP CONSTRAINT IF EXISTS [DOCMNT_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
DROP CONSTRAINT IF EXISTS [DOCMNT_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
DROP CONSTRAINT IF EXISTS [DOCMNT_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
DROP CONSTRAINT IF EXISTS [DOCMNT_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
DROP CONSTRAINT IF EXISTS [DOCMNT_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
DROP CONSTRAINT IF EXISTS [DOCMNT_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
DROP CONSTRAINT IF EXISTS [DOCMNT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
DROP CONSTRAINT IF EXISTS [DOCMNT_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
DROP CONSTRAINT IF EXISTS [DOCMNT_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
DROP CONSTRAINT IF EXISTS [DOCMNT_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
DROP CONSTRAINT IF EXISTS [DOCMNT_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1680804137307]  ( 
	[DOCUMENT_ID]                   	bigint NOT NULL CONSTRAINT [DOCMNT_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DOCUMENT_ID_SEQ]),
	[DOCUMENT_TYPE_ID]              	bigint NOT NULL,
	[DOCUMENT_STATUS_TYPE_CODE]     	nvarchar(20) NOT NULL CONSTRAINT [DOCMNT_DOCUMENT_STATUS_TYPE_CODE_DEF]  DEFAULT ('NONE'),
	[FILE_NAME]                     	nvarchar(500) NOT NULL CONSTRAINT [DOCMNT_FILE_NAME_DEF]  DEFAULT ('<Empty>'),
	[MAYAN_ID]                      	bigint NOT NULL CONSTRAINT [DOCMNT_MAYAN_ID_DEF]  DEFAULT ((-1)),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [DOCMNT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DOCMNT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DOCMNT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DOCMNT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DOCMNT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DOCMNT_PK] PRIMARY KEY CLUSTERED([DOCUMENT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the file stored on Mayan EDMS.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137307', 
	@level2type = N'Column', @level2name = N'FILE_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Mayan-generated document number used for retrieval from Mayan EDMS.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137307', 
	@level2type = N'Column', @level2name = N'MAYAN_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table describing the available document types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137307'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1680804137307]([DOCUMENT_ID], [DOCUMENT_TYPE_ID], [DOCUMENT_STATUS_TYPE_CODE], [FILE_NAME], [MAYAN_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [DOCUMENT_ID], [DOCUMENT_TYPE_ID], [DOCUMENT_STATUS_TYPE_CODE], [FILE_NAME], [MAYAN_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_DOCUMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_DOCUMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1680804137307]', N'PIMS_DOCUMENT', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR
PRINT N'Create table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]  ( 
	[OWNER_SOLICITOR_ID]            	bigint NOT NULL CONSTRAINT [AQOWSO_OWNER_SOLICITOR_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_OWNER_SOLICITOR_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [AQOWSO_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [AQOWSO_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [AQOWSO_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [AQOWSO_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [AQOWSO_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [AQOWSO_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [AQOWSO_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [AQOWSO_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [AQOWSO_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [AQOWSO_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [AQOWSO_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [AQOWSO_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AQOWSO_PK] PRIMARY KEY CLUSTERED([OWNER_SOLICITOR_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER_SOLICITOR', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table describing the owners'' solicitor that is assigned to the acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER_SOLICITOR'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.AQOWSO_ACQUISITION_FILE_PERSON_TUC
PRINT N'Create unique constraint dbo.AQOWSO_ACQUISITION_FILE_PERSON_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	ADD CONSTRAINT [AQOWSO_ACQUISITION_FILE_PERSON_TUC]
	UNIQUE ([ACQUISITION_FILE_ID], [PERSON_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_AGREEMENT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_AGREEMENT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_AGREEMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_AGREEMENT_TYPE
PRINT N'Create table dbo.PIMS_AGREEMENT_TYPE'
GO
CREATE TABLE [dbo].[PIMS_AGREEMENT_TYPE]  ( 
	[AGREEMENT_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[IS_DISABLED]               	bit NULL CONSTRAINT [AGRTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [AGRTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [AGRTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [AGRTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [AGRTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [AGRTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AGRTYP_PK] PRIMARY KEY CLUSTERED([AGREEMENT_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified version of the agreement type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'AGREEMENT_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the agreement type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table that contains the codes and associated descriptions of the agreement types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_AGREEMENT
PRINT N'Create table dbo.PIMS_AGREEMENT'
GO
CREATE TABLE [dbo].[PIMS_AGREEMENT]  ( 
	[AGREEMENT_ID]                  	bigint NOT NULL CONSTRAINT [AGRMNT_AGREEMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_AGREEMENT_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[AGREEMENT_TYPE_CODE]           	nvarchar(20) NOT NULL,
	[AGREEMENT_DATE]                	date NULL,
	[AGREEMENT_STATUS]              	bit NULL CONSTRAINT [AGRMNT_AGREEMENT_STATUS_DEF]  DEFAULT (CONVERT([bit],(1))),
	[COMPLETION_DATE]               	date NULL,
	[TERMINATION_DATE]              	date NULL,
	[COMMENCEMENT_DATE]             	date NULL,
	[DEPOSIT_AMOUNT]                	money NULL,
	[NO_LATER_THAN_DAYS]            	int NULL,
	[PURCHASE_PRICE]                	money NULL,
	[LEGAL_SURVEY_PLAN_NUM]         	nvarchar(250) NULL,
	[OFFER_DATE]                    	date NULL,
	[EXPIRY_TS]                     	datetime NULL,
	[SIGNED_DATE]                   	date NULL,
	[INSPECTION_DATE]               	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [AGRMNT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [AGRMNT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [AGRMNT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [AGRMNT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [AGRMNT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [AGRMNT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [AGRMNT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [AGRMNT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [AGRMNT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [AGRMNT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [AGRMNT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AGRMNT_PK] PRIMARY KEY CLUSTERED([AGREEMENT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of the agreement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'AGREEMENT_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Status of the agreement (currently Yes/No).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'AGREEMENT_STATUS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of completion of the agreement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'COMPLETION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of termination of the agreement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'TERMINATION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of commencement of the agreement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'COMMENCEMENT_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Amount of the deposit on the agreement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'DEPOSIT_AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Deposit due date' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'NO_LATER_THAN_DAYS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Amount of the purchase price of the agreement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'PURCHASE_PRICE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Legal survey plan number,' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'LEGAL_SURVEY_PLAN_NUM'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of acquisition offer.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'OFFER_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Expiry date and time of acquisition offer.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'EXPIRY_TS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Signed date of acquisition offer.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'SIGNED_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of inspection.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT', 
	@level2type = N'Column', @level2name = N'INSPECTION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing the details of the acquisition agreement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AGREEMENT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_DOCUMENT_TYP
PRINT N'Rebuild table dbo.PIMS_DOCUMENT_TYP'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
DROP CONSTRAINT IF EXISTS [DOCTYP_DOCUMENT_TYPE_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
DROP CONSTRAINT IF EXISTS [DOCTYP_MAYAN_ID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
DROP CONSTRAINT IF EXISTS [DOCTYP_DOCUMENT_TYPE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
DROP CONSTRAINT IF EXISTS [DOCTYP_CONCURRENCY_CONTROL_NUMBER_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
DROP CONSTRAINT IF EXISTS [DOCTYP_APP_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
DROP CONSTRAINT IF EXISTS [DOCTYP_APP_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
DROP CONSTRAINT IF EXISTS [DOCTYP_APP_CREATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
DROP CONSTRAINT IF EXISTS [DOCTYP_APP_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
DROP CONSTRAINT IF EXISTS [DOCTYP_APP_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
DROP CONSTRAINT IF EXISTS [DOCTYP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
DROP CONSTRAINT IF EXISTS [DOCTYP_DB_CREATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
DROP CONSTRAINT IF EXISTS [DOCTYP_DB_CREATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
DROP CONSTRAINT IF EXISTS [DOCTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP]
DROP CONSTRAINT IF EXISTS [DOCTYP_DB_LAST_UPDATE_USERID_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TABLE [dbo].[ADS_SSDATA_1680804137301]  ( 
	[DOCUMENT_TYPE_ID]              	bigint NOT NULL CONSTRAINT [DOCTYP_DOCUMENT_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DOCUMENT_TYPE_ID_SEQ]),
	[MAYAN_ID]                      	bigint NOT NULL CONSTRAINT [DOCTYP_MAYAN_ID_DEF]  DEFAULT ((-1)),
	[DOCUMENT_TYPE]                 	nvarchar(20) NOT NULL CONSTRAINT [DOCTYP_DOCUMENT_TYPE_DEF]  DEFAULT ('<Empty>'),
	[DOCUMENT_TYPE_DESCRIPTION]     	nvarchar(200) NOT NULL CONSTRAINT [DOCTYP_DOCUMENT_TYPE_DESCRIPTION_DEF]  DEFAULT ('<Empty>'),
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [DOCTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DOCTYP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DOCTYP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DOCTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DOCTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DOCTYP_PK] PRIMARY KEY CLUSTERED([DOCUMENT_TYPE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Mayan-generated document type number used for retrieval from Mayan EDMS.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137301', 
	@level2type = N'Column', @level2name = N'MAYAN_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the available document types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137301', 
	@level2type = N'Column', @level2name = N'DOCUMENT_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the available document types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137301', 
	@level2type = N'Column', @level2name = N'DOCUMENT_TYPE_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Determines the default display order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137301', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table describing the available document types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'ADS_SSDATA_1680804137301'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1680804137301]([DOCUMENT_TYPE_ID], [MAYAN_ID], [DOCUMENT_TYPE], [DISPLAY_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [DOCUMENT_TYPE_ID], [MAYAN_ID], SUBSTRING(DOCUMENT_TYPE,1,20), [DISPLAY_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_DOCUMENT_TYP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_DOCUMENT_TYP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1680804137301]', N'PIMS_DOCUMENT_TYP', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_HIST
PRINT N'Create table dbo.PIMS_ACQUISITION_OWNER_SOLICITOR_HIST'
GO
CREATE TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_HIST]  ( 
	[_ACQUISITION_OWNER_SOLICITOR_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                 	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                       	datetime NULL,
	[OWNER_SOLICITOR_ID]                  	bigint NOT NULL,
	[ACQUISITION_FILE_ID]                 	bigint NOT NULL,
	[PERSON_ID]                           	bigint NOT NULL,
	[IS_DISABLED]                         	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]          	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[APP_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                 	datetime NOT NULL,
	[DB_CREATE_USERID]                    	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]               	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_AQOWSO_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_OWNER_SOLICITOR_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_AQOWSO_H_UK
PRINT N'Create unique constraint dbo.PIMS_AQOWSO_H_UK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_HIST]
	ADD CONSTRAINT [PIMS_AQOWSO_H_UK]
	UNIQUE ([_ACQUISITION_OWNER_SOLICITOR_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_OWNER
PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER] DROP CONSTRAINT IF EXISTS [ACQOWN_LAST_NAME_OR_CORP_NAME_1_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER]
	ADD [IS_PRIMARY_OWNER] bit NOT NULL CONSTRAINT [ACQOWN_IS_PRIMARY_OWNER_DEF] DEFAULT (CONVERT([bit],(0)))
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates that this is the file''s primary owner.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'IS_PRIMARY_OWNER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_OWNER_HIST
PRINT N'Alter table dbo.PIMS_ACQUISITION_OWNER_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST]
	ADD [IS_PRIMARY_OWNER] bit NOT NULL DEFAULT CONVERT([bit],(0))
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_AGREEMENT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_AGREEMENT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_AGREEMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_AGREEMENT_HIST
PRINT N'Create table dbo.PIMS_AGREEMENT_HIST'
GO
CREATE TABLE [dbo].[PIMS_AGREEMENT_HIST]  ( 
	[_AGREEMENT_HIST_ID]            	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_AGREEMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[AGREEMENT_ID]                  	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[AGREEMENT_TYPE_CODE]           	nvarchar(20) NOT NULL,
	[AGREEMENT_DATE]                	date NULL,
	[AGREEMENT_STATUS]              	bit NULL,
	[COMPLETION_DATE]               	date NULL,
	[TERMINATION_DATE]              	date NULL,
	[COMMENCEMENT_DATE]             	date NULL,
	[DEPOSIT_AMOUNT]                	money NULL,
	[NO_LATER_THAN_DAYS]            	int NULL,
	[PURCHASE_PRICE]                	money NULL,
	[LEGAL_SURVEY_PLAN_NUM]         	nvarchar(250) NULL,
	[OFFER_DATE]                    	date NULL,
	[EXPIRY_TS]                     	datetime NULL,
	[SIGNED_DATE]                   	date NULL,
	[INSPECTION_DATE]               	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_AGRMNT_H_PK] PRIMARY KEY CLUSTERED([_AGREEMENT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_AGRMNT_H_UK
PRINT N'Create unique constraint dbo.PIMS_AGRMNT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT_HIST]
	ADD CONSTRAINT [PIMS_AGRMNT_H_UK]
	UNIQUE ([_AGREEMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Rebuild table dbo.PIMS_DOCUMENT_TYP_HIST
PRINT N'Rebuild table dbo.PIMS_DOCUMENT_TYP_HIST'
GO
CREATE TABLE [dbo].[ADS_SSDATA_1680804137302]  ( 
	[_DOCUMENT_TYP_HIST_ID]         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DOCUMENT_TYP_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DOCUMENT_TYPE_ID]              	bigint NOT NULL,
	[MAYAN_ID]                      	bigint NOT NULL,
	[DOCUMENT_TYPE]                 	nvarchar(20) NOT NULL DEFAULT '<Empty>',
	[DOCUMENT_TYPE_DESCRIPTION]     	nvarchar(200) NOT NULL DEFAULT '<Empty>',
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DOCTYP_H_PK] PRIMARY KEY CLUSTERED([_DOCUMENT_TYP_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[ADS_SSDATA_1680804137302]([_DOCUMENT_TYP_HIST_ID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [DOCUMENT_TYPE_ID], [MAYAN_ID], [DOCUMENT_TYPE], [DISPLAY_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID]) 
	SELECT [_DOCUMENT_TYP_HIST_ID], [EFFECTIVE_DATE_HIST], [END_DATE_HIST], [DOCUMENT_TYPE_ID], [MAYAN_ID], SUBSTRING(DOCUMENT_TYPE,1,20), [DISPLAY_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID] 
	FROM [dbo].[PIMS_DOCUMENT_TYP_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE IF EXISTS [dbo].[PIMS_DOCUMENT_TYP_HIST]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC dbo.sp_rename N'[dbo].[ADS_SSDATA_1680804137302]', N'PIMS_DOCUMENT_TYP_HIST', [OBJECT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_DOCTYP_H_UK
PRINT N'Create unique constraint dbo.PIMS_DOCTYP_H_UK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP_HIST]
	ADD CONSTRAINT [PIMS_DOCTYP_H_UK]
	UNIQUE ([_DOCUMENT_TYP_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.ACQPER_FILE_PROFILE_TUC
PRINT N'Create unique constraint dbo.ACQPER_FILE_PROFILE_TUC'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	ADD CONSTRAINT [ACQPER_FILE_PROFILE_TUC]
	UNIQUE ([ACQUISITION_FILE_ID], [ACQ_FL_PERSON_PROFILE_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROJECT_HIST
PRINT N'Alter table dbo.PIMS_PROJECT_HIST'
GO
UPDATE [dbo].[PIMS_PROJECT_HIST] SET [PROJECT_STATUS_TYPE_CODE] = 'AC' WHERE [PROJECT_STATUS_TYPE_CODE] IS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_PROJECT_HIST] ALTER COLUMN [PROJECT_STATUS_TYPE_CODE] nvarchar(20) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_PROJECT_HIST' 
                   AND col.NAME = 'PROJECT_STATUS_TYPE_CODE')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_PROJECT_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TABLE [dbo].[PIMS_PROJECT_HIST] ADD DEFAULT 'AC' FOR [PROJECT_STATUS_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CONSULTATION_HIST
PRINT N'Alter table dbo.PIMS_LEASE_CONSULTATION_HIST'
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_LEASE_CONSULTATION_HIST' 
                   AND col.NAME = 'CONSULTATION_TYPE_CODE')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST] ALTER COLUMN [CONSULTATION_TYPE_CODE] nvarchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST] ADD DEFAULT 'OTHER' FOR [CONSULTATION_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_LEASE_CONSULTATION_HIST' 
                   AND col.NAME = 'CONSULTATION_STATUS_TYPE_CODE')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST] ALTER COLUMN [CONSULTATION_STATUS_TYPE_CODE] nvarchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION_HIST] ADD DEFAULT 'UNKNOWN' FOR [CONSULTATION_STATUS_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_CONSULTATION_STATUS_TYPE
PRINT N'Alter table dbo.PIMS_CONSULTATION_STATUS_TYPE'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE] DROP CONSTRAINT IF EXISTS [CONSTY_CONSULTATION_STATUS_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE] ALTER COLUMN [CONSULTATION_STATUS_TYPE_CODE] nvarchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE] ADD CONSTRAINT [CONSTY_CONSULTATION_STATUS_TYPE_CODE_DEF] DEFAULT ('OTHER') FOR [CONSULTATION_STATUS_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create primary key constraint dbo.CONSTY_PK
PRINT N'Create primary key constraint dbo.CONSTY_PK'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_STATUS_TYPE]
	ADD CONSTRAINT [CONSTY_PK]
	PRIMARY KEY CLUSTERED ([CONSULTATION_STATUS_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_CONSULTATION_TYPE
PRINT N'Alter table dbo.PIMS_CONSULTATION_TYPE'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE] DROP CONSTRAINT IF EXISTS [CONTYP_CONSULTATION_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE] ALTER COLUMN [CONSULTATION_TYPE_CODE] nvarchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE] ADD CONSTRAINT [CONTYP_CONSULTATION_TYPE_CODE_DEF] DEFAULT ('OTHER') FOR [CONSULTATION_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create primary key constraint dbo.CONTYP_PK
PRINT N'Create primary key constraint dbo.CONTYP_PK'
GO
ALTER TABLE [dbo].[PIMS_CONSULTATION_TYPE]
	ADD CONSTRAINT [CONTYP_PK]
	PRIMARY KEY CLUSTERED ([CONSULTATION_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE_CONSULTATION
PRINT N'Alter table dbo.PIMS_LEASE_CONSULTATION'
GO

-- Drop dynamically-named default constraints
PRINT N'Drop dynamically-named default constraints'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_LEASE_CONSULTATION' 
                   AND col.NAME = 'CONSULTATION_TYPE_CODE')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION] ALTER COLUMN [CONSULTATION_TYPE_CODE] nvarchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION] ADD DEFAULT 'OTHER' FOR [CONSULTATION_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION] DROP CONSTRAINT IF EXISTS [LESCON_CONSULTATION_STATUS_TYPE_CODE_DEF]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION] ALTER COLUMN [CONSULTATION_STATUS_TYPE_CODE] nvarchar(40) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION] ADD CONSTRAINT [LESCON_CONSULTATION_STATUS_TYPE_CODE_DEF] DEFAULT ('UNKNOWN') FOR [CONSULTATION_STATUS_TYPE_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.LESCON_LEASE_CONSULTATION_TUC
PRINT N'Create unique constraint dbo.LESCON_LEASE_CONSULTATION_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [LESCON_LEASE_CONSULTATION_TUC]
	UNIQUE ([CONSULTATION_TYPE_CODE], [LEASE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LESCON_CONSULTATION_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([CONSULTATION_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LESCON_CONSULTATION_TYPE_CODE_IDX
PRINT N'Create index dbo.LESCON_CONSULTATION_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [LESCON_CONSULTATION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_CONSULTATION]([CONSULTATION_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PROJCT_PROJECT_STATUS_CODE_IDX
PRINT N'Create index dbo.PROJCT_PROJECT_STATUS_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PROJCT_PROJECT_STATUS_CODE_IDX]
	ON [dbo].[PIMS_PROJECT]([PROJECT_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AQOWSO_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.AQOWSO_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AQOWSO_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]([ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AGRMNT_ACQUISITION_FILE_ID_IDX
PRINT N'Create index dbo.AGRMNT_ACQUISITION_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AGRMNT_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_AGREEMENT]([ACQUISITION_FILE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AGRMNT_AGREEMENT_TYPE_CODE_IDX
PRINT N'Create index dbo.AGRMNT_AGREEMENT_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [AGRMNT_AGREEMENT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_AGREEMENT]([AGREEMENT_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.AQOWSO_PERSON_ID_IDX
PRINT N'Create index dbo.AQOWSO_PERSON_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [AQOWSO_PERSON_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]([PERSON_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCTYP_I_S_U_TR] ON PIMS_DOCUMENT_TYP INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_TYPE_ID = deleted.DOCUMENT_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_TYP
    set "DOCUMENT_TYPE_ID" = inserted."DOCUMENT_TYPE_ID",
      "MAYAN_ID" = inserted."MAYAN_ID",
      "DOCUMENT_TYPE" = inserted."DOCUMENT_TYPE",
      "DOCUMENT_TYPE_DESCRIPTION" = inserted."DOCUMENT_TYPE_DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_TYP
    inner join inserted
    on (PIMS_DOCUMENT_TYP.DOCUMENT_TYPE_ID = inserted.DOCUMENT_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQOWSO_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_AQOWSO_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQOWSO_A_S_IUD_TR] ON PIMS_ACQUISITION_OWNER_SOLICITOR FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_OWNER_SOLICITOR_HIST set END_DATE_HIST = @curr_date where OWNER_SOLICITOR_ID in (select OWNER_SOLICITOR_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_OWNER_SOLICITOR_HIST ([OWNER_SOLICITOR_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_OWNER_SOLICITOR_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [OWNER_SOLICITOR_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR_H_ID_SEQ]) as [_ACQUISITION_OWNER_SOLICITOR_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQOWSO_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AQOWSO_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQOWSO_I_S_U_TR] ON PIMS_ACQUISITION_OWNER_SOLICITOR INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.OWNER_SOLICITOR_ID = deleted.OWNER_SOLICITOR_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_OWNER_SOLICITOR
    set "OWNER_SOLICITOR_ID" = inserted."OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_OWNER_SOLICITOR
    inner join inserted
    on (PIMS_ACQUISITION_OWNER_SOLICITOR.OWNER_SOLICITOR_ID = inserted.OWNER_SOLICITOR_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AGRTYP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AGRTYP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AGRTYP_I_S_U_TR] ON PIMS_AGREEMENT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.AGREEMENT_TYPE_CODE = deleted.AGREEMENT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_AGREEMENT_TYPE
    set "AGREEMENT_TYPE_CODE" = inserted."AGREEMENT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_AGREEMENT_TYPE
    inner join inserted
    on (PIMS_AGREEMENT_TYPE.AGREEMENT_TYPE_CODE = inserted.AGREEMENT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_A_S_IUD_TR] ON PIMS_ACQUISITION_OWNER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_OWNER_HIST set END_DATE_HIST = @curr_date where ACQUISITION_OWNER_ID in (select ACQUISITION_OWNER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_OWNER_HIST ([ACQUISITION_OWNER_ID], [ACQUISITION_FILE_ID], [ADDRESS_ID], [IS_PRIMARY_OWNER], [IS_ORGANIZATION], [LAST_NAME_AND_CORP_NAME], [OTHER_NAME], [GIVEN_NAME], [INCORPORATION_NUMBER], [REGISTRATION_NUMBER], [CONTACT_EMAIL_ADDR], [CONTACT_PHONE_NUM], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_OWNER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_OWNER_ID], [ACQUISITION_FILE_ID], [ADDRESS_ID], [IS_PRIMARY_OWNER], [IS_ORGANIZATION], [LAST_NAME_AND_CORP_NAME], [OTHER_NAME], [GIVEN_NAME], [INCORPORATION_NUMBER], [REGISTRATION_NUMBER], [CONTACT_EMAIL_ADDR], [CONTACT_PHONE_NUM], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_OWNER_H_ID_SEQ]) as [_ACQUISITION_OWNER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AGRMNT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_AGRMNT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AGRMNT_A_S_IUD_TR] ON PIMS_AGREEMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_AGREEMENT_HIST set END_DATE_HIST = @curr_date where AGREEMENT_ID in (select AGREEMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_AGREEMENT_HIST ([AGREEMENT_ID], [ACQUISITION_FILE_ID], [AGREEMENT_TYPE_CODE], [AGREEMENT_DATE], [AGREEMENT_STATUS], [COMPLETION_DATE], [TERMINATION_DATE], [COMMENCEMENT_DATE], [DEPOSIT_AMOUNT], [NO_LATER_THAN_DAYS], [PURCHASE_PRICE], [LEGAL_SURVEY_PLAN_NUM], [OFFER_DATE], [EXPIRY_TS], [SIGNED_DATE], [INSPECTION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _AGREEMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [AGREEMENT_ID], [ACQUISITION_FILE_ID], [AGREEMENT_TYPE_CODE], [AGREEMENT_DATE], [AGREEMENT_STATUS], [COMPLETION_DATE], [TERMINATION_DATE], [COMMENCEMENT_DATE], [DEPOSIT_AMOUNT], [NO_LATER_THAN_DAYS], [PURCHASE_PRICE], [LEGAL_SURVEY_PLAN_NUM], [OFFER_DATE], [EXPIRY_TS], [SIGNED_DATE], [INSPECTION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_AGREEMENT_H_ID_SEQ]) as [_AGREEMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_I_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_OWNER ("ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID",
      "ADDRESS_ID",
      "IS_PRIMARY_OWNER",
      "IS_ORGANIZATION",
      "LAST_NAME_AND_CORP_NAME",
      "OTHER_NAME",
      "GIVEN_NAME",
      "INCORPORATION_NUMBER",
      "REGISTRATION_NUMBER",
      "CONTACT_EMAIL_ADDR",
      "CONTACT_PHONE_NUM",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID",
      "ADDRESS_ID",
      "IS_PRIMARY_OWNER",
      "IS_ORGANIZATION",
      "LAST_NAME_AND_CORP_NAME",
      "OTHER_NAME",
      "GIVEN_NAME",
      "INCORPORATION_NUMBER",
      "REGISTRATION_NUMBER",
      "CONTACT_EMAIL_ADDR",
      "CONTACT_PHONE_NUM",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AGRMNT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_AGRMNT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AGRMNT_I_S_U_TR] ON PIMS_AGREEMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.AGREEMENT_ID = deleted.AGREEMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_AGREEMENT
    set "AGREEMENT_ID" = inserted."AGREEMENT_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "AGREEMENT_TYPE_CODE" = inserted."AGREEMENT_TYPE_CODE",
      "AGREEMENT_DATE" = inserted."AGREEMENT_DATE",
      "AGREEMENT_STATUS" = inserted."AGREEMENT_STATUS",
      "COMPLETION_DATE" = inserted."COMPLETION_DATE",
      "TERMINATION_DATE" = inserted."TERMINATION_DATE",
      "COMMENCEMENT_DATE" = inserted."COMMENCEMENT_DATE",
      "DEPOSIT_AMOUNT" = inserted."DEPOSIT_AMOUNT",
      "NO_LATER_THAN_DAYS" = inserted."NO_LATER_THAN_DAYS",
      "PURCHASE_PRICE" = inserted."PURCHASE_PRICE",
      "LEGAL_SURVEY_PLAN_NUM" = inserted."LEGAL_SURVEY_PLAN_NUM",
      "OFFER_DATE" = inserted."OFFER_DATE",
      "EXPIRY_TS" = inserted."EXPIRY_TS",
      "SIGNED_DATE" = inserted."SIGNED_DATE",
      "INSPECTION_DATE" = inserted."INSPECTION_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_AGREEMENT
    inner join inserted
    on (PIMS_AGREEMENT.AGREEMENT_ID = inserted.AGREEMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AGRTYP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AGRTYP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AGRTYP_I_S_I_TR] ON PIMS_AGREEMENT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_AGREEMENT_TYPE ("AGREEMENT_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER")
    select "AGREEMENT_TYPE_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCTYP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DOCTYP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCTYP_I_S_I_TR] ON PIMS_DOCUMENT_TYP INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_TYP ("DOCUMENT_TYPE_ID",
      "MAYAN_ID",
      "DOCUMENT_TYPE",
      "DOCUMENT_TYPE_DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DOCUMENT_TYPE_ID",
      "MAYAN_ID",
      "DOCUMENT_TYPE",
      "DOCUMENT_TYPE_DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCTYP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DOCTYP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCTYP_A_S_IUD_TR] ON PIMS_DOCUMENT_TYP FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DOCUMENT_TYP_HIST set END_DATE_HIST = @curr_date where DOCUMENT_TYPE_ID in (select DOCUMENT_TYPE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DOCUMENT_TYP_HIST ([DOCUMENT_TYPE_ID], [MAYAN_ID], [DOCUMENT_TYPE], [DOCUMENT_TYPE_DESCRIPTION], [DISPLAY_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DOCUMENT_TYP_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DOCUMENT_TYPE_ID], [MAYAN_ID], [DOCUMENT_TYPE], [DOCUMENT_TYPE_DESCRIPTION], [DISPLAY_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DOCUMENT_TYP_H_ID_SEQ]) as [_DOCUMENT_TYP_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AQOWSO_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AQOWSO_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AQOWSO_I_S_I_TR] ON PIMS_ACQUISITION_OWNER_SOLICITOR INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_OWNER_SOLICITOR ("OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "OWNER_SOLICITOR_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACQOWN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACQOWN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_U_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_OWNER_ID = deleted.ACQUISITION_OWNER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_OWNER
    set "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "IS_PRIMARY_OWNER" = inserted."IS_PRIMARY_OWNER",
      "IS_ORGANIZATION" = inserted."IS_ORGANIZATION",
      "LAST_NAME_AND_CORP_NAME" = inserted."LAST_NAME_AND_CORP_NAME",
      "OTHER_NAME" = inserted."OTHER_NAME",
      "GIVEN_NAME" = inserted."GIVEN_NAME",
      "INCORPORATION_NUMBER" = inserted."INCORPORATION_NUMBER",
      "REGISTRATION_NUMBER" = inserted."REGISTRATION_NUMBER",
      "CONTACT_EMAIL_ADDR" = inserted."CONTACT_EMAIL_ADDR",
      "CONTACT_PHONE_NUM" = inserted."CONTACT_PHONE_NUM",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_OWNER
    inner join inserted
    on (PIMS_ACQUISITION_OWNER.ACQUISITION_OWNER_ID = inserted.ACQUISITION_OWNER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_AGRMNT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_AGRMNT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_AGRMNT_I_S_I_TR] ON PIMS_AGREEMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_AGREEMENT ("AGREEMENT_ID",
      "ACQUISITION_FILE_ID",
      "AGREEMENT_TYPE_CODE",
      "AGREEMENT_DATE",
      "AGREEMENT_STATUS",
      "COMPLETION_DATE",
      "TERMINATION_DATE",
      "COMMENCEMENT_DATE",
      "DEPOSIT_AMOUNT",
      "NO_LATER_THAN_DAYS",
      "PURCHASE_PRICE",
      "LEGAL_SURVEY_PLAN_NUM",
      "OFFER_DATE",
      "EXPIRY_TS",
      "SIGNED_DATE",
      "INSPECTION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "AGREEMENT_ID",
      "ACQUISITION_FILE_ID",
      "AGREEMENT_TYPE_CODE",
      "AGREEMENT_DATE",
      "AGREEMENT_STATUS",
      "COMPLETION_DATE",
      "TERMINATION_DATE",
      "COMMENCEMENT_DATE",
      "DEPOSIT_AMOUNT",
      "NO_LATER_THAN_DAYS",
      "PURCHASE_PRICE",
      "LEGAL_SURVEY_PLAN_NUM",
      "OFFER_DATE",
      "EXPIRY_TS",
      "SIGNED_DATE",
      "INSPECTION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DOCMNT_DOCUMENT_ID_IDX
PRINT N'Create index dbo.DOCMNT_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DOCMNT_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DOCMNT_DOCUMENT_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.DOCMNT_DOCUMENT_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [DOCMNT_DOCUMENT_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DOCUMENT]([DOCUMENT_STATUS_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCSTY_PIM_DOCMNT_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCSTY_PIM_DOCMNT_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCSTY_PIM_DOCMNT_FK]
	FOREIGN KEY([DOCUMENT_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DOCUMENT_STATUS_TYPE]([DOCUMENT_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCTYP_PIM_DOCMNT_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCTYP_PIM_DOCMNT_FK'
GO
ALTER TABLE [dbo].[PIMS_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCTYP_PIM_DOCMNT_FK]
	FOREIGN KEY([DOCUMENT_TYPE_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT_TYP]([DOCUMENT_TYPE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_LESDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_LESDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_LESDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_AQOWSO_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_AQOWSO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_AQOWSO_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PERSON_PIM_AQOWSO_FK
PRINT N'Create foreign key constraint dbo.PIM_PERSON_PIM_AQOWSO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_SOLICITOR]
	ADD CONSTRAINT [PIM_PERSON_PIM_AQOWSO_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACQNFL_PIM_AGRMNT_FK
PRINT N'Create foreign key constraint dbo.PIM_ACQNFL_PIM_AGRMNT_FK'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_AGRMNT_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_AGRTYP_PIM_AGRMNT_FK
PRINT N'Create foreign key constraint dbo.PIM_AGRTYP_PIM_AGRMNT_FK'
GO
ALTER TABLE [dbo].[PIMS_AGREEMENT]
	ADD CONSTRAINT [PIM_AGRTYP_PIM_AGRMNT_FK]
	FOREIGN KEY([AGREEMENT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_AGREEMENT_TYPE]([AGREEMENT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_ACQDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_ACQDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_ACQDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_ACTDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_ACTDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_ACTDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_ACTMDO_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_ACTMDO_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_ACTMDO_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_FRMTYP_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_FRMTYP_FK'
GO
ALTER TABLE [dbo].[PIMS_FORM_TYPE]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_FRMTYP_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK
PRINT N'Create foreign key constraint dbo.PIM_CONSTY_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_CONSTY_PIM_LESCON_FK]
	FOREIGN KEY([CONSULTATION_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CONSULTATION_STATUS_TYPE]([CONSULTATION_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK
PRINT N'Create foreign key constraint dbo.PIM_CONTYP_PIM_LESCON_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_CONSULTATION]
	ADD CONSTRAINT [PIM_CONTYP_PIM_LESCON_FK]
	FOREIGN KEY([CONSULTATION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CONSULTATION_TYPE]([CONSULTATION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_PRJDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_PRJDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROJECT_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_PRJDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_RFLDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_RFLDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_RFLDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCMNT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DOCMNT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCMNT_A_S_IUD_TR] ON PIMS_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DOCUMENT_HIST set END_DATE_HIST = @curr_date where DOCUMENT_ID in (select DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DOCUMENT_HIST ([DOCUMENT_ID], [DOCUMENT_TYPE_ID], [DOCUMENT_STATUS_TYPE_CODE], [FILE_NAME], [MAYAN_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DOCUMENT_ID], [DOCUMENT_TYPE_ID], [DOCUMENT_STATUS_TYPE_CODE], [FILE_NAME], [MAYAN_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DOCUMENT_H_ID_SEQ]) as [_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCMNT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DOCMNT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCMNT_I_S_I_TR] ON PIMS_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT ("DOCUMENT_ID",
      "DOCUMENT_TYPE_ID",
      "DOCUMENT_STATUS_TYPE_CODE",
      "FILE_NAME",
      "MAYAN_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DOCUMENT_ID",
      "DOCUMENT_TYPE_ID",
      "DOCUMENT_STATUS_TYPE_CODE",
      "FILE_NAME",
      "MAYAN_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DOCMNT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DOCMNT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DOCMNT_I_S_U_TR] ON PIMS_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_ID = deleted.DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT
    set "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "DOCUMENT_TYPE_ID" = inserted."DOCUMENT_TYPE_ID",
      "DOCUMENT_STATUS_TYPE_CODE" = inserted."DOCUMENT_STATUS_TYPE_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "MAYAN_ID" = inserted."MAYAN_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT
    inner join inserted
    on (PIMS_DOCUMENT.DOCUMENT_ID = inserted.DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
