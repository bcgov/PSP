-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Wed Aug 17 11:13:49 PDT 2022
-- Execute this script on:
-- 		PSP_PIMS_S34_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S35_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINS_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_ACTINS_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINS_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINS_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_ACTINS_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINS_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_ACTINS_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_ACTINS_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_ACTINS_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_ACTIVITY_INSTANCE_STATUS_TYPE
PRINT N'Create table dbo.PIMS_ACTIVITY_INSTANCE_STATUS_TYPE'
GO
CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_STATUS_TYPE]  ( 
	[ACTIVITY_INSTANCE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                       	nvarchar(200) NOT NULL,
	[IS_DISABLED]                       	bit NOT NULL CONSTRAINT [ACTIST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                     	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL CONSTRAINT [ACTIST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [ACTIST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [ACTIST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTIST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTIST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTIST_PK] PRIMARY KEY CLUSTERED([ACTIVITY_INSTANCE_STATUS_TYPE_CODE])
 ON [PRIMARY])
ON [PRIMARY]
	WITH (
		DATA_COMPRESSION = NONE
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the activity instance status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'ACTIVITY_INSTANCE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the activity instance status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the activity instance status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_STATUS_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Insert seed data to support the following default FK value assertions.
PRINT N'Insert default row value into PIMS_ACTIVITY_INSTANCE_STATUS_TYPE'
GO
INSERT INTO PIMS_ACTIVITY_INSTANCE_STATUS_TYPE (ACTIVITY_INSTANCE_STATUS_TYPE_CODE, DESCRIPTION, DISPLAY_ORDER)
VALUES
  (N'NOSTART',   N'Not Started', 1);
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACTIVITY_INSTANCE
PRINT N'Alter table dbo.PIMS_ACTIVITY_INSTANCE'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]
	ADD [ACTIVITY_INSTANCE_STATUS_TYPE_CODE] nvarchar(20) NOT NULL CONSTRAINT ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_DEF DEFAULT 'NOSTART'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE
PRINT N'Create table dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE'
GO
CREATE TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]  ( 
	[RESEARCH_ACTIVITY_INSTANCE_ID] 	bigint NOT NULL CONSTRAINT [RSCHAI_RESEARCH_ACTIVITY_INSTANCE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_ACTIVITY_INSTANCE_ID_SEQ]),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [RSCHAI_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [RSCHAI_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RSCHAI_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RSCHAI_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RSCHAI_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RSCHAI_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RSCHAI_PK] PRIMARY KEY CLUSTERED([RESEARCH_ACTIVITY_INSTANCE_ID])
 ON [PRIMARY])
ON [PRIMARY]
	WITH (
		DATA_COMPRESSION = NONE
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_ACTIVITY_INSTANCE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Relates a research file to an activity instance.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_ACTIVITY_INSTANCE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACTIVITY_INSTANCE_HIST
PRINT N'Alter table dbo.PIMS_ACTIVITY_INSTANCE_HIST'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST]
	ADD [ACTIVITY_INSTANCE_STATUS_TYPE_CODE] nvarchar(20) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST
PRINT N'Create table dbo.PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST'
GO
CREATE TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST]  ( 
	[_RESEARCH_ACTIVITY_INSTANCE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_ACTIVITY_INSTANCE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[RESEARCH_ACTIVITY_INSTANCE_ID]      	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]               	bigint NOT NULL,
	[RESEARCH_FILE_ID]                   	bigint NOT NULL,
	[IS_DISABLED]                        	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RSCHAI_H_PK] PRIMARY KEY CLUSTERED([_RESEARCH_ACTIVITY_INSTANCE_HIST_ID])
 ON [PRIMARY])
ON [PRIMARY]
	WITH (
		DATA_COMPRESSION = NONE
	)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_RSCHAI_H_UK
PRINT N'Create unique constraint dbo.PIMS_RSCHAI_H_UK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST]
	ADD CONSTRAINT [PIMS_RSCHAI_H_UK]
	UNIQUE ([_RESEARCH_ACTIVITY_INSTANCE_HIST_ID], [END_DATE_HIST])  
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_IDX
PRINT N'Create index dbo.ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_STATUS_TYPE_CODE])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RSCHAI_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Create index dbo.RSCHAI_ACTIVITY_INSTANCE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [RSCHAI_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.RSCHAI_RESEARCH_FILE_ID_IDX
PRINT N'Create index dbo.RSCHAI_RESEARCH_FILE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [RSCHAI_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]([RESEARCH_FILE_ID])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTIST_PIM_ACTINS_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTIST_PIM_ACTINS_FK'
GO
ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTIST_PIM_ACTINS_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE_STATUS_TYPE]([ACTIVITY_INSTANCE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_RESRCH_PIM_RSCHAI_FK
PRINT N'Create foreign key constraint dbo.PIM_RESRCH_PIM_RSCHAI_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_RESRCH_PIM_RSCHAI_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_RSCHAI_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_RSCHAI_FK'
GO
ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_RSCHAI_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINS_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTINS_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINS_I_S_U_TR] ON PIMS_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_INSTANCE_ID = deleted.ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_INSTANCE
    set "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "ACTIVITY_TEMPLATE_ID" = inserted."ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_INSTANCE_STATUS_TYPE_CODE" = inserted."ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "ACTIVITY_DATA_JSON" = inserted."ACTIVITY_DATA_JSON",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_ACTIVITY_INSTANCE.ACTIVITY_INSTANCE_ID = inserted.ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINS_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_ACTINS_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINS_A_S_IUD_TR] ON PIMS_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where ACTIVITY_INSTANCE_ID in (select ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_INSTANCE_HIST ([ACTIVITY_INSTANCE_ID], [ACTIVITY_TEMPLATE_ID], [ACTIVITY_INSTANCE_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_INSTANCE_ID], [ACTIVITY_TEMPLATE_ID], [ACTIVITY_INSTANCE_STATUS_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTIST_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTIST_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTIST_I_S_I_TR] ON PIMS_ACTIVITY_INSTANCE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_INSTANCE_STATUS_TYPE ("ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSCHAI_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_RSCHAI_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSCHAI_A_S_IUD_TR] ON PIMS_RESEARCH_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where RESEARCH_ACTIVITY_INSTANCE_ID in (select RESEARCH_ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST ([RESEARCH_ACTIVITY_INSTANCE_ID], [ACTIVITY_INSTANCE_ID], [RESEARCH_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_ACTIVITY_INSTANCE_ID], [ACTIVITY_INSTANCE_ID], [RESEARCH_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_RESEARCH_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSCHAI_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_RSCHAI_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSCHAI_I_S_I_TR] ON PIMS_RESEARCH_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_ACTIVITY_INSTANCE ("RESEARCH_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID",
      "RESEARCH_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID",
      "RESEARCH_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTINS_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_ACTINS_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTINS_I_S_I_TR] ON PIMS_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_INSTANCE ("ACTIVITY_INSTANCE_ID",
      "ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "ACTIVITY_DATA_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_INSTANCE_ID",
      "ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "ACTIVITY_DATA_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_ACTIST_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_ACTIST_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_ACTIST_I_S_U_TR] ON PIMS_ACTIVITY_INSTANCE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_INSTANCE_STATUS_TYPE_CODE = deleted.ACTIVITY_INSTANCE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_INSTANCE_STATUS_TYPE
    set "ACTIVITY_INSTANCE_STATUS_TYPE_CODE" = inserted."ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_INSTANCE_STATUS_TYPE
    inner join inserted
    on (PIMS_ACTIVITY_INSTANCE_STATUS_TYPE.ACTIVITY_INSTANCE_STATUS_TYPE_CODE = inserted.ACTIVITY_INSTANCE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_RSCHAI_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_RSCHAI_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_RSCHAI_I_S_U_TR] ON PIMS_RESEARCH_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_ACTIVITY_INSTANCE_ID = deleted.RESEARCH_ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_ACTIVITY_INSTANCE
    set "RESEARCH_ACTIVITY_INSTANCE_ID" = inserted."RESEARCH_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_RESEARCH_ACTIVITY_INSTANCE.RESEARCH_ACTIVITY_INSTANCE_ID = inserted.RESEARCH_ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
