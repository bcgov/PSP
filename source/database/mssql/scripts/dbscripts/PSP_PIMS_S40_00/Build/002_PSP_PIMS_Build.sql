/*
Script generated by Aqua Data Studio 22.2.0 on Oct.-25-2022 12:46:36 p.m.
Database: PSP_PIMS_S40_00
Schema: dbo
Objects: DATATYPE, DEFAULT, RULE, SEQUENCE, TABLE, VIEW, SYNONYM, PROCEDURE, FUNCTION, INDEX, TRIGGER, DATABASETRIGGER, DATABASE_AUDIT_SPEC
*/
CREATE SEQUENCE [dbo].[BCA_DATA_ADVICE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[BCA_MINOR_TAXING_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[BCA_OWNER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACCESS_REQUEST_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACCESS_REQUEST_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_ACTIVITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_NO_SEQ]
	AS int
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_PERSON_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_FILE_PERSON_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_OWNER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACQUISITION_OWNER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_MODEL_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_MODEL_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_MODEL_TASK_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_SERVICE_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_TASK_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ACTIVITY_TEMPLATE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ADDRESS_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ADDRESS_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ASSET_EVALUATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_BUILDING_CONSTRUCTION_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_BUILDING_EVALUATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_BUILDING_FISCAL_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_BUILDING_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_BUILDING_OCCUPANT_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_BUILDING_PREDOMINATE_USE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_CLAIM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_CLAIM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_CONTACT_METHOD_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_CONTACT_METHOD_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DOCUMENT_TYP_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_DOCUMENT_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_GL_ACCOUNT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_INSURANCE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_INSURANCE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_L_FILE_NO_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_ACTIVITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_ACTIVITY_PERIOD_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_PAYMENT_FORECAST_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_PAYMENT_FORECAST_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_PAYMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_PAYMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_PAYMENT_PERIOD_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_PAYMENT_PERIOD_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_TENANT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_TENANT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_TERM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_LEASE_TERM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_NOTE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_NOTE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ORGANIZATION_ADDRESS_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ORGANIZATION_ADDRESS_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ORGANIZATION_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ORGANIZATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PERSON_ADDRESS_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PERSON_ADDRESS_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PERSON_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PERSON_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PERSON_ORGANIZATION_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PERSON_ORGANIZATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 21474483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_NOTE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_NOTE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_NUMBER_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_ORGANIZATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_PROPERTY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_PROPERTY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROJECT_WORKFLOW_MODEL_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_ROAD_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROP_PROP_TENURE_TYPE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ACTIVITY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_EVALUATION_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_EVALUATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_IMPROVEMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_IMPROVEMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_LEASE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_LEASE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_ORGANIZATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_RESEARCH_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_RESEARCH_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_SERVICE_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_SERVICE_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_STRUCTURE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_TAX_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_PROPERTY_TAX_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_REGION_USER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_REGION_USER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_PURPOSE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESEARCH_FILE_PURPOSE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RESPONSIBILITY_CENTRE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_RFILE_NUMBER_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ROLE_CLAIM_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ROLE_CLAIM_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ROLE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_ROLE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_SECURITY_DEPOSIT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_SECURITY_DEPOSIT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_STATIC_VARIABLE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_STRUCTURE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_TASK_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_TASK_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_TASK_TEMPLATE_ACTIVITY_MODEL_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_TASK_TEMPLATE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_TASK_TEMPLATE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_TENANT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_USER_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_USER_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_USER_ORGANIZATION_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_USER_ORGANIZATION_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_USER_ROLE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_USER_ROLE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_USER_TASK_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_WORKFLOW_MODEL_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_WORKFLOW_MODEL_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE SEQUENCE [dbo].[PIMS_YEARLY_FINANCIAL_CODE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO

CREATE TABLE [dbo].[BCA_DATA_ADVICE]  ( 
	[DATA_ADVICE_ID]                    	bigint NOT NULL CONSTRAINT [BCDADV_DATA_ADVICE_ID_DEF]  DEFAULT (NEXT VALUE FOR [BCA_DATA_ADVICE_ID_SEQ]),
	[ROLL_YEAR]                         	int NOT NULL,
	[OWNERSHIP_YEAR]                    	int NOT NULL,
	[RUN_TYPE]                          	nvarchar(16) NULL,
	[START_DATE]                        	date NOT NULL,
	[END_DATE]                          	date NOT NULL,
	[TOTAL_FOLIO_COUNT]                 	int NULL,
	[TAXABLE_FOLIO_COUNT]               	int NULL,
	[TAX_EXEMPT_FOLIO_COUNT]            	int NULL,
	[TOTAL_GROSS_LAND_VALUE]            	money NULL,
	[TOTAL_GROSS_IMPROVEMENT_VALUE]     	money NULL,
	[TOTAL_TAX_EXEMPT_LAND_VALUE]       	money NULL,
	[TOTAL_TAX_EXEMPT_IMPROVEMENT_VALUE]	money NULL,
	[TOTAL_NET_LAND_VALUE]              	money NULL,
	[TOTAL_NET_IMPROVEMENT_VALUE]       	money NULL,
	[VERSION]                           	nvarchar(50) NOT NULL,
	[REQUEST_ID]                        	nvarchar(32) NOT NULL,
	[ORDER_ID]                          	nvarchar(32) NOT NULL,
	[RUN_DATE]                          	date NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [BCDADV_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [BCDADV_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BCDADV_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BCDADV_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [BCDADV_PK] PRIMARY KEY CLUSTERED([DATA_ADVICE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Primary key' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'DATA_ADVICE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The roll year parameter used to generate the Data Advice XML document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'ROLL_YEAR'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The ownership year parameter used to generate the Data Advice XML document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'OWNERSHIP_YEAR'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Represents a code indicating the run type that generated the Data Advice XML document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'RUN_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The start date of the reporting period for the Data Advice XML document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'START_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The end date of the reporting period for the Data Advice XML document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'END_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The total number of folios included in the Data Advice XML document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'TOTAL_FOLIO_COUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The number of taxable folios included in the Data Advice XML document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'TAXABLE_FOLIO_COUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The number of exempt folios included in the Data Advice XML document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_FOLIO_COUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross sum of all land values reported for the folio group.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'TOTAL_GROSS_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross sum of all improvement(s) values reported for the folio group.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'TOTAL_GROSS_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt sum of all land values reported for the folio group.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'TOTAL_TAX_EXEMPT_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt sum of all improvement(s) values reported for the folio group.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'TOTAL_TAX_EXEMPT_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net sum of all land values reported for the folio group.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'TOTAL_NET_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net sum of all improvement(s) values reported for the folio group.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'TOTAL_NET_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Represents a version number of one to four integers separated by periods (e.g. 1.0).  Version numbers are assumed to be ordered according to standard conventions.  If "x" and "y" are version numbers where "x" precedes "y" in sort order, then "x" shall ide' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'VERSION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A unique identifier for the request that specified the order parameters.  The value is intended for BCA internal purposes only.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'REQUEST_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A unique identifier for the order that generated the Data Advice XML document.  The value is intended for BCA internal purposes only.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'ORDER_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date when the order was run to generate the Data Advice XML document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE', 
	@level2type = N'Column', @level2name = N'RUN_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Represents an entire Data Advice XML delivery for a single order.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE'
GO

CREATE TABLE [dbo].[BCA_ASSESSMENT_AREA]  ( 
	[AREA_CODE]                         	nvarchar(16) NOT NULL,
	[DATA_ADVICE_ID]                    	bigint NULL,
	[DESCRIPTION]                       	nvarchar(255) NULL,
	[TOTAL_FOLIO_COUNT]                 	int NULL,
	[TAXABLE_FOLIO_COUNT]               	int NULL,
	[TAX_EXEMPT_FOLIO_COUNT]            	int NULL,
	[TOTAL_GROSS_LAND_VALUE]            	money NULL,
	[TOTAL_GROSS_IMPROVEMENT_VALUE]     	money NULL,
	[TOTAL_TAX_EXEMPT_LAND_VALUE]       	money NULL,
	[TOTAL_TAX_EXEMPT_IMPROVEMENT_VALUE]	money NULL,
	[TOTAL_NET_NET_LAND_VALUE]          	money NULL,
	[TOTAL_NET_IMPROVEMENT_VALUE]       	money NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [BCASAR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [BCASAR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BCASAR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BCASAR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [BCASAR_PK] PRIMARY KEY CLUSTERED([AREA_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The BCA code that identifies the assessment area.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_ASSESSMENT_AREA', 
	@level2type = N'Column', @level2name = N'AREA_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The full name/description of the BCA assessment area.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_ASSESSMENT_AREA', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Represents a folio group for a single BCA assessment area.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_ASSESSMENT_AREA'
GO

CREATE TABLE [dbo].[BCA_AREA_AMENDMENT]  ( 
	[AREA_CODE]                   	nvarchar(16) NULL,
	[AMENDMENT_REASON_CODE]       	nvarchar(16) NULL,
	[AMENDMENT_REASON_DESCRIPTION]	nvarchar(255) NULL,
	[FOLIO_COUNT]                 	int NOT NULL CONSTRAINT [BCAAMD_FOLIO_COUNT_DEF]  DEFAULT ((0)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [BCAAMD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [BCAAMD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [BCAAMD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [BCAAMD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the amendment type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_AMENDMENT', 
	@level2type = N'Column', @level2name = N'AMENDMENT_REASON_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A short description of the amendment reason.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_AMENDMENT', 
	@level2type = N'Column', @level2name = N'AMENDMENT_REASON_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The folio count for the amendment type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_AMENDMENT', 
	@level2type = N'Column', @level2name = N'FOLIO_COUNT'
GO

CREATE TABLE [dbo].[BCA_AREA_BCTRANSIT_VALUE]  ( 
	[AREA_CODE]                    	nvarchar(16) NULL,
	[PROPERTY_CLASS_CODE]          	nvarchar(16) NULL,
	[PROPERTY_CLASS_DESCRIPTION]   	nvarchar(255) NULL,
	[PROPERTY_SUBCLASS_CODE]       	nvarchar(16) NULL,
	[PROPERTY_SUBCLASS_DESCRIPTION]	nvarchar(255) NULL,
	[GROSS_LAND_VALUE]             	money NULL,
	[GROSS_IMPROVEMENT_VALUE]      	money NULL,
	[TAX_EXEMPT_LAND_VALUE]        	money NULL,
	[TAX_EXEMPT_IMPROVEMENT_VALUE] 	money NULL,
	[NET_LAND_VALUE]               	money NULL,
	[NET_IMPROVEMENT_VALUE]        	money NULL,
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BCATRV_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BCATRV_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCATRV_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCATRV_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the area class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The area class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the area sub-class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The area sub-class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'NET_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'NET_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Values summarized by property class and sub-class for BC Transit purposes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_BCTRANSIT_VALUE'
GO

CREATE TABLE [dbo].[BCA_AREA_DELETE]  ( 
	[AREA_CODE]                	nvarchar(16) NULL,
	[DELETE_REASON_CODE]       	nvarchar(16) NOT NULL CONSTRAINT [BCADEL_DELETE_REASON_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[DELETE_REASON_DESCRIPTION]	nvarchar(255) NULL,
	[FOLIO_COUNT]              	int NOT NULL CONSTRAINT [BCADEL_FOLIO_COUNT_DEF]  DEFAULT ((0)),
	[DB_CREATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [BCADEL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [BCADEL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP] 	datetime NOT NULL CONSTRAINT [BCADEL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]    	nvarchar(30) NOT NULL CONSTRAINT [BCADEL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the delete reason.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_DELETE', 
	@level2type = N'Column', @level2name = N'DELETE_REASON_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A short description of the delete reason.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_DELETE', 
	@level2type = N'Column', @level2name = N'DELETE_REASON_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The folio count for the delete reason.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_DELETE', 
	@level2type = N'Column', @level2name = N'FOLIO_COUNT'
GO

CREATE TABLE [dbo].[BCA_AREA_GENERAL_VALUE]  ( 
	[AREA_CODE]                    	nvarchar(16) NULL,
	[PROPERTY_CLASS_CODE]          	nvarchar(16) NULL,
	[PROPERTY_CLASS_DESCRIPTION]   	nvarchar(255) NULL,
	[PROPERTY_SUBCLASS_CODE]       	nvarchar(16) NULL,
	[PROPERTY_SUBCLASS_DESCRIPTION]	nvarchar(255) NULL,
	[GROSS_LAND_VALUE]             	money NULL,
	[GROSS_IMPROVEMENT_VALUE]      	money NULL,
	[TAX_EXEMPT_LAND_VALUE]        	money NULL,
	[TAX_EXEMPT_IMPROVEMENT_VALUE] 	money NULL,
	[NET_LAND_VALUE]               	money NULL,
	[NET_IMPROVEMENT_VALUE]        	money NULL,
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BCAGNV_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BCAGNV_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCAGNV_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCAGNV_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the area class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The area class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the area sub-class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The area sub-class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'NET_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'NET_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Values summarized by property class and sub-class for general purposes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_GENERAL_VALUE'
GO

CREATE TABLE [dbo].[BCA_AREA_SCHOOL_VALUE]  ( 
	[AREA_CODE]                    	nvarchar(16) NULL,
	[PROPERTY_CLASS_CODE]          	nvarchar(16) NULL,
	[PROPERTY_CLASS_DESCRIPTION]   	nvarchar(255) NULL,
	[PROPERTY_SUBCLASS_CODE]       	nvarchar(16) NULL,
	[PROPERTY_SUBCLASS_DESCRIPTION]	nvarchar(255) NULL,
	[GROSS_LAND_VALUE]             	money NULL,
	[GROSS_IMPROVEMENT_VALUE]      	money NULL,
	[TAX_EXEMPT_LAND_VALUE]        	money NULL,
	[TAX_EXEMPT_IMPROVEMENT_VALUE] 	money NULL,
	[NET_LAND_VALUE]               	money NULL,
	[NET_IMPROVEMENT_VALUE]        	money NULL,
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BCASCV_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BCASCV_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCASCV_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCASCV_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the area class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The area class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the area sub-class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The area sub-class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'NET_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'NET_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Values summarized by property class and sub-class for school purposes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_AREA_SCHOOL_VALUE'
GO

CREATE TABLE [dbo].[BCA_DATA_ADVICE_AMENDMENT]  ( 
	[DATA_ADVICE_ID]              	bigint NULL,
	[AMENDMENT_REASON_CODE]       	nvarchar(16) NULL,
	[AMENDMENT_REASON_DESCRIPTION]	nvarchar(255) NULL,
	[FOLIO_COUNT]                 	int NOT NULL CONSTRAINT [BCDAMD_FOLIO_COUNT_DEF]  DEFAULT ((0)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [BCDAMD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [BCDAMD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [BCDAMD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [BCDAMD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the amendment type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_AMENDMENT', 
	@level2type = N'Column', @level2name = N'AMENDMENT_REASON_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A short description of the amendment reason.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_AMENDMENT', 
	@level2type = N'Column', @level2name = N'AMENDMENT_REASON_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The folio count for the amendment type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_AMENDMENT', 
	@level2type = N'Column', @level2name = N'FOLIO_COUNT'
GO

CREATE TABLE [dbo].[BCA_DATA_ADVICE_BCTRANSIT_VALUE]  ( 
	[DATA_ADVICE_ID]               	bigint NULL,
	[PROPERTY_CLASS_CODE]          	nvarchar(16) NULL,
	[PROPERTY_CLASS_DESCRIPTION]   	nvarchar(255) NULL,
	[PROPERTY_SUBCLASS_CODE]       	nvarchar(16) NULL,
	[PROPERTY_SUBCLASS_DESCRIPTION]	nvarchar(255) NULL,
	[GROSS_LAND_VALUE]             	money NULL,
	[GROSS_IMPROVEMENT_VALUE]      	money NULL,
	[TAX_EXEMPT_LAND_VALUE]        	money NULL,
	[TAX_EXEMPT_IMPROVEMENT_VALUE] 	money NULL,
	[NET_LAND_VALUE]               	money NULL,
	[NET_IMPROVEMENT_VALUE]        	money NULL,
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BCDTRV_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BCDTRV_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCDTRV_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCDTRV_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the property class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The property class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the property sub-class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The property sub-class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'NET_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'NET_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Values summarized by property class and sub-class for BC Transit purposes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_BCTRANSIT_VALUE'
GO

CREATE TABLE [dbo].[BCA_DATA_ADVICE_DELETE]  ( 
	[DATA_ADVICE_ID]           	bigint NULL,
	[DELETE_REASON_CODE]       	nvarchar(16) NOT NULL CONSTRAINT [BCDDEL_DELETE_REASON_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[DELETE_REASON_DESCRIPTION]	nvarchar(255) NULL,
	[FOLIO_COUNT]              	int NOT NULL CONSTRAINT [BCDDEL_FOLIO_COUNT_DEF]  DEFAULT ((0)),
	[DB_CREATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [BCDDEL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [BCDDEL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP] 	datetime NOT NULL CONSTRAINT [BCDDEL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]    	nvarchar(30) NOT NULL CONSTRAINT [BCDDEL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the delete reason.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_DELETE', 
	@level2type = N'Column', @level2name = N'DELETE_REASON_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A short description of the delete reason.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_DELETE', 
	@level2type = N'Column', @level2name = N'DELETE_REASON_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The folio count for the delete reason.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_DELETE', 
	@level2type = N'Column', @level2name = N'FOLIO_COUNT'
GO

CREATE TABLE [dbo].[BCA_DATA_ADVICE_GENERAL_VALUE]  ( 
	[DATA_ADVICE_ID]               	bigint NULL,
	[PROPERTY_CLASS_CODE]          	nvarchar(16) NULL,
	[PROPERTY_CLASS_DESCRIPTION]   	nvarchar(255) NULL,
	[PROPERTY_SUBCLASS_CODE]       	nvarchar(16) NULL,
	[PROPERTY_SUBCLASS_DESCRIPTION]	nvarchar(255) NULL,
	[GROSS_LAND_VALUE]             	money NULL,
	[GROSS_IMPROVEMENT_VALUE]      	money NULL,
	[TAX_EXEMPT_LAND_VALUE]        	money NULL,
	[TAX_EXEMPT_IMPROVEMENT_VALUE] 	money NULL,
	[NET_LAND_VALUE]               	money NULL,
	[NET_IMPROVEMENT_VALUE]        	money NULL,
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BCDGNV_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BCDGNV_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCDGNV_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCDGNV_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the property class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The property class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the property sub-class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The property sub-class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'NET_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'NET_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Values summarized by property class and sub-class for general purposes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_GENERAL_VALUE'
GO

CREATE TABLE [dbo].[BCA_DATA_ADVICE_SCHOOL_VALUE]  ( 
	[DATA_ADVICE_ID]               	bigint NULL,
	[PROPERTY_CLASS_CODE]          	nvarchar(16) NULL,
	[PROPERTY_CLASS_DESCRIPTION]   	nvarchar(255) NULL,
	[PROPERTY_SUBCLASS_CODE]       	nvarchar(16) NULL,
	[PROPERTY_SUBCLASS_DESCRIPTION]	nvarchar(255) NULL,
	[GROSS_LAND_VALUE]             	money NULL,
	[GROSS_IMPROVEMENT_VALUE]      	money NULL,
	[TAX_EXEMPT_LAND_VALUE]        	money NULL,
	[TAX_EXEMPT_IMPROVEMENT_VALUE] 	money NULL,
	[NET_LAND_VALUE]               	money NULL,
	[NET_IMPROVEMENT_VALUE]        	money NULL,
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BCDSCV_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BCDSCV_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCDSCV_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCDSCV_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the property class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The property class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the property sub-class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The property sub-class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'NET_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'NET_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Values summarized by property class and sub-class for school purposes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DATA_ADVICE_SCHOOL_VALUE'
GO

CREATE TABLE [dbo].[BCA_JURISDICTION]  ( 
	[JURISDICTION_CODE]                 	nvarchar(16) NOT NULL,
	[AREA_CODE]                         	nvarchar(16) NULL,
	[DESCRIPTION]                       	nvarchar(255) NULL,
	[TOTAL_FOLIO_COUNT]                 	int NULL,
	[TAXABLE_FOLIO_COUNT]               	int NULL,
	[TAX_EXEMPT_FOLIO_COUNT]            	int NULL,
	[TOTAL_GROSS_LAND_VALUE]            	money NULL,
	[TOTAL_GROSS_IMPROVEMENT_VALUE]     	money NULL,
	[TOTAL_TAX_EXEMPT_LAND_VALUE]       	money NULL,
	[TOTAL_TAX_EXEMPT_IMPROVEMENT_VALUE]	money NULL,
	[TOTAL_NET_LAND_VALUE]              	money NULL,
	[TOTAL_NET_IMPROVEMENT_VALUE]       	money NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [BCAJUR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [BCAJUR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BCAJUR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BCAJUR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [BCAJUR_PK] PRIMARY KEY CLUSTERED([JURISDICTION_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The BCA code that identifies the jurisdiction.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION', 
	@level2type = N'Column', @level2name = N'JURISDICTION_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The short name/description of the jurisdiction.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO

CREATE TABLE [dbo].[BCA_FOLIO_RECORD]  ( 
	[ROLL_NUMBER]             	nvarchar(32) NOT NULL,
	[JURISDICTION_CODE]       	nvarchar(16) NULL,
	[FOLIO_STATUS]            	nvarchar(16) NULL,
	[FOLIO_STATUS_DESCRIPTION]	nvarchar(255) NULL,
	[ACTION]                  	nvarchar(16) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCAFOR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCAFOR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCAFOR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCAFOR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [BCAFOR_PK] PRIMARY KEY CLUSTERED([ROLL_NUMBER])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The unique identifier for the specific folio within its jurisdiction.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_RECORD', 
	@level2type = N'Column', @level2name = N'ROLL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates the status of the folio at the time the Data Advice XML document was generated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_RECORD', 
	@level2type = N'Column', @level2name = N'FOLIO_STATUS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The short name/description of the folio status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_RECORD', 
	@level2type = N'Column', @level2name = N'FOLIO_STATUS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies the folio action: Add, Delete.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_RECORD', 
	@level2type = N'Column', @level2name = N'ACTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Represents a data record for a single folio and its associated attributes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_RECORD'
GO

CREATE TABLE [dbo].[BCA_MINOR_TAXING]  ( 
	[MINOR_TAXING_ID]         	bigint NOT NULL CONSTRAINT [BCMNTX_MINOR_TAXING_ID_DEF]  DEFAULT (NEXT VALUE FOR [BCA_MINOR_TAXING_ID_SEQ]),
	[ROLL_NUMBER]             	nvarchar(32) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCMNTX_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCMNTX_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCMNTX_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCMNTX_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [BCMNTX_PK] PRIMARY KEY CLUSTERED([MINOR_TAXING_ID])
)
GO

CREATE TABLE [dbo].[BCA_DEFINED]  ( 
	[MINOR_TAXING_ID]         	bigint NULL,
	[MINOR_TAXING_CODE]       	nvarchar(16) NULL,
	[MINOR_TAXING_CODE_SHORT] 	nvarchar(1) NULL,
	[MINOR_TAXING_DESCRIPTION]	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCADFN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCADFN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCADFN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCADFN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DEFINED', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A one-character code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DEFINED', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE_SHORT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The full name/description of the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DEFINED', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The Defined minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_DEFINED'
GO

CREATE TABLE [dbo].[BCA_ELECTORAL_AREA]  ( 
	[MINOR_TAXING_ID]         	bigint NULL,
	[MINOR_TAXING_CODE]       	nvarchar(16) NULL,
	[MINOR_TAXING_CODE_SHORT] 	nvarchar(1) NULL,
	[MINOR_TAXING_DESCRIPTION]	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCELCT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCELCT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCELCT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCELCT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_ELECTORAL_AREA', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A one-character code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_ELECTORAL_AREA', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE_SHORT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The full name/description of the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_ELECTORAL_AREA', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The Electoral Areas minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_ELECTORAL_AREA'
GO

CREATE TABLE [dbo].[BCA_FOLIO_ADDRESS]  ( 
	[ROLL_NUMBER]             	nvarchar(32) NULL,
	[ADDRESS_ID]              	nvarchar(255) NULL,
	[PRIMARY_FLAG]            	bit NULL CONSTRAINT [BCFADR_PRIMARY_FLAG_DEF]  DEFAULT (CONVERT([bit],(0))),
	[UNIT_NUMBER]             	nvarchar(255) NULL,
	[STREET_NUMBER]           	nvarchar(255) NULL,
	[STREET_DIRECTION_PREFIX] 	nvarchar(255) NULL,
	[STREET_NAME]             	nvarchar(255) NULL,
	[STREET_TYPE]             	nvarchar(255) NULL,
	[STREET_DIRECTION_SUFFIX] 	nvarchar(255) NULL,
	[CITY]                    	nvarchar(255) NULL,
	[PROVINCE_STATE]          	nvarchar(255) NULL,
	[POSTAL_ZIP]              	nvarchar(255) NULL,
	[MAP_REFERENCE_NUMBER]    	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCFADR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCFADR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCFADR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCFADR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique address identifier provided by BC Assessment.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_ADDRESS', 
	@level2type = N'Column', @level2name = N'ADDRESS_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether the address is the primary address associated with the folio.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_ADDRESS', 
	@level2type = N'Column', @level2name = N'PRIMARY_FLAG'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Apartment or suite or unit number.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_ADDRESS', 
	@level2type = N'Column', @level2name = N'UNIT_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Street number assigned by a local government (municipality).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_ADDRESS', 
	@level2type = N'Column', @level2name = N'STREET_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Further refinement of the street name to facilitate location of the folio (pre-directional).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_ADDRESS', 
	@level2type = N'Column', @level2name = N'STREET_DIRECTION_PREFIX'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Street identifier assigned by a local government (municipality).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_ADDRESS', 
	@level2type = N'Column', @level2name = N'STREET_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Road, Street, Place, etc.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_ADDRESS', 
	@level2type = N'Column', @level2name = N'STREET_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Further refinement of the street name to facilitate location of the folio (post-directional).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_ADDRESS', 
	@level2type = N'Column', @level2name = N'STREET_DIRECTION_SUFFIX'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'City name.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_ADDRESS', 
	@level2type = N'Column', @level2name = N'CITY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Province or state.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_ADDRESS', 
	@level2type = N'Column', @level2name = N'PROVINCE_STATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Postal or zip code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_ADDRESS', 
	@level2type = N'Column', @level2name = N'POSTAL_ZIP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Formerly National Topographic System (NTS) number. A geographic reference.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_ADDRESS', 
	@level2type = N'Column', @level2name = N'MAP_REFERENCE_NUMBER'
GO

CREATE TABLE [dbo].[BCA_FOLIO_AMENDMENT]  ( 
	[ROLL_NUMBER]                 	nvarchar(32) NULL,
	[AMENDMENT_TYPE]              	nvarchar(16) NULL,
	[AMENDMENT_TYPE_DESCRIPTION]  	nvarchar(255) NULL,
	[AMENDMENT_REASON_CODE]       	nvarchar(16) NULL,
	[AMENDMENT_REASON_DESCRIPTION]	nvarchar(255) NULL,
	[SUPP_OCCUPANCY_DATE]         	date NULL,
	[SUPP_OCCUPANCY_CODE]         	nvarchar(16) NULL,
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [BCAFAM_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [BCAFAM_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [BCAFAM_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [BCAFAM_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code identifying the process that resulted in the amendment.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_AMENDMENT', 
	@level2type = N'Column', @level2name = N'AMENDMENT_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A short description about the Amendment Type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_AMENDMENT', 
	@level2type = N'Column', @level2name = N'AMENDMENT_TYPE_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the reason for the amendment.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_AMENDMENT', 
	@level2type = N'Column', @level2name = N'AMENDMENT_REASON_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A short description about the Amendment Reason.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_AMENDMENT', 
	@level2type = N'Column', @level2name = N'AMENDMENT_REASON_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies the date when a SUPP occupancy began or ended.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_AMENDMENT', 
	@level2type = N'Column', @level2name = N'SUPP_OCCUPANCY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies whether the SUPP occupancy date indicates a begin (B) or end (E) date.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_AMENDMENT', 
	@level2type = N'Column', @level2name = N'SUPP_OCCUPANCY_CODE'
GO

CREATE TABLE [dbo].[BCA_FOLIO_BCTRANSIT_VALUE]  ( 
	[ROLL_NUMBER]                  	nvarchar(32) NULL,
	[PROPERTY_CLASS_CODE]          	nvarchar(16) NULL,
	[PROPERTY_CLASS_DESCRIPTION]   	nvarchar(255) NULL,
	[PROPERTY_SUBCLASS_CODE]       	nvarchar(16) NULL,
	[PROPERTY_SUBCLASS_DESCRIPTION]	nvarchar(255) NULL,
	[GROSS_LAND_VALUE]             	money NULL,
	[GROSS_IMPROVEMENT_VALUE]      	money NULL,
	[TAX_EXEMPT_LAND_VALUE]        	money NULL,
	[TAX_EXEMPT_IMPROVEMENT_VALUE] 	money NULL,
	[NET_LAND_VALUE]               	money NULL,
	[NET_IMPROVEMENT_VALUE]        	money NULL,
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BCFTRV_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BCFTRV_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCFTRV_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCFTRV_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the jurisdiction class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The jurisdiction class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the jurisdiction sub-class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The jurisdiction sub-class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'NET_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'NET_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Values summarized by property class and sub-class for BC Transit purposes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_BCTRANSIT_VALUE'
GO

CREATE TABLE [dbo].[BCA_FOLIO_DESCRIPTION]  ( 
	[ROLL_NUMBER]                           	nvarchar(32) NULL,
	[NEIGHBOURHOOD_CODE]                    	nvarchar(16) NULL,
	[NEIGHBOURHOOD_DESCRIPTION]             	nvarchar(255) NULL,
	[ACTUAL_USE_CODE]                       	nvarchar(16) NULL,
	[ACTUAL_USE_DESCRIPTION]                	nvarchar(255) NULL,
	[VACANT_FLAG]                           	bit NULL,
	[BCTRANSIT_FLAG]                        	bit NULL,
	[POLICE_TAX_FLAG]                       	bit NULL,
	[ADD_SCHOOL_TAX_3M_TO_4M_FLAG]          	bit NULL,
	[ADD_SCHOOL_TAX_GREATER_4M_FLAG]        	bit NULL,
	[CANDIDATE_FOR_SPEC_TAX_FLAG]           	bit NULL,
	[ALR_CODE]                              	nvarchar(16) NULL,
	[ALR_DESCRIPTION]                       	nvarchar(255) NULL,
	[TENURE_CODE]                           	nvarchar(16) NULL,
	[TENURE_DESCRIPTION]                    	nvarchar(255) NULL,
	[PARKING_AREA]                          	nvarchar(255) NULL,
	[LAND_DIMENSION_TYPE]                   	nvarchar(255) NULL,
	[LAND_DIMENSION_TYPE_DESCRIPTION]       	nvarchar(255) NULL,
	[LAND_DIMENSION]                        	nvarchar(255) NULL,
	[LAND_WIDTH]                            	nvarchar(255) NULL,
	[LAND_DEPTH]                            	nvarchar(255) NULL,
	[SCHOOL_DISTRICT_CODE]                  	nvarchar(16) NULL,
	[SCHOOL_DISTRICT_DESCRIPTION]           	nvarchar(255) NULL,
	[REGIONAL_DISTRICT_CODE]                	nvarchar(16) NULL,
	[REGIONAL_DISTRICT_DESCRIPTION]         	nvarchar(255) NULL,
	[REGIONAL_HOSPITAL_DISTRICT_CODE]       	nvarchar(16) NULL,
	[REGIONAL_HOSPITAL_DISTRICT_DESCRIPTION]	nvarchar(255) NULL,
	[PREDOMINANT_MANUAL_CLASS_CODE]         	nvarchar(16) NULL,
	[PREDOMINANT_MANUAL_CLASS_DESCRIPTION]  	nvarchar(255) NULL,
	[PREDOMINANT_PERCENT_DEVIATION]         	decimal(9,3) NULL,
	[DB_CREATE_TIMESTAMP]                   	datetime NOT NULL CONSTRAINT [BCAFDE_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                      	nvarchar(30) NOT NULL CONSTRAINT [BCAFDE_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [BCAFDE_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [BCAFDE_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code identifying the neighbourhood.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'NEIGHBOURHOOD_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The full name/description of the neighbourhood.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'NEIGHBOURHOOD_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Represents the code for an entry in a lookup table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'ACTUAL_USE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The full name/description of the Actual Use.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'ACTUAL_USE_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether the folio is vacant or occupied.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'VACANT_FLAG'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether the folio is subject to BC Transit taxation.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'BCTRANSIT_FLAG'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether the folio is subject to exemption.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'POLICE_TAX_FLAG'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether the folio is a subject to additional school tax (residential portion assessed between $3 and $4 million).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'ADD_SCHOOL_TAX_3M_TO_4M_FLAG'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether the folio is a subject to additional school tax (residential portion assessed over $4 million).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'ADD_SCHOOL_TAX_GREATER_4M_FLAG'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether the folio is a candidate for speculation tax.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'CANDIDATE_FOR_SPEC_TAX_FLAG'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The Agricultural Land Reserve identifier for the folio.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'ALR_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A short description about the ALR code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'ALR_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Identifies the type of ownership or occupation on land.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'TENURE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The short name/description of the tenure code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'TENURE_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Identifies the total value of the parking area (TransLink values only for Roll Years 2005 to 2007).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'PARKING_AREA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the type of land measurements being used.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'LAND_DIMENSION_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A short description about the land dimension type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'LAND_DIMENSION_TYPE_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Freeform land measurement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'LAND_DIMENSION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Land width measurement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'LAND_WIDTH'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Land depth measurement.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'LAND_DEPTH'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code identifying the special district.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'SCHOOL_DISTRICT_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The full name/description of the special district.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'SCHOOL_DISTRICT_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code identifying the special district.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'REGIONAL_DISTRICT_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The full name/description of the special district.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'REGIONAL_DISTRICT_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code identifying the special district.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'REGIONAL_HOSPITAL_DISTRICT_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The full name/description of the special district.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'REGIONAL_HOSPITAL_DISTRICT_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code identifying the state and condition of improvements and structural components.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'PREDOMINANT_MANUAL_CLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A short description about the manual class code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'PREDOMINANT_MANUAL_CLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A percentage deviation from the manual class code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'PREDOMINANT_PERCENT_DEVIATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes general characteristics of the folio.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_DESCRIPTION'
GO

CREATE TABLE [dbo].[BCA_FOLIO_FARM]  ( 
	[ROLL_NUMBER]             	nvarchar(32) NULL,
	[FARM_NUMBER]             	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCFARM_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCFARM_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCFARM_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCFARM_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A BCA farm identification number' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_FARM', 
	@level2type = N'Column', @level2name = N'FARM_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Farm associated with this folio.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_FARM'
GO

CREATE TABLE [dbo].[BCA_FOLIO_GENERAL_VALUE]  ( 
	[ROLL_NUMBER]                  	nvarchar(32) NULL,
	[PROPERTY_CLASS_CODE]          	nvarchar(16) NULL,
	[PROPERTY_CLASS_DESCRIPTION]   	nvarchar(255) NULL,
	[PROPERTY_SUBCLASS_CODE]       	nvarchar(16) NULL,
	[PROPERTY_SUBCLASS_DESCRIPTION]	nvarchar(255) NULL,
	[GROSS_LAND_VALUE]             	money NULL,
	[GROSS_IMPROVEMENT_VALUE]      	money NULL,
	[TAX_EXEMPT_LAND_VALUE]        	money NULL,
	[TAX_EXEMPT_IMPROVEMENT_VALUE] 	money NULL,
	[NET_LAND_VALUE]               	money NULL,
	[NET_IMPROVEMENT_VALUE]        	money NULL,
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BCFGNV_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BCFGNV_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCFGNV_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCFGNV_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the jurisdiction class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The jurisdiction class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the jurisdiction sub-class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The jurisdiction sub-class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'NET_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'NET_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Values summarized by property class and sub-class for general purposes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_GENERAL_VALUE'
GO

CREATE TABLE [dbo].[BCA_FOLIO_LAND_CHARACTERISTIC]  ( 
	[ROLL_NUMBER]                    	nvarchar(32) NULL,
	[LAND_CHARACTERISTIC_CODE]       	nvarchar(16) NULL,
	[LAND_CHARACTERISTIC_DESCRIPTION]	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [BCLCHR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [BCLCHR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [BCLCHR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [BCLCHR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating a characteristic of the land.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LAND_CHARACTERISTIC', 
	@level2type = N'Column', @level2name = N'LAND_CHARACTERISTIC_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A description of the LandCharacteristicCode.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LAND_CHARACTERISTIC', 
	@level2type = N'Column', @level2name = N'LAND_CHARACTERISTIC_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Represents a land characteristic.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LAND_CHARACTERISTIC'
GO

CREATE TABLE [dbo].[BCA_FOLIO_LEGAL_DESCRIPTION]  ( 
	[ROLL_NUMBER]                     	nvarchar(32) NULL,
	[FORMATTED_LEGAL_DESCRIPTION]     	nvarchar(1024) NULL,
	[PID]                             	nvarchar(255) NULL,
	[LOT]                             	nvarchar(255) NULL,
	[STRATA_LOT]                      	nvarchar(255) NULL,
	[PARCEL]                          	nvarchar(255) NULL,
	[BLOCK]                           	nvarchar(255) NULL,
	[SUB_BLOCK]                       	nvarchar(255) NULL,
	[PLAN_NUMBER]                     	nvarchar(255) NULL,
	[SUB_LOT]                         	nvarchar(255) NULL,
	[PART_1]                          	nvarchar(255) NULL,
	[PART_2]                          	nvarchar(255) NULL,
	[PART_3]                          	nvarchar(255) NULL,
	[PART_4]                          	nvarchar(255) NULL,
	[DISTRICT_LOT]                    	nvarchar(255) NULL,
	[LEGAL_SUBDIVISION]               	nvarchar(255) NULL,
	[SECTION]                         	nvarchar(255) NULL,
	[TOWNSHIP]                        	nvarchar(255) NULL,
	[RANGE]                           	nvarchar(255) NULL,
	[MERIDIAN]                        	nvarchar(255) NULL,
	[MERIDIAN_SHORT]                  	nvarchar(255) NULL,
	[BCA_GROUP]                       	nvarchar(255) NULL,
	[LAND_DISTRICT]                   	nvarchar(255) NULL,
	[LAND_DISTRICT_DESCRIPTION]       	nvarchar(255) NULL,
	[PORTION]                         	nvarchar(255) NULL,
	[EXCEPT_PLAN]                     	nvarchar(255) NULL,
	[FIRST_NATION_RESERVE_NUMBER]     	nvarchar(255) NULL,
	[FIRST_NATION_RESERVE_DESCRIPTION]	nvarchar(255) NULL,
	[LEASE_LICENSE_NUMBER]            	nvarchar(255) NULL,
	[LAND_BRANCH_FILE_NUMBER]         	nvarchar(255) NULL,
	[AIR_SPACE_PARCEL_NUMBER]         	nvarchar(255) NULL,
	[NTS_LOCATION]                    	nvarchar(255) NULL,
	[LEGAL_TEXT]                      	nvarchar(1024) NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [BCAFLD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [BCAFLD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [BCAFLD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [BCAFLD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A formatted string of all the legal description attributes with appropriate labels.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'FORMATTED_LEGAL_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The PID that uniquely identifies the legal description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'PID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Lot, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'LOT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Strata Lot, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'STRATA_LOT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Parcel, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'PARCEL'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Block, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'BLOCK'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Sub block, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'SUB_BLOCK'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Plan number, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'PLAN_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Suburban lot, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'SUB_LOT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Part 1, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'PART_1'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Part 2, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'PART_2'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Part 3, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'PART_3'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Part 4, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'PART_4'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'District lot, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'DISTRICT_LOT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Legal subdivision, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'LEGAL_SUBDIVISION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Section, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'SECTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Township, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'TOWNSHIP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Range, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'RANGE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Meridian Code, identifies a line of longitude, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'MERIDIAN'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Meridian Code, identifies a line of longitude, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'MERIDIAN_SHORT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The legal description group as defined by BCA.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'BCA_GROUP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Land district, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'LAND_DISTRICT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The short name/description of the LandDistrict.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'LAND_DISTRICT_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Portion, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'PORTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Except plan, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'EXCEPT_PLAN'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Identifier assigned to FN reserve properties by BCA.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'FIRST_NATION_RESERVE_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The short name/description of the FirstNationReserveNumber.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'FIRST_NATION_RESERVE_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Lease licence number as defined by the Ministry of Forest, Lands, and Natural Resource Operations and other valid sources of leases added to the assessment roll.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'LEASE_LICENSE_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Lands Branch File Number as defined by the Ministry of Forest, Lands, and Natural Resource Operations.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'LAND_BRANCH_FILE_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A volumetric parcel identifier.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'AIR_SPACE_PARCEL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'National Topographic System Reference Number.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'NTS_LOCATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Freeform legal text, part of the legal description of a parcel of land as provided by the Land Title and Survey Authority.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_LEGAL_DESCRIPTION', 
	@level2type = N'Column', @level2name = N'LEGAL_TEXT'
GO

CREATE TABLE [dbo].[BCA_FOLIO_MANAGED_FOREST]  ( 
	[ROLL_NUMBER]             	nvarchar(32) NULL,
	[FARM_NUMBER]             	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCMFOR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCMFOR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCMFOR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCMFOR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A BCA farm identification number' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_MANAGED_FOREST', 
	@level2type = N'Column', @level2name = N'FARM_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Managed forest information associated with this folio.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_MANAGED_FOREST'
GO

CREATE TABLE [dbo].[BCA_FOLIO_MANUFACTURED_HOME]  ( 
	[ROLL_NUMBER]             	nvarchar(32) NULL,
	[MH_REGISTRY_NUMBER]      	nvarchar(255) NULL,
	[MH_BAY_NUMBER]           	nvarchar(255) NULL,
	[MH_PARK]                 	nvarchar(255) NULL,
	[MH_PARK_ROLL_NUMBER]     	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCMANH_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCMANH_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCMANH_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCMANH_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Registration number for a manufactured home (MH) by the Manufactured Home Registry.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_MANUFACTURED_HOME', 
	@level2type = N'Column', @level2name = N'MH_REGISTRY_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Bay number associated with the manufactured home.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_MANUFACTURED_HOME', 
	@level2type = N'Column', @level2name = N'MH_BAY_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The name or other identification of the park associated with the manufactured home.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_MANUFACTURED_HOME', 
	@level2type = N'Column', @level2name = N'MH_PARK'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Park roll number associated with the manufactured home.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_MANUFACTURED_HOME', 
	@level2type = N'Column', @level2name = N'MH_PARK_ROLL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Provides information for a single manufactured home.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_MANUFACTURED_HOME'
GO

CREATE TABLE [dbo].[BCA_FOLIO_OIL_AND_GAS]  ( 
	[ROLL_NUMBER]             	nvarchar(32) NULL,
	[FARM_NUMBER]             	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCOILG_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCOILG_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCOILG_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCOILG_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A BCA farm identification number' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_OIL_AND_GAS', 
	@level2type = N'Column', @level2name = N'FARM_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Oil and gas information associated with this folio.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_OIL_AND_GAS'
GO

CREATE TABLE [dbo].[BCA_FOLIO_SALES]  ( 
	[ROLL_NUMBER]                	nvarchar(32) NULL,
	[DOCUMENT_NUMBER]            	nvarchar(255) NULL,
	[SALE_DATE]                  	date NULL,
	[SALE_PRICE]                 	money NULL,
	[SALE_STATUS_CODE]           	nvarchar(16) NULL,
	[SALE_STATUS_DESCRIPTION]    	nvarchar(255) NULL,
	[CONVEYANCE_DATE]            	date NULL,
	[CONVEYANCE_PRICE]           	money NULL,
	[CONVEYANCE_TYPE]            	nvarchar(16) NULL,
	[CONVEYANCE_TYPE_DESCRIPTION]	nvarchar(255) NULL,
	[REJECT_REASON_CODE]         	nvarchar(16) NULL,
	[REJECT_REASON_DESCRIPTION]  	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [BCAFSA_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [BCAFSA_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]   	datetime NOT NULL CONSTRAINT [BCAFSA_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]      	nvarchar(30) NOT NULL CONSTRAINT [BCAFSA_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The LTSA Document Number assigned in regard to an Indefeasible State of Title Certificate, which indicates ownership or title.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SALES', 
	@level2type = N'Column', @level2name = N'DOCUMENT_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date the LTSA document was received for registration at Land Title and Survey Authority, subject to adjustment by BCA.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SALES', 
	@level2type = N'Column', @level2name = N'SALE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The price provided on the LTSA document as received for registration at Land Title and Survey Authority, subject to adjustment by BCA.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SALES', 
	@level2type = N'Column', @level2name = N'SALE_PRICE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The code applied to the sale record by BCA property assessment staff to identify eligibility for inclusion into overall market analysis.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SALES', 
	@level2type = N'Column', @level2name = N'SALE_STATUS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A short description about the sale status code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SALES', 
	@level2type = N'Column', @level2name = N'SALE_STATUS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date associated with this sale.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SALES', 
	@level2type = N'Column', @level2name = N'CONVEYANCE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The amount of money exchanged as part of this sale.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SALES', 
	@level2type = N'Column', @level2name = N'CONVEYANCE_PRICE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The conveyance type code identifying the characteristics of the sale.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SALES', 
	@level2type = N'Column', @level2name = N'CONVEYANCE_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A short description about the conveyance type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SALES', 
	@level2type = N'Column', @level2name = N'CONVEYANCE_TYPE_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The reject reason code identifying why a sale was rejected.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SALES', 
	@level2type = N'Column', @level2name = N'REJECT_REASON_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A short description about the reject reason code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SALES', 
	@level2type = N'Column', @level2name = N'REJECT_REASON_DESCRIPTION'
GO

CREATE TABLE [dbo].[BCA_FOLIO_SCHOOL_VALUE]  ( 
	[ROLL_NUMBER]                  	nvarchar(32) NULL,
	[PROPERTY_CLASS_CODE]          	nvarchar(16) NULL,
	[PROPERTY_CLASS_DESCRIPTION]   	nvarchar(255) NULL,
	[PROPERTY_SUBCLASS_CODE]       	nvarchar(16) NULL,
	[PROPERTY_SUBCLASS_DESCRIPTION]	nvarchar(255) NULL,
	[GROSS_LAND_VALUE]             	money NULL,
	[GROSS_IMPROVEMENT_VALUE]      	money NULL,
	[TAX_EXEMPT_LAND_VALUE]        	money NULL,
	[TAX_EXEMPT_IMPROVEMENT_VALUE] 	money NULL,
	[NET_LAND_VALUE]               	money NULL,
	[NET_IMPROVEMENT_VALUE]        	money NULL,
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BCFSCV_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BCFSCV_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCFSCV_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCFSCV_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the jurisdiction class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The jurisdiction class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the jurisdiction sub-class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The jurisdiction sub-class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'NET_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'NET_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Values summarized by property class and sub-class for school purposes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_SCHOOL_VALUE'
GO

CREATE TABLE [dbo].[BCA_FOLIO_VALUATION]  ( 
	[ROLL_NUMBER]               	nvarchar(32) NULL,
	[TAX_EXEMPT_CODE]           	nvarchar(16) NULL,
	[TAX_EXEMPT_DESCRIPTION]    	nvarchar(255) NULL,
	[PROPERTY_CLASS_CODE]       	nvarchar(16) NULL,
	[PROPERTY_CLASS_DESCRIPTION]	nvarchar(255) NULL,
	[LAND_VALUE]                	money NULL,
	[IMPROVEMENT_VALUE]         	money NULL,
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [BCAVAL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [BCAVAL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [BCAVAL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [BCAVAL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exemption code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_VALUATION', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exemption code description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_VALUATION', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the property class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_VALUATION', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The code class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_VALUATION', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_VALUATION', 
	@level2type = N'Column', @level2name = N'LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The improvement(s) value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_FOLIO_VALUATION', 
	@level2type = N'Column', @level2name = N'IMPROVEMENT_VALUE'
GO

CREATE TABLE [dbo].[BCA_GENERAL_SERVICE]  ( 
	[MINOR_TAXING_ID]         	bigint NULL,
	[MINOR_TAXING_CODE]       	nvarchar(16) NULL,
	[MINOR_TAXING_CODE_SHORT] 	nvarchar(1) NULL,
	[MINOR_TAXING_DESCRIPTION]	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCGSVC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCGSVC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCGSVC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCGSVC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_GENERAL_SERVICE', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A one-character code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_GENERAL_SERVICE', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE_SHORT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The full name/description of the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_GENERAL_SERVICE', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The General Services minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_GENERAL_SERVICE'
GO

CREATE TABLE [dbo].[BCA_IMPROVEMENT_DISTRICT]  ( 
	[MINOR_TAXING_ID]         	bigint NULL,
	[MINOR_TAXING_CODE]       	nvarchar(16) NULL,
	[MINOR_TAXING_CODE_SHORT] 	nvarchar(1) NULL,
	[MINOR_TAXING_DESCRIPTION]	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCIMPD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCIMPD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCIMPD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCIMPD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_IMPROVEMENT_DISTRICT', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A one-character code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_IMPROVEMENT_DISTRICT', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE_SHORT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The full name/description of the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_IMPROVEMENT_DISTRICT', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The Improvement Districts minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_IMPROVEMENT_DISTRICT'
GO

CREATE TABLE [dbo].[BCA_ISLANDS_TRUST]  ( 
	[MINOR_TAXING_ID]         	bigint NULL,
	[MINOR_TAXING_CODE]       	nvarchar(16) NULL,
	[MINOR_TAXING_CODE_SHORT] 	nvarchar(1) NULL,
	[MINOR_TAXING_DESCRIPTION]	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCISLT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCISLT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCISLT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCISLT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_ISLANDS_TRUST', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A one-character code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_ISLANDS_TRUST', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE_SHORT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The full name/description of the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_ISLANDS_TRUST', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The Islands Trusts minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_ISLANDS_TRUST'
GO

CREATE TABLE [dbo].[BCA_JURISDICTION_AMENDMENT]  ( 
	[JURISDICTION_CODE]           	nvarchar(16) NULL,
	[AMENDMENT_REASON_CODE]       	nvarchar(16) NULL,
	[AMENDMENT_REASON_DESCRIPTION]	nvarchar(255) NULL,
	[FOLIO_COUNT]                 	int NOT NULL CONSTRAINT [BCJAMD_FOLIO_COUNT_DEF]  DEFAULT ((0)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [BCJAMD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [BCJAMD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [BCJAMD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [BCJAMD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the amendment type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_AMENDMENT', 
	@level2type = N'Column', @level2name = N'AMENDMENT_REASON_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A short description of the amendment reason.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_AMENDMENT', 
	@level2type = N'Column', @level2name = N'AMENDMENT_REASON_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The folio count for the amendment type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_AMENDMENT', 
	@level2type = N'Column', @level2name = N'FOLIO_COUNT'
GO

CREATE TABLE [dbo].[BCA_JURISDICTION_BCTRANSIT_VALUE]  ( 
	[JURISDICTION_CODE]            	nvarchar(16) NULL,
	[PROPERTY_CLASS_CODE]          	nvarchar(16) NULL,
	[PROPERTY_CLASS_DESCRIPTION]   	nvarchar(255) NULL,
	[PROPERTY_SUBCLASS_CODE]       	nvarchar(16) NULL,
	[PROPERTY_SUBCLASS_DESCRIPTION]	nvarchar(255) NULL,
	[GROSS_LAND_VALUE]             	money NULL,
	[GROSS_IMPROVEMENT_VALUE]      	money NULL,
	[TAX_EXEMPT_LAND_VALUE]        	money NULL,
	[TAX_EXEMPT_IMPROVEMENT_VALUE] 	money NULL,
	[NET_LAND_VALUE]               	money NULL,
	[NET_IMPROVEMENT_VALUE]        	money NULL,
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BCJTRV_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BCJTRV_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCJTRV_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCJTRV_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the jurisdiction class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The jurisdiction class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the jurisdiction sub-class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The jurisdiction sub-class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'NET_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_BCTRANSIT_VALUE', 
	@level2type = N'Column', @level2name = N'NET_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Values summarized by property class and sub-class for BC Transit purposes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_BCTRANSIT_VALUE'
GO

CREATE TABLE [dbo].[BCA_JURISDICTION_DELETE]  ( 
	[JURISDICTION_CODE]        	nvarchar(16) NULL,
	[DELETE_REASON_CODE]       	nvarchar(16) NOT NULL CONSTRAINT [BCJDEL_DELETE_REASON_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[DELETE_REASON_DESCRIPTION]	nvarchar(255) NULL,
	[FOLIO_COUNT]              	int NOT NULL CONSTRAINT [BCJDEL_FOLIO_COUNT_DEF]  DEFAULT ((0)),
	[DB_CREATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [BCJDEL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [BCJDEL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP] 	datetime NOT NULL CONSTRAINT [BCJDEL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]    	nvarchar(30) NOT NULL CONSTRAINT [BCJDEL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the delete reason.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_DELETE', 
	@level2type = N'Column', @level2name = N'DELETE_REASON_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A short description of the delete reason.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_DELETE', 
	@level2type = N'Column', @level2name = N'DELETE_REASON_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The folio count for the delete reason.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_DELETE', 
	@level2type = N'Column', @level2name = N'FOLIO_COUNT'
GO

CREATE TABLE [dbo].[BCA_JURISDICTION_GENERAL_VALUE]  ( 
	[JURISDICTION_CODE]            	nvarchar(16) NULL,
	[PROPERTY_CLASS_CODE]          	nvarchar(16) NULL,
	[PROPERTY_CLASS_DESCRIPTION]   	nvarchar(255) NULL,
	[PROPERTY_SUBCLASS_CODE]       	nvarchar(16) NULL,
	[PROPERTY_SUBCLASS_DESCRIPTION]	nvarchar(255) NULL,
	[GROSS_LAND_VALUE]             	money NULL,
	[GROSS_IMPROVEMENT_VALUE]      	money NULL,
	[TAX_EXEMPT_LAND_VALUE]        	money NULL,
	[TAX_EXEMPT_IMPROVEMENT_VALUE] 	money NULL,
	[NET_LAND_VALUE]               	money NULL,
	[NET_IMPROVEMENT_VALUE]        	money NULL,
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BCJGNV_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BCJGNV_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCJGNV_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCJGNV_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the jurisdiction class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The jurisdiction class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the jurisdiction sub-class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The jurisdiction sub-class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'NET_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_GENERAL_VALUE', 
	@level2type = N'Column', @level2name = N'NET_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Values summarized by property class and sub-class for general purposes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_GENERAL_VALUE'
GO

CREATE TABLE [dbo].[BCA_JURISDICTION_SCHOOL_VALUE]  ( 
	[JURISDICTION_CODE]            	nvarchar(16) NULL,
	[PROPERTY_CLASS_CODE]          	nvarchar(16) NULL,
	[PROPERTY_CLASS_DESCRIPTION]   	nvarchar(255) NULL,
	[PROPERTY_SUBCLASS_CODE]       	nvarchar(16) NULL,
	[PROPERTY_SUBCLASS_DESCRIPTION]	nvarchar(255) NULL,
	[GROSS_LAND_VALUE]             	money NULL,
	[GROSS_IMPROVEMENT_VALUE]      	money NULL,
	[TAX_EXEMPT_LAND_VALUE]        	money NULL,
	[TAX_EXEMPT_IMPROVEMENT_VALUE] 	money NULL,
	[NET_LAND_VALUE]               	money NULL,
	[NET_IMPROVEMENT_VALUE]        	money NULL,
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [BCJSCV_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [BCJSCV_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCJSCV_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCJSCV_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the jurisdiction class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The jurisdiction class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_CLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code indicating the jurisdiction sub-class.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The jurisdiction sub-class description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'PROPERTY_SUBCLASS_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The gross improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'GROSS_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The tax exempt improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'TAX_EXEMPT_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net land value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'NET_LAND_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The net improvement value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_SCHOOL_VALUE', 
	@level2type = N'Column', @level2name = N'NET_IMPROVEMENT_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Values summarized by property class and sub-class for school purposes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_JURISDICTION_SCHOOL_VALUE'
GO

CREATE TABLE [dbo].[BCA_LOCAL_AREA]  ( 
	[MINOR_TAXING_ID]         	bigint NULL,
	[MINOR_TAXING_CODE]       	nvarchar(16) NULL,
	[MINOR_TAXING_CODE_SHORT] 	nvarchar(1) NULL,
	[MINOR_TAXING_DESCRIPTION]	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCLCLA_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCLCLA_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCLCLA_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCLCLA_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_LOCAL_AREA', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A one-character code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_LOCAL_AREA', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE_SHORT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The full name/description of the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_LOCAL_AREA', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The Local Areas minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_LOCAL_AREA'
GO

CREATE TABLE [dbo].[BCA_OWNERSHIP_GROUP]  ( 
	[OWNERSHIP_GROUP_ID]                     	nvarchar(32) NOT NULL,
	[ROLL_NUMBER]                            	nvarchar(32) NULL,
	[ASSESSMENT_NOTICE_RETURNED]             	bit NULL CONSTRAINT [BCAOWG_ASSESSMENT_NOTICE_RETURNED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[ASSESSMENT_NOTICE_SUPPRESSED]           	bit NULL CONSTRAINT [BCAOWG_ASSESSMENT_NOTICE_SUPPRESSED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CHANGE_TYPE]                            	nvarchar(16) NULL,
	[CHANGE_TYPE_DESCRIPTION]                	nvarchar(255) NULL,
	[CHANGE_DATE]                            	date NULL,
	[FORMATTED_MAILING_ADDR_LINE_1]          	nvarchar(40) NULL,
	[FORMATTED_MAILING_ADDR_LINE_2]          	nvarchar(40) NULL,
	[FORMATTED_MAILING_ADDR_LINE_3]          	nvarchar(40) NULL,
	[FORMATTED_MAILING_ADDR_LINE_4]          	nvarchar(40) NULL,
	[FORMATTED_MAILING_ADDR_LINE_5]          	nvarchar(40) NULL,
	[FORMATTED_MAILING_ADDR_LINE_6]          	nvarchar(40) NULL,
	[MAILING_ADDR_ATTENTION]                 	nvarchar(255) NULL,
	[MAILING_ADDR_CARE_OF]                   	nvarchar(255) NULL,
	[MAILING_ADDR_FLOOR]                     	nvarchar(255) NULL,
	[MAILING_ADDR_UNIT_NUMBER]               	nvarchar(255) NULL,
	[MAILING_ADDR_STREET_DIRECTION_PREFIX]   	nvarchar(255) NULL,
	[MAILING_ADDR_STREET_NUMBER]             	nvarchar(255) NULL,
	[MAILING_ADDR_STREET_NAME]               	nvarchar(255) NULL,
	[MAILING_ADDR_STREET_TYPE]               	nvarchar(255) NULL,
	[MAILING_ADDR_STREET_DIRECTION_SUFFIX]   	nvarchar(255) NULL,
	[MAILING_ADDR_CITY]                      	nvarchar(255) NULL,
	[MAILING_ADDR_PROVINCE_STATE]            	nvarchar(255) NULL,
	[MAILING_ADDR_COUNTRY]                   	nvarchar(255) NULL,
	[MAILING_ADDR_POSTAL_ZIP]                	nvarchar(255) NULL,
	[MAILING_ADDR_FREE_FORM]                 	nvarchar(255) NULL,
	[MAILING_ADDR_COMPARTMENT]               	nvarchar(255) NULL,
	[MAILING_ADDR_DELIVERY_INSTALLATION_TYPE]	nvarchar(255) NULL,
	[MAILING_ADDR_MODE_OF_DELIVERY]          	nvarchar(255) NULL,
	[MAILING_ADDR_MODE_OF_DELIVERY_VALUE]    	nvarchar(255) NULL,
	[MAILING_ADDR_SITE]                      	nvarchar(255) NULL,
	[MAILING_ADDR_BULK_MAIL_CODE]            	nvarchar(255) NULL,
	[CHANGE_SOURCE]                          	nvarchar(16) NULL,
	[CHANGE_SOURCE_DESCRIPTION]              	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]                    	datetime NOT NULL CONSTRAINT [BCAOWG_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                       	nvarchar(30) NOT NULL CONSTRAINT [BCAOWG_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [BCAOWG_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [BCAOWG_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [BCAOWG_PK] PRIMARY KEY CLUSTERED([OWNERSHIP_GROUP_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Identifies the group of property owners.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'OWNERSHIP_GROUP_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether the Assessment Notice for the current roll year was returned' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'ASSESSMENT_NOTICE_RETURNED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether BCA has not sent out an Assessment Notice to this owner based' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'ASSESSMENT_NOTICE_SUPPRESSED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code identifying the type of the most recent change to the ownership information.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'CHANGE_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The short name/description of the ChangeType.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'CHANGE_TYPE_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date of the most recent change to the ownership information.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'CHANGE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Formatted address line for mailing purposes: Line 1 consists of C/O label and value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'FORMATTED_MAILING_ADDR_LINE_1'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Formatted address line for mailing purposes: Line 2 consists of Attention label and value.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'FORMATTED_MAILING_ADDR_LINE_2'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Formatted address line for mailing purposes: Line 3 consists of value of freeform address field.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'FORMATTED_MAILING_ADDR_LINE_3'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Formatted address line for mailing purposes: Line 4 consists of Unit and Floor Number label and value if there is not enough room on Line 5.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'FORMATTED_MAILING_ADDR_LINE_4'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Formatted address line for mailing purposes: Line 5 consists of street number, name, type and directional data.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'FORMATTED_MAILING_ADDR_LINE_5'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Formatted address line for mailing purposes: Line 6 consists of Site and Compartment label and values' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'FORMATTED_MAILING_ADDR_LINE_6'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Attention, as required for mail to be sent to the owners mailing address.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_ATTENTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Care Of, as required for mail to be sent to the owners mailing address.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_CARE_OF'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Floor, as required for mail to be sent to the owners mailing address.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_FLOOR'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Apartment or Suite or Unit Number, as required for mail to be sent to the owners mailing address.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_UNIT_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Further refinement of the street name to facilitate location of building (pre-directional), as required for mail to be sent to the owners mailing address.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_STREET_DIRECTION_PREFIX'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Street number assigned by a local government (municipality), as required for mail to be sent to the owners mailing address.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_STREET_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Road name assigned by a local government (municipality), as required for mail to be sent to the owners mailing address.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_STREET_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Street type assigned by a local government (municipality), as required for mail to be sent to the owners mailing address.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_STREET_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Further refinement of the street name to facilitate location of building (post-directional), as required for mail to be sent to the owners mailing address.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_STREET_DIRECTION_SUFFIX'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'City, as required for mail to be sent to the owners mailing address.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_CITY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Province or state, as required for mail to be sent to the owners mailing address.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_PROVINCE_STATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Country, as required for mail to be sent to the owners mailing address.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_COUNTRY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Postal or zip code, as required for mail to be sent to the owners mailing address.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_POSTAL_ZIP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Additional mailing address information not fitting in any of the predefined fields, as required for mail to be sent to the owners mailing address.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_FREE_FORM'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Compartment, as required for mail to be sent to the owners mailing address.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_COMPARTMENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Delivery installation type, as required for mail to be sent to the owners mailing address.  E.g. Station, Post Office, Letter Carrier Depot, etc.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_DELIVERY_INSTALLATION_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Mode of Delivery, as required for mail to be sent to the owners mailing address.  e.g. Rural Route, Post Office Box, General Delivery, etc.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_MODE_OF_DELIVERY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Mode of delivery value, as required for mail to be sent to the owners mailing address.  e.g. RR 876, PO Box 19, etc.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_MODE_OF_DELIVERY_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Site value, as required for mail to be sent to the owners mailing address.  e.g. Site 10.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_SITE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Identifies when five or more properties are linked to a name record or when five or more name records with a single mailing address are linked to a folio.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'MAILING_ADDR_BULK_MAIL_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Identifies the source of the most recent change to the ownership information.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'CHANGE_SOURCE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The short name/description of the ChangeSource.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP', 
	@level2type = N'Column', @level2name = N'CHANGE_SOURCE_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Represents a group of property owners with details in common.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNERSHIP_GROUP'
GO

CREATE TABLE [dbo].[BCA_OWNER]  ( 
	[OWNER_ID]                	bigint NOT NULL CONSTRAINT [BCAOWN_OWNER_ID_DEF]  DEFAULT (NEXT VALUE FOR [BCA_OWNER_ID_SEQ]),
	[OWNERSHIP_GROUP_ID]      	nvarchar(32) NOT NULL,
	[FIRST_NAME]              	nvarchar(255) NULL,
	[MIDDLE_NAME]             	nvarchar(255) NULL,
	[MIDDLE_INITIAL]          	nvarchar(1) NULL,
	[COMPANY_OR_LAST_NAME]    	nvarchar(255) NULL,
	[OWNER_SEQUENCE_ID]       	nvarchar(32) NULL,
	[EQUITY_TYPE]             	nvarchar(16) NULL,
	[EQUITY_TYPE_DESCRIPTION] 	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCAOWN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCAOWN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCAOWN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCAOWN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [BCAOWN_PK] PRIMARY KEY CLUSTERED([OWNER_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The first name of an owner.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNER', 
	@level2type = N'Column', @level2name = N'FIRST_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The middle name of an owner.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNER', 
	@level2type = N'Column', @level2name = N'MIDDLE_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The middle initial of an owner.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNER', 
	@level2type = N'Column', @level2name = N'MIDDLE_INITIAL'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The company name or last name of an owner.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNER', 
	@level2type = N'Column', @level2name = N'COMPANY_OR_LAST_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Identifies the sequence owners should be listed within an ownership group.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNER', 
	@level2type = N'Column', @level2name = N'OWNER_SEQUENCE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Identifies the type of relationship an owner/lessee/occupier has to the folio.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNER', 
	@level2type = N'Column', @level2name = N'EQUITY_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The short name/description of the equity type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_OWNER', 
	@level2type = N'Column', @level2name = N'EQUITY_TYPE_DESCRIPTION'
GO

CREATE TABLE [dbo].[BCA_SERVICE_AREA]  ( 
	[MINOR_TAXING_ID]         	bigint NULL,
	[MINOR_TAXING_CODE]       	nvarchar(16) NULL,
	[MINOR_TAXING_CODE_SHORT] 	nvarchar(1) NULL,
	[MINOR_TAXING_DESCRIPTION]	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCSVCA_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCSVCA_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCSVCA_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCSVCA_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_SERVICE_AREA', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A one-character code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_SERVICE_AREA', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE_SHORT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The full name/description of the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_SERVICE_AREA', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The Service Areas minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_SERVICE_AREA'
GO

CREATE TABLE [dbo].[BCA_SPECIFIED_MUNICIPAL]  ( 
	[MINOR_TAXING_ID]         	bigint NULL,
	[MINOR_TAXING_CODE]       	nvarchar(16) NULL,
	[MINOR_TAXING_CODE_SHORT] 	nvarchar(1) NULL,
	[MINOR_TAXING_DESCRIPTION]	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCSPMU_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCSPMU_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCSPMU_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCSPMU_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_SPECIFIED_MUNICIPAL', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A one-character code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_SPECIFIED_MUNICIPAL', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE_SHORT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The full name/description of the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_SPECIFIED_MUNICIPAL', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The Specified Municipal minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_SPECIFIED_MUNICIPAL'
GO

CREATE TABLE [dbo].[BCA_SPECIFIED_REGIONAL]  ( 
	[MINOR_TAXING_ID]         	bigint NULL,
	[MINOR_TAXING_CODE]       	nvarchar(16) NULL,
	[MINOR_TAXING_CODE_SHORT] 	nvarchar(1) NULL,
	[MINOR_TAXING_DESCRIPTION]	nvarchar(255) NULL,
	[DB_CREATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [BCSPRG_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [BCSPRG_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]	datetime NOT NULL CONSTRAINT [BCSPRG_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]   	nvarchar(30) NOT NULL CONSTRAINT [BCSPRG_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()) 
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_SPECIFIED_REGIONAL', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A one-character code identifying the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_SPECIFIED_REGIONAL', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_CODE_SHORT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The full name/description of the minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_SPECIFIED_REGIONAL', 
	@level2type = N'Column', @level2name = N'MINOR_TAXING_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The Specified Regional minor taxing jurisdiction (MTXJ).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'BCA_SPECIFIED_REGIONAL'
GO

CREATE TABLE [dbo].[PIMSX_TableDefinitions]  ( 
	[TABLE_NAME]   	nvarchar(255) NULL,
	[TABLE_ALIAS]  	nvarchar(255) NULL,
	[HIST_REQUIRED]	nvarchar(1) NULL,
	[DESCRIPTION]  	nvarchar(max) NULL 
	)
GO

CREATE TABLE [dbo].[PIMS_ACCESS_REQUEST_STATUS_TYPE]  ( 
	[ACCESS_REQUEST_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[IS_DISABLED]                    	bit NOT NULL CONSTRAINT [ARQSTT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                  	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [ARQSTT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [ARQSTT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [ARQSTT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ARQSTT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ARQSTT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ARQSTT_PK] PRIMARY KEY CLUSTERED([ACCESS_REQUEST_STATUS_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_REGION]  ( 
	[REGION_CODE]               	smallint NOT NULL,
	[REGION_NAME]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [REGION_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [REGION_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [REGION_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [REGION_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [REGION_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [REGION_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [REGION_PK] PRIMARY KEY CLUSTERED([REGION_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_ROLE]  ( 
	[ROLE_ID]                       	bigint NOT NULL CONSTRAINT [ROLE_ROLE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ROLE_ID_SEQ]),
	[ROLE_UID]                      	uniqueidentifier NOT NULL,
	[KEYCLOAK_GROUP_ID]             	uniqueidentifier NULL,
	[NAME]                          	nvarchar(100) NOT NULL,
	[DESCRIPTION]                   	nvarchar(500) NULL,
	[IS_PUBLIC]                     	bit NOT NULL CONSTRAINT [ROLE_IS_PUBLIC_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [ROLE_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[SORT_ORDER]                    	int NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ROLE_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ROLE_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ROLE_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ROLE_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ROLE_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ROLE_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ROLE_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ROLE_PK] PRIMARY KEY CLUSTERED([ROLE_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PERSON]  ( 
	[PERSON_ID]                     	bigint NOT NULL CONSTRAINT [PERSON_PERSON_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PERSON_ID_SEQ]),
	[SURNAME]                       	nvarchar(50) NOT NULL,
	[FIRST_NAME]                    	nvarchar(50) NOT NULL,
	[MIDDLE_NAMES]                  	nvarchar(200) NULL,
	[NAME_SUFFIX]                   	nvarchar(50) NULL,
	[PREFERRED_NAME]                	nvarchar(200) NULL,
	[BIRTH_DATE]                    	date NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[ADDRESS_COMMENT]               	nvarchar(2000) NULL,
	[USE_ORGANIZATION_ADDRESS]      	bit NULL CONSTRAINT [PERSON_USE_ORGANIZATION_ADDRESS_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [PERSON_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PERSON_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PERSON_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PERSON_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PERSON_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PERSON_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PERSON_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PERSON_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PERSON_PK] PRIMARY KEY CLUSTERED([PERSON_ID])
)
GO

CREATE TABLE [dbo].[PIMS_USER]  ( 
	[USER_ID]                       	bigint NOT NULL CONSTRAINT [USER_USER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_USER_ID_SEQ]),
	[PERSON_ID]                     	bigint NOT NULL,
	[BUSINESS_IDENTIFIER_VALUE]     	nvarchar(30) NOT NULL,
	[GUID_IDENTIFIER_VALUE]         	uniqueidentifier NULL,
	[POSITION]                      	nvarchar(100) NULL,
	[NOTE]                          	nvarchar(1000) NULL,
	[LAST_LOGIN]                    	datetime NULL,
	[APPROVED_BY_ID]                	nvarchar(30) NULL,
	[ISSUE_DATE]                    	datetime NOT NULL,
	[EXPIRY_DATE]                   	datetime NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [USER_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [USER_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [USER_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [USER_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [USER_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [USER_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [USER_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [USER_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [USER_PK] PRIMARY KEY CLUSTERED([USER_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Accepted identifier of a user (e.g. IDIR)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'BUSINESS_IDENTIFIER_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Unique GUID associated with the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'GUID_IDENTIFIER_VALUE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Role/position assigned to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'POSITION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes associated with this user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Last date/time the user was logged into PIMS.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'LAST_LOGIN'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Identifier of the person that approved the creation of this PIMS user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'APPROVED_BY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date/time that this user was identified as a PIMS user,' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'ISSUE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Expiry date/time of this user account.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if this user account is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Information associated with an identified PIMS system user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER'
GO

CREATE TABLE [dbo].[PIMS_ACCESS_REQUEST]  ( 
	[ACCESS_REQUEST_ID]              	bigint NOT NULL CONSTRAINT [ACRQST_ACCESS_REQUEST_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACCESS_REQUEST_ID_SEQ]),
	[USER_ID]                        	bigint NOT NULL,
	[ROLE_ID]                        	bigint NULL,
	[ACCESS_REQUEST_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[REGION_CODE]                    	smallint NOT NULL CONSTRAINT [ACRQST_REGION_CODE_DEF]  DEFAULT ((4)),
	[NOTE]                           	nvarchar(max) NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [ACRQST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACRQST_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACRQST_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [ACRQST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [ACRQST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ACRQST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ACRQST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACRQST_PK] PRIMARY KEY CLUSTERED([ACCESS_REQUEST_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Note associated with this access request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACCESS_REQUEST', 
	@level2type = N'Column', @level2name = N'NOTE'
GO

CREATE TABLE [dbo].[PIMS_ACCESS_REQUEST_HIST]  ( 
	[_ACCESS_REQUEST_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACCESS_REQUEST_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[ACCESS_REQUEST_ID]              	bigint NOT NULL,
	[USER_ID]                        	bigint NOT NULL,
	[ROLE_ID]                        	bigint NULL,
	[ACCESS_REQUEST_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[REGION_CODE]                    	smallint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACRQST_H_PK] PRIMARY KEY CLUSTERED([_ACCESS_REQUEST_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DISTRICT]  ( 
	[DISTRICT_CODE]             	smallint NOT NULL,
	[REGION_CODE]               	smallint NOT NULL,
	[DISTRICT_NAME]             	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [DSTRCT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [DSTRCT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [DSTRCT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [DSTRCT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [DSTRCT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [DSTRCT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DSTRCT_PK] PRIMARY KEY CLUSTERED([DISTRICT_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_ORG_IDENTIFIER_TYPE]  ( 
	[ORG_IDENTIFIER_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [ORGIDT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [ORGIDT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ORGIDT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ORGIDT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [ORGIDT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [ORGIDT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ORGIDT_PK] PRIMARY KEY CLUSTERED([ORG_IDENTIFIER_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_ORGANIZATION_TYPE]  ( 
	[ORGANIZATION_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [ORGTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [ORGTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ORGTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ORGTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [ORGTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [ORGTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ORGTYP_PK] PRIMARY KEY CLUSTERED([ORGANIZATION_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_ORGANIZATION]  ( 
	[ORGANIZATION_ID]               	bigint NOT NULL CONSTRAINT [ORG_ORGANIZATION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ORGANIZATION_ID_SEQ]),
	[PRNT_ORGANIZATION_ID]          	bigint NULL,
	[REGION_CODE]                   	smallint NULL,
	[DISTRICT_CODE]                 	smallint NULL,
	[ORGANIZATION_TYPE_CODE]        	nvarchar(20) NULL,
	[ORG_IDENTIFIER_TYPE_CODE]      	nvarchar(20) NULL,
	[ORGANIZATION_IDENTIFIER]       	nvarchar(100) NULL,
	[ORGANIZATION_NAME]             	nvarchar(200) NOT NULL,
	[ORGANIZATION_ALIAS]            	nvarchar(200) NULL,
	[INCORPORATION_NUMBER]          	nvarchar(50) NULL,
	[WEBSITE]                       	nvarchar(200) NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [ORG_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ORG_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ORG_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ORG_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ORG_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ORG_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ORG_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ORG_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ORG_PK] PRIMARY KEY CLUSTERED([ORGANIZATION_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Incorporation number of the orgnization' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ORGANIZATION', 
	@level2type = N'Column', @level2name = N'INCORPORATION_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Information related to an organization identified in the PSP system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ORGANIZATION'
GO

CREATE TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION]  ( 
	[ACCESS_REQUEST_ORGANIZATION_ID]	bigint NOT NULL CONSTRAINT [ACRQOR_ACCESS_REQUEST_ORGANIZATION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACCESS_REQUEST_ORGANIZATION_ID_SEQ]),
	[ORGANIZATION_ID]               	bigint NULL,
	[ACCESS_REQUEST_ID]             	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [ACRQOR_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACRQOR_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACRQOR_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACRQOR_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACRQOR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACRQOR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACRQOR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACRQOR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACRQOR_PK] PRIMARY KEY CLUSTERED([ACCESS_REQUEST_ORGANIZATION_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_HIST]  ( 
	[_ACCESS_REQUEST_ORGANIZATION_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                 	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                       	datetime NULL,
	[ACCESS_REQUEST_ORGANIZATION_ID]      	bigint NOT NULL,
	[ORGANIZATION_ID]                     	bigint NULL,
	[ACCESS_REQUEST_ID]                   	bigint NOT NULL,
	[IS_DISABLED]                         	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]          	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[APP_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                 	datetime NOT NULL,
	[DB_CREATE_USERID]                    	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]               	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACRQOR_H_PK] PRIMARY KEY CLUSTERED([_ACCESS_REQUEST_ORGANIZATION_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ACQ_PHYS_FILE_STATUS_TYPE]  ( 
	[ACQ_PHYS_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [ACQPFS_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACQPFS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACQPFS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACQPFS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACQPFS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACQPFS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQPFS_PK] PRIMARY KEY CLUSTERED([ACQ_PHYS_FILE_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the acquistion physical file status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'ACQ_PHYS_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquistion physical file status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PHYS_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquistion physical file status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_PHYS_FILE_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_STATUS_TYPE]  ( 
	[ACQUISITION_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                      	nvarchar(200) NOT NULL,
	[IS_DISABLED]                      	bit NOT NULL CONSTRAINT [ACQFST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                    	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL CONSTRAINT [ACQFST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [ACQFST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [ACQFST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [ACQFST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [ACQFST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQFST_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FILE_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the acquistion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquistion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquistion file status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FUNDING_TYPE]  ( 
	[ACQUISITION_FUNDING_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                  	nvarchar(200) NOT NULL,
	[IS_DISABLED]                  	bit NOT NULL CONSTRAINT [ACQFTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]   	bigint NOT NULL CONSTRAINT [ACQFTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACQFTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACQFTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACQFTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACQFTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQFTY_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FUNDING_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the acquistion funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_FUNDING_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquistion funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FUNDING_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquistion funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FUNDING_TYPE'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_TYPE]  ( 
	[ACQUISITION_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [ACQTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [ACQTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ACQTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ACQTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [ACQTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [ACQTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQTYP_PK] PRIMARY KEY CLUSTERED([ACQUISITION_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the acquistion type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_TYPE', 
	@level2type = N'Column', @level2name = N'ACQUISITION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquistion type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquistion type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_TYPE'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE]  ( 
	[ACQUISITION_FILE_ID]              	bigint NOT NULL CONSTRAINT [ACQNFL_ACQUISITION_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_ID_SEQ]),
	[ACQUISITION_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[ACQUISITION_TYPE_CODE]            	nvarchar(20) NOT NULL,
	[ACQUISITION_FUNDING_TYPE_CODE]    	nvarchar(20) NULL,
	[ACQ_PHYS_FILE_STATUS_TYPE_CODE]   	nvarchar(20) NULL,
	[REGION_CODE]                      	smallint NOT NULL CONSTRAINT [ACQNFL_REGION_CODE_DEF]  DEFAULT ((-1)),
	[MINISTRY_PROJECT_NUMBER]          	nvarchar(20) NULL,
	[MINISTRY_PROJECT_NAME]            	nvarchar(100) NULL,
	[CPS_PRODUCT_CODE]                 	nvarchar(12) NULL,
	[FILE_NAME]                        	nvarchar(500) NOT NULL,
	[FILE_NO]                          	int NOT NULL CONSTRAINT [ACQNFL_FILE_NO_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_NO_SEQ]),
	[FILE_NUMBER]                      	nvarchar(18) NOT NULL CONSTRAINT [ACQNFL_FILE_NUMBER_DEF]  DEFAULT ('<Empty>'),
	[FUNDING_OTHER]                    	nvarchar(200) NULL,
	[ASSIGNED_DATE]                    	datetime NULL CONSTRAINT [ACQNFL_ASSIGNED_DATE_DEF]  DEFAULT (getutcdate()),
	[DELIVERY_DATE]                    	datetime NULL,
	[PAIMS_ACQUISITION_FILE_ID]        	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL CONSTRAINT [ACQNFL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [ACQNFL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [ACQNFL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [ACQNFL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [ACQNFL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [ACQNFL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQNFL_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FILE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Region responsible for oversight of the acquisition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'REGION_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Ministry project number.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'MINISTRY_PROJECT_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Ministry project name.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'MINISTRY_PROJECT_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'CPS product code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'CPS_PRODUCT_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive name given to the acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'FILE_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'File number assigned to the acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'FILE_NO'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Formatted file number assigned to the acquisition file.  Format follows YY-XXXXXX-ZZ where YY = MoTI region number, XXXXXX = generated integer sequence number,  and ZZ = file suffix number (defaulting to ''01'')' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'FILE_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of other funding type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'FUNDING_OTHER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of file assignment.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'ASSIGNED_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of file delivery.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DELIVERY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Legacy Acquisition File ID from the PAIMS system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'PAIMS_ACQUISITION_FILE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity containing information regarding an acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE'
GO

CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_STATUS_TYPE]  ( 
	[ACTIVITY_INSTANCE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                       	nvarchar(200) NOT NULL,
	[IS_DISABLED]                       	bit NOT NULL CONSTRAINT [ACTIST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                     	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL CONSTRAINT [ACTIST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [ACTIST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [ACTIST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTIST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTIST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTIST_PK] PRIMARY KEY CLUSTERED([ACTIVITY_INSTANCE_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the activity instance status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'ACTIVITY_INSTANCE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the activity instance status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the activity instance status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_TYPE]  ( 
	[ACTIVITY_TEMPLATE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                	nvarchar(200) NOT NULL,
	[IS_DISABLED]                	bit NOT NULL CONSTRAINT [ACTTTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]              	int NULL,
	[CONCURRENCY_CONTROL_NUMBER] 	bigint NOT NULL CONSTRAINT [ACTTTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [ACTTTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [ACTTTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]   	datetime NOT NULL CONSTRAINT [ACTTTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]      	nvarchar(30) NOT NULL CONSTRAINT [ACTTTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTTTY_PK] PRIMARY KEY CLUSTERED([ACTIVITY_TEMPLATE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the activity type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_TYPE', 
	@level2type = N'Column', @level2name = N'ACTIVITY_TEMPLATE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the activity type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the activity type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE]  ( 
	[ACTIVITY_TEMPLATE_ID]          	bigint NOT NULL CONSTRAINT [ACTTMP_ACTIVITY_TEMPLATE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_TEMPLATE_ID_SEQ]),
	[ACTIVITY_TEMPLATE_TYPE_CODE]   	nvarchar(20) NULL,
	[ACTIVITY_TEMPLATE_JSON]        	nvarchar(max) NOT NULL CONSTRAINT [ACTTMP_ACTIVITY_TEMPLATE_JSON_DEF]  DEFAULT ('<Empty>'),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACTTMP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTTMP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACTTMP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACTTMP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACTTMP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACTTMP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTTMP_PK] PRIMARY KEY CLUSTERED([ACTIVITY_TEMPLATE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'JSON structure desribing how to construct the activity UI.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE', 
	@level2type = N'Column', @level2name = N'ACTIVITY_TEMPLATE_JSON'
GO

CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]  ( 
	[ACTIVITY_INSTANCE_ID]              	bigint NOT NULL CONSTRAINT [ACTINS_ACTIVITY_INSTANCE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_ID_SEQ]),
	[ACTIVITY_TEMPLATE_ID]              	bigint NULL,
	[ACTIVITY_INSTANCE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL CONSTRAINT [ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_DEF]  DEFAULT ('NOSTART'),
	[DESCRIPTION]                       	nvarchar(500) NULL,
	[ACTIVITY_DATA_JSON]                	nvarchar(max) NOT NULL CONSTRAINT [ACTINS_ACTIVITY_DATA_JSON_DEF]  DEFAULT ('<Empty>'),
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL CONSTRAINT [ACTINS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [ACTINS_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [ACTINS_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [ACTINS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTINS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTINS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTINS_PK] PRIMARY KEY CLUSTERED([ACTIVITY_INSTANCE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the activity instance.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'JSON structure containing data specific to an activity instance.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE', 
	@level2type = N'Column', @level2name = N'ACTIVITY_DATA_JSON'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table to contain all applicable activity instances for the PIMS PSP system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]  ( 
	[ACQUISITION_ACTIVITY_INSTANCE_ID]	bigint NOT NULL CONSTRAINT [ACQAIN_ACQUISITION_ACTIVITY_INSTANCE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_ACTIVITY_INSTANCE_ID_SEQ]),
	[ACQUISITION_FILE_ID]             	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]            	bigint NOT NULL,
	[IS_DISABLED]                     	bit NULL CONSTRAINT [ACQAIN_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL CONSTRAINT [ACQAIN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [ACQAIN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ACQAIN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [ACQAIN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [ACQAIN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [ACQAIN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQAIN_PK] PRIMARY KEY CLUSTERED([ACQUISITION_ACTIVITY_INSTANCE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_ACTIVITY_INSTANCE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST]  ( 
	[_ACQUISITION_ACTIVITY_INSTANCE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                   	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                         	datetime NULL,
	[ACQUISITION_ACTIVITY_INSTANCE_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]                   	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]                  	bigint NOT NULL,
	[IS_DISABLED]                           	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]            	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]                  	datetime NOT NULL,
	[APP_CREATE_USER_DIRECTORY]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USERID]                     	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                  	uniqueidentifier NULL,
	[APP_LAST_UPDATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                   	datetime NOT NULL,
	[DB_CREATE_USERID]                      	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]                 	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQAIN_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_ACTIVITY_INSTANCE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST]  ( 
	[_ACQUISITION_FILE_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]              	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                    	datetime NULL,
	[ACQUISITION_FILE_ID]              	bigint NOT NULL,
	[ACQUISITION_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[ACQUISITION_TYPE_CODE]            	nvarchar(20) NOT NULL,
	[ACQUISITION_FUNDING_TYPE_CODE]    	nvarchar(20) NULL,
	[ACQ_PHYS_FILE_STATUS_TYPE_CODE]   	nvarchar(20) NULL,
	[REGION_CODE]                      	smallint NOT NULL,
	[MINISTRY_PROJECT_NUMBER]          	nvarchar(20) NULL,
	[MINISTRY_PROJECT_NAME]            	nvarchar(100) NULL,
	[CPS_PRODUCT_CODE]                 	nvarchar(12) NULL,
	[FILE_NAME]                        	nvarchar(500) NOT NULL,
	[FILE_NO]                          	int NOT NULL,
	[FILE_NUMBER]                      	nvarchar(18) NOT NULL,
	[FUNDING_OTHER]                    	nvarchar(200) NULL,
	[ASSIGNED_DATE]                    	datetime NULL,
	[DELIVERY_DATE]                    	datetime NULL,
	[PAIMS_ACQUISITION_FILE_ID]        	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQNFL_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_FILE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ACQ_FL_PERSON_PROFILE_TYPE]  ( 
	[ACQ_FL_PERSON_PROFILE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[IS_DISABLED]                    	bit NOT NULL CONSTRAINT [AQFPPT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                  	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [AQFPPT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [AQFPPT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [AQFPPT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [AQFPPT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [AQFPPT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AQFPPT_PK] PRIMARY KEY CLUSTERED([ACQ_FL_PERSON_PROFILE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the acquistion file staff profile (role).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_PERSON_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'ACQ_FL_PERSON_PROFILE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the acquistion file staff profile (role).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_PERSON_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_PERSON_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_PERSON_PROFILE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the acquistion file staff profile (role).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQ_FL_PERSON_PROFILE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]  ( 
	[ACQUISITION_FILE_PERSON_ID]     	bigint NOT NULL CONSTRAINT [ACQPER_ACQUISITION_FILE_PERSON_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_PERSON_ID_SEQ]),
	[ACQUISITION_FILE_ID]            	bigint NOT NULL,
	[PERSON_ID]                      	bigint NOT NULL,
	[ACQ_FL_PERSON_PROFILE_TYPE_CODE]	nvarchar(20) NULL,
	[IS_DISABLED]                    	bit NULL CONSTRAINT [ACQPER_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [ACQPER_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACQPER_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACQPER_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [ACQPER_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ACQPER_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ACQPER_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQPER_PK] PRIMARY KEY CLUSTERED([ACQUISITION_FILE_PERSON_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_PERSON', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table to associate an acquisition file to a person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE_PERSON'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON_HIST]  ( 
	[_ACQUISITION_FILE_PERSON_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_FILE_PERSON_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]             	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                   	datetime NULL,
	[ACQUISITION_FILE_PERSON_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]             	bigint NOT NULL,
	[PERSON_ID]                       	bigint NOT NULL,
	[ACQ_FL_PERSON_PROFILE_TYPE_CODE] 	nvarchar(20) NULL,
	[IS_DISABLED]                     	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQPER_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_FILE_PERSON_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_COUNTRY]  ( 
	[COUNTRY_ID]                	smallint NOT NULL,
	[COUNTRY_CODE]              	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [CNTRY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [CNTRY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [CNTRY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [CNTRY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [CNTRY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CNTRY_PK] PRIMARY KEY CLUSTERED([COUNTRY_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROVINCE_STATE]  ( 
	[PROVINCE_STATE_ID]         	smallint NOT NULL,
	[COUNTRY_ID]                	smallint NOT NULL,
	[PROVINCE_STATE_CODE]       	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PROVNC_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [PROVNC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PROVNC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PROVNC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PROVNC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PROVNC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PROVNC_PK] PRIMARY KEY CLUSTERED([PROVINCE_STATE_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ADDRESS]  ( 
	[ADDRESS_ID]                    	bigint NOT NULL CONSTRAINT [ADDRSS_ADDRESS_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ADDRESS_ID_SEQ]),
	[REGION_CODE]                   	smallint NULL,
	[DISTRICT_CODE]                 	smallint NULL,
	[PROVINCE_STATE_ID]             	smallint NOT NULL,
	[COUNTRY_ID]                    	smallint NULL,
	[STREET_ADDRESS_1]              	nvarchar(200) NULL,
	[STREET_ADDRESS_2]              	nvarchar(200) NULL,
	[STREET_ADDRESS_3]              	nvarchar(200) NULL,
	[MUNICIPALITY_NAME]             	nvarchar(200) NULL,
	[POSTAL_CODE]                   	nvarchar(20) NULL,
	[OTHER_COUNTRY]                 	nvarchar(200) NULL,
	[LATITUDE]                      	numeric(8,6) NULL,
	[LONGITUDE]                     	numeric(9,6) NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ADDRSS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ADDRSS_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ADDRSS_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ADDRSS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ADDRSS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ADDRSS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ADDRSS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ADDRSS_PK] PRIMARY KEY CLUSTERED([ADDRESS_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Other country not listed in drop-down list' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ADDRESS', 
	@level2type = N'Column', @level2name = N'OTHER_COUNTRY'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_OWNER]  ( 
	[ACQUISITION_OWNER_ID]          	bigint NOT NULL CONSTRAINT [ACQOWN_ACQUISITION_OWNER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_OWNER_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NULL,
	[ADDRESS_ID]                    	bigint NULL,
	[LAST_NAME_OR_CORP_NAME_1]      	nvarchar(300) NOT NULL CONSTRAINT [ACQOWN_LAST_NAME_OR_CORP_NAME_1_DEF]  DEFAULT ('<Empty>'),
	[LAST_NAME_OR_CORP_NAME_2]      	nvarchar(300) NULL,
	[GIVEN_NAME]                    	nvarchar(300) NULL,
	[INCORPORATION_NUMBER]          	nvarchar(50) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACQOWN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACQOWN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACQOWN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACQOWN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACQOWN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACQOWN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACQOWN_PK] PRIMARY KEY CLUSTERED([ACQUISITION_OWNER_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the owner (person or organization).  If person, surname.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'LAST_NAME_OR_CORP_NAME_1'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Optional.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'LAST_NAME_OR_CORP_NAME_2'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Given name of the owner (person).' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'GIVEN_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Incorporation number of the organization.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER', 
	@level2type = N'Column', @level2name = N'INCORPORATION_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Entity containing information regarding an acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_OWNER'
GO

CREATE TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST]  ( 
	[_ACQUISITION_OWNER_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACQUISITION_OWNER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ACQUISITION_OWNER_ID]          	bigint NOT NULL,
	[ACQUISITION_FILE_ID]           	bigint NULL,
	[ADDRESS_ID]                    	bigint NULL,
	[LAST_NAME_OR_CORP_NAME_1]      	nvarchar(300) NOT NULL,
	[LAST_NAME_OR_CORP_NAME_2]      	nvarchar(300) NULL,
	[GIVEN_NAME]                    	nvarchar(300) NULL,
	[INCORPORATION_NUMBER]          	nvarchar(50) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACQOWN_H_PK] PRIMARY KEY CLUSTERED([_ACQUISITION_OWNER_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DOCUMENT_STATUS_TYPE]  ( 
	[DOCUMENT_STATUS_TYPE_CODE] 	nvarchar(20) NOT NULL CONSTRAINT [DOCSTY_DOCUMENT_STATUS_TYPE_CODE_DEF]  DEFAULT ('NEXT VALUE FOR [PIMS_DOCUMENT_ID_SEQ]'),
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [DOCSTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [DOCSTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [DOCSTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [DOCSTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [DOCSTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [DOCSTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DOCSTY_PK] PRIMARY KEY CLUSTERED([DOCUMENT_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the document status type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive translation of the document status type code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is still in use.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Determines the default display order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table describing the available document types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DOCUMENT_TYP]  ( 
	[DOCUMENT_TYPE_ID]              	bigint NOT NULL CONSTRAINT [DOCTYP_DOCUMENT_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DOCUMENT_TYPE_ID_SEQ]),
	[MAYAN_ID]                      	bigint NOT NULL CONSTRAINT [DOCTYP_MAYAN_ID_DEF]  DEFAULT ((-1)),
	[DOCUMENT_TYPE]                 	nvarchar(200) NOT NULL CONSTRAINT [DOCTYP_DOCUMENT_TYPE_DEF]  DEFAULT ('<Empty>'),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [DOCTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DOCTYP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DOCTYP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DOCTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DOCTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DOCTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DOCTYP_PK] PRIMARY KEY CLUSTERED([DOCUMENT_TYPE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Mayan-generated document type number used for retrieval from Mayan EDMS.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_TYP', 
	@level2type = N'Column', @level2name = N'MAYAN_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the available document types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_TYP', 
	@level2type = N'Column', @level2name = N'DOCUMENT_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table describing the available document types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT_TYP'
GO

CREATE TABLE [dbo].[PIMS_DOCUMENT]  ( 
	[DOCUMENT_ID]                   	bigint NOT NULL CONSTRAINT [DOCMNT_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_DOCUMENT_ID_SEQ]),
	[DOCUMENT_TYPE_ID]              	bigint NOT NULL,
	[DOCUMENT_STATUS_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[FILE_NAME]                     	nvarchar(500) NOT NULL CONSTRAINT [DOCMNT_FILE_NAME_DEF]  DEFAULT ('<Empty>'),
	[MAYAN_ID]                      	bigint NOT NULL CONSTRAINT [DOCMNT_MAYAN_ID_DEF]  DEFAULT ((-1)),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [DOCMNT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [DOCMNT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [DOCMNT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [DOCMNT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [DOCMNT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [DOCMNT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [DOCMNT_PK] PRIMARY KEY CLUSTERED([DOCUMENT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the file stored on Mayan EDMS.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT', 
	@level2type = N'Column', @level2name = N'FILE_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Mayan-generated document number used for retrieval from Mayan EDMS.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT', 
	@level2type = N'Column', @level2name = N'MAYAN_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table describing the available document types.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DOCUMENT'
GO

CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]  ( 
	[ACTIVITY_INSTANCE_DOCUMENT_ID] 	bigint NOT NULL CONSTRAINT [ACTDOC_ACTIVITY_INSTANCE_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_DOCUMENT_ID_SEQ]),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [ACTDOC_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACTDOC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTDOC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACTDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACTDOC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACTDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACTDOC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTDOC_PK] PRIMARY KEY CLUSTERED([ACTIVITY_INSTANCE_DOCUMENT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Relates a document object to an activity instance.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_DOCUMENT'
GO

CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST]  ( 
	[_ACTIVITY_INSTANCE_DOCUMENT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[ACTIVITY_INSTANCE_DOCUMENT_ID]      	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]               	bigint NOT NULL,
	[DOCUMENT_ID]                        	bigint NOT NULL,
	[IS_DISABLED]                        	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACTDOC_H_PK] PRIMARY KEY CLUSTERED([_ACTIVITY_INSTANCE_DOCUMENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST]  ( 
	[_ACTIVITY_INSTANCE_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[ACTIVITY_INSTANCE_ID]              	bigint NOT NULL,
	[ACTIVITY_TEMPLATE_ID]              	bigint NULL,
	[ACTIVITY_INSTANCE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                       	nvarchar(500) NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACTINS_H_PK] PRIMARY KEY CLUSTERED([_ACTIVITY_INSTANCE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_NOTE]  ( 
	[NOTE_ID]                       	bigint NOT NULL CONSTRAINT [NOTE_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_NOTE_ID_SEQ]),
	[NOTE_TXT]                      	nvarchar(4000) NOT NULL CONSTRAINT [NOTE_NOTE_TXT_DEF]  DEFAULT ('<Empty>'),
	[IS_SYSTEM_GENERATED]           	bit NOT NULL CONSTRAINT [NOTE_IS_SYSTEM_GENERATED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [NOTE_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [NOTE_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [NOTE_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [NOTE_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [NOTE_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [NOTE_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [NOTE_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [NOTE_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [NOTE_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [NOTE_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [NOTE_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [NOTE_PK] PRIMARY KEY CLUSTERED([NOTE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Contents of the note.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_NOTE', 
	@level2type = N'Column', @level2name = N'NOTE_TXT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicatesd if this note is system-generated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_NOTE', 
	@level2type = N'Column', @level2name = N'IS_SYSTEM_GENERATED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table to contain all applicable notes for the PIMS PSP system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_NOTE'
GO

CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]  ( 
	[PIMS_ACTIVITY_INSTANCE_NOTE_ID]	bigint NOT NULL CONSTRAINT [ACTINN_PIMS_ACTIVITY_INSTANCE_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_NOTE_ID_SEQ]),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [ACTINN_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACTINN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTINN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACTINN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACTINN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACTINN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACTINN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTINN_PK] PRIMARY KEY CLUSTERED([PIMS_ACTIVITY_INSTANCE_NOTE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_NOTE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Relates a note object to an activity instance.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_INSTANCE_NOTE'
GO

CREATE TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_HIST]  ( 
	[_ACTIVITY_INSTANCE_NOTE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_INSTANCE_NOTE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[PIMS_ACTIVITY_INSTANCE_NOTE_ID] 	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]           	bigint NOT NULL,
	[NOTE_ID]                        	bigint NOT NULL,
	[IS_DISABLED]                    	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACTINN_H_PK] PRIMARY KEY CLUSTERED([_ACTIVITY_INSTANCE_NOTE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]  ( 
	[ACTIVITY_TEMPLATE_DOCUMENT_ID] 	bigint NOT NULL CONSTRAINT [ACTMDO_ACTIVITY_TEMPLATE_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_TEMPLATE_DOCUMENT_ID_SEQ]),
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[ACTIVITY_TEMPLATE_ID]          	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [ACTMDO_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ACTMDO_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ACTMDO_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [ACTMDO_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [ACTMDO_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ACTMDO_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [ACTMDO_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [ACTMDO_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ACTMDO_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ACTMDO_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ACTMDO_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ACTMDO_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ACTMDO_PK] PRIMARY KEY CLUSTERED([ACTIVITY_TEMPLATE_DOCUMENT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_DOCUMENT', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associative relationship between an activity template and a document.  Useful in determining with templates reference a document and conversely, which documents reference an activity template.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACTIVITY_TEMPLATE_DOCUMENT'
GO

CREATE TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST]  ( 
	[_ACTIVITY_TEMPLATE_DOCUMENT_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_TEMPLATE_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[ACTIVITY_TEMPLATE_DOCUMENT_ID]      	bigint NOT NULL,
	[DOCUMENT_ID]                        	bigint NOT NULL,
	[ACTIVITY_TEMPLATE_ID]               	bigint NOT NULL,
	[IS_DISABLED]                        	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACTMDO_H_PK] PRIMARY KEY CLUSTERED([_ACTIVITY_TEMPLATE_DOCUMENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_HIST]  ( 
	[_ACTIVITY_TEMPLATE_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ACTIVITY_TEMPLATE_ID]          	bigint NOT NULL,
	[ACTIVITY_TEMPLATE_TYPE_CODE]   	nvarchar(20) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ACTTMP_H_PK] PRIMARY KEY CLUSTERED([_ACTIVITY_TEMPLATE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_AREA_UNIT_TYPE]  ( 
	[AREA_UNIT_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [ARUNIT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [ARUNIT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ARUNIT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ARUNIT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [ARUNIT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [ARUNIT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ARUNIT_PK] PRIMARY KEY CLUSTERED([AREA_UNIT_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The area unit used for measuring Properties.  The units must be in metric: square metres or hectares.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AREA_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'AREA_UNIT_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Translation of the code value into a description that can be displayed to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AREA_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is still active or is now disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AREA_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Order in which to display the code values, if required.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AREA_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The area unit used for measuring Properties.  The units must be in metric: square metres or hectares.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_AREA_UNIT_TYPE'
GO

CREATE TABLE [dbo].[PIMS_DATA_SOURCE_TYPE]  ( 
	[DATA_SOURCE_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PIDSRT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [PIDSRT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PIDSRT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PIDSRT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PIDSRT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PIDSRT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PIDSRT_PK] PRIMARY KEY CLUSTERED([DATA_SOURCE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code val;ue of the source system of the data (PAIMS, LIS, etc.)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DATA_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'DATA_SOURCE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the source system of the data (PAIMS, LIS, etc.)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DATA_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is still in use' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DATA_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Defines the default display order of the descriptions' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DATA_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the source system of the data (PAIMS, LIS, etc.)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DATA_SOURCE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PPH_STATUS_TYPE]  ( 
	[PPH_STATUS_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NULL CONSTRAINT [PPHSTT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [PPHSTT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PPHSTT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PPHSTT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PPHSTT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PPHSTT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PPHSTT_PK] PRIMARY KEY CLUSTERED([PPH_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code indicating the Provincial Public Highway status' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PPH_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'PPH_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the code indicating the purpose of the property research' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PPH_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PPH_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PPH_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the Provincial Public Highway status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PPH_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_CLASSIFICATION_TYPE]  ( 
	[PROPERTY_CLASSIFICATION_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                      	nvarchar(200) NOT NULL,
	[IS_DISABLED]                      	bit NOT NULL CONSTRAINT [PRPCLT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                    	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL CONSTRAINT [PRPCLT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [PRPCLT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [PRPCLT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [PRPCLT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [PRPCLT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPCLT_PK] PRIMARY KEY CLUSTERED([PROPERTY_CLASSIFICATION_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_STATUS_TYPE]  ( 
	[PROPERTY_STATUS_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PRPSTS_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [PRPSTS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRPSTS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRPSTS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PRPSTS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PRPSTS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPSTS_PK] PRIMARY KEY CLUSTERED([PROPERTY_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property status code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'PROPERTY_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property status code description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe property status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_TYPE]  ( 
	[PROPERTY_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PRPTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [PRPTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRPTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRPTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PRPTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PRPTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPTYP_PK] PRIMARY KEY CLUSTERED([PROPERTY_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_SURPLUS_DECLARATION_TYPE]  ( 
	[SURPLUS_DECLARATION_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                  	nvarchar(200) NOT NULL,
	[IS_DISABLED]                  	bit NOT NULL CONSTRAINT [SPDCLT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]   	bigint NOT NULL CONSTRAINT [SPDCLT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [SPDCLT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [SPDCLT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [SPDCLT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [SPDCLT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SPDCLT_PK] PRIMARY KEY CLUSTERED([SURPLUS_DECLARATION_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the surplus property type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURPLUS_DECLARATION_TYPE', 
	@level2type = N'Column', @level2name = N'SURPLUS_DECLARATION_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code description of the surplus property type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURPLUS_DECLARATION_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates that the code value is disabled' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURPLUS_DECLARATION_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the surplus property type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURPLUS_DECLARATION_TYPE'
GO

CREATE TABLE [dbo].[PIMS_VOLUME_UNIT_TYPE]  ( 
	[VOLUME_UNIT_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [VOLUTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [VOLUTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [VOLUTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [VOLUTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [VOLUTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [VOLUTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [VOLUTY_PK] PRIMARY KEY CLUSTERED([VOLUME_UNIT_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The volume unit used for measuring Properties.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUME_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'VOLUME_UNIT_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Translation of the code value into a description that can be displayed to the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUME_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is still active or is now disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUME_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Order in which to display the code values, if required.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUME_UNIT_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The volume unit used for measuring Properties.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUME_UNIT_TYPE'
GO

CREATE TABLE [dbo].[PIMS_VOLUMETRIC_TYPE]  ( 
	[VOLUMETRIC_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PRVOLT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [PRVOLT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRVOLT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRVOLT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PRVOLT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PRVOLT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRVOLT_PK] PRIMARY KEY CLUSTERED([VOLUMETRIC_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property parcel/property volumetric code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUMETRIC_TYPE', 
	@level2type = N'Column', @level2name = N'VOLUMETRIC_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property parcel/property volumetric code description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUMETRIC_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUMETRIC_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUMETRIC_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe parcel/property volumetric type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_VOLUMETRIC_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY]  ( 
	[PROPERTY_ID]                        	bigint NOT NULL CONSTRAINT [PRPRTY_PROPERTY_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ID_SEQ]),
	[PROPERTY_MANAGER_ID]                	bigint NULL,
	[PROP_MGMT_ORG_ID]                   	bigint NULL,
	[PROPERTY_TYPE_CODE]                 	nvarchar(20) NOT NULL,
	[PROPERTY_CLASSIFICATION_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[ADDRESS_ID]                         	bigint NULL,
	[REGION_CODE]                        	smallint NOT NULL,
	[DISTRICT_CODE]                      	smallint NOT NULL,
	[PROPERTY_AREA_UNIT_TYPE_CODE]       	nvarchar(20) NULL,
	[PROPERTY_DATA_SOURCE_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[PROPERTY_STATUS_TYPE_CODE]          	nvarchar(20) NOT NULL,
	[SURPLUS_DECLARATION_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[VOLUMETRIC_TYPE_CODE]               	nvarchar(20) NULL,
	[VOLUME_UNIT_TYPE_CODE]              	nvarchar(20) NULL,
	[PPH_STATUS_TYPE_CODE]               	nvarchar(20) NULL,
	[PROPERTY_DATA_SOURCE_EFFECTIVE_DATE]	date NOT NULL,
	[NAME]                               	nvarchar(250) NULL,
	[DESCRIPTION]                        	nvarchar(2000) NULL,
	[PID]                                	int NULL,
	[PIN]                                	int NULL,
	[FILE_NUMBER]                        	int NULL,
	[FILE_NUMBER_SUFFIX]                 	nvarchar(2) NULL,
	[LAND_AREA]                          	real NULL,
	[LAND_LEGAL_DESCRIPTION]             	nvarchar(max) NULL,
	[BOUNDARY]                           	[sys].[geometry] NULL,
	[LOCATION]                           	[sys].[geometry] NULL,
	[SURVEY_PLAN_NUMBER]                 	nvarchar(250) NULL,
	[ENCUMBRANCE_REASON]                 	nvarchar(500) NULL,
	[SURPLUS_DECLARATION_COMMENT]        	nvarchar(2000) NULL,
	[SURPLUS_DECLARATION_DATE]           	datetime NULL,
	[NOTES]                              	nvarchar(max) NULL,
	[MUNICIPAL_ZONING]                   	nvarchar(100) NULL,
	[IS_VOLUMETRIC_PARCEL]               	bit NULL CONSTRAINT [PRPRTY_IS_VOLUMETRIC_PARCEL_DEF]  DEFAULT (CONVERT([bit],(0))),
	[VOLUMETRIC_MEASUREMENT]             	real NULL,
	[IS_OWNED]                           	bit NOT NULL CONSTRAINT [PRPRTY_IS_OWNED_DEF]  DEFAULT (CONVERT([bit],(1))),
	[IS_PROPERTY_OF_INTEREST]            	bit NOT NULL CONSTRAINT [PRPRTY_IS_PROPERTY_OF_INTEREST_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_VISIBLE_TO_OTHER_AGENCIES]       	bit NOT NULL CONSTRAINT [PRPRTY_IS_VISIBLE_TO_OTHER_AGENCIES_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_SENSITIVE]                       	bit NOT NULL CONSTRAINT [PRPRTY_IS_SENSITIVE_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_PROVINCIAL_PUBLIC_HWY]           	bit NULL,
	[PPH_STATUS_UPDATE_USERID]           	nvarchar(30) NULL,
	[PPH_STATUS_UPDATE_TIMESTAMP]        	datetime NULL,
	[PPH_STATUS_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[IS_RWY_BELT_DOM_PATENT]             	bit NULL CONSTRAINT [PRPRTY_IS_RWY_BELT_DOM_PATENT_DEF]  DEFAULT (CONVERT([bit],(0))),
	[ZONING]                             	nvarchar(50) NULL,
	[ZONING_POTENTIAL]                   	nvarchar(50) NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL CONSTRAINT [PRPRTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL CONSTRAINT [PRPRTY_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRTY_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL CONSTRAINT [PRPRTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL CONSTRAINT [PRPRTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRTY_PK] PRIMARY KEY CLUSTERED([PROPERTY_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the property was officially registered' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PROPERTY_DATA_SOURCE_EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property name' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property ID' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property number' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PIN'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The (ARCS/ORCS) number identifying the Property File.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'FILE_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A suffix to distinguish between Property Files with the same number.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'FILE_NUMBER_SUFFIX'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Area occupied by property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'LAND_AREA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Legal description of property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'LAND_LEGAL_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Spatial bundary of land' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'BOUNDARY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Geospatial location (pin) of property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'LOCATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property/Land Parcel survey plan number' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'SURVEY_PLAN_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'reason for property encumbreance' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'ENCUMBRANCE_REASON'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Comment regarding the surplus declaration' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'SURPLUS_DECLARATION_COMMENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the property was declared surplus' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'SURPLUS_DECLARATION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes about the property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'NOTES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Municipal zoning that applies this property.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'MUNICIPAL_ZONING'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is there a volumetric measurement for this parcel?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_VOLUMETRIC_PARCEL'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Volumetric measurement of the parcel.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'VOLUMETRIC_MEASUREMENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is the property currently owned?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_OWNED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this a property of interest to the Ministry?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_PROPERTY_OF_INTEREST'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is the property visible to other agencies?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_VISIBLE_TO_OTHER_AGENCIES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this a sensitive property?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_SENSITIVE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this property a provincial public highway?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_PROVINCIAL_PUBLIC_HWY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Userid that updated the Provincial Public Highway status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PPH_STATUS_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date / time that the Provincial Public Highway status was updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PPH_STATUS_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GUID of the user that updated the PPH status.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'PPH_STATUS_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if this property is original federal vs. provincial ownership.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_RWY_BELT_DOM_PATENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Current property zoning' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'ZONING'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Potential property zoning' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'ZONING_POTENTIAL'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]  ( 
	[PROPERTY_ACQUISITION_FILE_ID]  	bigint NOT NULL CONSTRAINT [PRACQF_PROPERTY_ACQUISITION_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACQUISITION_FILE_ID_SEQ]),
	[ACQUISITION_FILE_ID]           	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_NAME]                 	nvarchar(500) NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [PRACQF_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRACQF_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRACQF_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRACQF_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRACQF_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRACQF_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRACQF_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRACQF_PK] PRIMARY KEY CLUSTERED([PROPERTY_ACQUISITION_FILE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive reference for the property associated with the acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'PROPERTY_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship is active.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property with an acquisition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ACQUISITION_FILE'
GO

CREATE TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]  ( 
	[ACT_INST_PROP_ACQ_FILE_ID]     	bigint NOT NULL CONSTRAINT [AIPAFL_ACT_INST_PROP_ACQ_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACT_INST_PROP_ACQ_FILE_ID_SEQ]),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[PROPERTY_ACQUISITION_FILE_ID]  	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [AIPAFL_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [AIPAFL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [AIPAFL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [AIPAFL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [AIPAFL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [AIPAFL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [AIPAFL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [AIPAFL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [AIPAFL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [AIPAFL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [AIPAFL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [AIPAFL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AIPAFL_PK] PRIMARY KEY CLUSTERED([ACT_INST_PROP_ACQ_FILE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACT_INST_PROP_ACQ_FILE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'File to associate an activity instance with a subset of properties associated with the superset of acquisition file properties.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACT_INST_PROP_ACQ_FILE'
GO

CREATE TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE_HIST]  ( 
	[_ACT_INST_PROP_ACQ_FILE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACT_INST_PROP_ACQ_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[ACT_INST_PROP_ACQ_FILE_ID]      	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]           	bigint NOT NULL,
	[PROPERTY_ACQUISITION_FILE_ID]   	bigint NOT NULL,
	[IS_DISABLED]                    	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_AIPAFL_H_PK] PRIMARY KEY CLUSTERED([_ACT_INST_PROP_ACQ_FILE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_REQUEST_SOURCE_TYPE]  ( 
	[REQUEST_SOURCE_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NULL CONSTRAINT [RQSRCT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [RQSRCT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [RQSRCT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [RQSRCT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [RQSRCT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [RQSRCT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RQSRCT_PK] PRIMARY KEY CLUSTERED([REQUEST_SOURCE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code indicating the source of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_REQUEST_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'REQUEST_SOURCE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the code indicating the source of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_REQUEST_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_REQUEST_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_REQUEST_SOURCE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe source ot the research request' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_REQUEST_SOURCE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_STATUS_TYPE]  ( 
	[RESEARCH_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [RSRCHS_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [RSRCHS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RSRCHS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [RSRCHS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RSRCHS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RSRCHS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RSRCHS_PK] PRIMARY KEY CLUSTERED([RESEARCH_FILE_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code indicating the status of the research file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'RESEARCH_FILE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the code indicating the status of the research file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe property adjacent land type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_FILE]  ( 
	[RESEARCH_FILE_ID]              	bigint NOT NULL CONSTRAINT [RESRCH_RESEARCH_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_ID_SEQ]),
	[RESEARCH_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL CONSTRAINT [RESRCH_RESEARCH_FILE_STATUS_TYPE_CODE_DEF]  DEFAULT ('ACTIVE'),
	[REQUEST_SOURCE_TYPE_CODE]      	nvarchar(20) NULL,
	[REQUESTOR_NAME]                	bigint NULL,
	[REQUESTOR_ORGANIZATION]        	bigint NULL,
	[NAME]                          	nvarchar(250) NOT NULL,
	[RFILE_NUMBER]                  	nvarchar(25) NOT NULL CONSTRAINT [RESRCH_RFILE_NUMBER_DEF]  DEFAULT ('RFILE-UNKNOWN'),
	[REQUEST_DATE]                  	date NULL,
	[ROAD_NAME]                     	nvarchar(max) NULL,
	[ROAD_ALIAS]                    	nvarchar(max) NULL,
	[REQUEST_DESCRIPTION]           	nvarchar(max) NULL,
	[REQUEST_SOURCE_DESCRIPTION]    	nvarchar(2000) NULL,
	[RESEARCH_RESULT]               	nvarchar(max) NULL,
	[IS_EXPROPRIATION]              	bit NULL,
	[EXPROPRIATION_NOTES]           	nvarchar(max) NULL,
	[RESEARCH_COMPLETION_DATE]      	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [RESRCH_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RESRCH_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RESRCH_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RESRCH_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RESRCH_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RESRCH_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RESRCH_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RESRCH_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [RESRCH_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RESRCH_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RESRCH_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RESRCH_PK] PRIMARY KEY CLUSTERED([RESEARCH_FILE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the research requestor.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'REQUESTOR_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Organization associated with the research requestor.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'REQUESTOR_ORGANIZATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name given to the research file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'R-File number assigned to the research file, formatted value from PIMS_RFILE_NUMBER_SEQ sequence generator' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'RFILE_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'REQUEST_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name(s) of roads associated with this research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'ROAD_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Alias(es) of roads associated with this research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'ROAD_ALIAS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'REQUEST_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Result of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'RESEARCH_RESULT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this an expropriation?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'IS_EXPROPRIATION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes associated with an expropriation.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'EXPROPRIATION_NOTES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the research request was completed.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'RESEARCH_COMPLETION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property research file' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_FILE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE]  ( 
	[PROPERTY_RESEARCH_FILE_ID]     	bigint NOT NULL CONSTRAINT [PRSCRC_PROPERTY_RESEARCH_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_RESEARCH_FILE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[PROPERTY_NAME]                 	nvarchar(500) NULL,
	[DISPLAY_ORDER]                 	int NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [PRSCRC_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_LEGAL_OPINION_REQUIRED]     	bit NULL,
	[IS_LEGAL_OPINION_OBTAINED]     	bit NULL,
	[DOCUMENT_REFERENCE]            	nvarchar(2000) NULL,
	[RESEARCH_SUMMARY]              	nvarchar(max) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRSCRC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRSCRC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRSCRC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRSCRC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRSCRC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRSCRC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRSCRC_PK] PRIMARY KEY CLUSTERED([PROPERTY_RESEARCH_FILE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive reference for the property being researched.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'PROPERTY_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether a legal opinion is required (0 = No, 1 = Yes, null = Unknown)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'IS_LEGAL_OPINION_REQUIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates whether a legal opinion was obtained (0 = No, 1 = Yes, null = Unknown)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'IS_LEGAL_OPINION_OBTAINED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'URL / reference to a LAN Drive' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'DOCUMENT_REFERENCE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Summary of the property research.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE', 
	@level2type = N'Column', @level2name = N'RESEARCH_SUMMARY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a property with a research file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_RESEARCH_FILE'
GO

CREATE TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]  ( 
	[ACT_INST_PROP_RSRCH_FILE_ID]   	bigint NOT NULL CONSTRAINT [AIPRFL_ACT_INST_PROP_RSRCH_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ACT_INST_PROP_RSRCH_FILE_ID_SEQ]),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[PROPERTY_RESEARCH_FILE_ID]     	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [AIPRFL_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [AIPRFL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [AIPRFL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [AIPRFL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [AIPRFL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [AIPRFL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [AIPRFL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [AIPRFL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [AIPRFL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [AIPRFL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [AIPRFL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [AIPRFL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [AIPRFL_PK] PRIMARY KEY CLUSTERED([ACT_INST_PROP_RSRCH_FILE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACT_INST_PROP_RSRCH_FILE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'File to associate an activity instance with a subset of properties associated with the superset of research file properties.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACT_INST_PROP_RSRCH_FILE'
GO

CREATE TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE_HIST]  ( 
	[_ACT_INST_PROP_RSRCH_FILE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ACT_INST_PROP_RSRCH_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]              	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                    	datetime NULL,
	[ACT_INST_PROP_RSRCH_FILE_ID]      	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]             	bigint NOT NULL,
	[PROPERTY_RESEARCH_FILE_ID]        	bigint NOT NULL,
	[IS_DISABLED]                      	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_AIPRFL_H_PK] PRIMARY KEY CLUSTERED([_ACT_INST_PROP_RSRCH_FILE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ADDRESS_HIST]  ( 
	[_ADDRESS_HIST_ID]              	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ADDRESS_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ADDRESS_ID]                    	bigint NOT NULL,
	[REGION_CODE]                   	smallint NULL,
	[DISTRICT_CODE]                 	smallint NULL,
	[PROVINCE_STATE_ID]             	smallint NOT NULL,
	[COUNTRY_ID]                    	smallint NULL,
	[STREET_ADDRESS_1]              	nvarchar(200) NULL,
	[STREET_ADDRESS_2]              	nvarchar(200) NULL,
	[STREET_ADDRESS_3]              	nvarchar(200) NULL,
	[MUNICIPALITY_NAME]             	nvarchar(200) NULL,
	[POSTAL_CODE]                   	nvarchar(20) NULL,
	[OTHER_COUNTRY]                 	nvarchar(200) NULL,
	[LATITUDE]                      	numeric(18,0) NULL,
	[LONGITUDE]                     	numeric(18,0) NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ADDRSS_H_PK] PRIMARY KEY CLUSTERED([_ADDRESS_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ADDRESS_USAGE_TYPE]  ( 
	[ADDRESS_USAGE_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [ADUSGT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [ADUSGT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [ADUSGT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [ADUSGT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [ADUSGT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [ADUSGT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ADUSGT_PK] PRIMARY KEY CLUSTERED([ADDRESS_USAGE_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_CLAIM]  ( 
	[CLAIM_ID]                      	bigint NOT NULL CONSTRAINT [CLMTYP_CLAIM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_CLAIM_ID_SEQ]),
	[CLAIM_UID]                     	uniqueidentifier NOT NULL,
	[KEYCLOAK_ROLE_ID]              	uniqueidentifier NULL,
	[NAME]                          	nvarchar(100) NOT NULL,
	[DESCRIPTION]                   	nvarchar(500) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [CLMTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [CLMTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [CLMTYP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [CLMTYP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [CLMTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [CLMTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [CLMTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [CLMTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CLMTYP_PK] PRIMARY KEY CLUSTERED([CLAIM_ID])
)
GO

CREATE TABLE [dbo].[PIMS_CLAIM_HIST]  ( 
	[_CLAIM_HIST_ID]                	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_CLAIM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[CLAIM_ID]                      	bigint NOT NULL,
	[CLAIM_UID]                     	uniqueidentifier NOT NULL,
	[KEYCLOAK_ROLE_ID]              	uniqueidentifier NULL,
	[NAME]                          	nvarchar(100) NOT NULL,
	[DESCRIPTION]                   	nvarchar(500) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_CLMTYP_H_PK] PRIMARY KEY CLUSTERED([_CLAIM_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_CONTACT_METHOD_TYPE]  ( 
	[CONTACT_METHOD_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [CNTMTT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [CNTMTT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [CNTMTT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [CNTMTT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [CNTMTT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [CNTMTT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CNTMTT_PK] PRIMARY KEY CLUSTERED([CONTACT_METHOD_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_CONTACT_METHOD]  ( 
	[CONTACT_METHOD_ID]             	bigint NOT NULL CONSTRAINT [CNTMTH_CONTACT_METHOD_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_CONTACT_METHOD_ID_SEQ]),
	[CONTACT_METHOD_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[CONTACT_METHOD_VALUE]          	nvarchar(200) NOT NULL,
	[IS_PREFERRED_METHOD]           	bit NULL CONSTRAINT [CNTMTH_IS_PREFERRED_METHOD_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [CNTMTH_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [CNTMTH_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [CNTMTH_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [CNTMTH_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [CNTMTH_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [CNTMTH_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [CNTMTH_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [CNTMTH_PK] PRIMARY KEY CLUSTERED([CONTACT_METHOD_ID])
)
GO

CREATE TABLE [dbo].[PIMS_CONTACT_METHOD_HIST]  ( 
	[_CONTACT_METHOD_HIST_ID]       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_CONTACT_METHOD_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[CONTACT_METHOD_ID]             	bigint NOT NULL,
	[CONTACT_METHOD_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[CONTACT_METHOD_VALUE]          	nvarchar(200) NOT NULL,
	[IS_PREFERRED_METHOD]           	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_CNTMTH_H_PK] PRIMARY KEY CLUSTERED([_CONTACT_METHOD_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DOCUMENT_HIST]  ( 
	[_DOCUMENT_HIST_ID]             	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[DOCUMENT_TYPE_ID]              	bigint NOT NULL,
	[DOCUMENT_STATUS_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[FILE_NAME]                     	nvarchar(500) NOT NULL,
	[MAYAN_ID]                      	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DOCMNT_H_PK] PRIMARY KEY CLUSTERED([_DOCUMENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_DOCUMENT_TYP_HIST]  ( 
	[_DOCUMENT_TYP_HIST_ID]         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_DOCUMENT_TYP_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[DOCUMENT_TYPE_ID]              	bigint NOT NULL,
	[MAYAN_ID]                      	bigint NOT NULL,
	[DOCUMENT_TYPE]                 	nvarchar(200) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_DOCTYP_H_PK] PRIMARY KEY CLUSTERED([_DOCUMENT_TYP_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_FENCE_TYPE]  ( 
	[FENCE_TYPE_CODE]           	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [FNCTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [FNCTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [FNCTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [FNCTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [FNCTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [FNCTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [FNCTYP_PK] PRIMARY KEY CLUSTERED([FENCE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the fence type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FENCE_TYPE', 
	@level2type = N'Column', @level2name = N'FENCE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the fence type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FENCE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FENCE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FENCE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the fence type.  This is an unassociated table that is used in the UI to populate JSON attributes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_FENCE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_INSURANCE_TYPE]  ( 
	[INSURANCE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [INSPYT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [INSPYT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [INSPYT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [INSPYT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [INSPYT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [INSPYT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [INSPYT_PK] PRIMARY KEY CLUSTERED([INSURANCE_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_CATEGORY_TYPE]  ( 
	[LEASE_CATEGORY_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LSCATT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [LSCATT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LSCATT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LSCATT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LSCATT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LSCATT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSCATT_PK] PRIMARY KEY CLUSTERED([LEASE_CATEGORY_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_INITIATOR_TYPE]  ( 
	[LEASE_INITIATOR_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LINITT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [LINITT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LINITT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LINITT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LINITT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LINITT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LINITT_PK] PRIMARY KEY CLUSTERED([LEASE_INITIATOR_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the initiator of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_INITIATOR_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_INITIATOR_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the initiator of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_INITIATOR_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the initiator of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_INITIATOR_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_LICENSE_TYPE]  ( 
	[LEASE_LICENSE_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LELIST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [LELIST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LELIST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LELIST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LELIST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LELIST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LELIST_PK] PRIMARY KEY CLUSTERED([LEASE_LICENSE_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_PAY_RVBL_TYPE]  ( 
	[LEASE_PAY_RVBL_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LSPRTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [LSPRTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LSPRTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LSPRTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LSPRTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LSPRTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSPRTY_PK] PRIMARY KEY CLUSTERED([LEASE_PAY_RVBL_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_PROGRAM_TYPE]  ( 
	[LEASE_PROGRAM_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LSPRGT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [LSPRGT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LSPRGT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LSPRGT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LSPRGT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LSPRGT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSPRGT_PK] PRIMARY KEY CLUSTERED([LEASE_PROGRAM_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the program type associated with a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PROGRAM_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_PURPOSE_TYPE]  ( 
	[LEASE_PURPOSE_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LPRPTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [LPRPTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LPRPTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LPRPTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LPRPTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LPRPTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LPRPTY_PK] PRIMARY KEY CLUSTERED([LEASE_PURPOSE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the purpose type associated with a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PURPOSE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_RESPONSIBILITY_TYPE]  ( 
	[LEASE_RESPONSIBILITY_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [LRESPT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LRESPT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LRESPT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LRESPT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LRESPT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LRESPT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LRESPT_PK] PRIMARY KEY CLUSTERED([LEASE_RESPONSIBILITY_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the organization responsible for this lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_RESPONSIBILITY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the organization responsible for this lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes which organization is responsible for this lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_RESPONSIBILITY_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_STATUS_TYPE]  ( 
	[LEASE_STATUS_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LSSTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [LSSTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LSSTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LSSTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LSSTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LSSTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSSTYP_PK] PRIMARY KEY CLUSTERED([LEASE_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the status of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the status of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the status of the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE]  ( 
	[LEASE_ID]                      	bigint NOT NULL CONSTRAINT [LEASE_LEASE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_ID_SEQ]),
	[LEASE_PAY_RVBL_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[LEASE_LICENSE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_CATEGORY_TYPE_CODE]      	nvarchar(20) NULL,
	[LEASE_PURPOSE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_PROGRAM_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_INITIATOR_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[LEASE_RESPONSIBILITY_TYPE_CODE]	nvarchar(20) NULL,
	[LEASE_STATUS_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[REGION_CODE]                   	smallint NULL,
	[L_FILE_NO]                     	nvarchar(50) NULL,
	[TFA_FILE_NO]                   	int NULL,
	[TFA_FILE_NUMBER]               	nvarchar(50) NULL,
	[PS_FILE_NO]                    	nvarchar(50) NULL,
	[LEASE_DESCRIPTION]             	nvarchar(max) NULL,
	[LEASE_CATEGORY_OTHER_DESC]     	nvarchar(200) NULL,
	[LEASE_PURPOSE_OTHER_DESC]      	nvarchar(200) NULL,
	[LEASE_NOTES]                   	nvarchar(max) NULL,
	[MOTI_CONTACT]                  	nvarchar(200) NULL,
	[DOCUMENTATION_REFERENCE]       	nvarchar(500) NULL,
	[RETURN_NOTES]                  	nvarchar(max) NULL,
	[OTHER_LEASE_PROGRAM_TYPE]      	nvarchar(200) NULL,
	[OTHER_LEASE_LICENSE_TYPE]      	nvarchar(200) NULL,
	[OTHER_LEASE_PURPOSE_TYPE]      	nvarchar(200) NULL,
	[ORIG_START_DATE]               	datetime NOT NULL,
	[ORIG_EXPIRY_DATE]              	datetime NULL,
	[LEASE_AMOUNT]                  	money NULL,
	[RESPONSIBILITY_EFFECTIVE_DATE] 	datetime NULL,
	[INSPECTION_DATE]               	datetime NULL,
	[INSPECTION_NOTES]              	nvarchar(max) NULL,
	[IS_SUBJECT_TO_RTA]             	bit NULL CONSTRAINT [LEASE_IS_SUBJECT_TO_RTA_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_COMM_BLDG]                  	bit NULL CONSTRAINT [LEASE_IS_COMM_BLDG_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_OTHER_IMPROVEMENT]          	bit NULL CONSTRAINT [LEASE_IS_OTHER_IMPROVEMENT_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_EXPIRED]                    	bit NOT NULL CONSTRAINT [LEASE_EXPIRED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[HAS_PHYSICAL_FILE]             	bit NULL,
	[HAS_DIGITAL_FILE]              	bit NULL,
	[HAS_PHYSICIAL_LICENSE]         	bit NULL,
	[HAS_DIGITAL_LICENSE]           	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LEASE_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LEASE_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LEASE_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LEASE_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LEASE_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LEASE_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LEASE_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LEASE_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LEASE_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LEASE_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LEASE_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LEASE_PK] PRIMARY KEY CLUSTERED([LEASE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'MoTI region associated with the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'REGION_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated identifying lease/licence number' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'L_FILE_NO'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Sourced from t_fileMain.TFA_File_Number' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'TFA_FILE_NO'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Sourced from t_fileMain.TFA_File_Number || - || t_fileSub.Subfile_Sequence_Code' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'TFA_FILE_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Sourced from t_fileSubOverrideData.PSFile_No' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'PS_FILE_NO'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Manually etered lease description, not the legal description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User-specified lease category description not included in standard set of lease purposes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_CATEGORY_OTHER_DESC'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'User-specified lease purpose description not included in standard set of lease purposes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_PURPOSE_OTHER_DESC'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes accompanying lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_NOTES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Contact of the MoTI person associated with the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'MOTI_CONTACT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Location of documents pertianing to the lease/license' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'DOCUMENTATION_REFERENCE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes accompanying lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'RETURN_NOTES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of a non-standard lease program type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'OTHER_LEASE_PROGRAM_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of a non-standard lease/license type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'OTHER_LEASE_LICENSE_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of a non-standard lease purpose type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'OTHER_LEASE_PURPOSE_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Original start date of the lease/license' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'ORIG_START_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Original expiry date of the lease/license' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'ORIG_EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Lease/licence amount' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date current responsibility came into effect for this lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'RESPONSIBILITY_EFFECTIVE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Inspection date' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'INSPECTION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes accompanying inspection' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'INSPECTION_NOTES'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is subject the Residential Tenancy Act' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_SUBJECT_TO_RTA'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is a commercial building' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_COMM_BLDG'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is improvement of another description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_OTHER_IMPROVEMENT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Incidcator that lease/license has expired' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'IS_EXPIRED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicator that phyical file exists' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'HAS_PHYSICAL_FILE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicator that digital file exists' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'HAS_DIGITAL_FILE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicator that physical license exists' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'HAS_PHYSICIAL_LICENSE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicator that digital license exists' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'HAS_DIGITAL_LICENSE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Details of a lease that is inventoried in PIMS system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE'
GO

CREATE TABLE [dbo].[PIMS_INSURANCE]  ( 
	[INSURANCE_ID]                  	bigint NOT NULL CONSTRAINT [INSRNC_INSURANCE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_INSURANCE_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[INSURANCE_TYPE_CODE]           	nvarchar(20) NOT NULL,
	[OTHER_INSURANCE_TYPE]          	nvarchar(200) NULL,
	[COVERAGE_DESCRIPTION]          	nvarchar(2000) NULL,
	[COVERAGE_LIMIT]                	money NULL CONSTRAINT [INSRNC_COVERAGE_LIMIT_DEF]  DEFAULT (CONVERT([bit],(0))),
	[IS_INSURANCE_IN_PLACE]         	bit NULL CONSTRAINT [INSRNC_IS_INSURANCE_IN_PLACE_DEF]  DEFAULT (CONVERT([bit],(0))),
	[EXPIRY_DATE]                   	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [INSRNC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [INSRNC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [INSRNC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [INSRNC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [INSRNC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [INSRNC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [INSRNC_PK] PRIMARY KEY CLUSTERED([INSURANCE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the non-standard insurance coverage type' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'OTHER_INSURANCE_TYPE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the insurance coverage' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'COVERAGE_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Monetary limit of the insurance coverage' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'COVERAGE_LIMIT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicator that digital license exists' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'IS_INSURANCE_IN_PLACE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the insurance expires' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_INSURANCE', 
	@level2type = N'Column', @level2name = N'EXPIRY_DATE'
GO

CREATE TABLE [dbo].[PIMS_INSURANCE_HIST]  ( 
	[_INSURANCE_HIST_ID]            	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_INSURANCE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[INSURANCE_ID]                  	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[INSURANCE_TYPE_CODE]           	nvarchar(20) NOT NULL,
	[OTHER_INSURANCE_TYPE]          	nvarchar(200) NULL,
	[COVERAGE_DESCRIPTION]          	nvarchar(2000) NULL,
	[COVERAGE_LIMIT]                	money NULL,
	[IS_INSURANCE_IN_PLACE]         	bit NULL,
	[EXPIRY_DATE]                   	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_INSRNC_H_PK] PRIMARY KEY CLUSTERED([_INSURANCE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LAND_SURVEYOR_TYPE]  ( 
	[LAND_SURVEYOR_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LNSRVT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [LNSRVT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LNSRVT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LNSRVT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LNSRVT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LNSRVT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LNSRVT_PK] PRIMARY KEY CLUSTERED([LAND_SURVEYOR_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the land surveyor type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_SURVEYOR_TYPE', 
	@level2type = N'Column', @level2name = N'LAND_SURVEYOR_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the land surveyor type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_SURVEYOR_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_SURVEYOR_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_SURVEYOR_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the land surveyor type.  This is an unassociated table that is used in the UI to populate JSON attributes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LAND_SURVEYOR_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]  ( 
	[LEASE_ACTIVITY_INSTANCE_ID]    	bigint NOT NULL CONSTRAINT [LSACIN_LEASE_ACTIVITY_INSTANCE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_ACTIVITY_INSTANCE_ID_SEQ]),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LSACIN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LSACIN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LSACIN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LSACIN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LSACIN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSACIN_PK] PRIMARY KEY CLUSTERED([LEASE_ACTIVITY_INSTANCE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associative entity between leases/licenses and activity instances.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_ACTIVITY_INSTANCE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_HIST]  ( 
	[_LEASE_ACTIVITY_INSTANCE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]             	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                   	datetime NULL,
	[LEASE_ACTIVITY_INSTANCE_ID]      	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]            	bigint NOT NULL,
	[LEASE_ID]                        	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LSACIN_H_PK] PRIMARY KEY CLUSTERED([_LEASE_ACTIVITY_INSTANCE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_HIST]  ( 
	[_LEASE_HIST_ID]                	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[LEASE_PAY_RVBL_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[LEASE_LICENSE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_CATEGORY_TYPE_CODE]      	nvarchar(20) NULL,
	[LEASE_PURPOSE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_PROGRAM_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[LEASE_INITIATOR_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[LEASE_RESPONSIBILITY_TYPE_CODE]	nvarchar(20) NULL,
	[LEASE_STATUS_TYPE_CODE]        	nvarchar(20) NOT NULL,
	[REGION_CODE]                   	smallint NULL,
	[L_FILE_NO]                     	nvarchar(50) NULL,
	[TFA_FILE_NO]                   	int NULL,
	[TFA_FILE_NUMBER]               	nvarchar(50) NULL,
	[PS_FILE_NO]                    	nvarchar(50) NULL,
	[LEASE_CATEGORY_OTHER_DESC]     	nvarchar(200) NULL,
	[LEASE_PURPOSE_OTHER_DESC]      	nvarchar(200) NULL,
	[MOTI_CONTACT]                  	nvarchar(200) NULL,
	[DOCUMENTATION_REFERENCE]       	nvarchar(500) NULL,
	[OTHER_LEASE_PROGRAM_TYPE]      	nvarchar(200) NULL,
	[OTHER_LEASE_LICENSE_TYPE]      	nvarchar(200) NULL,
	[OTHER_LEASE_PURPOSE_TYPE]      	nvarchar(200) NULL,
	[ORIG_START_DATE]               	datetime NOT NULL,
	[ORIG_EXPIRY_DATE]              	datetime NULL,
	[LEASE_AMOUNT]                  	money NULL,
	[RESPONSIBILITY_EFFECTIVE_DATE] 	datetime NULL,
	[INSPECTION_DATE]               	datetime NULL,
	[IS_SUBJECT_TO_RTA]             	bit NULL,
	[IS_COMM_BLDG]                  	bit NULL,
	[IS_OTHER_IMPROVEMENT]          	bit NULL,
	[IS_EXPIRED]                    	bit NOT NULL,
	[HAS_PHYSICAL_FILE]             	bit NULL,
	[HAS_DIGITAL_FILE]              	bit NULL,
	[HAS_PHYSICIAL_LICENSE]         	bit NULL,
	[HAS_DIGITAL_LICENSE]           	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LEASE_H_PK] PRIMARY KEY CLUSTERED([_LEASE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_PAYMENT_METHOD_TYPE]  ( 
	[LEASE_PAYMENT_METHOD_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [LSPMMT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LSPMMT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LSPMMT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LSPMMT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LSPMMT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LSPMMT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSPMMT_PK] PRIMARY KEY CLUSTERED([LEASE_PAYMENT_METHOD_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment method type code' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_METHOD_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_PAYMENT_METHOD_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment method type description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_METHOD_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this code disabled?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_METHOD_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the descriptions' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_METHOD_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the type of payment method for a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_METHOD_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_PAYMENT_STATUS_TYPE]  ( 
	[LEASE_PAYMENT_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [LPSTST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LPSTST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LPSTST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LPSTST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LPSTST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LPSTST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LPSTST_PK] PRIMARY KEY CLUSTERED([LEASE_PAYMENT_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment status type code' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_PAYMENT_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment status type description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this code disabled?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Display order of the descriptions' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the status of forecast payments' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_PMT_FREQ_TYPE]  ( 
	[LEASE_PMT_FREQ_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LSPMTF_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [LSPMTF_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LSPMTF_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LSPMTF_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LSPMTF_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LSPMTF_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSPMTF_PK] PRIMARY KEY CLUSTERED([LEASE_PMT_FREQ_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment frequency type code' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PMT_FREQ_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_PMT_FREQ_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Payment frequency type code description' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PMT_FREQ_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the frequency of payments for a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PMT_FREQ_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_TERM_STATUS_TYPE]  ( 
	[LEASE_TERM_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                	nvarchar(200) NOT NULL,
	[IS_DISABLED]                	bit NOT NULL CONSTRAINT [LTRMST_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]              	int NULL,
	[CONCURRENCY_CONTROL_NUMBER] 	bigint NOT NULL CONSTRAINT [LTRMST_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [LTRMST_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [LTRMST_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]   	datetime NOT NULL CONSTRAINT [LTRMST_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]      	nvarchar(30) NOT NULL CONSTRAINT [LTRMST_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LTRMST_PK] PRIMARY KEY CLUSTERED([LEASE_TERM_STATUS_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the status of the lease term' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'LEASE_TERM_STATUS_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the status of the lease term' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM_STATUS_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the status of the lease term' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM_STATUS_TYPE'
GO

CREATE TABLE [dbo].[PIMS_LEASE_TERM]  ( 
	[LEASE_TERM_ID]                 	bigint NOT NULL CONSTRAINT [LSTERM_LEASE_TERM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_TERM_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[LEASE_TERM_STATUS_TYPE_CODE]   	nvarchar(20) NULL,
	[LEASE_PMT_FREQ_TYPE_CODE]      	nvarchar(20) NULL,
	[TERM_START_DATE]               	datetime NOT NULL,
	[TERM_EXPIRY_DATE]              	datetime NULL,
	[TERM_RENEWAL_DATE]             	datetime NULL,
	[PAYMENT AMOUNT]                	money NULL,
	[PAYMENT_DUE_DATE]              	nvarchar(200) NULL,
	[PAYMENT_NOTE]                  	nvarchar(2000) NULL,
	[IS_GST_ELIGIBLE]               	bit NULL,
	[GST_AMOUNT]                    	money NULL,
	[IS_TERM_EXERCISED]             	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LSTERM_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LSTERM_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LSTERM_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LSTERM_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LSTERM_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LSTERM_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LSTERM_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LSTERM_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LSTERM_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LSTERM_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LSTERM_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSTERM_PK] PRIMARY KEY CLUSTERED([LEASE_TERM_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to payment frequency values' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'LEASE_PMT_FREQ_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Start date of the current term of the lease/licence' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'TERM_START_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Expiry date of the current term of the lease/licence' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'TERM_EXPIRY_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Renewal date of the current term of the lease/licence' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'TERM_RENEWAL_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Agreed-to payment amount (exclusive of GST)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'PAYMENT AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Anecdotal description of payment due date (e.g. 1st of month, end of month)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'PAYMENT_DUE_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes regarding payment status for the lease term' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'PAYMENT_NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is the lease subject to GST?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'IS_GST_ELIGIBLE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Calculated/entered GST portion of the payment.  Can be overridden by the user.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'GST_AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Has the lease term been exercised?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM', 
	@level2type = N'Column', @level2name = N'IS_TERM_EXERCISED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes a term for the associated lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TERM'
GO

CREATE TABLE [dbo].[PIMS_LEASE_PAYMENT]  ( 
	[LEASE_PAYMENT_ID]              	bigint NOT NULL CONSTRAINT [LSPYMT_LEASE_PAYMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_PAYMENT_ID_SEQ]),
	[LEASE_TERM_ID]                 	bigint NOT NULL,
	[LEASE_PAYMENT_METHOD_TYPE_CODE]	nvarchar(20) NOT NULL,
	[LEASE_PAYMENT_STATUS_TYPE_CODE]	nvarchar(20) NULL,
	[PAYMENT_RECEIVED_DATE]         	datetime NOT NULL,
	[PAYMENT_AMOUNT_PRE_TAX]        	money NOT NULL,
	[PAYMENT_AMOUNT_PST]            	money NULL,
	[PAYMENT_AMOUNT_GST]            	money NULL,
	[PAYMENT_AMOUNT_TOTAL]          	money NOT NULL,
	[NOTE]                          	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LSPYMT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LSPYMT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LSPYMT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LSPYMT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LSPYMT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LSPYMT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LSPYMT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LSPYMT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LSPYMT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LSPYMT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LSPYMT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSPYMT_PK] PRIMARY KEY CLUSTERED([LEASE_PAYMENT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the payment was received or sent' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'PAYMENT_RECEIVED_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Principal amount of the payment before applicable taxes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'PAYMENT_AMOUNT_PRE_TAX'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'PST owing on payment if applicable' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'PAYMENT_AMOUNT_PST'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'GST owing on payment if applicable' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'PAYMENT_AMOUNT_GST'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Total amount of payment including principal plus all applicable taxes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'PAYMENT_AMOUNT_TOTAL'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes regarding this payment' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT', 
	@level2type = N'Column', @level2name = N'NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes a payment associated with a lease term.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_PAYMENT'
GO

CREATE TABLE [dbo].[PIMS_LEASE_PAYMENT_HIST]  ( 
	[_LEASE_PAYMENT_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_PAYMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_PAYMENT_ID]              	bigint NOT NULL,
	[LEASE_TERM_ID]                 	bigint NOT NULL,
	[LEASE_PAYMENT_METHOD_TYPE_CODE]	nvarchar(20) NOT NULL,
	[LEASE_PAYMENT_STATUS_TYPE_CODE]	nvarchar(20) NULL,
	[PAYMENT_RECEIVED_DATE]         	datetime NOT NULL,
	[PAYMENT_AMOUNT_PRE_TAX]        	money NOT NULL,
	[PAYMENT_AMOUNT_PST]            	money NULL,
	[PAYMENT_AMOUNT_GST]            	money NULL,
	[PAYMENT_AMOUNT_TOTAL]          	money NOT NULL,
	[NOTE]                          	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LSPYMT_H_PK] PRIMARY KEY CLUSTERED([_LEASE_PAYMENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LESSOR_TYPE]  ( 
	[LESSOR_TYPE_CODE]          	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LSSRTY_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [LSSRTY_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LSSRTY_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LSSRTY_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LSSRTY_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LSSRTY_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSSRTY_PK] PRIMARY KEY CLUSTERED([LESSOR_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_TENANT]  ( 
	[LEASE_TENANT_ID]               	bigint NOT NULL CONSTRAINT [TENANT_LEASE_TENANT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_LEASE_TENANT_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[LESSOR_TYPE_CODE]              	nvarchar(20) NOT NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[NOTE]                          	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [TENANT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [TENANT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [TENANT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [TENANT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [TENANT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [TENANT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [TENANT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [TENANT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [TENANT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [TENANT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [TENANT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [TENANT_PK] PRIMARY KEY CLUSTERED([LEASE_TENANT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Notes associated with the lease/tenant relationship.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TENANT', 
	@level2type = N'Column', @level2name = N'NOTE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a tenant with a lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_TENANT'
GO

CREATE TABLE [dbo].[PIMS_LEASE_TENANT_HIST]  ( 
	[_LEASE_TENANT_HIST_ID]         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_TENANT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_TENANT_ID]               	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[LESSOR_TYPE_CODE]              	nvarchar(20) NOT NULL,
	[PRIMARY_CONTACT_ID]            	bigint NULL,
	[NOTE]                          	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_TENANT_H_PK] PRIMARY KEY CLUSTERED([_LEASE_TENANT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LEASE_TERM_HIST]  ( 
	[_LEASE_TERM_HIST_ID]           	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_TERM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[LEASE_TERM_ID]                 	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[LEASE_TERM_STATUS_TYPE_CODE]   	nvarchar(20) NULL,
	[LEASE_PMT_FREQ_TYPE_CODE]      	nvarchar(20) NULL,
	[TERM_START_DATE]               	datetime NOT NULL,
	[TERM_EXPIRY_DATE]              	datetime NULL,
	[TERM_RENEWAL_DATE]             	datetime NULL,
	[PAYMENT AMOUNT]                	money NULL,
	[PAYMENT_DUE_DATE]              	nvarchar(200) NULL,
	[PAYMENT_NOTE]                  	nvarchar(2000) NULL,
	[IS_GST_ELIGIBLE]               	bit NULL,
	[GST_AMOUNT]                    	money NULL,
	[IS_TERM_EXERCISED]             	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LSTERM_H_PK] PRIMARY KEY CLUSTERED([_LEASE_TERM_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_LETTER_TYPE]  ( 
	[LETTER_TYPE_CODE]          	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [LTRTYP_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [LTRTYP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [LTRTYP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [LTRTYP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [LTRTYP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [LTRTYP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LTRTYP_PK] PRIMARY KEY CLUSTERED([LETTER_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the letter type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LETTER_TYPE', 
	@level2type = N'Column', @level2name = N'LETTER_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the letter type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LETTER_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LETTER_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LETTER_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the letter type.  This is an unassociated table that is used in the UI to populate JSON attributes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LETTER_TYPE'
GO

CREATE TABLE [dbo].[PIMS_NOTE_HIST]  ( 
	[_NOTE_HIST_ID]                 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_NOTE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[NOTE_TXT]                      	nvarchar(4000) NOT NULL,
	[IS_SYSTEM_GENERATED]           	bit NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_NOTE_H_PK] PRIMARY KEY CLUSTERED([_NOTE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ORGANIZATION_ADDRESS]  ( 
	[ORGANIZATION_ADDRESS_ID]       	bigint NOT NULL CONSTRAINT [ORGADD_ORGANIZATION_ADDRESS_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ORGANIZATION_ADDRESS_ID_SEQ]),
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[ADDRESS_ID]                    	bigint NOT NULL,
	[ADDRESS_USAGE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [ORGADD_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ORGADD_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ORGADD_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ORGADD_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ORGADD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ORGADD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ORGADD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ORGADD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ORGADD_PK] PRIMARY KEY CLUSTERED([ORGANIZATION_ADDRESS_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'An associative entity to define multiple addresses for a person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ORGANIZATION_ADDRESS'
GO

CREATE TABLE [dbo].[PIMS_ORGANIZATION_ADDRESS_HIST]  ( 
	[_ORGANIZATION_ADDRESS_HIST_ID] 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ORGANIZATION_ADDRESS_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ORGANIZATION_ADDRESS_ID]       	bigint NOT NULL,
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[ADDRESS_ID]                    	bigint NOT NULL,
	[ADDRESS_USAGE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ORGADD_H_PK] PRIMARY KEY CLUSTERED([_ORGANIZATION_ADDRESS_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ORGANIZATION_HIST]  ( 
	[_ORGANIZATION_HIST_ID]         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ORGANIZATION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[PRNT_ORGANIZATION_ID]          	bigint NULL,
	[REGION_CODE]                   	smallint NULL,
	[DISTRICT_CODE]                 	smallint NULL,
	[ORGANIZATION_TYPE_CODE]        	nvarchar(20) NULL,
	[ORG_IDENTIFIER_TYPE_CODE]      	nvarchar(20) NULL,
	[ORGANIZATION_IDENTIFIER]       	nvarchar(100) NULL,
	[ORGANIZATION_NAME]             	nvarchar(200) NOT NULL,
	[ORGANIZATION_ALIAS]            	nvarchar(200) NULL,
	[INCORPORATION_NUMBER]          	nvarchar(50) NULL,
	[WEBSITE]                       	nvarchar(200) NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ORG_H_PK] PRIMARY KEY CLUSTERED([_ORGANIZATION_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PERSON_ADDRESS]  ( 
	[PERSON_ADDRESS_ID]             	bigint NOT NULL CONSTRAINT [PERADD_PERSON_ADDRESS_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PERSON_ADDRESS_ID_SEQ]),
	[PERSON_ID]                     	bigint NOT NULL,
	[ADDRESS_ID]                    	bigint NOT NULL,
	[ADDRESS_USAGE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [PERADD_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PERADD_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PERADD_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PERADD_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PERADD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PERADD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PERADD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PERADD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PERADD_PK] PRIMARY KEY CLUSTERED([PERSON_ADDRESS_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'An associative entity to define multiple addresses for a person.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PERSON_ADDRESS'
GO

CREATE TABLE [dbo].[PIMS_PERSON_ADDRESS_HIST]  ( 
	[_PERSON_ADDRESS_HIST_ID]       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PERSON_ADDRESS_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PERSON_ADDRESS_ID]             	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[ADDRESS_ID]                    	bigint NOT NULL,
	[ADDRESS_USAGE_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PERADD_H_PK] PRIMARY KEY CLUSTERED([_PERSON_ADDRESS_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PERSON_HIST]  ( 
	[_PERSON_HIST_ID]               	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PERSON_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[SURNAME]                       	nvarchar(50) NOT NULL,
	[FIRST_NAME]                    	nvarchar(50) NOT NULL,
	[MIDDLE_NAMES]                  	nvarchar(200) NULL,
	[NAME_SUFFIX]                   	nvarchar(50) NULL,
	[PREFERRED_NAME]                	nvarchar(200) NULL,
	[BIRTH_DATE]                    	date NULL,
	[COMMENT]                       	nvarchar(2000) NULL,
	[ADDRESS_COMMENT]               	nvarchar(2000) NULL,
	[USE_ORGANIZATION_ADDRESS]      	bit NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PERSON_H_PK] PRIMARY KEY CLUSTERED([_PERSON_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PERSON_ORGANIZATION]  ( 
	[PERSON_ORGANIZATION_ID]        	bigint NOT NULL CONSTRAINT [PERORG_PERSON_ORGANIZATION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PERSON_ORGANIZATION_ID_SEQ]),
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [PERORG_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PERORG_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PERORG_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PERORG_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PERORG_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PERORG_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PERORG_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PERORG_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PERORG_PK] PRIMARY KEY CLUSTERED([PERSON_ORGANIZATION_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PERSON_ORGANIZATION_HIST]  ( 
	[_PERSON_ORGANIZATION_HIST_ID]  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PERSON_ORGANIZATION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PERSON_ORGANIZATION_ID]        	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PERORG_H_PK] PRIMARY KEY CLUSTERED([_PERSON_ORGANIZATION_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROP_RESEARCH_PURPOSE_TYPE]  ( 
	[PROP_RESEARCH_PURPOSE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[IS_DISABLED]                    	bit NULL CONSTRAINT [RRESPT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                  	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [RRESPT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [RRESPT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [RRESPT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [RRESPT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [RRESPT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RRESPT_PK] PRIMARY KEY CLUSTERED([PROP_RESEARCH_PURPOSE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code indicating the purpose of the property research' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'PROP_RESEARCH_PURPOSE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the code indicating the purpose of the property research' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the purpose ot the property research' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_RESEARCH_PURPOSE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]  ( 
	[PRF_PROP_RESEARCH_PURPOSE_ID]   	bigint NOT NULL CONSTRAINT [PRSPRP_PRF_PROP_RESEARCH_PURPOSE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PRF_PROP_RESEARCH_PURPOSE_ID_SEQ]),
	[PROPERTY_RESEARCH_FILE_ID]      	bigint NULL,
	[PROP_RESEARCH_PURPOSE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [PRSPRP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRSPRP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRSPRP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [PRSPRP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRSPRP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRSPRP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRSPRP_PK] PRIMARY KEY CLUSTERED([PRF_PROP_RESEARCH_PURPOSE_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_HIST]  ( 
	[_PROPERTY_ACQUISITION_FILE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ACQUISITION_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]               	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                     	datetime NULL,
	[PROPERTY_ACQUISITION_FILE_ID]      	bigint NOT NULL,
	[ACQUISITION_FILE_ID]               	bigint NOT NULL,
	[PROPERTY_ID]                       	bigint NOT NULL,
	[PROPERTY_NAME]                     	nvarchar(500) NULL,
	[DISPLAY_ORDER]                     	int NULL,
	[IS_DISABLED]                       	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]        	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_CREATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]         	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]    	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRACQF_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_ACQUISITION_FILE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ADJACENT_LAND_TYPE]  ( 
	[PROPERTY_ADJACENT_LAND_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                     	nvarchar(200) NOT NULL,
	[IS_DISABLED]                     	bit NOT NULL CONSTRAINT [PRADJL_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                   	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL CONSTRAINT [PRADJL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [PRADJL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [PRADJL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [PRADJL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [PRADJL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRADJL_PK] PRIMARY KEY CLUSTERED([PROPERTY_ADJACENT_LAND_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property adjacent land code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ADJACENT_LAND_TYPE', 
	@level2type = N'Column', @level2name = N'PROPERTY_ADJACENT_LAND_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property adjacent land code description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ADJACENT_LAND_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ADJACENT_LAND_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ADJACENT_LAND_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe property adjacent land type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ADJACENT_LAND_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ANOMALY_TYPE]  ( 
	[PROPERTY_ANOMALY_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PRANOM_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [PRANOM_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRANOM_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRANOM_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PRANOM_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PRANOM_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRANOM_PK] PRIMARY KEY CLUSTERED([PROPERTY_ANOMALY_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property anomaly code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ANOMALY_TYPE', 
	@level2type = N'Column', @level2name = N'PROPERTY_ANOMALY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property anomaly code description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ANOMALY_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ANOMALY_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ANOMALY_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe property anomalies.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ANOMALY_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_EVALUATION]  ( 
	[PROPERTY_EVALUATION_ID]        	bigint NOT NULL CONSTRAINT [PRPEVL_PROPERTY_EVALUATION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_EVALUATION_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[EVALUATION_DATE]               	date NOT NULL,
	[KEY]                           	int NOT NULL,
	[VALUE]                         	money NOT NULL,
	[NOTE]                          	nvarchar(1000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRPEVL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPEVL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPEVL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPEVL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPEVL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPEVL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPEVL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPEVL_PK] PRIMARY KEY CLUSTERED([PROPERTY_EVALUATION_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_EVALUATION_HIST]  ( 
	[_PROPERTY_EVALUATION_HIST_ID]  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_EVALUATION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROPERTY_EVALUATION_ID]        	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[EVALUATION_DATE]               	date NOT NULL,
	[KEY]                           	int NOT NULL,
	[VALUE]                         	money NOT NULL,
	[NOTE]                          	nvarchar(1000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPEVL_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_EVALUATION_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_HIST]  ( 
	[_PROPERTY_HIST_ID]                  	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[PROPERTY_ID]                        	bigint NOT NULL,
	[PROPERTY_MANAGER_ID]                	bigint NULL,
	[PROP_MGMT_ORG_ID]                   	bigint NULL,
	[PROPERTY_TYPE_CODE]                 	nvarchar(20) NOT NULL,
	[PROPERTY_CLASSIFICATION_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[ADDRESS_ID]                         	bigint NULL,
	[REGION_CODE]                        	smallint NOT NULL,
	[DISTRICT_CODE]                      	smallint NOT NULL,
	[PROPERTY_AREA_UNIT_TYPE_CODE]       	nvarchar(20) NULL,
	[PROPERTY_DATA_SOURCE_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[PROPERTY_STATUS_TYPE_CODE]          	nvarchar(20) NOT NULL,
	[SURPLUS_DECLARATION_TYPE_CODE]      	nvarchar(20) NOT NULL,
	[VOLUMETRIC_TYPE_CODE]               	nvarchar(20) NULL,
	[VOLUME_UNIT_TYPE_CODE]              	nvarchar(20) NULL,
	[PPH_STATUS_TYPE_CODE]               	nvarchar(20) NULL,
	[PROPERTY_DATA_SOURCE_EFFECTIVE_DATE]	date NOT NULL,
	[NAME]                               	nvarchar(250) NULL,
	[DESCRIPTION]                        	nvarchar(2000) NULL,
	[PID]                                	int NULL,
	[PIN]                                	int NULL,
	[FILE_NUMBER]                        	int NULL,
	[FILE_NUMBER_SUFFIX]                 	nvarchar(2) NULL,
	[LAND_AREA]                          	real NULL,
	[SURVEY_PLAN_NUMBER]                 	nvarchar(250) NULL,
	[ENCUMBRANCE_REASON]                 	nvarchar(500) NULL,
	[SURPLUS_DECLARATION_COMMENT]        	nvarchar(2000) NULL,
	[SURPLUS_DECLARATION_DATE]           	datetime NULL,
	[MUNICIPAL_ZONING]                   	nvarchar(100) NULL,
	[IS_VOLUMETRIC_PARCEL]               	bit NULL,
	[VOLUMETRIC_MEASUREMENT]             	real NULL,
	[IS_OWNED]                           	bit NOT NULL,
	[IS_PROPERTY_OF_INTEREST]            	bit NOT NULL,
	[IS_VISIBLE_TO_OTHER_AGENCIES]       	bit NOT NULL,
	[IS_SENSITIVE]                       	bit NOT NULL,
	[IS_PROVINCIAL_PUBLIC_HWY]           	bit NULL,
	[PPH_STATUS_UPDATE_USERID]           	nvarchar(30) NULL,
	[PPH_STATUS_UPDATE_TIMESTAMP]        	datetime NULL,
	[PPH_STATUS_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[IS_RWY_BELT_DOM_PATENT]             	bit NULL,
	[ZONING]                             	nvarchar(50) NULL,
	[ZONING_POTENTIAL]                   	nvarchar(50) NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPRTY_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT_TYPE]  ( 
	[PROPERTY_IMPROVEMENT_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                   	nvarchar(200) NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL CONSTRAINT [PIMPRT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                 	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PIMPRT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PIMPRT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PIMPRT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PIMPRT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PIMPRT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PIMPRT_PK] PRIMARY KEY CLUSTERED([PROPERTY_IMPROVEMENT_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the types of improvements made to a property during the lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'PROPERTY_IMPROVEMENT_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code description of the types of improvements made to a property during the lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the types of improvements made to a property during the lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]  ( 
	[PROPERTY_IMPROVEMENT_ID]       	bigint NOT NULL CONSTRAINT [PIMPRV_PROPERTY_IMPROVEMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_IMPROVEMENT_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[PROPERTY_IMPROVEMENT_TYPE_CODE]	nvarchar(20) NOT NULL,
	[IMPROVEMENT_DESCRIPTION]       	nvarchar(2000) NULL,
	[STRUCTURE_SIZE]                	nvarchar(2000) NULL,
	[ADDRESS]                       	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PIMPRV_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PIMPRV_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PIMPRV_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PIMPRV_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PIMPRV_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PIMPRV_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PIMPRV_PK] PRIMARY KEY CLUSTERED([PROPERTY_IMPROVEMENT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the improvements' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT', 
	@level2type = N'Column', @level2name = N'IMPROVEMENT_DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Size of the structure (house, building, bridge, etc,)' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT', 
	@level2type = N'Column', @level2name = N'STRUCTURE_SIZE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Addresses affected' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT', 
	@level2type = N'Column', @level2name = N'ADDRESS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of property improvements associated with the lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_IMPROVEMENT'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT_HIST]  ( 
	[_PROPERTY_IMPROVEMENT_HIST_ID] 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_IMPROVEMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROPERTY_IMPROVEMENT_ID]       	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[PROPERTY_IMPROVEMENT_TYPE_CODE]	nvarchar(20) NOT NULL,
	[IMPROVEMENT_DESCRIPTION]       	nvarchar(2000) NULL,
	[STRUCTURE_SIZE]                	nvarchar(2000) NULL,
	[ADDRESS]                       	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PIMPRV_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_IMPROVEMENT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_LEASE]  ( 
	[PROPERTY_LEASE_ID]             	bigint NOT NULL CONSTRAINT [PROPLS_PROPERTY_LEASE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_LEASE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[AREA_UNIT_TYPE_CODE]           	nvarchar(20) NULL,
	[LEASE_AREA]                    	real NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PROPLS_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PROPLS_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PROPLS_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PROPLS_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PROPLS_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PROPLS_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PROPLS_PK] PRIMARY KEY CLUSTERED([PROPERTY_LEASE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Leased area measurement' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_LEASE', 
	@level2type = N'Column', @level2name = N'LEASE_AREA'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_LEASE_HIST]  ( 
	[_PROPERTY_LEASE_HIST_ID]       	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_LEASE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROPERTY_LEASE_ID]             	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[AREA_UNIT_TYPE_CODE]           	nvarchar(20) NULL,
	[LEASE_AREA]                    	real NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PROPLS_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_LEASE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION]  ( 
	[PROPERTY_ORGANIZATION_ID]      	bigint NOT NULL CONSTRAINT [PRPORG_PROPERTY_ORGANIZATION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ORGANIZATION_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRPORG_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPORG_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPORG_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPORG_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPORG_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPORG_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPORG_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[IS_DISABLED]                   	bit NULL CONSTRAINT [PRPORG_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	CONSTRAINT [PRPORG_PK] PRIMARY KEY CLUSTERED([PROPERTY_ORGANIZATION_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION_HIST]  ( 
	[_PROPERTY_ORGANIZATION_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROPERTY_ORGANIZATION_ID]      	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	CONSTRAINT [PIMS_PRPORG_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_ORGANIZATION_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_SERVICE_FILE_TYPE]  ( 
	[PROPERTY_SERVICE_FILE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                    	nvarchar(200) NOT NULL,
	[IS_DISABLED]                    	bit NOT NULL CONSTRAINT [PRSVFT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                  	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [PRSVFT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [PRSVFT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [PRSVFT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRSVFT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRSVFT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRSVFT_PK] PRIMARY KEY CLUSTERED([PROPERTY_SERVICE_FILE_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_SERVICE_FILE]  ( 
	[PROPERTY_SERVICE_FILE_ID]       	bigint NOT NULL CONSTRAINT [PRPSVC_PROPERTY_SERVICE_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_SERVICE_FILE_ID_SEQ]),
	[PROPERTY_SERVICE_FILE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL CONSTRAINT [PRPSVC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPSVC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPSVC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [PRPSVC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [PRPSVC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRPSVC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRPSVC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPSVC_PK] PRIMARY KEY CLUSTERED([PROPERTY_SERVICE_FILE_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE]  ( 
	[PROPERTY_PROPERTY_SERVICE_FILE_ID]	bigint NOT NULL CONSTRAINT [PRPRSF_PROPERTY_PROPERTY_SERVICE_FILE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_PROPERTY_SERVICE_FILE_ID_SEQ]),
	[PROPERTY_ID]                      	bigint NOT NULL,
	[PROPERTY_SERVICE_FILE_ID]         	bigint NOT NULL,
	[IS_DISABLED]                      	bit NULL CONSTRAINT [PRPRSF_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL CONSTRAINT [PRPRSF_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [PRPRSF_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [PRPRSF_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [PRPRSF_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [PRPRSF_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [PRPRSF_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [PRPRSF_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRSF_PK] PRIMARY KEY CLUSTERED([PROPERTY_PROPERTY_SERVICE_FILE_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST]  ( 
	[_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_PROPERTY_SERVICE_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                    	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                          	datetime NULL,
	[PROPERTY_PROPERTY_SERVICE_FILE_ID]      	bigint NOT NULL,
	[PROPERTY_ID]                            	bigint NOT NULL,
	[PROPERTY_SERVICE_FILE_ID]               	bigint NOT NULL,
	[IS_DISABLED]                            	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]             	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]                   	datetime NOT NULL,
	[APP_CREATE_USERID]                      	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                   	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]              	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                    	datetime NOT NULL,
	[DB_CREATE_USERID]                       	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]                  	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPRSF_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE_HIST]  ( 
	[_PROPERTY_RESEARCH_FILE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_RESEARCH_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[PROPERTY_RESEARCH_FILE_ID]      	bigint NOT NULL,
	[PROPERTY_ID]                    	bigint NOT NULL,
	[RESEARCH_FILE_ID]               	bigint NOT NULL,
	[PROPERTY_NAME]                  	nvarchar(500) NULL,
	[DISPLAY_ORDER]                  	int NULL,
	[IS_DISABLED]                    	bit NULL,
	[IS_LEGAL_OPINION_REQUIRED]      	bit NULL,
	[IS_LEGAL_OPINION_OBTAINED]      	bit NULL,
	[DOCUMENT_REFERENCE]             	nvarchar(2000) NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRSCRC_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_RESEARCH_FILE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_ROAD_TYPE]  ( 
	[PROPERTY_ROAD_TYPE_CODE]   	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PRROAD_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [PRROAD_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRROAD_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRROAD_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PRROAD_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PRROAD_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRROAD_PK] PRIMARY KEY CLUSTERED([PROPERTY_ROAD_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property highway/road code.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ROAD_TYPE', 
	@level2type = N'Column', @level2name = N'PROPERTY_ROAD_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property highway/road code description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ROAD_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ROAD_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ROAD_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe property highway/road type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_ROAD_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_SERVICE_FILE_HIST]  ( 
	[_PROPERTY_SERVICE_FILE_HIST_ID] 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_SERVICE_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]            	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                  	datetime NULL,
	[PROPERTY_SERVICE_FILE_ID]       	bigint NOT NULL,
	[PROPERTY_SERVICE_FILE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]     	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[APP_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]           	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]      	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]      	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] 	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[DB_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPSVC_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_SERVICE_FILE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_TAX_REMIT_TYPE]  ( 
	[PROPERTY_TAX_REMIT_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                 	nvarchar(200) NOT NULL,
	[IS_DISABLED]                 	bit NOT NULL CONSTRAINT [PTRMTT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]               	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NOT NULL CONSTRAINT [PTRMTT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [PTRMTT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [PTRMTT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [PTRMTT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [PTRMTT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PTRMTT_PK] PRIMARY KEY CLUSTERED([PROPERTY_TAX_REMIT_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of property tax remittance types' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_TAX_REMIT_TYPE', 
	@level2type = N'Column', @level2name = N'PROPERTY_TAX_REMIT_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code description of property tax remittance types' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_TAX_REMIT_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this code value disabled?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_TAX_REMIT_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of property tax remittance types' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_TAX_REMIT_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_TAX]  ( 
	[PROPERTY_TAX_ID]               	bigint NOT NULL CONSTRAINT [PRPTAX_PROPERTY_TAX_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_TAX_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_TAX_REMIT_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[TAX_FOLIO_NO]                  	nvarchar(50) NOT NULL,
	[PAYMENT_AMOUNT]                	money NOT NULL,
	[LAST_PAYMENT_DATE]             	datetime NULL,
	[PAYMENT_NOTES]                 	money NULL,
	[BCTFA_NOTIFICATION_DATE]       	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRPTAX_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPTAX_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPTAX_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPTAX_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPTAX_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPTAX_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPTAX_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPTAX_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPTAX_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPTAX_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPTAX_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPTAX_PK] PRIMARY KEY CLUSTERED([PROPERTY_TAX_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Property tax folio number' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_TAX', 
	@level2type = N'Column', @level2name = N'TAX_FOLIO_NO'
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_TAX_HIST]  ( 
	[_PROPERTY_TAX_HIST_ID]         	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_TAX_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROPERTY_TAX_ID]               	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_TAX_REMIT_TYPE_CODE]  	nvarchar(20) NOT NULL,
	[TAX_FOLIO_NO]                  	nvarchar(50) NOT NULL,
	[PAYMENT_AMOUNT]                	money NOT NULL,
	[LAST_PAYMENT_DATE]             	datetime NULL,
	[PAYMENT_NOTES]                 	money NULL,
	[BCTFA_NOTIFICATION_DATE]       	datetime NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPTAX_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_TAX_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_PROPERTY_TENURE_TYPE]  ( 
	[PROPERTY_TENURE_TYPE_CODE] 	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [PRPTNR_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [PRPTNR_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRPTNR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRPTNR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [PRPTNR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [PRPTNR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPTNR_PK] PRIMARY KEY CLUSTERED([PROPERTY_TENURE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'A code table to store property tenure codes. Tenure is defined as : "The act, right, manner or term of holding something(as a landed property)" In this case, tenure is required on Properties to indicate MoTI''s legal tenure on the property. The land parcel' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_TENURE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]  ( 
	[PROP_PROP_ADJACENT_LAND_TYPE_ID] 	bigint NOT NULL CONSTRAINT [PRPALT_PROP_PROP_ADJACENT_LAND_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ADJACENT_LAND_TYPE_ID_SEQ]),
	[PROPERTY_ID]                     	bigint NOT NULL,
	[PROPERTY_ADJACENT_LAND_TYPE_CODE]	nvarchar(20) NOT NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL CONSTRAINT [PRPALT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [PRPALT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL CONSTRAINT [PRPALT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [PRPALT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [PRPALT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [PRPALT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPALT_PK] PRIMARY KEY CLUSTERED([PROP_PROP_ADJACENT_LAND_TYPE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Resolves many-to-many relationship between PIMS_PROPERTY and PIMS_PROPERTY_ADJACENT_LAND_TYPE' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_ADJACENT_LAND_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]  ( 
	[PROP_PROP_ANOMALY_TYPE_ID]     	bigint NOT NULL CONSTRAINT [PRPRAT_PROP_PROP_ANOMALY_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ANOMALY_TYPE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_ANOMALY_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRAT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPRAT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRPRAT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRAT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPRAT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPRAT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRAT_PK] PRIMARY KEY CLUSTERED([PROP_PROP_ANOMALY_TYPE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Resolves many-to-many relationship between PIMS_PROPERTY and PIMS_PROPERTY_ANOMALY_TYPE' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_ANOMALY_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYPE]  ( 
	[PROP_PROP_ROAD_TYPE_ID]        	bigint NOT NULL CONSTRAINT [PRPRRT_PROP_PROP_ROAD_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_ROAD_TYPE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_ROAD_TYPE_CODE]       	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRPRRT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRRT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPRRT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRRT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPRRT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPRRT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRRT_PK] PRIMARY KEY CLUSTERED([PROP_PROP_ROAD_TYPE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Resolves many-to-many relationship between PIMS_PROPERTY and PIMS_PROPERTY_ROAD_TYPE' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_ROAD_TYPE'
GO

CREATE TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYPE]  ( 
	[PROP_PROP_TENURE_TYPE_ID]      	bigint NOT NULL CONSTRAINT [PRPRTT_PROP_PROP_TENURE_TYPE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROP_PROP_TENURE_TYPE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[PROPERTY_TENURE_TYPE_CODE]     	nvarchar(20) NOT NULL CONSTRAINT [PRPRTT_PROPERTY_TENURE_TYPE_CODE_DEF]  DEFAULT ('UNKNOWN'),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRPRTT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPRTT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPRTT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPRTT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPRTT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPRTT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPRTT_PK] PRIMARY KEY CLUSTERED([PROP_PROP_TENURE_TYPE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Resolves many-to-many relationship between PIMS_PROPERTY and PIMS_PROPERTY_TENURE_TYPE' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROP_PROP_TENURE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_REGION_USER]  ( 
	[REGION_USER_ID]                	bigint NOT NULL CONSTRAINT [RGNUSR_REGION_USER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_REGION_USER_ID_SEQ]),
	[REGION_CODE]                   	smallint NOT NULL CONSTRAINT [RGNUSR_REGION_CODE_DEF]  DEFAULT ((4)),
	[USER_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [RGNUSR_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [RGNUSR_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RGNUSR_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RGNUSR_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RGNUSR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RGNUSR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RGNUSR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RGNUSR_PK] PRIMARY KEY CLUSTERED([REGION_USER_ID])
)
GO

CREATE TABLE [dbo].[PIMS_REGION_USER_HIST]  ( 
	[_REGION_USER_HIST_ID]          	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_REGION_USER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[REGION_USER_ID]                	bigint NOT NULL,
	[REGION_CODE]                   	smallint NOT NULL,
	[USER_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RGNUSR_H_PK] PRIMARY KEY CLUSTERED([_REGION_USER_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]  ( 
	[RESEARCH_ACTIVITY_INSTANCE_ID] 	bigint NOT NULL CONSTRAINT [RSCHAI_RESEARCH_ACTIVITY_INSTANCE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_ACTIVITY_INSTANCE_ID_SEQ]),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [RSCHAI_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [RSCHAI_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RSCHAI_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RSCHAI_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RSCHAI_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RSCHAI_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RSCHAI_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RSCHAI_PK] PRIMARY KEY CLUSTERED([RESEARCH_ACTIVITY_INSTANCE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the relationship has been disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_ACTIVITY_INSTANCE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Relates a research file to an activity instance.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_ACTIVITY_INSTANCE'
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST]  ( 
	[_RESEARCH_ACTIVITY_INSTANCE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_ACTIVITY_INSTANCE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                      	datetime NULL,
	[RESEARCH_ACTIVITY_INSTANCE_ID]      	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]               	bigint NOT NULL,
	[RESEARCH_FILE_ID]                   	bigint NOT NULL,
	[IS_DISABLED]                        	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]         	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]               	datetime NOT NULL,
	[APP_CREATE_USERID]                  	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]               	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                	datetime NOT NULL,
	[DB_CREATE_USERID]                   	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]              	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RSCHAI_H_PK] PRIMARY KEY CLUSTERED([_RESEARCH_ACTIVITY_INSTANCE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_HIST]  ( 
	[_RESEARCH_FILE_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[RESEARCH_FILE_STATUS_TYPE_CODE]	nvarchar(20) NOT NULL,
	[REQUEST_SOURCE_TYPE_CODE]      	nvarchar(20) NULL,
	[REQUESTOR_NAME]                	bigint NULL,
	[REQUESTOR_ORGANIZATION]        	bigint NULL,
	[NAME]                          	nvarchar(250) NOT NULL,
	[RFILE_NUMBER]                  	nvarchar(25) NOT NULL,
	[REQUEST_DATE]                  	date NULL,
	[REQUEST_SOURCE_DESCRIPTION]    	nvarchar(2000) NULL,
	[IS_EXPROPRIATION]              	bit NULL,
	[RESEARCH_COMPLETION_DATE]      	date NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RESRCH_H_PK] PRIMARY KEY CLUSTERED([_RESEARCH_FILE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_PURPOSE_TYPE]  ( 
	[RESEARCH_PURPOSE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NULL CONSTRAINT [RSHPRT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [RSHPRT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [RSHPRT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [RSHPRT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [RSHPRT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [RSHPRT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RSHPRT_PK] PRIMARY KEY CLUSTERED([RESEARCH_PURPOSE_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code indicating the purpose of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'RESEARCH_PURPOSE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the code indicating the purpose of the research request.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the purpose ot the research request' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_RESEARCH_PURPOSE_TYPE'
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE]  ( 
	[RESEARCH_FILE_PURPOSE_ID]      	bigint NOT NULL CONSTRAINT [RSFLPR_RESEARCH_FILE_PURPOSE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_PURPOSE_ID_SEQ]),
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[RESEARCH_PURPOSE_TYPE_CODE]    	nvarchar(20) NOT NULL CONSTRAINT [RSFLPR_RESEARCH_PURPOSE_TYPE_CODE_DEF]  DEFAULT ('GENENQ'),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [RSFLPR_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [RSFLPR_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [RSFLPR_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [RSFLPR_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [RSFLPR_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [RSFLPR_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [RSFLPR_PK] PRIMARY KEY CLUSTERED([RESEARCH_FILE_PURPOSE_ID])
)
GO

CREATE TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE_HIST]  ( 
	[_RESEARCH_FILE_PURPOSE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_RESEARCH_FILE_PURPOSE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[RESEARCH_FILE_PURPOSE_ID]      	bigint NOT NULL,
	[RESEARCH_FILE_ID]              	bigint NOT NULL,
	[RESEARCH_PURPOSE_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_RSFLPR_H_PK] PRIMARY KEY CLUSTERED([_RESEARCH_FILE_PURPOSE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ROLE_CLAIM]  ( 
	[ROLE_CLAIM_ID]                 	bigint NOT NULL CONSTRAINT [ROLCLM_ROLE_CLAIM_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_ROLE_CLAIM_ID_SEQ]),
	[ROLE_ID]                       	bigint NOT NULL,
	[CLAIM_ID]                      	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [ROLCLM_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [ROLCLM_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [ROLCLM_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [ROLCLM_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [ROLCLM_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [ROLCLM_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [ROLCLM_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [ROLCLM_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [ROLCLM_PK] PRIMARY KEY CLUSTERED([ROLE_CLAIM_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ROLE_CLAIM_HIST]  ( 
	[_ROLE_CLAIM_HIST_ID]           	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ROLE_CLAIM_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ROLE_CLAIM_ID]                 	bigint NOT NULL,
	[ROLE_ID]                       	bigint NOT NULL,
	[CLAIM_ID]                      	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ROLCLM_H_PK] PRIMARY KEY CLUSTERED([_ROLE_CLAIM_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_ROLE_HIST]  ( 
	[_ROLE_HIST_ID]                 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_ROLE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[ROLE_ID]                       	bigint NOT NULL,
	[ROLE_UID]                      	uniqueidentifier NOT NULL,
	[KEYCLOAK_GROUP_ID]             	uniqueidentifier NULL,
	[NAME]                          	nvarchar(100) NOT NULL,
	[DESCRIPTION]                   	nvarchar(500) NULL,
	[IS_PUBLIC]                     	bit NOT NULL,
	[IS_DISABLED]                   	bit NOT NULL,
	[SORT_ORDER]                    	int NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_ROLE_H_PK] PRIMARY KEY CLUSTERED([_ROLE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT_TYPE]  ( 
	[SECURITY_DEPOSIT_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [SECDPT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [SECDPT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [SECDPT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [SECDPT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [SECDPT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [SECDPT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SECDPT_PK] PRIMARY KEY CLUSTERED([SECURITY_DEPOSIT_TYPE_CODE])
)
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT]  ( 
	[SECURITY_DEPOSIT_ID]           	bigint NOT NULL CONSTRAINT [SECDEP_SECURITY_DEPOSIT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_ID_SEQ]),
	[LEASE_ID]                      	bigint NOT NULL,
	[SECURITY_DEPOSIT_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[OTHER_DEPOSIT_TYPE_DESC]       	nvarchar(200) NULL,
	[DESCRIPTION]                   	nvarchar(2000) NOT NULL,
	[AMOUNT_PAID]                   	money NOT NULL,
	[DEPOSIT_DATE]                  	date NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [SECDEP_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [SECDEP_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [SECDEP_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [SECDEP_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [SECDEP_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [SECDEP_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SECDEP_PK] PRIMARY KEY CLUSTERED([SECURITY_DEPOSIT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the deposit type If the SECURITY_DEPOSIT_TYPE_CODE has been chosen for this scurity deposit.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT', 
	@level2type = N'Column', @level2name = N'OTHER_DEPOSIT_TYPE_DESC'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descirption of this security deposit' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Amount paid of this security deposit' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT', 
	@level2type = N'Column', @level2name = N'AMOUNT_PAID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of this security deposit' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT', 
	@level2type = N'Column', @level2name = N'DEPOSIT_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of a security deposit associated with a lease.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT'
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HIST]  ( 
	[_SECURITY_DEPOSIT_HIST_ID]     	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[SECURITY_DEPOSIT_ID]           	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[SECURITY_DEPOSIT_TYPE_CODE]    	nvarchar(20) NOT NULL,
	[OTHER_DEPOSIT_TYPE_DESC]       	nvarchar(200) NULL,
	[DESCRIPTION]                   	nvarchar(2000) NOT NULL,
	[AMOUNT_PAID]                   	money NOT NULL,
	[DEPOSIT_DATE]                  	date NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_SECDEP_H_PK] PRIMARY KEY CLUSTERED([_SECURITY_DEPOSIT_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]  ( 
	[SECURITY_DEPOSIT_HOLDER_ID]    	bigint NOT NULL CONSTRAINT [SCDPHL_SECURITY_DEPOSIT_HOLDER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_HOLDER_ID_SEQ]),
	[SECURITY_DEPOSIT_ID]           	bigint NOT NULL,
	[PERSON_ID]                     	bigint NULL,
	[ORGANIZATION_ID]               	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [SCDPHL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [SCDPHL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [SCDPHL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [SCDPHL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [SCDPHL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [SCDPHL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SCDPHL_PK] PRIMARY KEY CLUSTERED([SECURITY_DEPOSIT_HOLDER_ID])
)
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER_HIST]  ( 
	[_SECURITY_DEPOSIT_HOLDER_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_HOLDER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]             	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                   	datetime NULL,
	[SECURITY_DEPOSIT_HOLDER_ID]      	bigint NOT NULL,
	[SECURITY_DEPOSIT_ID]             	bigint NOT NULL,
	[PERSON_ID]                       	bigint NULL,
	[ORGANIZATION_ID]                 	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_SCDPHL_H_PK] PRIMARY KEY CLUSTERED([_SECURITY_DEPOSIT_HOLDER_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]  ( 
	[SECURITY_DEPOSIT_RETURN_ID]    	bigint NOT NULL CONSTRAINT [SDRTRN_SECURITY_DEPOSIT_RETURN_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_RETURN_ID_SEQ]),
	[SECURITY_DEPOSIT_ID]           	bigint NOT NULL,
	[TERMINATION_DATE]              	datetime NOT NULL,
	[CLAIMS_AGAINST]                	money NULL,
	[RETURN_AMOUNT]                 	money NOT NULL,
	[RETURN_DATE]                   	datetime NOT NULL,
	[INTEREST_PAID]                 	money NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [SDRTRN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [SDRTRN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [SDRTRN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [SDRTRN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [SDRTRN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [SDRTRN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SDRTRN_PK] PRIMARY KEY CLUSTERED([SECURITY_DEPOSIT_RETURN_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date the lease/license was terminated or surrendered' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'TERMINATION_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Amount of claims against the deposit' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'CLAIMS_AGAINST'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Amount returned minus claims' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'RETURN_AMOUNT'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Date of deposit return' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'RETURN_DATE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Interest paid on the deposit to the deposit holder' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN', 
	@level2type = N'Column', @level2name = N'INTEREST_PAID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Describes the details of the return of a security deposit.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SECURITY_DEPOSIT_RETURN'
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HIST]  ( 
	[_SECURITY_DEPOSIT_RETURN_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_RETURN_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]             	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                   	datetime NULL,
	[SECURITY_DEPOSIT_RETURN_ID]      	bigint NOT NULL,
	[SECURITY_DEPOSIT_ID]             	bigint NOT NULL,
	[TERMINATION_DATE]                	datetime NOT NULL,
	[CLAIMS_AGAINST]                  	money NULL,
	[RETURN_AMOUNT]                   	money NOT NULL,
	[RETURN_DATE]                     	datetime NOT NULL,
	[INTEREST_PAID]                   	money NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_SDRTRN_H_PK] PRIMARY KEY CLUSTERED([_SECURITY_DEPOSIT_RETURN_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]  ( 
	[SECURITY_DEPOSIT_RETURN_HOLDER_ID]	bigint NOT NULL CONSTRAINT [SCDPRH_SECURITY_DEPOSIT_RETURN_HOLDER_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_ID_SEQ]),
	[SECURITY_DEPOSIT_RETURN_ID]       	bigint NOT NULL,
	[PERSON_ID]                        	bigint NULL,
	[ORGANIZATION_ID]                  	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL CONSTRAINT [SCDPRH_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [SCDPRH_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]             	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]        	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]        	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [SCDPRH_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USER_DIRECTORY]   	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [SCDPRH_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [SCDPRH_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [SCDPRH_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SCDPRH_PK] PRIMARY KEY CLUSTERED([SECURITY_DEPOSIT_RETURN_HOLDER_ID])
)
GO

CREATE TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST]  ( 
	[_SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]                    	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                          	datetime NULL,
	[SECURITY_DEPOSIT_RETURN_HOLDER_ID]      	bigint NOT NULL,
	[SECURITY_DEPOSIT_RETURN_ID]             	bigint NOT NULL,
	[PERSON_ID]                              	bigint NULL,
	[ORGANIZATION_ID]                        	bigint NULL,
	[CONCURRENCY_CONTROL_NUMBER]             	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]                   	datetime NOT NULL,
	[APP_CREATE_USERID]                      	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]                   	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]              	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]              	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USERID]                 	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]              	datetime NOT NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]         	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]                    	datetime NOT NULL,
	[DB_CREATE_USERID]                       	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]               	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]                  	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_SCDPRH_H_PK] PRIMARY KEY CLUSTERED([_SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_STATIC_VARIABLE]  ( 
	[STATIC_VARIABLE_NAME]          	nvarchar(100) NOT NULL,
	[STATIC_VARIABLE_VALUE]         	nvarchar(100) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [STAVBL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [STAVBL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [STAVBL_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [STAVBL_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [STAVBL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [STAVBL_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [STAVBL_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [STAVBL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [STAVBL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [STAVBL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [STAVBL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [STAVBL_PK] PRIMARY KEY CLUSTERED([STATIC_VARIABLE_NAME])
)
GO

CREATE TABLE [dbo].[PIMS_STATIC_VARIABLE_HIST]  ( 
	[_STATIC_VARIABLE_HIST_ID]      	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_STATIC_VARIABLE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[STATIC_VARIABLE_NAME]          	nvarchar(100) NOT NULL,
	[STATIC_VARIABLE_VALUE]         	nvarchar(100) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_STAVBL_H_PK] PRIMARY KEY CLUSTERED([_STATIC_VARIABLE_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_SURVEY_PLAN_TYPE]  ( 
	[SURVEY_PLAN_TYPE_CODE]     	nvarchar(20) NOT NULL,
	[DESCRIPTION]               	nvarchar(200) NOT NULL,
	[IS_DISABLED]               	bit NOT NULL CONSTRAINT [SRVPLT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]             	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [SRVPLT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [SRVPLT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [SRVPLT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [SRVPLT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [SRVPLT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [SRVPLT_PK] PRIMARY KEY CLUSTERED([SURVEY_PLAN_TYPE_CODE])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for the survey plan type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURVEY_PLAN_TYPE', 
	@level2type = N'Column', @level2name = N'SURVEY_PLAN_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the survey plan type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURVEY_PLAN_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code value is inactive.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURVEY_PLAN_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Designates a preferred presentation order of the code descriptions.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURVEY_PLAN_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Codified values for the survey plan type.  This is an unassociated table that is used in the UI to populate JSON attributes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_SURVEY_PLAN_TYPE'
GO

CREATE TABLE [dbo].[PIMS_TENANT]  ( 
	[TENANT_ID]                 	bigint NOT NULL CONSTRAINT [TENNTX_TENANT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_TENANT_ID_SEQ]),
	[CODE]                      	nvarchar(6) NOT NULL,
	[NAME]                      	nvarchar(150) NOT NULL,
	[DESCRIPTION]               	nvarchar(500) NULL,
	[SETTINGS]                  	nvarchar(2000) NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]	bigint NOT NULL CONSTRAINT [TENNTX_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]       	datetime NOT NULL CONSTRAINT [TENNTX_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]          	nvarchar(30) NOT NULL CONSTRAINT [TENNTX_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]  	datetime NOT NULL CONSTRAINT [TENNTX_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]     	nvarchar(30) NOT NULL CONSTRAINT [TENNTX_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [TENNTX_PK] PRIMARY KEY CLUSTERED([TENANT_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Auto-sequenced unique key value' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT', 
	@level2type = N'Column', @level2name = N'TENANT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value for entry' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT', 
	@level2type = N'Column', @level2name = N'CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Name of the entry for display purposes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT', 
	@level2type = N'Column', @level2name = N'NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the entry for display purposes' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Serialized JSON value for the configuration' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT', 
	@level2type = N'Column', @level2name = N'SETTINGS'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Deprecated table to support legacy CITZ-PIMS application code.  This table will be removed once the code dependency is removed from the system.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TENANT'
GO

CREATE TABLE [dbo].[PIMS_USER_HIST]  ( 
	[_USER_HIST_ID]                 	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_USER_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[USER_ID]                       	bigint NOT NULL,
	[PERSON_ID]                     	bigint NOT NULL,
	[BUSINESS_IDENTIFIER_VALUE]     	nvarchar(30) NOT NULL,
	[GUID_IDENTIFIER_VALUE]         	uniqueidentifier NULL,
	[POSITION]                      	nvarchar(100) NULL,
	[NOTE]                          	nvarchar(1000) NULL,
	[LAST_LOGIN]                    	datetime NULL,
	[APPROVED_BY_ID]                	nvarchar(30) NULL,
	[ISSUE_DATE]                    	datetime NOT NULL,
	[EXPIRY_DATE]                   	datetime NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_USER_H_PK] PRIMARY KEY CLUSTERED([_USER_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_USER_ORGANIZATION]  ( 
	[USER_ORGANIZATION_ID]          	bigint NOT NULL CONSTRAINT [USRORG_USER_ORGANIZATION_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_USER_ORGANIZATION_ID_SEQ]),
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[USER_ID]                       	bigint NOT NULL,
	[ROLE_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [USRORG_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [USRORG_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [USRORG_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [USRORG_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [USRORG_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [USRORG_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [USRORG_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [USRORG_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [USRORG_PK] PRIMARY KEY CLUSTERED([USER_ORGANIZATION_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if this association is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER_ORGANIZATION', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a user with an organization.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER_ORGANIZATION'
GO

CREATE TABLE [dbo].[PIMS_USER_ORGANIZATION_HIST]  ( 
	[_USER_ORGANIZATION_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_USER_ORGANIZATION_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[USER_ORGANIZATION_ID]          	bigint NOT NULL,
	[ORGANIZATION_ID]               	bigint NOT NULL,
	[USER_ID]                       	bigint NOT NULL,
	[ROLE_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_USRORG_H_PK] PRIMARY KEY CLUSTERED([_USER_ORGANIZATION_HIST_ID])
)
GO

CREATE TABLE [dbo].[PIMS_USER_ROLE]  ( 
	[USER_ROLE_ID]                  	bigint NOT NULL CONSTRAINT [USERRL_USER_ROLE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_USER_ROLE_ID_SEQ]),
	[USER_ID]                       	bigint NOT NULL,
	[ROLE_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL CONSTRAINT [USERRL_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [USERRL_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [USERRL_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [USERRL_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [USERRL_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [USERRL_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [USERRL_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [USERRL_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [USERRL_PK] PRIMARY KEY CLUSTERED([USER_ROLE_ID])
)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if this association is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER_ROLE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associates a user with an role.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_USER_ROLE'
GO

CREATE TABLE [dbo].[PIMS_USER_ROLE_HIST]  ( 
	[_USER_ROLE_HIST_ID]            	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_USER_ROLE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[USER_ROLE_ID]                  	bigint NOT NULL,
	[USER_ID]                       	bigint NOT NULL,
	[ROLE_ID]                       	bigint NOT NULL,
	[IS_DISABLED]                   	bit NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_USERRL_H_PK] PRIMARY KEY CLUSTERED([_USER_ROLE_HIST_ID])
)
GO

CREATE TABLE [dbo].[__EFMigrationsHistory]  ( 
	[MigrationId]   	nvarchar(150) NOT NULL,
	[ProductVersion]	nvarchar(32) NULL,
	CONSTRAINT [MIGHIS_PK] PRIMARY KEY CLUSTERED([MigrationId])
)
GO

CREATE VIEW [dbo].[PIMS_PERSON_CONTACT_VW] AS
SELECT DISTINCT PERSON_ID
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'FAX'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS FAX
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'PERSMOBIL'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS PERSONAL_MOBILE
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'PERSPHONE'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS PERSONAL_PHONE
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'WORKMOBIL'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS WORK_MOBILE
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'WORKPHONE'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS WORK_PHONE
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'WORKEMAIL'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS WORK_EMAIL
     , (SELECT   TOP 1 CONTACT_METHOD_VALUE
        FROM     PIMS_CONTACT_METHOD
        WHERE    CONTACT_METHOD_TYPE_CODE = 'PERSEMAIL'
             AND PERSON_ID = TMP.PERSON_ID
        ORDER BY IS_PREFERRED_METHOD      DESC
               , DB_LAST_UPDATE_TIMESTAMP DESC) AS PERSONAL_EMAIL
FROM   PIMS_CONTACT_METHOD TMP
WHERE  ORGANIZATION_ID IS NULL
GO

CREATE VIEW [dbo].[PIMS_CONTACT_MGR_VW] AS
  SELECT CONCAT('P', PER.PERSON_ID)                                                                              AS ID
       , PER.PERSON_ID
       , ORG.ORGANIZATION_ID                                                                                     AS ORGANIZATION_ID                
       , PER.IS_DISABLED
       , TRIM(CONCAT_WS(' ', NULLIF(PER.FIRST_NAME, ''), NULLIF(PER.MIDDLE_NAMES, ''), NULLIF(PER.SURNAME, ''))) AS SUMMARY
       , PER.SURNAME
       , PER.FIRST_NAME
       , PER.MIDDLE_NAMES
       , ORG.ORGANIZATION_NAME                                                                                   AS ORGANIZATION_NAME
       , PAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1                                                                                    AS MAILING_ADDRESS
       , ADR.MUNICIPALITY_NAME
       , PRV.PROVINCE_STATE_CODE                                                                                 AS PROVINCE_STATE
       , COALESCE(PVW.WORK_EMAIL, PVW.PERSONAL_EMAIL)                                                            AS EMAIL_ADDRESS
  FROM   PIMS_PERSON              PER                                                         LEFT JOIN
         PIMS_PERSON_ADDRESS      PAD ON PAD.PERSON_ID                = PER.PERSON_ID   
                                     AND PAD.ADDRESS_USAGE_TYPE_CODE  = 'MAILING'             LEFT JOIN
         PIMS_ADDRESS             ADR ON ADR.ADDRESS_ID               = PAD.ADDRESS_ID        LEFT JOIN 
         PIMS_PROVINCE_STATE      PRV ON PRV.PROVINCE_STATE_ID        = ADR.PROVINCE_STATE_ID LEFT JOIN
         PIMS_PERSON_CONTACT_VW   PVW ON PVW.PERSON_ID                = PER.PERSON_ID         LEFT JOIN
         (SELECT   PERSON_ID
                 , MAX(ORGANIZATION_ID) AS ORGANIZATION_ID 
          FROM     PIMS_PERSON_ORGANIZATION
          GROUP BY PERSON_ID)     POR ON POR.PERSON_ID                = PER.PERSON_ID         LEFT JOIN
         PIMS_ORGANIZATION        ORG ON ORG.ORGANIZATION_ID          = POR.ORGANIZATION_ID 
  UNION
  SELECT CONCAT('O', ORG.ORGANIZATION_ID)
       , NULL
       , ORG.ORGANIZATION_ID
       , ORG.IS_DISABLED
       , ORG.ORGANIZATION_NAME
       , NULL
       , NULL                            
       , NULL                                                        
       , ORG.ORGANIZATION_NAME
       , OAD.ADDRESS_ID
       , ADR.STREET_ADDRESS_1
       , ADR.MUNICIPALITY_NAME                     
       , PRV.PROVINCE_STATE_CODE
       , CON.CONTACT_METHOD_VALUE 
  FROM   PIMS_ORGANIZATION         ORG                                                         LEFT JOIN 
         PIMS_ORGANIZATION_ADDRESS OAD ON OAD.ORGANIZATION_ID          = ORG.ORGANIZATION_ID
                                      AND OAD.ADDRESS_USAGE_TYPE_CODE  = 'MAILING'             LEFT JOIN
         PIMS_ADDRESS              ADR ON ADR.ADDRESS_ID               = OAD.ADDRESS_ID        LEFT JOIN 
         PIMS_PROVINCE_STATE       PRV ON PRV.PROVINCE_STATE_ID        = ADR.PROVINCE_STATE_ID LEFT JOIN
         PIMS_CONTACT_METHOD       CON ON CON.ORGANIZATION_ID          = ORG.ORGANIZATION_ID
                                      AND CON.CONTACT_METHOD_TYPE_CODE = 'WORKEMAIL'
GO

CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , PROP.PROPERTY_CLASSIFICATION_TYPE_CODE  
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TEN.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE  TEN INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYPE TTY ON TTY.PROPERTY_TENURE_TYPE_CODE = TEN.PROPERTY_TENURE_TYPE_CODE
                                                     AND TTY.PROPERTY_ID = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.NAME
     , PROP.DESCRIPTION
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.ENCUMBRANCE_REASON
     , PROP.IS_SENSITIVE
     , PROP.IS_OWNED
     , PROP.IS_PROPERTY_OF_INTEREST
     , PROP.IS_VISIBLE_TO_OTHER_AGENCIES
     , PROP.ZONING,ZONING_POTENTIAL
FROM   PIMS_PROPERTY       PROP                                                    LEFT OUTER JOIN
       PIMS_ADDRESS        ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY        CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
WHERE  PROP.BOUNDARY IS NOT NULL
GO

CREATE VIEW [dbo].[PIMS_PROPERTY_LOCATION_VW] AS
SELECT PROP.PROPERTY_ID              
     , PROP.PID
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN                   
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , PROP.PROPERTY_CLASSIFICATION_TYPE_CODE  
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TEN.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE  TEN INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYPE TTY ON TTY.PROPERTY_TENURE_TYPE_CODE = TEN.PROPERTY_TENURE_TYPE_CODE
                                                     AND TTY.PROPERTY_ID = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE      
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.NAME
     , PROP.DESCRIPTION
     , PROP.ADDRESS_ID                 
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.LOCATION AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.ENCUMBRANCE_REASON                                      
     , PROP.IS_SENSITIVE
     , PROP.IS_OWNED
     , PROP.IS_PROPERTY_OF_INTEREST
     , PROP.IS_VISIBLE_TO_OTHER_AGENCIES
     , PROP.ZONING,ZONING_POTENTIAL
FROM   PIMS_PROPERTY       PROP                                                    LEFT OUTER JOIN
       PIMS_ADDRESS        ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY        CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
WHERE  PROP.LOCATION IS NOT NULL
GO

-- ............................................................................................


-- --------------------------------------------------------------------------------------------
-- Create procedure pims_error_handling 
-- --------------------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pims_error_handling] AS 
  begin
    DECLARE @errmsg   nvarchar(2048),
      @severity tinyint,
      @state    tinyint,
      @errno    int,
      @proc     sysname,
      @lineno   int
           
    SELECT @errmsg = error_message(), @severity = error_severity(),
      @state  = error_state(), @errno = error_number(),
      @proc   = error_procedure(), @lineno = error_line()

    IF @errmsg NOT LIKE '***%'
      BEGIN
        SELECT @errmsg = '*** ' + coalesce(quotename(@proc), '<dynamic SQL>') + 
          ', Line ' + ltrim(str(@lineno)) + '. Errno ' + 
          ltrim(str(@errno)) + ': ' + @errmsg
      END

    RAISERROR('%s', @severity, @state, @errmsg)
  end
GO

-- --------------------------------------------------------------------------------------------
-- Create function pims_ColumnExists 
-- --------------------------------------------------------------------------------------------
CREATE FUNCTION [dbo].[pims_ColumnExists](@TableName varchar(100), @ColumnName varchar(100))
RETURNS nvarchar(1) 
AS
BEGIN
  DECLARE @Result nvarchar(1);
  
  IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = @TableName AND COLUMN_NAME = @ColumnName)
    SET @Result = 'Y'
  ELSE
    SET @Result = 'N'

  IF @TableName LIKE '%HIST'
    SET @Result = 'N'
 
 RETURN @Result;
END
GO

CREATE NONCLUSTERED INDEX [ACQAIN_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]([ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [ACQAIN_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
GO

CREATE NONCLUSTERED INDEX [ACQNFL_ACQUISITION_FILE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQNFL_ACQUISITION_FUNDING_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FUNDING_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQNFL_ACQUISITION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQNFL_ACQ_PHYS_FILE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([ACQ_PHYS_FILE_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQNFL_REGION_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQOWN_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER]([ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [ACQOWN_ADDRESS_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER]([ADDRESS_ID])
GO

CREATE NONCLUSTERED INDEX [ACQOWN_LAST_NAME_OR_CORP_NAME_1_IDX]
	ON [dbo].[PIMS_ACQUISITION_OWNER]([LAST_NAME_OR_CORP_NAME_1])
GO

CREATE NONCLUSTERED INDEX [ACQPER_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_PERSON]([ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [ACQPER_ACQ_FL_PERSON_PROFILE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_PERSON]([ACQ_FL_PERSON_PROFILE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACQPER_PERSON_ID_IDX]
	ON [dbo].[PIMS_ACQUISITION_FILE_PERSON]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [ACRQOR_ACCESS_REQUEST_ID_IDX]
	ON [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION]([ACCESS_REQUEST_ID])
GO

CREATE NONCLUSTERED INDEX [ACRQOR_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [ACRQST_ACCESS_REQUEST_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACCESS_REQUEST]([ACCESS_REQUEST_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACRQST_REGION_CODE_IDX]
	ON [dbo].[PIMS_ACCESS_REQUEST]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [ACRQST_ROLE_ID_IDX]
	ON [dbo].[PIMS_ACCESS_REQUEST]([ROLE_ID])
GO

CREATE NONCLUSTERED INDEX [ACRQST_USER_ID_IDX]
	ON [dbo].[PIMS_ACCESS_REQUEST]([USER_ID])
GO

CREATE NONCLUSTERED INDEX [ACTDOC_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]([ACTIVITY_INSTANCE_ID])
GO

CREATE NONCLUSTERED INDEX [ACTDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]([DOCUMENT_ID])
GO

CREATE NONCLUSTERED INDEX [ACTINN_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]([ACTIVITY_INSTANCE_ID])
GO

CREATE NONCLUSTERED INDEX [ACTINN_NOTE_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]([NOTE_ID])
GO

CREATE NONCLUSTERED INDEX [ACTINS_ACTIVITY_INSTANCE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ACTINS_ACTIVITY_TEMPLATE_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_TEMPLATE_ID])
GO

CREATE NONCLUSTERED INDEX [ACTMDO_ACTIVITY_TEMPLATE_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]([ACTIVITY_TEMPLATE_ID])
GO

CREATE NONCLUSTERED INDEX [ACTMDO_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]([DOCUMENT_ID])
GO

CREATE NONCLUSTERED INDEX [ACTTMP_ACTIVITY_TEMPLATE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ACTIVITY_TEMPLATE]([ACTIVITY_TEMPLATE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ADDRSS_COUNTRY_ID_IDX]
	ON [dbo].[PIMS_ADDRESS]([COUNTRY_ID])
GO

CREATE NONCLUSTERED INDEX [ADDRSS_DISTRICT_CODE_IDX]
	ON [dbo].[PIMS_ADDRESS]([DISTRICT_CODE])
GO

CREATE NONCLUSTERED INDEX [ADDRSS_PROVINCE_STATE_ID_IDX]
	ON [dbo].[PIMS_ADDRESS]([PROVINCE_STATE_ID])
GO

CREATE NONCLUSTERED INDEX [ADDRSS_REGION_CODE_IDX]
	ON [dbo].[PIMS_ADDRESS]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [AIPAFL_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]([ACTIVITY_INSTANCE_ID])
GO

CREATE NONCLUSTERED INDEX [AIPAFL_PROPERTY_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]([PROPERTY_ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [AIPRFL_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]([ACTIVITY_INSTANCE_ID])
GO

CREATE NONCLUSTERED INDEX [AIPRFL_PROPERTY_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]([PROPERTY_RESEARCH_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [BCAAMD_AREA_CODE_IDX]
	ON [dbo].[BCA_AREA_AMENDMENT]([AREA_CODE])
GO

CREATE NONCLUSTERED INDEX [BCADEL_AREA_CODE_IDX]
	ON [dbo].[BCA_AREA_DELETE]([AREA_CODE])
GO

CREATE NONCLUSTERED INDEX [BCADFN_MINOR_TAXING_ID_IDX]
	ON [dbo].[BCA_DEFINED]([MINOR_TAXING_ID])
GO

CREATE NONCLUSTERED INDEX [BCAFAM_ROLL_NUMBER_IDX]
	ON [dbo].[BCA_FOLIO_AMENDMENT]([ROLL_NUMBER])
GO

CREATE NONCLUSTERED INDEX [BCAFDE_ROLL_NUMBER_IDX]
	ON [dbo].[BCA_FOLIO_DESCRIPTION]([ROLL_NUMBER])
GO

CREATE NONCLUSTERED INDEX [BCAFLD_ROLL_NUMBER_IDX]
	ON [dbo].[BCA_FOLIO_LEGAL_DESCRIPTION]([ROLL_NUMBER])
GO

CREATE NONCLUSTERED INDEX [BCAFOR_JURISDICTION_CODE_IDX]
	ON [dbo].[BCA_FOLIO_RECORD]([JURISDICTION_CODE])
GO

CREATE NONCLUSTERED INDEX [BCAFSA_ROLL_NUMBER_IDX]
	ON [dbo].[BCA_FOLIO_SALES]([ROLL_NUMBER])
GO

CREATE NONCLUSTERED INDEX [BCAGNV_AREA_CODE_IDX]
	ON [dbo].[BCA_AREA_GENERAL_VALUE]([AREA_CODE])
GO

CREATE NONCLUSTERED INDEX [BCAJUR_AREA_CODE_IDX]
	ON [dbo].[BCA_JURISDICTION]([AREA_CODE])
GO

CREATE NONCLUSTERED INDEX [BCAOWG_ROLL_NUMBER_IDX]
	ON [dbo].[BCA_OWNERSHIP_GROUP]([ROLL_NUMBER])
GO

CREATE NONCLUSTERED INDEX [BCAOWN_OWNERSHIP_GROUP_ID_IDX]
	ON [dbo].[BCA_OWNER]([OWNERSHIP_GROUP_ID])
GO

CREATE NONCLUSTERED INDEX [BCASAR_DATA_ADVICE_ID_IDX]
	ON [dbo].[BCA_ASSESSMENT_AREA]([DATA_ADVICE_ID])
GO

CREATE NONCLUSTERED INDEX [BCASCV_AREA_CODE_IDX]
	ON [dbo].[BCA_AREA_SCHOOL_VALUE]([AREA_CODE])
GO

CREATE NONCLUSTERED INDEX [BCATRV_AREA_CODE_IDX]
	ON [dbo].[BCA_AREA_BCTRANSIT_VALUE]([AREA_CODE])
GO

CREATE NONCLUSTERED INDEX [BCAVAL_ROLL_NUMBER_IDX]
	ON [dbo].[BCA_FOLIO_VALUATION]([ROLL_NUMBER])
GO

CREATE NONCLUSTERED INDEX [BCDAMD_DATA_ADVICE_ID_IDX]
	ON [dbo].[BCA_DATA_ADVICE_AMENDMENT]([DATA_ADVICE_ID])
GO

CREATE NONCLUSTERED INDEX [BCDDEL_DATA_ADVICE_ID_IDX]
	ON [dbo].[BCA_DATA_ADVICE_DELETE]([DATA_ADVICE_ID])
GO

CREATE NONCLUSTERED INDEX [BCDGNV_DATA_ADVICE_ID_IDX]
	ON [dbo].[BCA_DATA_ADVICE_GENERAL_VALUE]([DATA_ADVICE_ID])
GO

CREATE NONCLUSTERED INDEX [BCDSCV_DATA_ADVICE_ID_IDX]
	ON [dbo].[BCA_DATA_ADVICE_SCHOOL_VALUE]([DATA_ADVICE_ID])
GO

CREATE NONCLUSTERED INDEX [BCDTRV_DATA_ADVICE_ID_IDX]
	ON [dbo].[BCA_DATA_ADVICE_BCTRANSIT_VALUE]([DATA_ADVICE_ID])
GO

CREATE NONCLUSTERED INDEX [BCELCT_MINOR_TAXING_ID_IDX]
	ON [dbo].[BCA_ELECTORAL_AREA]([MINOR_TAXING_ID])
GO

CREATE NONCLUSTERED INDEX [BCFADR_ROLL_NUMBER_IDX]
	ON [dbo].[BCA_FOLIO_ADDRESS]([ROLL_NUMBER])
GO

CREATE NONCLUSTERED INDEX [BCFARM_ROLL_NUMBER_IDX]
	ON [dbo].[BCA_FOLIO_FARM]([ROLL_NUMBER])
GO

CREATE NONCLUSTERED INDEX [BCFGNV_ROLL_NUMBER_IDX]
	ON [dbo].[BCA_FOLIO_GENERAL_VALUE]([ROLL_NUMBER])
GO

CREATE NONCLUSTERED INDEX [BCFSCV_ROLL_NUMBER_IDX]
	ON [dbo].[BCA_FOLIO_SCHOOL_VALUE]([ROLL_NUMBER])
GO

CREATE NONCLUSTERED INDEX [BCFTRV_ROLL_NUMBER_IDX]
	ON [dbo].[BCA_FOLIO_BCTRANSIT_VALUE]([ROLL_NUMBER])
GO

CREATE NONCLUSTERED INDEX [BCGSVC_MINOR_TAXING_ID_IDX]
	ON [dbo].[BCA_GENERAL_SERVICE]([MINOR_TAXING_ID])
GO

CREATE NONCLUSTERED INDEX [BCIMPD_MINOR_TAXING_ID_IDX]
	ON [dbo].[BCA_IMPROVEMENT_DISTRICT]([MINOR_TAXING_ID])
GO

CREATE NONCLUSTERED INDEX [BCISLT_MINOR_TAXING_ID_IDX]
	ON [dbo].[BCA_ISLANDS_TRUST]([MINOR_TAXING_ID])
GO

CREATE NONCLUSTERED INDEX [BCJAMD_JURISDICTION_CODE_IDX]
	ON [dbo].[BCA_JURISDICTION_AMENDMENT]([JURISDICTION_CODE])
GO

CREATE NONCLUSTERED INDEX [BCJDEL_JURISDICTION_CODE_IDX]
	ON [dbo].[BCA_JURISDICTION_DELETE]([JURISDICTION_CODE])
GO

CREATE NONCLUSTERED INDEX [BCJGNV_JURISDICTION_CODE_IDX]
	ON [dbo].[BCA_JURISDICTION_GENERAL_VALUE]([JURISDICTION_CODE])
GO

CREATE NONCLUSTERED INDEX [BCJSCV_JURISDICTION_CODE_IDX]
	ON [dbo].[BCA_JURISDICTION_SCHOOL_VALUE]([JURISDICTION_CODE])
GO

CREATE NONCLUSTERED INDEX [BCJTRV_JURISDICTION_CODE_IDX]
	ON [dbo].[BCA_JURISDICTION_BCTRANSIT_VALUE]([JURISDICTION_CODE])
GO

CREATE NONCLUSTERED INDEX [BCLCHR_ROLL_NUMBER_IDX]
	ON [dbo].[BCA_FOLIO_LAND_CHARACTERISTIC]([ROLL_NUMBER])
GO

CREATE NONCLUSTERED INDEX [BCLCLA_MINOR_TAXING_ID_IDX]
	ON [dbo].[BCA_LOCAL_AREA]([MINOR_TAXING_ID])
GO

CREATE NONCLUSTERED INDEX [BCMANH_ROLL_NUMBER_IDX]
	ON [dbo].[BCA_FOLIO_MANUFACTURED_HOME]([ROLL_NUMBER])
GO

CREATE NONCLUSTERED INDEX [BCMFOR_ROLL_NUMBER_IDX]
	ON [dbo].[BCA_FOLIO_MANAGED_FOREST]([ROLL_NUMBER])
GO

CREATE NONCLUSTERED INDEX [BCMNTX_ROLL_NUMBER_IDX]
	ON [dbo].[BCA_MINOR_TAXING]([ROLL_NUMBER])
GO

CREATE NONCLUSTERED INDEX [BCOILG_ROLL_NUMBER_IDX]
	ON [dbo].[BCA_FOLIO_OIL_AND_GAS]([ROLL_NUMBER])
GO

CREATE NONCLUSTERED INDEX [BCSPMU_MINOR_TAXING_ID_IDX]
	ON [dbo].[BCA_SPECIFIED_MUNICIPAL]([MINOR_TAXING_ID])
GO

CREATE NONCLUSTERED INDEX [BCSPRG_MINOR_TAXING_ID_IDX]
	ON [dbo].[BCA_SPECIFIED_REGIONAL]([MINOR_TAXING_ID])
GO

CREATE NONCLUSTERED INDEX [BCSVCA_MINOR_TAXING_ID_IDX]
	ON [dbo].[BCA_SERVICE_AREA]([MINOR_TAXING_ID])
GO

CREATE NONCLUSTERED INDEX [CLMTYP_CLAIM_UID_IDX]
	ON [dbo].[PIMS_CLAIM]([CLAIM_UID])
GO

CREATE NONCLUSTERED INDEX [CLMTYP_KEYCLOAK_ROLE_ID_IDX]
	ON [dbo].[PIMS_CLAIM]([KEYCLOAK_ROLE_ID])
GO

CREATE NONCLUSTERED INDEX [CNTMTH_CONTACT_METHOD_TYPE_CODE_IDX]
	ON [dbo].[PIMS_CONTACT_METHOD]([CONTACT_METHOD_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [CNTMTH_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_CONTACT_METHOD]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [CNTMTH_PERSON_ID_IDX]
	ON [dbo].[PIMS_CONTACT_METHOD]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [DOCMNT_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
GO

CREATE NONCLUSTERED INDEX [DOCMNT_DOCUMENT_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_DOCUMENT]([DOCUMENT_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [DSTRCT_REGION_CODE_IDX]
	ON [dbo].[PIMS_DISTRICT]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [INSRNC_INSURANCE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_INSURANCE]([INSURANCE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [INSRNC_LEASE_ID_IDX]
	ON [dbo].[PIMS_INSURANCE]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [LEASE_LEASE_CATEGORY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_CATEGORY_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_LEASE_INITIATOR_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_INITIATOR_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_LEASE_LICENSE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_LICENSE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_LEASE_PAY_RVBL_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_PAY_RVBL_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_LEASE_PROGRAM_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_PROGRAM_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_LEASE_PURPOSE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_PURPOSE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_LEASE_RESPONSIBILITY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_RESPONSIBILITY_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_LEASE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([LEASE_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_L_FILE_NO_IDX]
	ON [dbo].[PIMS_LEASE]([L_FILE_NO])
GO

CREATE NONCLUSTERED INDEX [LEASE_PS_FILE_NO_IDX]
	ON [dbo].[PIMS_LEASE]([PS_FILE_NO])
GO

CREATE NONCLUSTERED INDEX [LEASE_REGION_CODE_IDX]
	ON [dbo].[PIMS_LEASE]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [LEASE_TFA_FILE_NO_IDX]
	ON [dbo].[PIMS_LEASE]([TFA_FILE_NO])
GO

CREATE NONCLUSTERED INDEX [LEASE_TFA_FILE_NUMBER_IDX]
	ON [dbo].[PIMS_LEASE]([TFA_FILE_NUMBER])
GO

CREATE NONCLUSTERED INDEX [LSACIN_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
GO

CREATE NONCLUSTERED INDEX [LSACIN_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [LSPYMT_LEASE_PAYMENT_METHOD_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_PAYMENT]([LEASE_PAYMENT_METHOD_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LSPYMT_LEASE_TERM_ID_IDX]
	ON [dbo].[PIMS_LEASE_PAYMENT]([LEASE_TERM_ID])
GO

CREATE NONCLUSTERED INDEX [LSTERM_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_TERM]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [LSTERM_LEASE_PMT_FREQ_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_TERM]([LEASE_PMT_FREQ_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [LSTERM_LEASE_TERM_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_TERM]([LEASE_TERM_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ORGADD_ADDRESS_ID_IDX]
	ON [dbo].[PIMS_ORGANIZATION_ADDRESS]([ADDRESS_ID])
GO

CREATE NONCLUSTERED INDEX [ORGADD_ADDRESS_USAGE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ORGANIZATION_ADDRESS]([ADDRESS_USAGE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ORGADD_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_ORGANIZATION_ADDRESS]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [ORG_DISTRICT_CODE_IDX]
	ON [dbo].[PIMS_ORGANIZATION]([DISTRICT_CODE])
GO

CREATE NONCLUSTERED INDEX [ORG_ORGANIZATION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ORG_ORG_IDENTIFIER_TYPE_CODE_IDX]
	ON [dbo].[PIMS_ORGANIZATION]([ORG_IDENTIFIER_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [ORG_PRNT_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_ORGANIZATION]([PRNT_ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [ORG_REGION_CODE_IDX]
	ON [dbo].[PIMS_ORGANIZATION]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [PERADD_ADDRESS_ID_IDX]
	ON [dbo].[PIMS_PERSON_ADDRESS]([ADDRESS_ID])
GO

CREATE NONCLUSTERED INDEX [PERADD_ADDRESS_USAGE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PERSON_ADDRESS]([ADDRESS_USAGE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PERADD_PERSON_ID_IDX]
	ON [dbo].[PIMS_PERSON_ADDRESS]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [PERORG_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_PERSON_ORGANIZATION]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [PERORG_PERSON_ID_IDX]
	ON [dbo].[PIMS_PERSON_ORGANIZATION]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [PIMPRV_PROPERTY_IMPROVEMENT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY_IMPROVEMENT]([PROPERTY_IMPROVEMENT_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PIMPRV_PROPERTY_LEASE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_IMPROVEMENT]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [PRACQF_ACQUISITION_FILE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [PRACQF_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PROPLS_LEASE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_LEASE]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [PROPLS_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_LEASE]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PROVNC_COUNTRY_ID_IDX]
	ON [dbo].[PIMS_PROVINCE_STATE]([COUNTRY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPALT_PROPERTY_ADJACENT_LAND_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]([PROPERTY_ADJACENT_LAND_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPALT_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPEVL_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_EVALUATION]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPORG_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ORGANIZATION]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [PRPORG_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_ORGANIZATION]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRAT_PROPERTY_ANOMALY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]([PROPERTY_ANOMALY_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRAT_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRRT_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_ROAD_TYPE]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRRT_PROPERTY_ROAD_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_PROP_ROAD_TYPE]([PROPERTY_ROAD_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRSF_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRSF_PROPERTY_SERVICE_FILE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE]([PROPERTY_SERVICE_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRTT_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROP_PROP_TENURE_TYPE]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRTT_PROPERTY_TENURE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROP_PROP_TENURE_TYPE]([PROPERTY_TENURE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_ADDRESS_ID_IDX]
	ON [dbo].[PIMS_PROPERTY]([ADDRESS_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_DISTRICT_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([DISTRICT_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_PPH_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([PPH_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_PROPERTY_AREA_UNIT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([PROPERTY_AREA_UNIT_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_PROPERTY_CLASSIFICATION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([PROPERTY_CLASSIFICATION_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_PROPERTY_DATA_SOURCE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([PROPERTY_DATA_SOURCE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_PROPERTY_MANAGER_ID_IDX]
	ON [dbo].[PIMS_PROPERTY]([PROPERTY_MANAGER_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_PROPERTY_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([PROPERTY_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_PROPERTY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([PROPERTY_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_PROP_MGMT_ORG_ID_IDX]
	ON [dbo].[PIMS_PROPERTY]([PROP_MGMT_ORG_ID])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_REGION_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_SURPLUS_DECLARATION_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([SURPLUS_DECLARATION_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_VOLUMETRIC_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([VOLUMETRIC_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPRTY_VOLUME_UNIT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([VOLUME_UNIT_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPSVC_PROPERTY_SERVICE_FILE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY_SERVICE_FILE]([PROPERTY_SERVICE_FILE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRPTAX_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_TAX]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRPTAX_PROPERTY_TAX_REMIT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY_TAX]([PROPERTY_TAX_REMIT_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [PRSCRC_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_RESEARCH_FILE]([PROPERTY_ID])
GO

CREATE NONCLUSTERED INDEX [PRSCRC_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_RESEARCH_FILE]([RESEARCH_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [PRSPRP_PROPERTY_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]([PROPERTY_RESEARCH_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [PRSPRP_PROP_RESEARCH_PURPOSE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]([PROP_RESEARCH_PURPOSE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [RESRCH_REQUESTOR_NAME_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE]([REQUESTOR_NAME])
GO

CREATE NONCLUSTERED INDEX [RESRCH_REQUESTOR_ORGANIZATION_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE]([REQUESTOR_ORGANIZATION])
GO

CREATE NONCLUSTERED INDEX [RESRCH_REQUEST_SOURCE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE]([REQUEST_SOURCE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [RESRCH_RESEARCH_FILE_STATUS_TYPE_CODE_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_STATUS_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [RGNUSR_REGION_CODE_IDX]
	ON [dbo].[PIMS_REGION_USER]([REGION_CODE])
GO

CREATE NONCLUSTERED INDEX [RGNUSR_USER_ID_IDX]
	ON [dbo].[PIMS_REGION_USER]([USER_ID])
GO

CREATE NONCLUSTERED INDEX [ROLCLM_CLAIM_ID_IDX]
	ON [dbo].[PIMS_ROLE_CLAIM]([CLAIM_ID])
GO

CREATE NONCLUSTERED INDEX [ROLCLM_ROLE_ID_IDX]
	ON [dbo].[PIMS_ROLE_CLAIM]([ROLE_ID])
GO

CREATE NONCLUSTERED INDEX [ROLE_KEYCLOAK_GROUP_ID_IDX]
	ON [dbo].[PIMS_ROLE]([KEYCLOAK_GROUP_ID])
GO

CREATE NONCLUSTERED INDEX [ROLE_ROLE_UID_IDX]
	ON [dbo].[PIMS_ROLE]([ROLE_UID])
GO

CREATE NONCLUSTERED INDEX [RSCHAI_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
GO

CREATE NONCLUSTERED INDEX [RSCHAI_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]([RESEARCH_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [RSFLPR_RESEARCH_FILE_ID_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_PURPOSE]([RESEARCH_FILE_ID])
GO

CREATE NONCLUSTERED INDEX [RSFLPR_RESEARCH_PURPOSE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_RESEARCH_FILE_PURPOSE]([RESEARCH_PURPOSE_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [SCDPHL_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [SCDPHL_PERSON_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [SCDPHL_SECURITY_DEPOSIT_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]([SECURITY_DEPOSIT_ID])
GO

CREATE NONCLUSTERED INDEX [SCDPRH_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [SCDPRH_PERSON_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [SCDPRH_SECURITY_DEPOSIT_RETURN_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]([SECURITY_DEPOSIT_RETURN_ID])
GO

CREATE NONCLUSTERED INDEX [SDRTRN_SECURITY_DEPOSIT_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]([SECURITY_DEPOSIT_ID])
GO

CREATE NONCLUSTERED INDEX [SECDEP_LEASE_ID_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [SECDEP_SECURITY_DEPOSIT_TYPE_CODE_IDX]
	ON [dbo].[PIMS_SECURITY_DEPOSIT]([SECURITY_DEPOSIT_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [TENANT_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_TENANT]([LEASE_ID])
GO

CREATE NONCLUSTERED INDEX [TENANT_LESSOR_TYPE_CODE_IDX]
	ON [dbo].[PIMS_LEASE_TENANT]([LESSOR_TYPE_CODE])
GO

CREATE NONCLUSTERED INDEX [TENANT_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_LEASE_TENANT]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [TENANT_PERSON_ID_IDX]
	ON [dbo].[PIMS_LEASE_TENANT]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [TENANT_PRIMARY_CONTACT_ID_IDX]
	ON [dbo].[PIMS_LEASE_TENANT]([PRIMARY_CONTACT_ID])
GO

CREATE NONCLUSTERED INDEX [USERRL_ROLE_ID_IDX]
	ON [dbo].[PIMS_USER_ROLE]([ROLE_ID])
GO

CREATE NONCLUSTERED INDEX [USERRL_USER_ID_IDX]
	ON [dbo].[PIMS_USER_ROLE]([USER_ID])
GO

CREATE NONCLUSTERED INDEX [USER_BUSINESS_IDENTIFIER_VALUE_IDX]
	ON [dbo].[PIMS_USER]([BUSINESS_IDENTIFIER_VALUE])
GO

CREATE NONCLUSTERED INDEX [USER_GUID_IDENTIFIER_VALUE_IDX]
	ON [dbo].[PIMS_USER]([GUID_IDENTIFIER_VALUE])
GO

CREATE NONCLUSTERED INDEX [USER_PERSON_ID_IDX]
	ON [dbo].[PIMS_USER]([PERSON_ID])
GO

CREATE NONCLUSTERED INDEX [USRORG_ORGANIZATION_ID_IDX]
	ON [dbo].[PIMS_USER_ORGANIZATION]([ORGANIZATION_ID])
GO

CREATE NONCLUSTERED INDEX [USRORG_ROLE_ID_IDX]
	ON [dbo].[PIMS_USER_ORGANIZATION]([ROLE_ID])
GO

CREATE NONCLUSTERED INDEX [USRORG_USER_ID_IDX]
	ON [dbo].[PIMS_USER_ORGANIZATION]([USER_ID])
GO

CREATE TRIGGER [dbo].[PIMS_STAVBL_I_S_I_TR] ON PIMS_STATIC_VARIABLE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_STATIC_VARIABLE ("STATIC_VARIABLE_NAME",
      "STATIC_VARIABLE_VALUE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "STATIC_VARIABLE_NAME",
      "STATIC_VARIABLE_VALUE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPTNR_I_S_U_TR] ON PIMS_PROPERTY_TENURE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_TENURE_TYPE_CODE = deleted.PROPERTY_TENURE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_TENURE_TYPE
    set "PROPERTY_TENURE_TYPE_CODE" = inserted."PROPERTY_TENURE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_TENURE_TYPE
    inner join inserted
    on (PIMS_PROPERTY_TENURE_TYPE.PROPERTY_TENURE_TYPE_CODE = inserted.PROPERTY_TENURE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTTMP_A_S_IUD_TR] ON PIMS_ACTIVITY_TEMPLATE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_TEMPLATE_HIST set END_DATE_HIST = @curr_date where ACTIVITY_TEMPLATE_ID in (select ACTIVITY_TEMPLATE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_TEMPLATE_HIST ([ACTIVITY_TEMPLATE_ID], [ACTIVITY_TEMPLATE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_TEMPLATE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_TEMPLATE_ID], [ACTIVITY_TEMPLATE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_TEMPLATE_H_ID_SEQ]) as [_ACTIVITY_TEMPLATE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SPDCLT_I_S_I_TR] ON PIMS_SURPLUS_DECLARATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SURPLUS_DECLARATION_TYPE ("SURPLUS_DECLARATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "SURPLUS_DECLARATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPTYP_I_S_U_TR] ON PIMS_PROPERTY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_TYPE_CODE = deleted.PROPERTY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_TYPE
    set "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_TYPE
    inner join inserted
    on (PIMS_PROPERTY_TYPE.PROPERTY_TYPE_CODE = inserted.PROPERTY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ADDRSS_A_S_IUD_TR] ON PIMS_ADDRESS FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ADDRESS_HIST set END_DATE_HIST = @curr_date where ADDRESS_ID in (select ADDRESS_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ADDRESS_HIST ([ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROVINCE_STATE_ID], [COUNTRY_ID], [STREET_ADDRESS_1], [STREET_ADDRESS_2], [STREET_ADDRESS_3], [MUNICIPALITY_NAME], [POSTAL_CODE], [OTHER_COUNTRY], [LATITUDE], [LONGITUDE], [COMMENT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ADDRESS_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROVINCE_STATE_ID], [COUNTRY_ID], [STREET_ADDRESS_1], [STREET_ADDRESS_2], [STREET_ADDRESS_3], [MUNICIPALITY_NAME], [POSTAL_CODE], [OTHER_COUNTRY], [LATITUDE], [LONGITUDE], [COMMENT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ADDRESS_H_ID_SEQ]) as [_ADDRESS_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SRVPLT_I_S_I_TR] ON PIMS_SURVEY_PLAN_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SURVEY_PLAN_TYPE ("SURVEY_PLAN_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "SURVEY_PLAN_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PROVNC_I_S_U_TR] ON PIMS_PROVINCE_STATE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROVINCE_STATE_ID = deleted.PROVINCE_STATE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROVINCE_STATE
    set "PROVINCE_STATE_ID" = inserted."PROVINCE_STATE_ID",
      "COUNTRY_ID" = inserted."COUNTRY_ID",
      "PROVINCE_STATE_CODE" = inserted."PROVINCE_STATE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROVINCE_STATE
    inner join inserted
    on (PIMS_PROVINCE_STATE.PROVINCE_STATE_ID = inserted.PROVINCE_STATE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AIPAFL_A_S_IUD_TR] ON PIMS_ACT_INST_PROP_ACQ_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACT_INST_PROP_ACQ_FILE_HIST set END_DATE_HIST = @curr_date where ACT_INST_PROP_ACQ_FILE_ID in (select ACT_INST_PROP_ACQ_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACT_INST_PROP_ACQ_FILE_HIST ([ACT_INST_PROP_ACQ_FILE_ID], [ACTIVITY_INSTANCE_ID], [PROPERTY_ACQUISITION_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACT_INST_PROP_ACQ_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACT_INST_PROP_ACQ_FILE_ID], [ACTIVITY_INSTANCE_ID], [PROPERTY_ACQUISITION_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE_H_ID_SEQ]) as [_ACT_INST_PROP_ACQ_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_TENNTX_I_S_I_TR] ON PIMS_TENANT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TENANT ("TENANT_ID",
      "CODE",
      "NAME",
      "DESCRIPTION",
      "SETTINGS",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TENANT_ID",
      "CODE",
      "NAME",
      "DESCRIPTION",
      "SETTINGS",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_REGION_I_S_U_TR] ON PIMS_REGION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.REGION_CODE = deleted.REGION_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_REGION
    set "REGION_CODE" = inserted."REGION_CODE",
      "REGION_NAME" = inserted."REGION_NAME",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_REGION
    inner join inserted
    on (PIMS_REGION.REGION_CODE = inserted.REGION_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AIPRFL_A_S_IUD_TR] ON PIMS_ACT_INST_PROP_RSRCH_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACT_INST_PROP_RSRCH_FILE_HIST set END_DATE_HIST = @curr_date where ACT_INST_PROP_RSRCH_FILE_ID in (select ACT_INST_PROP_RSRCH_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACT_INST_PROP_RSRCH_FILE_HIST ([ACT_INST_PROP_RSRCH_FILE_ID], [ACTIVITY_INSTANCE_ID], [PROPERTY_RESEARCH_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACT_INST_PROP_RSRCH_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACT_INST_PROP_RSRCH_FILE_ID], [ACTIVITY_INSTANCE_ID], [PROPERTY_RESEARCH_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE_H_ID_SEQ]) as [_ACT_INST_PROP_RSRCH_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USER_I_S_I_TR] ON PIMS_USER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_USER ("USER_ID",
      "PERSON_ID",
      "BUSINESS_IDENTIFIER_VALUE",
      "GUID_IDENTIFIER_VALUE",
      "POSITION",
      "NOTE",
      "LAST_LOGIN",
      "APPROVED_BY_ID",
      "ISSUE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "USER_ID",
      "PERSON_ID",
      "BUSINESS_IDENTIFIER_VALUE",
      "GUID_IDENTIFIER_VALUE",
      "POSITION",
      "NOTE",
      "LAST_LOGIN",
      "APPROVED_BY_ID",
      "ISSUE_DATE",
      "EXPIRY_DATE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RGNUSR_I_S_U_TR] ON PIMS_REGION_USER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.REGION_USER_ID = deleted.REGION_USER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_REGION_USER
    set "REGION_USER_ID" = inserted."REGION_USER_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "USER_ID" = inserted."USER_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_REGION_USER
    inner join inserted
    on (PIMS_REGION_USER.REGION_USER_ID = inserted.REGION_USER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CLMTYP_A_S_IUD_TR] ON PIMS_CLAIM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_CLAIM_HIST set END_DATE_HIST = @curr_date where CLAIM_ID in (select CLAIM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_CLAIM_HIST ([CLAIM_ID], [CLAIM_UID], [KEYCLOAK_ROLE_ID], [NAME], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _CLAIM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [CLAIM_ID], [CLAIM_UID], [KEYCLOAK_ROLE_ID], [NAME], [DESCRIPTION], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_CLAIM_H_ID_SEQ]) as [_CLAIM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USRORG_I_S_I_TR] ON PIMS_USER_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_USER_ORGANIZATION ("USER_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "USER_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RQSRCT_I_S_U_TR] ON PIMS_REQUEST_SOURCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.REQUEST_SOURCE_TYPE_CODE = deleted.REQUEST_SOURCE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_REQUEST_SOURCE_TYPE
    set "REQUEST_SOURCE_TYPE_CODE" = inserted."REQUEST_SOURCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_REQUEST_SOURCE_TYPE
    inner join inserted
    on (PIMS_REQUEST_SOURCE_TYPE.REQUEST_SOURCE_TYPE_CODE = inserted.REQUEST_SOURCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CNTMTH_A_S_IUD_TR] ON PIMS_CONTACT_METHOD FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_CONTACT_METHOD_HIST set END_DATE_HIST = @curr_date where CONTACT_METHOD_ID in (select CONTACT_METHOD_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_CONTACT_METHOD_HIST ([CONTACT_METHOD_ID], [CONTACT_METHOD_TYPE_CODE], [PERSON_ID], [ORGANIZATION_ID], [CONTACT_METHOD_VALUE], [IS_PREFERRED_METHOD], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _CONTACT_METHOD_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [CONTACT_METHOD_ID], [CONTACT_METHOD_TYPE_CODE], [PERSON_ID], [ORGANIZATION_ID], [CONTACT_METHOD_VALUE], [IS_PREFERRED_METHOD], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_CONTACT_METHOD_H_ID_SEQ]) as [_CONTACT_METHOD_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USERRL_I_S_I_TR] ON PIMS_USER_ROLE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_USER_ROLE ("USER_ROLE_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "USER_ROLE_ID",
      "USER_ID",
      "ROLE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSCHAI_I_S_U_TR] ON PIMS_RESEARCH_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_ACTIVITY_INSTANCE_ID = deleted.RESEARCH_ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_ACTIVITY_INSTANCE
    set "RESEARCH_ACTIVITY_INSTANCE_ID" = inserted."RESEARCH_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_RESEARCH_ACTIVITY_INSTANCE.RESEARCH_ACTIVITY_INSTANCE_ID = inserted.RESEARCH_ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCMNT_A_S_IUD_TR] ON PIMS_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DOCUMENT_HIST set END_DATE_HIST = @curr_date where DOCUMENT_ID in (select DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DOCUMENT_HIST ([DOCUMENT_ID], [DOCUMENT_TYPE_ID], [DOCUMENT_STATUS_TYPE_CODE], [FILE_NAME], [MAYAN_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DOCUMENT_ID], [DOCUMENT_TYPE_ID], [DOCUMENT_STATUS_TYPE_CODE], [FILE_NAME], [MAYAN_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DOCUMENT_H_ID_SEQ]) as [_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_VOLUTY_I_S_I_TR] ON PIMS_VOLUME_UNIT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_VOLUME_UNIT_TYPE ("VOLUME_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "VOLUME_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RESRCH_I_S_U_TR] ON PIMS_RESEARCH_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_ID = deleted.RESEARCH_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE
    set "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "RESEARCH_FILE_STATUS_TYPE_CODE" = inserted."RESEARCH_FILE_STATUS_TYPE_CODE",
      "REQUEST_SOURCE_TYPE_CODE" = inserted."REQUEST_SOURCE_TYPE_CODE",
      "REQUESTOR_NAME" = inserted."REQUESTOR_NAME",
      "REQUESTOR_ORGANIZATION" = inserted."REQUESTOR_ORGANIZATION",
      "NAME" = inserted."NAME",
      "RFILE_NUMBER" = inserted."RFILE_NUMBER",
      "REQUEST_DATE" = inserted."REQUEST_DATE",
      "ROAD_NAME" = inserted."ROAD_NAME",
      "ROAD_ALIAS" = inserted."ROAD_ALIAS",
      "REQUEST_DESCRIPTION" = inserted."REQUEST_DESCRIPTION",
      "REQUEST_SOURCE_DESCRIPTION" = inserted."REQUEST_SOURCE_DESCRIPTION",
      "RESEARCH_RESULT" = inserted."RESEARCH_RESULT",
      "IS_EXPROPRIATION" = inserted."IS_EXPROPRIATION",
      "EXPROPRIATION_NOTES" = inserted."EXPROPRIATION_NOTES",
      "RESEARCH_COMPLETION_DATE" = inserted."RESEARCH_COMPLETION_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE
    inner join inserted
    on (PIMS_RESEARCH_FILE.RESEARCH_FILE_ID = inserted.RESEARCH_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCTYP_A_S_IUD_TR] ON PIMS_DOCUMENT_TYP FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DOCUMENT_TYP_HIST set END_DATE_HIST = @curr_date where DOCUMENT_TYPE_ID in (select DOCUMENT_TYPE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DOCUMENT_TYP_HIST ([DOCUMENT_TYPE_ID], [MAYAN_ID], [DOCUMENT_TYPE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DOCUMENT_TYP_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DOCUMENT_TYPE_ID], [MAYAN_ID], [DOCUMENT_TYPE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DOCUMENT_TYP_H_ID_SEQ]) as [_DOCUMENT_TYP_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRVOLT_I_S_I_TR] ON PIMS_VOLUMETRIC_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_VOLUMETRIC_TYPE ("VOLUMETRIC_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "VOLUMETRIC_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSFLPR_I_S_U_TR] ON PIMS_RESEARCH_FILE_PURPOSE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_PURPOSE_ID = deleted.RESEARCH_FILE_PURPOSE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE_PURPOSE
    set "RESEARCH_FILE_PURPOSE_ID" = inserted."RESEARCH_FILE_PURPOSE_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "RESEARCH_PURPOSE_TYPE_CODE" = inserted."RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_PURPOSE
    inner join inserted
    on (PIMS_RESEARCH_FILE_PURPOSE.RESEARCH_FILE_PURPOSE_ID = inserted.RESEARCH_FILE_PURPOSE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_INSRNC_A_S_IUD_TR] ON PIMS_INSURANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_INSURANCE_HIST set END_DATE_HIST = @curr_date where INSURANCE_ID in (select INSURANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_INSURANCE_HIST ([INSURANCE_ID], [LEASE_ID], [INSURANCE_TYPE_CODE], [OTHER_INSURANCE_TYPE], [COVERAGE_DESCRIPTION], [COVERAGE_LIMIT], [IS_INSURANCE_IN_PLACE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _INSURANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [INSURANCE_ID], [LEASE_ID], [INSURANCE_TYPE_CODE], [OTHER_INSURANCE_TYPE], [COVERAGE_DESCRIPTION], [COVERAGE_LIMIT], [IS_INSURANCE_IN_PLACE], [EXPIRY_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_INSURANCE_H_ID_SEQ]) as [_INSURANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSRCHS_I_S_U_TR] ON PIMS_RESEARCH_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_FILE_STATUS_TYPE_CODE = deleted.RESEARCH_FILE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_FILE_STATUS_TYPE
    set "RESEARCH_FILE_STATUS_TYPE_CODE" = inserted."RESEARCH_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_RESEARCH_FILE_STATUS_TYPE.RESEARCH_FILE_STATUS_TYPE_CODE = inserted.RESEARCH_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LEASE_A_S_IUD_TR] ON PIMS_LEASE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_HIST set END_DATE_HIST = @curr_date where LEASE_ID in (select LEASE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_HIST ([LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_ID], [LEASE_PAY_RVBL_TYPE_CODE], [LEASE_LICENSE_TYPE_CODE], [LEASE_CATEGORY_TYPE_CODE], [LEASE_PURPOSE_TYPE_CODE], [LEASE_PROGRAM_TYPE_CODE], [LEASE_INITIATOR_TYPE_CODE], [LEASE_RESPONSIBILITY_TYPE_CODE], [LEASE_STATUS_TYPE_CODE], [REGION_CODE], [L_FILE_NO], [TFA_FILE_NO], [TFA_FILE_NUMBER], [PS_FILE_NO], [LEASE_CATEGORY_OTHER_DESC], [LEASE_PURPOSE_OTHER_DESC], [MOTI_CONTACT], [DOCUMENTATION_REFERENCE], [OTHER_LEASE_PROGRAM_TYPE], [OTHER_LEASE_LICENSE_TYPE], [OTHER_LEASE_PURPOSE_TYPE], [ORIG_START_DATE], [ORIG_EXPIRY_DATE], [LEASE_AMOUNT], [RESPONSIBILITY_EFFECTIVE_DATE], [INSPECTION_DATE], [IS_SUBJECT_TO_RTA], [IS_COMM_BLDG], [IS_OTHER_IMPROVEMENT], [IS_EXPIRED], [HAS_PHYSICAL_FILE], [HAS_DIGITAL_FILE], [HAS_PHYSICIAL_LICENSE], [HAS_DIGITAL_LICENSE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_H_ID_SEQ]) as [_LEASE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSHPRT_I_S_U_TR] ON PIMS_RESEARCH_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.RESEARCH_PURPOSE_TYPE_CODE = deleted.RESEARCH_PURPOSE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_RESEARCH_PURPOSE_TYPE
    set "RESEARCH_PURPOSE_TYPE_CODE" = inserted."RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_RESEARCH_PURPOSE_TYPE
    inner join inserted
    on (PIMS_RESEARCH_PURPOSE_TYPE.RESEARCH_PURPOSE_TYPE_CODE = inserted.RESEARCH_PURPOSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSACIN_A_S_IUD_TR] ON PIMS_LEASE_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where LEASE_ACTIVITY_INSTANCE_ID in (select LEASE_ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_ACTIVITY_INSTANCE_HIST ([LEASE_ACTIVITY_INSTANCE_ID], [ACTIVITY_INSTANCE_ID], [LEASE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_ACTIVITY_INSTANCE_ID], [ACTIVITY_INSTANCE_ID], [LEASE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_LEASE_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ROLE_I_S_U_TR] ON PIMS_ROLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ROLE_ID = deleted.ROLE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ROLE
    set "ROLE_ID" = inserted."ROLE_ID",
      "ROLE_UID" = inserted."ROLE_UID",
      "KEYCLOAK_GROUP_ID" = inserted."KEYCLOAK_GROUP_ID",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_PUBLIC" = inserted."IS_PUBLIC",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "SORT_ORDER" = inserted."SORT_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ROLE
    inner join inserted
    on (PIMS_ROLE.ROLE_ID = inserted.ROLE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPYMT_A_S_IUD_TR] ON PIMS_LEASE_PAYMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_PAYMENT_HIST set END_DATE_HIST = @curr_date where LEASE_PAYMENT_ID in (select LEASE_PAYMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_PAYMENT_HIST ([LEASE_PAYMENT_ID], [LEASE_TERM_ID], [LEASE_PAYMENT_METHOD_TYPE_CODE], [LEASE_PAYMENT_STATUS_TYPE_CODE], [PAYMENT_RECEIVED_DATE], [PAYMENT_AMOUNT_PRE_TAX], [PAYMENT_AMOUNT_PST], [PAYMENT_AMOUNT_GST], [PAYMENT_AMOUNT_TOTAL], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_PAYMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_PAYMENT_ID], [LEASE_TERM_ID], [LEASE_PAYMENT_METHOD_TYPE_CODE], [LEASE_PAYMENT_STATUS_TYPE_CODE], [PAYMENT_RECEIVED_DATE], [PAYMENT_AMOUNT_PRE_TAX], [PAYMENT_AMOUNT_PST], [PAYMENT_AMOUNT_GST], [PAYMENT_AMOUNT_TOTAL], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_PAYMENT_H_ID_SEQ]) as [_LEASE_PAYMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ROLCLM_I_S_U_TR] ON PIMS_ROLE_CLAIM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ROLE_CLAIM_ID = deleted.ROLE_CLAIM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ROLE_CLAIM
    set "ROLE_CLAIM_ID" = inserted."ROLE_CLAIM_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "CLAIM_ID" = inserted."CLAIM_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ROLE_CLAIM
    inner join inserted
    on (PIMS_ROLE_CLAIM.ROLE_CLAIM_ID = inserted.ROLE_CLAIM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSTERM_A_S_IUD_TR] ON PIMS_LEASE_TERM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_TERM_HIST set END_DATE_HIST = @curr_date where LEASE_TERM_ID in (select LEASE_TERM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_TERM_HIST ([LEASE_TERM_ID], [LEASE_ID], [LEASE_TERM_STATUS_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [TERM_START_DATE], [TERM_EXPIRY_DATE], [TERM_RENEWAL_DATE], [PAYMENT AMOUNT], [PAYMENT_DUE_DATE], [PAYMENT_NOTE], [IS_GST_ELIGIBLE], [GST_AMOUNT], [IS_TERM_EXERCISED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_TERM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_TERM_ID], [LEASE_ID], [LEASE_TERM_STATUS_TYPE_CODE], [LEASE_PMT_FREQ_TYPE_CODE], [TERM_START_DATE], [TERM_EXPIRY_DATE], [TERM_RENEWAL_DATE], [PAYMENT AMOUNT], [PAYMENT_DUE_DATE], [PAYMENT_NOTE], [IS_GST_ELIGIBLE], [GST_AMOUNT], [IS_TERM_EXERCISED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_TERM_H_ID_SEQ]) as [_LEASE_TERM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SECDEP_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_ID = deleted.SECURITY_DEPOSIT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT
    set "SECURITY_DEPOSIT_ID" = inserted."SECURITY_DEPOSIT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE" = inserted."SECURITY_DEPOSIT_TYPE_CODE",
      "OTHER_DEPOSIT_TYPE_DESC" = inserted."OTHER_DEPOSIT_TYPE_DESC",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "AMOUNT_PAID" = inserted."AMOUNT_PAID",
      "DEPOSIT_DATE" = inserted."DEPOSIT_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT.SECURITY_DEPOSIT_ID = inserted.SECURITY_DEPOSIT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_NOTE_A_S_IUD_TR] ON PIMS_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_NOTE_HIST set END_DATE_HIST = @curr_date where NOTE_ID in (select NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_NOTE_HIST ([NOTE_ID], [NOTE_TXT], [IS_SYSTEM_GENERATED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [NOTE_ID], [NOTE_TXT], [IS_SYSTEM_GENERATED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_NOTE_H_ID_SEQ]) as [_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SCDPHL_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT_HOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_HOLDER_ID = deleted.SECURITY_DEPOSIT_HOLDER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT_HOLDER
    set "SECURITY_DEPOSIT_HOLDER_ID" = inserted."SECURITY_DEPOSIT_HOLDER_ID",
      "SECURITY_DEPOSIT_ID" = inserted."SECURITY_DEPOSIT_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_HOLDER
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_HOLDER.SECURITY_DEPOSIT_HOLDER_ID = inserted.SECURITY_DEPOSIT_HOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORG_A_S_IUD_TR] ON PIMS_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where ORGANIZATION_ID in (select ORGANIZATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ORGANIZATION_HIST ([ORGANIZATION_ID], [PRNT_ORGANIZATION_ID], [REGION_CODE], [DISTRICT_CODE], [ORGANIZATION_TYPE_CODE], [ORG_IDENTIFIER_TYPE_CODE], [ORGANIZATION_IDENTIFIER], [ORGANIZATION_NAME], [ORGANIZATION_ALIAS], [INCORPORATION_NUMBER], [WEBSITE], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ORGANIZATION_ID], [PRNT_ORGANIZATION_ID], [REGION_CODE], [DISTRICT_CODE], [ORGANIZATION_TYPE_CODE], [ORG_IDENTIFIER_TYPE_CODE], [ORGANIZATION_IDENTIFIER], [ORGANIZATION_NAME], [ORGANIZATION_ALIAS], [INCORPORATION_NUMBER], [WEBSITE], [COMMENT], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ORGANIZATION_H_ID_SEQ]) as [_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SDRTRN_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT_RETURN INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_RETURN_ID = deleted.SECURITY_DEPOSIT_RETURN_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT_RETURN
    set "SECURITY_DEPOSIT_RETURN_ID" = inserted."SECURITY_DEPOSIT_RETURN_ID",
      "SECURITY_DEPOSIT_ID" = inserted."SECURITY_DEPOSIT_ID",
      "TERMINATION_DATE" = inserted."TERMINATION_DATE",
      "CLAIMS_AGAINST" = inserted."CLAIMS_AGAINST",
      "RETURN_AMOUNT" = inserted."RETURN_AMOUNT",
      "RETURN_DATE" = inserted."RETURN_DATE",
      "INTEREST_PAID" = inserted."INTEREST_PAID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_RETURN
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_RETURN.SECURITY_DEPOSIT_RETURN_ID = inserted.SECURITY_DEPOSIT_RETURN_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORGADD_A_S_IUD_TR] ON PIMS_ORGANIZATION_ADDRESS FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ORGANIZATION_ADDRESS_HIST set END_DATE_HIST = @curr_date where ORGANIZATION_ADDRESS_ID in (select ORGANIZATION_ADDRESS_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ORGANIZATION_ADDRESS_HIST ([ORGANIZATION_ADDRESS_ID], [ORGANIZATION_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ORGANIZATION_ADDRESS_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ORGANIZATION_ADDRESS_ID], [ORGANIZATION_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ORGANIZATION_ADDRESS_H_ID_SEQ]) as [_ORGANIZATION_ADDRESS_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SCDPRH_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT_RETURN_HOLDER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_RETURN_HOLDER_ID = deleted.SECURITY_DEPOSIT_RETURN_HOLDER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT_RETURN_HOLDER
    set "SECURITY_DEPOSIT_RETURN_HOLDER_ID" = inserted."SECURITY_DEPOSIT_RETURN_HOLDER_ID",
      "SECURITY_DEPOSIT_RETURN_ID" = inserted."SECURITY_DEPOSIT_RETURN_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_RETURN_HOLDER
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_RETURN_HOLDER.SECURITY_DEPOSIT_RETURN_HOLDER_ID = inserted.SECURITY_DEPOSIT_RETURN_HOLDER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERADD_A_S_IUD_TR] ON PIMS_PERSON_ADDRESS FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PERSON_ADDRESS_HIST set END_DATE_HIST = @curr_date where PERSON_ADDRESS_ID in (select PERSON_ADDRESS_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PERSON_ADDRESS_HIST ([PERSON_ADDRESS_ID], [PERSON_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PERSON_ADDRESS_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PERSON_ADDRESS_ID], [PERSON_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PERSON_ADDRESS_H_ID_SEQ]) as [_PERSON_ADDRESS_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SECDPT_I_S_U_TR] ON PIMS_SECURITY_DEPOSIT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SECURITY_DEPOSIT_TYPE_CODE = deleted.SECURITY_DEPOSIT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SECURITY_DEPOSIT_TYPE
    set "SECURITY_DEPOSIT_TYPE_CODE" = inserted."SECURITY_DEPOSIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SECURITY_DEPOSIT_TYPE
    inner join inserted
    on (PIMS_SECURITY_DEPOSIT_TYPE.SECURITY_DEPOSIT_TYPE_CODE = inserted.SECURITY_DEPOSIT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERORG_A_S_IUD_TR] ON PIMS_PERSON_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PERSON_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where PERSON_ORGANIZATION_ID in (select PERSON_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PERSON_ORGANIZATION_HIST ([PERSON_ORGANIZATION_ID], [PERSON_ID], [ORGANIZATION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PERSON_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PERSON_ORGANIZATION_ID], [PERSON_ID], [ORGANIZATION_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PERSON_ORGANIZATION_H_ID_SEQ]) as [_PERSON_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_STAVBL_I_S_U_TR] ON PIMS_STATIC_VARIABLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.STATIC_VARIABLE_NAME = deleted.STATIC_VARIABLE_NAME)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_STATIC_VARIABLE
    set "STATIC_VARIABLE_NAME" = inserted."STATIC_VARIABLE_NAME",
      "STATIC_VARIABLE_VALUE" = inserted."STATIC_VARIABLE_VALUE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_STATIC_VARIABLE
    inner join inserted
    on (PIMS_STATIC_VARIABLE.STATIC_VARIABLE_NAME = inserted.STATIC_VARIABLE_NAME);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERSON_A_S_IUD_TR] ON PIMS_PERSON FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PERSON_HIST set END_DATE_HIST = @curr_date where PERSON_ID in (select PERSON_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PERSON_HIST ([PERSON_ID], [SURNAME], [FIRST_NAME], [MIDDLE_NAMES], [NAME_SUFFIX], [PREFERRED_NAME], [BIRTH_DATE], [COMMENT], [ADDRESS_COMMENT], [USE_ORGANIZATION_ADDRESS], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PERSON_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PERSON_ID], [SURNAME], [FIRST_NAME], [MIDDLE_NAMES], [NAME_SUFFIX], [PREFERRED_NAME], [BIRTH_DATE], [COMMENT], [ADDRESS_COMMENT], [USE_ORGANIZATION_ADDRESS], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PERSON_H_ID_SEQ]) as [_PERSON_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SPDCLT_I_S_U_TR] ON PIMS_SURPLUS_DECLARATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SURPLUS_DECLARATION_TYPE_CODE = deleted.SURPLUS_DECLARATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SURPLUS_DECLARATION_TYPE
    set "SURPLUS_DECLARATION_TYPE_CODE" = inserted."SURPLUS_DECLARATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SURPLUS_DECLARATION_TYPE
    inner join inserted
    on (PIMS_SURPLUS_DECLARATION_TYPE.SURPLUS_DECLARATION_TYPE_CODE = inserted.SURPLUS_DECLARATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PIMPRV_A_S_IUD_TR] ON PIMS_PROPERTY_IMPROVEMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_IMPROVEMENT_HIST set END_DATE_HIST = @curr_date where PROPERTY_IMPROVEMENT_ID in (select PROPERTY_IMPROVEMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_IMPROVEMENT_HIST ([PROPERTY_IMPROVEMENT_ID], [LEASE_ID], [PROPERTY_IMPROVEMENT_TYPE_CODE], [IMPROVEMENT_DESCRIPTION], [STRUCTURE_SIZE], [ADDRESS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_IMPROVEMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_IMPROVEMENT_ID], [LEASE_ID], [PROPERTY_IMPROVEMENT_TYPE_CODE], [IMPROVEMENT_DESCRIPTION], [STRUCTURE_SIZE], [ADDRESS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_IMPROVEMENT_H_ID_SEQ]) as [_PROPERTY_IMPROVEMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SRVPLT_I_S_U_TR] ON PIMS_SURVEY_PLAN_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.SURVEY_PLAN_TYPE_CODE = deleted.SURVEY_PLAN_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_SURVEY_PLAN_TYPE
    set "SURVEY_PLAN_TYPE_CODE" = inserted."SURVEY_PLAN_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_SURVEY_PLAN_TYPE
    inner join inserted
    on (PIMS_SURVEY_PLAN_TYPE.SURVEY_PLAN_TYPE_CODE = inserted.SURVEY_PLAN_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACQF_A_S_IUD_TR] ON PIMS_PROPERTY_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where PROPERTY_ACQUISITION_FILE_ID in (select PROPERTY_ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ACQUISITION_FILE_HIST ([PROPERTY_ACQUISITION_FILE_ID], [ACQUISITION_FILE_ID], [PROPERTY_ID], [PROPERTY_NAME], [DISPLAY_ORDER], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ACQUISITION_FILE_ID], [ACQUISITION_FILE_ID], [PROPERTY_ID], [PROPERTY_NAME], [DISPLAY_ORDER], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_H_ID_SEQ]) as [_PROPERTY_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_TENNTX_I_S_U_TR] ON PIMS_TENANT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TENANT_ID = deleted.TENANT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TENANT
    set "TENANT_ID" = inserted."TENANT_ID",
      "CODE" = inserted."CODE",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "SETTINGS" = inserted."SETTINGS",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TENANT
    inner join inserted
    on (PIMS_TENANT.TENANT_ID = inserted.TENANT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PROPLS_A_S_IUD_TR] ON PIMS_PROPERTY_LEASE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_LEASE_HIST set END_DATE_HIST = @curr_date where PROPERTY_LEASE_ID in (select PROPERTY_LEASE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_LEASE_HIST ([PROPERTY_LEASE_ID], [PROPERTY_ID], [LEASE_ID], [AREA_UNIT_TYPE_CODE], [LEASE_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_LEASE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_LEASE_ID], [PROPERTY_ID], [LEASE_ID], [AREA_UNIT_TYPE_CODE], [LEASE_AREA], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_LEASE_H_ID_SEQ]) as [_PROPERTY_LEASE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USER_I_S_U_TR] ON PIMS_USER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.USER_ID = deleted.USER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_USER
    set "USER_ID" = inserted."USER_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "BUSINESS_IDENTIFIER_VALUE" = inserted."BUSINESS_IDENTIFIER_VALUE",
      "GUID_IDENTIFIER_VALUE" = inserted."GUID_IDENTIFIER_VALUE",
      "POSITION" = inserted."POSITION",
      "NOTE" = inserted."NOTE",
      "LAST_LOGIN" = inserted."LAST_LOGIN",
      "APPROVED_BY_ID" = inserted."APPROVED_BY_ID",
      "ISSUE_DATE" = inserted."ISSUE_DATE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER
    inner join inserted
    on (PIMS_USER.USER_ID = inserted.USER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPEVL_A_S_IUD_TR] ON PIMS_PROPERTY_EVALUATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_EVALUATION_HIST set END_DATE_HIST = @curr_date where PROPERTY_EVALUATION_ID in (select PROPERTY_EVALUATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_EVALUATION_HIST ([PROPERTY_EVALUATION_ID], [PROPERTY_ID], [EVALUATION_DATE], [KEY], [VALUE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_EVALUATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_EVALUATION_ID], [PROPERTY_ID], [EVALUATION_DATE], [KEY], [VALUE], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_EVALUATION_H_ID_SEQ]) as [_PROPERTY_EVALUATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USRORG_I_S_U_TR] ON PIMS_USER_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.USER_ORGANIZATION_ID = deleted.USER_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_USER_ORGANIZATION
    set "USER_ORGANIZATION_ID" = inserted."USER_ORGANIZATION_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER_ORGANIZATION
    inner join inserted
    on (PIMS_USER_ORGANIZATION.USER_ORGANIZATION_ID = inserted.USER_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPORG_A_S_IUD_TR] ON PIMS_PROPERTY_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where PROPERTY_ORGANIZATION_ID in (select PROPERTY_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_ORGANIZATION_HIST ([PROPERTY_ORGANIZATION_ID], [PROPERTY_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED], _PROPERTY_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ORGANIZATION_ID], [PROPERTY_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], [IS_DISABLED], (next value for [dbo].[PIMS_PROPERTY_ORGANIZATION_H_ID_SEQ]) as [_PROPERTY_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USERRL_I_S_U_TR] ON PIMS_USER_ROLE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.USER_ROLE_ID = deleted.USER_ROLE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_USER_ROLE
    set "USER_ROLE_ID" = inserted."USER_ROLE_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_USER_ROLE
    inner join inserted
    on (PIMS_USER_ROLE.USER_ROLE_ID = inserted.USER_ROLE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRSF_A_S_IUD_TR] ON PIMS_PROPERTY_PROPERTY_SERVICE_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST set END_DATE_HIST = @curr_date where PROPERTY_PROPERTY_SERVICE_FILE_ID in (select PROPERTY_PROPERTY_SERVICE_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST ([PROPERTY_PROPERTY_SERVICE_FILE_ID], [PROPERTY_ID], [PROPERTY_SERVICE_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_PROPERTY_SERVICE_FILE_ID], [PROPERTY_ID], [PROPERTY_SERVICE_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_H_ID_SEQ]) as [_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_VOLUTY_I_S_U_TR] ON PIMS_VOLUME_UNIT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.VOLUME_UNIT_TYPE_CODE = deleted.VOLUME_UNIT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_VOLUME_UNIT_TYPE
    set "VOLUME_UNIT_TYPE_CODE" = inserted."VOLUME_UNIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_VOLUME_UNIT_TYPE
    inner join inserted
    on (PIMS_VOLUME_UNIT_TYPE.VOLUME_UNIT_TYPE_CODE = inserted.VOLUME_UNIT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRTY_A_S_IUD_TR] ON PIMS_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_HIST set END_DATE_HIST = @curr_date where PROPERTY_ID in (select PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_HIST ([PROPERTY_ID], [PROPERTY_MANAGER_ID], [PROP_MGMT_ORG_ID], [PROPERTY_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [NAME], [DESCRIPTION], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [SURVEY_PLAN_NUMBER], [ENCUMBRANCE_REASON], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_PROPERTY_OF_INTEREST], [IS_VISIBLE_TO_OTHER_AGENCIES], [IS_SENSITIVE], [IS_PROVINCIAL_PUBLIC_HWY], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ZONING], [ZONING_POTENTIAL], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ID], [PROPERTY_MANAGER_ID], [PROP_MGMT_ORG_ID], [PROPERTY_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [NAME], [DESCRIPTION], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [SURVEY_PLAN_NUMBER], [ENCUMBRANCE_REASON], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_PROPERTY_OF_INTEREST], [IS_VISIBLE_TO_OTHER_AGENCIES], [IS_SENSITIVE], [IS_PROVINCIAL_PUBLIC_HWY], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ZONING], [ZONING_POTENTIAL], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_H_ID_SEQ]) as [_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRVOLT_I_S_U_TR] ON PIMS_VOLUMETRIC_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.VOLUMETRIC_TYPE_CODE = deleted.VOLUMETRIC_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_VOLUMETRIC_TYPE
    set "VOLUMETRIC_TYPE_CODE" = inserted."VOLUMETRIC_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_VOLUMETRIC_TYPE
    inner join inserted
    on (PIMS_VOLUMETRIC_TYPE.VOLUMETRIC_TYPE_CODE = inserted.VOLUMETRIC_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPSVC_A_S_IUD_TR] ON PIMS_PROPERTY_SERVICE_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_SERVICE_FILE_HIST set END_DATE_HIST = @curr_date where PROPERTY_SERVICE_FILE_ID in (select PROPERTY_SERVICE_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_SERVICE_FILE_HIST ([PROPERTY_SERVICE_FILE_ID], [PROPERTY_SERVICE_FILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_SERVICE_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_SERVICE_FILE_ID], [PROPERTY_SERVICE_FILE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_SERVICE_FILE_H_ID_SEQ]) as [_PROPERTY_SERVICE_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACRQST_I_S_I_TR] ON PIMS_ACCESS_REQUEST INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACCESS_REQUEST ("ACCESS_REQUEST_ID",
      "USER_ID",
      "ROLE_ID",
      "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "REGION_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACCESS_REQUEST_ID",
      "USER_ID",
      "ROLE_ID",
      "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "REGION_CODE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPTAX_A_S_IUD_TR] ON PIMS_PROPERTY_TAX FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_TAX_HIST set END_DATE_HIST = @curr_date where PROPERTY_TAX_ID in (select PROPERTY_TAX_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_TAX_HIST ([PROPERTY_TAX_ID], [PROPERTY_ID], [PROPERTY_TAX_REMIT_TYPE_CODE], [TAX_FOLIO_NO], [PAYMENT_AMOUNT], [LAST_PAYMENT_DATE], [PAYMENT_NOTES], [BCTFA_NOTIFICATION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_TAX_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_TAX_ID], [PROPERTY_ID], [PROPERTY_TAX_REMIT_TYPE_CODE], [TAX_FOLIO_NO], [PAYMENT_AMOUNT], [LAST_PAYMENT_DATE], [PAYMENT_NOTES], [BCTFA_NOTIFICATION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_TAX_H_ID_SEQ]) as [_PROPERTY_TAX_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACRQOR_I_S_I_TR] ON PIMS_ACCESS_REQUEST_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACCESS_REQUEST_ORGANIZATION ("ACCESS_REQUEST_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "ACCESS_REQUEST_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACCESS_REQUEST_ORGANIZATION_ID",
      "ORGANIZATION_ID",
      "ACCESS_REQUEST_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRSCRC_A_S_IUD_TR] ON PIMS_PROPERTY_RESEARCH_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_RESEARCH_FILE_HIST set END_DATE_HIST = @curr_date where PROPERTY_RESEARCH_FILE_ID in (select PROPERTY_RESEARCH_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_RESEARCH_FILE_HIST ([PROPERTY_RESEARCH_FILE_ID], [PROPERTY_ID], [RESEARCH_FILE_ID], [PROPERTY_NAME], [DISPLAY_ORDER], [IS_DISABLED], [IS_LEGAL_OPINION_REQUIRED], [IS_LEGAL_OPINION_OBTAINED], [DOCUMENT_REFERENCE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_RESEARCH_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_RESEARCH_FILE_ID], [PROPERTY_ID], [RESEARCH_FILE_ID], [PROPERTY_NAME], [DISPLAY_ORDER], [IS_DISABLED], [IS_LEGAL_OPINION_REQUIRED], [IS_LEGAL_OPINION_OBTAINED], [DOCUMENT_REFERENCE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_RESEARCH_FILE_H_ID_SEQ]) as [_PROPERTY_RESEARCH_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ARQSTT_I_S_I_TR] ON PIMS_ACCESS_REQUEST_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACCESS_REQUEST_STATUS_TYPE ("ACCESS_REQUEST_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACCESS_REQUEST_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RESRCH_A_S_IUD_TR] ON PIMS_RESEARCH_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_ID in (select RESEARCH_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_HIST ([RESEARCH_FILE_ID], [RESEARCH_FILE_STATUS_TYPE_CODE], [REQUEST_SOURCE_TYPE_CODE], [REQUESTOR_NAME], [REQUESTOR_ORGANIZATION], [NAME], [RFILE_NUMBER], [REQUEST_DATE], [REQUEST_SOURCE_DESCRIPTION], [IS_EXPROPRIATION], [RESEARCH_COMPLETION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_ID], [RESEARCH_FILE_STATUS_TYPE_CODE], [REQUEST_SOURCE_TYPE_CODE], [REQUESTOR_NAME], [REQUESTOR_ORGANIZATION], [NAME], [RFILE_NUMBER], [REQUEST_DATE], [REQUEST_SOURCE_DESCRIPTION], [IS_EXPROPRIATION], [RESEARCH_COMPLETION_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_H_ID_SEQ]) as [_RESEARCH_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AQFPPT_I_S_I_TR] ON PIMS_ACQ_FL_PERSON_PROFILE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_FL_PERSON_PROFILE_TYPE ("ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RGNUSR_A_S_IUD_TR] ON PIMS_REGION_USER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_REGION_USER_HIST set END_DATE_HIST = @curr_date where REGION_USER_ID in (select REGION_USER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_REGION_USER_HIST ([REGION_USER_ID], [REGION_CODE], [USER_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _REGION_USER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [REGION_USER_ID], [REGION_CODE], [USER_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_REGION_USER_H_ID_SEQ]) as [_REGION_USER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQPFS_I_S_I_TR] ON PIMS_ACQ_PHYS_FILE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQ_PHYS_FILE_STATUS_TYPE ("ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ROLCLM_A_S_IUD_TR] ON PIMS_ROLE_CLAIM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ROLE_CLAIM_HIST set END_DATE_HIST = @curr_date where ROLE_CLAIM_ID in (select ROLE_CLAIM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ROLE_CLAIM_HIST ([ROLE_CLAIM_ID], [ROLE_ID], [CLAIM_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ROLE_CLAIM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ROLE_CLAIM_ID], [ROLE_ID], [CLAIM_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ROLE_CLAIM_H_ID_SEQ]) as [_ROLE_CLAIM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQAIN_I_S_I_TR] ON PIMS_ACQUISITION_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_ACTIVITY_INSTANCE ("ACQUISITION_ACTIVITY_INSTANCE_ID",
      "ACQUISITION_FILE_ID",
      "ACTIVITY_INSTANCE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_ACTIVITY_INSTANCE_ID",
      "ACQUISITION_FILE_ID",
      "ACTIVITY_INSTANCE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ROLE_A_S_IUD_TR] ON PIMS_ROLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ROLE_HIST set END_DATE_HIST = @curr_date where ROLE_ID in (select ROLE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ROLE_HIST ([ROLE_ID], [ROLE_UID], [KEYCLOAK_GROUP_ID], [NAME], [DESCRIPTION], [IS_PUBLIC], [IS_DISABLED], [SORT_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ROLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ROLE_ID], [ROLE_UID], [KEYCLOAK_GROUP_ID], [NAME], [DESCRIPTION], [IS_PUBLIC], [IS_DISABLED], [SORT_ORDER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ROLE_H_ID_SEQ]) as [_ROLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_I_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE ("ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "MINISTRY_PROJECT_NUMBER",
      "MINISTRY_PROJECT_NAME",
      "CPS_PRODUCT_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUMBER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "MINISTRY_PROJECT_NUMBER",
      "MINISTRY_PROJECT_NAME",
      "CPS_PRODUCT_CODE",
      "FILE_NAME",
      "FILE_NO",
      "FILE_NUMBER",
      "FUNDING_OTHER",
      "ASSIGNED_DATE",
      "DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSCHAI_A_S_IUD_TR] ON PIMS_RESEARCH_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where RESEARCH_ACTIVITY_INSTANCE_ID in (select RESEARCH_ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST ([RESEARCH_ACTIVITY_INSTANCE_ID], [ACTIVITY_INSTANCE_ID], [RESEARCH_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_ACTIVITY_INSTANCE_ID], [ACTIVITY_INSTANCE_ID], [RESEARCH_FILE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_RESEARCH_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQPER_I_S_I_TR] ON PIMS_ACQUISITION_FILE_PERSON INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE_PERSON ("ACQUISITION_FILE_PERSON_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_FILE_PERSON_ID",
      "ACQUISITION_FILE_ID",
      "PERSON_ID",
      "ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSFLPR_A_S_IUD_TR] ON PIMS_RESEARCH_FILE_PURPOSE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_RESEARCH_FILE_PURPOSE_HIST set END_DATE_HIST = @curr_date where RESEARCH_FILE_PURPOSE_ID in (select RESEARCH_FILE_PURPOSE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_RESEARCH_FILE_PURPOSE_HIST ([RESEARCH_FILE_PURPOSE_ID], [RESEARCH_FILE_ID], [RESEARCH_PURPOSE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _RESEARCH_FILE_PURPOSE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [RESEARCH_FILE_PURPOSE_ID], [RESEARCH_FILE_ID], [RESEARCH_PURPOSE_TYPE_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_RESEARCH_FILE_PURPOSE_H_ID_SEQ]) as [_RESEARCH_FILE_PURPOSE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQFST_I_S_I_TR] ON PIMS_ACQUISITION_FILE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FILE_STATUS_TYPE ("ACQUISITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQUISITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SCDPHL_A_S_IUD_TR] ON PIMS_SECURITY_DEPOSIT_HOLDER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_HOLDER_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_HOLDER_ID in (select SECURITY_DEPOSIT_HOLDER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_HOLDER_HIST ([SECURITY_DEPOSIT_HOLDER_ID], [SECURITY_DEPOSIT_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_HOLDER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_HOLDER_ID], [SECURITY_DEPOSIT_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER_H_ID_SEQ]) as [_SECURITY_DEPOSIT_HOLDER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQFTY_I_S_I_TR] ON PIMS_ACQUISITION_FUNDING_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_FUNDING_TYPE ("ACQUISITION_FUNDING_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQUISITION_FUNDING_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SCDPRH_A_S_IUD_TR] ON PIMS_SECURITY_DEPOSIT_RETURN_HOLDER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_RETURN_HOLDER_ID in (select SECURITY_DEPOSIT_RETURN_HOLDER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST ([SECURITY_DEPOSIT_RETURN_HOLDER_ID], [SECURITY_DEPOSIT_RETURN_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_RETURN_HOLDER_ID], [SECURITY_DEPOSIT_RETURN_ID], [PERSON_ID], [ORGANIZATION_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_H_ID_SEQ]) as [_SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_I_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_OWNER ("ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID",
      "ADDRESS_ID",
      "LAST_NAME_OR_CORP_NAME_1",
      "LAST_NAME_OR_CORP_NAME_2",
      "GIVEN_NAME",
      "INCORPORATION_NUMBER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID",
      "ADDRESS_ID",
      "LAST_NAME_OR_CORP_NAME_1",
      "LAST_NAME_OR_CORP_NAME_2",
      "GIVEN_NAME",
      "INCORPORATION_NUMBER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SDRTRN_A_S_IUD_TR] ON PIMS_SECURITY_DEPOSIT_RETURN FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_RETURN_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_RETURN_ID in (select SECURITY_DEPOSIT_RETURN_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_RETURN_HIST ([SECURITY_DEPOSIT_RETURN_ID], [SECURITY_DEPOSIT_ID], [TERMINATION_DATE], [CLAIMS_AGAINST], [RETURN_AMOUNT], [RETURN_DATE], [INTEREST_PAID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_RETURN_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_RETURN_ID], [SECURITY_DEPOSIT_ID], [TERMINATION_DATE], [CLAIMS_AGAINST], [RETURN_AMOUNT], [RETURN_DATE], [INTEREST_PAID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_H_ID_SEQ]) as [_SECURITY_DEPOSIT_RETURN_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQTYP_I_S_I_TR] ON PIMS_ACQUISITION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACQUISITION_TYPE ("ACQUISITION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACQUISITION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SECDEP_A_S_IUD_TR] ON PIMS_SECURITY_DEPOSIT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_SECURITY_DEPOSIT_HIST set END_DATE_HIST = @curr_date where SECURITY_DEPOSIT_ID in (select SECURITY_DEPOSIT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_SECURITY_DEPOSIT_HIST ([SECURITY_DEPOSIT_ID], [LEASE_ID], [SECURITY_DEPOSIT_TYPE_CODE], [OTHER_DEPOSIT_TYPE_DESC], [DESCRIPTION], [AMOUNT_PAID], [DEPOSIT_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _SECURITY_DEPOSIT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SECURITY_DEPOSIT_ID], [LEASE_ID], [SECURITY_DEPOSIT_TYPE_CODE], [OTHER_DEPOSIT_TYPE_DESC], [DESCRIPTION], [AMOUNT_PAID], [DEPOSIT_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_SECURITY_DEPOSIT_H_ID_SEQ]) as [_SECURITY_DEPOSIT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AIPAFL_I_S_I_TR] ON PIMS_ACT_INST_PROP_ACQ_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACT_INST_PROP_ACQ_FILE ("ACT_INST_PROP_ACQ_FILE_ID",
      "ACTIVITY_INSTANCE_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACT_INST_PROP_ACQ_FILE_ID",
      "ACTIVITY_INSTANCE_ID",
      "PROPERTY_ACQUISITION_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_STAVBL_A_S_IUD_TR] ON PIMS_STATIC_VARIABLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_STATIC_VARIABLE_HIST set END_DATE_HIST = @curr_date where STATIC_VARIABLE_NAME in (select STATIC_VARIABLE_NAME from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_STATIC_VARIABLE_HIST ([STATIC_VARIABLE_NAME], [STATIC_VARIABLE_VALUE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _STATIC_VARIABLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [STATIC_VARIABLE_NAME], [STATIC_VARIABLE_VALUE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_STATIC_VARIABLE_H_ID_SEQ]) as [_STATIC_VARIABLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AIPRFL_I_S_I_TR] ON PIMS_ACT_INST_PROP_RSRCH_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACT_INST_PROP_RSRCH_FILE ("ACT_INST_PROP_RSRCH_FILE_ID",
      "ACTIVITY_INSTANCE_ID",
      "PROPERTY_RESEARCH_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACT_INST_PROP_RSRCH_FILE_ID",
      "ACTIVITY_INSTANCE_ID",
      "PROPERTY_RESEARCH_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_TENANT_A_S_IUD_TR] ON PIMS_LEASE_TENANT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_TENANT_HIST set END_DATE_HIST = @curr_date where LEASE_TENANT_ID in (select LEASE_TENANT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_TENANT_HIST ([LEASE_TENANT_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [LESSOR_TYPE_CODE], [PRIMARY_CONTACT_ID], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_TENANT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_TENANT_ID], [LEASE_ID], [PERSON_ID], [ORGANIZATION_ID], [LESSOR_TYPE_CODE], [PRIMARY_CONTACT_ID], [NOTE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_TENANT_H_ID_SEQ]) as [_LEASE_TENANT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTINS_I_S_I_TR] ON PIMS_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_INSTANCE ("ACTIVITY_INSTANCE_ID",
      "ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "ACTIVITY_DATA_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_INSTANCE_ID",
      "ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "ACTIVITY_DATA_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USER_A_S_IUD_TR] ON PIMS_USER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_USER_HIST set END_DATE_HIST = @curr_date where USER_ID in (select USER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_USER_HIST ([USER_ID], [PERSON_ID], [BUSINESS_IDENTIFIER_VALUE], [GUID_IDENTIFIER_VALUE], [POSITION], [NOTE], [LAST_LOGIN], [APPROVED_BY_ID], [ISSUE_DATE], [EXPIRY_DATE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _USER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ID], [PERSON_ID], [BUSINESS_IDENTIFIER_VALUE], [GUID_IDENTIFIER_VALUE], [POSITION], [NOTE], [LAST_LOGIN], [APPROVED_BY_ID], [ISSUE_DATE], [EXPIRY_DATE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_USER_H_ID_SEQ]) as [_USER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTDOC_I_S_I_TR] ON PIMS_ACTIVITY_INSTANCE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_INSTANCE_DOCUMENT ("ACTIVITY_INSTANCE_DOCUMENT_ID",
      "ACTIVITY_INSTANCE_ID",
      "DOCUMENT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_INSTANCE_DOCUMENT_ID",
      "ACTIVITY_INSTANCE_ID",
      "DOCUMENT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USERRL_A_S_IUD_TR] ON PIMS_USER_ROLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_USER_ROLE_HIST set END_DATE_HIST = @curr_date where USER_ROLE_ID in (select USER_ROLE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_USER_ROLE_HIST ([USER_ROLE_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _USER_ROLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ROLE_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_USER_ROLE_H_ID_SEQ]) as [_USER_ROLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTINN_I_S_I_TR] ON PIMS_ACTIVITY_INSTANCE_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_INSTANCE_NOTE ("PIMS_ACTIVITY_INSTANCE_NOTE_ID",
      "ACTIVITY_INSTANCE_ID",
      "NOTE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PIMS_ACTIVITY_INSTANCE_NOTE_ID",
      "ACTIVITY_INSTANCE_ID",
      "NOTE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_USRORG_A_S_IUD_TR] ON PIMS_USER_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_USER_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where USER_ORGANIZATION_ID in (select USER_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_USER_ORGANIZATION_HIST ([USER_ORGANIZATION_ID], [ORGANIZATION_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _USER_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ORGANIZATION_ID], [ORGANIZATION_ID], [USER_ID], [ROLE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_USER_ORGANIZATION_H_ID_SEQ]) as [_USER_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTIST_I_S_I_TR] ON PIMS_ACTIVITY_INSTANCE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_INSTANCE_STATUS_TYPE ("ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTTMP_I_S_I_TR] ON PIMS_ACTIVITY_TEMPLATE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_TEMPLATE ("ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_TEMPLATE_TYPE_CODE",
      "ACTIVITY_TEMPLATE_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_TEMPLATE_TYPE_CODE",
      "ACTIVITY_TEMPLATE_JSON",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACRQST_I_S_U_TR] ON PIMS_ACCESS_REQUEST INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACCESS_REQUEST_ID = deleted.ACCESS_REQUEST_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACCESS_REQUEST
    set "ACCESS_REQUEST_ID" = inserted."ACCESS_REQUEST_ID",
      "USER_ID" = inserted."USER_ID",
      "ROLE_ID" = inserted."ROLE_ID",
      "ACCESS_REQUEST_STATUS_TYPE_CODE" = inserted."ACCESS_REQUEST_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST
    inner join inserted
    on (PIMS_ACCESS_REQUEST.ACCESS_REQUEST_ID = inserted.ACCESS_REQUEST_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTMDO_I_S_I_TR] ON PIMS_ACTIVITY_TEMPLATE_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_TEMPLATE_DOCUMENT ("ACTIVITY_TEMPLATE_DOCUMENT_ID",
      "DOCUMENT_ID",
      "ACTIVITY_TEMPLATE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ACTIVITY_TEMPLATE_DOCUMENT_ID",
      "DOCUMENT_ID",
      "ACTIVITY_TEMPLATE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACRQOR_I_S_U_TR] ON PIMS_ACCESS_REQUEST_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACCESS_REQUEST_ORGANIZATION_ID = deleted.ACCESS_REQUEST_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACCESS_REQUEST_ORGANIZATION
    set "ACCESS_REQUEST_ORGANIZATION_ID" = inserted."ACCESS_REQUEST_ORGANIZATION_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "ACCESS_REQUEST_ID" = inserted."ACCESS_REQUEST_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST_ORGANIZATION
    inner join inserted
    on (PIMS_ACCESS_REQUEST_ORGANIZATION.ACCESS_REQUEST_ORGANIZATION_ID = inserted.ACCESS_REQUEST_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTTTY_I_S_I_TR] ON PIMS_ACTIVITY_TEMPLATE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ACTIVITY_TEMPLATE_TYPE ("ACTIVITY_TEMPLATE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ACTIVITY_TEMPLATE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ARQSTT_I_S_U_TR] ON PIMS_ACCESS_REQUEST_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACCESS_REQUEST_STATUS_TYPE_CODE = deleted.ACCESS_REQUEST_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACCESS_REQUEST_STATUS_TYPE
    set "ACCESS_REQUEST_STATUS_TYPE_CODE" = inserted."ACCESS_REQUEST_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACCESS_REQUEST_STATUS_TYPE
    inner join inserted
    on (PIMS_ACCESS_REQUEST_STATUS_TYPE.ACCESS_REQUEST_STATUS_TYPE_CODE = inserted.ACCESS_REQUEST_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ADDRSS_I_S_I_TR] ON PIMS_ADDRESS INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ADDRESS ("ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "STREET_ADDRESS_1",
      "STREET_ADDRESS_2",
      "STREET_ADDRESS_3",
      "MUNICIPALITY_NAME",
      "POSTAL_CODE",
      "OTHER_COUNTRY",
      "LATITUDE",
      "LONGITUDE",
      "COMMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "STREET_ADDRESS_1",
      "STREET_ADDRESS_2",
      "STREET_ADDRESS_3",
      "MUNICIPALITY_NAME",
      "POSTAL_CODE",
      "OTHER_COUNTRY",
      "LATITUDE",
      "LONGITUDE",
      "COMMENT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AQFPPT_I_S_U_TR] ON PIMS_ACQ_FL_PERSON_PROFILE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_FL_PERSON_PROFILE_TYPE_CODE = deleted.ACQ_FL_PERSON_PROFILE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_FL_PERSON_PROFILE_TYPE
    set "ACQ_FL_PERSON_PROFILE_TYPE_CODE" = inserted."ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_FL_PERSON_PROFILE_TYPE
    inner join inserted
    on (PIMS_ACQ_FL_PERSON_PROFILE_TYPE.ACQ_FL_PERSON_PROFILE_TYPE_CODE = inserted.ACQ_FL_PERSON_PROFILE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ADUSGT_I_S_I_TR] ON PIMS_ADDRESS_USAGE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ADDRESS_USAGE_TYPE ("ADDRESS_USAGE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ADDRESS_USAGE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQPFS_I_S_U_TR] ON PIMS_ACQ_PHYS_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQ_PHYS_FILE_STATUS_TYPE_CODE = deleted.ACQ_PHYS_FILE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQ_PHYS_FILE_STATUS_TYPE
    set "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQ_PHYS_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_ACQ_PHYS_FILE_STATUS_TYPE.ACQ_PHYS_FILE_STATUS_TYPE_CODE = inserted.ACQ_PHYS_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ARUNIT_I_S_I_TR] ON PIMS_AREA_UNIT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_AREA_UNIT_TYPE ("AREA_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "AREA_UNIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQAIN_I_S_U_TR] ON PIMS_ACQUISITION_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_ACTIVITY_INSTANCE_ID = deleted.ACQUISITION_ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_ACTIVITY_INSTANCE
    set "ACQUISITION_ACTIVITY_INSTANCE_ID" = inserted."ACQUISITION_ACTIVITY_INSTANCE_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_ACQUISITION_ACTIVITY_INSTANCE.ACQUISITION_ACTIVITY_INSTANCE_ID = inserted.ACQUISITION_ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CLMTYP_I_S_I_TR] ON PIMS_CLAIM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CLAIM ("CLAIM_ID",
      "CLAIM_UID",
      "KEYCLOAK_ROLE_ID",
      "NAME",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "CLAIM_ID",
      "CLAIM_UID",
      "KEYCLOAK_ROLE_ID",
      "NAME",
      "DESCRIPTION",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQNFL_I_S_U_TR] ON PIMS_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_ID = deleted.ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE
    set "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "ACQ_PHYS_FILE_STATUS_TYPE_CODE" = inserted."ACQ_PHYS_FILE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "MINISTRY_PROJECT_NUMBER" = inserted."MINISTRY_PROJECT_NUMBER",
      "MINISTRY_PROJECT_NAME" = inserted."MINISTRY_PROJECT_NAME",
      "CPS_PRODUCT_CODE" = inserted."CPS_PRODUCT_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_NO" = inserted."FILE_NO",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "FUNDING_OTHER" = inserted."FUNDING_OTHER",
      "ASSIGNED_DATE" = inserted."ASSIGNED_DATE",
      "DELIVERY_DATE" = inserted."DELIVERY_DATE",
      "PAIMS_ACQUISITION_FILE_ID" = inserted."PAIMS_ACQUISITION_FILE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE
    inner join inserted
    on (PIMS_ACQUISITION_FILE.ACQUISITION_FILE_ID = inserted.ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CNTMTH_I_S_I_TR] ON PIMS_CONTACT_METHOD INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CONTACT_METHOD ("CONTACT_METHOD_ID",
      "CONTACT_METHOD_TYPE_CODE",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONTACT_METHOD_VALUE",
      "IS_PREFERRED_METHOD",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "CONTACT_METHOD_ID",
      "CONTACT_METHOD_TYPE_CODE",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONTACT_METHOD_VALUE",
      "IS_PREFERRED_METHOD",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQPER_I_S_U_TR] ON PIMS_ACQUISITION_FILE_PERSON INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_PERSON_ID = deleted.ACQUISITION_FILE_PERSON_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE_PERSON
    set "ACQUISITION_FILE_PERSON_ID" = inserted."ACQUISITION_FILE_PERSON_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ACQ_FL_PERSON_PROFILE_TYPE_CODE" = inserted."ACQ_FL_PERSON_PROFILE_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE_PERSON
    inner join inserted
    on (PIMS_ACQUISITION_FILE_PERSON.ACQUISITION_FILE_PERSON_ID = inserted.ACQUISITION_FILE_PERSON_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CNTMTT_I_S_I_TR] ON PIMS_CONTACT_METHOD_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_CONTACT_METHOD_TYPE ("CONTACT_METHOD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "CONTACT_METHOD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQFST_I_S_U_TR] ON PIMS_ACQUISITION_FILE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FILE_STATUS_TYPE_CODE = deleted.ACQUISITION_FILE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FILE_STATUS_TYPE
    set "ACQUISITION_FILE_STATUS_TYPE_CODE" = inserted."ACQUISITION_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FILE_STATUS_TYPE
    inner join inserted
    on (PIMS_ACQUISITION_FILE_STATUS_TYPE.ACQUISITION_FILE_STATUS_TYPE_CODE = inserted.ACQUISITION_FILE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CNTRY_I_S_I_TR] ON PIMS_COUNTRY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_COUNTRY ("COUNTRY_ID",
      "COUNTRY_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "COUNTRY_ID",
      "COUNTRY_CODE",
      "DESCRIPTION",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQFTY_I_S_U_TR] ON PIMS_ACQUISITION_FUNDING_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_FUNDING_TYPE_CODE = deleted.ACQUISITION_FUNDING_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_FUNDING_TYPE
    set "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_FUNDING_TYPE
    inner join inserted
    on (PIMS_ACQUISITION_FUNDING_TYPE.ACQUISITION_FUNDING_TYPE_CODE = inserted.ACQUISITION_FUNDING_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PIDSRT_I_S_I_TR] ON PIMS_DATA_SOURCE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DATA_SOURCE_TYPE ("DATA_SOURCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DATA_SOURCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQOWN_I_S_U_TR] ON PIMS_ACQUISITION_OWNER INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_OWNER_ID = deleted.ACQUISITION_OWNER_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_OWNER
    set "ACQUISITION_OWNER_ID" = inserted."ACQUISITION_OWNER_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "LAST_NAME_OR_CORP_NAME_1" = inserted."LAST_NAME_OR_CORP_NAME_1",
      "LAST_NAME_OR_CORP_NAME_2" = inserted."LAST_NAME_OR_CORP_NAME_2",
      "GIVEN_NAME" = inserted."GIVEN_NAME",
      "INCORPORATION_NUMBER" = inserted."INCORPORATION_NUMBER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_OWNER
    inner join inserted
    on (PIMS_ACQUISITION_OWNER.ACQUISITION_OWNER_ID = inserted.ACQUISITION_OWNER_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSTRCT_I_S_I_TR] ON PIMS_DISTRICT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISTRICT ("DISTRICT_CODE",
      "REGION_CODE",
      "DISTRICT_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DISTRICT_CODE",
      "REGION_CODE",
      "DISTRICT_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQTYP_I_S_U_TR] ON PIMS_ACQUISITION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACQUISITION_TYPE_CODE = deleted.ACQUISITION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACQUISITION_TYPE
    set "ACQUISITION_TYPE_CODE" = inserted."ACQUISITION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACQUISITION_TYPE
    inner join inserted
    on (PIMS_ACQUISITION_TYPE.ACQUISITION_TYPE_CODE = inserted.ACQUISITION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCMNT_I_S_I_TR] ON PIMS_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT ("DOCUMENT_ID",
      "DOCUMENT_TYPE_ID",
      "DOCUMENT_STATUS_TYPE_CODE",
      "FILE_NAME",
      "MAYAN_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DOCUMENT_ID",
      "DOCUMENT_TYPE_ID",
      "DOCUMENT_STATUS_TYPE_CODE",
      "FILE_NAME",
      "MAYAN_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AIPAFL_I_S_U_TR] ON PIMS_ACT_INST_PROP_ACQ_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACT_INST_PROP_ACQ_FILE_ID = deleted.ACT_INST_PROP_ACQ_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACT_INST_PROP_ACQ_FILE
    set "ACT_INST_PROP_ACQ_FILE_ID" = inserted."ACT_INST_PROP_ACQ_FILE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACT_INST_PROP_ACQ_FILE
    inner join inserted
    on (PIMS_ACT_INST_PROP_ACQ_FILE.ACT_INST_PROP_ACQ_FILE_ID = inserted.ACT_INST_PROP_ACQ_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCSTY_I_S_I_TR] ON PIMS_DOCUMENT_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_STATUS_TYPE ("DOCUMENT_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "DOCUMENT_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_AIPRFL_I_S_U_TR] ON PIMS_ACT_INST_PROP_RSRCH_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACT_INST_PROP_RSRCH_FILE_ID = deleted.ACT_INST_PROP_RSRCH_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACT_INST_PROP_RSRCH_FILE
    set "ACT_INST_PROP_RSRCH_FILE_ID" = inserted."ACT_INST_PROP_RSRCH_FILE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "PROPERTY_RESEARCH_FILE_ID" = inserted."PROPERTY_RESEARCH_FILE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACT_INST_PROP_RSRCH_FILE
    inner join inserted
    on (PIMS_ACT_INST_PROP_RSRCH_FILE.ACT_INST_PROP_RSRCH_FILE_ID = inserted.ACT_INST_PROP_RSRCH_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCTYP_I_S_I_TR] ON PIMS_DOCUMENT_TYP INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DOCUMENT_TYP ("DOCUMENT_TYPE_ID",
      "MAYAN_ID",
      "DOCUMENT_TYPE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DOCUMENT_TYPE_ID",
      "MAYAN_ID",
      "DOCUMENT_TYPE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTINS_I_S_U_TR] ON PIMS_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_INSTANCE_ID = deleted.ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_INSTANCE
    set "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "ACTIVITY_TEMPLATE_ID" = inserted."ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_INSTANCE_STATUS_TYPE_CODE" = inserted."ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "ACTIVITY_DATA_JSON" = inserted."ACTIVITY_DATA_JSON",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_ACTIVITY_INSTANCE.ACTIVITY_INSTANCE_ID = inserted.ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_FNCTYP_I_S_I_TR] ON PIMS_FENCE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_FENCE_TYPE ("FENCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "FENCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTDOC_I_S_U_TR] ON PIMS_ACTIVITY_INSTANCE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_INSTANCE_DOCUMENT_ID = deleted.ACTIVITY_INSTANCE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_INSTANCE_DOCUMENT
    set "ACTIVITY_INSTANCE_DOCUMENT_ID" = inserted."ACTIVITY_INSTANCE_DOCUMENT_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_INSTANCE_DOCUMENT
    inner join inserted
    on (PIMS_ACTIVITY_INSTANCE_DOCUMENT.ACTIVITY_INSTANCE_DOCUMENT_ID = inserted.ACTIVITY_INSTANCE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_INSRNC_I_S_I_TR] ON PIMS_INSURANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INSURANCE ("INSURANCE_ID",
      "LEASE_ID",
      "INSURANCE_TYPE_CODE",
      "OTHER_INSURANCE_TYPE",
      "COVERAGE_DESCRIPTION",
      "COVERAGE_LIMIT",
      "IS_INSURANCE_IN_PLACE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "INSURANCE_ID",
      "LEASE_ID",
      "INSURANCE_TYPE_CODE",
      "OTHER_INSURANCE_TYPE",
      "COVERAGE_DESCRIPTION",
      "COVERAGE_LIMIT",
      "IS_INSURANCE_IN_PLACE",
      "EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTINN_I_S_U_TR] ON PIMS_ACTIVITY_INSTANCE_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PIMS_ACTIVITY_INSTANCE_NOTE_ID = deleted.PIMS_ACTIVITY_INSTANCE_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_INSTANCE_NOTE
    set "PIMS_ACTIVITY_INSTANCE_NOTE_ID" = inserted."PIMS_ACTIVITY_INSTANCE_NOTE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_INSTANCE_NOTE
    inner join inserted
    on (PIMS_ACTIVITY_INSTANCE_NOTE.PIMS_ACTIVITY_INSTANCE_NOTE_ID = inserted.PIMS_ACTIVITY_INSTANCE_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_INSPYT_I_S_I_TR] ON PIMS_INSURANCE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_INSURANCE_TYPE ("INSURANCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "INSURANCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTIST_I_S_U_TR] ON PIMS_ACTIVITY_INSTANCE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_INSTANCE_STATUS_TYPE_CODE = deleted.ACTIVITY_INSTANCE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_INSTANCE_STATUS_TYPE
    set "ACTIVITY_INSTANCE_STATUS_TYPE_CODE" = inserted."ACTIVITY_INSTANCE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_INSTANCE_STATUS_TYPE
    inner join inserted
    on (PIMS_ACTIVITY_INSTANCE_STATUS_TYPE.ACTIVITY_INSTANCE_STATUS_TYPE_CODE = inserted.ACTIVITY_INSTANCE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LNSRVT_I_S_I_TR] ON PIMS_LAND_SURVEYOR_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LAND_SURVEYOR_TYPE ("LAND_SURVEYOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LAND_SURVEYOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTTMP_I_S_U_TR] ON PIMS_ACTIVITY_TEMPLATE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_TEMPLATE_ID = deleted.ACTIVITY_TEMPLATE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_TEMPLATE
    set "ACTIVITY_TEMPLATE_ID" = inserted."ACTIVITY_TEMPLATE_ID",
      "ACTIVITY_TEMPLATE_TYPE_CODE" = inserted."ACTIVITY_TEMPLATE_TYPE_CODE",
      "ACTIVITY_TEMPLATE_JSON" = inserted."ACTIVITY_TEMPLATE_JSON",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_TEMPLATE
    inner join inserted
    on (PIMS_ACTIVITY_TEMPLATE.ACTIVITY_TEMPLATE_ID = inserted.ACTIVITY_TEMPLATE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_I_TR] ON PIMS_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE ("LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "TFA_FILE_NUMBER",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE",
      "REGION_CODE",
      "L_FILE_NO",
      "TFA_FILE_NO",
      "TFA_FILE_NUMBER",
      "PS_FILE_NO",
      "LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES",
      "MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE",
      "RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE",
      "ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE",
      "INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED",
      "HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTMDO_I_S_U_TR] ON PIMS_ACTIVITY_TEMPLATE_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_TEMPLATE_DOCUMENT_ID = deleted.ACTIVITY_TEMPLATE_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_TEMPLATE_DOCUMENT
    set "ACTIVITY_TEMPLATE_DOCUMENT_ID" = inserted."ACTIVITY_TEMPLATE_DOCUMENT_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "ACTIVITY_TEMPLATE_ID" = inserted."ACTIVITY_TEMPLATE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_TEMPLATE_DOCUMENT
    inner join inserted
    on (PIMS_ACTIVITY_TEMPLATE_DOCUMENT.ACTIVITY_TEMPLATE_DOCUMENT_ID = inserted.ACTIVITY_TEMPLATE_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSACIN_I_S_I_TR] ON PIMS_LEASE_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_ACTIVITY_INSTANCE ("LEASE_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID",
      "LEASE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID",
      "LEASE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTTTY_I_S_U_TR] ON PIMS_ACTIVITY_TEMPLATE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ACTIVITY_TEMPLATE_TYPE_CODE = deleted.ACTIVITY_TEMPLATE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ACTIVITY_TEMPLATE_TYPE
    set "ACTIVITY_TEMPLATE_TYPE_CODE" = inserted."ACTIVITY_TEMPLATE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ACTIVITY_TEMPLATE_TYPE
    inner join inserted
    on (PIMS_ACTIVITY_TEMPLATE_TYPE.ACTIVITY_TEMPLATE_TYPE_CODE = inserted.ACTIVITY_TEMPLATE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSCATT_I_S_I_TR] ON PIMS_LEASE_CATEGORY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_CATEGORY_TYPE ("LEASE_CATEGORY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_CATEGORY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ADDRSS_I_S_U_TR] ON PIMS_ADDRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ADDRESS_ID = deleted.ADDRESS_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ADDRESS
    set "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROVINCE_STATE_ID" = inserted."PROVINCE_STATE_ID",
      "COUNTRY_ID" = inserted."COUNTRY_ID",
      "STREET_ADDRESS_1" = inserted."STREET_ADDRESS_1",
      "STREET_ADDRESS_2" = inserted."STREET_ADDRESS_2",
      "STREET_ADDRESS_3" = inserted."STREET_ADDRESS_3",
      "MUNICIPALITY_NAME" = inserted."MUNICIPALITY_NAME",
      "POSTAL_CODE" = inserted."POSTAL_CODE",
      "OTHER_COUNTRY" = inserted."OTHER_COUNTRY",
      "LATITUDE" = inserted."LATITUDE",
      "LONGITUDE" = inserted."LONGITUDE",
      "COMMENT" = inserted."COMMENT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ADDRESS
    inner join inserted
    on (PIMS_ADDRESS.ADDRESS_ID = inserted.ADDRESS_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LINITT_I_S_I_TR] ON PIMS_LEASE_INITIATOR_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_INITIATOR_TYPE ("LEASE_INITIATOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_INITIATOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ADUSGT_I_S_U_TR] ON PIMS_ADDRESS_USAGE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ADDRESS_USAGE_TYPE_CODE = deleted.ADDRESS_USAGE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ADDRESS_USAGE_TYPE
    set "ADDRESS_USAGE_TYPE_CODE" = inserted."ADDRESS_USAGE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ADDRESS_USAGE_TYPE
    inner join inserted
    on (PIMS_ADDRESS_USAGE_TYPE.ADDRESS_USAGE_TYPE_CODE = inserted.ADDRESS_USAGE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LELIST_I_S_I_TR] ON PIMS_LEASE_LICENSE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_LICENSE_TYPE ("LEASE_LICENSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_LICENSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ARUNIT_I_S_U_TR] ON PIMS_AREA_UNIT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.AREA_UNIT_TYPE_CODE = deleted.AREA_UNIT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_AREA_UNIT_TYPE
    set "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_AREA_UNIT_TYPE
    inner join inserted
    on (PIMS_AREA_UNIT_TYPE.AREA_UNIT_TYPE_CODE = inserted.AREA_UNIT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPRTY_I_S_I_TR] ON PIMS_LEASE_PAY_RVBL_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PAY_RVBL_TYPE ("LEASE_PAY_RVBL_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PAY_RVBL_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CLMTYP_I_S_U_TR] ON PIMS_CLAIM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CLAIM_ID = deleted.CLAIM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CLAIM
    set "CLAIM_ID" = inserted."CLAIM_ID",
      "CLAIM_UID" = inserted."CLAIM_UID",
      "KEYCLOAK_ROLE_ID" = inserted."KEYCLOAK_ROLE_ID",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CLAIM
    inner join inserted
    on (PIMS_CLAIM.CLAIM_ID = inserted.CLAIM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPYMT_I_S_I_TR] ON PIMS_LEASE_PAYMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PAYMENT ("LEASE_PAYMENT_ID",
      "LEASE_TERM_ID",
      "LEASE_PAYMENT_METHOD_TYPE_CODE",
      "LEASE_PAYMENT_STATUS_TYPE_CODE",
      "PAYMENT_RECEIVED_DATE",
      "PAYMENT_AMOUNT_PRE_TAX",
      "PAYMENT_AMOUNT_PST",
      "PAYMENT_AMOUNT_GST",
      "PAYMENT_AMOUNT_TOTAL",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_PAYMENT_ID",
      "LEASE_TERM_ID",
      "LEASE_PAYMENT_METHOD_TYPE_CODE",
      "LEASE_PAYMENT_STATUS_TYPE_CODE",
      "PAYMENT_RECEIVED_DATE",
      "PAYMENT_AMOUNT_PRE_TAX",
      "PAYMENT_AMOUNT_PST",
      "PAYMENT_AMOUNT_GST",
      "PAYMENT_AMOUNT_TOTAL",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CNTMTH_I_S_U_TR] ON PIMS_CONTACT_METHOD INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONTACT_METHOD_ID = deleted.CONTACT_METHOD_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONTACT_METHOD
    set "CONTACT_METHOD_ID" = inserted."CONTACT_METHOD_ID",
      "CONTACT_METHOD_TYPE_CODE" = inserted."CONTACT_METHOD_TYPE_CODE",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONTACT_METHOD_VALUE" = inserted."CONTACT_METHOD_VALUE",
      "IS_PREFERRED_METHOD" = inserted."IS_PREFERRED_METHOD",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONTACT_METHOD
    inner join inserted
    on (PIMS_CONTACT_METHOD.CONTACT_METHOD_ID = inserted.CONTACT_METHOD_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPMMT_I_S_I_TR] ON PIMS_LEASE_PAYMENT_METHOD_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PAYMENT_METHOD_TYPE ("LEASE_PAYMENT_METHOD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PAYMENT_METHOD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CNTMTT_I_S_U_TR] ON PIMS_CONTACT_METHOD_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.CONTACT_METHOD_TYPE_CODE = deleted.CONTACT_METHOD_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_CONTACT_METHOD_TYPE
    set "CONTACT_METHOD_TYPE_CODE" = inserted."CONTACT_METHOD_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_CONTACT_METHOD_TYPE
    inner join inserted
    on (PIMS_CONTACT_METHOD_TYPE.CONTACT_METHOD_TYPE_CODE = inserted.CONTACT_METHOD_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LPSTST_I_S_I_TR] ON PIMS_LEASE_PAYMENT_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PAYMENT_STATUS_TYPE ("LEASE_PAYMENT_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PAYMENT_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_CNTRY_I_S_U_TR] ON PIMS_COUNTRY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.COUNTRY_ID = deleted.COUNTRY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_COUNTRY
    set "COUNTRY_ID" = inserted."COUNTRY_ID",
      "COUNTRY_CODE" = inserted."COUNTRY_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_COUNTRY
    inner join inserted
    on (PIMS_COUNTRY.COUNTRY_ID = inserted.COUNTRY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPMTF_I_S_I_TR] ON PIMS_LEASE_PMT_FREQ_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PMT_FREQ_TYPE ("LEASE_PMT_FREQ_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PMT_FREQ_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PIDSRT_I_S_U_TR] ON PIMS_DATA_SOURCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DATA_SOURCE_TYPE_CODE = deleted.DATA_SOURCE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DATA_SOURCE_TYPE
    set "DATA_SOURCE_TYPE_CODE" = inserted."DATA_SOURCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DATA_SOURCE_TYPE
    inner join inserted
    on (PIMS_DATA_SOURCE_TYPE.DATA_SOURCE_TYPE_CODE = inserted.DATA_SOURCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPRGT_I_S_I_TR] ON PIMS_LEASE_PROGRAM_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PROGRAM_TYPE ("LEASE_PROGRAM_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PROGRAM_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DSTRCT_I_S_U_TR] ON PIMS_DISTRICT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISTRICT_CODE = deleted.DISTRICT_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISTRICT
    set "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_NAME" = inserted."DISTRICT_NAME",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISTRICT
    inner join inserted
    on (PIMS_DISTRICT.DISTRICT_CODE = inserted.DISTRICT_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LPRPTY_I_S_I_TR] ON PIMS_LEASE_PURPOSE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_PURPOSE_TYPE ("LEASE_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCMNT_I_S_U_TR] ON PIMS_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_ID = deleted.DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT
    set "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "DOCUMENT_TYPE_ID" = inserted."DOCUMENT_TYPE_ID",
      "DOCUMENT_STATUS_TYPE_CODE" = inserted."DOCUMENT_STATUS_TYPE_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "MAYAN_ID" = inserted."MAYAN_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT
    inner join inserted
    on (PIMS_DOCUMENT.DOCUMENT_ID = inserted.DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LRESPT_I_S_I_TR] ON PIMS_LEASE_RESPONSIBILITY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_RESPONSIBILITY_TYPE ("LEASE_RESPONSIBILITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_RESPONSIBILITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCSTY_I_S_U_TR] ON PIMS_DOCUMENT_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_STATUS_TYPE_CODE = deleted.DOCUMENT_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_STATUS_TYPE
    set "DOCUMENT_STATUS_TYPE_CODE" = inserted."DOCUMENT_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_STATUS_TYPE
    inner join inserted
    on (PIMS_DOCUMENT_STATUS_TYPE.DOCUMENT_STATUS_TYPE_CODE = inserted.DOCUMENT_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSSTYP_I_S_I_TR] ON PIMS_LEASE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_STATUS_TYPE ("LEASE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_DOCTYP_I_S_U_TR] ON PIMS_DOCUMENT_TYP INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DOCUMENT_TYPE_ID = deleted.DOCUMENT_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DOCUMENT_TYP
    set "DOCUMENT_TYPE_ID" = inserted."DOCUMENT_TYPE_ID",
      "MAYAN_ID" = inserted."MAYAN_ID",
      "DOCUMENT_TYPE" = inserted."DOCUMENT_TYPE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DOCUMENT_TYP
    inner join inserted
    on (PIMS_DOCUMENT_TYP.DOCUMENT_TYPE_ID = inserted.DOCUMENT_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_TENANT_I_S_I_TR] ON PIMS_LEASE_TENANT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_TENANT ("LEASE_TENANT_ID",
      "LEASE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "LESSOR_TYPE_CODE",
      "PRIMARY_CONTACT_ID",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_TENANT_ID",
      "LEASE_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "LESSOR_TYPE_CODE",
      "PRIMARY_CONTACT_ID",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_FNCTYP_I_S_U_TR] ON PIMS_FENCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.FENCE_TYPE_CODE = deleted.FENCE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_FENCE_TYPE
    set "FENCE_TYPE_CODE" = inserted."FENCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_FENCE_TYPE
    inner join inserted
    on (PIMS_FENCE_TYPE.FENCE_TYPE_CODE = inserted.FENCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSTERM_I_S_I_TR] ON PIMS_LEASE_TERM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_TERM ("LEASE_TERM_ID",
      "LEASE_ID",
      "LEASE_TERM_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "TERM_START_DATE",
      "TERM_EXPIRY_DATE",
      "TERM_RENEWAL_DATE",
      "PAYMENT AMOUNT",
      "PAYMENT_DUE_DATE",
      "PAYMENT_NOTE",
      "IS_GST_ELIGIBLE",
      "GST_AMOUNT",
      "IS_TERM_EXERCISED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_TERM_ID",
      "LEASE_ID",
      "LEASE_TERM_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE",
      "TERM_START_DATE",
      "TERM_EXPIRY_DATE",
      "TERM_RENEWAL_DATE",
      "PAYMENT AMOUNT",
      "PAYMENT_DUE_DATE",
      "PAYMENT_NOTE",
      "IS_GST_ELIGIBLE",
      "GST_AMOUNT",
      "IS_TERM_EXERCISED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_INSRNC_I_S_U_TR] ON PIMS_INSURANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.INSURANCE_ID = deleted.INSURANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INSURANCE
    set "INSURANCE_ID" = inserted."INSURANCE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "INSURANCE_TYPE_CODE" = inserted."INSURANCE_TYPE_CODE",
      "OTHER_INSURANCE_TYPE" = inserted."OTHER_INSURANCE_TYPE",
      "COVERAGE_DESCRIPTION" = inserted."COVERAGE_DESCRIPTION",
      "COVERAGE_LIMIT" = inserted."COVERAGE_LIMIT",
      "IS_INSURANCE_IN_PLACE" = inserted."IS_INSURANCE_IN_PLACE",
      "EXPIRY_DATE" = inserted."EXPIRY_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INSURANCE
    inner join inserted
    on (PIMS_INSURANCE.INSURANCE_ID = inserted.INSURANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LTRMST_I_S_I_TR] ON PIMS_LEASE_TERM_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_TERM_STATUS_TYPE ("LEASE_TERM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LEASE_TERM_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_INSPYT_I_S_U_TR] ON PIMS_INSURANCE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.INSURANCE_TYPE_CODE = deleted.INSURANCE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_INSURANCE_TYPE
    set "INSURANCE_TYPE_CODE" = inserted."INSURANCE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_INSURANCE_TYPE
    inner join inserted
    on (PIMS_INSURANCE_TYPE.INSURANCE_TYPE_CODE = inserted.INSURANCE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSSRTY_I_S_I_TR] ON PIMS_LESSOR_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LESSOR_TYPE ("LESSOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LESSOR_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LNSRVT_I_S_U_TR] ON PIMS_LAND_SURVEYOR_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LAND_SURVEYOR_TYPE_CODE = deleted.LAND_SURVEYOR_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LAND_SURVEYOR_TYPE
    set "LAND_SURVEYOR_TYPE_CODE" = inserted."LAND_SURVEYOR_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LAND_SURVEYOR_TYPE
    inner join inserted
    on (PIMS_LAND_SURVEYOR_TYPE.LAND_SURVEYOR_TYPE_CODE = inserted.LAND_SURVEYOR_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LTRTYP_I_S_I_TR] ON PIMS_LETTER_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LETTER_TYPE ("LETTER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "LETTER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LEASE_I_S_U_TR] ON PIMS_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_ID = deleted.LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE
    set "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_PAY_RVBL_TYPE_CODE" = inserted."LEASE_PAY_RVBL_TYPE_CODE",
      "LEASE_LICENSE_TYPE_CODE" = inserted."LEASE_LICENSE_TYPE_CODE",
      "LEASE_CATEGORY_TYPE_CODE" = inserted."LEASE_CATEGORY_TYPE_CODE",
      "LEASE_PURPOSE_TYPE_CODE" = inserted."LEASE_PURPOSE_TYPE_CODE",
      "LEASE_PROGRAM_TYPE_CODE" = inserted."LEASE_PROGRAM_TYPE_CODE",
      "LEASE_INITIATOR_TYPE_CODE" = inserted."LEASE_INITIATOR_TYPE_CODE",
      "LEASE_RESPONSIBILITY_TYPE_CODE" = inserted."LEASE_RESPONSIBILITY_TYPE_CODE",
      "LEASE_STATUS_TYPE_CODE" = inserted."LEASE_STATUS_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "L_FILE_NO" = inserted."L_FILE_NO",
      "TFA_FILE_NO" = inserted."TFA_FILE_NO",
      "TFA_FILE_NUMBER" = inserted."TFA_FILE_NUMBER",
      "PS_FILE_NO" = inserted."PS_FILE_NO",
      "LEASE_DESCRIPTION" = inserted."LEASE_DESCRIPTION",
      "LEASE_CATEGORY_OTHER_DESC" = inserted."LEASE_CATEGORY_OTHER_DESC",
      "LEASE_PURPOSE_OTHER_DESC" = inserted."LEASE_PURPOSE_OTHER_DESC",
      "LEASE_NOTES" = inserted."LEASE_NOTES",
      "MOTI_CONTACT" = inserted."MOTI_CONTACT",
      "DOCUMENTATION_REFERENCE" = inserted."DOCUMENTATION_REFERENCE",
      "RETURN_NOTES" = inserted."RETURN_NOTES",
      "OTHER_LEASE_PROGRAM_TYPE" = inserted."OTHER_LEASE_PROGRAM_TYPE",
      "OTHER_LEASE_LICENSE_TYPE" = inserted."OTHER_LEASE_LICENSE_TYPE",
      "OTHER_LEASE_PURPOSE_TYPE" = inserted."OTHER_LEASE_PURPOSE_TYPE",
      "ORIG_START_DATE" = inserted."ORIG_START_DATE",
      "ORIG_EXPIRY_DATE" = inserted."ORIG_EXPIRY_DATE",
      "LEASE_AMOUNT" = inserted."LEASE_AMOUNT",
      "RESPONSIBILITY_EFFECTIVE_DATE" = inserted."RESPONSIBILITY_EFFECTIVE_DATE",
      "INSPECTION_DATE" = inserted."INSPECTION_DATE",
      "INSPECTION_NOTES" = inserted."INSPECTION_NOTES",
      "IS_SUBJECT_TO_RTA" = inserted."IS_SUBJECT_TO_RTA",
      "IS_COMM_BLDG" = inserted."IS_COMM_BLDG",
      "IS_OTHER_IMPROVEMENT" = inserted."IS_OTHER_IMPROVEMENT",
      "IS_EXPIRED" = inserted."IS_EXPIRED",
      "HAS_PHYSICAL_FILE" = inserted."HAS_PHYSICAL_FILE",
      "HAS_DIGITAL_FILE" = inserted."HAS_DIGITAL_FILE",
      "HAS_PHYSICIAL_LICENSE" = inserted."HAS_PHYSICIAL_LICENSE",
      "HAS_DIGITAL_LICENSE" = inserted."HAS_DIGITAL_LICENSE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE
    inner join inserted
    on (PIMS_LEASE.LEASE_ID = inserted.LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_NOTE_I_S_I_TR] ON PIMS_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_NOTE ("NOTE_ID",
      "NOTE_TXT",
      "IS_SYSTEM_GENERATED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "NOTE_ID",
      "NOTE_TXT",
      "IS_SYSTEM_GENERATED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSACIN_I_S_U_TR] ON PIMS_LEASE_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_ACTIVITY_INSTANCE_ID = deleted.LEASE_ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_ACTIVITY_INSTANCE
    set "LEASE_ACTIVITY_INSTANCE_ID" = inserted."LEASE_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_LEASE_ACTIVITY_INSTANCE.LEASE_ACTIVITY_INSTANCE_ID = inserted.LEASE_ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORGIDT_I_S_I_TR] ON PIMS_ORG_IDENTIFIER_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ORG_IDENTIFIER_TYPE ("ORG_IDENTIFIER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ORG_IDENTIFIER_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSCATT_I_S_U_TR] ON PIMS_LEASE_CATEGORY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_CATEGORY_TYPE_CODE = deleted.LEASE_CATEGORY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_CATEGORY_TYPE
    set "LEASE_CATEGORY_TYPE_CODE" = inserted."LEASE_CATEGORY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_CATEGORY_TYPE
    inner join inserted
    on (PIMS_LEASE_CATEGORY_TYPE.LEASE_CATEGORY_TYPE_CODE = inserted.LEASE_CATEGORY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORG_I_S_I_TR] ON PIMS_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ORGANIZATION ("ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME",
      "ORGANIZATION_ALIAS",
      "INCORPORATION_NUMBER",
      "WEBSITE",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME",
      "ORGANIZATION_ALIAS",
      "INCORPORATION_NUMBER",
      "WEBSITE",
      "COMMENT",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LINITT_I_S_U_TR] ON PIMS_LEASE_INITIATOR_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_INITIATOR_TYPE_CODE = deleted.LEASE_INITIATOR_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_INITIATOR_TYPE
    set "LEASE_INITIATOR_TYPE_CODE" = inserted."LEASE_INITIATOR_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_INITIATOR_TYPE
    inner join inserted
    on (PIMS_LEASE_INITIATOR_TYPE.LEASE_INITIATOR_TYPE_CODE = inserted.LEASE_INITIATOR_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORGADD_I_S_I_TR] ON PIMS_ORGANIZATION_ADDRESS INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ORGANIZATION_ADDRESS ("ORGANIZATION_ADDRESS_ID",
      "ORGANIZATION_ID",
      "ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ORGANIZATION_ADDRESS_ID",
      "ORGANIZATION_ID",
      "ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LELIST_I_S_U_TR] ON PIMS_LEASE_LICENSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_LICENSE_TYPE_CODE = deleted.LEASE_LICENSE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_LICENSE_TYPE
    set "LEASE_LICENSE_TYPE_CODE" = inserted."LEASE_LICENSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_LICENSE_TYPE
    inner join inserted
    on (PIMS_LEASE_LICENSE_TYPE.LEASE_LICENSE_TYPE_CODE = inserted.LEASE_LICENSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORGTYP_I_S_I_TR] ON PIMS_ORGANIZATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ORGANIZATION_TYPE ("ORGANIZATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "ORGANIZATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPRTY_I_S_U_TR] ON PIMS_LEASE_PAY_RVBL_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PAY_RVBL_TYPE_CODE = deleted.LEASE_PAY_RVBL_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PAY_RVBL_TYPE
    set "LEASE_PAY_RVBL_TYPE_CODE" = inserted."LEASE_PAY_RVBL_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAY_RVBL_TYPE
    inner join inserted
    on (PIMS_LEASE_PAY_RVBL_TYPE.LEASE_PAY_RVBL_TYPE_CODE = inserted.LEASE_PAY_RVBL_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERSON_I_S_I_TR] ON PIMS_PERSON INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PERSON ("PERSON_ID",
      "SURNAME",
      "FIRST_NAME",
      "MIDDLE_NAMES",
      "NAME_SUFFIX",
      "PREFERRED_NAME",
      "BIRTH_DATE",
      "COMMENT",
      "ADDRESS_COMMENT",
      "USE_ORGANIZATION_ADDRESS",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PERSON_ID",
      "SURNAME",
      "FIRST_NAME",
      "MIDDLE_NAMES",
      "NAME_SUFFIX",
      "PREFERRED_NAME",
      "BIRTH_DATE",
      "COMMENT",
      "ADDRESS_COMMENT",
      "USE_ORGANIZATION_ADDRESS",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPYMT_I_S_U_TR] ON PIMS_LEASE_PAYMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PAYMENT_ID = deleted.LEASE_PAYMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PAYMENT
    set "LEASE_PAYMENT_ID" = inserted."LEASE_PAYMENT_ID",
      "LEASE_TERM_ID" = inserted."LEASE_TERM_ID",
      "LEASE_PAYMENT_METHOD_TYPE_CODE" = inserted."LEASE_PAYMENT_METHOD_TYPE_CODE",
      "LEASE_PAYMENT_STATUS_TYPE_CODE" = inserted."LEASE_PAYMENT_STATUS_TYPE_CODE",
      "PAYMENT_RECEIVED_DATE" = inserted."PAYMENT_RECEIVED_DATE",
      "PAYMENT_AMOUNT_PRE_TAX" = inserted."PAYMENT_AMOUNT_PRE_TAX",
      "PAYMENT_AMOUNT_PST" = inserted."PAYMENT_AMOUNT_PST",
      "PAYMENT_AMOUNT_GST" = inserted."PAYMENT_AMOUNT_GST",
      "PAYMENT_AMOUNT_TOTAL" = inserted."PAYMENT_AMOUNT_TOTAL",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAYMENT
    inner join inserted
    on (PIMS_LEASE_PAYMENT.LEASE_PAYMENT_ID = inserted.LEASE_PAYMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERADD_I_S_I_TR] ON PIMS_PERSON_ADDRESS INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PERSON_ADDRESS ("PERSON_ADDRESS_ID",
      "PERSON_ID",
      "ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PERSON_ADDRESS_ID",
      "PERSON_ID",
      "ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPMMT_I_S_U_TR] ON PIMS_LEASE_PAYMENT_METHOD_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PAYMENT_METHOD_TYPE_CODE = deleted.LEASE_PAYMENT_METHOD_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PAYMENT_METHOD_TYPE
    set "LEASE_PAYMENT_METHOD_TYPE_CODE" = inserted."LEASE_PAYMENT_METHOD_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAYMENT_METHOD_TYPE
    inner join inserted
    on (PIMS_LEASE_PAYMENT_METHOD_TYPE.LEASE_PAYMENT_METHOD_TYPE_CODE = inserted.LEASE_PAYMENT_METHOD_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERORG_I_S_I_TR] ON PIMS_PERSON_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PERSON_ORGANIZATION ("PERSON_ORGANIZATION_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PERSON_ORGANIZATION_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LPSTST_I_S_U_TR] ON PIMS_LEASE_PAYMENT_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PAYMENT_STATUS_TYPE_CODE = deleted.LEASE_PAYMENT_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PAYMENT_STATUS_TYPE
    set "LEASE_PAYMENT_STATUS_TYPE_CODE" = inserted."LEASE_PAYMENT_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PAYMENT_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_PAYMENT_STATUS_TYPE.LEASE_PAYMENT_STATUS_TYPE_CODE = inserted.LEASE_PAYMENT_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PPHSTT_I_S_I_TR] ON PIMS_PPH_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PPH_STATUS_TYPE ("PPH_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PPH_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPMTF_I_S_U_TR] ON PIMS_LEASE_PMT_FREQ_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PMT_FREQ_TYPE_CODE = deleted.LEASE_PMT_FREQ_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PMT_FREQ_TYPE
    set "LEASE_PMT_FREQ_TYPE_CODE" = inserted."LEASE_PMT_FREQ_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PMT_FREQ_TYPE
    inner join inserted
    on (PIMS_LEASE_PMT_FREQ_TYPE.LEASE_PMT_FREQ_TYPE_CODE = inserted.LEASE_PMT_FREQ_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRSPRP_I_S_I_TR] ON PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE ("PRF_PROP_RESEARCH_PURPOSE_ID",
      "PROPERTY_RESEARCH_FILE_ID",
      "PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PRF_PROP_RESEARCH_PURPOSE_ID",
      "PROPERTY_RESEARCH_FILE_ID",
      "PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSPRGT_I_S_U_TR] ON PIMS_LEASE_PROGRAM_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PROGRAM_TYPE_CODE = deleted.LEASE_PROGRAM_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PROGRAM_TYPE
    set "LEASE_PROGRAM_TYPE_CODE" = inserted."LEASE_PROGRAM_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PROGRAM_TYPE
    inner join inserted
    on (PIMS_LEASE_PROGRAM_TYPE.LEASE_PROGRAM_TYPE_CODE = inserted.LEASE_PROGRAM_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPALT_I_S_I_TR] ON PIMS_PROP_PROP_ADJACENT_LAND_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_ADJACENT_LAND_TYPE ("PROP_PROP_ADJACENT_LAND_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROP_PROP_ADJACENT_LAND_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LPRPTY_I_S_U_TR] ON PIMS_LEASE_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_PURPOSE_TYPE_CODE = deleted.LEASE_PURPOSE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_PURPOSE_TYPE
    set "LEASE_PURPOSE_TYPE_CODE" = inserted."LEASE_PURPOSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_PURPOSE_TYPE
    inner join inserted
    on (PIMS_LEASE_PURPOSE_TYPE.LEASE_PURPOSE_TYPE_CODE = inserted.LEASE_PURPOSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRAT_I_S_I_TR] ON PIMS_PROP_PROP_ANOMALY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_ANOMALY_TYPE ("PROP_PROP_ANOMALY_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ANOMALY_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROP_PROP_ANOMALY_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ANOMALY_TYPE_CODE",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_DIRECTORY",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LRESPT_I_S_U_TR] ON PIMS_LEASE_RESPONSIBILITY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_RESPONSIBILITY_TYPE_CODE = deleted.LEASE_RESPONSIBILITY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_RESPONSIBILITY_TYPE
    set "LEASE_RESPONSIBILITY_TYPE_CODE" = inserted."LEASE_RESPONSIBILITY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_RESPONSIBILITY_TYPE
    inner join inserted
    on (PIMS_LEASE_RESPONSIBILITY_TYPE.LEASE_RESPONSIBILITY_TYPE_CODE = inserted.LEASE_RESPONSIBILITY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRRT_I_S_I_TR] ON PIMS_PROP_PROP_ROAD_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_ROAD_TYPE ("PROP_PROP_ROAD_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ROAD_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_PROP_ROAD_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_ROAD_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSSTYP_I_S_U_TR] ON PIMS_LEASE_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_STATUS_TYPE_CODE = deleted.LEASE_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_STATUS_TYPE
    set "LEASE_STATUS_TYPE_CODE" = inserted."LEASE_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_STATUS_TYPE.LEASE_STATUS_TYPE_CODE = inserted.LEASE_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRTT_I_S_I_TR] ON PIMS_PROP_PROP_TENURE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_PROP_TENURE_TYPE ("PROP_PROP_TENURE_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_TENURE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROP_PROP_TENURE_TYPE_ID",
      "PROPERTY_ID",
      "PROPERTY_TENURE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_TENANT_I_S_U_TR] ON PIMS_LEASE_TENANT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_TENANT_ID = deleted.LEASE_TENANT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_TENANT
    set "LEASE_TENANT_ID" = inserted."LEASE_TENANT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "LESSOR_TYPE_CODE" = inserted."LESSOR_TYPE_CODE",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_TENANT
    inner join inserted
    on (PIMS_LEASE_TENANT.LEASE_TENANT_ID = inserted.LEASE_TENANT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RRESPT_I_S_I_TR] ON PIMS_PROP_RESEARCH_PURPOSE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROP_RESEARCH_PURPOSE_TYPE ("PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSTERM_I_S_U_TR] ON PIMS_LEASE_TERM INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_TERM_ID = deleted.LEASE_TERM_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_TERM
    set "LEASE_TERM_ID" = inserted."LEASE_TERM_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "LEASE_TERM_STATUS_TYPE_CODE" = inserted."LEASE_TERM_STATUS_TYPE_CODE",
      "LEASE_PMT_FREQ_TYPE_CODE" = inserted."LEASE_PMT_FREQ_TYPE_CODE",
      "TERM_START_DATE" = inserted."TERM_START_DATE",
      "TERM_EXPIRY_DATE" = inserted."TERM_EXPIRY_DATE",
      "TERM_RENEWAL_DATE" = inserted."TERM_RENEWAL_DATE",
      "PAYMENT AMOUNT" = inserted."PAYMENT AMOUNT",
      "PAYMENT_DUE_DATE" = inserted."PAYMENT_DUE_DATE",
      "PAYMENT_NOTE" = inserted."PAYMENT_NOTE",
      "IS_GST_ELIGIBLE" = inserted."IS_GST_ELIGIBLE",
      "GST_AMOUNT" = inserted."GST_AMOUNT",
      "IS_TERM_EXERCISED" = inserted."IS_TERM_EXERCISED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_TERM
    inner join inserted
    on (PIMS_LEASE_TERM.LEASE_TERM_ID = inserted.LEASE_TERM_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_I_TR] ON PIMS_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY ("PROPERTY_ID",
      "PROPERTY_MANAGER_ID",
      "PROP_MGMT_ORG_ID",
      "PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME",
      "DESCRIPTION",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "SURVEY_PLAN_NUMBER",
      "ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "NOTES",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE",
      "IS_PROVINCIAL_PUBLIC_HWY",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ZONING",
      "ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ID",
      "PROPERTY_MANAGER_ID",
      "PROP_MGMT_ORG_ID",
      "PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME",
      "DESCRIPTION",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "SURVEY_PLAN_NUMBER",
      "ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "NOTES",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE",
      "IS_PROVINCIAL_PUBLIC_HWY",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ZONING",
      "ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LTRMST_I_S_U_TR] ON PIMS_LEASE_TERM_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_TERM_STATUS_TYPE_CODE = deleted.LEASE_TERM_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_TERM_STATUS_TYPE
    set "LEASE_TERM_STATUS_TYPE_CODE" = inserted."LEASE_TERM_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_TERM_STATUS_TYPE
    inner join inserted
    on (PIMS_LEASE_TERM_STATUS_TYPE.LEASE_TERM_STATUS_TYPE_CODE = inserted.LEASE_TERM_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACQF_I_S_I_TR] ON PIMS_PROPERTY_ACQUISITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ACQUISITION_FILE ("PROPERTY_ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_NAME",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_NAME",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LSSRTY_I_S_U_TR] ON PIMS_LESSOR_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LESSOR_TYPE_CODE = deleted.LESSOR_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LESSOR_TYPE
    set "LESSOR_TYPE_CODE" = inserted."LESSOR_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LESSOR_TYPE
    inner join inserted
    on (PIMS_LESSOR_TYPE.LESSOR_TYPE_CODE = inserted.LESSOR_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRADJL_I_S_I_TR] ON PIMS_PROPERTY_ADJACENT_LAND_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ADJACENT_LAND_TYPE ("PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_LTRTYP_I_S_U_TR] ON PIMS_LETTER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LETTER_TYPE_CODE = deleted.LETTER_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LETTER_TYPE
    set "LETTER_TYPE_CODE" = inserted."LETTER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LETTER_TYPE
    inner join inserted
    on (PIMS_LETTER_TYPE.LETTER_TYPE_CODE = inserted.LETTER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRANOM_I_S_I_TR] ON PIMS_PROPERTY_ANOMALY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ANOMALY_TYPE ("PROPERTY_ANOMALY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_ANOMALY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_NOTE_I_S_U_TR] ON PIMS_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.NOTE_ID = deleted.NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_NOTE
    set "NOTE_ID" = inserted."NOTE_ID",
      "NOTE_TXT" = inserted."NOTE_TXT",
      "IS_SYSTEM_GENERATED" = inserted."IS_SYSTEM_GENERATED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_NOTE
    inner join inserted
    on (PIMS_NOTE.NOTE_ID = inserted.NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPCLT_I_S_I_TR] ON PIMS_PROPERTY_CLASSIFICATION_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_CLASSIFICATION_TYPE ("PROPERTY_CLASSIFICATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORGIDT_I_S_U_TR] ON PIMS_ORG_IDENTIFIER_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORG_IDENTIFIER_TYPE_CODE = deleted.ORG_IDENTIFIER_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORG_IDENTIFIER_TYPE
    set "ORG_IDENTIFIER_TYPE_CODE" = inserted."ORG_IDENTIFIER_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORG_IDENTIFIER_TYPE
    inner join inserted
    on (PIMS_ORG_IDENTIFIER_TYPE.ORG_IDENTIFIER_TYPE_CODE = inserted.ORG_IDENTIFIER_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPEVL_I_S_I_TR] ON PIMS_PROPERTY_EVALUATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_EVALUATION ("PROPERTY_EVALUATION_ID",
      "PROPERTY_ID",
      "EVALUATION_DATE",
      "KEY",
      "VALUE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_EVALUATION_ID",
      "PROPERTY_ID",
      "EVALUATION_DATE",
      "KEY",
      "VALUE",
      "NOTE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORG_I_S_U_TR] ON PIMS_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORGANIZATION_ID = deleted.ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORGANIZATION
    set "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRNT_ORGANIZATION_ID" = inserted."PRNT_ORGANIZATION_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "ORGANIZATION_TYPE_CODE" = inserted."ORGANIZATION_TYPE_CODE",
      "ORG_IDENTIFIER_TYPE_CODE" = inserted."ORG_IDENTIFIER_TYPE_CODE",
      "ORGANIZATION_IDENTIFIER" = inserted."ORGANIZATION_IDENTIFIER",
      "ORGANIZATION_NAME" = inserted."ORGANIZATION_NAME",
      "ORGANIZATION_ALIAS" = inserted."ORGANIZATION_ALIAS",
      "INCORPORATION_NUMBER" = inserted."INCORPORATION_NUMBER",
      "WEBSITE" = inserted."WEBSITE",
      "COMMENT" = inserted."COMMENT",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION
    inner join inserted
    on (PIMS_ORGANIZATION.ORGANIZATION_ID = inserted.ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PIMPRV_I_S_I_TR] ON PIMS_PROPERTY_IMPROVEMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_IMPROVEMENT ("PROPERTY_IMPROVEMENT_ID",
      "LEASE_ID",
      "PROPERTY_IMPROVEMENT_TYPE_CODE",
      "IMPROVEMENT_DESCRIPTION",
      "STRUCTURE_SIZE",
      "ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_IMPROVEMENT_ID",
      "LEASE_ID",
      "PROPERTY_IMPROVEMENT_TYPE_CODE",
      "IMPROVEMENT_DESCRIPTION",
      "STRUCTURE_SIZE",
      "ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORGADD_I_S_U_TR] ON PIMS_ORGANIZATION_ADDRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORGANIZATION_ADDRESS_ID = deleted.ORGANIZATION_ADDRESS_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORGANIZATION_ADDRESS
    set "ORGANIZATION_ADDRESS_ID" = inserted."ORGANIZATION_ADDRESS_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE" = inserted."ADDRESS_USAGE_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION_ADDRESS
    inner join inserted
    on (PIMS_ORGANIZATION_ADDRESS.ORGANIZATION_ADDRESS_ID = inserted.ORGANIZATION_ADDRESS_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PIMPRT_I_S_I_TR] ON PIMS_PROPERTY_IMPROVEMENT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_IMPROVEMENT_TYPE ("PROPERTY_IMPROVEMENT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_IMPROVEMENT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ORGTYP_I_S_U_TR] ON PIMS_ORGANIZATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.ORGANIZATION_TYPE_CODE = deleted.ORGANIZATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_ORGANIZATION_TYPE
    set "ORGANIZATION_TYPE_CODE" = inserted."ORGANIZATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_ORGANIZATION_TYPE
    inner join inserted
    on (PIMS_ORGANIZATION_TYPE.ORGANIZATION_TYPE_CODE = inserted.ORGANIZATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PROPLS_I_S_I_TR] ON PIMS_PROPERTY_LEASE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_LEASE ("PROPERTY_LEASE_ID",
      "PROPERTY_ID",
      "LEASE_ID",
      "AREA_UNIT_TYPE_CODE",
      "LEASE_AREA",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_LEASE_ID",
      "PROPERTY_ID",
      "LEASE_ID",
      "AREA_UNIT_TYPE_CODE",
      "LEASE_AREA",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERSON_I_S_U_TR] ON PIMS_PERSON INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PERSON_ID = deleted.PERSON_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PERSON
    set "PERSON_ID" = inserted."PERSON_ID",
      "SURNAME" = inserted."SURNAME",
      "FIRST_NAME" = inserted."FIRST_NAME",
      "MIDDLE_NAMES" = inserted."MIDDLE_NAMES",
      "NAME_SUFFIX" = inserted."NAME_SUFFIX",
      "PREFERRED_NAME" = inserted."PREFERRED_NAME",
      "BIRTH_DATE" = inserted."BIRTH_DATE",
      "COMMENT" = inserted."COMMENT",
      "ADDRESS_COMMENT" = inserted."ADDRESS_COMMENT",
      "USE_ORGANIZATION_ADDRESS" = inserted."USE_ORGANIZATION_ADDRESS",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PERSON
    inner join inserted
    on (PIMS_PERSON.PERSON_ID = inserted.PERSON_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPORG_I_S_I_TR] ON PIMS_PROPERTY_ORGANIZATION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ORGANIZATION ("PROPERTY_ORGANIZATION_ID",
      "PROPERTY_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "IS_DISABLED")
    select "PROPERTY_ORGANIZATION_ID",
      "PROPERTY_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY",
      "IS_DISABLED"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERADD_I_S_U_TR] ON PIMS_PERSON_ADDRESS INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PERSON_ADDRESS_ID = deleted.PERSON_ADDRESS_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PERSON_ADDRESS
    set "PERSON_ADDRESS_ID" = inserted."PERSON_ADDRESS_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "ADDRESS_USAGE_TYPE_CODE" = inserted."ADDRESS_USAGE_TYPE_CODE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PERSON_ADDRESS
    inner join inserted
    on (PIMS_PERSON_ADDRESS.PERSON_ADDRESS_ID = inserted.PERSON_ADDRESS_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRSF_I_S_I_TR] ON PIMS_PROPERTY_PROPERTY_SERVICE_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_PROPERTY_SERVICE_FILE ("PROPERTY_PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_SERVICE_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_SERVICE_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PERORG_I_S_U_TR] ON PIMS_PERSON_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PERSON_ORGANIZATION_ID = deleted.PERSON_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PERSON_ORGANIZATION
    set "PERSON_ORGANIZATION_ID" = inserted."PERSON_ORGANIZATION_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PERSON_ORGANIZATION
    inner join inserted
    on (PIMS_PERSON_ORGANIZATION.PERSON_ORGANIZATION_ID = inserted.PERSON_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRSCRC_I_S_I_TR] ON PIMS_PROPERTY_RESEARCH_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_RESEARCH_FILE ("PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID",
      "RESEARCH_FILE_ID",
      "PROPERTY_NAME",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "IS_LEGAL_OPINION_REQUIRED",
      "IS_LEGAL_OPINION_OBTAINED",
      "DOCUMENT_REFERENCE",
      "RESEARCH_SUMMARY",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID",
      "RESEARCH_FILE_ID",
      "PROPERTY_NAME",
      "DISPLAY_ORDER",
      "IS_DISABLED",
      "IS_LEGAL_OPINION_REQUIRED",
      "IS_LEGAL_OPINION_OBTAINED",
      "DOCUMENT_REFERENCE",
      "RESEARCH_SUMMARY",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PPHSTT_I_S_U_TR] ON PIMS_PPH_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PPH_STATUS_TYPE_CODE = deleted.PPH_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PPH_STATUS_TYPE
    set "PPH_STATUS_TYPE_CODE" = inserted."PPH_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PPH_STATUS_TYPE
    inner join inserted
    on (PIMS_PPH_STATUS_TYPE.PPH_STATUS_TYPE_CODE = inserted.PPH_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRROAD_I_S_I_TR] ON PIMS_PROPERTY_ROAD_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_ROAD_TYPE ("PROPERTY_ROAD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_ROAD_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRSPRP_I_S_U_TR] ON PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PRF_PROP_RESEARCH_PURPOSE_ID = deleted.PRF_PROP_RESEARCH_PURPOSE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE
    set "PRF_PROP_RESEARCH_PURPOSE_ID" = inserted."PRF_PROP_RESEARCH_PURPOSE_ID",
      "PROPERTY_RESEARCH_FILE_ID" = inserted."PROPERTY_RESEARCH_FILE_ID",
      "PROP_RESEARCH_PURPOSE_TYPE_CODE" = inserted."PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE
    inner join inserted
    on (PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE.PRF_PROP_RESEARCH_PURPOSE_ID = inserted.PRF_PROP_RESEARCH_PURPOSE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPSVC_I_S_I_TR] ON PIMS_PROPERTY_SERVICE_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_SERVICE_FILE ("PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_SERVICE_FILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_SERVICE_FILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPALT_I_S_U_TR] ON PIMS_PROP_PROP_ADJACENT_LAND_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_ADJACENT_LAND_TYPE_ID = deleted.PROP_PROP_ADJACENT_LAND_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_ADJACENT_LAND_TYPE
    set "PROP_PROP_ADJACENT_LAND_TYPE_ID" = inserted."PROP_PROP_ADJACENT_LAND_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_ADJACENT_LAND_TYPE_CODE" = inserted."PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ADJACENT_LAND_TYPE
    inner join inserted
    on (PIMS_PROP_PROP_ADJACENT_LAND_TYPE.PROP_PROP_ADJACENT_LAND_TYPE_ID = inserted.PROP_PROP_ADJACENT_LAND_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRSVFT_I_S_I_TR] ON PIMS_PROPERTY_SERVICE_FILE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_SERVICE_FILE_TYPE ("PROPERTY_SERVICE_FILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_SERVICE_FILE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRAT_I_S_U_TR] ON PIMS_PROP_PROP_ANOMALY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_ANOMALY_TYPE_ID = deleted.PROP_PROP_ANOMALY_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_ANOMALY_TYPE
    set "PROP_PROP_ANOMALY_TYPE_ID" = inserted."PROP_PROP_ANOMALY_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_ANOMALY_TYPE_CODE" = inserted."PROPERTY_ANOMALY_TYPE_CODE",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ANOMALY_TYPE
    inner join inserted
    on (PIMS_PROP_PROP_ANOMALY_TYPE.PROP_PROP_ANOMALY_TYPE_ID = inserted.PROP_PROP_ANOMALY_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPSTS_I_S_I_TR] ON PIMS_PROPERTY_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_STATUS_TYPE ("PROPERTY_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRRT_I_S_U_TR] ON PIMS_PROP_PROP_ROAD_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_ROAD_TYPE_ID = deleted.PROP_PROP_ROAD_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_ROAD_TYPE
    set "PROP_PROP_ROAD_TYPE_ID" = inserted."PROP_PROP_ROAD_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_ROAD_TYPE_CODE" = inserted."PROPERTY_ROAD_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_ROAD_TYPE
    inner join inserted
    on (PIMS_PROP_PROP_ROAD_TYPE.PROP_PROP_ROAD_TYPE_ID = inserted.PROP_PROP_ROAD_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPTAX_I_S_I_TR] ON PIMS_PROPERTY_TAX INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_TAX ("PROPERTY_TAX_ID",
      "PROPERTY_ID",
      "PROPERTY_TAX_REMIT_TYPE_CODE",
      "TAX_FOLIO_NO",
      "PAYMENT_AMOUNT",
      "LAST_PAYMENT_DATE",
      "PAYMENT_NOTES",
      "BCTFA_NOTIFICATION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_TAX_ID",
      "PROPERTY_ID",
      "PROPERTY_TAX_REMIT_TYPE_CODE",
      "TAX_FOLIO_NO",
      "PAYMENT_AMOUNT",
      "LAST_PAYMENT_DATE",
      "PAYMENT_NOTES",
      "BCTFA_NOTIFICATION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRTT_I_S_U_TR] ON PIMS_PROP_PROP_TENURE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_PROP_TENURE_TYPE_ID = deleted.PROP_PROP_TENURE_TYPE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_PROP_TENURE_TYPE
    set "PROP_PROP_TENURE_TYPE_ID" = inserted."PROP_PROP_TENURE_TYPE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_TENURE_TYPE_CODE" = inserted."PROPERTY_TENURE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_PROP_TENURE_TYPE
    inner join inserted
    on (PIMS_PROP_PROP_TENURE_TYPE.PROP_PROP_TENURE_TYPE_ID = inserted.PROP_PROP_TENURE_TYPE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PTRMTT_I_S_I_TR] ON PIMS_PROPERTY_TAX_REMIT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_TAX_REMIT_TYPE ("PROPERTY_TAX_REMIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_TAX_REMIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RRESPT_I_S_U_TR] ON PIMS_PROP_RESEARCH_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROP_RESEARCH_PURPOSE_TYPE_CODE = deleted.PROP_RESEARCH_PURPOSE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROP_RESEARCH_PURPOSE_TYPE
    set "PROP_RESEARCH_PURPOSE_TYPE_CODE" = inserted."PROP_RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROP_RESEARCH_PURPOSE_TYPE
    inner join inserted
    on (PIMS_PROP_RESEARCH_PURPOSE_TYPE.PROP_RESEARCH_PURPOSE_TYPE_CODE = inserted.PROP_RESEARCH_PURPOSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPTNR_I_S_I_TR] ON PIMS_PROPERTY_TENURE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_TENURE_TYPE ("PROPERTY_TENURE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_TENURE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_U_TR] ON PIMS_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ID = deleted.PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY
    set "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_MANAGER_ID" = inserted."PROPERTY_MANAGER_ID",
      "PROP_MGMT_ORG_ID" = inserted."PROP_MGMT_ORG_ID",
      "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE" = inserted."PROPERTY_CLASSIFICATION_TYPE_CODE",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE" = inserted."PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE" = inserted."PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE" = inserted."SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE" = inserted."VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE" = inserted."VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE" = inserted."PPH_STATUS_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE" = inserted."PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "PID" = inserted."PID",
      "PIN" = inserted."PIN",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "FILE_NUMBER_SUFFIX" = inserted."FILE_NUMBER_SUFFIX",
      "LAND_AREA" = inserted."LAND_AREA",
      "LAND_LEGAL_DESCRIPTION" = inserted."LAND_LEGAL_DESCRIPTION",
      "BOUNDARY" = inserted."BOUNDARY",
      "LOCATION" = inserted."LOCATION",
      "SURVEY_PLAN_NUMBER" = inserted."SURVEY_PLAN_NUMBER",
      "ENCUMBRANCE_REASON" = inserted."ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT" = inserted."SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE" = inserted."SURPLUS_DECLARATION_DATE",
      "NOTES" = inserted."NOTES",
      "MUNICIPAL_ZONING" = inserted."MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL" = inserted."IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT" = inserted."VOLUMETRIC_MEASUREMENT",
      "IS_OWNED" = inserted."IS_OWNED",
      "IS_PROPERTY_OF_INTEREST" = inserted."IS_PROPERTY_OF_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES" = inserted."IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE" = inserted."IS_SENSITIVE",
      "IS_PROVINCIAL_PUBLIC_HWY" = inserted."IS_PROVINCIAL_PUBLIC_HWY",
      "PPH_STATUS_UPDATE_USERID" = inserted."PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP" = inserted."PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID" = inserted."PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT" = inserted."IS_RWY_BELT_DOM_PATENT",
      "ZONING" = inserted."ZONING",
      "ZONING_POTENTIAL" = inserted."ZONING_POTENTIAL",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY
    inner join inserted
    on (PIMS_PROPERTY.PROPERTY_ID = inserted.PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPTYP_I_S_I_TR] ON PIMS_PROPERTY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_TYPE ("PROPERTY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROPERTY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRACQF_I_S_U_TR] ON PIMS_PROPERTY_ACQUISITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ACQUISITION_FILE_ID = deleted.PROPERTY_ACQUISITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ACQUISITION_FILE
    set "PROPERTY_ACQUISITION_FILE_ID" = inserted."PROPERTY_ACQUISITION_FILE_ID",
      "ACQUISITION_FILE_ID" = inserted."ACQUISITION_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_NAME" = inserted."PROPERTY_NAME",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ACQUISITION_FILE
    inner join inserted
    on (PIMS_PROPERTY_ACQUISITION_FILE.PROPERTY_ACQUISITION_FILE_ID = inserted.PROPERTY_ACQUISITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PROVNC_I_S_I_TR] ON PIMS_PROVINCE_STATE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROVINCE_STATE ("PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "PROVINCE_STATE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "PROVINCE_STATE_ID",
      "COUNTRY_ID",
      "PROVINCE_STATE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRADJL_I_S_U_TR] ON PIMS_PROPERTY_ADJACENT_LAND_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ADJACENT_LAND_TYPE_CODE = deleted.PROPERTY_ADJACENT_LAND_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ADJACENT_LAND_TYPE
    set "PROPERTY_ADJACENT_LAND_TYPE_CODE" = inserted."PROPERTY_ADJACENT_LAND_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ADJACENT_LAND_TYPE
    inner join inserted
    on (PIMS_PROPERTY_ADJACENT_LAND_TYPE.PROPERTY_ADJACENT_LAND_TYPE_CODE = inserted.PROPERTY_ADJACENT_LAND_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_REGION_I_S_I_TR] ON PIMS_REGION INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_REGION ("REGION_CODE",
      "REGION_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "REGION_CODE",
      "REGION_NAME",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRANOM_I_S_U_TR] ON PIMS_PROPERTY_ANOMALY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ANOMALY_TYPE_CODE = deleted.PROPERTY_ANOMALY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ANOMALY_TYPE
    set "PROPERTY_ANOMALY_TYPE_CODE" = inserted."PROPERTY_ANOMALY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ANOMALY_TYPE
    inner join inserted
    on (PIMS_PROPERTY_ANOMALY_TYPE.PROPERTY_ANOMALY_TYPE_CODE = inserted.PROPERTY_ANOMALY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RGNUSR_I_S_I_TR] ON PIMS_REGION_USER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_REGION_USER ("REGION_USER_ID",
      "REGION_CODE",
      "USER_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "REGION_USER_ID",
      "REGION_CODE",
      "USER_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPCLT_I_S_U_TR] ON PIMS_PROPERTY_CLASSIFICATION_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_CLASSIFICATION_TYPE_CODE = deleted.PROPERTY_CLASSIFICATION_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_CLASSIFICATION_TYPE
    set "PROPERTY_CLASSIFICATION_TYPE_CODE" = inserted."PROPERTY_CLASSIFICATION_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_CLASSIFICATION_TYPE
    inner join inserted
    on (PIMS_PROPERTY_CLASSIFICATION_TYPE.PROPERTY_CLASSIFICATION_TYPE_CODE = inserted.PROPERTY_CLASSIFICATION_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RQSRCT_I_S_I_TR] ON PIMS_REQUEST_SOURCE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_REQUEST_SOURCE_TYPE ("REQUEST_SOURCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "REQUEST_SOURCE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPEVL_I_S_U_TR] ON PIMS_PROPERTY_EVALUATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_EVALUATION_ID = deleted.PROPERTY_EVALUATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_EVALUATION
    set "PROPERTY_EVALUATION_ID" = inserted."PROPERTY_EVALUATION_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "EVALUATION_DATE" = inserted."EVALUATION_DATE",
      "KEY" = inserted."KEY",
      "VALUE" = inserted."VALUE",
      "NOTE" = inserted."NOTE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_EVALUATION
    inner join inserted
    on (PIMS_PROPERTY_EVALUATION.PROPERTY_EVALUATION_ID = inserted.PROPERTY_EVALUATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSCHAI_I_S_I_TR] ON PIMS_RESEARCH_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_ACTIVITY_INSTANCE ("RESEARCH_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID",
      "RESEARCH_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID",
      "RESEARCH_FILE_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PIMPRV_I_S_U_TR] ON PIMS_PROPERTY_IMPROVEMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_IMPROVEMENT_ID = deleted.PROPERTY_IMPROVEMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_IMPROVEMENT
    set "PROPERTY_IMPROVEMENT_ID" = inserted."PROPERTY_IMPROVEMENT_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "PROPERTY_IMPROVEMENT_TYPE_CODE" = inserted."PROPERTY_IMPROVEMENT_TYPE_CODE",
      "IMPROVEMENT_DESCRIPTION" = inserted."IMPROVEMENT_DESCRIPTION",
      "STRUCTURE_SIZE" = inserted."STRUCTURE_SIZE",
      "ADDRESS" = inserted."ADDRESS",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_IMPROVEMENT
    inner join inserted
    on (PIMS_PROPERTY_IMPROVEMENT.PROPERTY_IMPROVEMENT_ID = inserted.PROPERTY_IMPROVEMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RESRCH_I_S_I_TR] ON PIMS_RESEARCH_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE ("RESEARCH_FILE_ID",
      "RESEARCH_FILE_STATUS_TYPE_CODE",
      "REQUEST_SOURCE_TYPE_CODE",
      "REQUESTOR_NAME",
      "REQUESTOR_ORGANIZATION",
      "NAME",
      "RFILE_NUMBER",
      "REQUEST_DATE",
      "ROAD_NAME",
      "ROAD_ALIAS",
      "REQUEST_DESCRIPTION",
      "REQUEST_SOURCE_DESCRIPTION",
      "RESEARCH_RESULT",
      "IS_EXPROPRIATION",
      "EXPROPRIATION_NOTES",
      "RESEARCH_COMPLETION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_FILE_ID",
      "RESEARCH_FILE_STATUS_TYPE_CODE",
      "REQUEST_SOURCE_TYPE_CODE",
      "REQUESTOR_NAME",
      "REQUESTOR_ORGANIZATION",
      "NAME",
      "RFILE_NUMBER",
      "REQUEST_DATE",
      "ROAD_NAME",
      "ROAD_ALIAS",
      "REQUEST_DESCRIPTION",
      "REQUEST_SOURCE_DESCRIPTION",
      "RESEARCH_RESULT",
      "IS_EXPROPRIATION",
      "EXPROPRIATION_NOTES",
      "RESEARCH_COMPLETION_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PIMPRT_I_S_U_TR] ON PIMS_PROPERTY_IMPROVEMENT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_IMPROVEMENT_TYPE_CODE = deleted.PROPERTY_IMPROVEMENT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_IMPROVEMENT_TYPE
    set "PROPERTY_IMPROVEMENT_TYPE_CODE" = inserted."PROPERTY_IMPROVEMENT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_IMPROVEMENT_TYPE
    inner join inserted
    on (PIMS_PROPERTY_IMPROVEMENT_TYPE.PROPERTY_IMPROVEMENT_TYPE_CODE = inserted.PROPERTY_IMPROVEMENT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSFLPR_I_S_I_TR] ON PIMS_RESEARCH_FILE_PURPOSE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE_PURPOSE ("RESEARCH_FILE_PURPOSE_ID",
      "RESEARCH_FILE_ID",
      "RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "RESEARCH_FILE_PURPOSE_ID",
      "RESEARCH_FILE_ID",
      "RESEARCH_PURPOSE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PROPLS_I_S_U_TR] ON PIMS_PROPERTY_LEASE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_LEASE_ID = deleted.PROPERTY_LEASE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_LEASE
    set "PROPERTY_LEASE_ID" = inserted."PROPERTY_LEASE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "AREA_UNIT_TYPE_CODE" = inserted."AREA_UNIT_TYPE_CODE",
      "LEASE_AREA" = inserted."LEASE_AREA",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_LEASE
    inner join inserted
    on (PIMS_PROPERTY_LEASE.PROPERTY_LEASE_ID = inserted.PROPERTY_LEASE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQAIN_A_S_IUD_TR] ON PIMS_ACQUISITION_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_ACTIVITY_INSTANCE_ID in (select ACQUISITION_ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST ([ACQUISITION_ACTIVITY_INSTANCE_ID], [ACQUISITION_FILE_ID], [ACTIVITY_INSTANCE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_ACTIVITY_INSTANCE_ID], [ACQUISITION_FILE_ID], [ACTIVITY_INSTANCE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_DIRECTORY], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_ACQUISITION_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSRCHS_I_S_I_TR] ON PIMS_RESEARCH_FILE_STATUS_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_FILE_STATUS_TYPE ("RESEARCH_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "RESEARCH_FILE_STATUS_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPORG_I_S_U_TR] ON PIMS_PROPERTY_ORGANIZATION INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ORGANIZATION_ID = deleted.PROPERTY_ORGANIZATION_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ORGANIZATION
    set "PROPERTY_ORGANIZATION_ID" = inserted."PROPERTY_ORGANIZATION_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY",
      "IS_DISABLED" = inserted."IS_DISABLED"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ORGANIZATION
    inner join inserted
    on (PIMS_PROPERTY_ORGANIZATION.PROPERTY_ORGANIZATION_ID = inserted.PROPERTY_ORGANIZATION_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQNFL_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_ID in (select ACQUISITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_HIST ([ACQUISITION_FILE_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [MINISTRY_PROJECT_NUMBER], [MINISTRY_PROJECT_NAME], [CPS_PRODUCT_CODE], [FILE_NAME], [FILE_NO], [FILE_NUMBER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [PAIMS_ACQUISITION_FILE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_ID], [ACQUISITION_FILE_STATUS_TYPE_CODE], [ACQUISITION_TYPE_CODE], [ACQUISITION_FUNDING_TYPE_CODE], [ACQ_PHYS_FILE_STATUS_TYPE_CODE], [REGION_CODE], [MINISTRY_PROJECT_NUMBER], [MINISTRY_PROJECT_NAME], [CPS_PRODUCT_CODE], [FILE_NAME], [FILE_NO], [FILE_NUMBER], [FUNDING_OTHER], [ASSIGNED_DATE], [DELIVERY_DATE], [PAIMS_ACQUISITION_FILE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_H_ID_SEQ]) as [_ACQUISITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_RSHPRT_I_S_I_TR] ON PIMS_RESEARCH_PURPOSE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_RESEARCH_PURPOSE_TYPE ("RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "RESEARCH_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPRSF_I_S_U_TR] ON PIMS_PROPERTY_PROPERTY_SERVICE_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_PROPERTY_SERVICE_FILE_ID = deleted.PROPERTY_PROPERTY_SERVICE_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_PROPERTY_SERVICE_FILE
    set "PROPERTY_PROPERTY_SERVICE_FILE_ID" = inserted."PROPERTY_PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_SERVICE_FILE_ID" = inserted."PROPERTY_SERVICE_FILE_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_PROPERTY_SERVICE_FILE
    inner join inserted
    on (PIMS_PROPERTY_PROPERTY_SERVICE_FILE.PROPERTY_PROPERTY_SERVICE_FILE_ID = inserted.PROPERTY_PROPERTY_SERVICE_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQOWN_A_S_IUD_TR] ON PIMS_ACQUISITION_OWNER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_OWNER_HIST set END_DATE_HIST = @curr_date where ACQUISITION_OWNER_ID in (select ACQUISITION_OWNER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_OWNER_HIST ([ACQUISITION_OWNER_ID], [ACQUISITION_FILE_ID], [ADDRESS_ID], [LAST_NAME_OR_CORP_NAME_1], [LAST_NAME_OR_CORP_NAME_2], [GIVEN_NAME], [INCORPORATION_NUMBER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_OWNER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_OWNER_ID], [ACQUISITION_FILE_ID], [ADDRESS_ID], [LAST_NAME_OR_CORP_NAME_1], [LAST_NAME_OR_CORP_NAME_2], [GIVEN_NAME], [INCORPORATION_NUMBER], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_OWNER_H_ID_SEQ]) as [_ACQUISITION_OWNER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ROLE_I_S_I_TR] ON PIMS_ROLE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ROLE ("ROLE_ID",
      "ROLE_UID",
      "KEYCLOAK_GROUP_ID",
      "NAME",
      "DESCRIPTION",
      "IS_PUBLIC",
      "IS_DISABLED",
      "SORT_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ROLE_ID",
      "ROLE_UID",
      "KEYCLOAK_GROUP_ID",
      "NAME",
      "DESCRIPTION",
      "IS_PUBLIC",
      "IS_DISABLED",
      "SORT_ORDER",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRSCRC_I_S_U_TR] ON PIMS_PROPERTY_RESEARCH_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_RESEARCH_FILE_ID = deleted.PROPERTY_RESEARCH_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_RESEARCH_FILE
    set "PROPERTY_RESEARCH_FILE_ID" = inserted."PROPERTY_RESEARCH_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "RESEARCH_FILE_ID" = inserted."RESEARCH_FILE_ID",
      "PROPERTY_NAME" = inserted."PROPERTY_NAME",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "IS_LEGAL_OPINION_REQUIRED" = inserted."IS_LEGAL_OPINION_REQUIRED",
      "IS_LEGAL_OPINION_OBTAINED" = inserted."IS_LEGAL_OPINION_OBTAINED",
      "DOCUMENT_REFERENCE" = inserted."DOCUMENT_REFERENCE",
      "RESEARCH_SUMMARY" = inserted."RESEARCH_SUMMARY",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_RESEARCH_FILE
    inner join inserted
    on (PIMS_PROPERTY_RESEARCH_FILE.PROPERTY_RESEARCH_FILE_ID = inserted.PROPERTY_RESEARCH_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACQPER_A_S_IUD_TR] ON PIMS_ACQUISITION_FILE_PERSON FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACQUISITION_FILE_PERSON_HIST set END_DATE_HIST = @curr_date where ACQUISITION_FILE_PERSON_ID in (select ACQUISITION_FILE_PERSON_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACQUISITION_FILE_PERSON_HIST ([ACQUISITION_FILE_PERSON_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ACQ_FL_PERSON_PROFILE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACQUISITION_FILE_PERSON_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACQUISITION_FILE_PERSON_ID], [ACQUISITION_FILE_ID], [PERSON_ID], [ACQ_FL_PERSON_PROFILE_TYPE_CODE], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACQUISITION_FILE_PERSON_H_ID_SEQ]) as [_ACQUISITION_FILE_PERSON_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ROLCLM_I_S_I_TR] ON PIMS_ROLE_CLAIM INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_ROLE_CLAIM ("ROLE_CLAIM_ID",
      "ROLE_ID",
      "CLAIM_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "ROLE_CLAIM_ID",
      "ROLE_ID",
      "CLAIM_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRROAD_I_S_U_TR] ON PIMS_PROPERTY_ROAD_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ROAD_TYPE_CODE = deleted.PROPERTY_ROAD_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_ROAD_TYPE
    set "PROPERTY_ROAD_TYPE_CODE" = inserted."PROPERTY_ROAD_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_ROAD_TYPE
    inner join inserted
    on (PIMS_PROPERTY_ROAD_TYPE.PROPERTY_ROAD_TYPE_CODE = inserted.PROPERTY_ROAD_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACRQOR_A_S_IUD_TR] ON PIMS_ACCESS_REQUEST_ORGANIZATION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACCESS_REQUEST_ORGANIZATION_HIST set END_DATE_HIST = @curr_date where ACCESS_REQUEST_ORGANIZATION_ID in (select ACCESS_REQUEST_ORGANIZATION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACCESS_REQUEST_ORGANIZATION_HIST ([ACCESS_REQUEST_ORGANIZATION_ID], [ORGANIZATION_ID], [ACCESS_REQUEST_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACCESS_REQUEST_ORGANIZATION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACCESS_REQUEST_ORGANIZATION_ID], [ORGANIZATION_ID], [ACCESS_REQUEST_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_H_ID_SEQ]) as [_ACCESS_REQUEST_ORGANIZATION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SECDEP_I_S_I_TR] ON PIMS_SECURITY_DEPOSIT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT ("SECURITY_DEPOSIT_ID",
      "LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE",
      "OTHER_DEPOSIT_TYPE_DESC",
      "DESCRIPTION",
      "AMOUNT_PAID",
      "DEPOSIT_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_ID",
      "LEASE_ID",
      "SECURITY_DEPOSIT_TYPE_CODE",
      "OTHER_DEPOSIT_TYPE_DESC",
      "DESCRIPTION",
      "AMOUNT_PAID",
      "DEPOSIT_DATE",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPSVC_I_S_U_TR] ON PIMS_PROPERTY_SERVICE_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_SERVICE_FILE_ID = deleted.PROPERTY_SERVICE_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_SERVICE_FILE
    set "PROPERTY_SERVICE_FILE_ID" = inserted."PROPERTY_SERVICE_FILE_ID",
      "PROPERTY_SERVICE_FILE_TYPE_CODE" = inserted."PROPERTY_SERVICE_FILE_TYPE_CODE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_SERVICE_FILE
    inner join inserted
    on (PIMS_PROPERTY_SERVICE_FILE.PROPERTY_SERVICE_FILE_ID = inserted.PROPERTY_SERVICE_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACRQST_A_S_IUD_TR] ON PIMS_ACCESS_REQUEST FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACCESS_REQUEST_HIST set END_DATE_HIST = @curr_date where ACCESS_REQUEST_ID in (select ACCESS_REQUEST_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACCESS_REQUEST_HIST ([ACCESS_REQUEST_ID], [USER_ID], [ROLE_ID], [ACCESS_REQUEST_STATUS_TYPE_CODE], [REGION_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACCESS_REQUEST_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACCESS_REQUEST_ID], [USER_ID], [ROLE_ID], [ACCESS_REQUEST_STATUS_TYPE_CODE], [REGION_CODE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACCESS_REQUEST_H_ID_SEQ]) as [_ACCESS_REQUEST_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SCDPHL_I_S_I_TR] ON PIMS_SECURITY_DEPOSIT_HOLDER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT_HOLDER ("SECURITY_DEPOSIT_HOLDER_ID",
      "SECURITY_DEPOSIT_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_HOLDER_ID",
      "SECURITY_DEPOSIT_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRSVFT_I_S_U_TR] ON PIMS_PROPERTY_SERVICE_FILE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_SERVICE_FILE_TYPE_CODE = deleted.PROPERTY_SERVICE_FILE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_SERVICE_FILE_TYPE
    set "PROPERTY_SERVICE_FILE_TYPE_CODE" = inserted."PROPERTY_SERVICE_FILE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_SERVICE_FILE_TYPE
    inner join inserted
    on (PIMS_PROPERTY_SERVICE_FILE_TYPE.PROPERTY_SERVICE_FILE_TYPE_CODE = inserted.PROPERTY_SERVICE_FILE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTDOC_A_S_IUD_TR] ON PIMS_ACTIVITY_INSTANCE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where ACTIVITY_INSTANCE_DOCUMENT_ID in (select ACTIVITY_INSTANCE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST ([ACTIVITY_INSTANCE_DOCUMENT_ID], [ACTIVITY_INSTANCE_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_INSTANCE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_INSTANCE_DOCUMENT_ID], [ACTIVITY_INSTANCE_ID], [DOCUMENT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_H_ID_SEQ]) as [_ACTIVITY_INSTANCE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SDRTRN_I_S_I_TR] ON PIMS_SECURITY_DEPOSIT_RETURN INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT_RETURN ("SECURITY_DEPOSIT_RETURN_ID",
      "SECURITY_DEPOSIT_ID",
      "TERMINATION_DATE",
      "CLAIMS_AGAINST",
      "RETURN_AMOUNT",
      "RETURN_DATE",
      "INTEREST_PAID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_RETURN_ID",
      "SECURITY_DEPOSIT_ID",
      "TERMINATION_DATE",
      "CLAIMS_AGAINST",
      "RETURN_AMOUNT",
      "RETURN_DATE",
      "INTEREST_PAID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPSTS_I_S_U_TR] ON PIMS_PROPERTY_STATUS_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_STATUS_TYPE_CODE = deleted.PROPERTY_STATUS_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_STATUS_TYPE
    set "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_STATUS_TYPE
    inner join inserted
    on (PIMS_PROPERTY_STATUS_TYPE.PROPERTY_STATUS_TYPE_CODE = inserted.PROPERTY_STATUS_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTINN_A_S_IUD_TR] ON PIMS_ACTIVITY_INSTANCE_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_INSTANCE_NOTE_HIST set END_DATE_HIST = @curr_date where PIMS_ACTIVITY_INSTANCE_NOTE_ID in (select PIMS_ACTIVITY_INSTANCE_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_INSTANCE_NOTE_HIST ([PIMS_ACTIVITY_INSTANCE_NOTE_ID], [ACTIVITY_INSTANCE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_INSTANCE_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PIMS_ACTIVITY_INSTANCE_NOTE_ID], [ACTIVITY_INSTANCE_ID], [NOTE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_H_ID_SEQ]) as [_ACTIVITY_INSTANCE_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SCDPRH_I_S_I_TR] ON PIMS_SECURITY_DEPOSIT_RETURN_HOLDER INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT_RETURN_HOLDER ("SECURITY_DEPOSIT_RETURN_HOLDER_ID",
      "SECURITY_DEPOSIT_RETURN_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "SECURITY_DEPOSIT_RETURN_HOLDER_ID",
      "SECURITY_DEPOSIT_RETURN_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PRPTAX_I_S_U_TR] ON PIMS_PROPERTY_TAX INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_TAX_ID = deleted.PROPERTY_TAX_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_TAX
    set "PROPERTY_TAX_ID" = inserted."PROPERTY_TAX_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_TAX_REMIT_TYPE_CODE" = inserted."PROPERTY_TAX_REMIT_TYPE_CODE",
      "TAX_FOLIO_NO" = inserted."TAX_FOLIO_NO",
      "PAYMENT_AMOUNT" = inserted."PAYMENT_AMOUNT",
      "LAST_PAYMENT_DATE" = inserted."LAST_PAYMENT_DATE",
      "PAYMENT_NOTES" = inserted."PAYMENT_NOTES",
      "BCTFA_NOTIFICATION_DATE" = inserted."BCTFA_NOTIFICATION_DATE",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_TAX
    inner join inserted
    on (PIMS_PROPERTY_TAX.PROPERTY_TAX_ID = inserted.PROPERTY_TAX_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTINS_A_S_IUD_TR] ON PIMS_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where ACTIVITY_INSTANCE_ID in (select ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_INSTANCE_HIST ([ACTIVITY_INSTANCE_ID], [ACTIVITY_TEMPLATE_ID], [ACTIVITY_INSTANCE_STATUS_TYPE_CODE], [DESCRIPTION], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_INSTANCE_ID], [ACTIVITY_TEMPLATE_ID], [ACTIVITY_INSTANCE_STATUS_TYPE_CODE], [DESCRIPTION], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_SECDPT_I_S_I_TR] ON PIMS_SECURITY_DEPOSIT_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_SECURITY_DEPOSIT_TYPE ("SECURITY_DEPOSIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "SECURITY_DEPOSIT_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_PTRMTT_I_S_U_TR] ON PIMS_PROPERTY_TAX_REMIT_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_TAX_REMIT_TYPE_CODE = deleted.PROPERTY_TAX_REMIT_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_TAX_REMIT_TYPE
    set "PROPERTY_TAX_REMIT_TYPE_CODE" = inserted."PROPERTY_TAX_REMIT_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_TAX_REMIT_TYPE
    inner join inserted
    on (PIMS_PROPERTY_TAX_REMIT_TYPE.PROPERTY_TAX_REMIT_TYPE_CODE = inserted.PROPERTY_TAX_REMIT_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO

CREATE TRIGGER [dbo].[PIMS_ACTMDO_A_S_IUD_TR] ON PIMS_ACTIVITY_TEMPLATE_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST set END_DATE_HIST = @curr_date where ACTIVITY_TEMPLATE_DOCUMENT_ID in (select ACTIVITY_TEMPLATE_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST ([ACTIVITY_TEMPLATE_DOCUMENT_ID], [DOCUMENT_ID], [ACTIVITY_TEMPLATE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _ACTIVITY_TEMPLATE_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_TEMPLATE_DOCUMENT_ID], [DOCUMENT_ID], [ACTIVITY_TEMPLATE_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_H_ID_SEQ]) as [_ACTIVITY_TEMPLATE_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;
GO


ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST]
	ADD CONSTRAINT [ACRQST_USER_ROLE_REGION_TUC]
	UNIQUE ([REGION_CODE], [ROLE_ID], [USER_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_HIST]
	ADD CONSTRAINT [PIMS_ACRQST_H_UK]
	UNIQUE ([_ACCESS_REQUEST_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION]
	ADD CONSTRAINT [ACRQOR_ORGANIZATION_ACCESS_REQUEST_TUC]
	UNIQUE ([ORGANIZATION_ID], [ACCESS_REQUEST_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION_HIST]
	ADD CONSTRAINT [PIMS_ACRQOR_H_UK]
	UNIQUE ([_ACCESS_REQUEST_ORGANIZATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [ACQAIN_ACQ_ACTIVITY_TUC]
	UNIQUE ([ACTIVITY_INSTANCE_ID], [ACQUISITION_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE_HIST]
	ADD CONSTRAINT [PIMS_ACQAIN_H_UK]
	UNIQUE ([_ACQUISITION_ACTIVITY_INSTANCE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_HIST]
	ADD CONSTRAINT [PIMS_ACQNFL_H_UK]
	UNIQUE ([_ACQUISITION_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	ADD CONSTRAINT [ACQPER_PERSON_PROFILE_TUC]
	UNIQUE ([ACQ_FL_PERSON_PROFILE_TYPE_CODE], [PERSON_ID], [ACQUISITION_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON_HIST]
	ADD CONSTRAINT [PIMS_ACQPER_H_UK]
	UNIQUE ([_ACQUISITION_FILE_PERSON_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER_HIST]
	ADD CONSTRAINT [PIMS_ACQOWN_H_UK]
	UNIQUE ([_ACQUISITION_OWNER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
	ADD CONSTRAINT [ACTDOC_ACTIVITY_DOCUMENT_TUC]
	UNIQUE ([DOCUMENT_ID], [ACTIVITY_INSTANCE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_ACTDOC_H_UK]
	UNIQUE ([_ACTIVITY_INSTANCE_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_HIST]
	ADD CONSTRAINT [PIMS_ACTINS_H_UK]
	UNIQUE ([_ACTIVITY_INSTANCE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]
	ADD CONSTRAINT [ACTINN_ACTIVITY_NOTE_TUC]
	UNIQUE ([NOTE_ID], [ACTIVITY_INSTANCE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE_HIST]
	ADD CONSTRAINT [PIMS_ACTINN_H_UK]
	UNIQUE ([_ACTIVITY_INSTANCE_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
	ADD CONSTRAINT [ACTMDO_ACT_TMP_DOC_TUC]
	UNIQUE ([ACTIVITY_TEMPLATE_ID], [DOCUMENT_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_ACTMDO_H_UK]
	UNIQUE ([_ACTIVITY_TEMPLATE_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_HIST]
	ADD CONSTRAINT [PIMS_ACTTMP_H_UK]
	UNIQUE ([_ACTIVITY_TEMPLATE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]
	ADD CONSTRAINT [PRACQF_PROP_ACQ_TUC]
	UNIQUE ([PROPERTY_ID], [ACQUISITION_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]
	ADD CONSTRAINT [AIPAFL_ACT_INST_PROP_ACQ_FL_TUC]
	UNIQUE ([PROPERTY_ACQUISITION_FILE_ID], [ACTIVITY_INSTANCE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE_HIST]
	ADD CONSTRAINT [PIMS_AIPAFL_H_UK]
	UNIQUE ([_ACT_INST_PROP_ACQ_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE]
	ADD CONSTRAINT [PRSCRC_RSRCH_FILE_PROP_TUC]
	UNIQUE ([RESEARCH_FILE_ID], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]
	ADD CONSTRAINT [AIPRFL_ACT_INST_PROP_RSRCH_FL_TUC]
	UNIQUE ([PROPERTY_RESEARCH_FILE_ID], [ACTIVITY_INSTANCE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE_HIST]
	ADD CONSTRAINT [PIMS_AIPRFL_H_UK]
	UNIQUE ([_ACT_INST_PROP_RSRCH_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ADDRESS_HIST]
	ADD CONSTRAINT [PIMS_ADDRSS_H_UK]
	UNIQUE ([_ADDRESS_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_CLAIM_HIST]
	ADD CONSTRAINT [PIMS_CLMTYP_H_UK]
	UNIQUE ([_CLAIM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_CONTACT_METHOD_HIST]
	ADD CONSTRAINT [PIMS_CNTMTH_H_UK]
	UNIQUE ([_CONTACT_METHOD_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_DOCMNT_H_UK]
	UNIQUE ([_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT_TYP_HIST]
	ADD CONSTRAINT [PIMS_DOCTYP_H_UK]
	UNIQUE ([_DOCUMENT_TYP_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_INSURANCE_HIST]
	ADD CONSTRAINT [PIMS_INSRNC_H_UK]
	UNIQUE ([_INSURANCE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [LSACIN_LEASE_ACTIVITY_INSTANCE_TUC]
	UNIQUE ([LEASE_ID], [ACTIVITY_INSTANCE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_HIST]
	ADD CONSTRAINT [PIMS_LSACIN_H_UK]
	UNIQUE ([_LEASE_ACTIVITY_INSTANCE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_HIST]
	ADD CONSTRAINT [PIMS_LEASE_H_UK]
	UNIQUE ([_LEASE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT_HIST]
	ADD CONSTRAINT [PIMS_LSPYMT_H_UK]
	UNIQUE ([_LEASE_PAYMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	ADD CONSTRAINT [TENANT_LEASE_PERSON_ORG_TUC]
	UNIQUE ([ORGANIZATION_ID], [PERSON_ID], [LEASE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_TENANT_HIST]
	ADD CONSTRAINT [PIMS_TENANT_H_UK]
	UNIQUE ([_LEASE_TENANT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_LEASE_TERM_HIST]
	ADD CONSTRAINT [PIMS_LSTERM_H_UK]
	UNIQUE ([_LEASE_TERM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_NOTE_HIST]
	ADD CONSTRAINT [PIMS_NOTE_H_UK]
	UNIQUE ([_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION_ADDRESS]
	ADD CONSTRAINT [ORGADD_UNQ_ADDR_TYPE_TUC]
	UNIQUE ([ORGANIZATION_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION_ADDRESS_HIST]
	ADD CONSTRAINT [PIMS_ORGADD_H_UK]
	UNIQUE ([_ORGANIZATION_ADDRESS_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION_HIST]
	ADD CONSTRAINT [PIMS_ORG_H_UK]
	UNIQUE ([_ORGANIZATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PERSON_ADDRESS]
	ADD CONSTRAINT [PERADD_UNQ_ADDR_TYPE_TUC]
	UNIQUE ([PERSON_ID], [ADDRESS_ID], [ADDRESS_USAGE_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PERSON_ADDRESS_HIST]
	ADD CONSTRAINT [PIMS_PERADD_H_UK]
	UNIQUE ([_PERSON_ADDRESS_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PERSON_HIST]
	ADD CONSTRAINT [PIMS_PERSON_H_UK]
	UNIQUE ([_PERSON_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PERSON_ORGANIZATION]
	ADD CONSTRAINT [PERORG_PERSON_ORGANIZATION_TUC]
	UNIQUE ([ORGANIZATION_ID], [PERSON_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PERSON_ORGANIZATION_HIST]
	ADD CONSTRAINT [PIMS_PERORG_H_UK]
	UNIQUE ([_PERSON_ORGANIZATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]
	ADD CONSTRAINT [PRSPRP_PROP_PURPOSE_TUC]
	UNIQUE ([PROP_RESEARCH_PURPOSE_TYPE_CODE], [PROPERTY_RESEARCH_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE_HIST]
	ADD CONSTRAINT [PIMS_PRACQF_H_UK]
	UNIQUE ([_PROPERTY_ACQUISITION_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_EVALUATION_HIST]
	ADD CONSTRAINT [PIMS_PRPEVL_H_UK]
	UNIQUE ([_PROPERTY_EVALUATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_HIST]
	ADD CONSTRAINT [PIMS_PRPRTY_H_UK]
	UNIQUE ([_PROPERTY_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	ADD CONSTRAINT [PIMPRV_LEASE_IMPROVEMENT_TUC]
	UNIQUE ([LEASE_ID], [PROPERTY_IMPROVEMENT_TYPE_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT_HIST]
	ADD CONSTRAINT [PIMS_PIMPRV_H_UK]
	UNIQUE ([_PROPERTY_IMPROVEMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	ADD CONSTRAINT [PROPLS_PROPERTY_LEASE_TUC]
	UNIQUE ([LEASE_ID], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE_HIST]
	ADD CONSTRAINT [PIMS_PROPLS_H_UK]
	UNIQUE ([_PROPERTY_LEASE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION]
	ADD CONSTRAINT [PRPORG_PROPERTY_ORGANIZATION_TUC]
	UNIQUE ([PROPERTY_ID], [ORGANIZATION_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION_HIST]
	ADD CONSTRAINT [PIMS_PRPORG_H_UK]
	UNIQUE ([_PROPERTY_ORGANIZATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE]
	ADD CONSTRAINT [PRPRSF_PROPERTY_SERVICE_FILE_TUC]
	UNIQUE ([PROPERTY_ID], [PROPERTY_SERVICE_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE_HIST]
	ADD CONSTRAINT [PIMS_PRPRSF_H_UK]
	UNIQUE ([_PROPERTY_PROPERTY_SERVICE_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE_HIST]
	ADD CONSTRAINT [PIMS_PRSCRC_H_UK]
	UNIQUE ([_PROPERTY_RESEARCH_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_SERVICE_FILE_HIST]
	ADD CONSTRAINT [PIMS_PRPSVC_H_UK]
	UNIQUE ([_PROPERTY_SERVICE_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_TAX_HIST]
	ADD CONSTRAINT [PIMS_PRPTAX_H_UK]
	UNIQUE ([_PROPERTY_TAX_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]
	ADD CONSTRAINT [PRPALT_PROP_ADJACENT_LAND_TYPE_TUC]
	UNIQUE ([PROPERTY_ADJACENT_LAND_TYPE_CODE], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]
	ADD CONSTRAINT [PRPRAT_PROP_ANOMALY_TYPE_TUC]
	UNIQUE ([PROPERTY_ANOMALY_TYPE_CODE], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYPE]
	ADD CONSTRAINT [PRPRRT_PROP_ROAD_TYPE_TUC]
	UNIQUE ([PROPERTY_ROAD_TYPE_CODE], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYPE]
	ADD CONSTRAINT [PRPRTT_PROP_PROP_TENURE_TUC]
	UNIQUE ([PROPERTY_TENURE_TYPE_CODE], [PROPERTY_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_REGION_USER]
	ADD CONSTRAINT [RGNUSR_REGION_USER_TUC]
	UNIQUE ([USER_ID], [REGION_CODE]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_REGION_USER_HIST]
	ADD CONSTRAINT [PIMS_RGNUSR_H_UK]
	UNIQUE ([_REGION_USER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [RSCHAI_RSRCH_FILE_ACTIVITY_TUC]
	UNIQUE ([RESEARCH_FILE_ID], [ACTIVITY_INSTANCE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE_HIST]
	ADD CONSTRAINT [PIMS_RSCHAI_H_UK]
	UNIQUE ([_RESEARCH_ACTIVITY_INSTANCE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_HIST]
	ADD CONSTRAINT [PIMS_RESRCH_H_UK]
	UNIQUE ([_RESEARCH_FILE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE]
	ADD CONSTRAINT [RSFLPR_RSRCH_FL_RSRCH_FL_PURP_TUC]
	UNIQUE ([RESEARCH_PURPOSE_TYPE_CODE], [RESEARCH_FILE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE_HIST]
	ADD CONSTRAINT [PIMS_RSFLPR_H_UK]
	UNIQUE ([_RESEARCH_FILE_PURPOSE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ROLE_CLAIM]
	ADD CONSTRAINT [ROLCLM_ROLE_CLAIM_TUC]
	UNIQUE ([ROLE_ID], [CLAIM_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ROLE_CLAIM_HIST]
	ADD CONSTRAINT [PIMS_ROLCLM_H_UK]
	UNIQUE ([_ROLE_CLAIM_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_ROLE_HIST]
	ADD CONSTRAINT [PIMS_ROLE_H_UK]
	UNIQUE ([_ROLE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HIST]
	ADD CONSTRAINT [PIMS_SECDEP_H_UK]
	UNIQUE ([_SECURITY_DEPOSIT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	ADD CONSTRAINT [SCDPHL_SECURITY_DEPOSIT_ID_TUC]
	UNIQUE ([SECURITY_DEPOSIT_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER_HIST]
	ADD CONSTRAINT [PIMS_SCDPHL_H_UK]
	UNIQUE ([_SECURITY_DEPOSIT_HOLDER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HIST]
	ADD CONSTRAINT [PIMS_SDRTRN_H_UK]
	UNIQUE ([_SECURITY_DEPOSIT_RETURN_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	ADD CONSTRAINT [SCDPRH_SECURITY_DEPOSIT_RETURN_ID_TUC]
	UNIQUE ([SECURITY_DEPOSIT_RETURN_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER_HIST]
	ADD CONSTRAINT [PIMS_SCDPRH_H_UK]
	UNIQUE ([_SECURITY_DEPOSIT_RETURN_HOLDER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_STATIC_VARIABLE_HIST]
	ADD CONSTRAINT [PIMS_STAVBL_H_UK]
	UNIQUE ([_STATIC_VARIABLE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_USER_HIST]
	ADD CONSTRAINT [PIMS_USER_H_UK]
	UNIQUE ([_USER_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION]
	ADD CONSTRAINT [USRORG_USER_ROLE_ORGANIZATION_TUC]
	UNIQUE ([ORGANIZATION_ID], [USER_ID], [ROLE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION_HIST]
	ADD CONSTRAINT [PIMS_USRORG_H_UK]
	UNIQUE ([_USER_ORGANIZATION_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_USER_ROLE]
	ADD CONSTRAINT [USERRL_USER_ROLE_TUC]
	UNIQUE ([USER_ID], [ROLE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_USER_ROLE_HIST]
	ADD CONSTRAINT [PIMS_USERRL_H_UK]
	UNIQUE ([_USER_ROLE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	ADD CONSTRAINT [SCDPHL_ONE_HOLDER_ONLY_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	ADD CONSTRAINT [SCDPRH_ONE_HOLDER_ONLY_TCC] CHECK ([PERSON_ID] IS NULL AND [ORGANIZATION_ID] IS NOT NULL OR [PERSON_ID] IS NOT NULL AND [ORGANIZATION_ID] IS NULL)
GO

ALTER TABLE [dbo].[BCA_ASSESSMENT_AREA]
	ADD CONSTRAINT [PIM_BCDADV_PIM_BCASAR_FK]
	FOREIGN KEY([DATA_ADVICE_ID])
	REFERENCES [dbo].[BCA_DATA_ADVICE]([DATA_ADVICE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_AREA_AMENDMENT]
	ADD CONSTRAINT [PIM_BCASAR_PIM_BCAAMD_FK]
	FOREIGN KEY([AREA_CODE])
	REFERENCES [dbo].[BCA_ASSESSMENT_AREA]([AREA_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_AREA_BCTRANSIT_VALUE]
	ADD CONSTRAINT [PIM_BCASAR_PIM_BCATRV_FK]
	FOREIGN KEY([AREA_CODE])
	REFERENCES [dbo].[BCA_ASSESSMENT_AREA]([AREA_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_AREA_DELETE]
	ADD CONSTRAINT [PIM_BCASAR_PIM_BCADEL_FK]
	FOREIGN KEY([AREA_CODE])
	REFERENCES [dbo].[BCA_ASSESSMENT_AREA]([AREA_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_AREA_GENERAL_VALUE]
	ADD CONSTRAINT [PIM_BCASAR_PIM_BCAGNV_FK]
	FOREIGN KEY([AREA_CODE])
	REFERENCES [dbo].[BCA_ASSESSMENT_AREA]([AREA_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_AREA_SCHOOL_VALUE]
	ADD CONSTRAINT [PIM_BCASAR_PIM_BCASCV_FK]
	FOREIGN KEY([AREA_CODE])
	REFERENCES [dbo].[BCA_ASSESSMENT_AREA]([AREA_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_DATA_ADVICE_AMENDMENT]
	ADD CONSTRAINT [PIM_BCDADV_PIM_BCDAMD_FK]
	FOREIGN KEY([DATA_ADVICE_ID])
	REFERENCES [dbo].[BCA_DATA_ADVICE]([DATA_ADVICE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_DATA_ADVICE_BCTRANSIT_VALUE]
	ADD CONSTRAINT [PIM_BCDADV_PIM_BCDTRV_FK]
	FOREIGN KEY([DATA_ADVICE_ID])
	REFERENCES [dbo].[BCA_DATA_ADVICE]([DATA_ADVICE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_DATA_ADVICE_DELETE]
	ADD CONSTRAINT [PIM_BCDADV_PIM_BCDDEL_FK]
	FOREIGN KEY([DATA_ADVICE_ID])
	REFERENCES [dbo].[BCA_DATA_ADVICE]([DATA_ADVICE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_DATA_ADVICE_GENERAL_VALUE]
	ADD CONSTRAINT [PIM_BCDADV_PIM_BCDGNV_FK]
	FOREIGN KEY([DATA_ADVICE_ID])
	REFERENCES [dbo].[BCA_DATA_ADVICE]([DATA_ADVICE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_DATA_ADVICE_SCHOOL_VALUE]
	ADD CONSTRAINT [PIM_BCDADV_PIM_BCDSCV_FK]
	FOREIGN KEY([DATA_ADVICE_ID])
	REFERENCES [dbo].[BCA_DATA_ADVICE]([DATA_ADVICE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_JURISDICTION]
	ADD CONSTRAINT [PIM_BCASAR_PIM_BCAJUR_FK]
	FOREIGN KEY([AREA_CODE])
	REFERENCES [dbo].[BCA_ASSESSMENT_AREA]([AREA_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_FOLIO_RECORD]
	ADD CONSTRAINT [PIM_BCAJUR_PIM_BCAFOR_FK]
	FOREIGN KEY([JURISDICTION_CODE])
	REFERENCES [dbo].[BCA_JURISDICTION]([JURISDICTION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_MINOR_TAXING]
	ADD CONSTRAINT [PIM_BCAFOR_PIM_BCMNTX_FK]
	FOREIGN KEY([ROLL_NUMBER])
	REFERENCES [dbo].[BCA_FOLIO_RECORD]([ROLL_NUMBER])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_DEFINED]
	ADD CONSTRAINT [PIM_BCMNTX_PIM_BCADFN_FK]
	FOREIGN KEY([MINOR_TAXING_ID])
	REFERENCES [dbo].[BCA_MINOR_TAXING]([MINOR_TAXING_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_ELECTORAL_AREA]
	ADD CONSTRAINT [PIM_BCMNTX_PIM_BCELCT_FK]
	FOREIGN KEY([MINOR_TAXING_ID])
	REFERENCES [dbo].[BCA_MINOR_TAXING]([MINOR_TAXING_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_FOLIO_ADDRESS]
	ADD CONSTRAINT [PIM_BCAFOR_PIM_BCFADR_FK]
	FOREIGN KEY([ROLL_NUMBER])
	REFERENCES [dbo].[BCA_FOLIO_RECORD]([ROLL_NUMBER])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_FOLIO_AMENDMENT]
	ADD CONSTRAINT [PIM_BCAFOR_PIM_BCAFAM_FK]
	FOREIGN KEY([ROLL_NUMBER])
	REFERENCES [dbo].[BCA_FOLIO_RECORD]([ROLL_NUMBER])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_FOLIO_BCTRANSIT_VALUE]
	ADD CONSTRAINT [PIM_BCAFOR_PIM_BCFTRV_FK]
	FOREIGN KEY([ROLL_NUMBER])
	REFERENCES [dbo].[BCA_FOLIO_RECORD]([ROLL_NUMBER])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_FOLIO_DESCRIPTION]
	ADD CONSTRAINT [PIM_BCAFOR_PIM_BCAFDE_FK]
	FOREIGN KEY([ROLL_NUMBER])
	REFERENCES [dbo].[BCA_FOLIO_RECORD]([ROLL_NUMBER])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_FOLIO_FARM]
	ADD CONSTRAINT [PIM_BCAFOR_PIM_BCFARM_FK]
	FOREIGN KEY([ROLL_NUMBER])
	REFERENCES [dbo].[BCA_FOLIO_RECORD]([ROLL_NUMBER])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_FOLIO_GENERAL_VALUE]
	ADD CONSTRAINT [PIM_BCAFOR_PIM_BCFGNV_FK]
	FOREIGN KEY([ROLL_NUMBER])
	REFERENCES [dbo].[BCA_FOLIO_RECORD]([ROLL_NUMBER])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_FOLIO_LAND_CHARACTERISTIC]
	ADD CONSTRAINT [PIM_BCAFOR_PIM_BCLCHR_FK]
	FOREIGN KEY([ROLL_NUMBER])
	REFERENCES [dbo].[BCA_FOLIO_RECORD]([ROLL_NUMBER])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_FOLIO_LEGAL_DESCRIPTION]
	ADD CONSTRAINT [PIM_BCAFOR_PIM_BCAFLD_FK]
	FOREIGN KEY([ROLL_NUMBER])
	REFERENCES [dbo].[BCA_FOLIO_RECORD]([ROLL_NUMBER])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_FOLIO_MANAGED_FOREST]
	ADD CONSTRAINT [PIM_BCAFOR_PIM_BCMFOR_FK]
	FOREIGN KEY([ROLL_NUMBER])
	REFERENCES [dbo].[BCA_FOLIO_RECORD]([ROLL_NUMBER])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_FOLIO_MANUFACTURED_HOME]
	ADD CONSTRAINT [PIM_BCAFOR_PIM_BCMANH_FK]
	FOREIGN KEY([ROLL_NUMBER])
	REFERENCES [dbo].[BCA_FOLIO_RECORD]([ROLL_NUMBER])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_FOLIO_OIL_AND_GAS]
	ADD CONSTRAINT [PIM_BCAFOR_PIM_BCOILG_FK]
	FOREIGN KEY([ROLL_NUMBER])
	REFERENCES [dbo].[BCA_FOLIO_RECORD]([ROLL_NUMBER])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_FOLIO_SALES]
	ADD CONSTRAINT [PIM_BCAFOR_PIM_BCAFSA_FK]
	FOREIGN KEY([ROLL_NUMBER])
	REFERENCES [dbo].[BCA_FOLIO_RECORD]([ROLL_NUMBER])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_FOLIO_SCHOOL_VALUE]
	ADD CONSTRAINT [PIM_BCAFOR_PIM_BCFSCV_FK]
	FOREIGN KEY([ROLL_NUMBER])
	REFERENCES [dbo].[BCA_FOLIO_RECORD]([ROLL_NUMBER])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_FOLIO_VALUATION]
	ADD CONSTRAINT [PIM_BCAFOR_PIM_BCAVAL_FK]
	FOREIGN KEY([ROLL_NUMBER])
	REFERENCES [dbo].[BCA_FOLIO_RECORD]([ROLL_NUMBER])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_GENERAL_SERVICE]
	ADD CONSTRAINT [PIM_BCMNTX_PIM_BCGSVC_FK]
	FOREIGN KEY([MINOR_TAXING_ID])
	REFERENCES [dbo].[BCA_MINOR_TAXING]([MINOR_TAXING_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_IMPROVEMENT_DISTRICT]
	ADD CONSTRAINT [PIM_BCMNTX_PIM_BCIMPD_FK]
	FOREIGN KEY([MINOR_TAXING_ID])
	REFERENCES [dbo].[BCA_MINOR_TAXING]([MINOR_TAXING_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_ISLANDS_TRUST]
	ADD CONSTRAINT [PIM_BCMNTX_PIM_BCISLT_FK]
	FOREIGN KEY([MINOR_TAXING_ID])
	REFERENCES [dbo].[BCA_MINOR_TAXING]([MINOR_TAXING_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_JURISDICTION_AMENDMENT]
	ADD CONSTRAINT [PIM_BCAJUR_PIM_BCJAMD_FK]
	FOREIGN KEY([JURISDICTION_CODE])
	REFERENCES [dbo].[BCA_JURISDICTION]([JURISDICTION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_JURISDICTION_BCTRANSIT_VALUE]
	ADD CONSTRAINT [PIM_BCAJUR_PIM_BCJTRV_FK]
	FOREIGN KEY([JURISDICTION_CODE])
	REFERENCES [dbo].[BCA_JURISDICTION]([JURISDICTION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_JURISDICTION_DELETE]
	ADD CONSTRAINT [PIM_BCAJUR_PIM_BCJDEL_FK]
	FOREIGN KEY([JURISDICTION_CODE])
	REFERENCES [dbo].[BCA_JURISDICTION]([JURISDICTION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_JURISDICTION_GENERAL_VALUE]
	ADD CONSTRAINT [PIM_BCAJUR_PIM_BCJGNV_FK]
	FOREIGN KEY([JURISDICTION_CODE])
	REFERENCES [dbo].[BCA_JURISDICTION]([JURISDICTION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_JURISDICTION_SCHOOL_VALUE]
	ADD CONSTRAINT [PIM_BCAJUR_PIM_BCJSCV_FK]
	FOREIGN KEY([JURISDICTION_CODE])
	REFERENCES [dbo].[BCA_JURISDICTION]([JURISDICTION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_LOCAL_AREA]
	ADD CONSTRAINT [PIM_BCMNTX_PIM_BCLCLA_FK]
	FOREIGN KEY([MINOR_TAXING_ID])
	REFERENCES [dbo].[BCA_MINOR_TAXING]([MINOR_TAXING_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_OWNERSHIP_GROUP]
	ADD CONSTRAINT [PIM_BCAFOR_PIM_BCAOWG_FK]
	FOREIGN KEY([ROLL_NUMBER])
	REFERENCES [dbo].[BCA_FOLIO_RECORD]([ROLL_NUMBER])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_OWNER]
	ADD CONSTRAINT [PIM_BCAOWG_PIM_BCAOWN_FK]
	FOREIGN KEY([OWNERSHIP_GROUP_ID])
	REFERENCES [dbo].[BCA_OWNERSHIP_GROUP]([OWNERSHIP_GROUP_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_SERVICE_AREA]
	ADD CONSTRAINT [PIM_BCMNTX_PIM_BCSVCA_FK]
	FOREIGN KEY([MINOR_TAXING_ID])
	REFERENCES [dbo].[BCA_MINOR_TAXING]([MINOR_TAXING_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_SPECIFIED_MUNICIPAL]
	ADD CONSTRAINT [PIM_BCMNTX_PIM_BCSPMU_FK]
	FOREIGN KEY([MINOR_TAXING_ID])
	REFERENCES [dbo].[BCA_MINOR_TAXING]([MINOR_TAXING_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[BCA_SPECIFIED_REGIONAL]
	ADD CONSTRAINT [PIM_BCMNTX_PIM_BCSPRG_FK]
	FOREIGN KEY([MINOR_TAXING_ID])
	REFERENCES [dbo].[BCA_MINOR_TAXING]([MINOR_TAXING_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_USER]
	ADD CONSTRAINT [PIM_PERSON_PIM_USER_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST]
	ADD CONSTRAINT [PIM_USER_PIM_ACRQST_FK]
	FOREIGN KEY([USER_ID])
	REFERENCES [dbo].[PIMS_USER]([USER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST]
	ADD CONSTRAINT [PIM_ROLE_PIM_ACRQST_FK]
	FOREIGN KEY([ROLE_ID])
	REFERENCES [dbo].[PIMS_ROLE]([ROLE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST]
	ADD CONSTRAINT [PIM_REGION_PIM_ACRQST_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST]
	ADD CONSTRAINT [PIM_ARQSTT_PIM_ACRQST_FK]
	FOREIGN KEY([ACCESS_REQUEST_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACCESS_REQUEST_STATUS_TYPE]([ACCESS_REQUEST_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DISTRICT]
	ADD CONSTRAINT [PIM_REGION_PIM_DSTRCT_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION]
	ADD CONSTRAINT [PIM_REGION_PIM_ORG_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION]
	ADD CONSTRAINT [PIM_ORGTYP_PIM_ORG_FK]
	FOREIGN KEY([ORGANIZATION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ORGANIZATION_TYPE]([ORGANIZATION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION]
	ADD CONSTRAINT [PIM_ORGIDT_PIM_ORG_FK]
	FOREIGN KEY([ORG_IDENTIFIER_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ORG_IDENTIFIER_TYPE]([ORG_IDENTIFIER_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION]
	ADD CONSTRAINT [PIM_ORG_PIM_PRNT_ORG_FK]
	FOREIGN KEY([PRNT_ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION]
	ADD CONSTRAINT [PIM_DSTRCT_PIM_ORG_FK]
	FOREIGN KEY([DISTRICT_CODE])
	REFERENCES [dbo].[PIMS_DISTRICT]([DISTRICT_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION]
	ADD CONSTRAINT [PIM_ORG_PIM_ACRQOR_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACCESS_REQUEST_ORGANIZATION]
	ADD CONSTRAINT [PIM_ACRQST_PIM_ACRQOR_FK]
	FOREIGN KEY([ACCESS_REQUEST_ID])
	REFERENCES [dbo].[PIMS_ACCESS_REQUEST]([ACCESS_REQUEST_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_REGION_PIM_ACQNFL_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQTYP_PIM_ACQNFL_FK]
	FOREIGN KEY([ACQUISITION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQUISITION_TYPE]([ACQUISITION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQPFS_PIM_ACQNFL_FK]
	FOREIGN KEY([ACQ_PHYS_FILE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQ_PHYS_FILE_STATUS_TYPE]([ACQ_PHYS_FILE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQFTY_PIM_ACQNFL_FK]
	FOREIGN KEY([ACQUISITION_FUNDING_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQUISITION_FUNDING_TYPE]([ACQUISITION_FUNDING_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQFST_PIM_ACQNFL_FK]
	FOREIGN KEY([ACQUISITION_FILE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE_STATUS_TYPE]([ACQUISITION_FILE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE]
	ADD CONSTRAINT [PIM_ACTTTY_PIM_ACTTMP_FK]
	FOREIGN KEY([ACTIVITY_TEMPLATE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACTIVITY_TEMPLATE_TYPE]([ACTIVITY_TEMPLATE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTTMP_PIM_ACTINS_FK]
	FOREIGN KEY([ACTIVITY_TEMPLATE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_TEMPLATE]([ACTIVITY_TEMPLATE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTIST_PIM_ACTINS_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE_STATUS_TYPE]([ACTIVITY_INSTANCE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_ACQAIN_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQAIN_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	ADD CONSTRAINT [PIM_PERSON_PIM_ACQPER_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	ADD CONSTRAINT [PIM_AQFPPT_PIM_ACQPER_FK]
	FOREIGN KEY([ACQ_FL_PERSON_PROFILE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ACQ_FL_PERSON_PROFILE_TYPE]([ACQ_FL_PERSON_PROFILE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_FILE_PERSON]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQPER_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROVINCE_STATE]
	ADD CONSTRAINT [PIM_CNTRY_PIM_PROVNC_FK]
	FOREIGN KEY([COUNTRY_ID])
	REFERENCES [dbo].[PIMS_COUNTRY]([COUNTRY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ADDRESS]
	ADD CONSTRAINT [PIM_REGION_PIM_ADDRSS_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ADDRESS]
	ADD CONSTRAINT [PIM_PROVNC_PIM_ADDRSS_FK]
	FOREIGN KEY([PROVINCE_STATE_ID])
	REFERENCES [dbo].[PIMS_PROVINCE_STATE]([PROVINCE_STATE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ADDRESS]
	ADD CONSTRAINT [PIM_DSTRCT_PIM_ADDRSS_FK]
	FOREIGN KEY([DISTRICT_CODE])
	REFERENCES [dbo].[PIMS_DISTRICT]([DISTRICT_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ADDRESS]
	ADD CONSTRAINT [PIM_CNTRY_PIM_ADDRSS_FK]
	FOREIGN KEY([COUNTRY_ID])
	REFERENCES [dbo].[PIMS_COUNTRY]([COUNTRY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER]
	ADD CONSTRAINT [PIM_ADDRSS_PIM_ACQOWN_FK]
	FOREIGN KEY([ADDRESS_ID])
	REFERENCES [dbo].[PIMS_ADDRESS]([ADDRESS_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACQUISITION_OWNER]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_ACQOWN_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCTYP_PIM_DOCMNT_FK]
	FOREIGN KEY([DOCUMENT_TYPE_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT_TYP]([DOCUMENT_TYPE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCSTY_PIM_DOCMNT_FK]
	FOREIGN KEY([DOCUMENT_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DOCUMENT_STATUS_TYPE]([DOCUMENT_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_ACTDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_DOCUMENT]
	ADD CONSTRAINT [PIM_ACTINS_PIM_ACTDOC_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]
	ADD CONSTRAINT [PIM_NOTE_PIM_ACTINN_FK]
	FOREIGN KEY([NOTE_ID])
	REFERENCES [dbo].[PIMS_NOTE]([NOTE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_INSTANCE_NOTE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_ACTINN_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_ACTMDO_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACTIVITY_TEMPLATE_DOCUMENT]
	ADD CONSTRAINT [PIM_ACTTMP_PIM_ACTMDO_FK]
	FOREIGN KEY([ACTIVITY_TEMPLATE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_TEMPLATE]([ACTIVITY_TEMPLATE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_VOLUTY_PIM_PRPRTY_FK]
	FOREIGN KEY([VOLUME_UNIT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_VOLUME_UNIT_TYPE]([VOLUME_UNIT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_SPDCLT_PIM_PRPRTY_FK]
	FOREIGN KEY([SURPLUS_DECLARATION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_SURPLUS_DECLARATION_TYPE]([SURPLUS_DECLARATION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_REGION_PIM_PRPRTY_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_PRVOLT_PIM_PRPRTY_FK]
	FOREIGN KEY([VOLUMETRIC_TYPE_CODE])
	REFERENCES [dbo].[PIMS_VOLUMETRIC_TYPE]([VOLUMETRIC_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_PRPTYP_PIM_PRPRTY_FK]
	FOREIGN KEY([PROPERTY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_TYPE]([PROPERTY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_PRPSTS_PIM_PRPRTY_FK]
	FOREIGN KEY([PROPERTY_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_STATUS_TYPE]([PROPERTY_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_PRPCLT_PIM_PRPRTY_FK]
	FOREIGN KEY([PROPERTY_CLASSIFICATION_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_CLASSIFICATION_TYPE]([PROPERTY_CLASSIFICATION_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_PPHSTT_PIM_PRPRTY_FK]
	FOREIGN KEY([PPH_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PPH_STATUS_TYPE]([PPH_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_PIDSRT_PIM_PRPRTY_FK]
	FOREIGN KEY([PROPERTY_DATA_SOURCE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_DATA_SOURCE_TYPE]([DATA_SOURCE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRPRTY_FK]
	FOREIGN KEY([PROPERTY_MANAGER_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_ORG_PIM_PRPRTY_FK]
	FOREIGN KEY([PROP_MGMT_ORG_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_DSTRCT_PIM_PRPRTY_FK]
	FOREIGN KEY([DISTRICT_CODE])
	REFERENCES [dbo].[PIMS_DISTRICT]([DISTRICT_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_ARUNIT_PIM_PRPRTY_FK]
	FOREIGN KEY([PROPERTY_AREA_UNIT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_AREA_UNIT_TYPE]([AREA_UNIT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_ADDRSS_PIM_PRPRTY_FK]
	FOREIGN KEY([ADDRESS_ID])
	REFERENCES [dbo].[PIMS_ADDRESS]([ADDRESS_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRACQF_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]
	ADD CONSTRAINT [PIM_ACQNFL_PIM_PRACQF_FK]
	FOREIGN KEY([ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_ACQUISITION_FILE]([ACQUISITION_FILE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]
	ADD CONSTRAINT [PIM_PRACQF_PIM_AIPAFL_FK]
	FOREIGN KEY([PROPERTY_ACQUISITION_FILE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_ACQUISITION_FILE]([PROPERTY_ACQUISITION_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_ACQ_FILE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_AIPAFL_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_RSRCHS_PIM_RESRCH_FK]
	FOREIGN KEY([RESEARCH_FILE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE_STATUS_TYPE]([RESEARCH_FILE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_RQSRCT_PIM_RESRCH_FK]
	FOREIGN KEY([REQUEST_SOURCE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_REQUEST_SOURCE_TYPE]([REQUEST_SOURCE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_PERSON_PIM_RESRCH_FK]
	FOREIGN KEY([REQUESTOR_NAME])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_ORG_PIM_RESRCH_FK]
	FOREIGN KEY([REQUESTOR_ORGANIZATION])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_RESRCH_PIM_PRSCRC_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_RESEARCH_FILE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRSCRC_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]
	ADD CONSTRAINT [PIM_PRSCRC_PIM_AIPRFL_FK]
	FOREIGN KEY([PROPERTY_RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_RESEARCH_FILE]([PROPERTY_RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ACT_INST_PROP_RSRCH_FILE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_AIPRFL_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_CONTACT_METHOD]
	ADD CONSTRAINT [PIM_PERSON_PIM_CNTMTH_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_CONTACT_METHOD]
	ADD CONSTRAINT [PIM_ORG_PIM_CNTMTH_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_CONTACT_METHOD]
	ADD CONSTRAINT [PIM_CNTMTT_PIM_CNTMTH_FK]
	FOREIGN KEY([CONTACT_METHOD_TYPE_CODE])
	REFERENCES [dbo].[PIMS_CONTACT_METHOD_TYPE]([CONTACT_METHOD_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_REGION_PIM_LEASE_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LSSTYP_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_STATUS_TYPE]([LEASE_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LSPRTY_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_PAY_RVBL_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PAY_RVBL_TYPE]([LEASE_PAY_RVBL_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LSPRGT_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_PROGRAM_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PROGRAM_TYPE]([LEASE_PROGRAM_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LSCATT_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_CATEGORY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_CATEGORY_TYPE]([LEASE_CATEGORY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LRESPT_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_RESPONSIBILITY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_RESPONSIBILITY_TYPE]([LEASE_RESPONSIBILITY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LPRPTY_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_PURPOSE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PURPOSE_TYPE]([LEASE_PURPOSE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LINITT_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_INITIATOR_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_INITIATOR_TYPE]([LEASE_INITIATOR_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE]
	ADD CONSTRAINT [PIM_LELIST_PIM_LEASE_FK]
	FOREIGN KEY([LEASE_LICENSE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_LICENSE_TYPE]([LEASE_LICENSE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_INSURANCE]
	ADD CONSTRAINT [PIM_LEASE_PIM_INSRNC_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_INSURANCE]
	ADD CONSTRAINT [PIM_INSPYT_PIM_INSRNC_FK]
	FOREIGN KEY([INSURANCE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_INSURANCE_TYPE]([INSURANCE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_LEASE_PIM_LSACIN_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_LSACIN_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_TERM]
	ADD CONSTRAINT [PIM_LTRMST_PIM_LSTERM_FK]
	FOREIGN KEY([LEASE_TERM_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_TERM_STATUS_TYPE]([LEASE_TERM_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_TERM]
	ADD CONSTRAINT [PIM_LSPMTF_PIM_LSTERM_FK]
	FOREIGN KEY([LEASE_PMT_FREQ_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PMT_FREQ_TYPE]([LEASE_PMT_FREQ_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_TERM]
	ADD CONSTRAINT [PIM_LEASE_PIM_LSTERM_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT]
	ADD CONSTRAINT [PIM_LSTERM_PIM_LSPYMT_FK]
	FOREIGN KEY([LEASE_TERM_ID])
	REFERENCES [dbo].[PIMS_LEASE_TERM]([LEASE_TERM_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT]
	ADD CONSTRAINT [PIM_LSPMMT_PIM_LSPYMT_FK]
	FOREIGN KEY([LEASE_PAYMENT_METHOD_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PAYMENT_METHOD_TYPE]([LEASE_PAYMENT_METHOD_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_PAYMENT]
	ADD CONSTRAINT [PIM_LPSTST_PIM_LSPYMT_FK]
	FOREIGN KEY([LEASE_PAYMENT_STATUS_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LEASE_PAYMENT_STATUS_TYPE]([LEASE_PAYMENT_STATUS_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	ADD CONSTRAINT [PIM_PERSON_PIM_TENANT_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	ADD CONSTRAINT [PIM_PERSON_PIM_PRIMARY_CONTACT_FK]
	FOREIGN KEY([PRIMARY_CONTACT_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	ADD CONSTRAINT [PIM_ORG_PIM_TENANT_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	ADD CONSTRAINT [PIM_LSSRTY_PIM_TENANT_FK]
	FOREIGN KEY([LESSOR_TYPE_CODE])
	REFERENCES [dbo].[PIMS_LESSOR_TYPE]([LESSOR_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_LEASE_TENANT]
	ADD CONSTRAINT [PIM_LEASE_PIM_TENANT_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION_ADDRESS]
	ADD CONSTRAINT [PIM_ORG_PIM_ORGADD_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION_ADDRESS]
	ADD CONSTRAINT [PIM_ADUSGT_PIM_ORGADD_FK]
	FOREIGN KEY([ADDRESS_USAGE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ADDRESS_USAGE_TYPE]([ADDRESS_USAGE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ORGANIZATION_ADDRESS]
	ADD CONSTRAINT [PIM_ADDRSS_PIM_ORGADD_FK]
	FOREIGN KEY([ADDRESS_ID])
	REFERENCES [dbo].[PIMS_ADDRESS]([ADDRESS_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PERSON_ADDRESS]
	ADD CONSTRAINT [PIM_PERSON_PIM_PERADD_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PERSON_ADDRESS]
	ADD CONSTRAINT [PIM_ADUSGT_PIM_PERADD_FK]
	FOREIGN KEY([ADDRESS_USAGE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_ADDRESS_USAGE_TYPE]([ADDRESS_USAGE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PERSON_ADDRESS]
	ADD CONSTRAINT [PIM_ADDRSS_PIM_PERADD_FK]
	FOREIGN KEY([ADDRESS_ID])
	REFERENCES [dbo].[PIMS_ADDRESS]([ADDRESS_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PERSON_ORGANIZATION]
	ADD CONSTRAINT [PIM_PERSON_PIM_PERORG_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PERSON_ORGANIZATION]
	ADD CONSTRAINT [PIM_ORG_PIM_PERORG_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]
	ADD CONSTRAINT [PIM_RRESPT_PIM_PRSPRP_FK]
	FOREIGN KEY([PROP_RESEARCH_PURPOSE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROP_RESEARCH_PURPOSE_TYPE]([PROP_RESEARCH_PURPOSE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PRF_PROP_RESEARCH_PURPOSE_TYPE]
	ADD CONSTRAINT [PIM_PRSCRC_PIM_PRSPRP_FK]
	FOREIGN KEY([PROPERTY_RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_RESEARCH_FILE]([PROPERTY_RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_EVALUATION]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPEVL_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	ADD CONSTRAINT [PIM_PIMPRT_PIM_PIMPRV_FK]
	FOREIGN KEY([PROPERTY_IMPROVEMENT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_IMPROVEMENT_TYPE]([PROPERTY_IMPROVEMENT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_IMPROVEMENT]
	ADD CONSTRAINT [PIM_LEASE_PIM_PIMPRV_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PROPLS_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	ADD CONSTRAINT [PIM_LEASE_PIM_PROPLS_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_LEASE]
	ADD CONSTRAINT [PIM_ARUNIT_PIM_PROPLS_FK]
	FOREIGN KEY([AREA_UNIT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_AREA_UNIT_TYPE]([AREA_UNIT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPORG_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_ORGANIZATION]
	ADD CONSTRAINT [PIM_ORG_PIM_PRPORG_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_SERVICE_FILE]
	ADD CONSTRAINT [PIM_PRSVFT_PIM_PRPSVC_FK]
	FOREIGN KEY([PROPERTY_SERVICE_FILE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_SERVICE_FILE_TYPE]([PROPERTY_SERVICE_FILE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE]
	ADD CONSTRAINT [PIM_PRPSVC_PIM_PRPRSF_FK]
	FOREIGN KEY([PROPERTY_SERVICE_FILE_ID])
	REFERENCES [dbo].[PIMS_PROPERTY_SERVICE_FILE]([PROPERTY_SERVICE_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_PROPERTY_SERVICE_FILE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRSF_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_TAX]
	ADD CONSTRAINT [PIM_PTRMTT_PIM_PRPTAX_FK]
	FOREIGN KEY([PROPERTY_TAX_REMIT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_TAX_REMIT_TYPE]([PROPERTY_TAX_REMIT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROPERTY_TAX]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPTAX_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPALT_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ADJACENT_LAND_TYPE]
	ADD CONSTRAINT [PIM_PRADJL_PIM_PRPALT_FK]
	FOREIGN KEY([PROPERTY_ADJACENT_LAND_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_ADJACENT_LAND_TYPE]([PROPERTY_ADJACENT_LAND_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRAT_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ANOMALY_TYPE]
	ADD CONSTRAINT [PIM_PRANOM_PIM_PRPRAT_FK]
	FOREIGN KEY([PROPERTY_ANOMALY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_ANOMALY_TYPE]([PROPERTY_ANOMALY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYPE]
	ADD CONSTRAINT [PIM_PRROAD_PIM_PRPRRT_FK]
	FOREIGN KEY([PROPERTY_ROAD_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_ROAD_TYPE]([PROPERTY_ROAD_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_ROAD_TYPE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRRT_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYPE]
	ADD CONSTRAINT [PIM_PRPTNR_PIM_PRPRTT_FK]
	FOREIGN KEY([PROPERTY_TENURE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_PROPERTY_TENURE_TYPE]([PROPERTY_TENURE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_PROP_PROP_TENURE_TYPE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPRTT_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_REGION_USER]
	ADD CONSTRAINT [PIM_USER_PIM_RGNUSR_FK]
	FOREIGN KEY([USER_ID])
	REFERENCES [dbo].[PIMS_USER]([USER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_REGION_USER]
	ADD CONSTRAINT [PIM_REGION_PIM_RGNUSR_FK]
	FOREIGN KEY([REGION_CODE])
	REFERENCES [dbo].[PIMS_REGION]([REGION_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_RESRCH_PIM_RSCHAI_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_RSCHAI_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE CASCADE 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE]
	ADD CONSTRAINT [PIM_RSHPRT_PIM_RSFLPR_FK]
	FOREIGN KEY([RESEARCH_PURPOSE_TYPE_CODE])
	REFERENCES [dbo].[PIMS_RESEARCH_PURPOSE_TYPE]([RESEARCH_PURPOSE_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_RESEARCH_FILE_PURPOSE]
	ADD CONSTRAINT [PIM_RESRCH_PIM_RSFLPR_FK]
	FOREIGN KEY([RESEARCH_FILE_ID])
	REFERENCES [dbo].[PIMS_RESEARCH_FILE]([RESEARCH_FILE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ROLE_CLAIM]
	ADD CONSTRAINT [PIM_ROLE_PIM_ROLCLM_FK]
	FOREIGN KEY([ROLE_ID])
	REFERENCES [dbo].[PIMS_ROLE]([ROLE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_ROLE_CLAIM]
	ADD CONSTRAINT [PIM_CLMTYP_PIM_ROLCLM_FK]
	FOREIGN KEY([CLAIM_ID])
	REFERENCES [dbo].[PIMS_CLAIM]([CLAIM_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
	ADD CONSTRAINT [PIM_SECDPT_PIM_SECDEP_FK]
	FOREIGN KEY([SECURITY_DEPOSIT_TYPE_CODE])
	REFERENCES [dbo].[PIMS_SECURITY_DEPOSIT_TYPE]([SECURITY_DEPOSIT_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT]
	ADD CONSTRAINT [PIM_LEASE_PIM_SECDEP_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	ADD CONSTRAINT [PIM_SECDEP_PIM_SCDPHL_FK]
	FOREIGN KEY([SECURITY_DEPOSIT_ID])
	REFERENCES [dbo].[PIMS_SECURITY_DEPOSIT]([SECURITY_DEPOSIT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	ADD CONSTRAINT [PIM_PERSON_PIM_SCDPHL_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_HOLDER]
	ADD CONSTRAINT [PIM_ORG_PIM_SCDPHL_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]
	ADD CONSTRAINT [PIM_SECDEP_PIM_SDRTRN_FK]
	FOREIGN KEY([SECURITY_DEPOSIT_ID])
	REFERENCES [dbo].[PIMS_SECURITY_DEPOSIT]([SECURITY_DEPOSIT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	ADD CONSTRAINT [PIM_SDRTRN_PIM_SCDPRH_FK]
	FOREIGN KEY([SECURITY_DEPOSIT_RETURN_ID])
	REFERENCES [dbo].[PIMS_SECURITY_DEPOSIT_RETURN]([SECURITY_DEPOSIT_RETURN_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	ADD CONSTRAINT [PIM_PERSON_PIM_SCDPRH_FK]
	FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[PIMS_PERSON]([PERSON_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_SECURITY_DEPOSIT_RETURN_HOLDER]
	ADD CONSTRAINT [PIM_ORG_PIM_SCDPRH_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION]
	ADD CONSTRAINT [PIM_USER_PIM_USRORG_FK]
	FOREIGN KEY([USER_ID])
	REFERENCES [dbo].[PIMS_USER]([USER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION]
	ADD CONSTRAINT [PIM_ROLE_PIM_USRORG_FK]
	FOREIGN KEY([ROLE_ID])
	REFERENCES [dbo].[PIMS_ROLE]([ROLE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_USER_ORGANIZATION]
	ADD CONSTRAINT [PIM_ORG_PIM_USRORG_FK]
	FOREIGN KEY([ORGANIZATION_ID])
	REFERENCES [dbo].[PIMS_ORGANIZATION]([ORGANIZATION_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_USER_ROLE]
	ADD CONSTRAINT [PIM_USER_PIM_USERRL_FK]
	FOREIGN KEY([USER_ID])
	REFERENCES [dbo].[PIMS_USER]([USER_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

ALTER TABLE [dbo].[PIMS_USER_ROLE]
	ADD CONSTRAINT [PIM_ROLE_PIM_USERRL_FK]
	FOREIGN KEY([ROLE_ID])
	REFERENCES [dbo].[PIMS_ROLE]([ROLE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO

