-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Tue Oct 25 14:08:59 PDT 2022
-- Execute this script on:
-- 		PSP_PIMS_S39_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S40_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_ACTIVITY_INSTANCE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_ACTIVITY_INSTANCE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_ACTIVITY_INSTANCE
PRINT N'Create table dbo.PIMS_LEASE_ACTIVITY_INSTANCE'
GO
CREATE TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]  ( 
	[LEASE_ACTIVITY_INSTANCE_ID]    	bigint NOT NULL CONSTRAINT [LSACIN_LEASE_ACTIVITY_INSTANCE_ID_DEF]  DEFAULT ('NEXT VALUE FOR [PIMS_LEASE_ACTIVITY_INSTANCE_ID_SEQ]'),
	[ACTIVITY_INSTANCE_ID]          	bigint NOT NULL,
	[LEASE_ID]                      	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [LSACIN_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [LSACIN_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [LSACIN_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [LSACIN_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [LSACIN_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [LSACIN_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [LSACIN_PK] PRIMARY KEY CLUSTERED([LEASE_ACTIVITY_INSTANCE_ID])
 ON [PRIMARY])
ON [PRIMARY]
	WITH (
		DATA_COMPRESSION = NONE
	)
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Associative entity between leases/licenses and activity instances.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE_ACTIVITY_INSTANCE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.LSACIN_LEASE_ACTIVITY_INSTANCE_TUC
PRINT N'Create unique constraint dbo.LSACIN_LEASE_ACTIVITY_INSTANCE_TUC'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [LSACIN_LEASE_ACTIVITY_INSTANCE_TUC]
	UNIQUE ([LEASE_ID], [ACTIVITY_INSTANCE_ID]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_LEASE_ACTIVITY_INSTANCE_HIST
PRINT N'Create table dbo.PIMS_LEASE_ACTIVITY_INSTANCE_HIST'
GO
CREATE TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_HIST]  ( 
	[_LEASE_ACTIVITY_INSTANCE_HIST_ID]	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]             	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                   	datetime NULL,
	[LEASE_ACTIVITY_INSTANCE_ID]      	bigint NOT NULL,
	[ACTIVITY_INSTANCE_ID]            	bigint NOT NULL,
	[LEASE_ID]                        	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]            	datetime NOT NULL,
	[APP_CREATE_USERID]               	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]            	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]       	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]       	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]          	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]       	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]  	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL,
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL,
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_LSACIN_H_PK] PRIMARY KEY CLUSTERED([_LEASE_ACTIVITY_INSTANCE_HIST_ID])
 ON [PRIMARY])
ON [PRIMARY]
	WITH (
		DATA_COMPRESSION = NONE
	)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_LSACIN_H_UK
PRINT N'Create unique constraint dbo.PIMS_LSACIN_H_UK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_HIST]
	ADD CONSTRAINT [PIMS_LSACIN_H_UK]
	UNIQUE ([_LEASE_ACTIVITY_INSTANCE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSACIN_ACTIVITY_INSTANCE_ID_IDX
PRINT N'Create index dbo.LSACIN_ACTIVITY_INSTANCE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSACIN_ACTIVITY_INSTANCE_ID_IDX]
	ON [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.LSACIN_LEASE_ID_IDX
PRINT N'Create index dbo.LSACIN_LEASE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [LSACIN_LEASE_ID_IDX]
	ON [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]([LEASE_ID])
	WITH (	
		DATA_COMPRESSION = NONE
	)
	ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_LEASE_PIM_LSACIN_FK
PRINT N'Create foreign key constraint dbo.PIM_LEASE_PIM_LSACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_LEASE_PIM_LSACIN_FK]
	FOREIGN KEY([LEASE_ID])
	REFERENCES [dbo].[PIMS_LEASE]([LEASE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_ACTINS_PIM_LSACIN_FK
PRINT N'Create foreign key constraint dbo.PIM_ACTINS_PIM_LSACIN_FK'
GO
ALTER TABLE [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE]
	ADD CONSTRAINT [PIM_ACTINS_PIM_LSACIN_FK]
	FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[PIMS_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSACIN_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_LSACIN_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSACIN_A_S_IUD_TR] ON PIMS_LEASE_ACTIVITY_INSTANCE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_LEASE_ACTIVITY_INSTANCE_HIST set END_DATE_HIST = @curr_date where LEASE_ACTIVITY_INSTANCE_ID in (select LEASE_ACTIVITY_INSTANCE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_LEASE_ACTIVITY_INSTANCE_HIST ([LEASE_ACTIVITY_INSTANCE_ID], [ACTIVITY_INSTANCE_ID], [LEASE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _LEASE_ACTIVITY_INSTANCE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LEASE_ACTIVITY_INSTANCE_ID], [ACTIVITY_INSTANCE_ID], [LEASE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_LEASE_ACTIVITY_INSTANCE_H_ID_SEQ]) as [_LEASE_ACTIVITY_INSTANCE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSACIN_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_LSACIN_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSACIN_I_S_U_TR] ON PIMS_LEASE_ACTIVITY_INSTANCE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.LEASE_ACTIVITY_INSTANCE_ID = deleted.LEASE_ACTIVITY_INSTANCE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_LEASE_ACTIVITY_INSTANCE
    set "LEASE_ACTIVITY_INSTANCE_ID" = inserted."LEASE_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID" = inserted."ACTIVITY_INSTANCE_ID",
      "LEASE_ID" = inserted."LEASE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_LEASE_ACTIVITY_INSTANCE
    inner join inserted
    on (PIMS_LEASE_ACTIVITY_INSTANCE.LEASE_ACTIVITY_INSTANCE_ID = inserted.LEASE_ACTIVITY_INSTANCE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_LSACIN_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_LSACIN_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_LSACIN_I_S_I_TR] ON PIMS_LEASE_ACTIVITY_INSTANCE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_LEASE_ACTIVITY_INSTANCE ("LEASE_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID",
      "LEASE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "LEASE_ACTIVITY_INSTANCE_ID",
      "ACTIVITY_INSTANCE_ID",
      "LEASE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
