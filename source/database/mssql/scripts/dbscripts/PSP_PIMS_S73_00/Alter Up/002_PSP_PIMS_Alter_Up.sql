-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Fri Jan 26 13:12:42 GMT-08:00 2024
-- Execute this script on:
-- 		PSP_PIMS_S72.00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S73.00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DSPSAL_PIM_DSPPSL_FK
PRINT N'Drop foreign key constraint dbo.PIM_DSPSAL_PIM_DSPPSL_FK'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR]
	DROP CONSTRAINT IF EXISTS [PIM_DSPSAL_PIM_DSPPSL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_DSPSAL_PIM_DSPPAG_FK
PRINT N'Drop foreign key constraint dbo.PIM_DSPSAL_PIM_DSPPAG_FK'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT]
	DROP CONSTRAINT IF EXISTS [PIM_DSPSAL_PIM_DSPPAG_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPSAL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPSAL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPSAL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPRP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPPRP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPRP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPAG_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DSPPAG_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPAG_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.DSPPAG_DISPOSITION_SALE_ID_IDX
PRINT N'Drop index dbo.DSPPAG_DISPOSITION_SALE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_DSP_PURCH_AGENT].[DSPPAG_DISPOSITION_SALE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPSL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DSPPSL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPSL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPSL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DSPPSL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPSL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.DSPPSL_DISPOSITION_SALE_ID_IDX
PRINT N'Drop index dbo.DSPPSL_DISPOSITION_SALE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_DSP_PURCH_SOLICITOR].[DSPPSL_DISPOSITION_SALE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPAG_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DSPPAG_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPAG_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DISPFL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DISPFL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DISPFL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPSAL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DSPSAL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPSAL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPRP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_DSPPRP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPRP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPSAL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DSPSAL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPSAL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPAG_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPPAG_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPAG_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPRP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DSPPRP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPRP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DSPPSL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DSPPSL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DSPPSL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DISPFL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_DISPFL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DISPFL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_DISPFL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_DISPFL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_DISPFL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_PROPERTY_BOUNDARY_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop view dbo.PIMS_PROPERTY_LOCATION_VW
PRINT N'Drop view dbo.PIMS_PROPERTY_LOCATION_VW'
GO
DROP VIEW IF EXISTS [dbo].[PIMS_PROPERTY_LOCATION_VW]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop check constraint dbo.PRPRTY_IS_OWNED_OR_DISPOSED_TCC
PRINT N'Drop check constraint dbo.PRPRTY_IS_OWNED_OR_DISPOSED_TCC'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY]
	DROP CONSTRAINT IF EXISTS [PRPRTY_IS_OWNED_OR_DISPOSED_TCC]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD [PROJECT_ID] bigint NULL, 
	[PRODUCT_ID] bigint NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the project table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'PROJECT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key reference to the product table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE', 
	@level2type = N'Column', @level2name = N'PRODUCT_ID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DSP_PURCH_AGENT
PRINT N'Alter table dbo.PIMS_DSP_PURCH_AGENT'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT]
	DROP COLUMN IF EXISTS [DISPOSITION_SALE_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DSP_PURCH_SOLICITOR
PRINT N'Alter table dbo.PIMS_DSP_PURCH_SOLICITOR'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR]
	DROP COLUMN IF EXISTS [DISPOSITION_SALE_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_SALE
PRINT N'Alter table dbo.PIMS_DISPOSITION_SALE'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_SALE]
	ADD [DSP_PURCH_AGENT_ID] bigint NULL, 
	[DSP_PURCH_SOLICITOR_ID] bigint NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the agent associated with the sale of the disposition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'DSP_PURCH_AGENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the solicitor associated with the sale of the disposition.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_SALE', 
	@level2type = N'Column', @level2name = N'DSP_PURCH_SOLICITOR_ID'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY
PRINT N'Alter table dbo.PIMS_PROPERTY'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD [IS_OTHER_INTEREST] bit NOT NULL CONSTRAINT [PRPRTY_IS_OTHER_INTEREST_DEF] DEFAULT (CONVERT([bit],(0)))
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Is this a property of other interest to the Ministry?' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY', 
	@level2type = N'Column', @level2name = N'IS_OTHER_INTEREST'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_HIST]
	ADD [IS_OTHER_INTEREST] bit NOT NULL DEFAULT CONVERT([bit],(0))
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop dynamically-named default constraint
PRINT N'Drop dynamically-named default constraint'
GO
DECLARE @sqlQry  VARCHAR(1000)
DECLARE @defName VARCHAR(100)
SET @defName = (SELECT obj.NAME
                FROM   SYSOBJECTS obj                          INNER JOIN
                       SYSCOLUMNS col on obj.ID = col.CDEFAULT INNER JOIN
                       SYSOBJECTS tbl on col.ID = tbl.ID
                WHERE  obj.XTYPE = 'D'
                   AND tbl.NAME = 'PIMS_PROPERTY_HIST' 
                   AND col.NAME = 'IS_OTHER_INTEREST')
SET @sqlQry = 'ALTER TABLE [dbo].[PIMS_PROPERTY_HIST] DROP CONSTRAINT IF EXISTS [' + @defName + ']'
EXEC (@sqlQry)
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE_HIST
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE_HIST'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_HIST]
	ADD [PROJECT_ID] bigint NULL, 
	[PRODUCT_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE_PROPERTY
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE_PROPERTY'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY]
	ADD [PROPERTY_NAME] nvarchar(500) NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive reference for the property associated with the disposition file.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_DISPOSITION_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'PROPERTY_NAME'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_FILE_PROPERTY_HIST
PRINT N'Alter table dbo.PIMS_DISPOSITION_FILE_PROPERTY_HIST'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE_PROPERTY_HIST]
	ADD [PROPERTY_NAME] nvarchar(500) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DISPOSITION_SALE_HIST
PRINT N'Alter table dbo.PIMS_DISPOSITION_SALE_HIST'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_SALE_HIST]
	ADD [DSP_PURCH_AGENT_ID] bigint NULL, 
	[DSP_PURCH_SOLICITOR_ID] bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DSP_PURCH_SOLICITOR_HIST
PRINT N'Alter table dbo.PIMS_DSP_PURCH_SOLICITOR_HIST'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_SOLICITOR_HIST]
	DROP COLUMN IF EXISTS [DISPOSITION_SALE_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_DSP_PURCH_AGENT_HIST
PRINT N'Alter table dbo.PIMS_DSP_PURCH_AGENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_DSP_PURCH_AGENT_HIST]
	DROP COLUMN IF EXISTS [DISPOSITION_SALE_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_LOCATION_VW
PRINT N'Create view dbo.PIMS_PROPERTY_LOCATION_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_LOCATION_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN                   
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , PROP.PROPERTY_CLASSIFICATION_TYPE_CODE  
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TNUR.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE  TNUR INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYPE TNTY ON TNTY.PROPERTY_TENURE_TYPE_CODE = TNUR.PROPERTY_TENURE_TYPE_CODE
                                                      AND TNTY.PROPERTY_ID               = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.NAME
     , PROP.DESCRIPTION
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.LOCATION AS GEOMETRY
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.SURVEY_PLAN_NUMBER
     , PROP.ENCUMBRANCE_REASON          
     , PROP.IS_SENSITIVE
     , PROP.IS_OWNED
     , PROP.IS_DISPOSED
     , PROP.IS_PROPERTY_OF_INTEREST 
     , PROP.IS_OTHER_INTEREST
     , PROP.IS_VISIBLE_TO_OTHER_AGENCIES
     , PROP.ZONING
     , PROP.ZONING_POTENTIAL 
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN ('PYBLMOTI', 'PYBLBCTFA')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_TERM     TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN ('PYBLMOTI', 'PYBLBCTFA')
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE AND LEAS.ORIG_EXPIRY_DATE        ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE AND LEAS.ORIG_EXPIRY_DATE IS NULL) OR
                           (getutcdate() BETWEEN TERM.TERM_START_DATE AND TERM.TERM_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.TERM_START_DATE AND TERM.TERM_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_RECEIVABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_TERM     TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE AND LEAS.ORIG_EXPIRY_DATE        ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE AND LEAS.ORIG_EXPIRY_DATE IS NULL) OR
                           (getutcdate() BETWEEN TERM.TERM_START_DATE AND TERM.TERM_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.TERM_START_DATE AND TERM.TERM_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_RECEIVABLE_LEASE
FROM   PIMS_PROPERTY       PROP                                                    LEFT OUTER JOIN                                                                                     
       PIMS_ADDRESS        ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY        CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
WHERE  PROP.LOCATION IS NOT NULL

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_BOUNDARY_VW
PRINT N'Create view dbo.PIMS_PROPERTY_BOUNDARY_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_VW] AS
SELECT PROP.PROPERTY_ID
     , PROP.PID
     , RIGHT('000000000' + CAST(PROP.PID AS VARCHAR(9)), 9) AS PID_PADDED
     , PROP.PIN
     , PROP.PROPERTY_TYPE_CODE
     , PROP.PROPERTY_STATUS_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_TYPE_CODE
     , PROP.PROPERTY_DATA_SOURCE_EFFECTIVE_DATE
     , PROP.PROPERTY_CLASSIFICATION_TYPE_CODE
     , (SELECT STRING_AGG(TENURE_DESC, ', ')
        FROM   (SELECT TNUR.DESCRIPTION AS TENURE_DESC
                FROM   PIMS_PROPERTY_TENURE_TYPE  TNUR INNER JOIN
                       PIMS_PROP_PROP_TENURE_TYPE TNTY ON TNTY.PROPERTY_TENURE_TYPE_CODE = TNUR.PROPERTY_TENURE_TYPE_CODE
                                                      AND TNTY.PROPERTY_ID               = PROP.PROPERTY_ID) temp) AS PROPERTY_TENURE_TYPE_CODE
     , ADDR.STREET_ADDRESS_1
     , ADDR.STREET_ADDRESS_2
     , ADDR.STREET_ADDRESS_3
     , ADDR.MUNICIPALITY_NAME
     , ADDR.POSTAL_CODE
     , PROV.PROVINCE_STATE_CODE
     , PROV.DESCRIPTION AS PROVINCE_NAME
     , CNTY.COUNTRY_CODE
     , CNTY.DESCRIPTION AS COUNTRY_NAME
     , PROP.NAME
     , PROP.DESCRIPTION
     , PROP.ADDRESS_ID
     , PROP.REGION_CODE
     , PROP.DISTRICT_CODE
     , PROP.BOUNDARY AS GEOMETRY  
     , PROP.PROPERTY_AREA_UNIT_TYPE_CODE
     , PROP.LAND_AREA
     , PROP.LAND_LEGAL_DESCRIPTION
     , PROP.SURVEY_PLAN_NUMBER
     , PROP.ENCUMBRANCE_REASON        
     , PROP.IS_SENSITIVE
     , PROP.IS_OWNED
     , PROP.IS_DISPOSED                    
     , PROP.IS_PROPERTY_OF_INTEREST 
     , PROP.IS_OTHER_INTEREST
     , PROP.IS_VISIBLE_TO_OTHER_AGENCIES
     , PROP.ZONING
     , PROP.ZONING_POTENTIAL
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN ('PYBLMOTI', 'PYBLBCTFA')), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_TERM     TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE IN ('PYBLMOTI', 'PYBLBCTFA')
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE AND LEAS.ORIG_EXPIRY_DATE        ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE AND LEAS.ORIG_EXPIRY_DATE IS NULL) OR
                           (getutcdate() BETWEEN TERM.TERM_START_DATE AND TERM.TERM_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.TERM_START_DATE AND TERM.TERM_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_PAYABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_RECEIVABLE_LEASE
     , IIF(EXISTS (SELECT 1
                   FROM   PIMS_PROPERTY_LEASE PRLS                                          JOIN
                          PIMS_LEASE          LEAS ON PRLS.PROPERTY_ID = PROP.PROPERTY_ID
                                                  AND PRLS.LEASE_ID    = LEAS.LEASE_ID LEFT JOIN
                          PIMS_LEASE_TERM     TERM ON TERM.LEASE_ID    = LEAS.LEASE_ID
                   WHERE  LEAS.LEASE_PAY_RVBL_TYPE_CODE = 'RCVBL'
                      AND ((getutcdate() BETWEEN LEAS.ORIG_START_DATE AND LEAS.ORIG_EXPIRY_DATE        ) OR
                           (getutcdate() >=      LEAS.ORIG_START_DATE AND LEAS.ORIG_EXPIRY_DATE IS NULL) OR
                           (getutcdate() BETWEEN TERM.TERM_START_DATE AND TERM.TERM_EXPIRY_DATE        ) OR
                           (getutcdate() >=      TERM.TERM_START_DATE AND TERM.TERM_EXPIRY_DATE IS NULL))), CONVERT([bit],(1)), CONVERT([bit],(0))) AS IS_ACTIVE_RECEIVABLE_LEASE
FROM   PIMS_PROPERTY       PROP                                                    LEFT OUTER JOIN
       PIMS_ADDRESS        ADDR ON ADDR.ADDRESS_ID        = PROP.ADDRESS_ID        LEFT OUTER JOIN
       PIMS_PROVINCE_STATE PROV ON PROV.PROVINCE_STATE_ID = ADDR.PROVINCE_STATE_ID LEFT OUTER JOIN
       PIMS_COUNTRY        CNTY ON CNTY.COUNTRY_ID        = ADDR.COUNTRY_ID
WHERE  PROP.BOUNDARY IS NOT NULL

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DISPFL_PROJECT_ID_IDX
PRINT N'Create index dbo.DISPFL_PROJECT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DISPFL_PROJECT_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([PROJECT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPSAL_DSP_PURCH_SOLICITOR_ID_IDX
PRINT N'Create index dbo.DSPSAL_DSP_PURCH_SOLICITOR_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPSAL_DSP_PURCH_SOLICITOR_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_SALE]([DSP_PURCH_SOLICITOR_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DISPFL_PRODUCT_ID_IDX
PRINT N'Create index dbo.DISPFL_PRODUCT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DISPFL_PRODUCT_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_FILE]([PRODUCT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.DSPSAL_DSP_PURCH_AGENT_ID_IDX
PRINT N'Create index dbo.DSPSAL_DSP_PURCH_AGENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [DSPSAL_DSP_PURCH_AGENT_ID_IDX]
	ON [dbo].[PIMS_DISPOSITION_SALE]([DSP_PURCH_AGENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DISPFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DISPFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DISPFL_I_S_U_TR] ON PIMS_DISPOSITION_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_ID = deleted.DISPOSITION_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE
    set "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DISPOSITION_STATUS_TYPE_CODE" = inserted."DISPOSITION_STATUS_TYPE_CODE",
      "DISPOSITION_FILE_STATUS_TYPE_CODE" = inserted."DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DISPOSITION_TYPE_CODE" = inserted."DISPOSITION_TYPE_CODE",
      "DISPOSITION_FUNDING_TYPE_CODE" = inserted."DISPOSITION_FUNDING_TYPE_CODE",
      "DISPOSITION_INITIATING_DOC_TYPE_CODE" = inserted."DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DSP_PHYS_FILE_STATUS_TYPE_CODE" = inserted."DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DSP_INITIATING_BRANCH_TYPE_CODE" = inserted."DSP_INITIATING_BRANCH_TYPE_CODE",
      "REGION_CODE" = inserted."REGION_CODE",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "FILE_NAME" = inserted."FILE_NAME",
      "FILE_REFERENCE" = inserted."FILE_REFERENCE",
      "OTHER_DISPOSITION_TYPE" = inserted."OTHER_DISPOSITION_TYPE",
      "OTHER_INITIATING_DOC_TYPE" = inserted."OTHER_INITIATING_DOC_TYPE",
      "ASSIGNED_DT" = inserted."ASSIGNED_DT",
      "COMPLETED_DT" = inserted."COMPLETED_DT",
      "INITIATING_DOCUMENT_DT" = inserted."INITIATING_DOCUMENT_DT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE
    inner join inserted
    on (PIMS_DISPOSITION_FILE.DISPOSITION_FILE_ID = inserted.DISPOSITION_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_A_S_IUD_TR] ON PIMS_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_HIST set END_DATE_HIST = @curr_date where PROPERTY_ID in (select PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_HIST ([PROPERTY_ID], [PROPERTY_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [NAME], [DESCRIPTION], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [GENERAL_LOCATION], [SURVEY_PLAN_NUMBER], [ENCUMBRANCE_REASON], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_DISPOSED], [IS_PROPERTY_OF_INTEREST], [IS_OTHER_INTEREST], [IS_VISIBLE_TO_OTHER_AGENCIES], [IS_SENSITIVE], [IS_PROVINCIAL_PUBLIC_HWY], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ZONING], [ZONING_POTENTIAL], [ADDITIONAL_DETAILS], [IS_UTILITIES_PAYABLE], [IS_TAXES_PAYABLE], [BAND_NAME], [RESERVE_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ID], [PROPERTY_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [PROPERTY_CLASSIFICATION_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [NAME], [DESCRIPTION], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [GENERAL_LOCATION], [SURVEY_PLAN_NUMBER], [ENCUMBRANCE_REASON], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_DISPOSED], [IS_PROPERTY_OF_INTEREST], [IS_OTHER_INTEREST], [IS_VISIBLE_TO_OTHER_AGENCIES], [IS_SENSITIVE], [IS_PROVINCIAL_PUBLIC_HWY], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ZONING], [ZONING_POTENTIAL], [ADDITIONAL_DETAILS], [IS_UTILITIES_PAYABLE], [IS_TAXES_PAYABLE], [BAND_NAME], [RESERVE_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_H_ID_SEQ]) as [_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DISPFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DISPFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DISPFL_A_S_IUD_TR] ON PIMS_DISPOSITION_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_FILE_HIST set END_DATE_HIST = @curr_date where DISPOSITION_FILE_ID in (select DISPOSITION_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_FILE_HIST ([DISPOSITION_FILE_ID], [DISPOSITION_STATUS_TYPE_CODE], [DISPOSITION_FILE_STATUS_TYPE_CODE], [DISPOSITION_TYPE_CODE], [DISPOSITION_FUNDING_TYPE_CODE], [DISPOSITION_INITIATING_DOC_TYPE_CODE], [DSP_PHYS_FILE_STATUS_TYPE_CODE], [DSP_INITIATING_BRANCH_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [PRODUCT_ID], [FILE_NUMBER], [FILE_NAME], [FILE_REFERENCE], [OTHER_DISPOSITION_TYPE], [OTHER_INITIATING_DOC_TYPE], [ASSIGNED_DT], [COMPLETED_DT], [INITIATING_DOCUMENT_DT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_FILE_ID], [DISPOSITION_STATUS_TYPE_CODE], [DISPOSITION_FILE_STATUS_TYPE_CODE], [DISPOSITION_TYPE_CODE], [DISPOSITION_FUNDING_TYPE_CODE], [DISPOSITION_INITIATING_DOC_TYPE_CODE], [DSP_PHYS_FILE_STATUS_TYPE_CODE], [DSP_INITIATING_BRANCH_TYPE_CODE], [REGION_CODE], [PROJECT_ID], [PRODUCT_ID], [FILE_NUMBER], [FILE_NAME], [FILE_REFERENCE], [OTHER_DISPOSITION_TYPE], [OTHER_INITIATING_DOC_TYPE], [ASSIGNED_DT], [COMPLETED_DT], [INITIATING_DOCUMENT_DT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_FILE_H_ID_SEQ]) as [_DISPOSITION_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPSL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPPSL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPSL_I_S_U_TR] ON PIMS_DSP_PURCH_SOLICITOR INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_PURCH_SOLICITOR_ID = deleted.DSP_PURCH_SOLICITOR_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_PURCH_SOLICITOR
    set "DSP_PURCH_SOLICITOR_ID" = inserted."DSP_PURCH_SOLICITOR_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_PURCH_SOLICITOR
    inner join inserted
    on (PIMS_DSP_PURCH_SOLICITOR.DSP_PURCH_SOLICITOR_ID = inserted.DSP_PURCH_SOLICITOR_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPRP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPPRP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPRP_A_S_IUD_TR] ON PIMS_DISPOSITION_FILE_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_FILE_PROPERTY_HIST set END_DATE_HIST = @curr_date where DISPOSITION_FILE_PROPERTY_ID in (select DISPOSITION_FILE_PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_FILE_PROPERTY_HIST ([DISPOSITION_FILE_PROPERTY_ID], [DISPOSITION_FILE_ID], [PROPERTY_ID], [PROPERTY_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_FILE_PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_FILE_PROPERTY_ID], [DISPOSITION_FILE_ID], [PROPERTY_ID], [PROPERTY_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_FILE_PROPERTY_H_ID_SEQ]) as [_DISPOSITION_FILE_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPAG_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPPAG_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPAG_I_S_U_TR] ON PIMS_DSP_PURCH_AGENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DSP_PURCH_AGENT_ID = deleted.DSP_PURCH_AGENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DSP_PURCH_AGENT
    set "DSP_PURCH_AGENT_ID" = inserted."DSP_PURCH_AGENT_ID",
      "PERSON_ID" = inserted."PERSON_ID",
      "ORGANIZATION_ID" = inserted."ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID" = inserted."PRIMARY_CONTACT_ID",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DSP_PURCH_AGENT
    inner join inserted
    on (PIMS_DSP_PURCH_AGENT.DSP_PURCH_AGENT_ID = inserted.DSP_PURCH_AGENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPSAL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPSAL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPSAL_A_S_IUD_TR] ON PIMS_DISPOSITION_SALE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DISPOSITION_SALE_HIST set END_DATE_HIST = @curr_date where DISPOSITION_SALE_ID in (select DISPOSITION_SALE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DISPOSITION_SALE_HIST ([DISPOSITION_SALE_ID], [DISPOSITION_FILE_ID], [DSP_PURCH_AGENT_ID], [DSP_PURCH_SOLICITOR_ID], [FINAL_CONDITION_REMOVAL_DT], [SALE_COMPLETION_DT], [SALE_FISCAL_YEAR], [SALE_FINAL_AMT], [REALTOR_COMMISSION_AMT], [IS_GST_REQUIRED], [GST_COLLECTED_AMT], [NET_BOOK_AMT], [TOTAL_COST_AMT], [SPP_AMT], [REMEDIATION_AMT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DISPOSITION_SALE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DISPOSITION_SALE_ID], [DISPOSITION_FILE_ID], [DSP_PURCH_AGENT_ID], [DSP_PURCH_SOLICITOR_ID], [FINAL_CONDITION_REMOVAL_DT], [SALE_COMPLETION_DT], [SALE_FISCAL_YEAR], [SALE_FINAL_AMT], [REALTOR_COMMISSION_AMT], [IS_GST_REQUIRED], [GST_COLLECTED_AMT], [NET_BOOK_AMT], [TOTAL_COST_AMT], [SPP_AMT], [REMEDIATION_AMT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DISPOSITION_SALE_H_ID_SEQ]) as [_DISPOSITION_SALE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_I_TR] ON PIMS_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY ("PROPERTY_ID",
      "PROPERTY_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME",
      "DESCRIPTION",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER",
      "ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "NOTES",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_DISPOSED",
      "IS_PROPERTY_OF_INTEREST",
      "IS_OTHER_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE",
      "IS_PROVINCIAL_PUBLIC_HWY",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ZONING",
      "ZONING_POTENTIAL",
      "ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE",
      "BAND_NAME",
      "RESERVE_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ID",
      "PROPERTY_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME",
      "DESCRIPTION",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER",
      "ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "NOTES",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_DISPOSED",
      "IS_PROPERTY_OF_INTEREST",
      "IS_OTHER_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE",
      "IS_PROVINCIAL_PUBLIC_HWY",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ZONING",
      "ZONING_POTENTIAL",
      "ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE",
      "BAND_NAME",
      "RESERVE_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPRP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPPRP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPRP_I_S_I_TR] ON PIMS_DISPOSITION_FILE_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE_PROPERTY ("DISPOSITION_FILE_PROPERTY_ID",
      "DISPOSITION_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_FILE_PROPERTY_ID",
      "DISPOSITION_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPSAL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPSAL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPSAL_I_S_I_TR] ON PIMS_DISPOSITION_SALE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_SALE ("DISPOSITION_SALE_ID",
      "DISPOSITION_FILE_ID",
      "DSP_PURCH_AGENT_ID",
      "DSP_PURCH_SOLICITOR_ID",
      "FINAL_CONDITION_REMOVAL_DT",
      "SALE_COMPLETION_DT",
      "SALE_FISCAL_YEAR",
      "SALE_FINAL_AMT",
      "REALTOR_COMMISSION_AMT",
      "IS_GST_REQUIRED",
      "GST_COLLECTED_AMT",
      "NET_BOOK_AMT",
      "TOTAL_COST_AMT",
      "SPP_AMT",
      "REMEDIATION_AMT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_SALE_ID",
      "DISPOSITION_FILE_ID",
      "DSP_PURCH_AGENT_ID",
      "DSP_PURCH_SOLICITOR_ID",
      "FINAL_CONDITION_REMOVAL_DT",
      "SALE_COMPLETION_DT",
      "SALE_FISCAL_YEAR",
      "SALE_FINAL_AMT",
      "REALTOR_COMMISSION_AMT",
      "IS_GST_REQUIRED",
      "GST_COLLECTED_AMT",
      "NET_BOOK_AMT",
      "TOTAL_COST_AMT",
      "SPP_AMT",
      "REMEDIATION_AMT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DISPFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DISPFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DISPFL_I_S_I_TR] ON PIMS_DISPOSITION_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DISPOSITION_FILE ("DISPOSITION_FILE_ID",
      "DISPOSITION_STATUS_TYPE_CODE",
      "DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DISPOSITION_TYPE_CODE",
      "DISPOSITION_FUNDING_TYPE_CODE",
      "DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DSP_INITIATING_BRANCH_TYPE_CODE",
      "REGION_CODE",
      "PROJECT_ID",
      "PRODUCT_ID",
      "FILE_NUMBER",
      "FILE_NAME",
      "FILE_REFERENCE",
      "OTHER_DISPOSITION_TYPE",
      "OTHER_INITIATING_DOC_TYPE",
      "ASSIGNED_DT",
      "COMPLETED_DT",
      "INITIATING_DOCUMENT_DT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DISPOSITION_FILE_ID",
      "DISPOSITION_STATUS_TYPE_CODE",
      "DISPOSITION_FILE_STATUS_TYPE_CODE",
      "DISPOSITION_TYPE_CODE",
      "DISPOSITION_FUNDING_TYPE_CODE",
      "DISPOSITION_INITIATING_DOC_TYPE_CODE",
      "DSP_PHYS_FILE_STATUS_TYPE_CODE",
      "DSP_INITIATING_BRANCH_TYPE_CODE",
      "REGION_CODE",
      "PROJECT_ID",
      "PRODUCT_ID",
      "FILE_NUMBER",
      "FILE_NAME",
      "FILE_REFERENCE",
      "OTHER_DISPOSITION_TYPE",
      "OTHER_INITIATING_DOC_TYPE",
      "ASSIGNED_DT",
      "COMPLETED_DT",
      "INITIATING_DOCUMENT_DT",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPAG_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPPAG_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPAG_I_S_I_TR] ON PIMS_DSP_PURCH_AGENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_PURCH_AGENT ("DSP_PURCH_AGENT_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DSP_PURCH_AGENT_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPSL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPPSL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPSL_A_S_IUD_TR] ON PIMS_DSP_PURCH_SOLICITOR FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DSP_PURCH_SOLICITOR_HIST set END_DATE_HIST = @curr_date where DSP_PURCH_SOLICITOR_ID in (select DSP_PURCH_SOLICITOR_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DSP_PURCH_SOLICITOR_HIST ([DSP_PURCH_SOLICITOR_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DSP_PURCH_SOLICITOR_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DSP_PURCH_SOLICITOR_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DSP_PURCH_SOLICITOR_H_ID_SEQ]) as [_DSP_PURCH_SOLICITOR_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPSL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_DSPPSL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPSL_I_S_I_TR] ON PIMS_DSP_PURCH_SOLICITOR INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_DSP_PURCH_SOLICITOR ("DSP_PURCH_SOLICITOR_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "DSP_PURCH_SOLICITOR_ID",
      "PERSON_ID",
      "ORGANIZATION_ID",
      "PRIMARY_CONTACT_ID",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPAG_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_DSPPAG_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPAG_A_S_IUD_TR] ON PIMS_DSP_PURCH_AGENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_DSP_PURCH_AGENT_HIST set END_DATE_HIST = @curr_date where DSP_PURCH_AGENT_ID in (select DSP_PURCH_AGENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_DSP_PURCH_AGENT_HIST ([DSP_PURCH_AGENT_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _DSP_PURCH_AGENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [DSP_PURCH_AGENT_ID], [PERSON_ID], [ORGANIZATION_ID], [PRIMARY_CONTACT_ID], [IS_DISABLED], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_DSP_PURCH_AGENT_H_ID_SEQ]) as [_DSP_PURCH_AGENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPPRP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPPRP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPPRP_I_S_U_TR] ON PIMS_DISPOSITION_FILE_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_FILE_PROPERTY_ID = deleted.DISPOSITION_FILE_PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_FILE_PROPERTY
    set "DISPOSITION_FILE_PROPERTY_ID" = inserted."DISPOSITION_FILE_PROPERTY_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_NAME" = inserted."PROPERTY_NAME",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_FILE_PROPERTY
    inner join inserted
    on (PIMS_DISPOSITION_FILE_PROPERTY.DISPOSITION_FILE_PROPERTY_ID = inserted.DISPOSITION_FILE_PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_U_TR] ON PIMS_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ID = deleted.PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY
    set "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE" = inserted."PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE" = inserted."PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE" = inserted."SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE" = inserted."VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE" = inserted."VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE" = inserted."PPH_STATUS_TYPE_CODE",
      "PROPERTY_CLASSIFICATION_TYPE_CODE" = inserted."PROPERTY_CLASSIFICATION_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE" = inserted."PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "NAME" = inserted."NAME",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "PID" = inserted."PID",
      "PIN" = inserted."PIN",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "FILE_NUMBER_SUFFIX" = inserted."FILE_NUMBER_SUFFIX",
      "LAND_AREA" = inserted."LAND_AREA",
      "LAND_LEGAL_DESCRIPTION" = inserted."LAND_LEGAL_DESCRIPTION",
      "BOUNDARY" = inserted."BOUNDARY",
      "LOCATION" = inserted."LOCATION",
      "GENERAL_LOCATION" = inserted."GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER" = inserted."SURVEY_PLAN_NUMBER",
      "ENCUMBRANCE_REASON" = inserted."ENCUMBRANCE_REASON",
      "SURPLUS_DECLARATION_COMMENT" = inserted."SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE" = inserted."SURPLUS_DECLARATION_DATE",
      "NOTES" = inserted."NOTES",
      "MUNICIPAL_ZONING" = inserted."MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL" = inserted."IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT" = inserted."VOLUMETRIC_MEASUREMENT",
      "IS_OWNED" = inserted."IS_OWNED",
      "IS_DISPOSED" = inserted."IS_DISPOSED",
      "IS_PROPERTY_OF_INTEREST" = inserted."IS_PROPERTY_OF_INTEREST",
      "IS_OTHER_INTEREST" = inserted."IS_OTHER_INTEREST",
      "IS_VISIBLE_TO_OTHER_AGENCIES" = inserted."IS_VISIBLE_TO_OTHER_AGENCIES",
      "IS_SENSITIVE" = inserted."IS_SENSITIVE",
      "IS_PROVINCIAL_PUBLIC_HWY" = inserted."IS_PROVINCIAL_PUBLIC_HWY",
      "PPH_STATUS_UPDATE_USERID" = inserted."PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP" = inserted."PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID" = inserted."PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT" = inserted."IS_RWY_BELT_DOM_PATENT",
      "ZONING" = inserted."ZONING",
      "ZONING_POTENTIAL" = inserted."ZONING_POTENTIAL",
      "ADDITIONAL_DETAILS" = inserted."ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE" = inserted."IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE" = inserted."IS_TAXES_PAYABLE",
      "BAND_NAME" = inserted."BAND_NAME",
      "RESERVE_NAME" = inserted."RESERVE_NAME",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY
    inner join inserted
    on (PIMS_PROPERTY.PROPERTY_ID = inserted.PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_DSPSAL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_DSPSAL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_DSPSAL_I_S_U_TR] ON PIMS_DISPOSITION_SALE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.DISPOSITION_SALE_ID = deleted.DISPOSITION_SALE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_DISPOSITION_SALE
    set "DISPOSITION_SALE_ID" = inserted."DISPOSITION_SALE_ID",
      "DISPOSITION_FILE_ID" = inserted."DISPOSITION_FILE_ID",
      "DSP_PURCH_AGENT_ID" = inserted."DSP_PURCH_AGENT_ID",
      "DSP_PURCH_SOLICITOR_ID" = inserted."DSP_PURCH_SOLICITOR_ID",
      "FINAL_CONDITION_REMOVAL_DT" = inserted."FINAL_CONDITION_REMOVAL_DT",
      "SALE_COMPLETION_DT" = inserted."SALE_COMPLETION_DT",
      "SALE_FISCAL_YEAR" = inserted."SALE_FISCAL_YEAR",
      "SALE_FINAL_AMT" = inserted."SALE_FINAL_AMT",
      "REALTOR_COMMISSION_AMT" = inserted."REALTOR_COMMISSION_AMT",
      "IS_GST_REQUIRED" = inserted."IS_GST_REQUIRED",
      "GST_COLLECTED_AMT" = inserted."GST_COLLECTED_AMT",
      "NET_BOOK_AMT" = inserted."NET_BOOK_AMT",
      "TOTAL_COST_AMT" = inserted."TOTAL_COST_AMT",
      "SPP_AMT" = inserted."SPP_AMT",
      "REMEDIATION_AMT" = inserted."REMEDIATION_AMT",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_DISPOSITION_SALE
    inner join inserted
    on (PIMS_DISPOSITION_SALE.DISPOSITION_SALE_ID = inserted.DISPOSITION_SALE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTY_BOUNDARY_IDX
PRINT N'Create index dbo.PRPRTY_BOUNDARY_IDX'
GO
-- [PRPRTY_BOUNDARY_IDX] : Scripting for Spatial Index currently not supported
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTY_LOCATION_IDX
PRINT N'Create index dbo.PRPRTY_LOCATION_IDX'
GO
-- [PRPRTY_LOCATION_IDX] : Scripting for Spatial Index currently not supported
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PROJCT_PIM_DISPFL_FK
PRINT N'Create foreign key constraint dbo.PIM_PROJCT_PIM_DISPFL_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_PROJCT_PIM_DISPFL_FK]
	FOREIGN KEY([PROJECT_ID])
	REFERENCES [dbo].[PIMS_PROJECT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRODCT_PIM_DISPFL_FK
PRINT N'Create foreign key constraint dbo.PIM_PRODCT_PIM_DISPFL_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_FILE]
	ADD CONSTRAINT [PIM_PRODCT_PIM_DISPFL_FK]
	FOREIGN KEY([PRODUCT_ID])
	REFERENCES [dbo].[PIMS_PRODUCT]([ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPPAG_PIM_DSPSAL_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPPAG_PIM_DSPSAL_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_SALE]
	ADD CONSTRAINT [PIM_DSPPAG_PIM_DSPSAL_FK]
	FOREIGN KEY([DSP_PURCH_AGENT_ID])
	REFERENCES [dbo].[PIMS_DSP_PURCH_AGENT]([DSP_PURCH_AGENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DSPPSL_PIM_DSPSAL_FK
PRINT N'Create foreign key constraint dbo.PIM_DSPPSL_PIM_DSPSAL_FK'
GO
ALTER TABLE [dbo].[PIMS_DISPOSITION_SALE]
	ADD CONSTRAINT [PIM_DSPPSL_PIM_DSPSAL_FK]
	FOREIGN KEY([DSP_PURCH_SOLICITOR_ID])
	REFERENCES [dbo].[PIMS_DSP_PURCH_SOLICITOR]([DSP_PURCH_SOLICITOR_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
