-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Tue May 06 13:58:28 PDT 2025
-- Execute this script on:
-- 		PSP_PIMS_S103_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S104_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop foreign key constraint dbo.PIM_MGTPGM_PIM_MGMTFL_FK
PRINT N'Drop foreign key constraint dbo.PIM_MGTPGM_PIM_MGMTFL_FK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE]
	DROP CONSTRAINT IF EXISTS [PIM_MGTPGM_PIM_MGMTFL_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MGTDOC_DOCUMENT_ID_IDX
PRINT N'Drop index dbo.MGTDOC_DOCUMENT_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_FILE_DOCUMENT].[MGTDOC_DOCUMENT_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MGMTNT_NOTE_ID_IDX
PRINT N'Drop index dbo.MGMTNT_NOTE_ID_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_FILE_NOTE].[MGMTNT_NOTE_ID_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGMTFL_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_MGMTFL_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGMTFL_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop index dbo.MGMTFL_MANAGEMENT_FILE_PROGRAM_TYPE_CODE_IDX
PRINT N'Drop index dbo.MGMTFL_MANAGEMENT_FILE_PROGRAM_TYPE_CODE_IDX'
GO
DROP INDEX IF EXISTS [dbo].[PIMS_MANAGEMENT_FILE].[MGMTFL_MANAGEMENT_FILE_PROGRAM_TYPE_CODE_IDX]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGMTFL_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MGMTFL_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGMTFL_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGTPRP_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MGTPRP_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGTPRP_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGMTFL_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MGMTFL_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGMTFL_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGTPRP_A_S_IUD_TR
PRINT N'Drop trigger dbo.PIMS_MGTPRP_A_S_IUD_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGTPRP_A_S_IUD_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_PRPRTY_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_PRPRTY_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_PRPRTY_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGTPRP_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MGTPRP_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGTPRP_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGTPGM_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MGTPGM_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGTPGM_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGTPGM_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MGTPGM_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGTPGM_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop primary key constraint dbo.MGTPGM_PK
PRINT N'Drop primary key constraint dbo.MGTPGM_PK'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_PROGRAM_TYPE]
	DROP CONSTRAINT IF EXISTS [MGTPGM_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_TAX_RESPONSIBILITY_TYPE
PRINT N'Create table dbo.PIMS_TAX_RESPONSIBILITY_TYPE'
GO
CREATE TABLE [dbo].[PIMS_TAX_RESPONSIBILITY_TYPE]  ( 
	[TAX_RESPONSIBILITY_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                 	nvarchar(200) NOT NULL,
	[IS_DISABLED]                 	bit NOT NULL CONSTRAINT [TXRSPT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]               	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]  	bigint NOT NULL CONSTRAINT [TXRSPT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [TXRSPT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [TXRSPT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]    	datetime NOT NULL CONSTRAINT [TXRSPT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]       	nvarchar(30) NOT NULL CONSTRAINT [TXRSPT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [TXRSPT_PK] PRIMARY KEY CLUSTERED([TAX_RESPONSIBILITY_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the party responsible for parcel/property tax payments.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAX_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'TAX_RESPONSIBILITY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the party responsible for parcel/property tax payments.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAX_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAX_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAX_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAX_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAX_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAX_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAX_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAX_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the party responsible for parcel/property tax payments.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_TAX_RESPONSIBILITY_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_UTILITY_RESPONSIBILITY_TYPE
PRINT N'Create table dbo.PIMS_UTILITY_RESPONSIBILITY_TYPE'
GO
CREATE TABLE [dbo].[PIMS_UTILITY_RESPONSIBILITY_TYPE]  ( 
	[UTILITY_RESPONSIBILITY_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                     	nvarchar(200) NOT NULL,
	[IS_DISABLED]                     	bit NOT NULL CONSTRAINT [UTRSPT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                   	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]      	bigint NOT NULL CONSTRAINT [UTRSPT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]             	datetime NOT NULL CONSTRAINT [UTRSPT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                	nvarchar(30) NOT NULL CONSTRAINT [UTRSPT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]        	datetime NOT NULL CONSTRAINT [UTRSPT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]           	nvarchar(30) NOT NULL CONSTRAINT [UTRSPT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [UTRSPT_PK] PRIMARY KEY CLUSTERED([UTILITY_RESPONSIBILITY_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code representing the party responsible for parcel/property utility payments.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_UTILITY_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'UTILITY_RESPONSIBILITY_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the party responsible for parcel/property utility payments.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_UTILITY_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the code is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_UTILITY_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Force the display order of the codes.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_UTILITY_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_UTILITY_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_UTILITY_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_UTILITY_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_UTILITY_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_UTILITY_RESPONSIBILITY_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code table to describe the party responsible for parcel/property utility payments.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_UTILITY_RESPONSIBILITY_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY
PRINT N'Alter table dbo.PIMS_PROPERTY'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD [UTILITY_RESPONSIBILITY_TYPE_CODE] nvarchar(20) NULL, 
	[TAX_RESPONSIBILITY_TYPE_CODE] nvarchar(20) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROPERTY_DOCUMENT_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROPERTY_DOCUMENT_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROPERTY_DOCUMENT_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_DOCUMENT
PRINT N'Create table dbo.PIMS_PROPERTY_DOCUMENT'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_DOCUMENT]  ( 
	[PROPERTY_DOCUMENT_ID]          	bigint NOT NULL CONSTRAINT [PRPDOC_PROPERTY_DOCUMENT_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_DOCUMENT_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRPDOC_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPDOC_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPDOC_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPDOC_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPDOC_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPDOC_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPDOC_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPDOC_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [PRPDOC_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPDOC_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPDOC_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPDOC_PK] PRIMARY KEY CLUSTERED([PROPERTY_DOCUMENT_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT', 
	@level2type = N'Column', @level2name = N'PROPERTY_DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_PROPERTY table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT', 
	@level2type = N'Column', @level2name = N'PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_DOCUMENT_FILE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DOCUMENT_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table contains the relationship between the property and the associated document.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_DOCUMENT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_MANAGEMENT_FILE_PURPOSE_TYPE
PRINT N'Create table dbo.PIMS_MANAGEMENT_FILE_PURPOSE_TYPE'
GO
CREATE TABLE [dbo].[PIMS_MANAGEMENT_FILE_PURPOSE_TYPE]  ( 
	[MANAGEMENT_FILE_PURPOSE_TYPE_CODE]	nvarchar(20) NOT NULL,
	[DESCRIPTION]                      	nvarchar(200) NOT NULL,
	[IS_DISABLED]                      	bit NOT NULL CONSTRAINT [MGTPRT_IS_DISABLED_DEF]  DEFAULT (CONVERT([bit],(0))),
	[DISPLAY_ORDER]                    	int NULL,
	[CONCURRENCY_CONTROL_NUMBER]       	bigint NOT NULL CONSTRAINT [MGTPRT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[DB_CREATE_TIMESTAMP]              	datetime NOT NULL CONSTRAINT [MGTPRT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]                 	nvarchar(30) NOT NULL CONSTRAINT [MGTPRT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]         	datetime NOT NULL CONSTRAINT [MGTPRT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]            	nvarchar(30) NOT NULL CONSTRAINT [MGTPRT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [MGTPRT_PK] PRIMARY KEY CLUSTERED([MANAGEMENT_FILE_PURPOSE_TYPE_CODE])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Code value of the management file purpose type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_PURPOSE_TYPE_CODE'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Description of the management file purpose type.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DESCRIPTION'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Indicates if the record is disabled.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'IS_DISABLED'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Specifies the display order of the code description.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DISPLAY_ORDER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PURPOSE_TYPE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table containing information about the management file purpose.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PURPOSE_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_MANAGEMENT_FILE
PRINT N'Alter table dbo.PIMS_MANAGEMENT_FILE'
GO
EXEC dbo.sp_rename N'dbo.PIMS_MANAGEMENT_FILE.MANAGEMENT_FILE_PROGRAM_TYPE_CODE' , N'MANAGEMENT_FILE_PURPOSE_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE] ALTER COLUMN [MANAGEMENT_FILE_PURPOSE_TYPE_CODE] nvarchar(20) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_MANAGEMENT_FILE_PURPOSE_TYPE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'MANAGEMENT_FILE_PURPOSE_TYPE_CODE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROPERTY_NOTE_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROPERTY_NOTE_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROPERTY_NOTE_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_NOTE
PRINT N'Create table dbo.PIMS_PROPERTY_NOTE'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_NOTE]  ( 
	[PROPERTY_NOTE_ID]              	bigint NOT NULL CONSTRAINT [PRPNOT_PROPERTY_NOTE_ID_DEF]  DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_NOTE_ID_SEQ]),
	[PROPERTY_ID]                   	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL CONSTRAINT [PRPNOT_CONCURRENCY_CONTROL_NUMBER_DEF]  DEFAULT ((1)),
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL CONSTRAINT [PRPNOT_APP_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL CONSTRAINT [PRPNOT_APP_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL CONSTRAINT [PRPNOT_APP_CREATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL CONSTRAINT [PRPNOT_APP_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL CONSTRAINT [PRPNOT_APP_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL CONSTRAINT [PRPNOT_APP_LAST_UPDATE_USER_DIRECTORY_DEF]  DEFAULT (user_name()),
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL CONSTRAINT [PRPNOT_DB_CREATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_CREATE_USERID]              	nvarchar(30) NULL CONSTRAINT [PRPNOT_DB_CREATE_USERID_DEF]  DEFAULT (user_name()),
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL CONSTRAINT [PRPNOT_DB_LAST_UPDATE_TIMESTAMP_DEF]  DEFAULT (getutcdate()),
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL CONSTRAINT [PRPNOT_DB_LAST_UPDATE_USERID_DEF]  DEFAULT (user_name()),
	CONSTRAINT [PRPNOT_PK] PRIMARY KEY CLUSTERED([PROPERTY_NOTE_ID])
 ON [PRIMARY])
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Generated surrogate primary key.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE', 
	@level2type = N'Column', @level2name = N'PROPERTY_NOTE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_PROPERTY table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE', 
	@level2type = N'Column', @level2name = N'PROPERTY_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Foreign key to the PIMS_NOTE table.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE', 
	@level2type = N'Column', @level2name = N'NOTE_ID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Application code is responsible for retrieving the row and then incrementing the value of the CONCURRENCY_CONTROL_NUMBER column by one prior to issuing an update. If this is done then the update will succeed, provided that the row was not updated by any o' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE', 
	@level2type = N'Column', @level2name = N'CONCURRENCY_CONTROL_NUMBER'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE', 
	@level2type = N'Column', @level2name = N'APP_CREATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the user updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The GUID of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_GUID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The directory of the user account that updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE', 
	@level2type = N'Column', @level2name = N'APP_LAST_UPDATE_USER_DIRECTORY'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE', 
	@level2type = N'Column', @level2name = N'DB_CREATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The date and time the record was created or last updated.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_TIMESTAMP'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'The user or proxy account that created or last updated the record.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE', 
	@level2type = N'Column', @level2name = N'DB_LAST_UPDATE_USERID'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Table contains the relationship between the property and the associated note.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_NOTE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_MANAGEMENT_FILE_PROPERTY
PRINT N'Alter table dbo.PIMS_MANAGEMENT_FILE_PROPERTY'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_PROPERTY]
	ADD [PROPERTY_NAME] nvarchar(500) NULL, 
	[LOCATION] [sys].[geometry] NULL
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Descriptive reference for the property being researched.' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'PROPERTY_NAME'
GO
EXEC sp_addextendedproperty 
	@name = N'MS_Description', @value = N'Geospatial location (pin) of property' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE_PROPERTY', 
	@level2type = N'Column', @level2name = N'LOCATION'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_MANAGEMENT_FILE_PROPERTY_HIST
PRINT N'Alter table dbo.PIMS_MANAGEMENT_FILE_PROPERTY_HIST'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_PROPERTY_HIST]
	ADD [PROPERTY_NAME] nvarchar(500) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_HIST
PRINT N'Alter table dbo.PIMS_PROPERTY_HIST'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_HIST]
	ADD [UTILITY_RESPONSIBILITY_TYPE_CODE] nvarchar(20) NULL, 
	[TAX_RESPONSIBILITY_TYPE_CODE] nvarchar(20) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROPERTY_NOTE_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROPERTY_NOTE_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROPERTY_NOTE_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_NOTE_HIST
PRINT N'Create table dbo.PIMS_PROPERTY_NOTE_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_NOTE_HIST]  ( 
	[_PROPERTY_NOTE_HIST_ID]        	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_NOTE_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROPERTY_NOTE_ID]              	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[NOTE_ID]                       	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPNOT_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_NOTE_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRPNOT_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRPNOT_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_NOTE_HIST]
	ADD CONSTRAINT [PIMS_PRPNOT_H_UK]
	UNIQUE ([_PROPERTY_NOTE_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_MANAGEMENT_FILE_HIST
PRINT N'Alter table dbo.PIMS_MANAGEMENT_FILE_HIST'
GO
EXEC dbo.sp_rename N'dbo.PIMS_MANAGEMENT_FILE_HIST.MANAGEMENT_FILE_PROGRAM_TYPE_CODE' , N'MANAGEMENT_FILE_PURPOSE_TYPE_CODE', 'COLUMN'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_HIST] ALTER COLUMN [MANAGEMENT_FILE_PURPOSE_TYPE_CODE] nvarchar(20) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create sequence dbo.PIMS_PROPERTY_DOCUMENT_H_ID_SEQ
PRINT N'Create sequence dbo.PIMS_PROPERTY_DOCUMENT_H_ID_SEQ'
GO
CREATE SEQUENCE [dbo].[PIMS_PROPERTY_DOCUMENT_H_ID_SEQ]
	AS bigint
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	NO CYCLE
	CACHE 50
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create table dbo.PIMS_PROPERTY_DOCUMENT_HIST
PRINT N'Create table dbo.PIMS_PROPERTY_DOCUMENT_HIST'
GO
CREATE TABLE [dbo].[PIMS_PROPERTY_DOCUMENT_HIST]  ( 
	[_PROPERTY_DOCUMENT_HIST_ID]    	bigint NOT NULL DEFAULT (NEXT VALUE FOR [PIMS_PROPERTY_DOCUMENT_H_ID_SEQ]),
	[EFFECTIVE_DATE_HIST]           	datetime NOT NULL DEFAULT (getutcdate()),
	[END_DATE_HIST]                 	datetime NULL,
	[PROPERTY_DOCUMENT_ID]          	bigint NOT NULL,
	[PROPERTY_ID]                   	bigint NOT NULL,
	[DOCUMENT_ID]                   	bigint NOT NULL,
	[CONCURRENCY_CONTROL_NUMBER]    	bigint NOT NULL,
	[APP_CREATE_TIMESTAMP]          	datetime NOT NULL,
	[APP_CREATE_USERID]             	nvarchar(30) NOT NULL,
	[APP_CREATE_USER_GUID]          	uniqueidentifier NULL,
	[APP_CREATE_USER_DIRECTORY]     	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_TIMESTAMP]     	datetime NOT NULL,
	[APP_LAST_UPDATE_USERID]        	nvarchar(30) NOT NULL,
	[APP_LAST_UPDATE_USER_GUID]     	uniqueidentifier NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY]	nvarchar(30) NOT NULL,
	[DB_CREATE_TIMESTAMP]           	datetime NOT NULL,
	[DB_CREATE_USERID]              	nvarchar(30) NULL,
	[DB_LAST_UPDATE_TIMESTAMP]      	datetime NOT NULL,
	[DB_LAST_UPDATE_USERID]         	nvarchar(30) NOT NULL,
	CONSTRAINT [PIMS_PRPDOC_H_PK] PRIMARY KEY CLUSTERED([_PROPERTY_DOCUMENT_HIST_ID])
 ON [PRIMARY])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create unique constraint dbo.PIMS_PRPDOC_H_UK
PRINT N'Create unique constraint dbo.PIMS_PRPDOC_H_UK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_DOCUMENT_HIST]
	ADD CONSTRAINT [PIMS_PRPDOC_H_UK]
	UNIQUE ([_PROPERTY_DOCUMENT_HIST_ID], [END_DATE_HIST]) 
	WITH (
		DATA_COMPRESSION = NONE
	) ON [PRIMARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_MANAGEMENT_FILE_NOTE
PRINT N'Alter table dbo.PIMS_MANAGEMENT_FILE_NOTE'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_NOTE] ALTER COLUMN [NOTE_ID] bigint NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_MANAGEMENT_FILE_NOTE_HIST
PRINT N'Alter table dbo.PIMS_MANAGEMENT_FILE_NOTE_HIST'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_NOTE_HIST] ALTER COLUMN [NOTE_ID] bigint NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_BOUNDARY_DISPOSITION_VW
PRINT N'Create view dbo.PIMS_PROPERTY_BOUNDARY_DISPOSITION_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_DISPOSITION_VW] AS
with cteDistinct (PROPERTY_ID) AS
  (SELECT DISTINCT pr.PROPERTY_ID
   FROM   PIMS_PROPERTY                  pr JOIN
          PIMS_DISPOSITION_FILE_PROPERTY df ON df.PROPERTY_ID = pr.PROPERTY_ID)

SELECT ct.PROPERTY_ID
     , pr.BOUNDARY
FROM   cteDistinct   ct JOIN
       PIMS_PROPERTY pr ON pr.PROPERTY_ID = ct.PROPERTY_ID

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_BOUNDARY_INTEREST_VW
PRINT N'Create view dbo.PIMS_PROPERTY_BOUNDARY_INTEREST_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_INTEREST_VW] AS
with cteDistinct (PROPERTY_ID, IS_NEW_LICENSE_TO_CONSTRUCT, IS_NEW_LAND_ACT, IS_NEW_INTEREST_IN_SRW, IS_THERE_SURPLUS, IS_ACQUIRED_FOR_INVENTORY) AS
  (SELECT DISTINCT pr.PROPERTY_ID
        , IS_NEW_LICENSE_TO_CONSTRUCT AS HAS_LTC_TAKE
        , IS_NEW_LAND_ACT             AS HAS_LAND_ACT_TAKE
        , IS_NEW_INTEREST_IN_SRW      AS HAS_SRW_TAKE
        , IS_THERE_SURPLUS            AS HAS_SURPLUS_TAKE
        , IS_ACQUIRED_FOR_INVENTORY   AS HAS_ACQUIRED_FOR_INVENTORY_TAKE 
   FROM   PIMS_PROPERTY                  pr                                                     JOIN
          PIMS_PROPERTY_ACQUISITION_FILE pa ON pa.PROPERTY_ID                  = pr.PROPERTY_ID JOIN
          PIMS_TAKE                      tk ON tk.PROPERTY_ACQUISITION_FILE_ID = pa.PROPERTY_ACQUISITION_FILE_ID
   WHERE  tk.IS_NEW_LICENSE_TO_CONSTRUCT = 1
      OR  tk.IS_NEW_LAND_ACT             = 1
      OR  tk.IS_NEW_INTEREST_IN_SRW      = 1
      OR  tk.IS_THERE_SURPLUS            = 1
      OR  tk.IS_ACQUIRED_FOR_INVENTORY   = 1)

SELECT ct.PROPERTY_ID
     , pr.BOUNDARY
     , ct.IS_NEW_LICENSE_TO_CONSTRUCT
     , ct.IS_NEW_LAND_ACT
     , ct.IS_NEW_INTEREST_IN_SRW
     , ct.IS_THERE_SURPLUS
     , ct.IS_ACQUIRED_FOR_INVENTORY
FROM   cteDistinct   ct JOIN
       PIMS_PROPERTY pr ON pr.PROPERTY_ID = ct.PROPERTY_ID

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_BOUNDARY_RESEARCH_VW
PRINT N'Create view dbo.PIMS_PROPERTY_BOUNDARY_RESEARCH_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_RESEARCH_VW] AS
with cteDistinct (PROPERTY_ID) AS
  (SELECT DISTINCT prp.PROPERTY_ID
   FROM   PIMS_PROPERTY               prp JOIN
          PIMS_PROPERTY_RESEARCH_FILE prf ON prf.PROPERTY_ID = prp.PROPERTY_ID)  

SELECT ct.PROPERTY_ID
     , pr.LOCATION
FROM   cteDistinct   ct JOIN
       PIMS_PROPERTY pr ON pr.PROPERTY_ID = ct.PROPERTY_ID

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_BOUNDARY_LEASE_VW
PRINT N'Create view dbo.PIMS_PROPERTY_BOUNDARY_LEASE_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_LEASE_VW] AS
with cteDistinct (PROPERTY_ID, HAS_PAYABLE_LEASE, HAS_RECEIVABLE_LEASE) AS
  (SELECT DISTINCT pr.PROPERTY_ID
        , CASE ls.LEASE_PAY_RVBL_TYPE_CODE
            WHEN N'PYBLMOTI'  THEN 1
            WHEN N'PYBLBCTFA' THEN 1    
            ELSE 0
            END AS HAS_PAYABLE_LEASE
        , CASE ls.LEASE_PAY_RVBL_TYPE_CODE
            WHEN N'RCVBL'  THEN 1
            ELSE 0
            END AS HAS_RECEIVABLE_LEASE
   FROM   PIMS_PROPERTY       pr                                    JOIN
          PIMS_PROPERTY_LEASE pl ON pl.PROPERTY_ID = pr.PROPERTY_ID JOIN
          PIMS_LEASE          ls ON ls.LEASE_ID    = pl.LEASE_ID)

SELECT ct.PROPERTY_ID
     , pr.BOUNDARY
     , ct.HAS_PAYABLE_LEASE
     , ct.HAS_RECEIVABLE_LEASE
FROM   cteDistinct   ct JOIN
       PIMS_PROPERTY pr ON pr.PROPERTY_ID = ct.PROPERTY_ID

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_BOUNDARY_ACQUISITION_VW
PRINT N'Create view dbo.PIMS_PROPERTY_BOUNDARY_ACQUISITION_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_ACQUISITION_VW] AS
with cteDistinct (PROPERTY_ID) AS
  (SELECT DISTINCT pr.PROPERTY_ID
   FROM   PIMS_PROPERTY                  pr JOIN                                   
          PIMS_PROPERTY_ACQUISITION_FILE pa ON pa.PROPERTY_ID = pr.PROPERTY_ID)

SELECT ct.PROPERTY_ID
     , pr.BOUNDARY
FROM   cteDistinct   ct JOIN
       PIMS_PROPERTY pr ON pr.PROPERTY_ID = ct.PROPERTY_ID

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_BOUNDARY_MANAGEMENT_VW
PRINT N'Create view dbo.PIMS_PROPERTY_BOUNDARY_MANAGEMENT_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_MANAGEMENT_VW] AS                                                   
with cteDistinct (PROPERTY_ID) AS
  (SELECT DISTINCT pr.PROPERTY_ID
   FROM   PIMS_PROPERTY                 pr JOIN
          PIMS_MANAGEMENT_FILE_PROPERTY mf ON mf.PROPERTY_ID = pr.PROPERTY_ID)

SELECT ct.PROPERTY_ID
     , pr.BOUNDARY
FROM   cteDistinct   ct JOIN
       PIMS_PROPERTY pr ON pr.PROPERTY_ID = ct.PROPERTY_ID

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create view dbo.PIMS_PROPERTY_BOUNDARY_RETIRED_VW
PRINT N'Create view dbo.PIMS_PROPERTY_BOUNDARY_RETIRED_VW'
GO
CREATE VIEW [dbo].[PIMS_PROPERTY_BOUNDARY_RETIRED_VW] AS
with cteDistinct (PROPERTY_ID) AS
  (SELECT DISTINCT PROPERTY_ID
   FROM   PIMS_PROPERTY
   WHERE  IS_RETIRED = 1)

SELECT ct.PROPERTY_ID
     , pr.BOUNDARY
FROM   cteDistinct   ct JOIN
       PIMS_PROPERTY pr ON pr.PROPERTY_ID = ct.PROPERTY_ID

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_MANAGEMENT_FILE_DOCUMENT_HIST
PRINT N'Alter table dbo.PIMS_MANAGEMENT_FILE_DOCUMENT_HIST'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_DOCUMENT_HIST] ALTER COLUMN [DOCUMENT_ID] bigint NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_MANAGEMENT_FILE_DOCUMENT
PRINT N'Alter table dbo.PIMS_MANAGEMENT_FILE_DOCUMENT'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE_DOCUMENT] ALTER COLUMN [DOCUMENT_ID] bigint NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTY_TAX_RESPONSIBILITY_TYPE_CODE_IDX
PRINT N'Create index dbo.PRPRTY_TAX_RESPONSIBILITY_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRTY_TAX_RESPONSIBILITY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([TAX_RESPONSIBILITY_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPDOC_DOCUMENT_ID_IDX
PRINT N'Create index dbo.PRPDOC_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGMTFL_MANAGEMENT_FILE_PURPOSE_TYPE_CODE_IDX
PRINT N'Create index dbo.MGMTFL_MANAGEMENT_FILE_PURPOSE_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [MGMTFL_MANAGEMENT_FILE_PURPOSE_TYPE_CODE_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE]([MANAGEMENT_FILE_PURPOSE_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPNOT_NOTE_ID_IDX
PRINT N'Create index dbo.PRPNOT_NOTE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPNOT_NOTE_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_NOTE]([NOTE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPNOT_PROPERTY_ID_IDX
PRINT N'Create index dbo.PRPNOT_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPNOT_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_NOTE]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPRTY_UTILITY_RESPONSIBILITY_TYPE_CODE_IDX
PRINT N'Create index dbo.PRPRTY_UTILITY_RESPONSIBILITY_TYPE_CODE_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPRTY_UTILITY_RESPONSIBILITY_TYPE_CODE_IDX]
	ON [dbo].[PIMS_PROPERTY]([UTILITY_RESPONSIBILITY_TYPE_CODE])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.PRPDOC_PROPERTY_ID_IDX
PRINT N'Create index dbo.PRPDOC_PROPERTY_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [PRPDOC_PROPERTY_ID_IDX]
	ON [dbo].[PIMS_PROPERTY_DOCUMENT]([PROPERTY_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTPRP_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_MGTPRP_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTPRP_I_S_I_TR] ON PIMS_MANAGEMENT_FILE_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_MANAGEMENT_FILE_PROPERTY ("MANAGEMENT_FILE_PROPERTY_ID",
      "MANAGEMENT_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_NAME",
      "LOCATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "MANAGEMENT_FILE_PROPERTY_ID",
      "MANAGEMENT_FILE_ID",
      "PROPERTY_ID",
      "PROPERTY_NAME",
      "LOCATION",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_I_TR] ON PIMS_PROPERTY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY ("PROPERTY_ID",
      "PROPERTY_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "UTILITY_RESPONSIBILITY_TYPE_CODE",
      "TAX_RESPONSIBILITY_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "NOTES",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_RETIRED",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE",
      "BAND_NAME",
      "RESERVE_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_ID",
      "PROPERTY_TYPE_CODE",
      "ADDRESS_ID",
      "REGION_CODE",
      "DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE",
      "UTILITY_RESPONSIBILITY_TYPE_CODE",
      "TAX_RESPONSIBILITY_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "PID",
      "PIN",
      "FILE_NUMBER",
      "FILE_NUMBER_SUFFIX",
      "LAND_AREA",
      "LAND_LEGAL_DESCRIPTION",
      "BOUNDARY",
      "LOCATION",
      "GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER",
      "SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE",
      "NOTES",
      "MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT",
      "IS_OWNED",
      "IS_RETIRED",
      "PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT",
      "ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE",
      "BAND_NAME",
      "RESERVE_NAME",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTPRP_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_MGTPRP_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTPRP_A_S_IUD_TR] ON PIMS_MANAGEMENT_FILE_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_MANAGEMENT_FILE_PROPERTY_HIST set END_DATE_HIST = @curr_date where MANAGEMENT_FILE_PROPERTY_ID in (select MANAGEMENT_FILE_PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_MANAGEMENT_FILE_PROPERTY_HIST ([MANAGEMENT_FILE_PROPERTY_ID], [MANAGEMENT_FILE_ID], [PROPERTY_ID], [PROPERTY_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _MANAGEMENT_FILE_PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [MANAGEMENT_FILE_PROPERTY_ID], [MANAGEMENT_FILE_ID], [PROPERTY_ID], [PROPERTY_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_MANAGEMENT_FILE_PROPERTY_H_ID_SEQ]) as [_MANAGEMENT_FILE_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTPRT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_MGTPRT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTPRT_I_S_I_TR] ON PIMS_MANAGEMENT_FILE_PURPOSE_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_MANAGEMENT_FILE_PURPOSE_TYPE ("MANAGEMENT_FILE_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "MANAGEMENT_FILE_PURPOSE_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TXRSPT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_TXRSPT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TXRSPT_I_S_U_TR] ON PIMS_TAX_RESPONSIBILITY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.TAX_RESPONSIBILITY_TYPE_CODE = deleted.TAX_RESPONSIBILITY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_TAX_RESPONSIBILITY_TYPE
    set "TAX_RESPONSIBILITY_TYPE_CODE" = inserted."TAX_RESPONSIBILITY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_TAX_RESPONSIBILITY_TYPE
    inner join inserted
    on (PIMS_TAX_RESPONSIBILITY_TYPE.TAX_RESPONSIBILITY_TYPE_CODE = inserted.TAX_RESPONSIBILITY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMTFL_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_MGMTFL_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMTFL_I_S_U_TR] ON PIMS_MANAGEMENT_FILE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.MANAGEMENT_FILE_ID = deleted.MANAGEMENT_FILE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_MANAGEMENT_FILE
    set "MANAGEMENT_FILE_ID" = inserted."MANAGEMENT_FILE_ID",
      "PROJECT_ID" = inserted."PROJECT_ID",
      "PRODUCT_ID" = inserted."PRODUCT_ID",
      "ACQUISITION_FUNDING_TYPE_CODE" = inserted."ACQUISITION_FUNDING_TYPE_CODE",
      "MANAGEMENT_FILE_STATUS_TYPE_CODE" = inserted."MANAGEMENT_FILE_STATUS_TYPE_CODE",
      "MANAGEMENT_FILE_PURPOSE_TYPE_CODE" = inserted."MANAGEMENT_FILE_PURPOSE_TYPE_CODE",
      "FILE_NAME" = inserted."FILE_NAME",
      "LEGACY_FILE_NUM" = inserted."LEGACY_FILE_NUM",
      "FILE_PURPOSE" = inserted."FILE_PURPOSE",
      "ADDITIONAL_DETAILS" = inserted."ADDITIONAL_DETAILS",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_MANAGEMENT_FILE
    inner join inserted
    on (PIMS_MANAGEMENT_FILE.MANAGEMENT_FILE_ID = inserted.MANAGEMENT_FILE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTPRP_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_MGTPRP_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTPRP_I_S_U_TR] ON PIMS_MANAGEMENT_FILE_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.MANAGEMENT_FILE_PROPERTY_ID = deleted.MANAGEMENT_FILE_PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_MANAGEMENT_FILE_PROPERTY
    set "MANAGEMENT_FILE_PROPERTY_ID" = inserted."MANAGEMENT_FILE_PROPERTY_ID",
      "MANAGEMENT_FILE_ID" = inserted."MANAGEMENT_FILE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_NAME" = inserted."PROPERTY_NAME",
      "LOCATION" = inserted."LOCATION",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_MANAGEMENT_FILE_PROPERTY
    inner join inserted
    on (PIMS_MANAGEMENT_FILE_PROPERTY.MANAGEMENT_FILE_PROPERTY_ID = inserted.MANAGEMENT_FILE_PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_I_S_U_TR] ON PIMS_PROPERTY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_ID = deleted.PROPERTY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY
    set "PROPERTY_ID" = inserted."PROPERTY_ID",
      "PROPERTY_TYPE_CODE" = inserted."PROPERTY_TYPE_CODE",
      "ADDRESS_ID" = inserted."ADDRESS_ID",
      "REGION_CODE" = inserted."REGION_CODE",
      "DISTRICT_CODE" = inserted."DISTRICT_CODE",
      "PROPERTY_AREA_UNIT_TYPE_CODE" = inserted."PROPERTY_AREA_UNIT_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_TYPE_CODE" = inserted."PROPERTY_DATA_SOURCE_TYPE_CODE",
      "PROPERTY_STATUS_TYPE_CODE" = inserted."PROPERTY_STATUS_TYPE_CODE",
      "SURPLUS_DECLARATION_TYPE_CODE" = inserted."SURPLUS_DECLARATION_TYPE_CODE",
      "VOLUMETRIC_TYPE_CODE" = inserted."VOLUMETRIC_TYPE_CODE",
      "VOLUME_UNIT_TYPE_CODE" = inserted."VOLUME_UNIT_TYPE_CODE",
      "PPH_STATUS_TYPE_CODE" = inserted."PPH_STATUS_TYPE_CODE",
      "UTILITY_RESPONSIBILITY_TYPE_CODE" = inserted."UTILITY_RESPONSIBILITY_TYPE_CODE",
      "TAX_RESPONSIBILITY_TYPE_CODE" = inserted."TAX_RESPONSIBILITY_TYPE_CODE",
      "PROPERTY_DATA_SOURCE_EFFECTIVE_DATE" = inserted."PROPERTY_DATA_SOURCE_EFFECTIVE_DATE",
      "PID" = inserted."PID",
      "PIN" = inserted."PIN",
      "FILE_NUMBER" = inserted."FILE_NUMBER",
      "FILE_NUMBER_SUFFIX" = inserted."FILE_NUMBER_SUFFIX",
      "LAND_AREA" = inserted."LAND_AREA",
      "LAND_LEGAL_DESCRIPTION" = inserted."LAND_LEGAL_DESCRIPTION",
      "BOUNDARY" = inserted."BOUNDARY",
      "LOCATION" = inserted."LOCATION",
      "GENERAL_LOCATION" = inserted."GENERAL_LOCATION",
      "SURVEY_PLAN_NUMBER" = inserted."SURVEY_PLAN_NUMBER",
      "SURPLUS_DECLARATION_COMMENT" = inserted."SURPLUS_DECLARATION_COMMENT",
      "SURPLUS_DECLARATION_DATE" = inserted."SURPLUS_DECLARATION_DATE",
      "NOTES" = inserted."NOTES",
      "MUNICIPAL_ZONING" = inserted."MUNICIPAL_ZONING",
      "IS_VOLUMETRIC_PARCEL" = inserted."IS_VOLUMETRIC_PARCEL",
      "VOLUMETRIC_MEASUREMENT" = inserted."VOLUMETRIC_MEASUREMENT",
      "IS_OWNED" = inserted."IS_OWNED",
      "IS_RETIRED" = inserted."IS_RETIRED",
      "PPH_STATUS_UPDATE_USERID" = inserted."PPH_STATUS_UPDATE_USERID",
      "PPH_STATUS_UPDATE_TIMESTAMP" = inserted."PPH_STATUS_UPDATE_TIMESTAMP",
      "PPH_STATUS_UPDATE_USER_GUID" = inserted."PPH_STATUS_UPDATE_USER_GUID",
      "IS_RWY_BELT_DOM_PATENT" = inserted."IS_RWY_BELT_DOM_PATENT",
      "ADDITIONAL_DETAILS" = inserted."ADDITIONAL_DETAILS",
      "IS_UTILITIES_PAYABLE" = inserted."IS_UTILITIES_PAYABLE",
      "IS_TAXES_PAYABLE" = inserted."IS_TAXES_PAYABLE",
      "BAND_NAME" = inserted."BAND_NAME",
      "RESERVE_NAME" = inserted."RESERVE_NAME",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY
    inner join inserted
    on (PIMS_PROPERTY.PROPERTY_ID = inserted.PROPERTY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_TXRSPT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_TXRSPT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_TXRSPT_I_S_I_TR] ON PIMS_TAX_RESPONSIBILITY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_TAX_RESPONSIBILITY_TYPE ("TAX_RESPONSIBILITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "TAX_RESPONSIBILITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGTPRT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_MGTPRT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGTPRT_I_S_U_TR] ON PIMS_MANAGEMENT_FILE_PURPOSE_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.MANAGEMENT_FILE_PURPOSE_TYPE_CODE = deleted.MANAGEMENT_FILE_PURPOSE_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_MANAGEMENT_FILE_PURPOSE_TYPE
    set "MANAGEMENT_FILE_PURPOSE_TYPE_CODE" = inserted."MANAGEMENT_FILE_PURPOSE_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_MANAGEMENT_FILE_PURPOSE_TYPE
    inner join inserted
    on (PIMS_MANAGEMENT_FILE_PURPOSE_TYPE.MANAGEMENT_FILE_PURPOSE_TYPE_CODE = inserted.MANAGEMENT_FILE_PURPOSE_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPRTY_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPRTY_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPRTY_A_S_IUD_TR] ON PIMS_PROPERTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_HIST set END_DATE_HIST = @curr_date where PROPERTY_ID in (select PROPERTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_HIST ([PROPERTY_ID], [PROPERTY_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [UTILITY_RESPONSIBILITY_TYPE_CODE], [TAX_RESPONSIBILITY_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [LAND_LEGAL_DESCRIPTION], [GENERAL_LOCATION], [SURVEY_PLAN_NUMBER], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [NOTES], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_RETIRED], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ADDITIONAL_DETAILS], [IS_UTILITIES_PAYABLE], [IS_TAXES_PAYABLE], [BAND_NAME], [RESERVE_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_ID], [PROPERTY_TYPE_CODE], [ADDRESS_ID], [REGION_CODE], [DISTRICT_CODE], [PROPERTY_AREA_UNIT_TYPE_CODE], [PROPERTY_DATA_SOURCE_TYPE_CODE], [PROPERTY_STATUS_TYPE_CODE], [SURPLUS_DECLARATION_TYPE_CODE], [VOLUMETRIC_TYPE_CODE], [VOLUME_UNIT_TYPE_CODE], [PPH_STATUS_TYPE_CODE], [UTILITY_RESPONSIBILITY_TYPE_CODE], [TAX_RESPONSIBILITY_TYPE_CODE], [PROPERTY_DATA_SOURCE_EFFECTIVE_DATE], [PID], [PIN], [FILE_NUMBER], [FILE_NUMBER_SUFFIX], [LAND_AREA], [LAND_LEGAL_DESCRIPTION], [GENERAL_LOCATION], [SURVEY_PLAN_NUMBER], [SURPLUS_DECLARATION_COMMENT], [SURPLUS_DECLARATION_DATE], [NOTES], [MUNICIPAL_ZONING], [IS_VOLUMETRIC_PARCEL], [VOLUMETRIC_MEASUREMENT], [IS_OWNED], [IS_RETIRED], [PPH_STATUS_UPDATE_USERID], [PPH_STATUS_UPDATE_TIMESTAMP], [PPH_STATUS_UPDATE_USER_GUID], [IS_RWY_BELT_DOM_PATENT], [ADDITIONAL_DETAILS], [IS_UTILITIES_PAYABLE], [IS_TAXES_PAYABLE], [BAND_NAME], [RESERVE_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_H_ID_SEQ]) as [_PROPERTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPNOT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPNOT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPNOT_I_S_U_TR] ON PIMS_PROPERTY_NOTE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_NOTE_ID = deleted.PROPERTY_NOTE_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_NOTE
    set "PROPERTY_NOTE_ID" = inserted."PROPERTY_NOTE_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "NOTE_ID" = inserted."NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_NOTE
    inner join inserted
    on (PIMS_PROPERTY_NOTE.PROPERTY_NOTE_ID = inserted.PROPERTY_NOTE_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMTFL_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_MGMTFL_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMTFL_I_S_I_TR] ON PIMS_MANAGEMENT_FILE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_MANAGEMENT_FILE ("MANAGEMENT_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "MANAGEMENT_FILE_STATUS_TYPE_CODE",
      "MANAGEMENT_FILE_PURPOSE_TYPE_CODE",
      "FILE_NAME",
      "LEGACY_FILE_NUM",
      "FILE_PURPOSE",
      "ADDITIONAL_DETAILS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "MANAGEMENT_FILE_ID",
      "PROJECT_ID",
      "PRODUCT_ID",
      "ACQUISITION_FUNDING_TYPE_CODE",
      "MANAGEMENT_FILE_STATUS_TYPE_CODE",
      "MANAGEMENT_FILE_PURPOSE_TYPE_CODE",
      "FILE_NAME",
      "LEGACY_FILE_NUM",
      "FILE_PURPOSE",
      "ADDITIONAL_DETAILS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_UTRSPT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_UTRSPT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_UTRSPT_I_S_I_TR] ON PIMS_UTILITY_RESPONSIBILITY_TYPE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_UTILITY_RESPONSIBILITY_TYPE ("UTILITY_RESPONSIBILITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER")
    select "UTILITY_RESPONSIBILITY_TYPE_CODE",
      "DESCRIPTION",
      "IS_DISABLED",
      "DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPDOC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_PRPDOC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPDOC_I_S_U_TR] ON PIMS_PROPERTY_DOCUMENT INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.PROPERTY_DOCUMENT_ID = deleted.PROPERTY_DOCUMENT_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_PROPERTY_DOCUMENT
    set "PROPERTY_DOCUMENT_ID" = inserted."PROPERTY_DOCUMENT_ID",
      "PROPERTY_ID" = inserted."PROPERTY_ID",
      "DOCUMENT_ID" = inserted."DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_PROPERTY_DOCUMENT
    inner join inserted
    on (PIMS_PROPERTY_DOCUMENT.PROPERTY_DOCUMENT_ID = inserted.PROPERTY_DOCUMENT_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPNOT_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPNOT_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPNOT_A_S_IUD_TR] ON PIMS_PROPERTY_NOTE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_NOTE_HIST set END_DATE_HIST = @curr_date where PROPERTY_NOTE_ID in (select PROPERTY_NOTE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_NOTE_HIST ([PROPERTY_NOTE_ID], [PROPERTY_ID], [NOTE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_NOTE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_NOTE_ID], [PROPERTY_ID], [NOTE_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_NOTE_H_ID_SEQ]) as [_PROPERTY_NOTE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMTFL_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_MGMTFL_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMTFL_A_S_IUD_TR] ON PIMS_MANAGEMENT_FILE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_MANAGEMENT_FILE_HIST set END_DATE_HIST = @curr_date where MANAGEMENT_FILE_ID in (select MANAGEMENT_FILE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_MANAGEMENT_FILE_HIST ([MANAGEMENT_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FUNDING_TYPE_CODE], [MANAGEMENT_FILE_STATUS_TYPE_CODE], [MANAGEMENT_FILE_PURPOSE_TYPE_CODE], [FILE_NAME], [LEGACY_FILE_NUM], [FILE_PURPOSE], [ADDITIONAL_DETAILS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _MANAGEMENT_FILE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [MANAGEMENT_FILE_ID], [PROJECT_ID], [PRODUCT_ID], [ACQUISITION_FUNDING_TYPE_CODE], [MANAGEMENT_FILE_STATUS_TYPE_CODE], [MANAGEMENT_FILE_PURPOSE_TYPE_CODE], [FILE_NAME], [LEGACY_FILE_NUM], [FILE_PURPOSE], [ADDITIONAL_DETAILS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_MANAGEMENT_FILE_H_ID_SEQ]) as [_MANAGEMENT_FILE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPNOT_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPNOT_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPNOT_I_S_I_TR] ON PIMS_PROPERTY_NOTE INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_NOTE ("PROPERTY_NOTE_ID",
      "PROPERTY_ID",
      "NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_NOTE_ID",
      "PROPERTY_ID",
      "NOTE_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_UTRSPT_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_UTRSPT_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_UTRSPT_I_S_U_TR] ON PIMS_UTILITY_RESPONSIBILITY_TYPE INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.UTILITY_RESPONSIBILITY_TYPE_CODE = deleted.UTILITY_RESPONSIBILITY_TYPE_CODE)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_UTILITY_RESPONSIBILITY_TYPE
    set "UTILITY_RESPONSIBILITY_TYPE_CODE" = inserted."UTILITY_RESPONSIBILITY_TYPE_CODE",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "DISPLAY_ORDER" = inserted."DISPLAY_ORDER",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_UTILITY_RESPONSIBILITY_TYPE
    inner join inserted
    on (PIMS_UTILITY_RESPONSIBILITY_TYPE.UTILITY_RESPONSIBILITY_TYPE_CODE = inserted.UTILITY_RESPONSIBILITY_TYPE_CODE);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPDOC_A_S_IUD_TR
PRINT N'Create trigger dbo.PIMS_PRPDOC_A_S_IUD_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPDOC_A_S_IUD_TR] ON PIMS_PROPERTY_DOCUMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update PIMS_PROPERTY_DOCUMENT_HIST set END_DATE_HIST = @curr_date where PROPERTY_DOCUMENT_ID in (select PROPERTY_DOCUMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into PIMS_PROPERTY_DOCUMENT_HIST ([PROPERTY_DOCUMENT_ID], [PROPERTY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], _PROPERTY_DOCUMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PROPERTY_DOCUMENT_ID], [PROPERTY_ID], [DOCUMENT_ID], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_TIMESTAMP], [APP_CREATE_USERID], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_CREATE_TIMESTAMP], [DB_CREATE_USERID], [DB_LAST_UPDATE_TIMESTAMP], [DB_LAST_UPDATE_USERID], (next value for [dbo].[PIMS_PROPERTY_DOCUMENT_H_ID_SEQ]) as [_PROPERTY_DOCUMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_PRPDOC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_PRPDOC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_PRPDOC_I_S_I_TR] ON PIMS_PROPERTY_DOCUMENT INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_PROPERTY_DOCUMENT ("PROPERTY_DOCUMENT_ID",
      "PROPERTY_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "PROPERTY_DOCUMENT_ID",
      "PROPERTY_ID",
      "DOCUMENT_ID",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGMTNT_NOTE_ID_IDX
PRINT N'Create index dbo.MGMTNT_NOTE_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [MGMTNT_NOTE_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE_NOTE]([NOTE_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create index dbo.MGTDOC_DOCUMENT_ID_IDX
PRINT N'Create index dbo.MGTDOC_DOCUMENT_ID_IDX'
GO
CREATE NONCLUSTERED INDEX [MGTDOC_DOCUMENT_ID_IDX]
	ON [dbo].[PIMS_MANAGEMENT_FILE_DOCUMENT]([DOCUMENT_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_TXRSPT_PIM_PRPRTY_FK
PRINT N'Create foreign key constraint dbo.PIM_TXRSPT_PIM_PRPRTY_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_TXRSPT_PIM_PRPRTY_FK]
	FOREIGN KEY([TAX_RESPONSIBILITY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_TAX_RESPONSIBILITY_TYPE]([TAX_RESPONSIBILITY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_UTRSPT_PIM_PRPRTY_FK
PRINT N'Create foreign key constraint dbo.PIM_UTRSPT_PIM_PRPRTY_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY]
	ADD CONSTRAINT [PIM_UTRSPT_PIM_PRPRTY_FK]
	FOREIGN KEY([UTILITY_RESPONSIBILITY_TYPE_CODE])
	REFERENCES [dbo].[PIMS_UTILITY_RESPONSIBILITY_TYPE]([UTILITY_RESPONSIBILITY_TYPE_CODE])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_DOCMNT_PIM_PRPDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_DOCMNT_PIM_PRPDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_DOCUMENT]
	ADD CONSTRAINT [PIM_DOCMNT_PIM_PRPDOC_FK]
	FOREIGN KEY([DOCUMENT_ID])
	REFERENCES [dbo].[PIMS_DOCUMENT]([DOCUMENT_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPDOC_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPDOC_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_DOCUMENT]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPDOC_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

---- Create foreign key constraint dbo.PIM_MGTPRT_PIM_MGMTFL_FK
--PRINT N'Create foreign key constraint dbo.PIM_MGTPRT_PIM_MGMTFL_FK'
--GO
--ALTER TABLE [dbo].[PIMS_MANAGEMENT_FILE]
--	ADD CONSTRAINT [PIM_MGTPRT_PIM_MGMTFL_FK]
--	FOREIGN KEY([MANAGEMENT_FILE_PURPOSE_TYPE_CODE])
--	REFERENCES [dbo].[PIMS_MANAGEMENT_FILE_PURPOSE_TYPE]([MANAGEMENT_FILE_PURPOSE_TYPE_CODE])
--	ON DELETE NO ACTION 
--	ON UPDATE NO ACTION 
--GO
--IF @@ERROR <> 0 SET NOEXEC ON
--GO

-- Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPNOT_FK
PRINT N'Create foreign key constraint dbo.PIM_PRPRTY_PIM_PRPNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_NOTE]
	ADD CONSTRAINT [PIM_PRPRTY_PIM_PRPNOT_FK]
	FOREIGN KEY([PROPERTY_ID])
	REFERENCES [dbo].[PIMS_PROPERTY]([PROPERTY_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create foreign key constraint dbo.PIM_NOTE_PIM_PRPNOT_FK
PRINT N'Create foreign key constraint dbo.PIM_NOTE_PIM_PRPNOT_FK'
GO
ALTER TABLE [dbo].[PIMS_PROPERTY_NOTE]
	ADD CONSTRAINT [PIM_NOTE_PIM_PRPNOT_FK]
	FOREIGN KEY([NOTE_ID])
	REFERENCES [dbo].[PIMS_NOTE]([NOTE_ID])
	ON DELETE NO ACTION 
	ON UPDATE NO ACTION 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop table dbo.PIMS_MANAGEMENT_FILE_PROGRAM_TYPE
PRINT N'Drop table dbo.PIMS_MANAGEMENT_FILE_PROGRAM_TYPE'
GO
DROP TABLE IF EXISTS [dbo].[PIMS_MANAGEMENT_FILE_PROGRAM_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
