import React, { FunctionComponent } from 'react';
import Container from 'react-bootstrap/Container';
import Modal from 'react-bootstrap/Modal';
import ModalDialog from 'react-bootstrap/ModalDialog';
import Draggable from 'react-draggable';
import { FaQuestionCircle } from 'react-icons/fa';
import styled from 'styled-components';

import variables from '@/assets/scss/_variables.module.scss';
import { Button } from '@/components/common/buttons/Button';
import { H3 } from '@/components/common/styles';
import { useAppSelector } from '@/store/hooks';
import { useTenants } from '@/store/slices/tenants';

import HelpModalContentContainer from '../containers/HelpModalContentContainer';
import IMailMessage from './IMailMessage';

interface IModalProps {
  /** Function to be executed when the cancel button is clicked  */
  handleCancel: () => void;
  /** Function to be executed when the submit button is clicked */
  handleSubmit: () => void;
  /** External state var to track whether or not this modal is being shown. */
  show: boolean;
  /** Link to PIMS training material shared folder. */
  pimsTrainingUrl: string;
}

/**
 * Help component used to display a modal interface with help text and the ability to create a mailto ticket.
 *
 * Chrome has added some protection such that mailto links generated by JS cannot be fired without direct user input.
 * In addition, Chrome caches mailto link values so updating the href after initial load will not be ignored unless the component
 * with the href is removed from the dom completely.
 * Displaying the temporary disabled submit button until the mailto address is determined will resolve this issue.
 *
 * @param props customize the component with custom text, and an operation to take when the component is closed.
 */
const HelpModal: FunctionComponent<React.PropsWithChildren<IModalProps>> = ({
  handleCancel,
  handleSubmit,
  show,
  pimsTrainingUrl,
}) => {
  const tenantsState = useAppSelector(state => state.tenants);
  const { getSettings } = useTenants();
  const [mailto, setMailto] = React.useState<IMailMessage | undefined>(undefined);
  const config = tenantsState?.config;

  React.useEffect(() => {
    const update = async () => {
      if (!config) {
        await getSettings(); // TODO: PSP-4402 Determine why the HelpModal is being created two times, which results in two requests to the API.
      }
    };
    update();
  }, [getSettings, config]);

  return (
    <Container>
      <ModalStyled dialogAs={DraggableModalDialog} show={show} onHide={handleCancel}>
        <ModalHeader closeButton>
          <DraggableTitle>
            <FaQuestionCircle size={24} />
            <DraggableTitleText>Help Desk</DraggableTitleText>
          </DraggableTitle>
        </ModalHeader>
        <Modal.Body>
          <H3Styled>Get started with PIMS</H3Styled>
          <p>
            This overview has useful tools that will support you to start using the application. You
            can also watch the video demos.
          </p>
          <LinkStyled target="_blank" href={pimsTrainingUrl}>
            PIMS Resources
          </LinkStyled>
          <hr />
          <HelpModalContentContainer setMailto={setMailto} />
          <StyledConfirmationText>
            Do you want to proceed and send the email?
          </StyledConfirmationText>
          <hr />
        </Modal.Body>

        <Modal.Footer>
          <StyledButton variant="secondary" onClick={handleCancel}>
            No
          </StyledButton>
          {config?.settings?.helpDeskEmail ? (
            <StyledButton
              href={`mailto:${config?.settings?.helpDeskEmail}?subject=${mailto?.subject}&body=${mailto?.body}`}
              onClick={() => {
                handleSubmit();
              }}
            >
              Yes
            </StyledButton>
          ) : (
            <StyledButton disabled>Yes</StyledButton>
          )}
        </Modal.Footer>
      </ModalStyled>
    </Container>
  );
};

/**
 * This wrapper component allows this dialog to be dragged by clicking and dragging the modal header.
 */
const DraggableModalDialog = (props: any) => {
  return (
    <Draggable handle=".modal-title">
      <ModalDialog {...props} />
    </Draggable>
  );
};

/**
 * Stylize the modal component.
 */
const ModalStyled = styled(Modal)`
  .close {
    color: white;
    text-shadow: 0 0.1rem 0 #000;
    opacity: 0.9;
  }
  .modal-body {
    max-height: calc(100vh - 20rem);
    overflow-y: auto;
    padding: 0px 16px;
  }
  .modal-footer {
    border: none;
    padding-right: 16px;
  }
`;

const DraggableTitle = styled(Modal.Title)`
  margin-left: 10px;
  width: 100%;
  cursor: pointer;
  color: white;
`;

const DraggableTitleText = styled.div`
  display: inline-block;
  margin-left: 10px;
`;

const StyledConfirmationText = styled.p`
  margin-top: 24px;
`;

const StyledButton = styled(Button)`
  width: 95px;
  margin-right: 24px;
`;

const LinkStyled = styled.a`
  margin-bottom: 16px;
`;

const H3Styled = styled(H3)`
  border: none;
  margin-bottom: 16px;
  margin-top: 24px;
`;

const ModalHeader = styled(Modal.Header)`
  background-color: ${variables.primaryColor};
  padding: 0.5rem;
`;

export default HelpModal;
