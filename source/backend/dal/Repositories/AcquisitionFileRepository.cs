using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using LinqKit;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Pims.Core.Extensions;
using Pims.Dal.Entities;
using Pims.Dal.Entities.Models;
using Pims.Dal.Helpers.Extensions;

namespace Pims.Dal.Repositories
{
    /// <summary>
    /// Provides a repository to interact with acquisition files within the datasource.
    /// </summary>
    public class AcquisitionFileRepository : BaseRepository<PimsAcquisitionFile>, IAcquisitionFileRepository
    {
        private readonly ISequenceRepository _sequenceRepository;
        #region Constructors

        /// <summary>
        /// Creates a new instance of a AcquisitionFileRepository, and initializes it with the specified arguments.
        /// </summary>
        /// <param name="dbContext"></param>
        /// <param name="user"></param>
        /// <param name="logger"></param>
        public AcquisitionFileRepository(PimsContext dbContext, ClaimsPrincipal user, ILogger<AcquisitionFileRepository> logger, ISequenceRepository sequenceRepository)
            : base(dbContext, user, logger)
        {
            _sequenceRepository = sequenceRepository;
        }
        #endregion

        #region Methods

        /// <summary>
        /// Retrieves a page with an array of acquisition files within the specified filters.
        /// Note that the 'filter' will control the 'page' and 'quantity'.
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="regions"></param>
        /// <returns></returns>
        public Paged<PimsAcquisitionFile> GetPageDeep(AcquisitionFilter filter, HashSet<short> regions, long? contractorPersonId = null)
        {
            // RECOMMENDED - use a log scope to group all potential SQL statements generated by EF for this method call
            using var scope = Logger.QueryScope();

            filter.ThrowIfNull(nameof(filter));
            if (!filter.IsValid())
            {
                throw new ArgumentException("Argument must have a valid filter", nameof(filter));
            }

            IQueryable<PimsAcquisitionFile> query = GetCommonAquisitionFileQueryDeep(filter, regions, contractorPersonId);

            var skip = (filter.Page - 1) * filter.Quantity;
            var pageItems = query.Skip(skip).Take(filter.Quantity).ToList();

            return new Paged<PimsAcquisitionFile>(pageItems, filter.Page, filter.Quantity, query.Count());
        }

        /// <summary>
        /// Get Acquisition Files for Export.
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="regions"></param>
        /// <param name="contractorPersonId"></param>
        /// <returns></returns>
        public List<PimsAcquisitionFile> GetAcquisitionFileExportDeep(AcquisitionFilter filter, HashSet<short> regions, long? contractorPersonId = null)
        {
            // RECOMMENDED - use a log scope to group all potential SQL statements generated by EF for this method call
            using var scope = Logger.QueryScope();

            filter.ThrowIfNull(nameof(filter));
            if (!filter.IsValid())
            {
                throw new ArgumentException("Argument must have a valid filter", nameof(filter));
            }

            return GetCommonAquisitionFileQueryDeep(filter, regions, contractorPersonId).ToList();
        }

        /// <summary>
        /// Retrieves the acquisition file with the specified id.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public PimsAcquisitionFile GetById(long id)
        {
            using var scope = Logger.QueryScope();

            return Context.PimsAcquisitionFiles.AsNoTracking()
                .Include(r => r.AcquisitionFileStatusTypeCodeNavigation)
                .Include(r => r.AcqPhysFileStatusTypeCodeNavigation)
                .Include(r => r.AcquisitionTypeCodeNavigation)
                .Include(r => r.RegionCodeNavigation)
                .Include(r => r.AcquisitionFundingTypeCodeNavigation)
                .Include(r => r.Project)
                    .ThenInclude(x => x.WorkActivityCode)
                .Include(r => r.Project)
                    .ThenInclude(x => x.CostTypeCode)
                .Include(r => r.Project)
                    .ThenInclude(x => x.BusinessFunctionCode)
                .Include(r => r.Product)
                .Include(r => r.PimsPropertyAcquisitionFiles)
                .Include(r => r.PimsAcquisitionFileTeams)
                    .ThenInclude(rp => rp.Person)
                .Include(r => r.PimsAcquisitionFileTeams)
                    .ThenInclude(rp => rp.Organization)
                .Include(r => r.PimsAcquisitionFileTeams)
                    .ThenInclude(rp => rp.PrimaryContact)
                .Include(r => r.PimsAcquisitionFileTeams)
                    .ThenInclude(rp => rp.AcqFlTeamProfileTypeCodeNavigation)
                .Include(r => r.PimsAcquisitionOwners)
                    .ThenInclude(x => x.Address)
                        .ThenInclude(x => x.ProvinceState)
                .Include(r => r.PimsAcquisitionOwners)
                    .ThenInclude(x => x.Address)
                        .ThenInclude(x => x.Country)
                .Include(r => r.PimsInterestHolders)
                    .ThenInclude(rp => rp.InterestHolderTypeCodeNavigation)
                .Include(r => r.PimsInterestHolders)
                    .ThenInclude(rp => rp.Person)
                .Include(r => r.PimsInterestHolders)
                    .ThenInclude(rp => rp.Organization)
                .FirstOrDefault(x => x.AcquisitionFileId == id) ?? throw new KeyNotFoundException();
        }

        /// <summary>
        /// Retrieves the acquisition file with the specified id last update information.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public LastUpdatedByModel GetLastUpdateBy(long id)
        {
            // Acquisition File
            var lastUpdatedByAggregate = new List<LastUpdatedByModel>();
            var fileLastUpdatedBy = this.Context.PimsAcquisitionFiles.AsNoTracking()
                .Where(a => a.AcquisitionFileId == id)
                .Select(a => new LastUpdatedByModel()
                {
                    ParentId = id,
                    AppLastUpdateUserid = a.AppLastUpdateUserid,
                    AppLastUpdateUserGuid = a.AppLastUpdateUserGuid,
                    AppLastUpdateTimestamp = a.AppLastUpdateTimestamp,
                })
                .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
                .Take(1)
                .ToList();
            lastUpdatedByAggregate.AddRange(fileLastUpdatedBy);

            // Acquisition Owners
            var ownersLastUpdatedBy = this.Context.PimsAcquisitionOwners.AsNoTracking()
                .Where(ao => ao.AcquisitionFileId == id)
                .Select(ao => new LastUpdatedByModel()
                {
                    ParentId = id,
                    AppLastUpdateUserid = ao.AppLastUpdateUserid,
                    AppLastUpdateUserGuid = ao.AppLastUpdateUserGuid,
                    AppLastUpdateTimestamp = ao.AppLastUpdateTimestamp,
                })
                .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
                .Take(1)
                .ToList();
            lastUpdatedByAggregate.AddRange(ownersLastUpdatedBy);

            // Acquisition Deleted Owners
            var ownersHistLastUpdatedBy = this.Context.PimsAcquisitionOwnerHists.AsNoTracking()
                .Where(aoh => aoh.AcquisitionFileId == id)
                .Select(aoh => new LastUpdatedByModel()
                {
                    ParentId = id,
                    AppLastUpdateUserid = aoh.AppLastUpdateUserid, // TODO: Update this once the DB tracks the user
                    AppLastUpdateUserGuid = aoh.AppLastUpdateUserGuid, // TODO: Update this once the DB tracks the user
                    AppLastUpdateTimestamp = aoh.EndDateHist ?? DateTime.UnixEpoch,
                })
                .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
                .Take(1)
                .ToList();
            lastUpdatedByAggregate.AddRange(ownersHistLastUpdatedBy);

            // Acquisition Checklist items
            var checklistLastUpdatedBy = this.Context.PimsAcquisitionChecklistItems.AsNoTracking()
              .Where(ac => ac.AcquisitionFileId == id)
              .Select(ac => new LastUpdatedByModel()
              {
                  ParentId = id,
                  AppLastUpdateUserid = ac.AppLastUpdateUserid,
                  AppLastUpdateUserGuid = ac.AppLastUpdateUserGuid,
                  AppLastUpdateTimestamp = ac.AppLastUpdateTimestamp,
              })
              .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
              .Take(1)
              .ToList();
            lastUpdatedByAggregate.AddRange(checklistLastUpdatedBy);

            // Acquisition Team
            var teamLastUpdatedBy = this.Context.PimsAcquisitionFileTeams.AsNoTracking()
              .Where(ap => ap.AcquisitionFileId == id)
              .Select(ap => new LastUpdatedByModel()
              {
                  ParentId = id,
                  AppLastUpdateUserid = ap.AppLastUpdateUserid,
                  AppLastUpdateUserGuid = ap.AppLastUpdateUserGuid,
                  AppLastUpdateTimestamp = ap.AppLastUpdateTimestamp,
              })
              .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
              .Take(1)
              .ToList();
            lastUpdatedByAggregate.AddRange(teamLastUpdatedBy);

            // Acquisition Deleted Team
            // This is needed to get the acquisition team last-updated-by when deleted
            var teamHistLastUpdatedBy = this.Context.PimsAcquisitionFileTeamHists.AsNoTracking()
              .Where(aph => aph.AcquisitionFileId == id)
              .Select(aph => new LastUpdatedByModel()
              {
                  ParentId = id,
                  AppLastUpdateUserid = aph.AppLastUpdateUserid, // TODO: Update this once the DB tracks the user
                  AppLastUpdateUserGuid = aph.AppLastUpdateUserGuid, // TODO: Update this once the DB tracks the user
                  AppLastUpdateTimestamp = aph.EndDateHist ?? DateTime.UnixEpoch,
              })
              .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
              .Take(1)
              .ToList();
            lastUpdatedByAggregate.AddRange(teamHistLastUpdatedBy);

            // Acquisition  Interest Holders
            var interestHolderLastUpdatedBy = this.Context.PimsInterestHolders.AsNoTracking()
              .Where(aih => aih.AcquisitionFileId == id)
              .Select(aih => new LastUpdatedByModel()
              {
                  ParentId = id,
                  AppLastUpdateUserid = aih.AppLastUpdateUserid,
                  AppLastUpdateUserGuid = aih.AppLastUpdateUserGuid,
                  AppLastUpdateTimestamp = aih.AppLastUpdateTimestamp,
              })
              .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
              .Take(1)
              .ToList();
            lastUpdatedByAggregate.AddRange(interestHolderLastUpdatedBy);

            // Acquisition Deleted Interest Holders
            // This is needed to get the acquisition interest holder last-updated-by when deleted
            var interestHolderHistLastUpdatedBy = this.Context.PimsInterestHolderHists.AsNoTracking()
              .Where(aihh => aihh.AcquisitionFileId == id)
              .Select(aihh => new LastUpdatedByModel()
              {
                  ParentId = id,
                  AppLastUpdateUserid = aihh.AppLastUpdateUserid, // TODO: Update this once the DB tracks the user
                  AppLastUpdateUserGuid = aihh.AppLastUpdateUserGuid, // TODO: Update this once the DB tracks the user
                  AppLastUpdateTimestamp = aihh.EndDateHist ?? DateTime.UnixEpoch,
              })
              .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
              .Take(1)
              .ToList();
            lastUpdatedByAggregate.AddRange(interestHolderHistLastUpdatedBy);

            // Acquisition Documents
            var documentsLastUpdatedBy = this.Context.PimsAcquisitionFileDocuments.AsNoTracking()
                .Where(ad => ad.AcquisitionFileId == id)
                .Include(ad => ad.Document)
                .Select(ad => new LastUpdatedByModel()
                {
                    ParentId = id,
                    AppLastUpdateUserid = ad.Document.AppLastUpdateUserid,
                    AppLastUpdateUserGuid = ad.Document.AppLastUpdateUserGuid,
                    AppLastUpdateTimestamp = ad.Document.AppLastUpdateTimestamp,
                })
                .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
                .Take(1)
                .ToList();
            lastUpdatedByAggregate.AddRange(documentsLastUpdatedBy);

            // Acquisition Deleted Documents
            // This is needed to get the document last-updated-by from the document that where deleted
            var documentsHistoryLastUpdatedBy = this.Context.PimsAcquisitionFileDocumentHists.AsNoTracking()
                .Where(adh => adh.AcquisitionFileId == id)
                .Select(adh => new LastUpdatedByModel()
                {
                    ParentId = id,
                    AppLastUpdateUserid = adh.AppLastUpdateUserid, // TODO: Update this once the DB tracks the user
                    AppLastUpdateUserGuid = adh.AppLastUpdateUserGuid, // TODO: Update this once the DB tracks the user
                    AppLastUpdateTimestamp = adh.EndDateHist ?? DateTime.UnixEpoch,
                })
                .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
                .Take(1)
                .ToList();
            lastUpdatedByAggregate.AddRange(documentsHistoryLastUpdatedBy);

            // Acquisition Notes
            var notesLastUpdatedBy = this.Context.PimsAcquisitionFileNotes.AsNoTracking()
                .Where(an => an.AcquisitionFileId == id)
                .Include(an => an.Note)
                .Select(an => new LastUpdatedByModel()
                {
                    ParentId = id,
                    AppLastUpdateUserid = an.Note.AppLastUpdateUserid,
                    AppLastUpdateUserGuid = an.Note.AppLastUpdateUserGuid,
                    AppLastUpdateTimestamp = an.Note.AppLastUpdateTimestamp,
                })
                .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
                .Take(1)
                .ToList();
            lastUpdatedByAggregate.AddRange(notesLastUpdatedBy);

            // Acquisition Deleted Notes
            // This is needed to get the document last-updated-by from the document that where deleted
            var notesHistoryLastUpdatedBy = this.Context.PimsAcquisitionFileNoteHists.AsNoTracking()
                .Where(anh => anh.AcquisitionFileId == id)
                .Select(anh => new LastUpdatedByModel()
                {
                    ParentId = id,
                    AppLastUpdateUserid = anh.AppLastUpdateUserid, // TODO: Update this once the DB tracks the user
                    AppLastUpdateUserGuid = anh.AppLastUpdateUserGuid, // TODO: Update this once the DB tracks the user
                    AppLastUpdateTimestamp = anh.EndDateHist ?? DateTime.UnixEpoch,
                })
                .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
                .Take(1)
                .ToList();
            lastUpdatedByAggregate.AddRange(notesHistoryLastUpdatedBy);

            // Acquisition Properties
            var propertiesLastUpdatedBy = this.Context.PimsPropertyAcquisitionFiles.AsNoTracking()
                .Where(ap => ap.AcquisitionFileId == id)
                .Select(ap => new LastUpdatedByModel()
                {
                    ParentId = id,
                    AppLastUpdateUserid = ap.AppLastUpdateUserid,
                    AppLastUpdateUserGuid = ap.AppLastUpdateUserGuid,
                    AppLastUpdateTimestamp = ap.AppLastUpdateTimestamp,
                })
                .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
                .Take(1)
                .ToList();
            lastUpdatedByAggregate.AddRange(propertiesLastUpdatedBy);

            // Acquisition Deleted Properties
            // This is needed to get the notes last-updated-by from the notes that where deleted
            var propertiesHistoryLastUpdatedBy = this.Context.PimsPropertyAcquisitionFileHists.AsNoTracking()
            .Where(aph => aph.AcquisitionFileId == id)
            .Select(aph => new LastUpdatedByModel()
            {
                ParentId = id,
                AppLastUpdateUserid = aph.AppLastUpdateUserid, // TODO: Update this once the DB tracks the user
                AppLastUpdateUserGuid = aph.AppLastUpdateUserGuid, // TODO: Update this once the DB tracks the user
                AppLastUpdateTimestamp = aph.EndDateHist ?? DateTime.UnixEpoch,
            })
            .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
            .Take(1)
            .ToList();
            lastUpdatedByAggregate.AddRange(propertiesHistoryLastUpdatedBy);

            // Acquisition Takes
            var takesLastUpdatedBy = this.Context.PimsTakes.AsNoTracking()
                .Include(at => at.PropertyAcquisitionFile)
                .Where(at => at.PropertyAcquisitionFile.AcquisitionFileId == id)
                .Select(apt => new LastUpdatedByModel()
                {
                    ParentId = id,
                    AppLastUpdateUserid = apt.AppLastUpdateUserid,
                    AppLastUpdateUserGuid = apt.AppLastUpdateUserGuid,
                    AppLastUpdateTimestamp = apt.AppLastUpdateTimestamp,
                })
                .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
                .Take(1)
                .ToList();
            lastUpdatedByAggregate.AddRange(takesLastUpdatedBy);

            // Acquisition Deleted Takes
            // This is needed to get the notes last-updated-by from the notes that where deleted
            var takeHists = this.Context.PimsTakeHists.AsNoTracking();
            var takesHistoryLastUpdatedBy = this.Context.PimsPropertyAcquisitionFileHists.AsNoTracking()
            .Where(at => at.AcquisitionFileId == id)
            .Join(
                    takeHists,
                    propAcqHist => propAcqHist.PropertyAcquisitionFileId,
                    takeHist => takeHist.PropertyAcquisitionFileId,
                    (acqPropHist, takeHist) => new LastUpdatedByModel()
                    {
                        ParentId = id,
                        AppLastUpdateUserid = takeHist.AppLastUpdateUserid, // TODO: Update this once the DB tracks the user
                        AppLastUpdateUserGuid = takeHist.AppLastUpdateUserGuid, // TODO: Update this once the DB tracks the user
                        AppLastUpdateTimestamp = takeHist.EndDateHist ?? DateTime.UnixEpoch,
                    })
            .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
            .Take(1)
            .ToList();
            lastUpdatedByAggregate.AddRange(takesHistoryLastUpdatedBy);

            // Acquisition Compensation Requisition
            var compensationLastUpdatedBy = this.Context.PimsCompensationRequisitions.AsNoTracking()
                .Where(acr => acr.AcquisitionFileId == id)
                .Select(acr => new LastUpdatedByModel()
                {
                    ParentId = id,
                    AppLastUpdateUserid = acr.AppLastUpdateUserid,
                    AppLastUpdateUserGuid = acr.AppLastUpdateUserGuid,
                    AppLastUpdateTimestamp = acr.AppLastUpdateTimestamp,
                })
                .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
                .Take(1)
                .ToList();
            lastUpdatedByAggregate.AddRange(compensationLastUpdatedBy);

            // Acquisition Deleted Compensation Requisition
            // This is needed to get the notes last-updated-by from the notes that where deleted
            var compensationHistoryLastUpdatedBy = this.Context.PimsCompensationRequisitionHists.AsNoTracking()
            .Where(acrh => acrh.AcquisitionFileId == id)
            .Select(acrh => new LastUpdatedByModel()
            {
                ParentId = id,
                AppLastUpdateUserid = acrh.AppLastUpdateUserid, // TODO: Update this once the DB tracks the user
                AppLastUpdateUserGuid = acrh.AppLastUpdateUserGuid, // TODO: Update this once the DB tracks the user
                AppLastUpdateTimestamp = acrh.EndDateHist ?? DateTime.UnixEpoch,
            })
            .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
            .Take(1)
            .ToList();
            lastUpdatedByAggregate.AddRange(compensationHistoryLastUpdatedBy);

            // Acquisition Compensation Requsition Financials
            var financialsLastUpdatedBy = this.Context.PimsCompReqFinancials.AsNoTracking()
                .Include(acrf => acrf.CompensationRequisition)
                .Where(acrf => acrf.CompensationRequisition.AcquisitionFileId == id)
                .Select(acrf => new LastUpdatedByModel()
                {
                    ParentId = id,
                    AppLastUpdateUserid = acrf.AppLastUpdateUserid,
                    AppLastUpdateUserGuid = acrf.AppLastUpdateUserGuid,
                    AppLastUpdateTimestamp = acrf.AppLastUpdateTimestamp,
                })
                .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
                .Take(1)
                .ToList();
            lastUpdatedByAggregate.AddRange(financialsLastUpdatedBy);

            // Acquisition Deleted Compensation Requsition Financials
            // This is needed to get the notes last-updated-by from the notes that where deleted
            var financialHists = this.Context.PimsCompReqFinancialHists.AsNoTracking();
            var compreqHistoryLastUpdatedBy = this.Context.PimsCompensationRequisitionHists.AsNoTracking()
            .Where(at => at.AcquisitionFileId == id)
            .Join(
                    financialHists,
                    compReqHist => compReqHist.CompensationRequisitionId,
                    financialHist => financialHist.CompensationRequisitionId,
                    (compReqHist, compReqFinHist) => new LastUpdatedByModel()
                    {
                        ParentId = id,
                        AppLastUpdateUserid = compReqFinHist.AppLastUpdateUserid, // TODO: Update this once the DB tracks the user
                        AppLastUpdateUserGuid = compReqFinHist.AppLastUpdateUserGuid, // TODO: Update this once the DB tracks the user
                        AppLastUpdateTimestamp = compReqFinHist.EndDateHist ?? DateTime.UnixEpoch,
                    })
            .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
            .Take(1)
            .ToList();
            lastUpdatedByAggregate.AddRange(compreqHistoryLastUpdatedBy);

            // Acquisition Expropiation Payments
            var expPaymentsLastUpdatedBy = this.Context.PimsExpropriationPayments.AsNoTracking()
                .Where(aep => aep.AcquisitionFileId == id)
                .Select(aep => new LastUpdatedByModel()
                {
                    ParentId = id,
                    AppLastUpdateUserid = aep.AppLastUpdateUserid,
                    AppLastUpdateUserGuid = aep.AppLastUpdateUserGuid,
                    AppLastUpdateTimestamp = aep.AppLastUpdateTimestamp,
                })
                .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
                .Take(1)
                .ToList();
            lastUpdatedByAggregate.AddRange(expPaymentsLastUpdatedBy);

            // Acquisition Deleted Expropiation Payments
            // This is needed to get the notes last-updated-by from the notes that where deleted
            var expPaymentsHistoryLastUpdatedBy = this.Context.PimsExpropriationPaymentHists.AsNoTracking()
            .Where(aeph => aeph.AcquisitionFileId == id)
            .Select(aeph => new LastUpdatedByModel()
            {
                ParentId = id,
                AppLastUpdateUserid = aeph.AppLastUpdateUserid, // TODO: Update this once the DB tracks the user
                AppLastUpdateUserGuid = aeph.AppLastUpdateUserGuid, // TODO: Update this once the DB tracks the user
                AppLastUpdateTimestamp = aeph.EndDateHist ?? DateTime.UnixEpoch,
            })
            .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
            .Take(1)
            .ToList();
            lastUpdatedByAggregate.AddRange(expPaymentsHistoryLastUpdatedBy);

            // Acquisition Expropiation payments
            var expPaymentsItemsLastUpdatedBy = this.Context.PimsExpropPmtPmtItems.AsNoTracking()
                .Include(aepi => aepi.ExpropriationPayment)
                .Where(aepi => aepi.ExpropriationPayment.AcquisitionFileId == id)
                .Select(aepi => new LastUpdatedByModel()
                {
                    ParentId = id,
                    AppLastUpdateUserid = aepi.AppLastUpdateUserid,
                    AppLastUpdateUserGuid = aepi.AppLastUpdateUserGuid,
                    AppLastUpdateTimestamp = aepi.AppLastUpdateTimestamp,
                })
                .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
                .Take(1)
                .ToList();
            lastUpdatedByAggregate.AddRange(expPaymentsItemsLastUpdatedBy);

            // Acquisition Deleted Expropiation payments
            // This is needed to get the notes last-updated-by from the notes that where deleted
            var expItemHists = this.Context.PimsExpropPmtPmtItemHists.AsNoTracking();
            var expHistoryLastUpdatedBy = this.Context.PimsExpropriationPaymentHists.AsNoTracking()
            .Where(at => at.AcquisitionFileId == id)
            .Join(
                    expItemHists,
                    expPaymentHist => expPaymentHist.ExpropriationPaymentId,
                    expItemHist => expItemHist.ExpropriationPaymentId,
                    (expPaymentHist, expItemHist) => new LastUpdatedByModel()
                    {
                        ParentId = id,
                        AppLastUpdateUserid = expItemHist.AppLastUpdateUserid, // TODO: Update this once the DB tracks the user
                        AppLastUpdateUserGuid = expItemHist.AppLastUpdateUserGuid, // TODO: Update this once the DB tracks the user
                        AppLastUpdateTimestamp = expItemHist.EndDateHist ?? DateTime.UnixEpoch,
                    })
            .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
            .Take(1)
            .ToList();
            lastUpdatedByAggregate.AddRange(expHistoryLastUpdatedBy);

            // Acquisition Agreements
            var agreementsLastUpdatedBy = this.Context.PimsAgreements.AsNoTracking()
                .Where(aa => aa.AcquisitionFileId == id)
                .Select(aa => new LastUpdatedByModel()
                {
                    ParentId = id,
                    AppLastUpdateUserid = aa.AppLastUpdateUserid,
                    AppLastUpdateUserGuid = aa.AppLastUpdateUserGuid,
                    AppLastUpdateTimestamp = aa.AppLastUpdateTimestamp,
                })
                .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
                .Take(1)
                .ToList();
            lastUpdatedByAggregate.AddRange(agreementsLastUpdatedBy);

            // Acquisition Deleted Agreements
            // This is needed to get the notes last-updated-by from the notes that where deleted
            var agreementsHistoryLastUpdatedBy = this.Context.PimsAgreementHists.AsNoTracking()
            .Where(aah => aah.AcquisitionFileId == id)
            .Select(aah => new LastUpdatedByModel()
            {
                ParentId = id,
                AppLastUpdateUserid = aah.AppLastUpdateUserid, // TODO: Update this once the DB tracks the user
                AppLastUpdateUserGuid = aah.AppLastUpdateUserGuid, // TODO: Update this once the DB tracks the user
                AppLastUpdateTimestamp = aah.EndDateHist ?? DateTime.UnixEpoch,
            })
            .OrderByDescending(lu => lu.AppLastUpdateTimestamp)
            .Take(1)
            .ToList();
            lastUpdatedByAggregate.AddRange(agreementsHistoryLastUpdatedBy);

            return lastUpdatedByAggregate.OrderByDescending(x => x.AppLastUpdateTimestamp).FirstOrDefault();
        }

        public List<PimsAcquisitionOwner> GetOwnersByAcquisitionFileId(long acquisitionFileId)
        {
            return Context.PimsAcquisitionOwners
                .Where(x => x.AcquisitionFileId == acquisitionFileId)
                .Include(x => x.Address)
                    .ThenInclude(x => x.RegionCodeNavigation)
                .Include(x => x.Address)
                    .ThenInclude(x => x.Country)
                .Include(x => x.Address)
                    .ThenInclude(x => x.ProvinceState)
                .Include(x => x.Address)
                    .ThenInclude(x => x.DistrictCodeNavigation)
                .AsNoTracking()
                .ToList();
        }

        public List<PimsAcquisitionFileTeam> GetTeamMembers(HashSet<short> regions, long? contractorPersonId = null)
        {
            var predicate = PredicateBuilder.New<PimsAcquisitionFileTeam>(acq => true);

            predicate.And(x => regions.Contains(x.AcquisitionFile.RegionCode));

            if (contractorPersonId != null)
            {
                predicate.And(x => x.AcquisitionFile.PimsAcquisitionFileTeams.Any(p => p.PersonId == contractorPersonId));
            }

            return Context.PimsAcquisitionFileTeams.Include(x => x.AcquisitionFile)
                .Include(x => x.Person)
                .AsNoTracking()
                .Where(predicate)
                .AsEnumerable()
                .DistinctBy(x => x.PersonId).ToList();
        }

        /// <summary>
        /// Adds the specified acquisition file to the datasource.
        /// </summary>
        /// <param name="acquisitionFile"></param>
        /// <returns></returns>
        public PimsAcquisitionFile Add(PimsAcquisitionFile acquisitionFile)
        {
            using var scope = Logger.QueryScope();
            acquisitionFile.ThrowIfNull(nameof(acquisitionFile));

            // Existing properties should not be added.
            foreach (var acquisitionProperty in acquisitionFile.PimsPropertyAcquisitionFiles)
            {
                if (acquisitionProperty.Property.Internal_Id != 0)
                {
                    acquisitionProperty.Property = null;
                }
            }

            int nextFileNo = GetNextAcquisitionFileNumberSequenceValue();
            acquisitionFile.FileNo = nextFileNo;
            acquisitionFile.FileNumber = GenerateAcquisitionNumber(acquisitionFile.RegionCode, nextFileNo);

            Context.PimsAcquisitionFiles.Add(acquisitionFile);
            return acquisitionFile;
        }

        /// <summary>
        /// Updates the specified acquisition file.
        /// </summary>
        /// <param name="acquisitionFile"></param>
        /// <returns></returns>
        public PimsAcquisitionFile Update(PimsAcquisitionFile acquisitionFile)
        {
            using var scope = Logger.QueryScope();
            acquisitionFile.ThrowIfNull(nameof(acquisitionFile));

            var existingAcqFile = Context.PimsAcquisitionFiles
                .FirstOrDefault(x => x.AcquisitionFileId == acquisitionFile.Internal_Id) ?? throw new KeyNotFoundException();

            // PSP-4413 Changing the MOTI region triggers an update to the ACQ File Number
            if (existingAcqFile.RegionCode != acquisitionFile.RegionCode)
            {
                acquisitionFile.FileNo = existingAcqFile.FileNo;
                acquisitionFile.FileNumber = GenerateAcquisitionNumber(acquisitionFile.RegionCode, acquisitionFile.FileNo);
            }
            else
            {
                // Make sure the frontend cannot override these auto-generated fields
                acquisitionFile.FileNo = existingAcqFile.FileNo;
                acquisitionFile.FileNumber = existingAcqFile.FileNumber;
            }

            Context.Entry(existingAcqFile).CurrentValues.SetValues(acquisitionFile);
            Context.UpdateChild<PimsAcquisitionFile, long, PimsAcquisitionFileTeam, long>(p => p.PimsAcquisitionFileTeams, acquisitionFile.Internal_Id, acquisitionFile.PimsAcquisitionFileTeams.ToArray());
            Context.UpdateChild<PimsAcquisitionFile, long, PimsInterestHolder, long>(p => p.PimsInterestHolders, acquisitionFile.Internal_Id, acquisitionFile.PimsInterestHolders.ToArray());
            Context.UpdateGrandchild<PimsAcquisitionFile, long, PimsAcquisitionOwner>(o => o.PimsAcquisitionOwners, oa => oa.Address, acquisitionFile.Internal_Id, acquisitionFile.PimsAcquisitionOwners.ToArray());

            return acquisitionFile;
        }

        /// <summary>
        /// Retrieves the version of the acquisition file with the specified id.
        /// </summary>
        /// <param name="id"></param>
        /// <returns>The file row version.</returns>
        public long GetRowVersion(long id)
        {
            using var scope = Logger.QueryScope();

            return this.Context.PimsAcquisitionFiles.AsNoTracking()
                .Where(p => p.AcquisitionFileId == id)?
                .Select(p => p.ConcurrencyControlNumber)?
                .FirstOrDefault() ?? throw new KeyNotFoundException();
        }

        /// <summary>
        /// Retrieves the region of the acquisition file with the specified id.
        /// </summary>
        /// <param name="id"></param>
        /// <returns>The file region.</returns>
        public short GetRegion(long id)
        {
            using var scope = Logger.QueryScope();

            return this.Context.PimsAcquisitionFiles.AsNoTracking()
                .Where(p => p.AcquisitionFileId == id)?
                .Select(p => p.RegionCode)?
                .FirstOrDefault() ?? throw new KeyNotFoundException();
        }

        public List<PimsAcquisitionFile> GetByProductId(long productId)
        {
            return this.Context.PimsAcquisitionFiles.AsNoTracking()
                .Where(a => a.ProductId == productId).ToList();
        }

        /// <summary>
        /// Generates a new Acquisition Number in the following format.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        /// Format: YY-XXXXXXXXXXXX-ZZ
        /// </item>
        /// <item>
        /// Prefix - (YY above) The prefix numbers for an Acquisition file correspond with the MoTI region
        /// </item>
        /// <item>
        /// File # - (XXXXX... above) Acquisition File number is created and each file number should increase in increments of 1.
        /// The digit base number is unique to the file. Do not pad the number with zeros.
        /// </item>
        /// <item>
        /// Suffix - (ZZ above) The suffix numbers for an Acquisition file defaults to 01.
        /// </item>
        /// </list>
        /// </remarks>
        /// <returns>The formatted Acquisition File Number.</returns>
        private static string GenerateAcquisitionNumber(short prefix, long fileNumber, short suffix = 1)
        {
            return $"{prefix:00}-{fileNumber}-{suffix:00}";
        }

        /// <summary>
        /// Get the next available value from PIMS_ACQUISITION_FILE_NO_SEQ.
        /// </summary>
        /// <returns>The next value for the sequence.</returns>
        private int GetNextAcquisitionFileNumberSequenceValue()
        {
            return (int)_sequenceRepository.GetNextSequenceValue("dbo.PIMS_ACQUISITION_FILE_NO_SEQ");
        }

        /// <summary>
        /// Generate a Commeon IQueryable for Aquisition Files.
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="regions"></param>
        /// <param name="contractorPersonId"></param>
        /// <returns></returns>
        private IQueryable<PimsAcquisitionFile> GetCommonAquisitionFileQueryDeep(AcquisitionFilter filter, HashSet<short> regions, long? contractorPersonId = null)
        {
            var predicate = PredicateBuilder.New<PimsAcquisitionFile>(acq => true);

            if (!string.IsNullOrWhiteSpace(filter.Pid))
            {
                var pidValue = filter.Pid.Replace("-", string.Empty).Trim().TrimStart('0');
                predicate = predicate.And(acq => acq.PimsPropertyAcquisitionFiles.Any(pa => pa != null && EF.Functions.Like(pa.Property.Pid.ToString(), $"%{pidValue}%")));
            }

            if (!string.IsNullOrWhiteSpace(filter.Pin))
            {
                var pinValue = filter.Pin.Replace("-", string.Empty).Trim().TrimStart('0');
                predicate = predicate.And(acq => acq.PimsPropertyAcquisitionFiles.Any(pa => pa != null && EF.Functions.Like(pa.Property.Pin.ToString(), $"%{pinValue}%")));
            }

            if (!string.IsNullOrWhiteSpace(filter.Address))
            {
                predicate = predicate.And(acq => acq.PimsPropertyAcquisitionFiles.Any(pa => pa != null &&
                    (EF.Functions.Like(pa.Property.Address.StreetAddress1, $"%{filter.Address}%") ||
                    EF.Functions.Like(pa.Property.Address.StreetAddress2, $"%{filter.Address}%") ||
                    EF.Functions.Like(pa.Property.Address.StreetAddress3, $"%{filter.Address}%") ||
                    EF.Functions.Like(pa.Property.Address.MunicipalityName, $"%{filter.Address}%"))));
            }

            if (!string.IsNullOrWhiteSpace(filter.AcquisitionFileStatusTypeCode))
            {
                predicate = predicate.And(acq => acq.AcquisitionFileStatusTypeCode == filter.AcquisitionFileStatusTypeCode);
            }

            if (!string.IsNullOrWhiteSpace(filter.AcquisitionFileNameOrNumber))
            {
                predicate = predicate.And(r => EF.Functions.Like(r.FileName, $"%{filter.AcquisitionFileNameOrNumber}%") || EF.Functions.Like(r.FileNumber, $"%{filter.AcquisitionFileNameOrNumber}%") || EF.Functions.Like(r.LegacyFileNumber, $"%{filter.AcquisitionFileNameOrNumber}%"));
            }

            if (!string.IsNullOrWhiteSpace(filter.ProjectNameOrNumber))
            {
                predicate = predicate.And(acq => EF.Functions.Like(acq.Project.Code, $"%{filter.ProjectNameOrNumber}%") || EF.Functions.Like(acq.Project.Description, $"%{filter.ProjectNameOrNumber}%")
                || acq.PimsCompensationRequisitions.Any(cr => EF.Functions.Like(cr.AlternateProject.Code, $"%{filter.ProjectNameOrNumber}%") || acq.PimsCompensationRequisitions.Any(cr => EF.Functions.Like(cr.AlternateProject.Description, $"%{filter.ProjectNameOrNumber}%"))));
            }

            predicate = predicate.And(acq => regions.Contains(acq.RegionCode));

            if (contractorPersonId is not null)
            {
                predicate = predicate.And(acq => acq.PimsAcquisitionFileTeams.Any(x => x.PersonId == contractorPersonId));
            }

            if (!string.IsNullOrWhiteSpace(filter.AcquisitionTeamMemberPersonId))
            {
                predicate = predicate.And(acq => acq.PimsAcquisitionFileTeams.Any(x => x.PersonId == long.Parse(filter.AcquisitionTeamMemberPersonId)));
            }

            var query = Context.PimsAcquisitionFiles.AsNoTracking()
                .Include(r => r.RegionCodeNavigation)
                .Include(p => p.Project)
                .Include(s => s.AcquisitionFileStatusTypeCodeNavigation)
                .Include(f => f.AcquisitionFundingTypeCodeNavigation)
                .Include(ph => ph.AcqPhysFileStatusTypeCodeNavigation)
                .Include(t => t.AcquisitionTypeCodeNavigation)
                .Include(tm => tm.PimsAcquisitionFileTeams)
                    .ThenInclude(c => c.Person)
                .Include(tm => tm.PimsAcquisitionFileTeams)
                    .ThenInclude(c => c.AcqFlTeamProfileTypeCodeNavigation)
                .Include(ow => ow.PimsAcquisitionOwners)
                .Include(fp => fp.PimsPropertyAcquisitionFiles)
                    .ThenInclude(prop => prop.Property)
                    .ThenInclude(ad => ad.Address)
                    .ThenInclude(x => x.ProvinceState)
                .Include(fp => fp.PimsPropertyAcquisitionFiles)
                    .ThenInclude(prop => prop.Property)
                    .ThenInclude(ad => ad.Address)
                    .ThenInclude(x => x.Country)
                .Include(fp => fp.PimsCompensationRequisitions)
                    .ThenInclude(fp => fp.AlternateProject)
                .Where(predicate);

            query = (filter.Sort?.Any() == true) ? query.OrderByProperty(filter.Sort) : query.OrderBy(acq => acq.AcquisitionFileId);

            return query;
        }

        #endregion
    }
}
